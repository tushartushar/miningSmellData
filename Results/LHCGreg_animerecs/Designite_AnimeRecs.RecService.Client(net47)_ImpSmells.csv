Implementation smell,Namespace,Class,File,Method,Description
Long Method,AnimeRecs.RecService.Client,Program,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.RecService.Client\Program.cs,Main,The method has 140 lines of code.
Complex Method,AnimeRecs.RecService.Client,Program,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.RecService.Client\Program.cs,Main,Cyclomatic complexity of the method is 15
Complex Method,AnimeRecs.RecService.Client.Registrations.Output,ResultsPrinter,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.RecService.Client\Registrations\Output\ResultsPrinter.AnimeRecs.cs,PrintAnimeRecsResults,Cyclomatic complexity of the method is 14
Long Statement,AnimeRecs.RecService.Client,CommandLineArgs,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.RecService.Client\CommandLineArgs.cs,GetOptionSet,The length of the statement  "                { "c|command="' "Command. Possible commands are Ping' LoadRecSource' GetRecSourceType' GetMalRecs' ReloadTrainingData' FinalizeRecSources' and UnloadRecSource."' arg => SetCommand(arg) }' " is 187.
Long Statement,AnimeRecs.RecService.Client,CommandLineArgs,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.RecService.Client\CommandLineArgs.cs,GetOptionSet,The length of the statement  "                { "ping_message="' "Message to send with a ping command. Used with the Ping command. Defaults to \"ping\"."' arg => PingMessage = arg }' " is 136.
Long Statement,AnimeRecs.RecService.Client,CommandLineArgs,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.RecService.Client\CommandLineArgs.cs,GetOptionSet,The length of the statement  "                { "finalize"' "Finalize the rec sources loaded after the reload is complete to reduce memory usage. Used with the ReloadTrainingData command."' argExistence => Finalize = (argExistence != null) }' " is 196.
Long Statement,AnimeRecs.RecService.Client,CommandLineArgs,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.RecService.Client\CommandLineArgs.cs,GetOptionSet,The length of the statement  "                { "name|rec_source_name="' "Rec source name. Used with the LoadRecSource' GetRecSourceType' UnloadRecSource' and GetMalRecs commands. Defaults to \"default\""' arg => RecSourceName = arg }' " is 189.
Long Statement,AnimeRecs.RecService.Client,CommandLineArgs,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.RecService.Client\CommandLineArgs.cs,GetOptionSet,The length of the statement  "                { "reload_mode="' "Used with ReloadTrainingData. Possible values are HighAvailability and LowMemory. Defaults to HighAvailability. HighAvailability: Keep the old training data and rec sources in memory while the reload/retrain is going on to keep the rec service serving requests. Requires around twice the amount of memory normally consumed. LowMemory: Drop the old training data and rec sources before starting the reload/retrain. This avoids using double normal memory but means the rec service cannot give recommendations while the reload/retrain is going on."' arg => SetReloadMode(arg) }' " is 594.
Long Statement,AnimeRecs.RecService.Client,CommandLineArgs,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.RecService.Client\CommandLineArgs.cs,GetOptionSet,The length of the statement  "                { "force"' "Replace an existing rec source. Used with the LoadRecSource command"' argExistence => ReplaceExistingRecSource = (argExistence != null) }' " is 150.
Long Statement,AnimeRecs.RecService.Client,CommandLineArgs,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.RecService.Client\CommandLineArgs.cs,GetOptionSet,The length of the statement  "                { "min_episodes_to_count_incomplete="' "Minimum episodes to count the rating of a show a user is currently watched. Used with the LoadRecSource command with the AverageScore' MostPopular' and AnimeRecs rec source types. Defaults to 26."' " is 237.
Long Statement,AnimeRecs.RecService.Client,CommandLineArgs,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.RecService.Client\CommandLineArgs.cs,GetOptionSet,The length of the statement  "                    arg => { MinEpisodesToCountIncomplete = int.Parse(arg); BiasedMatrixFactorizationParams.MinEpisodesToCountIncomplete = int.Parse(arg); } }' " is 139.
Long Statement,AnimeRecs.RecService.Client,CommandLineArgs,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.RecService.Client\CommandLineArgs.cs,GetOptionSet,The length of the statement  "                { "use_dropped"' "Count dropped anime. Used with the LoadRecSource command with the AverageScore and MostPopular rec source types. Defaults to false for MostPopular' true for everything else."' " is 193.
Long Statement,AnimeRecs.RecService.Client,CommandLineArgs,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.RecService.Client\CommandLineArgs.cs,GetOptionSet,The length of the statement  "                    argExistence => { UseDropped = (argExistence != null); BiasedMatrixFactorizationParams.UseDropped = (argExistence != null); } }' " is 128.
Long Statement,AnimeRecs.RecService.Client,CommandLineArgs,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.RecService.Client\CommandLineArgs.cs,GetOptionSet,The length of the statement  "                { "min_users_to_count_anime="' "Minimum users to have seen an anime for it to be considered by the recommendation algorithm. Used by the LoadRecSource command with the AverageScore and BiasedMatrixFactorization rec source types. Defaults to 50."' " is 246.
Long Statement,AnimeRecs.RecService.Client,CommandLineArgs,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.RecService.Client\CommandLineArgs.cs,GetOptionSet,The length of the statement  "                    arg => { MinUsersToCountAnime = int.Parse(arg); BiasedMatrixFactorizationParams.MinUsersToCountAnime = int.Parse(arg); } }' " is 123.
Long Statement,AnimeRecs.RecService.Client,CommandLineArgs,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.RecService.Client\CommandLineArgs.cs,GetOptionSet,The length of the statement  "                { "num_recommenders_to_use="' "Number of recommenders to use for the AnimeRecs rec source. Used by the LoadRecSource command with the AnimeRecs rec source type. Defaults to 100."' " is 179.
Long Statement,AnimeRecs.RecService.Client,CommandLineArgs,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.RecService.Client\CommandLineArgs.cs,GetOptionSet,The length of the statement  "                { "percent_recommended="' "Percentage of anime seen that a recommender recommends. Used by the LoadRecSource command with the AnimeRecs rec source type. Defaults to 35."' " is 170.
Long Statement,AnimeRecs.RecService.Client,CommandLineArgs,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.RecService.Client\CommandLineArgs.cs,GetOptionSet,The length of the statement  "                { "n|num_recs="' "Number of recommendations to get. Used by the GetMalRecs command. Defaults to 50."' arg => NumRecs = int.Parse(arg) }' " is 136.
Long Statement,AnimeRecs.RecService.Client,CommandLineArgs,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.RecService.Client\CommandLineArgs.cs,GetOptionSet,The length of the statement  "                { "t|target_score="' "Target score. Used with the GetMalRecs command. Only used by some rec sources. Defaults to 8."' arg => TargetScore = decimal.Parse(arg) }' " is 160.
Long Statement,AnimeRecs.RecService.Client,CommandLineArgs,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.RecService.Client\CommandLineArgs.cs,GetOptionSet,The length of the statement  "                { "bias_learn_rate="' "Used when loading a BiasedMatrixFactorization rec source. Defaults to 1."' arg => BiasedMatrixFactorizationParams.BiasLearnRate = float.Parse(arg) }' " is 172.
Long Statement,AnimeRecs.RecService.Client,CommandLineArgs,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.RecService.Client\CommandLineArgs.cs,GetOptionSet,The length of the statement  "                { "bias_reg="' "Used when loading a BiasedMatrixFactorization rec source. Defaults to 0.01."' arg => BiasedMatrixFactorizationParams.BiasReg = float.Parse(arg) }' " is 162.
Long Statement,AnimeRecs.RecService.Client,CommandLineArgs,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.RecService.Client\CommandLineArgs.cs,GetOptionSet,The length of the statement  "                { "bold_driver"' "Used when loading a BiasedMatrixFactorization rec source. Defaults to false."' argExistence => BiasedMatrixFactorizationParams.BoldDriver = (argExistence != null) }' " is 183.
Long Statement,AnimeRecs.RecService.Client,CommandLineArgs,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.RecService.Client\CommandLineArgs.cs,GetOptionSet,The length of the statement  "                { "frequency_regularization"' "Used when loading a BiasedMatrixFactorization rec source. Defaults to false."' argExistence => BiasedMatrixFactorizationParams.FrequencyRegularization = (argExistence != null) }' " is 209.
Long Statement,AnimeRecs.RecService.Client,CommandLineArgs,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.RecService.Client\CommandLineArgs.cs,GetOptionSet,The length of the statement  "                { "learn_rate="' "Used when loading a BiasedMatrixFactorization rec source. Defaults to 0.01."' arg => BiasedMatrixFactorizationParams.LearnRate = float.Parse(arg) }' " is 166.
Long Statement,AnimeRecs.RecService.Client,CommandLineArgs,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.RecService.Client\CommandLineArgs.cs,GetOptionSet,The length of the statement  "                { "optimization_target="' "Used when loading a BiasedMatrixFactorization rec source. Must be LogisticLoss' MAE' or RMSE. Defaults to RMSE."' arg => SetOptimizationTarget(arg) }' " is 177.
Long Statement,AnimeRecs.RecService.Client,CommandLineArgs,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.RecService.Client\CommandLineArgs.cs,GetOptionSet,The length of the statement  "                { "num_factors="' "Used when loading a BiasedMatrixFactorization rec source. Defaults to 10."' arg => BiasedMatrixFactorizationParams.NumFactors = uint.Parse(arg) }' " is 165.
Long Statement,AnimeRecs.RecService.Client,CommandLineArgs,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.RecService.Client\CommandLineArgs.cs,GetOptionSet,The length of the statement  "                { "num_iter="' "Used when loading a BiasedMatrixFactorization rec source. Defaults to 30."' arg => BiasedMatrixFactorizationParams.NumIter = uint.Parse(arg) }' " is 159.
Long Statement,AnimeRecs.RecService.Client,CommandLineArgs,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.RecService.Client\CommandLineArgs.cs,GetOptionSet,The length of the statement  "                { "reg_i="' "Used when loading a BiasedMatrixFactorization rec source. Defaults to 0.015."' arg => BiasedMatrixFactorizationParams.RegI = float.Parse(arg) }' " is 157.
Long Statement,AnimeRecs.RecService.Client,CommandLineArgs,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.RecService.Client\CommandLineArgs.cs,GetOptionSet,The length of the statement  "                { "reg_u="' "Used when loading a BiasedMatrixFactorization rec source. Defaults to 0.015."' arg => BiasedMatrixFactorizationParams.RegU = float.Parse(arg) }' " is 157.
Long Statement,AnimeRecs.RecService.Client,CommandLineArgs,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.RecService.Client\CommandLineArgs.cs,SetOptimizationTarget,The length of the statement  "                throw new OptionException(string.Format("{0} is not a recognized optimization target."' target)' "optimization_target"); " is 120.
Long Statement,AnimeRecs.RecService.Client,Program,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.RecService.Client\Program.cs,Main,The length of the statement  "                        rawClientSocket.SendAllAsync(requestBytes' sendTimeout' CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult(); " is 127.
Long Statement,AnimeRecs.RecService.Client,Program,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.RecService.Client\Program.cs,Main,The length of the statement  "                        byte[] responseLengthBuffer = rawClientSocket.ReceiveAllAsync(numBytesToReceive: 4' receiveAllTimeout: TimeSpan.FromMinutes(3)' cancellationToken: CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult(); " is 218.
Long Statement,AnimeRecs.RecService.Client,Program,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.RecService.Client\Program.cs,Main,The length of the statement  "                        byte[] responseJsonBytes = rawClientSocket.ReceiveAllAsync(responseLength' receiveAllTimeout: TimeSpan.FromSeconds(5)' cancellationToken: CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult(); " is 209.
Long Statement,AnimeRecs.RecService.Client,Program,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.RecService.Client\Program.cs,Main,The length of the statement  "                    string pingResponse = client.PingAsync(commandLine.PingMessage' timeout' CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult(); " is 144.
Long Statement,AnimeRecs.RecService.Client,Program,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.RecService.Client\Program.cs,Main,The length of the statement  "                    client.ReloadTrainingDataAsync(commandLine.ReloadMode' commandLine.Finalize' timeout' CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult(); " is 157.
Long Statement,AnimeRecs.RecService.Client,Program,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.RecService.Client\Program.cs,Main,The length of the statement  "                    else if (commandLine.RecSourceType.Equals(RecSourceTypes.BiasedMatrixFactorization' StringComparison.OrdinalIgnoreCase)) " is 120.
Long Statement,AnimeRecs.RecService.Client,Program,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.RecService.Client\Program.cs,Main,The length of the statement  "                            commandLine.BiasedMatrixFactorizationParams' timeout' CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult(); " is 125.
Long Statement,AnimeRecs.RecService.Client,Program,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.RecService.Client\Program.cs,Main,The length of the statement  "                    client.UnloadRecSourceAsync(commandLine.RecSourceName' timeout' CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult(); " is 135.
Long Statement,AnimeRecs.RecService.Client,Program,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.RecService.Client\Program.cs,Main,The length of the statement  "                    string recSourceType = client.GetRecSourceTypeAsync(commandLine.RecSourceName' timeout' CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult(); " is 159.
Long Statement,AnimeRecs.RecService.Client,Program,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.RecService.Client\Program.cs,Main,The length of the statement  "                        animeListEntries[entry.AnimeInfo.AnimeId] = new RecEngine.MAL.MalListEntry((byte?)entry.Score' entry.Status' (short)entry.NumEpisodesWatched); " is 142.
Long Statement,AnimeRecs.RecService.Client.Registrations.Output,ResultsPrinter,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.RecService.Client\Registrations\Output\ResultsPrinter.AnimeRecs.cs,PrintAverageScoreResults,The length of the statement  "            MalRecResults<IEnumerable<AverageScoreRecommendation>> results = basicResults.CastRecs<IEnumerable<AverageScoreRecommendation>>(); " is 130.
Long Statement,AnimeRecs.RecService.Client.Registrations.Output,ResultsPrinter,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.RecService.Client\Registrations\Output\ResultsPrinter.AnimeRecs.cs,PrintAverageScoreResults,The length of the statement  "                Console.WriteLine("{0'3}. {1'-52} {2'-6:f2} {3}"' recNumber' results.AnimeInfo[rec.ItemId].Title' rec.AverageScore' rec.NumRatings); " is 132.
Long Statement,AnimeRecs.RecService.Client.Registrations.Output,ResultsPrinter,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.RecService.Client\Registrations\Output\ResultsPrinter.AnimeRecs.cs,PrintMostPopularResults,The length of the statement  "            MalRecResults<IEnumerable<MostPopularRecommendation>> results = basicResults.CastRecs<IEnumerable<MostPopularRecommendation>>(); " is 128.
Long Statement,AnimeRecs.RecService.Client.Registrations.Output,ResultsPrinter,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.RecService.Client\Registrations\Output\ResultsPrinter.AnimeRecs.cs,PrintMostPopularResults,The length of the statement  "                Console.WriteLine("{0'3}. {1'-52} {2'4} {3}"' recNumber' results.AnimeInfo[rec.ItemId].Title' rec.PopularityRank' rec.NumRatings); " is 130.
Long Statement,AnimeRecs.RecService.Client.Registrations.Output,ResultsPrinter,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.RecService.Client\Registrations\Output\ResultsPrinter.AnimeRecs.cs,PrintRatingPredictionResults,The length of the statement  "            MalRecResults<IEnumerable<RatingPredictionRecommendation>> results = basicResults.CastRecs<IEnumerable<RatingPredictionRecommendation>>(); " is 138.
Magic Number,AnimeRecs.RecService.Client,CommandLineArgs,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.RecService.Client\CommandLineArgs.cs,GetOptionSet,The following statement contains a magic number: OptionSet optionSet = new OptionSet()              {                  { "?|h|help"' "Show this message and exit."' argExistence => ShowHelp = (argExistence != null) }'                  { "c|command="' "Command. Possible commands are Ping' LoadRecSource' GetRecSourceType' GetMalRecs' ReloadTrainingData' FinalizeRecSources' and UnloadRecSource."' arg => SetCommand(arg) }'                  { "p|port="' "Port the rec service is listening on. Defaults to 5541."' arg => PortNumber = int.Parse(arg) }'                  { "ping_message="' "Message to send with a ping command. Used with the Ping command. Defaults to \"ping\"."' arg => PingMessage = arg }'                  { "finalize"' "Finalize the rec sources loaded after the reload is complete to reduce memory usage. Used with the ReloadTrainingData command."' argExistence => Finalize = (argExistence != null) }'                  { "name|rec_source_name="' "Rec source name. Used with the LoadRecSource' GetRecSourceType' UnloadRecSource' and GetMalRecs commands. Defaults to \"default\""' arg => RecSourceName = arg }'                  { "reload_mode="' "Used with ReloadTrainingData. Possible values are HighAvailability and LowMemory. Defaults to HighAvailability. HighAvailability: Keep the old training data and rec sources in memory while the reload/retrain is going on to keep the rec service serving requests. Requires around twice the amount of memory normally consumed. LowMemory: Drop the old training data and rec sources before starting the reload/retrain. This avoids using double normal memory but means the rec service cannot give recommendations while the reload/retrain is going on."' arg => SetReloadMode(arg) }'                  { "f|config="' "File to load configuration settings from. Defaults to config.xml."' arg => ConfigFile = arg }'                  { "force"' "Replace an existing rec source. Used with the LoadRecSource command"' argExistence => ReplaceExistingRecSource = (argExistence != null) }'                  { "type|rec_source_type="' "Rec source type. Required for LoadRecSource command"' arg => SetRecSourceType(arg) }'                  { "min_episodes_to_count_incomplete="' "Minimum episodes to count the rating of a show a user is currently watched. Used with the LoadRecSource command with the AverageScore' MostPopular' and AnimeRecs rec source types. Defaults to 26."'                      arg => { MinEpisodesToCountIncomplete = int.Parse(arg); BiasedMatrixFactorizationParams.MinEpisodesToCountIncomplete = int.Parse(arg); } }'                  { "use_dropped"' "Count dropped anime. Used with the LoadRecSource command with the AverageScore and MostPopular rec source types. Defaults to false for MostPopular' true for everything else."'                      argExistence => { UseDropped = (argExistence != null); BiasedMatrixFactorizationParams.UseDropped = (argExistence != null); } }'                  { "min_users_to_count_anime="' "Minimum users to have seen an anime for it to be considered by the recommendation algorithm. Used by the LoadRecSource command with the AverageScore and BiasedMatrixFactorization rec source types. Defaults to 50."'                      arg => { MinUsersToCountAnime = int.Parse(arg); BiasedMatrixFactorizationParams.MinUsersToCountAnime = int.Parse(arg); } }'                  { "num_recommenders_to_use="' "Number of recommenders to use for the AnimeRecs rec source. Used by the LoadRecSource command with the AnimeRecs rec source type. Defaults to 100."'                      arg => NumRecommendersToUse = int.Parse(arg) }'                  { "percent_recommended="' "Percentage of anime seen that a recommender recommends. Used by the LoadRecSource command with the AnimeRecs rec source type. Defaults to 35."'                      arg => FractionRecommended = double.Parse(arg) / 100 }'                  { "u|username="' "MAL username. Required for the GetMalRecs command."' arg => MalUsername = arg }'                  { "n|num_recs="' "Number of recommendations to get. Used by the GetMalRecs command. Defaults to 50."' arg => NumRecs = int.Parse(arg) }'                  { "t|target_score="' "Target score. Used with the GetMalRecs command. Only used by some rec sources. Defaults to 8."' arg => TargetScore = decimal.Parse(arg) }'                  { "bias_learn_rate="' "Used when loading a BiasedMatrixFactorization rec source. Defaults to 1."' arg => BiasedMatrixFactorizationParams.BiasLearnRate = float.Parse(arg) }'                  { "bias_reg="' "Used when loading a BiasedMatrixFactorization rec source. Defaults to 0.01."' arg => BiasedMatrixFactorizationParams.BiasReg = float.Parse(arg) }'                  { "bold_driver"' "Used when loading a BiasedMatrixFactorization rec source. Defaults to false."' argExistence => BiasedMatrixFactorizationParams.BoldDriver = (argExistence != null) }'                  { "frequency_regularization"' "Used when loading a BiasedMatrixFactorization rec source. Defaults to false."' argExistence => BiasedMatrixFactorizationParams.FrequencyRegularization = (argExistence != null) }'                  { "learn_rate="' "Used when loading a BiasedMatrixFactorization rec source. Defaults to 0.01."' arg => BiasedMatrixFactorizationParams.LearnRate = float.Parse(arg) }'                  { "optimization_target="' "Used when loading a BiasedMatrixFactorization rec source. Must be LogisticLoss' MAE' or RMSE. Defaults to RMSE."' arg => SetOptimizationTarget(arg) }'                  { "num_factors="' "Used when loading a BiasedMatrixFactorization rec source. Defaults to 10."' arg => BiasedMatrixFactorizationParams.NumFactors = uint.Parse(arg) }'                  { "num_iter="' "Used when loading a BiasedMatrixFactorization rec source. Defaults to 30."' arg => BiasedMatrixFactorizationParams.NumIter = uint.Parse(arg) }'                  { "reg_i="' "Used when loading a BiasedMatrixFactorization rec source. Defaults to 0.015."' arg => BiasedMatrixFactorizationParams.RegI = float.Parse(arg) }'                  { "reg_u="' "Used when loading a BiasedMatrixFactorization rec source. Defaults to 0.015."' arg => BiasedMatrixFactorizationParams.RegU = float.Parse(arg) }'                                       { "<>"' arg => SetRaw(arg) }'              };
Magic Number,AnimeRecs.RecService.Client,Program,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.RecService.Client\Program.cs,Main,The following statement contains a magic number: TimeSpan sendTimeout = TimeSpan.FromSeconds(5);
Magic Number,AnimeRecs.RecService.Client,Program,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.RecService.Client\Program.cs,Main,The following statement contains a magic number: byte[] responseLengthBuffer = rawClientSocket.ReceiveAllAsync(numBytesToReceive: 4' receiveAllTimeout: TimeSpan.FromMinutes(3)' cancellationToken: CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
Magic Number,AnimeRecs.RecService.Client,Program,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.RecService.Client\Program.cs,Main,The following statement contains a magic number: byte[] responseLengthBuffer = rawClientSocket.ReceiveAllAsync(numBytesToReceive: 4' receiveAllTimeout: TimeSpan.FromMinutes(3)' cancellationToken: CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
Magic Number,AnimeRecs.RecService.Client,Program,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.RecService.Client\Program.cs,Main,The following statement contains a magic number: byte[] responseJsonBytes = rawClientSocket.ReceiveAllAsync(responseLength' receiveAllTimeout: TimeSpan.FromSeconds(5)' cancellationToken: CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
Magic Number,AnimeRecs.RecService.Client.Registrations.Output,ResultsPrinter,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.RecService.Client\Registrations\Output\ResultsPrinter.AnimeRecs.cs,PrintAnimeRecsResults,The following statement contains a magic number: numRecommendersPrinted > 10
Magic Number,AnimeRecs.RecService.Client.Registrations.Output,ResultsPrinter,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.RecService.Client\Registrations\Output\ResultsPrinter.AnimeRecs.cs,PrintAnimeRecsResults,The following statement contains a magic number: recommender.AllRecommendations.OrderBy(                      rec => !recommender.RecsLiked.Contains(rec) && !recommender.RecsNotLiked.Contains(rec) ? 0 :                          recommender.RecsLiked.Contains(rec) ? 1 :                          2                      )                      .ThenByDescending(rec => rec.RecommenderScore)                      .ThenByDescending(rec => rec.AverageScore)
