Implementation smell,Namespace,Class,File,Method,Description
Long Method,Amqp,Address,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Address.cs,Parse,The method has 116 lines of code.
Long Method,Amqp.Types,Encoder,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Types\Encoder.cs,Initialize,The method has 207 lines of code.
Complex Method,Amqp,TcpTransport,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Net\TcpTransport.cs,ConnectAsync,Cyclomatic complexity of the method is 8
Complex Method,Amqp,Address,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Address.cs,Parse,Cyclomatic complexity of the method is 22
Complex Method,Amqp,Connection,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Connection.cs,OnOpen,Cyclomatic complexity of the method is 8
Complex Method,Amqp,Message,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Message.cs,Decode,Cyclomatic complexity of the method is 9
Complex Method,Amqp,Message,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Message.cs,GetEstimatedMessageSize,Cyclomatic complexity of the method is 8
Complex Method,Amqp,ReceiverLink,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\ReceiverLink.cs,OnTransfer,Cyclomatic complexity of the method is 9
Long Parameter List,Amqp,RefCountedByteBuffer,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Net\RefCountedByteBuffer.cs,RefCountedByteBuffer,The method has 5 parameters. Parameters: bufferManager' buffer' offset' count' length
Long Parameter List,Amqp,RefCountedByteBuffer,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Net\RefCountedByteBuffer.cs,DuplicateBuffer,The method has 5 parameters. Parameters: bufferSize' dataSize' buffer' offset' count
Long Parameter List,Amqp,SocketExtensions,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Net\SocketExtensions.cs,ReceiveAsync,The method has 5 parameters. Parameters: socket' args' buffer' offset' count
Long Parameter List,Amqp,WrappedByteBuffer,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Net\WrappedByteBuffer.cs,DuplicateBuffer,The method has 5 parameters. Parameters: bufferSize' dataSize' buffer' offset' count
Long Parameter List,Amqp,Address,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Address.cs,Address,The method has 6 parameters. Parameters: host' port' user' password' path' scheme
Long Parameter List,Amqp,ByteBuffer,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\ByteBuffer.cs,ByteBuffer,The method has 5 parameters. Parameters: buffer' offset' count' capacity' autoGrow
Long Parameter List,Amqp,ByteBuffer,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\ByteBuffer.cs,DuplicateBuffer,The method has 5 parameters. Parameters: bufferSize' dataSize' buffer' offset' count
Long Parameter List,Amqp,Connection,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Connection.cs,Connection,The method has 6 parameters. Parameters: bufferManager' amqpSettings' address' transport' open' onOpened
Long Parameter List,Amqp,Connection,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Connection.cs,SendCommand,The method has 5 parameters. Parameters: channel' transfer' first' payload' reservedBytes
Long Parameter List,Amqp,Trace,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Trace.cs,WriteLine,The method has 5 parameters. Parameters: level' format' arg1' arg2' arg3
Long Parameter List,Amqp.Types,Encoder,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Types\Encoder.cs,ReadString,The method has 5 parameters. Parameters: buffer' formatCode' code8' code32' type
Long Statement,Amqp.Framing,Begin,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Framing\Begin.cs,ToString,The length of the statement  "                new object[] { "remote-channel"' "next-outgoing-id"' "incoming-window"' "outgoing-window"' "handle-max"' "offered-capabilities"' "desired-capabilities"' "properties" }' " is 168.
Long Statement,Amqp.Framing,Flow,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Framing\Flow.cs,ToString,The length of the statement  "                new object[] { "next-in-id"' "in-window"' "next-out-id"' "out-window"' "handle"' "delivery-count"' "link-credit"' "available"' "drain"' "echo"' "properties" }' " is 159.
Long Statement,Amqp.Framing,Transfer,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Framing\Transfer.cs,ToString,The length of the statement  "                new object[] { "handle"' "delivery-id"' "delivery-tag"' "message-format"' "settled"' "more"' "rcv-settle-mode"' "state"' "resume"' "aborted"' "batchable" }' " is 156.
Long Statement,Amqp.Listener,ConnectionListener,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Listener\ConnectionListener.cs,Open,The length of the statement  "                this.listener = new WebSocketTransportListener(this' this.address.Host' address.Port' address.Path' this.GetServiceCertificate()); " is 130.
Long Statement,Amqp.Listener,MessageProcessor,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Listener\ContainerHost.cs,Dispose,The length of the statement  "                        this.links[i].Close(0' new Error() { Condition = ErrorCode.DetachForced' Description = "Processor was unregistered." }); " is 120.
Long Statement,Amqp.Listener,ListenerLink,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Listener\ListenerLink.cs,CompleteAttach,The length of the statement  "                this.SendAttach(!attach.Role' attach.InitialDeliveryCount' new Attach() { Target = attach.Target' Source = attach.Source }); " is 124.
Long Statement,Amqp.Listener,ListenerLink,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Listener\ListenerLink.cs,OnAttach,The length of the statement  "                bool done = container.AttachLink((ListenerConnection)this.Session.Connection' (ListenerSession)this.Session' this' attach); " is 123.
Long Statement,Amqp,TcpTransport,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Net\TcpTransport.cs,ConnectAsync,The length of the statement  "                    sslStream = new SslStream(new NetworkStream(socket)' false' ssl.RemoteCertificateValidationCallback' ssl.LocalCertificateSelectionCallback); " is 140.
Long Statement,Amqp.Sasl,SaslProfile,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Sasl\SaslProfile.cs,Start,The length of the statement  "                new byte[] { (byte)'A'' (byte)'M'' (byte)'Q'' (byte)'P'' myHeader.Id' myHeader.Major' myHeader.Minor' myHeader.Revision }' " is 122.
Complex Conditional,Amqp.Framing,ProtocolHeader,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Framing\ProtocolHeader.cs,Create,The conditional expression  "buffer[offset + 0] != (byte)'A' ||                  buffer[offset + 1] != (byte)'M' ||                  buffer[offset + 2] != (byte)'Q' ||                  buffer[offset + 3] != (byte)'P'"  is complex.
Complex Conditional,Amqp,TcpTransport,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Net\TcpTransport.cs,ConnectAsync,The conditional expression  "ipAddresses[i] == null ||                      (ipAddresses[i].AddressFamily == AddressFamily.InterNetwork && !Socket.OSSupportsIPv4) ||                      (ipAddresses[i].AddressFamily == AddressFamily.InterNetworkV6 && !Socket.OSSupportsIPv6)"  is complex.
Complex Conditional,Amqp.Sasl,SaslProfile,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Sasl\SaslProfile.cs,OnHeader,The conditional expression  "theirHeader.Id != myHeader.Id || theirHeader.Major != myHeader.Major ||                  theirHeader.Minor != myHeader.Minor || theirHeader.Revision != myHeader.Revision"  is complex.
Virtual Method Call from Constructor,Amqp,WrappedByteBuffer,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Net\WrappedByteBuffer.cs,WrappedByteBuffer,The constructor "WrappedByteBuffer" calls a virtual method "AddReference".
Empty Catch Block,Amqp.Listener,TcpTransportListener,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Listener\ConnectionListener.cs,AcceptAsync,The method has an empty catch block.
Magic Number,Amqp.Framing,ProtocolHeader,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Framing\ProtocolHeader.cs,Create,The following statement contains a magic number: throw new AmqpException(ErrorCode.InvalidField'                      "ProtocolName Expect:AMQP Actual:" + new string(Encoding.UTF8.GetChars(buffer' offset' 4)));
Magic Number,Amqp.Framing,ProtocolHeader,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Framing\ProtocolHeader.cs,Create,The following statement contains a magic number: buffer[offset + 0] != (byte)'A' ||                  buffer[offset + 1] != (byte)'M' ||                  buffer[offset + 2] != (byte)'Q' ||                  buffer[offset + 3] != (byte)'P'
Magic Number,Amqp.Framing,ProtocolHeader,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Framing\ProtocolHeader.cs,Create,The following statement contains a magic number: buffer[offset + 0] != (byte)'A' ||                  buffer[offset + 1] != (byte)'M' ||                  buffer[offset + 2] != (byte)'Q' ||                  buffer[offset + 3] != (byte)'P'
Magic Number,Amqp.Framing,ProtocolHeader,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Framing\ProtocolHeader.cs,Create,The following statement contains a magic number: return new ProtocolHeader()              {                  Id = buffer[offset + 4]'                  Major = buffer[offset + 5]'                  Minor = buffer[offset + 6]'                  Revision = buffer[offset + 7]              };
Magic Number,Amqp.Framing,ProtocolHeader,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Framing\ProtocolHeader.cs,Create,The following statement contains a magic number: return new ProtocolHeader()              {                  Id = buffer[offset + 4]'                  Major = buffer[offset + 5]'                  Minor = buffer[offset + 6]'                  Revision = buffer[offset + 7]              };
Magic Number,Amqp.Framing,ProtocolHeader,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Framing\ProtocolHeader.cs,Create,The following statement contains a magic number: return new ProtocolHeader()              {                  Id = buffer[offset + 4]'                  Major = buffer[offset + 5]'                  Minor = buffer[offset + 6]'                  Revision = buffer[offset + 7]              };
Magic Number,Amqp.Framing,ProtocolHeader,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Framing\ProtocolHeader.cs,Create,The following statement contains a magic number: return new ProtocolHeader()              {                  Id = buffer[offset + 4]'                  Major = buffer[offset + 5]'                  Minor = buffer[offset + 6]'                  Revision = buffer[offset + 7]              };
Magic Number,Amqp.Framing,Reader,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Framing\Reader.cs,ReadHeader,The following statement contains a magic number: byte[] smallBuffer = new byte[8];
Magic Number,Amqp.Framing,Reader,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Framing\Reader.cs,ReadHeader,The following statement contains a magic number: !ReadBuffer(transport' smallBuffer' 0' 8)
Magic Number,Amqp.Listener,ConnectionListener,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Listener\ConnectionListener.cs,ConnectionListener,The following statement contains a magic number: creds.Length != 2
Magic Number,Amqp.Listener,TcpTransportListener,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Listener\ConnectionListener.cs,TcpTransportListener,The following statement contains a magic number: this.listenSockets[i].Listen(20);
Magic Number,Amqp.Listener,Key,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Listener\LinkCollection.cs,GetHashCode,The following statement contains a magic number: hash = hash * 31 + this.toContainer.GetHashCode();
Magic Number,Amqp.Listener,Key,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Listener\LinkCollection.cs,GetHashCode,The following statement contains a magic number: hash = hash * 31 + this.name.GetHashCode();
Magic Number,Amqp.Listener,ListenerLink,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Listener\ListenerLink.cs,DisposeMessage,The following statement contains a magic number: this.restored++ >= this.credit / 2
Magic Number,Amqp.Listener,SaslPlainProfile,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Listener\SaslPlainMechanism.cs,ValidateCredentials,The following statement contains a magic number: this.Principal = new GenericPrincipal(                              new GenericIdentity(string.IsNullOrEmpty(items[2]) ? items[0] : items[2]' this.mechanism.Name)'                              new string[0]);
Magic Number,Amqp.Listener,SaslPlainProfile,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Listener\SaslPlainMechanism.cs,ValidateCredentials,The following statement contains a magic number: this.Principal = new GenericPrincipal(                              new GenericIdentity(string.IsNullOrEmpty(items[2]) ? items[0] : items[2]' this.mechanism.Name)'                              new string[0]);
Magic Number,Amqp.Listener,SaslPlainProfile,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Listener\SaslPlainMechanism.cs,ValidateCredentials,The following statement contains a magic number: items.Length == 3 &&                          string.Equals(this.mechanism.user' items[1]' StringComparison.OrdinalIgnoreCase) &&                          string.Equals(this.mechanism.password' items[2]' StringComparison.Ordinal)
Magic Number,Amqp.Listener,SaslPlainProfile,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Listener\SaslPlainMechanism.cs,ValidateCredentials,The following statement contains a magic number: items.Length == 3 &&                          string.Equals(this.mechanism.user' items[1]' StringComparison.OrdinalIgnoreCase) &&                          string.Equals(this.mechanism.password' items[2]' StringComparison.Ordinal)
Magic Number,Amqp,BufferManager,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Net\BufferManager.cs,BufferManager,The following statement contains a magic number: size *= 2;
Magic Number,Amqp,BufferManager,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Net\BufferManager.cs,RoundToNextLog2,The following statement contains a magic number: v |= v >> 2;
Magic Number,Amqp,BufferManager,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Net\BufferManager.cs,RoundToNextLog2,The following statement contains a magic number: v |= v >> 4;
Magic Number,Amqp,BufferManager,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Net\BufferManager.cs,RoundToNextLog2,The following statement contains a magic number: v |= v >> 8;
Magic Number,Amqp,BufferManager,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Net\BufferManager.cs,RoundToNextLog2,The following statement contains a magic number: v |= v >> 16;
Magic Number,Amqp,BufferManager,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Net\BufferManager.cs,RoundToNextLog2,The following statement contains a magic number: return MultiplyDeBruijnBitPosition[(v * 0x077CB531U) >> 27];
Magic Number,Amqp,Pool,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Net\BufferManager.cs,TryTake,The following statement contains a magic number: i < 3
Magic Number,Amqp,ConnectionFactoryBase,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Net\ConnectionFactoryBase.cs,ConnectionFactoryBase,The following statement contains a magic number: this.amqpSettings = new AmqpSettings()              {                  MaxFrameSize = (int)Connection.DefaultMaxFrameSize'                  ContainerId = "AMQPNetLite-" + Guid.NewGuid().ToString("N").Substring(0' 8)'                  IdleTimeout = int.MaxValue'                  MaxSessionsPerConnection = Connection.DefaultMaxSessions'                  MaxLinksPerSession = Connection.DefaultMaxLinksPerSession              };
Magic Number,Amqp,TcpSocket,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Net\TcpTransport.cs,ReceiveAsync,The following statement contains a magic number: this.receiveBuffer = new ByteBuffer(8 * 1024' false);
Magic Number,Amqp,TcpSocket,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Net\TcpTransport.cs,ReceiveAsync,The following statement contains a magic number: this.receiveBuffer = new ByteBuffer(8 * 1024' false);
Magic Number,Amqp,AmqpBitConverter,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\AmqpBitConverter.cs,ReadShort,The following statement contains a magic number: short data = (short)((buffer.Buffer[buffer.Offset] << 8) | buffer.Buffer[buffer.Offset + 1]);
Magic Number,Amqp,AmqpBitConverter,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\AmqpBitConverter.cs,ReadInt,The following statement contains a magic number: return (buffer[offset] << 24) | (buffer[offset + 1] << 16) | (buffer[offset + 2] << 8) | buffer[offset + 3];
Magic Number,Amqp,AmqpBitConverter,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\AmqpBitConverter.cs,ReadInt,The following statement contains a magic number: return (buffer[offset] << 24) | (buffer[offset + 1] << 16) | (buffer[offset + 2] << 8) | buffer[offset + 3];
Magic Number,Amqp,AmqpBitConverter,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\AmqpBitConverter.cs,ReadInt,The following statement contains a magic number: return (buffer[offset] << 24) | (buffer[offset + 1] << 16) | (buffer[offset + 2] << 8) | buffer[offset + 3];
Magic Number,Amqp,AmqpBitConverter,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\AmqpBitConverter.cs,ReadInt,The following statement contains a magic number: return (buffer[offset] << 24) | (buffer[offset + 1] << 16) | (buffer[offset + 2] << 8) | buffer[offset + 3];
Magic Number,Amqp,AmqpBitConverter,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\AmqpBitConverter.cs,ReadInt,The following statement contains a magic number: return (buffer[offset] << 24) | (buffer[offset + 1] << 16) | (buffer[offset + 2] << 8) | buffer[offset + 3];
Magic Number,Amqp,AmqpBitConverter,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\AmqpBitConverter.cs,ReadLong,The following statement contains a magic number: long low = (uint)ReadInt(buffer.Buffer' buffer.Offset + 4);
Magic Number,Amqp,AmqpBitConverter,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\AmqpBitConverter.cs,ReadLong,The following statement contains a magic number: long data = (high << 32) | low;
Magic Number,Amqp,AmqpBitConverter,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\AmqpBitConverter.cs,ReadUuid,The following statement contains a magic number: d[3] = buffer.Buffer[pos++];
Magic Number,Amqp,AmqpBitConverter,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\AmqpBitConverter.cs,ReadUuid,The following statement contains a magic number: d[2] = buffer.Buffer[pos++];
Magic Number,Amqp,AmqpBitConverter,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\AmqpBitConverter.cs,ReadUuid,The following statement contains a magic number: d[5] = buffer.Buffer[pos++];
Magic Number,Amqp,AmqpBitConverter,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\AmqpBitConverter.cs,ReadUuid,The following statement contains a magic number: d[4] = buffer.Buffer[pos++];
Magic Number,Amqp,AmqpBitConverter,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\AmqpBitConverter.cs,ReadUuid,The following statement contains a magic number: d[7] = buffer.Buffer[pos++];
Magic Number,Amqp,AmqpBitConverter,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\AmqpBitConverter.cs,ReadUuid,The following statement contains a magic number: d[6] = buffer.Buffer[pos++];
Magic Number,Amqp,AmqpBitConverter,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\AmqpBitConverter.cs,ReadUuid,The following statement contains a magic number: Array.Copy(buffer.Buffer' pos' d' 8' 8);
Magic Number,Amqp,AmqpBitConverter,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\AmqpBitConverter.cs,ReadUuid,The following statement contains a magic number: Array.Copy(buffer.Buffer' pos' d' 8' 8);
Magic Number,Amqp,AmqpBitConverter,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\AmqpBitConverter.cs,WriteShort,The following statement contains a magic number: buffer.Buffer[buffer.WritePos] = (byte)(data >> 8);
Magic Number,Amqp,AmqpBitConverter,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\AmqpBitConverter.cs,WriteInt,The following statement contains a magic number: buffer[offset] = (byte)(data >> 24);
Magic Number,Amqp,AmqpBitConverter,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\AmqpBitConverter.cs,WriteInt,The following statement contains a magic number: buffer[offset + 1] = (byte)(data >> 16);
Magic Number,Amqp,AmqpBitConverter,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\AmqpBitConverter.cs,WriteInt,The following statement contains a magic number: buffer[offset + 2] = (byte)(data >> 8);
Magic Number,Amqp,AmqpBitConverter,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\AmqpBitConverter.cs,WriteInt,The following statement contains a magic number: buffer[offset + 2] = (byte)(data >> 8);
Magic Number,Amqp,AmqpBitConverter,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\AmqpBitConverter.cs,WriteInt,The following statement contains a magic number: buffer[offset + 3] = (byte)data;
Magic Number,Amqp,AmqpBitConverter,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\AmqpBitConverter.cs,WriteLong,The following statement contains a magic number: WriteInt(buffer' (int)(data >> 32));
Magic Number,Amqp,AmqpBitConverter,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\AmqpBitConverter.cs,WriteUuid,The following statement contains a magic number: buffer.Buffer[pos++] = p[3];
Magic Number,Amqp,AmqpBitConverter,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\AmqpBitConverter.cs,WriteUuid,The following statement contains a magic number: buffer.Buffer[pos++] = p[2];
Magic Number,Amqp,AmqpBitConverter,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\AmqpBitConverter.cs,WriteUuid,The following statement contains a magic number: buffer.Buffer[pos++] = p[5];
Magic Number,Amqp,AmqpBitConverter,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\AmqpBitConverter.cs,WriteUuid,The following statement contains a magic number: buffer.Buffer[pos++] = p[4];
Magic Number,Amqp,AmqpBitConverter,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\AmqpBitConverter.cs,WriteUuid,The following statement contains a magic number: buffer.Buffer[pos++] = p[7];
Magic Number,Amqp,AmqpBitConverter,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\AmqpBitConverter.cs,WriteUuid,The following statement contains a magic number: buffer.Buffer[pos++] = p[6];
Magic Number,Amqp,AmqpBitConverter,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\AmqpBitConverter.cs,WriteUuid,The following statement contains a magic number: Array.Copy(p' 8' buffer.Buffer' pos' 8);
Magic Number,Amqp,AmqpBitConverter,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\AmqpBitConverter.cs,WriteUuid,The following statement contains a magic number: Array.Copy(p' 8' buffer.Buffer' pos' 8);
Magic Number,Amqp,ByteBuffer,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\ByteBuffer.cs,Validate,The following statement contains a magic number: int newSize = Math.Max(this.Capacity * 2' this.Capacity + dataSize);
Magic Number,Amqp,Connection,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Connection.cs,AddSession,The following statement contains a magic number: int size = Math.Min(count * 2' this.channelMax + 1);
Magic Number,Amqp,Connection,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Connection.cs,OnHeartBeatTimer,The following statement contains a magic number: byte[] frame = new byte[] { 0' 0' 0' 8' 2' 0' 0' 0 };
Magic Number,Amqp,Connection,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Connection.cs,OnHeartBeatTimer,The following statement contains a magic number: byte[] frame = new byte[] { 0' 0' 0' 8' 2' 0' 0' 0 };
Magic Number,Amqp,Connection,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Connection.cs,OnOpen,The following statement contains a magic number: idleTimeout -= 3000;
Magic Number,Amqp,Connection,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Connection.cs,OnBegin,The following statement contains a magic number: int size = Math.Min(count * 2' this.channelMax + 1);
Magic Number,Amqp,Message,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Message.cs,Encode,The following statement contains a magic number: ByteBuffer buffer = new ByteBuffer(reservedBytes + 128' true);
Magic Number,Amqp,Message,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Message.cs,GetEstimatedBodySize,The following statement contains a magic number: return 64;
Magic Number,Amqp,Message,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Message.cs,GetEstimatedMessageSize,The following statement contains a magic number: size += 64;
Magic Number,Amqp,Message,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Message.cs,GetEstimatedMessageSize,The following statement contains a magic number: size += 64;
Magic Number,Amqp,Message,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Message.cs,GetEstimatedMessageSize,The following statement contains a magic number: size += 64;
Magic Number,Amqp,Message,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Message.cs,GetEstimatedMessageSize,The following statement contains a magic number: size += 64;
Magic Number,Amqp,Message,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Message.cs,GetEstimatedMessageSize,The following statement contains a magic number: size += 64;
Magic Number,Amqp,Message,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Message.cs,GetEstimatedMessageSize,The following statement contains a magic number: size += GetEstimatedBodySize(this.BodySection) + 8;
Magic Number,Amqp,Message,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Message.cs,GetEstimatedMessageSize,The following statement contains a magic number: size += 64;
Magic Number,Amqp,ReceiverLink,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\ReceiverLink.cs,OnDeliverMessage,The following statement contains a magic number: this.totalCredit > 0 &&                  Interlocked.Increment(ref this.restored) >= (this.totalCredit / 2)
Magic Number,Amqp,SenderLink,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\SenderLink.cs,Send,The following statement contains a magic number: const int reservedBytes = 40;
Magic Number,Amqp,Session,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Session.cs,AddLink,The following statement contains a magic number: int size = (int)Math.Min(count * 2 - 1' this.handleMax) + 1;
Magic Number,Amqp,Session,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Session.cs,AddRemoteLink,The following statement contains a magic number: int size = (int)Math.Min(count * 2 - 1' this.handleMax) + 1;
Magic Number,Amqp,Session,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Session.cs,Default,The following statement contains a magic number: return new Begin()              {                  IncomingWindow = defaultWindowSize'                  OutgoingWindow = defaultWindowSize'                  HandleMax = (uint)(connection.MaxLinksPerSession - 1)'                  NextOutgoingId = uint.MaxValue - 2u              };
Magic Number,Amqp.Types,Encoder,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Types\Encoder.cs,Initialize,The following statement contains a magic number: codecByType = new Map()              {                  { typeof(bool)'     serializers[1] }'                  { typeof(byte)'     serializers[2] }'                  { typeof(ushort)'   serializers[3] }'                  { typeof(uint)'     serializers[4] }'                  { typeof(ulong)'    serializers[5] }'                  { typeof(sbyte)'    serializers[6] }'                  { typeof(short)'    serializers[7] }'                  { typeof(int)'      serializers[8] }'                  { typeof(long)'     serializers[9] }'                  { typeof(float)'    serializers[10] }'                  { typeof(double)'   serializers[11] }'                  { typeof(char)'     serializers[12] }'                  { typeof(DateTime)' serializers[13] }'                  { typeof(Guid)'     serializers[14] }'                  { typeof(byte[])'   serializers[15] }'                  { typeof(string)'   serializers[16] }'                  { typeof(Symbol)'   serializers[17] }'                  { typeof(List)'     serializers[18] }'                  { typeof(Map)'      serializers[19] }'  #if !NETMF_LITE                  { typeof(Fields)'   serializers[19] }'  #endif              };
Magic Number,Amqp.Types,Encoder,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Types\Encoder.cs,Initialize,The following statement contains a magic number: codecByType = new Map()              {                  { typeof(bool)'     serializers[1] }'                  { typeof(byte)'     serializers[2] }'                  { typeof(ushort)'   serializers[3] }'                  { typeof(uint)'     serializers[4] }'                  { typeof(ulong)'    serializers[5] }'                  { typeof(sbyte)'    serializers[6] }'                  { typeof(short)'    serializers[7] }'                  { typeof(int)'      serializers[8] }'                  { typeof(long)'     serializers[9] }'                  { typeof(float)'    serializers[10] }'                  { typeof(double)'   serializers[11] }'                  { typeof(char)'     serializers[12] }'                  { typeof(DateTime)' serializers[13] }'                  { typeof(Guid)'     serializers[14] }'                  { typeof(byte[])'   serializers[15] }'                  { typeof(string)'   serializers[16] }'                  { typeof(Symbol)'   serializers[17] }'                  { typeof(List)'     serializers[18] }'                  { typeof(Map)'      serializers[19] }'  #if !NETMF_LITE                  { typeof(Fields)'   serializers[19] }'  #endif              };
Magic Number,Amqp.Types,Encoder,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Types\Encoder.cs,Initialize,The following statement contains a magic number: codecByType = new Map()              {                  { typeof(bool)'     serializers[1] }'                  { typeof(byte)'     serializers[2] }'                  { typeof(ushort)'   serializers[3] }'                  { typeof(uint)'     serializers[4] }'                  { typeof(ulong)'    serializers[5] }'                  { typeof(sbyte)'    serializers[6] }'                  { typeof(short)'    serializers[7] }'                  { typeof(int)'      serializers[8] }'                  { typeof(long)'     serializers[9] }'                  { typeof(float)'    serializers[10] }'                  { typeof(double)'   serializers[11] }'                  { typeof(char)'     serializers[12] }'                  { typeof(DateTime)' serializers[13] }'                  { typeof(Guid)'     serializers[14] }'                  { typeof(byte[])'   serializers[15] }'                  { typeof(string)'   serializers[16] }'                  { typeof(Symbol)'   serializers[17] }'                  { typeof(List)'     serializers[18] }'                  { typeof(Map)'      serializers[19] }'  #if !NETMF_LITE                  { typeof(Fields)'   serializers[19] }'  #endif              };
Magic Number,Amqp.Types,Encoder,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Types\Encoder.cs,Initialize,The following statement contains a magic number: codecByType = new Map()              {                  { typeof(bool)'     serializers[1] }'                  { typeof(byte)'     serializers[2] }'                  { typeof(ushort)'   serializers[3] }'                  { typeof(uint)'     serializers[4] }'                  { typeof(ulong)'    serializers[5] }'                  { typeof(sbyte)'    serializers[6] }'                  { typeof(short)'    serializers[7] }'                  { typeof(int)'      serializers[8] }'                  { typeof(long)'     serializers[9] }'                  { typeof(float)'    serializers[10] }'                  { typeof(double)'   serializers[11] }'                  { typeof(char)'     serializers[12] }'                  { typeof(DateTime)' serializers[13] }'                  { typeof(Guid)'     serializers[14] }'                  { typeof(byte[])'   serializers[15] }'                  { typeof(string)'   serializers[16] }'                  { typeof(Symbol)'   serializers[17] }'                  { typeof(List)'     serializers[18] }'                  { typeof(Map)'      serializers[19] }'  #if !NETMF_LITE                  { typeof(Fields)'   serializers[19] }'  #endif              };
Magic Number,Amqp.Types,Encoder,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Types\Encoder.cs,Initialize,The following statement contains a magic number: codecByType = new Map()              {                  { typeof(bool)'     serializers[1] }'                  { typeof(byte)'     serializers[2] }'                  { typeof(ushort)'   serializers[3] }'                  { typeof(uint)'     serializers[4] }'                  { typeof(ulong)'    serializers[5] }'                  { typeof(sbyte)'    serializers[6] }'                  { typeof(short)'    serializers[7] }'                  { typeof(int)'      serializers[8] }'                  { typeof(long)'     serializers[9] }'                  { typeof(float)'    serializers[10] }'                  { typeof(double)'   serializers[11] }'                  { typeof(char)'     serializers[12] }'                  { typeof(DateTime)' serializers[13] }'                  { typeof(Guid)'     serializers[14] }'                  { typeof(byte[])'   serializers[15] }'                  { typeof(string)'   serializers[16] }'                  { typeof(Symbol)'   serializers[17] }'                  { typeof(List)'     serializers[18] }'                  { typeof(Map)'      serializers[19] }'  #if !NETMF_LITE                  { typeof(Fields)'   serializers[19] }'  #endif              };
Magic Number,Amqp.Types,Encoder,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Types\Encoder.cs,Initialize,The following statement contains a magic number: codecByType = new Map()              {                  { typeof(bool)'     serializers[1] }'                  { typeof(byte)'     serializers[2] }'                  { typeof(ushort)'   serializers[3] }'                  { typeof(uint)'     serializers[4] }'                  { typeof(ulong)'    serializers[5] }'                  { typeof(sbyte)'    serializers[6] }'                  { typeof(short)'    serializers[7] }'                  { typeof(int)'      serializers[8] }'                  { typeof(long)'     serializers[9] }'                  { typeof(float)'    serializers[10] }'                  { typeof(double)'   serializers[11] }'                  { typeof(char)'     serializers[12] }'                  { typeof(DateTime)' serializers[13] }'                  { typeof(Guid)'     serializers[14] }'                  { typeof(byte[])'   serializers[15] }'                  { typeof(string)'   serializers[16] }'                  { typeof(Symbol)'   serializers[17] }'                  { typeof(List)'     serializers[18] }'                  { typeof(Map)'      serializers[19] }'  #if !NETMF_LITE                  { typeof(Fields)'   serializers[19] }'  #endif              };
Magic Number,Amqp.Types,Encoder,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Types\Encoder.cs,Initialize,The following statement contains a magic number: codecByType = new Map()              {                  { typeof(bool)'     serializers[1] }'                  { typeof(byte)'     serializers[2] }'                  { typeof(ushort)'   serializers[3] }'                  { typeof(uint)'     serializers[4] }'                  { typeof(ulong)'    serializers[5] }'                  { typeof(sbyte)'    serializers[6] }'                  { typeof(short)'    serializers[7] }'                  { typeof(int)'      serializers[8] }'                  { typeof(long)'     serializers[9] }'                  { typeof(float)'    serializers[10] }'                  { typeof(double)'   serializers[11] }'                  { typeof(char)'     serializers[12] }'                  { typeof(DateTime)' serializers[13] }'                  { typeof(Guid)'     serializers[14] }'                  { typeof(byte[])'   serializers[15] }'                  { typeof(string)'   serializers[16] }'                  { typeof(Symbol)'   serializers[17] }'                  { typeof(List)'     serializers[18] }'                  { typeof(Map)'      serializers[19] }'  #if !NETMF_LITE                  { typeof(Fields)'   serializers[19] }'  #endif              };
Magic Number,Amqp.Types,Encoder,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Types\Encoder.cs,Initialize,The following statement contains a magic number: codecByType = new Map()              {                  { typeof(bool)'     serializers[1] }'                  { typeof(byte)'     serializers[2] }'                  { typeof(ushort)'   serializers[3] }'                  { typeof(uint)'     serializers[4] }'                  { typeof(ulong)'    serializers[5] }'                  { typeof(sbyte)'    serializers[6] }'                  { typeof(short)'    serializers[7] }'                  { typeof(int)'      serializers[8] }'                  { typeof(long)'     serializers[9] }'                  { typeof(float)'    serializers[10] }'                  { typeof(double)'   serializers[11] }'                  { typeof(char)'     serializers[12] }'                  { typeof(DateTime)' serializers[13] }'                  { typeof(Guid)'     serializers[14] }'                  { typeof(byte[])'   serializers[15] }'                  { typeof(string)'   serializers[16] }'                  { typeof(Symbol)'   serializers[17] }'                  { typeof(List)'     serializers[18] }'                  { typeof(Map)'      serializers[19] }'  #if !NETMF_LITE                  { typeof(Fields)'   serializers[19] }'  #endif              };
Magic Number,Amqp.Types,Encoder,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Types\Encoder.cs,Initialize,The following statement contains a magic number: codecByType = new Map()              {                  { typeof(bool)'     serializers[1] }'                  { typeof(byte)'     serializers[2] }'                  { typeof(ushort)'   serializers[3] }'                  { typeof(uint)'     serializers[4] }'                  { typeof(ulong)'    serializers[5] }'                  { typeof(sbyte)'    serializers[6] }'                  { typeof(short)'    serializers[7] }'                  { typeof(int)'      serializers[8] }'                  { typeof(long)'     serializers[9] }'                  { typeof(float)'    serializers[10] }'                  { typeof(double)'   serializers[11] }'                  { typeof(char)'     serializers[12] }'                  { typeof(DateTime)' serializers[13] }'                  { typeof(Guid)'     serializers[14] }'                  { typeof(byte[])'   serializers[15] }'                  { typeof(string)'   serializers[16] }'                  { typeof(Symbol)'   serializers[17] }'                  { typeof(List)'     serializers[18] }'                  { typeof(Map)'      serializers[19] }'  #if !NETMF_LITE                  { typeof(Fields)'   serializers[19] }'  #endif              };
Magic Number,Amqp.Types,Encoder,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Types\Encoder.cs,Initialize,The following statement contains a magic number: codecByType = new Map()              {                  { typeof(bool)'     serializers[1] }'                  { typeof(byte)'     serializers[2] }'                  { typeof(ushort)'   serializers[3] }'                  { typeof(uint)'     serializers[4] }'                  { typeof(ulong)'    serializers[5] }'                  { typeof(sbyte)'    serializers[6] }'                  { typeof(short)'    serializers[7] }'                  { typeof(int)'      serializers[8] }'                  { typeof(long)'     serializers[9] }'                  { typeof(float)'    serializers[10] }'                  { typeof(double)'   serializers[11] }'                  { typeof(char)'     serializers[12] }'                  { typeof(DateTime)' serializers[13] }'                  { typeof(Guid)'     serializers[14] }'                  { typeof(byte[])'   serializers[15] }'                  { typeof(string)'   serializers[16] }'                  { typeof(Symbol)'   serializers[17] }'                  { typeof(List)'     serializers[18] }'                  { typeof(Map)'      serializers[19] }'  #if !NETMF_LITE                  { typeof(Fields)'   serializers[19] }'  #endif              };
Magic Number,Amqp.Types,Encoder,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Types\Encoder.cs,Initialize,The following statement contains a magic number: codecByType = new Map()              {                  { typeof(bool)'     serializers[1] }'                  { typeof(byte)'     serializers[2] }'                  { typeof(ushort)'   serializers[3] }'                  { typeof(uint)'     serializers[4] }'                  { typeof(ulong)'    serializers[5] }'                  { typeof(sbyte)'    serializers[6] }'                  { typeof(short)'    serializers[7] }'                  { typeof(int)'      serializers[8] }'                  { typeof(long)'     serializers[9] }'                  { typeof(float)'    serializers[10] }'                  { typeof(double)'   serializers[11] }'                  { typeof(char)'     serializers[12] }'                  { typeof(DateTime)' serializers[13] }'                  { typeof(Guid)'     serializers[14] }'                  { typeof(byte[])'   serializers[15] }'                  { typeof(string)'   serializers[16] }'                  { typeof(Symbol)'   serializers[17] }'                  { typeof(List)'     serializers[18] }'                  { typeof(Map)'      serializers[19] }'  #if !NETMF_LITE                  { typeof(Fields)'   serializers[19] }'  #endif              };
Magic Number,Amqp.Types,Encoder,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Types\Encoder.cs,Initialize,The following statement contains a magic number: codecByType = new Map()              {                  { typeof(bool)'     serializers[1] }'                  { typeof(byte)'     serializers[2] }'                  { typeof(ushort)'   serializers[3] }'                  { typeof(uint)'     serializers[4] }'                  { typeof(ulong)'    serializers[5] }'                  { typeof(sbyte)'    serializers[6] }'                  { typeof(short)'    serializers[7] }'                  { typeof(int)'      serializers[8] }'                  { typeof(long)'     serializers[9] }'                  { typeof(float)'    serializers[10] }'                  { typeof(double)'   serializers[11] }'                  { typeof(char)'     serializers[12] }'                  { typeof(DateTime)' serializers[13] }'                  { typeof(Guid)'     serializers[14] }'                  { typeof(byte[])'   serializers[15] }'                  { typeof(string)'   serializers[16] }'                  { typeof(Symbol)'   serializers[17] }'                  { typeof(List)'     serializers[18] }'                  { typeof(Map)'      serializers[19] }'  #if !NETMF_LITE                  { typeof(Fields)'   serializers[19] }'  #endif              };
Magic Number,Amqp.Types,Encoder,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Types\Encoder.cs,Initialize,The following statement contains a magic number: codecByType = new Map()              {                  { typeof(bool)'     serializers[1] }'                  { typeof(byte)'     serializers[2] }'                  { typeof(ushort)'   serializers[3] }'                  { typeof(uint)'     serializers[4] }'                  { typeof(ulong)'    serializers[5] }'                  { typeof(sbyte)'    serializers[6] }'                  { typeof(short)'    serializers[7] }'                  { typeof(int)'      serializers[8] }'                  { typeof(long)'     serializers[9] }'                  { typeof(float)'    serializers[10] }'                  { typeof(double)'   serializers[11] }'                  { typeof(char)'     serializers[12] }'                  { typeof(DateTime)' serializers[13] }'                  { typeof(Guid)'     serializers[14] }'                  { typeof(byte[])'   serializers[15] }'                  { typeof(string)'   serializers[16] }'                  { typeof(Symbol)'   serializers[17] }'                  { typeof(List)'     serializers[18] }'                  { typeof(Map)'      serializers[19] }'  #if !NETMF_LITE                  { typeof(Fields)'   serializers[19] }'  #endif              };
Magic Number,Amqp.Types,Encoder,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Types\Encoder.cs,Initialize,The following statement contains a magic number: codecByType = new Map()              {                  { typeof(bool)'     serializers[1] }'                  { typeof(byte)'     serializers[2] }'                  { typeof(ushort)'   serializers[3] }'                  { typeof(uint)'     serializers[4] }'                  { typeof(ulong)'    serializers[5] }'                  { typeof(sbyte)'    serializers[6] }'                  { typeof(short)'    serializers[7] }'                  { typeof(int)'      serializers[8] }'                  { typeof(long)'     serializers[9] }'                  { typeof(float)'    serializers[10] }'                  { typeof(double)'   serializers[11] }'                  { typeof(char)'     serializers[12] }'                  { typeof(DateTime)' serializers[13] }'                  { typeof(Guid)'     serializers[14] }'                  { typeof(byte[])'   serializers[15] }'                  { typeof(string)'   serializers[16] }'                  { typeof(Symbol)'   serializers[17] }'                  { typeof(List)'     serializers[18] }'                  { typeof(Map)'      serializers[19] }'  #if !NETMF_LITE                  { typeof(Fields)'   serializers[19] }'  #endif              };
Magic Number,Amqp.Types,Encoder,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Types\Encoder.cs,Initialize,The following statement contains a magic number: codecByType = new Map()              {                  { typeof(bool)'     serializers[1] }'                  { typeof(byte)'     serializers[2] }'                  { typeof(ushort)'   serializers[3] }'                  { typeof(uint)'     serializers[4] }'                  { typeof(ulong)'    serializers[5] }'                  { typeof(sbyte)'    serializers[6] }'                  { typeof(short)'    serializers[7] }'                  { typeof(int)'      serializers[8] }'                  { typeof(long)'     serializers[9] }'                  { typeof(float)'    serializers[10] }'                  { typeof(double)'   serializers[11] }'                  { typeof(char)'     serializers[12] }'                  { typeof(DateTime)' serializers[13] }'                  { typeof(Guid)'     serializers[14] }'                  { typeof(byte[])'   serializers[15] }'                  { typeof(string)'   serializers[16] }'                  { typeof(Symbol)'   serializers[17] }'                  { typeof(List)'     serializers[18] }'                  { typeof(Map)'      serializers[19] }'  #if !NETMF_LITE                  { typeof(Fields)'   serializers[19] }'  #endif              };
Magic Number,Amqp.Types,Encoder,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Types\Encoder.cs,Initialize,The following statement contains a magic number: codecByType = new Map()              {                  { typeof(bool)'     serializers[1] }'                  { typeof(byte)'     serializers[2] }'                  { typeof(ushort)'   serializers[3] }'                  { typeof(uint)'     serializers[4] }'                  { typeof(ulong)'    serializers[5] }'                  { typeof(sbyte)'    serializers[6] }'                  { typeof(short)'    serializers[7] }'                  { typeof(int)'      serializers[8] }'                  { typeof(long)'     serializers[9] }'                  { typeof(float)'    serializers[10] }'                  { typeof(double)'   serializers[11] }'                  { typeof(char)'     serializers[12] }'                  { typeof(DateTime)' serializers[13] }'                  { typeof(Guid)'     serializers[14] }'                  { typeof(byte[])'   serializers[15] }'                  { typeof(string)'   serializers[16] }'                  { typeof(Symbol)'   serializers[17] }'                  { typeof(List)'     serializers[18] }'                  { typeof(Map)'      serializers[19] }'  #if !NETMF_LITE                  { typeof(Fields)'   serializers[19] }'  #endif              };
Magic Number,Amqp.Types,Encoder,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Types\Encoder.cs,Initialize,The following statement contains a magic number: codecByType = new Map()              {                  { typeof(bool)'     serializers[1] }'                  { typeof(byte)'     serializers[2] }'                  { typeof(ushort)'   serializers[3] }'                  { typeof(uint)'     serializers[4] }'                  { typeof(ulong)'    serializers[5] }'                  { typeof(sbyte)'    serializers[6] }'                  { typeof(short)'    serializers[7] }'                  { typeof(int)'      serializers[8] }'                  { typeof(long)'     serializers[9] }'                  { typeof(float)'    serializers[10] }'                  { typeof(double)'   serializers[11] }'                  { typeof(char)'     serializers[12] }'                  { typeof(DateTime)' serializers[13] }'                  { typeof(Guid)'     serializers[14] }'                  { typeof(byte[])'   serializers[15] }'                  { typeof(string)'   serializers[16] }'                  { typeof(Symbol)'   serializers[17] }'                  { typeof(List)'     serializers[18] }'                  { typeof(Map)'      serializers[19] }'  #if !NETMF_LITE                  { typeof(Fields)'   serializers[19] }'  #endif              };
Magic Number,Amqp.Types,Encoder,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Types\Encoder.cs,Initialize,The following statement contains a magic number: codecByType = new Map()              {                  { typeof(bool)'     serializers[1] }'                  { typeof(byte)'     serializers[2] }'                  { typeof(ushort)'   serializers[3] }'                  { typeof(uint)'     serializers[4] }'                  { typeof(ulong)'    serializers[5] }'                  { typeof(sbyte)'    serializers[6] }'                  { typeof(short)'    serializers[7] }'                  { typeof(int)'      serializers[8] }'                  { typeof(long)'     serializers[9] }'                  { typeof(float)'    serializers[10] }'                  { typeof(double)'   serializers[11] }'                  { typeof(char)'     serializers[12] }'                  { typeof(DateTime)' serializers[13] }'                  { typeof(Guid)'     serializers[14] }'                  { typeof(byte[])'   serializers[15] }'                  { typeof(string)'   serializers[16] }'                  { typeof(Symbol)'   serializers[17] }'                  { typeof(List)'     serializers[18] }'                  { typeof(Map)'      serializers[19] }'  #if !NETMF_LITE                  { typeof(Fields)'   serializers[19] }'  #endif              };
Magic Number,Amqp.Types,Encoder,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Types\Encoder.cs,Initialize,The following statement contains a magic number: codecByType = new Map()              {                  { typeof(bool)'     serializers[1] }'                  { typeof(byte)'     serializers[2] }'                  { typeof(ushort)'   serializers[3] }'                  { typeof(uint)'     serializers[4] }'                  { typeof(ulong)'    serializers[5] }'                  { typeof(sbyte)'    serializers[6] }'                  { typeof(short)'    serializers[7] }'                  { typeof(int)'      serializers[8] }'                  { typeof(long)'     serializers[9] }'                  { typeof(float)'    serializers[10] }'                  { typeof(double)'   serializers[11] }'                  { typeof(char)'     serializers[12] }'                  { typeof(DateTime)' serializers[13] }'                  { typeof(Guid)'     serializers[14] }'                  { typeof(byte[])'   serializers[15] }'                  { typeof(string)'   serializers[16] }'                  { typeof(Symbol)'   serializers[17] }'                  { typeof(List)'     serializers[18] }'                  { typeof(Map)'      serializers[19] }'  #if !NETMF_LITE                  { typeof(Fields)'   serializers[19] }'  #endif              };
Magic Number,Amqp.Types,Encoder,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Types\Encoder.cs,Initialize,The following statement contains a magic number: codecIndexTable = new byte[][]              {                  // 0x40:null' 0x41:boolean.true' 0x42:boolean.false' 0x43:uint0' 0x44:ulong0' 0x45:list0                  new byte[] { 0' 1' 1' 4' 5' 18 }'                    // 0x50:ubyte' 0x51:byte' 0x52:small.uint' 0x53:small.ulong' 0x54:small.int' 0x55:small.long' 0x56:boolean                  new byte[] { 2' 6' 4' 5' 8' 9' 1 }'                    // 0x60:ushort' 0x61:short                  new byte[] { 3' 7 }'                    // 0x70:uint' 0x71:int' 0x72:float' 0x73:char' 0x74:decimal32                  new byte[] { 4' 8' 10' 12 }'                    // 0x80:ulong' 0x81:long' 0x82:double' 0x83:timestamp' 0x84:decimal64                  new byte[] { 5' 9' 11' 13 }'                    // 0x98:uuid                  new byte[] { 21' 21' 21' 21' 21' 21' 21' 21' 14 }'                                // 0xa0:bin8' 0xa1:str8' 0xa3:sym8                  new byte[] { 15' 16' 21' 17 }'                    // 0xb0:bin32' 0xb1:str32' 0xb3:sym32                  new byte[] { 15' 16' 21' 17 }'                    // 0xc0:list8' 0xc1:map8                  new byte[] { 18' 19 }'                    // 0xd0:list32' 0xd1:map32                  new byte[] { 18' 19 }'                    // 0xe0:array8                  new byte[] { 20 }'                    // 0xf0:array32                  new byte[] { 20 }              };
Magic Number,Amqp.Types,Encoder,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Types\Encoder.cs,Initialize,The following statement contains a magic number: codecIndexTable = new byte[][]              {                  // 0x40:null' 0x41:boolean.true' 0x42:boolean.false' 0x43:uint0' 0x44:ulong0' 0x45:list0                  new byte[] { 0' 1' 1' 4' 5' 18 }'                    // 0x50:ubyte' 0x51:byte' 0x52:small.uint' 0x53:small.ulong' 0x54:small.int' 0x55:small.long' 0x56:boolean                  new byte[] { 2' 6' 4' 5' 8' 9' 1 }'                    // 0x60:ushort' 0x61:short                  new byte[] { 3' 7 }'                    // 0x70:uint' 0x71:int' 0x72:float' 0x73:char' 0x74:decimal32                  new byte[] { 4' 8' 10' 12 }'                    // 0x80:ulong' 0x81:long' 0x82:double' 0x83:timestamp' 0x84:decimal64                  new byte[] { 5' 9' 11' 13 }'                    // 0x98:uuid                  new byte[] { 21' 21' 21' 21' 21' 21' 21' 21' 14 }'                                // 0xa0:bin8' 0xa1:str8' 0xa3:sym8                  new byte[] { 15' 16' 21' 17 }'                    // 0xb0:bin32' 0xb1:str32' 0xb3:sym32                  new byte[] { 15' 16' 21' 17 }'                    // 0xc0:list8' 0xc1:map8                  new byte[] { 18' 19 }'                    // 0xd0:list32' 0xd1:map32                  new byte[] { 18' 19 }'                    // 0xe0:array8                  new byte[] { 20 }'                    // 0xf0:array32                  new byte[] { 20 }              };
Magic Number,Amqp.Types,Encoder,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Types\Encoder.cs,Initialize,The following statement contains a magic number: codecIndexTable = new byte[][]              {                  // 0x40:null' 0x41:boolean.true' 0x42:boolean.false' 0x43:uint0' 0x44:ulong0' 0x45:list0                  new byte[] { 0' 1' 1' 4' 5' 18 }'                    // 0x50:ubyte' 0x51:byte' 0x52:small.uint' 0x53:small.ulong' 0x54:small.int' 0x55:small.long' 0x56:boolean                  new byte[] { 2' 6' 4' 5' 8' 9' 1 }'                    // 0x60:ushort' 0x61:short                  new byte[] { 3' 7 }'                    // 0x70:uint' 0x71:int' 0x72:float' 0x73:char' 0x74:decimal32                  new byte[] { 4' 8' 10' 12 }'                    // 0x80:ulong' 0x81:long' 0x82:double' 0x83:timestamp' 0x84:decimal64                  new byte[] { 5' 9' 11' 13 }'                    // 0x98:uuid                  new byte[] { 21' 21' 21' 21' 21' 21' 21' 21' 14 }'                                // 0xa0:bin8' 0xa1:str8' 0xa3:sym8                  new byte[] { 15' 16' 21' 17 }'                    // 0xb0:bin32' 0xb1:str32' 0xb3:sym32                  new byte[] { 15' 16' 21' 17 }'                    // 0xc0:list8' 0xc1:map8                  new byte[] { 18' 19 }'                    // 0xd0:list32' 0xd1:map32                  new byte[] { 18' 19 }'                    // 0xe0:array8                  new byte[] { 20 }'                    // 0xf0:array32                  new byte[] { 20 }              };
Magic Number,Amqp.Types,Encoder,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Types\Encoder.cs,Initialize,The following statement contains a magic number: codecIndexTable = new byte[][]              {                  // 0x40:null' 0x41:boolean.true' 0x42:boolean.false' 0x43:uint0' 0x44:ulong0' 0x45:list0                  new byte[] { 0' 1' 1' 4' 5' 18 }'                    // 0x50:ubyte' 0x51:byte' 0x52:small.uint' 0x53:small.ulong' 0x54:small.int' 0x55:small.long' 0x56:boolean                  new byte[] { 2' 6' 4' 5' 8' 9' 1 }'                    // 0x60:ushort' 0x61:short                  new byte[] { 3' 7 }'                    // 0x70:uint' 0x71:int' 0x72:float' 0x73:char' 0x74:decimal32                  new byte[] { 4' 8' 10' 12 }'                    // 0x80:ulong' 0x81:long' 0x82:double' 0x83:timestamp' 0x84:decimal64                  new byte[] { 5' 9' 11' 13 }'                    // 0x98:uuid                  new byte[] { 21' 21' 21' 21' 21' 21' 21' 21' 14 }'                                // 0xa0:bin8' 0xa1:str8' 0xa3:sym8                  new byte[] { 15' 16' 21' 17 }'                    // 0xb0:bin32' 0xb1:str32' 0xb3:sym32                  new byte[] { 15' 16' 21' 17 }'                    // 0xc0:list8' 0xc1:map8                  new byte[] { 18' 19 }'                    // 0xd0:list32' 0xd1:map32                  new byte[] { 18' 19 }'                    // 0xe0:array8                  new byte[] { 20 }'                    // 0xf0:array32                  new byte[] { 20 }              };
Magic Number,Amqp.Types,Encoder,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Types\Encoder.cs,Initialize,The following statement contains a magic number: codecIndexTable = new byte[][]              {                  // 0x40:null' 0x41:boolean.true' 0x42:boolean.false' 0x43:uint0' 0x44:ulong0' 0x45:list0                  new byte[] { 0' 1' 1' 4' 5' 18 }'                    // 0x50:ubyte' 0x51:byte' 0x52:small.uint' 0x53:small.ulong' 0x54:small.int' 0x55:small.long' 0x56:boolean                  new byte[] { 2' 6' 4' 5' 8' 9' 1 }'                    // 0x60:ushort' 0x61:short                  new byte[] { 3' 7 }'                    // 0x70:uint' 0x71:int' 0x72:float' 0x73:char' 0x74:decimal32                  new byte[] { 4' 8' 10' 12 }'                    // 0x80:ulong' 0x81:long' 0x82:double' 0x83:timestamp' 0x84:decimal64                  new byte[] { 5' 9' 11' 13 }'                    // 0x98:uuid                  new byte[] { 21' 21' 21' 21' 21' 21' 21' 21' 14 }'                                // 0xa0:bin8' 0xa1:str8' 0xa3:sym8                  new byte[] { 15' 16' 21' 17 }'                    // 0xb0:bin32' 0xb1:str32' 0xb3:sym32                  new byte[] { 15' 16' 21' 17 }'                    // 0xc0:list8' 0xc1:map8                  new byte[] { 18' 19 }'                    // 0xd0:list32' 0xd1:map32                  new byte[] { 18' 19 }'                    // 0xe0:array8                  new byte[] { 20 }'                    // 0xf0:array32                  new byte[] { 20 }              };
Magic Number,Amqp.Types,Encoder,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Types\Encoder.cs,Initialize,The following statement contains a magic number: codecIndexTable = new byte[][]              {                  // 0x40:null' 0x41:boolean.true' 0x42:boolean.false' 0x43:uint0' 0x44:ulong0' 0x45:list0                  new byte[] { 0' 1' 1' 4' 5' 18 }'                    // 0x50:ubyte' 0x51:byte' 0x52:small.uint' 0x53:small.ulong' 0x54:small.int' 0x55:small.long' 0x56:boolean                  new byte[] { 2' 6' 4' 5' 8' 9' 1 }'                    // 0x60:ushort' 0x61:short                  new byte[] { 3' 7 }'                    // 0x70:uint' 0x71:int' 0x72:float' 0x73:char' 0x74:decimal32                  new byte[] { 4' 8' 10' 12 }'                    // 0x80:ulong' 0x81:long' 0x82:double' 0x83:timestamp' 0x84:decimal64                  new byte[] { 5' 9' 11' 13 }'                    // 0x98:uuid                  new byte[] { 21' 21' 21' 21' 21' 21' 21' 21' 14 }'                                // 0xa0:bin8' 0xa1:str8' 0xa3:sym8                  new byte[] { 15' 16' 21' 17 }'                    // 0xb0:bin32' 0xb1:str32' 0xb3:sym32                  new byte[] { 15' 16' 21' 17 }'                    // 0xc0:list8' 0xc1:map8                  new byte[] { 18' 19 }'                    // 0xd0:list32' 0xd1:map32                  new byte[] { 18' 19 }'                    // 0xe0:array8                  new byte[] { 20 }'                    // 0xf0:array32                  new byte[] { 20 }              };
Magic Number,Amqp.Types,Encoder,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Types\Encoder.cs,Initialize,The following statement contains a magic number: codecIndexTable = new byte[][]              {                  // 0x40:null' 0x41:boolean.true' 0x42:boolean.false' 0x43:uint0' 0x44:ulong0' 0x45:list0                  new byte[] { 0' 1' 1' 4' 5' 18 }'                    // 0x50:ubyte' 0x51:byte' 0x52:small.uint' 0x53:small.ulong' 0x54:small.int' 0x55:small.long' 0x56:boolean                  new byte[] { 2' 6' 4' 5' 8' 9' 1 }'                    // 0x60:ushort' 0x61:short                  new byte[] { 3' 7 }'                    // 0x70:uint' 0x71:int' 0x72:float' 0x73:char' 0x74:decimal32                  new byte[] { 4' 8' 10' 12 }'                    // 0x80:ulong' 0x81:long' 0x82:double' 0x83:timestamp' 0x84:decimal64                  new byte[] { 5' 9' 11' 13 }'                    // 0x98:uuid                  new byte[] { 21' 21' 21' 21' 21' 21' 21' 21' 14 }'                                // 0xa0:bin8' 0xa1:str8' 0xa3:sym8                  new byte[] { 15' 16' 21' 17 }'                    // 0xb0:bin32' 0xb1:str32' 0xb3:sym32                  new byte[] { 15' 16' 21' 17 }'                    // 0xc0:list8' 0xc1:map8                  new byte[] { 18' 19 }'                    // 0xd0:list32' 0xd1:map32                  new byte[] { 18' 19 }'                    // 0xe0:array8                  new byte[] { 20 }'                    // 0xf0:array32                  new byte[] { 20 }              };
Magic Number,Amqp.Types,Encoder,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Types\Encoder.cs,Initialize,The following statement contains a magic number: codecIndexTable = new byte[][]              {                  // 0x40:null' 0x41:boolean.true' 0x42:boolean.false' 0x43:uint0' 0x44:ulong0' 0x45:list0                  new byte[] { 0' 1' 1' 4' 5' 18 }'                    // 0x50:ubyte' 0x51:byte' 0x52:small.uint' 0x53:small.ulong' 0x54:small.int' 0x55:small.long' 0x56:boolean                  new byte[] { 2' 6' 4' 5' 8' 9' 1 }'                    // 0x60:ushort' 0x61:short                  new byte[] { 3' 7 }'                    // 0x70:uint' 0x71:int' 0x72:float' 0x73:char' 0x74:decimal32                  new byte[] { 4' 8' 10' 12 }'                    // 0x80:ulong' 0x81:long' 0x82:double' 0x83:timestamp' 0x84:decimal64                  new byte[] { 5' 9' 11' 13 }'                    // 0x98:uuid                  new byte[] { 21' 21' 21' 21' 21' 21' 21' 21' 14 }'                                // 0xa0:bin8' 0xa1:str8' 0xa3:sym8                  new byte[] { 15' 16' 21' 17 }'                    // 0xb0:bin32' 0xb1:str32' 0xb3:sym32                  new byte[] { 15' 16' 21' 17 }'                    // 0xc0:list8' 0xc1:map8                  new byte[] { 18' 19 }'                    // 0xd0:list32' 0xd1:map32                  new byte[] { 18' 19 }'                    // 0xe0:array8                  new byte[] { 20 }'                    // 0xf0:array32                  new byte[] { 20 }              };
Magic Number,Amqp.Types,Encoder,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Types\Encoder.cs,Initialize,The following statement contains a magic number: codecIndexTable = new byte[][]              {                  // 0x40:null' 0x41:boolean.true' 0x42:boolean.false' 0x43:uint0' 0x44:ulong0' 0x45:list0                  new byte[] { 0' 1' 1' 4' 5' 18 }'                    // 0x50:ubyte' 0x51:byte' 0x52:small.uint' 0x53:small.ulong' 0x54:small.int' 0x55:small.long' 0x56:boolean                  new byte[] { 2' 6' 4' 5' 8' 9' 1 }'                    // 0x60:ushort' 0x61:short                  new byte[] { 3' 7 }'                    // 0x70:uint' 0x71:int' 0x72:float' 0x73:char' 0x74:decimal32                  new byte[] { 4' 8' 10' 12 }'                    // 0x80:ulong' 0x81:long' 0x82:double' 0x83:timestamp' 0x84:decimal64                  new byte[] { 5' 9' 11' 13 }'                    // 0x98:uuid                  new byte[] { 21' 21' 21' 21' 21' 21' 21' 21' 14 }'                                // 0xa0:bin8' 0xa1:str8' 0xa3:sym8                  new byte[] { 15' 16' 21' 17 }'                    // 0xb0:bin32' 0xb1:str32' 0xb3:sym32                  new byte[] { 15' 16' 21' 17 }'                    // 0xc0:list8' 0xc1:map8                  new byte[] { 18' 19 }'                    // 0xd0:list32' 0xd1:map32                  new byte[] { 18' 19 }'                    // 0xe0:array8                  new byte[] { 20 }'                    // 0xf0:array32                  new byte[] { 20 }              };
Magic Number,Amqp.Types,Encoder,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Types\Encoder.cs,Initialize,The following statement contains a magic number: codecIndexTable = new byte[][]              {                  // 0x40:null' 0x41:boolean.true' 0x42:boolean.false' 0x43:uint0' 0x44:ulong0' 0x45:list0                  new byte[] { 0' 1' 1' 4' 5' 18 }'                    // 0x50:ubyte' 0x51:byte' 0x52:small.uint' 0x53:small.ulong' 0x54:small.int' 0x55:small.long' 0x56:boolean                  new byte[] { 2' 6' 4' 5' 8' 9' 1 }'                    // 0x60:ushort' 0x61:short                  new byte[] { 3' 7 }'                    // 0x70:uint' 0x71:int' 0x72:float' 0x73:char' 0x74:decimal32                  new byte[] { 4' 8' 10' 12 }'                    // 0x80:ulong' 0x81:long' 0x82:double' 0x83:timestamp' 0x84:decimal64                  new byte[] { 5' 9' 11' 13 }'                    // 0x98:uuid                  new byte[] { 21' 21' 21' 21' 21' 21' 21' 21' 14 }'                                // 0xa0:bin8' 0xa1:str8' 0xa3:sym8                  new byte[] { 15' 16' 21' 17 }'                    // 0xb0:bin32' 0xb1:str32' 0xb3:sym32                  new byte[] { 15' 16' 21' 17 }'                    // 0xc0:list8' 0xc1:map8                  new byte[] { 18' 19 }'                    // 0xd0:list32' 0xd1:map32                  new byte[] { 18' 19 }'                    // 0xe0:array8                  new byte[] { 20 }'                    // 0xf0:array32                  new byte[] { 20 }              };
Magic Number,Amqp.Types,Encoder,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Types\Encoder.cs,Initialize,The following statement contains a magic number: codecIndexTable = new byte[][]              {                  // 0x40:null' 0x41:boolean.true' 0x42:boolean.false' 0x43:uint0' 0x44:ulong0' 0x45:list0                  new byte[] { 0' 1' 1' 4' 5' 18 }'                    // 0x50:ubyte' 0x51:byte' 0x52:small.uint' 0x53:small.ulong' 0x54:small.int' 0x55:small.long' 0x56:boolean                  new byte[] { 2' 6' 4' 5' 8' 9' 1 }'                    // 0x60:ushort' 0x61:short                  new byte[] { 3' 7 }'                    // 0x70:uint' 0x71:int' 0x72:float' 0x73:char' 0x74:decimal32                  new byte[] { 4' 8' 10' 12 }'                    // 0x80:ulong' 0x81:long' 0x82:double' 0x83:timestamp' 0x84:decimal64                  new byte[] { 5' 9' 11' 13 }'                    // 0x98:uuid                  new byte[] { 21' 21' 21' 21' 21' 21' 21' 21' 14 }'                                // 0xa0:bin8' 0xa1:str8' 0xa3:sym8                  new byte[] { 15' 16' 21' 17 }'                    // 0xb0:bin32' 0xb1:str32' 0xb3:sym32                  new byte[] { 15' 16' 21' 17 }'                    // 0xc0:list8' 0xc1:map8                  new byte[] { 18' 19 }'                    // 0xd0:list32' 0xd1:map32                  new byte[] { 18' 19 }'                    // 0xe0:array8                  new byte[] { 20 }'                    // 0xf0:array32                  new byte[] { 20 }              };
Magic Number,Amqp.Types,Encoder,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Types\Encoder.cs,Initialize,The following statement contains a magic number: codecIndexTable = new byte[][]              {                  // 0x40:null' 0x41:boolean.true' 0x42:boolean.false' 0x43:uint0' 0x44:ulong0' 0x45:list0                  new byte[] { 0' 1' 1' 4' 5' 18 }'                    // 0x50:ubyte' 0x51:byte' 0x52:small.uint' 0x53:small.ulong' 0x54:small.int' 0x55:small.long' 0x56:boolean                  new byte[] { 2' 6' 4' 5' 8' 9' 1 }'                    // 0x60:ushort' 0x61:short                  new byte[] { 3' 7 }'                    // 0x70:uint' 0x71:int' 0x72:float' 0x73:char' 0x74:decimal32                  new byte[] { 4' 8' 10' 12 }'                    // 0x80:ulong' 0x81:long' 0x82:double' 0x83:timestamp' 0x84:decimal64                  new byte[] { 5' 9' 11' 13 }'                    // 0x98:uuid                  new byte[] { 21' 21' 21' 21' 21' 21' 21' 21' 14 }'                                // 0xa0:bin8' 0xa1:str8' 0xa3:sym8                  new byte[] { 15' 16' 21' 17 }'                    // 0xb0:bin32' 0xb1:str32' 0xb3:sym32                  new byte[] { 15' 16' 21' 17 }'                    // 0xc0:list8' 0xc1:map8                  new byte[] { 18' 19 }'                    // 0xd0:list32' 0xd1:map32                  new byte[] { 18' 19 }'                    // 0xe0:array8                  new byte[] { 20 }'                    // 0xf0:array32                  new byte[] { 20 }              };
Magic Number,Amqp.Types,Encoder,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Types\Encoder.cs,Initialize,The following statement contains a magic number: codecIndexTable = new byte[][]              {                  // 0x40:null' 0x41:boolean.true' 0x42:boolean.false' 0x43:uint0' 0x44:ulong0' 0x45:list0                  new byte[] { 0' 1' 1' 4' 5' 18 }'                    // 0x50:ubyte' 0x51:byte' 0x52:small.uint' 0x53:small.ulong' 0x54:small.int' 0x55:small.long' 0x56:boolean                  new byte[] { 2' 6' 4' 5' 8' 9' 1 }'                    // 0x60:ushort' 0x61:short                  new byte[] { 3' 7 }'                    // 0x70:uint' 0x71:int' 0x72:float' 0x73:char' 0x74:decimal32                  new byte[] { 4' 8' 10' 12 }'                    // 0x80:ulong' 0x81:long' 0x82:double' 0x83:timestamp' 0x84:decimal64                  new byte[] { 5' 9' 11' 13 }'                    // 0x98:uuid                  new byte[] { 21' 21' 21' 21' 21' 21' 21' 21' 14 }'                                // 0xa0:bin8' 0xa1:str8' 0xa3:sym8                  new byte[] { 15' 16' 21' 17 }'                    // 0xb0:bin32' 0xb1:str32' 0xb3:sym32                  new byte[] { 15' 16' 21' 17 }'                    // 0xc0:list8' 0xc1:map8                  new byte[] { 18' 19 }'                    // 0xd0:list32' 0xd1:map32                  new byte[] { 18' 19 }'                    // 0xe0:array8                  new byte[] { 20 }'                    // 0xf0:array32                  new byte[] { 20 }              };
Magic Number,Amqp.Types,Encoder,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Types\Encoder.cs,Initialize,The following statement contains a magic number: codecIndexTable = new byte[][]              {                  // 0x40:null' 0x41:boolean.true' 0x42:boolean.false' 0x43:uint0' 0x44:ulong0' 0x45:list0                  new byte[] { 0' 1' 1' 4' 5' 18 }'                    // 0x50:ubyte' 0x51:byte' 0x52:small.uint' 0x53:small.ulong' 0x54:small.int' 0x55:small.long' 0x56:boolean                  new byte[] { 2' 6' 4' 5' 8' 9' 1 }'                    // 0x60:ushort' 0x61:short                  new byte[] { 3' 7 }'                    // 0x70:uint' 0x71:int' 0x72:float' 0x73:char' 0x74:decimal32                  new byte[] { 4' 8' 10' 12 }'                    // 0x80:ulong' 0x81:long' 0x82:double' 0x83:timestamp' 0x84:decimal64                  new byte[] { 5' 9' 11' 13 }'                    // 0x98:uuid                  new byte[] { 21' 21' 21' 21' 21' 21' 21' 21' 14 }'                                // 0xa0:bin8' 0xa1:str8' 0xa3:sym8                  new byte[] { 15' 16' 21' 17 }'                    // 0xb0:bin32' 0xb1:str32' 0xb3:sym32                  new byte[] { 15' 16' 21' 17 }'                    // 0xc0:list8' 0xc1:map8                  new byte[] { 18' 19 }'                    // 0xd0:list32' 0xd1:map32                  new byte[] { 18' 19 }'                    // 0xe0:array8                  new byte[] { 20 }'                    // 0xf0:array32                  new byte[] { 20 }              };
Magic Number,Amqp.Types,Encoder,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Types\Encoder.cs,Initialize,The following statement contains a magic number: codecIndexTable = new byte[][]              {                  // 0x40:null' 0x41:boolean.true' 0x42:boolean.false' 0x43:uint0' 0x44:ulong0' 0x45:list0                  new byte[] { 0' 1' 1' 4' 5' 18 }'                    // 0x50:ubyte' 0x51:byte' 0x52:small.uint' 0x53:small.ulong' 0x54:small.int' 0x55:small.long' 0x56:boolean                  new byte[] { 2' 6' 4' 5' 8' 9' 1 }'                    // 0x60:ushort' 0x61:short                  new byte[] { 3' 7 }'                    // 0x70:uint' 0x71:int' 0x72:float' 0x73:char' 0x74:decimal32                  new byte[] { 4' 8' 10' 12 }'                    // 0x80:ulong' 0x81:long' 0x82:double' 0x83:timestamp' 0x84:decimal64                  new byte[] { 5' 9' 11' 13 }'                    // 0x98:uuid                  new byte[] { 21' 21' 21' 21' 21' 21' 21' 21' 14 }'                                // 0xa0:bin8' 0xa1:str8' 0xa3:sym8                  new byte[] { 15' 16' 21' 17 }'                    // 0xb0:bin32' 0xb1:str32' 0xb3:sym32                  new byte[] { 15' 16' 21' 17 }'                    // 0xc0:list8' 0xc1:map8                  new byte[] { 18' 19 }'                    // 0xd0:list32' 0xd1:map32                  new byte[] { 18' 19 }'                    // 0xe0:array8                  new byte[] { 20 }'                    // 0xf0:array32                  new byte[] { 20 }              };
Magic Number,Amqp.Types,Encoder,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Types\Encoder.cs,Initialize,The following statement contains a magic number: codecIndexTable = new byte[][]              {                  // 0x40:null' 0x41:boolean.true' 0x42:boolean.false' 0x43:uint0' 0x44:ulong0' 0x45:list0                  new byte[] { 0' 1' 1' 4' 5' 18 }'                    // 0x50:ubyte' 0x51:byte' 0x52:small.uint' 0x53:small.ulong' 0x54:small.int' 0x55:small.long' 0x56:boolean                  new byte[] { 2' 6' 4' 5' 8' 9' 1 }'                    // 0x60:ushort' 0x61:short                  new byte[] { 3' 7 }'                    // 0x70:uint' 0x71:int' 0x72:float' 0x73:char' 0x74:decimal32                  new byte[] { 4' 8' 10' 12 }'                    // 0x80:ulong' 0x81:long' 0x82:double' 0x83:timestamp' 0x84:decimal64                  new byte[] { 5' 9' 11' 13 }'                    // 0x98:uuid                  new byte[] { 21' 21' 21' 21' 21' 21' 21' 21' 14 }'                                // 0xa0:bin8' 0xa1:str8' 0xa3:sym8                  new byte[] { 15' 16' 21' 17 }'                    // 0xb0:bin32' 0xb1:str32' 0xb3:sym32                  new byte[] { 15' 16' 21' 17 }'                    // 0xc0:list8' 0xc1:map8                  new byte[] { 18' 19 }'                    // 0xd0:list32' 0xd1:map32                  new byte[] { 18' 19 }'                    // 0xe0:array8                  new byte[] { 20 }'                    // 0xf0:array32                  new byte[] { 20 }              };
Magic Number,Amqp.Types,Encoder,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Types\Encoder.cs,Initialize,The following statement contains a magic number: codecIndexTable = new byte[][]              {                  // 0x40:null' 0x41:boolean.true' 0x42:boolean.false' 0x43:uint0' 0x44:ulong0' 0x45:list0                  new byte[] { 0' 1' 1' 4' 5' 18 }'                    // 0x50:ubyte' 0x51:byte' 0x52:small.uint' 0x53:small.ulong' 0x54:small.int' 0x55:small.long' 0x56:boolean                  new byte[] { 2' 6' 4' 5' 8' 9' 1 }'                    // 0x60:ushort' 0x61:short                  new byte[] { 3' 7 }'                    // 0x70:uint' 0x71:int' 0x72:float' 0x73:char' 0x74:decimal32                  new byte[] { 4' 8' 10' 12 }'                    // 0x80:ulong' 0x81:long' 0x82:double' 0x83:timestamp' 0x84:decimal64                  new byte[] { 5' 9' 11' 13 }'                    // 0x98:uuid                  new byte[] { 21' 21' 21' 21' 21' 21' 21' 21' 14 }'                                // 0xa0:bin8' 0xa1:str8' 0xa3:sym8                  new byte[] { 15' 16' 21' 17 }'                    // 0xb0:bin32' 0xb1:str32' 0xb3:sym32                  new byte[] { 15' 16' 21' 17 }'                    // 0xc0:list8' 0xc1:map8                  new byte[] { 18' 19 }'                    // 0xd0:list32' 0xd1:map32                  new byte[] { 18' 19 }'                    // 0xe0:array8                  new byte[] { 20 }'                    // 0xf0:array32                  new byte[] { 20 }              };
Magic Number,Amqp.Types,Encoder,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Types\Encoder.cs,Initialize,The following statement contains a magic number: codecIndexTable = new byte[][]              {                  // 0x40:null' 0x41:boolean.true' 0x42:boolean.false' 0x43:uint0' 0x44:ulong0' 0x45:list0                  new byte[] { 0' 1' 1' 4' 5' 18 }'                    // 0x50:ubyte' 0x51:byte' 0x52:small.uint' 0x53:small.ulong' 0x54:small.int' 0x55:small.long' 0x56:boolean                  new byte[] { 2' 6' 4' 5' 8' 9' 1 }'                    // 0x60:ushort' 0x61:short                  new byte[] { 3' 7 }'                    // 0x70:uint' 0x71:int' 0x72:float' 0x73:char' 0x74:decimal32                  new byte[] { 4' 8' 10' 12 }'                    // 0x80:ulong' 0x81:long' 0x82:double' 0x83:timestamp' 0x84:decimal64                  new byte[] { 5' 9' 11' 13 }'                    // 0x98:uuid                  new byte[] { 21' 21' 21' 21' 21' 21' 21' 21' 14 }'                                // 0xa0:bin8' 0xa1:str8' 0xa3:sym8                  new byte[] { 15' 16' 21' 17 }'                    // 0xb0:bin32' 0xb1:str32' 0xb3:sym32                  new byte[] { 15' 16' 21' 17 }'                    // 0xc0:list8' 0xc1:map8                  new byte[] { 18' 19 }'                    // 0xd0:list32' 0xd1:map32                  new byte[] { 18' 19 }'                    // 0xe0:array8                  new byte[] { 20 }'                    // 0xf0:array32                  new byte[] { 20 }              };
Magic Number,Amqp.Types,Encoder,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Types\Encoder.cs,Initialize,The following statement contains a magic number: codecIndexTable = new byte[][]              {                  // 0x40:null' 0x41:boolean.true' 0x42:boolean.false' 0x43:uint0' 0x44:ulong0' 0x45:list0                  new byte[] { 0' 1' 1' 4' 5' 18 }'                    // 0x50:ubyte' 0x51:byte' 0x52:small.uint' 0x53:small.ulong' 0x54:small.int' 0x55:small.long' 0x56:boolean                  new byte[] { 2' 6' 4' 5' 8' 9' 1 }'                    // 0x60:ushort' 0x61:short                  new byte[] { 3' 7 }'                    // 0x70:uint' 0x71:int' 0x72:float' 0x73:char' 0x74:decimal32                  new byte[] { 4' 8' 10' 12 }'                    // 0x80:ulong' 0x81:long' 0x82:double' 0x83:timestamp' 0x84:decimal64                  new byte[] { 5' 9' 11' 13 }'                    // 0x98:uuid                  new byte[] { 21' 21' 21' 21' 21' 21' 21' 21' 14 }'                                // 0xa0:bin8' 0xa1:str8' 0xa3:sym8                  new byte[] { 15' 16' 21' 17 }'                    // 0xb0:bin32' 0xb1:str32' 0xb3:sym32                  new byte[] { 15' 16' 21' 17 }'                    // 0xc0:list8' 0xc1:map8                  new byte[] { 18' 19 }'                    // 0xd0:list32' 0xd1:map32                  new byte[] { 18' 19 }'                    // 0xe0:array8                  new byte[] { 20 }'                    // 0xf0:array32                  new byte[] { 20 }              };
Magic Number,Amqp.Types,Encoder,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Types\Encoder.cs,Initialize,The following statement contains a magic number: codecIndexTable = new byte[][]              {                  // 0x40:null' 0x41:boolean.true' 0x42:boolean.false' 0x43:uint0' 0x44:ulong0' 0x45:list0                  new byte[] { 0' 1' 1' 4' 5' 18 }'                    // 0x50:ubyte' 0x51:byte' 0x52:small.uint' 0x53:small.ulong' 0x54:small.int' 0x55:small.long' 0x56:boolean                  new byte[] { 2' 6' 4' 5' 8' 9' 1 }'                    // 0x60:ushort' 0x61:short                  new byte[] { 3' 7 }'                    // 0x70:uint' 0x71:int' 0x72:float' 0x73:char' 0x74:decimal32                  new byte[] { 4' 8' 10' 12 }'                    // 0x80:ulong' 0x81:long' 0x82:double' 0x83:timestamp' 0x84:decimal64                  new byte[] { 5' 9' 11' 13 }'                    // 0x98:uuid                  new byte[] { 21' 21' 21' 21' 21' 21' 21' 21' 14 }'                                // 0xa0:bin8' 0xa1:str8' 0xa3:sym8                  new byte[] { 15' 16' 21' 17 }'                    // 0xb0:bin32' 0xb1:str32' 0xb3:sym32                  new byte[] { 15' 16' 21' 17 }'                    // 0xc0:list8' 0xc1:map8                  new byte[] { 18' 19 }'                    // 0xd0:list32' 0xd1:map32                  new byte[] { 18' 19 }'                    // 0xe0:array8                  new byte[] { 20 }'                    // 0xf0:array32                  new byte[] { 20 }              };
Magic Number,Amqp.Types,Encoder,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Types\Encoder.cs,Initialize,The following statement contains a magic number: codecIndexTable = new byte[][]              {                  // 0x40:null' 0x41:boolean.true' 0x42:boolean.false' 0x43:uint0' 0x44:ulong0' 0x45:list0                  new byte[] { 0' 1' 1' 4' 5' 18 }'                    // 0x50:ubyte' 0x51:byte' 0x52:small.uint' 0x53:small.ulong' 0x54:small.int' 0x55:small.long' 0x56:boolean                  new byte[] { 2' 6' 4' 5' 8' 9' 1 }'                    // 0x60:ushort' 0x61:short                  new byte[] { 3' 7 }'                    // 0x70:uint' 0x71:int' 0x72:float' 0x73:char' 0x74:decimal32                  new byte[] { 4' 8' 10' 12 }'                    // 0x80:ulong' 0x81:long' 0x82:double' 0x83:timestamp' 0x84:decimal64                  new byte[] { 5' 9' 11' 13 }'                    // 0x98:uuid                  new byte[] { 21' 21' 21' 21' 21' 21' 21' 21' 14 }'                                // 0xa0:bin8' 0xa1:str8' 0xa3:sym8                  new byte[] { 15' 16' 21' 17 }'                    // 0xb0:bin32' 0xb1:str32' 0xb3:sym32                  new byte[] { 15' 16' 21' 17 }'                    // 0xc0:list8' 0xc1:map8                  new byte[] { 18' 19 }'                    // 0xd0:list32' 0xd1:map32                  new byte[] { 18' 19 }'                    // 0xe0:array8                  new byte[] { 20 }'                    // 0xf0:array32                  new byte[] { 20 }              };
Magic Number,Amqp.Types,Encoder,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Types\Encoder.cs,Initialize,The following statement contains a magic number: codecIndexTable = new byte[][]              {                  // 0x40:null' 0x41:boolean.true' 0x42:boolean.false' 0x43:uint0' 0x44:ulong0' 0x45:list0                  new byte[] { 0' 1' 1' 4' 5' 18 }'                    // 0x50:ubyte' 0x51:byte' 0x52:small.uint' 0x53:small.ulong' 0x54:small.int' 0x55:small.long' 0x56:boolean                  new byte[] { 2' 6' 4' 5' 8' 9' 1 }'                    // 0x60:ushort' 0x61:short                  new byte[] { 3' 7 }'                    // 0x70:uint' 0x71:int' 0x72:float' 0x73:char' 0x74:decimal32                  new byte[] { 4' 8' 10' 12 }'                    // 0x80:ulong' 0x81:long' 0x82:double' 0x83:timestamp' 0x84:decimal64                  new byte[] { 5' 9' 11' 13 }'                    // 0x98:uuid                  new byte[] { 21' 21' 21' 21' 21' 21' 21' 21' 14 }'                                // 0xa0:bin8' 0xa1:str8' 0xa3:sym8                  new byte[] { 15' 16' 21' 17 }'                    // 0xb0:bin32' 0xb1:str32' 0xb3:sym32                  new byte[] { 15' 16' 21' 17 }'                    // 0xc0:list8' 0xc1:map8                  new byte[] { 18' 19 }'                    // 0xd0:list32' 0xd1:map32                  new byte[] { 18' 19 }'                    // 0xe0:array8                  new byte[] { 20 }'                    // 0xf0:array32                  new byte[] { 20 }              };
Magic Number,Amqp.Types,Encoder,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Types\Encoder.cs,Initialize,The following statement contains a magic number: codecIndexTable = new byte[][]              {                  // 0x40:null' 0x41:boolean.true' 0x42:boolean.false' 0x43:uint0' 0x44:ulong0' 0x45:list0                  new byte[] { 0' 1' 1' 4' 5' 18 }'                    // 0x50:ubyte' 0x51:byte' 0x52:small.uint' 0x53:small.ulong' 0x54:small.int' 0x55:small.long' 0x56:boolean                  new byte[] { 2' 6' 4' 5' 8' 9' 1 }'                    // 0x60:ushort' 0x61:short                  new byte[] { 3' 7 }'                    // 0x70:uint' 0x71:int' 0x72:float' 0x73:char' 0x74:decimal32                  new byte[] { 4' 8' 10' 12 }'                    // 0x80:ulong' 0x81:long' 0x82:double' 0x83:timestamp' 0x84:decimal64                  new byte[] { 5' 9' 11' 13 }'                    // 0x98:uuid                  new byte[] { 21' 21' 21' 21' 21' 21' 21' 21' 14 }'                                // 0xa0:bin8' 0xa1:str8' 0xa3:sym8                  new byte[] { 15' 16' 21' 17 }'                    // 0xb0:bin32' 0xb1:str32' 0xb3:sym32                  new byte[] { 15' 16' 21' 17 }'                    // 0xc0:list8' 0xc1:map8                  new byte[] { 18' 19 }'                    // 0xd0:list32' 0xd1:map32                  new byte[] { 18' 19 }'                    // 0xe0:array8                  new byte[] { 20 }'                    // 0xf0:array32                  new byte[] { 20 }              };
Magic Number,Amqp.Types,Encoder,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Types\Encoder.cs,Initialize,The following statement contains a magic number: codecIndexTable = new byte[][]              {                  // 0x40:null' 0x41:boolean.true' 0x42:boolean.false' 0x43:uint0' 0x44:ulong0' 0x45:list0                  new byte[] { 0' 1' 1' 4' 5' 18 }'                    // 0x50:ubyte' 0x51:byte' 0x52:small.uint' 0x53:small.ulong' 0x54:small.int' 0x55:small.long' 0x56:boolean                  new byte[] { 2' 6' 4' 5' 8' 9' 1 }'                    // 0x60:ushort' 0x61:short                  new byte[] { 3' 7 }'                    // 0x70:uint' 0x71:int' 0x72:float' 0x73:char' 0x74:decimal32                  new byte[] { 4' 8' 10' 12 }'                    // 0x80:ulong' 0x81:long' 0x82:double' 0x83:timestamp' 0x84:decimal64                  new byte[] { 5' 9' 11' 13 }'                    // 0x98:uuid                  new byte[] { 21' 21' 21' 21' 21' 21' 21' 21' 14 }'                                // 0xa0:bin8' 0xa1:str8' 0xa3:sym8                  new byte[] { 15' 16' 21' 17 }'                    // 0xb0:bin32' 0xb1:str32' 0xb3:sym32                  new byte[] { 15' 16' 21' 17 }'                    // 0xc0:list8' 0xc1:map8                  new byte[] { 18' 19 }'                    // 0xd0:list32' 0xd1:map32                  new byte[] { 18' 19 }'                    // 0xe0:array8                  new byte[] { 20 }'                    // 0xf0:array32                  new byte[] { 20 }              };
Magic Number,Amqp.Types,Encoder,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Types\Encoder.cs,Initialize,The following statement contains a magic number: codecIndexTable = new byte[][]              {                  // 0x40:null' 0x41:boolean.true' 0x42:boolean.false' 0x43:uint0' 0x44:ulong0' 0x45:list0                  new byte[] { 0' 1' 1' 4' 5' 18 }'                    // 0x50:ubyte' 0x51:byte' 0x52:small.uint' 0x53:small.ulong' 0x54:small.int' 0x55:small.long' 0x56:boolean                  new byte[] { 2' 6' 4' 5' 8' 9' 1 }'                    // 0x60:ushort' 0x61:short                  new byte[] { 3' 7 }'                    // 0x70:uint' 0x71:int' 0x72:float' 0x73:char' 0x74:decimal32                  new byte[] { 4' 8' 10' 12 }'                    // 0x80:ulong' 0x81:long' 0x82:double' 0x83:timestamp' 0x84:decimal64                  new byte[] { 5' 9' 11' 13 }'                    // 0x98:uuid                  new byte[] { 21' 21' 21' 21' 21' 21' 21' 21' 14 }'                                // 0xa0:bin8' 0xa1:str8' 0xa3:sym8                  new byte[] { 15' 16' 21' 17 }'                    // 0xb0:bin32' 0xb1:str32' 0xb3:sym32                  new byte[] { 15' 16' 21' 17 }'                    // 0xc0:list8' 0xc1:map8                  new byte[] { 18' 19 }'                    // 0xd0:list32' 0xd1:map32                  new byte[] { 18' 19 }'                    // 0xe0:array8                  new byte[] { 20 }'                    // 0xf0:array32                  new byte[] { 20 }              };
Magic Number,Amqp.Types,Encoder,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Types\Encoder.cs,Initialize,The following statement contains a magic number: codecIndexTable = new byte[][]              {                  // 0x40:null' 0x41:boolean.true' 0x42:boolean.false' 0x43:uint0' 0x44:ulong0' 0x45:list0                  new byte[] { 0' 1' 1' 4' 5' 18 }'                    // 0x50:ubyte' 0x51:byte' 0x52:small.uint' 0x53:small.ulong' 0x54:small.int' 0x55:small.long' 0x56:boolean                  new byte[] { 2' 6' 4' 5' 8' 9' 1 }'                    // 0x60:ushort' 0x61:short                  new byte[] { 3' 7 }'                    // 0x70:uint' 0x71:int' 0x72:float' 0x73:char' 0x74:decimal32                  new byte[] { 4' 8' 10' 12 }'                    // 0x80:ulong' 0x81:long' 0x82:double' 0x83:timestamp' 0x84:decimal64                  new byte[] { 5' 9' 11' 13 }'                    // 0x98:uuid                  new byte[] { 21' 21' 21' 21' 21' 21' 21' 21' 14 }'                                // 0xa0:bin8' 0xa1:str8' 0xa3:sym8                  new byte[] { 15' 16' 21' 17 }'                    // 0xb0:bin32' 0xb1:str32' 0xb3:sym32                  new byte[] { 15' 16' 21' 17 }'                    // 0xc0:list8' 0xc1:map8                  new byte[] { 18' 19 }'                    // 0xd0:list32' 0xd1:map32                  new byte[] { 18' 19 }'                    // 0xe0:array8                  new byte[] { 20 }'                    // 0xf0:array32                  new byte[] { 20 }              };
Magic Number,Amqp.Types,Encoder,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Types\Encoder.cs,Initialize,The following statement contains a magic number: codecIndexTable = new byte[][]              {                  // 0x40:null' 0x41:boolean.true' 0x42:boolean.false' 0x43:uint0' 0x44:ulong0' 0x45:list0                  new byte[] { 0' 1' 1' 4' 5' 18 }'                    // 0x50:ubyte' 0x51:byte' 0x52:small.uint' 0x53:small.ulong' 0x54:small.int' 0x55:small.long' 0x56:boolean                  new byte[] { 2' 6' 4' 5' 8' 9' 1 }'                    // 0x60:ushort' 0x61:short                  new byte[] { 3' 7 }'                    // 0x70:uint' 0x71:int' 0x72:float' 0x73:char' 0x74:decimal32                  new byte[] { 4' 8' 10' 12 }'                    // 0x80:ulong' 0x81:long' 0x82:double' 0x83:timestamp' 0x84:decimal64                  new byte[] { 5' 9' 11' 13 }'                    // 0x98:uuid                  new byte[] { 21' 21' 21' 21' 21' 21' 21' 21' 14 }'                                // 0xa0:bin8' 0xa1:str8' 0xa3:sym8                  new byte[] { 15' 16' 21' 17 }'                    // 0xb0:bin32' 0xb1:str32' 0xb3:sym32                  new byte[] { 15' 16' 21' 17 }'                    // 0xc0:list8' 0xc1:map8                  new byte[] { 18' 19 }'                    // 0xd0:list32' 0xd1:map32                  new byte[] { 18' 19 }'                    // 0xe0:array8                  new byte[] { 20 }'                    // 0xf0:array32                  new byte[] { 20 }              };
Magic Number,Amqp.Types,Encoder,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Types\Encoder.cs,Initialize,The following statement contains a magic number: codecIndexTable = new byte[][]              {                  // 0x40:null' 0x41:boolean.true' 0x42:boolean.false' 0x43:uint0' 0x44:ulong0' 0x45:list0                  new byte[] { 0' 1' 1' 4' 5' 18 }'                    // 0x50:ubyte' 0x51:byte' 0x52:small.uint' 0x53:small.ulong' 0x54:small.int' 0x55:small.long' 0x56:boolean                  new byte[] { 2' 6' 4' 5' 8' 9' 1 }'                    // 0x60:ushort' 0x61:short                  new byte[] { 3' 7 }'                    // 0x70:uint' 0x71:int' 0x72:float' 0x73:char' 0x74:decimal32                  new byte[] { 4' 8' 10' 12 }'                    // 0x80:ulong' 0x81:long' 0x82:double' 0x83:timestamp' 0x84:decimal64                  new byte[] { 5' 9' 11' 13 }'                    // 0x98:uuid                  new byte[] { 21' 21' 21' 21' 21' 21' 21' 21' 14 }'                                // 0xa0:bin8' 0xa1:str8' 0xa3:sym8                  new byte[] { 15' 16' 21' 17 }'                    // 0xb0:bin32' 0xb1:str32' 0xb3:sym32                  new byte[] { 15' 16' 21' 17 }'                    // 0xc0:list8' 0xc1:map8                  new byte[] { 18' 19 }'                    // 0xd0:list32' 0xd1:map32                  new byte[] { 18' 19 }'                    // 0xe0:array8                  new byte[] { 20 }'                    // 0xf0:array32                  new byte[] { 20 }              };
Magic Number,Amqp.Types,Encoder,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Types\Encoder.cs,Initialize,The following statement contains a magic number: codecIndexTable = new byte[][]              {                  // 0x40:null' 0x41:boolean.true' 0x42:boolean.false' 0x43:uint0' 0x44:ulong0' 0x45:list0                  new byte[] { 0' 1' 1' 4' 5' 18 }'                    // 0x50:ubyte' 0x51:byte' 0x52:small.uint' 0x53:small.ulong' 0x54:small.int' 0x55:small.long' 0x56:boolean                  new byte[] { 2' 6' 4' 5' 8' 9' 1 }'                    // 0x60:ushort' 0x61:short                  new byte[] { 3' 7 }'                    // 0x70:uint' 0x71:int' 0x72:float' 0x73:char' 0x74:decimal32                  new byte[] { 4' 8' 10' 12 }'                    // 0x80:ulong' 0x81:long' 0x82:double' 0x83:timestamp' 0x84:decimal64                  new byte[] { 5' 9' 11' 13 }'                    // 0x98:uuid                  new byte[] { 21' 21' 21' 21' 21' 21' 21' 21' 14 }'                                // 0xa0:bin8' 0xa1:str8' 0xa3:sym8                  new byte[] { 15' 16' 21' 17 }'                    // 0xb0:bin32' 0xb1:str32' 0xb3:sym32                  new byte[] { 15' 16' 21' 17 }'                    // 0xc0:list8' 0xc1:map8                  new byte[] { 18' 19 }'                    // 0xd0:list32' 0xd1:map32                  new byte[] { 18' 19 }'                    // 0xe0:array8                  new byte[] { 20 }'                    // 0xf0:array32                  new byte[] { 20 }              };
Magic Number,Amqp.Types,Encoder,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Types\Encoder.cs,Initialize,The following statement contains a magic number: codecIndexTable = new byte[][]              {                  // 0x40:null' 0x41:boolean.true' 0x42:boolean.false' 0x43:uint0' 0x44:ulong0' 0x45:list0                  new byte[] { 0' 1' 1' 4' 5' 18 }'                    // 0x50:ubyte' 0x51:byte' 0x52:small.uint' 0x53:small.ulong' 0x54:small.int' 0x55:small.long' 0x56:boolean                  new byte[] { 2' 6' 4' 5' 8' 9' 1 }'                    // 0x60:ushort' 0x61:short                  new byte[] { 3' 7 }'                    // 0x70:uint' 0x71:int' 0x72:float' 0x73:char' 0x74:decimal32                  new byte[] { 4' 8' 10' 12 }'                    // 0x80:ulong' 0x81:long' 0x82:double' 0x83:timestamp' 0x84:decimal64                  new byte[] { 5' 9' 11' 13 }'                    // 0x98:uuid                  new byte[] { 21' 21' 21' 21' 21' 21' 21' 21' 14 }'                                // 0xa0:bin8' 0xa1:str8' 0xa3:sym8                  new byte[] { 15' 16' 21' 17 }'                    // 0xb0:bin32' 0xb1:str32' 0xb3:sym32                  new byte[] { 15' 16' 21' 17 }'                    // 0xc0:list8' 0xc1:map8                  new byte[] { 18' 19 }'                    // 0xd0:list32' 0xd1:map32                  new byte[] { 18' 19 }'                    // 0xe0:array8                  new byte[] { 20 }'                    // 0xf0:array32                  new byte[] { 20 }              };
Magic Number,Amqp.Types,Encoder,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Types\Encoder.cs,Initialize,The following statement contains a magic number: codecIndexTable = new byte[][]              {                  // 0x40:null' 0x41:boolean.true' 0x42:boolean.false' 0x43:uint0' 0x44:ulong0' 0x45:list0                  new byte[] { 0' 1' 1' 4' 5' 18 }'                    // 0x50:ubyte' 0x51:byte' 0x52:small.uint' 0x53:small.ulong' 0x54:small.int' 0x55:small.long' 0x56:boolean                  new byte[] { 2' 6' 4' 5' 8' 9' 1 }'                    // 0x60:ushort' 0x61:short                  new byte[] { 3' 7 }'                    // 0x70:uint' 0x71:int' 0x72:float' 0x73:char' 0x74:decimal32                  new byte[] { 4' 8' 10' 12 }'                    // 0x80:ulong' 0x81:long' 0x82:double' 0x83:timestamp' 0x84:decimal64                  new byte[] { 5' 9' 11' 13 }'                    // 0x98:uuid                  new byte[] { 21' 21' 21' 21' 21' 21' 21' 21' 14 }'                                // 0xa0:bin8' 0xa1:str8' 0xa3:sym8                  new byte[] { 15' 16' 21' 17 }'                    // 0xb0:bin32' 0xb1:str32' 0xb3:sym32                  new byte[] { 15' 16' 21' 17 }'                    // 0xc0:list8' 0xc1:map8                  new byte[] { 18' 19 }'                    // 0xd0:list32' 0xd1:map32                  new byte[] { 18' 19 }'                    // 0xe0:array8                  new byte[] { 20 }'                    // 0xf0:array32                  new byte[] { 20 }              };
Magic Number,Amqp.Types,Encoder,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Types\Encoder.cs,Initialize,The following statement contains a magic number: codecIndexTable = new byte[][]              {                  // 0x40:null' 0x41:boolean.true' 0x42:boolean.false' 0x43:uint0' 0x44:ulong0' 0x45:list0                  new byte[] { 0' 1' 1' 4' 5' 18 }'                    // 0x50:ubyte' 0x51:byte' 0x52:small.uint' 0x53:small.ulong' 0x54:small.int' 0x55:small.long' 0x56:boolean                  new byte[] { 2' 6' 4' 5' 8' 9' 1 }'                    // 0x60:ushort' 0x61:short                  new byte[] { 3' 7 }'                    // 0x70:uint' 0x71:int' 0x72:float' 0x73:char' 0x74:decimal32                  new byte[] { 4' 8' 10' 12 }'                    // 0x80:ulong' 0x81:long' 0x82:double' 0x83:timestamp' 0x84:decimal64                  new byte[] { 5' 9' 11' 13 }'                    // 0x98:uuid                  new byte[] { 21' 21' 21' 21' 21' 21' 21' 21' 14 }'                                // 0xa0:bin8' 0xa1:str8' 0xa3:sym8                  new byte[] { 15' 16' 21' 17 }'                    // 0xb0:bin32' 0xb1:str32' 0xb3:sym32                  new byte[] { 15' 16' 21' 17 }'                    // 0xc0:list8' 0xc1:map8                  new byte[] { 18' 19 }'                    // 0xd0:list32' 0xd1:map32                  new byte[] { 18' 19 }'                    // 0xe0:array8                  new byte[] { 20 }'                    // 0xf0:array32                  new byte[] { 20 }              };
Magic Number,Amqp.Types,Encoder,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Types\Encoder.cs,Initialize,The following statement contains a magic number: codecIndexTable = new byte[][]              {                  // 0x40:null' 0x41:boolean.true' 0x42:boolean.false' 0x43:uint0' 0x44:ulong0' 0x45:list0                  new byte[] { 0' 1' 1' 4' 5' 18 }'                    // 0x50:ubyte' 0x51:byte' 0x52:small.uint' 0x53:small.ulong' 0x54:small.int' 0x55:small.long' 0x56:boolean                  new byte[] { 2' 6' 4' 5' 8' 9' 1 }'                    // 0x60:ushort' 0x61:short                  new byte[] { 3' 7 }'                    // 0x70:uint' 0x71:int' 0x72:float' 0x73:char' 0x74:decimal32                  new byte[] { 4' 8' 10' 12 }'                    // 0x80:ulong' 0x81:long' 0x82:double' 0x83:timestamp' 0x84:decimal64                  new byte[] { 5' 9' 11' 13 }'                    // 0x98:uuid                  new byte[] { 21' 21' 21' 21' 21' 21' 21' 21' 14 }'                                // 0xa0:bin8' 0xa1:str8' 0xa3:sym8                  new byte[] { 15' 16' 21' 17 }'                    // 0xb0:bin32' 0xb1:str32' 0xb3:sym32                  new byte[] { 15' 16' 21' 17 }'                    // 0xc0:list8' 0xc1:map8                  new byte[] { 18' 19 }'                    // 0xd0:list32' 0xd1:map32                  new byte[] { 18' 19 }'                    // 0xe0:array8                  new byte[] { 20 }'                    // 0xf0:array32                  new byte[] { 20 }              };
Magic Number,Amqp.Types,Encoder,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Types\Encoder.cs,Initialize,The following statement contains a magic number: codecIndexTable = new byte[][]              {                  // 0x40:null' 0x41:boolean.true' 0x42:boolean.false' 0x43:uint0' 0x44:ulong0' 0x45:list0                  new byte[] { 0' 1' 1' 4' 5' 18 }'                    // 0x50:ubyte' 0x51:byte' 0x52:small.uint' 0x53:small.ulong' 0x54:small.int' 0x55:small.long' 0x56:boolean                  new byte[] { 2' 6' 4' 5' 8' 9' 1 }'                    // 0x60:ushort' 0x61:short                  new byte[] { 3' 7 }'                    // 0x70:uint' 0x71:int' 0x72:float' 0x73:char' 0x74:decimal32                  new byte[] { 4' 8' 10' 12 }'                    // 0x80:ulong' 0x81:long' 0x82:double' 0x83:timestamp' 0x84:decimal64                  new byte[] { 5' 9' 11' 13 }'                    // 0x98:uuid                  new byte[] { 21' 21' 21' 21' 21' 21' 21' 21' 14 }'                                // 0xa0:bin8' 0xa1:str8' 0xa3:sym8                  new byte[] { 15' 16' 21' 17 }'                    // 0xb0:bin32' 0xb1:str32' 0xb3:sym32                  new byte[] { 15' 16' 21' 17 }'                    // 0xc0:list8' 0xc1:map8                  new byte[] { 18' 19 }'                    // 0xd0:list32' 0xd1:map32                  new byte[] { 18' 19 }'                    // 0xe0:array8                  new byte[] { 20 }'                    // 0xf0:array32                  new byte[] { 20 }              };
Magic Number,Amqp.Types,Encoder,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Types\Encoder.cs,Initialize,The following statement contains a magic number: codecIndexTable = new byte[][]              {                  // 0x40:null' 0x41:boolean.true' 0x42:boolean.false' 0x43:uint0' 0x44:ulong0' 0x45:list0                  new byte[] { 0' 1' 1' 4' 5' 18 }'                    // 0x50:ubyte' 0x51:byte' 0x52:small.uint' 0x53:small.ulong' 0x54:small.int' 0x55:small.long' 0x56:boolean                  new byte[] { 2' 6' 4' 5' 8' 9' 1 }'                    // 0x60:ushort' 0x61:short                  new byte[] { 3' 7 }'                    // 0x70:uint' 0x71:int' 0x72:float' 0x73:char' 0x74:decimal32                  new byte[] { 4' 8' 10' 12 }'                    // 0x80:ulong' 0x81:long' 0x82:double' 0x83:timestamp' 0x84:decimal64                  new byte[] { 5' 9' 11' 13 }'                    // 0x98:uuid                  new byte[] { 21' 21' 21' 21' 21' 21' 21' 21' 14 }'                                // 0xa0:bin8' 0xa1:str8' 0xa3:sym8                  new byte[] { 15' 16' 21' 17 }'                    // 0xb0:bin32' 0xb1:str32' 0xb3:sym32                  new byte[] { 15' 16' 21' 17 }'                    // 0xc0:list8' 0xc1:map8                  new byte[] { 18' 19 }'                    // 0xd0:list32' 0xd1:map32                  new byte[] { 18' 19 }'                    // 0xe0:array8                  new byte[] { 20 }'                    // 0xf0:array32                  new byte[] { 20 }              };
Magic Number,Amqp.Types,Encoder,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Types\Encoder.cs,Initialize,The following statement contains a magic number: codecIndexTable = new byte[][]              {                  // 0x40:null' 0x41:boolean.true' 0x42:boolean.false' 0x43:uint0' 0x44:ulong0' 0x45:list0                  new byte[] { 0' 1' 1' 4' 5' 18 }'                    // 0x50:ubyte' 0x51:byte' 0x52:small.uint' 0x53:small.ulong' 0x54:small.int' 0x55:small.long' 0x56:boolean                  new byte[] { 2' 6' 4' 5' 8' 9' 1 }'                    // 0x60:ushort' 0x61:short                  new byte[] { 3' 7 }'                    // 0x70:uint' 0x71:int' 0x72:float' 0x73:char' 0x74:decimal32                  new byte[] { 4' 8' 10' 12 }'                    // 0x80:ulong' 0x81:long' 0x82:double' 0x83:timestamp' 0x84:decimal64                  new byte[] { 5' 9' 11' 13 }'                    // 0x98:uuid                  new byte[] { 21' 21' 21' 21' 21' 21' 21' 21' 14 }'                                // 0xa0:bin8' 0xa1:str8' 0xa3:sym8                  new byte[] { 15' 16' 21' 17 }'                    // 0xb0:bin32' 0xb1:str32' 0xb3:sym32                  new byte[] { 15' 16' 21' 17 }'                    // 0xc0:list8' 0xc1:map8                  new byte[] { 18' 19 }'                    // 0xd0:list32' 0xd1:map32                  new byte[] { 18' 19 }'                    // 0xe0:array8                  new byte[] { 20 }'                    // 0xf0:array32                  new byte[] { 20 }              };
Magic Number,Amqp.Types,Encoder,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Types\Encoder.cs,Initialize,The following statement contains a magic number: codecIndexTable = new byte[][]              {                  // 0x40:null' 0x41:boolean.true' 0x42:boolean.false' 0x43:uint0' 0x44:ulong0' 0x45:list0                  new byte[] { 0' 1' 1' 4' 5' 18 }'                    // 0x50:ubyte' 0x51:byte' 0x52:small.uint' 0x53:small.ulong' 0x54:small.int' 0x55:small.long' 0x56:boolean                  new byte[] { 2' 6' 4' 5' 8' 9' 1 }'                    // 0x60:ushort' 0x61:short                  new byte[] { 3' 7 }'                    // 0x70:uint' 0x71:int' 0x72:float' 0x73:char' 0x74:decimal32                  new byte[] { 4' 8' 10' 12 }'                    // 0x80:ulong' 0x81:long' 0x82:double' 0x83:timestamp' 0x84:decimal64                  new byte[] { 5' 9' 11' 13 }'                    // 0x98:uuid                  new byte[] { 21' 21' 21' 21' 21' 21' 21' 21' 14 }'                                // 0xa0:bin8' 0xa1:str8' 0xa3:sym8                  new byte[] { 15' 16' 21' 17 }'                    // 0xb0:bin32' 0xb1:str32' 0xb3:sym32                  new byte[] { 15' 16' 21' 17 }'                    // 0xc0:list8' 0xc1:map8                  new byte[] { 18' 19 }'                    // 0xd0:list32' 0xd1:map32                  new byte[] { 18' 19 }'                    // 0xe0:array8                  new byte[] { 20 }'                    // 0xf0:array32                  new byte[] { 20 }              };
Magic Number,Amqp.Types,Encoder,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Types\Encoder.cs,Initialize,The following statement contains a magic number: codecIndexTable = new byte[][]              {                  // 0x40:null' 0x41:boolean.true' 0x42:boolean.false' 0x43:uint0' 0x44:ulong0' 0x45:list0                  new byte[] { 0' 1' 1' 4' 5' 18 }'                    // 0x50:ubyte' 0x51:byte' 0x52:small.uint' 0x53:small.ulong' 0x54:small.int' 0x55:small.long' 0x56:boolean                  new byte[] { 2' 6' 4' 5' 8' 9' 1 }'                    // 0x60:ushort' 0x61:short                  new byte[] { 3' 7 }'                    // 0x70:uint' 0x71:int' 0x72:float' 0x73:char' 0x74:decimal32                  new byte[] { 4' 8' 10' 12 }'                    // 0x80:ulong' 0x81:long' 0x82:double' 0x83:timestamp' 0x84:decimal64                  new byte[] { 5' 9' 11' 13 }'                    // 0x98:uuid                  new byte[] { 21' 21' 21' 21' 21' 21' 21' 21' 14 }'                                // 0xa0:bin8' 0xa1:str8' 0xa3:sym8                  new byte[] { 15' 16' 21' 17 }'                    // 0xb0:bin32' 0xb1:str32' 0xb3:sym32                  new byte[] { 15' 16' 21' 17 }'                    // 0xc0:list8' 0xc1:map8                  new byte[] { 18' 19 }'                    // 0xd0:list32' 0xd1:map32                  new byte[] { 18' 19 }'                    // 0xe0:array8                  new byte[] { 20 }'                    // 0xf0:array32                  new byte[] { 20 }              };
Magic Number,Amqp.Types,Encoder,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Types\Encoder.cs,Initialize,The following statement contains a magic number: codecIndexTable = new byte[][]              {                  // 0x40:null' 0x41:boolean.true' 0x42:boolean.false' 0x43:uint0' 0x44:ulong0' 0x45:list0                  new byte[] { 0' 1' 1' 4' 5' 18 }'                    // 0x50:ubyte' 0x51:byte' 0x52:small.uint' 0x53:small.ulong' 0x54:small.int' 0x55:small.long' 0x56:boolean                  new byte[] { 2' 6' 4' 5' 8' 9' 1 }'                    // 0x60:ushort' 0x61:short                  new byte[] { 3' 7 }'                    // 0x70:uint' 0x71:int' 0x72:float' 0x73:char' 0x74:decimal32                  new byte[] { 4' 8' 10' 12 }'                    // 0x80:ulong' 0x81:long' 0x82:double' 0x83:timestamp' 0x84:decimal64                  new byte[] { 5' 9' 11' 13 }'                    // 0x98:uuid                  new byte[] { 21' 21' 21' 21' 21' 21' 21' 21' 14 }'                                // 0xa0:bin8' 0xa1:str8' 0xa3:sym8                  new byte[] { 15' 16' 21' 17 }'                    // 0xb0:bin32' 0xb1:str32' 0xb3:sym32                  new byte[] { 15' 16' 21' 17 }'                    // 0xc0:list8' 0xc1:map8                  new byte[] { 18' 19 }'                    // 0xd0:list32' 0xd1:map32                  new byte[] { 18' 19 }'                    // 0xe0:array8                  new byte[] { 20 }'                    // 0xf0:array32                  new byte[] { 20 }              };
Magic Number,Amqp.Types,Encoder,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Types\Encoder.cs,Initialize,The following statement contains a magic number: codecIndexTable = new byte[][]              {                  // 0x40:null' 0x41:boolean.true' 0x42:boolean.false' 0x43:uint0' 0x44:ulong0' 0x45:list0                  new byte[] { 0' 1' 1' 4' 5' 18 }'                    // 0x50:ubyte' 0x51:byte' 0x52:small.uint' 0x53:small.ulong' 0x54:small.int' 0x55:small.long' 0x56:boolean                  new byte[] { 2' 6' 4' 5' 8' 9' 1 }'                    // 0x60:ushort' 0x61:short                  new byte[] { 3' 7 }'                    // 0x70:uint' 0x71:int' 0x72:float' 0x73:char' 0x74:decimal32                  new byte[] { 4' 8' 10' 12 }'                    // 0x80:ulong' 0x81:long' 0x82:double' 0x83:timestamp' 0x84:decimal64                  new byte[] { 5' 9' 11' 13 }'                    // 0x98:uuid                  new byte[] { 21' 21' 21' 21' 21' 21' 21' 21' 14 }'                                // 0xa0:bin8' 0xa1:str8' 0xa3:sym8                  new byte[] { 15' 16' 21' 17 }'                    // 0xb0:bin32' 0xb1:str32' 0xb3:sym32                  new byte[] { 15' 16' 21' 17 }'                    // 0xc0:list8' 0xc1:map8                  new byte[] { 18' 19 }'                    // 0xd0:list32' 0xd1:map32                  new byte[] { 18' 19 }'                    // 0xe0:array8                  new byte[] { 20 }'                    // 0xf0:array32                  new byte[] { 20 }              };
Magic Number,Amqp.Types,Encoder,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Types\Encoder.cs,Initialize,The following statement contains a magic number: codecIndexTable = new byte[][]              {                  // 0x40:null' 0x41:boolean.true' 0x42:boolean.false' 0x43:uint0' 0x44:ulong0' 0x45:list0                  new byte[] { 0' 1' 1' 4' 5' 18 }'                    // 0x50:ubyte' 0x51:byte' 0x52:small.uint' 0x53:small.ulong' 0x54:small.int' 0x55:small.long' 0x56:boolean                  new byte[] { 2' 6' 4' 5' 8' 9' 1 }'                    // 0x60:ushort' 0x61:short                  new byte[] { 3' 7 }'                    // 0x70:uint' 0x71:int' 0x72:float' 0x73:char' 0x74:decimal32                  new byte[] { 4' 8' 10' 12 }'                    // 0x80:ulong' 0x81:long' 0x82:double' 0x83:timestamp' 0x84:decimal64                  new byte[] { 5' 9' 11' 13 }'                    // 0x98:uuid                  new byte[] { 21' 21' 21' 21' 21' 21' 21' 21' 14 }'                                // 0xa0:bin8' 0xa1:str8' 0xa3:sym8                  new byte[] { 15' 16' 21' 17 }'                    // 0xb0:bin32' 0xb1:str32' 0xb3:sym32                  new byte[] { 15' 16' 21' 17 }'                    // 0xc0:list8' 0xc1:map8                  new byte[] { 18' 19 }'                    // 0xd0:list32' 0xd1:map32                  new byte[] { 18' 19 }'                    // 0xe0:array8                  new byte[] { 20 }'                    // 0xf0:array32                  new byte[] { 20 }              };
Magic Number,Amqp.Types,Encoder,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Types\Encoder.cs,Initialize,The following statement contains a magic number: codecIndexTable = new byte[][]              {                  // 0x40:null' 0x41:boolean.true' 0x42:boolean.false' 0x43:uint0' 0x44:ulong0' 0x45:list0                  new byte[] { 0' 1' 1' 4' 5' 18 }'                    // 0x50:ubyte' 0x51:byte' 0x52:small.uint' 0x53:small.ulong' 0x54:small.int' 0x55:small.long' 0x56:boolean                  new byte[] { 2' 6' 4' 5' 8' 9' 1 }'                    // 0x60:ushort' 0x61:short                  new byte[] { 3' 7 }'                    // 0x70:uint' 0x71:int' 0x72:float' 0x73:char' 0x74:decimal32                  new byte[] { 4' 8' 10' 12 }'                    // 0x80:ulong' 0x81:long' 0x82:double' 0x83:timestamp' 0x84:decimal64                  new byte[] { 5' 9' 11' 13 }'                    // 0x98:uuid                  new byte[] { 21' 21' 21' 21' 21' 21' 21' 21' 14 }'                                // 0xa0:bin8' 0xa1:str8' 0xa3:sym8                  new byte[] { 15' 16' 21' 17 }'                    // 0xb0:bin32' 0xb1:str32' 0xb3:sym32                  new byte[] { 15' 16' 21' 17 }'                    // 0xc0:list8' 0xc1:map8                  new byte[] { 18' 19 }'                    // 0xd0:list32' 0xd1:map32                  new byte[] { 18' 19 }'                    // 0xe0:array8                  new byte[] { 20 }'                    // 0xf0:array32                  new byte[] { 20 }              };
Magic Number,Amqp.Types,Encoder,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Types\Encoder.cs,TryGetCodec,The following statement contains a magic number: codec = serializers[20];
Magic Number,Amqp.Types,Encoder,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Types\Encoder.cs,ReadMap,The following statement contains a magic number: count % 2 > 0
Magic Number,Amqp.Types,Encoder,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Types\Encoder.cs,GetSerializer,The following statement contains a magic number: int type = ((formatCode & 0xF0) >> 4) - 4;
Magic Number,Amqp.Types,Encoder,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Types\Encoder.cs,GetSerializer,The following statement contains a magic number: int type = ((formatCode & 0xF0) >> 4) - 4;
Magic Number,Amqp.Sasl,SaslPlainProfile,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Sasl\SaslPlainProfile.cs,GetStartCommand,The following statement contains a magic number: byte[] message = new byte[2 + b1.Length + b2.Length];
Magic Number,Amqp.Sasl,SaslPlainProfile,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Sasl\SaslPlainProfile.cs,GetStartCommand,The following statement contains a magic number: Array.Copy(b2' 0' message' b1.Length + 2' b2.Length);
Magic Number,Amqp.Sasl,SaslProfile,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Sasl\SaslProfile.cs,Open,The following statement contains a magic number: ByteBuffer buffer = Reader.ReadFrameBuffer(transport' new byte[4]' uint.MaxValue);
Magic Number,Amqp.Sasl,SaslProfile,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Sasl\SaslProfile.cs,Start,The following statement contains a magic number: ProtocolHeader myHeader = new ProtocolHeader() { Id = 3' Major = 1' Minor = 0' Revision = 0 };
Magic Number,Amqp.Sasl,SaslProfile,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Sasl\SaslProfile.cs,Start,The following statement contains a magic number: ByteBuffer headerBuffer = new ByteBuffer(                  new byte[] { (byte)'A'' (byte)'M'' (byte)'Q'' (byte)'P'' myHeader.Id' myHeader.Major' myHeader.Minor' myHeader.Revision }'                  0'                  8'                  8);
Magic Number,Amqp.Sasl,SaslProfile,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Sasl\SaslProfile.cs,Start,The following statement contains a magic number: ByteBuffer headerBuffer = new ByteBuffer(                  new byte[] { (byte)'A'' (byte)'M'' (byte)'Q'' (byte)'P'' myHeader.Id' myHeader.Major' myHeader.Minor' myHeader.Revision }'                  0'                  8'                  8);
Magic Number,Amqp.Transactions,Controller,D:\research\architectureSmells\repos\xamarin_mini-hacks\azure-iot-smart-coffee\mobile\Amqp.Lite\Transactions\Controller.cs,GetName,The following statement contains a magic number: return "controller-link-" + Guid.NewGuid().ToString("N").Substring(0' 5);
