Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Combot.Modules.Plugins,Channel_Rules,D:\newReposJune17\uncled1023_Combot\Modules\Channel Rules\Channel_Rules.cs,ParseCommand,Cyclomatic complexity of the method is 17
Long Statement,Combot.Modules.Plugins,Channel_Rules,D:\newReposJune17\uncled1023_Combot\Modules\Channel Rules\Channel_Rules.cs,ParseCommand,The length of the statement  "				SendResponse (command.MessageType' command.Location' command.Nick.Nickname' string.Format ("Rule \u0002#{0}\u0002: {1}"' index' rule ["rule"])' true); " is 150.
Long Statement,Combot.Modules.Plugins,Channel_Rules,D:\newReposJune17\uncled1023_Combot\Modules\Channel Rules\Channel_Rules.cs,ParseCommand,The length of the statement  "			SendResponse (command.MessageType' command.Location' command.Nick.Nickname' string.Format ("There are no rules for \u0002{0}\u0002"' channel)' true); " is 149.
Long Statement,Combot.Modules.Plugins,Channel_Rules,D:\newReposJune17\uncled1023_Combot\Modules\Channel Rules\Channel_Rules.cs,ParseCommand,The length of the statement  "			string noAccessMessage = string.Format ("You do not have access to \u0002{0}\u000F on \u0002{1}\u000F."' command.Command' channel); " is 131.
Long Statement,Combot.Modules.Plugins,Channel_Rules,D:\newReposJune17\uncled1023_Combot\Modules\Channel Rules\Channel_Rules.cs,AddRule,The length of the statement  "	string query = "INSERT INTO `channelrules` SET " + "`server_id` = (SELECT `id` FROM `servers` WHERE `name` = {0})' " + "`channel_id` = (SELECT `channels`.`id` FROM `channels` INNER JOIN `servers` ON `servers`.`id` = `channels`.`server_id` WHERE `servers`.`name` = {1} && `channels`.`name` = {2})' " + "`rule` = {3}' " + "`date_added` = {4}"; " is 341.
Long Statement,Combot.Modules.Plugins,Channel_Rules,D:\newReposJune17\uncled1023_Combot\Modules\Channel Rules\Channel_Rules.cs,AddRule,The length of the statement  "	string ruleMessage = string.Format ("Rule Added. \u0002{0}\u0002 now has \u0002{1}\u0002 rules."' channel' results.Count + 1); " is 126.
Long Statement,Combot.Modules.Plugins,Channel_Rules,D:\newReposJune17\uncled1023_Combot\Modules\Channel Rules\Channel_Rules.cs,EditRule,The length of the statement  "			string ruleMessage = string.Format ("Rule \u0002#{0}\u0002 for \u0002{1}\u0002 is now: {2}"' num' channel' command.Arguments ["Rule"]); " is 135.
Long Statement,Combot.Modules.Plugins,Channel_Rules,D:\newReposJune17\uncled1023_Combot\Modules\Channel Rules\Channel_Rules.cs,GetRuleList,The length of the statement  "	string search = "SELECT `channelrules`.`id`' `channelrules`.`rule` FROM `channelrules` " + "INNER JOIN `channels` " + "ON `channelrules`.`channel_id` = `channels`.`id` " + "INNER JOIN `servers` " + "ON `channelrules`.`server_id` = `servers`.`id` " + "WHERE `servers`.`name` = {0} AND `channels`.`name` = {1} " + "ORDER BY date_added ASC"; " is 338.
Missing Default,Combot.Modules.Plugins,Channel_Rules,D:\newReposJune17\uncled1023_Combot\Modules\Channel Rules\Channel_Rules.cs,ParseCommand,The following switch statement is missing a default case: switch (foundCommand.Name) {  case "Rules Display":  	List<Dictionary<string' object>> foundRules = GetRuleList (channel);  	if (foundRules.Any ()) {  		int index = 1;  		foundRules.ForEach (rule => {  			SendResponse (command.MessageType' command.Location' command.Nick.Nickname' string.Format ("Rule \u0002#{0}\u0002: {1}"' index' rule ["rule"])' true);  			index++;  		});  	} else {  		SendResponse (command.MessageType' command.Location' command.Nick.Nickname' string.Format ("There are no rules for \u0002{0}\u0002"' channel)' true);  	}  	break;  case "Rules Modification":  	if (Bot.CheckChannelAccess (channel' command.Nick.Nickname' command.Access)) {  		string action = command.Arguments ["Action"].ToString ();  		switch (action.ToLower ()) {  		case "add":  			AddRule (command);  			break;  		case "edit":  			EditRule (command);  			break;  		case "del":  			DeleteRule (command);  			break;  		}  	} else {  		string noAccessMessage = string.Format ("You do not have access to \u0002{0}\u000F on \u0002{1}\u000F."' command.Command' channel);  		SendResponse (command.MessageType' command.Location' command.Nick.Nickname' noAccessMessage' true);  	}  	break;  }  
Missing Default,Combot.Modules.Plugins,Channel_Rules,D:\newReposJune17\uncled1023_Combot\Modules\Channel Rules\Channel_Rules.cs,ParseCommand,The following switch statement is missing a default case: switch (action.ToLower ()) {  case "add":  	AddRule (command);  	break;  case "edit":  	EditRule (command);  	break;  case "del":  	DeleteRule (command);  	break;  }  
