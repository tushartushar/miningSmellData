Implementation smell,Namespace,Class,File,Method,Description
Long Method,Combot.Modules.Plugins,Sed,C:\repos\uncled1023_Combot\Modules\Sed\Sed.cs,HandleChannelMessageEvent,The method has 124 lines of code.
Complex Method,Combot.Modules.Plugins,Sed,C:\repos\uncled1023_Combot\Modules\Sed\Sed.cs,HandleChannelMessageEvent,Cyclomatic complexity of the method is 10
Long Statement,Combot.Modules.Plugins,Sed,C:\repos\uncled1023_Combot\Modules\Sed\Sed.cs,HandleChannelMessageEvent,The length of the statement  "                Regex sedRegex = new Regex(@"^s\/(?<Match>[^\/\\]*(?:\\.[^\/\\]*)*)\/(?<Replace>[^\/\\]*(?:\\.[^\/\\]*)*)\/(?<Option>[g|I|0-9]*)?"); " is 132.
Complex Conditional,Combot.Modules.Plugins,Sed,C:\repos\uncled1023_Combot\Modules\Sed\Sed.cs,HandleChannelMessageEvent,The conditional expression  "Enabled                  && !Bot.ServerConfig.ChannelBlacklist.Contains(message.Channel)                  && !Bot.ServerConfig.NickBlacklist.Contains(message.Sender.Nickname)                  && !ChannelBlacklist.Contains(message.Channel)                  && !NickBlacklist.Contains(message.Sender.Nickname)"  is complex.
Magic Number,Combot.Modules.Plugins,Sed,C:\repos\uncled1023_Combot\Modules\Sed\Sed.cs,HandleChannelMessageEvent,The following statement contains a magic number: if (Enabled                  && !Bot.ServerConfig.ChannelBlacklist.Contains(message.Channel)                  && !Bot.ServerConfig.NickBlacklist.Contains(message.Sender.Nickname)                  && !ChannelBlacklist.Contains(message.Channel)                  && !NickBlacklist.Contains(message.Sender.Nickname))              {                  bool nickEnabled = false;                  Boolean.TryParse(GetOptionValue("Nickname Enabled").ToString()' out nickEnabled);                  bool channelEnabled = false;                  Boolean.TryParse(GetOptionValue("Channel Enabled").ToString()' out channelEnabled);                  int maxMessages = 10;                  Int32.TryParse(GetOptionValue("Max Messages").ToString()' out maxMessages);                    string key = string.Empty;                  if (nickEnabled && channelEnabled)                  {                      key = string.Format("{0} {1}"' message.Channel' message.Sender.Nickname);                  }                  else if (nickEnabled)                  {                      key = message.Sender.Nickname;                  }                  else if (channelEnabled)                  {                      key = message.Channel;                  }                  else                  {                      key = string.Empty;                  }                    Regex sedRegex = new Regex(@"^s\/(?<Match>[^\/\\]*(?:\\.[^\/\\]*)*)\/(?<Replace>[^\/\\]*(?:\\.[^\/\\]*)*)\/(?<Option>[g|I|0-9]*)?");                  if (sedRegex.IsMatch(message.Message))                  {                      Match sedMatch = sedRegex.Match(message.Message);                      string match = sedMatch.Groups["Match"].ToString().Replace(@"\/"' @"/");                      string replace = sedMatch.Groups["Replace"].ToString().Replace(@"\/"' @"/");                      string option = sedMatch.Groups["Option"].ToString();                      RegexOptions matchOptions;                      int optionVal;                      int replaceNum;                      if (int.TryParse(option' out optionVal))                      {                          matchOptions = RegexOptions.None;                          replaceNum = optionVal;                      }                      else if (option == "g")                      {                          matchOptions = RegexOptions.None;                          replaceNum = -1;                      }                      else if (option == "I" || option == "i")                      {                          matchOptions = RegexOptions.IgnoreCase;                          replaceNum = 1;                      }                      else                      {                          matchOptions = RegexOptions.None;                          replaceNum = 1;                      }                      bool foundResult = false;                      MessageLock.EnterWriteLock();                      if (LastMessages.ContainsKey(key))                      {                          List<string> msgList = new List<string>();                          msgList.AddRange(LastMessages[key]);                          msgList.Reverse();                          foreach (string msg in msgList)                          {                              try                              {                                  Regex messageRegex = new Regex(match' matchOptions);                                  if (messageRegex.IsMatch(msg))                                  {                                      string newMessage = string.Empty;                                      if (replaceNum < 0)                                      {                                          newMessage = messageRegex.Replace(msg' replace);                                      }                                      else                                      {                                          newMessage = messageRegex.Replace(msg' replace' replaceNum);                                      }                                      string replacedMessage = string.Format("\u0002{0}\u0002 meant to say: {1}"' message.Sender.Nickname' newMessage);                                      SendResponse(MessageType.Channel' message.Channel' message.Sender.Nickname' replacedMessage);                                      foundResult = true;                                      break;                                  }                              }                              catch (Exception ex)                              {                                  ThrowError(ex);                              }                          }                      }                      MessageLock.ExitWriteLock();                      if (!foundResult)                      {                          string noMatch = string.Format("You do not have any previous messages that match \u0002{0}\u0002."' match);                          SendResponse(MessageType.Channel' message.Channel' message.Sender.Nickname' noMatch' true);                      }                  }                  else                  {                      // Add or replace the message for the user/channel                      MessageLock.EnterWriteLock();                      if (LastMessages.ContainsKey(key))                      {                          List<string> messages = LastMessages[key];                          if (messages.Count >= maxMessages)                          {                              messages.RemoveAt(0);                          }                          messages.Add(message.Message);                          LastMessages[key] = messages;                      }                      else                      {                          LastMessages.Add(key' new List<string> { message.Message });                      }                      MessageLock.ExitWriteLock();                  }              }
