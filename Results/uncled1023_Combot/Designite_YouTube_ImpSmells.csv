Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Combot.Modules.Plugins,YouTube,C:\repos\uncled1023_Combot\Modules\YouTube\YouTube.cs,GetYoutubeDescription,Cyclomatic complexity of the method is 8
Long Statement,Combot.Modules.Plugins,YouTube,C:\repos\uncled1023_Combot\Modules\YouTube\YouTube.cs,YoutubeSearch,The length of the statement  "                    string errorCode = string.Format("Unable to search for \u0002{0}\u000F.  Youtube returned status code \u0002{1}\u000F."' command.Arguments["Query"]' code); " is 155.
Long Statement,Combot.Modules.Plugins,YouTube,C:\repos\uncled1023_Combot\Modules\YouTube\YouTube.cs,GetYoutubeDescription,The length of the statement  "            string urlTemplate = "https://www.googleapis.com/youtube/v3/videos?part=snippet'statistics'contentDetails&id={0}&key={1}"; " is 122.
Long Statement,Combot.Modules.Plugins,YouTube,C:\repos\uncled1023_Combot\Modules\YouTube\YouTube.cs,GetYoutubeDescription,The length of the statement  "                Regex lengthRegex = new Regex(@"PT((?<Days>[0-9]+)D)?((?<Hours>[0-9]+)H)?((?<Minutes>[0-9]+)M)?((?<Seconds>[0-9]+)S)?"); " is 120.
Long Statement,Combot.Modules.Plugins,YouTube,C:\repos\uncled1023_Combot\Modules\YouTube\YouTube.cs,GetYoutubeDescription,The length of the statement  "                    description += string.Format(" | Rating: {0} Like{1}' {2} Dislike{3} (\u0002{4}\u000F%)"' likes' pluralLikes' dislikes' pluralDislikes' Math.Round(percent' 1)); " is 160.
Long Statement,Combot.Modules.Plugins,YouTube,C:\repos\uncled1023_Combot\Modules\YouTube\YouTube.cs,GetYoutubeDescription,The length of the statement  "                description += string.Format(" | Uploaded By: \u0002{0}\u000F on \u0002{1}\u000F"' data["snippet"]["channelTitle"].Value<string>()' uploadDate.ToString("R")); " is 158.
Magic Number,Combot.Modules.Plugins,YouTube,C:\repos\uncled1023_Combot\Modules\YouTube\YouTube.cs,GetYoutubeDescription,The following statement contains a magic number: try              {                  string page = web.DownloadString(searchUrl);                    JObject parsed = (JObject)JsonConvert.DeserializeObject(page);                  var data = parsed["items"].First();                    description = string.Format("\u0002{0}\u000F"' data["snippet"]["title"]);                    if (data["contentDetails"]["duration"] == null)                  {                      return description;                  }                    string length = data["contentDetails"]["duration"].Value<string>();                    Regex lengthRegex = new Regex(@"PT((?<Days>[0-9]+)D)?((?<Hours>[0-9]+)H)?((?<Minutes>[0-9]+)M)?((?<Seconds>[0-9]+)S)?");                  Match lengthMatch = lengthRegex.Match(length);                  double totalTime = 0;                    if (lengthMatch.Groups["Days"].Success)                      totalTime += 86400.0 * Convert.ToDouble(lengthMatch.Groups["Days"].Value);                    if (lengthMatch.Groups["Hours"].Success)                      totalTime += 3600.0 * Convert.ToDouble(lengthMatch.Groups["Hours"].Value);                    if (lengthMatch.Groups["Minutes"].Success)                      totalTime += 60.0 * Convert.ToDouble(lengthMatch.Groups["Minutes"].Value);                    if (lengthMatch.Groups["Seconds"].Success)                      totalTime += Convert.ToDouble(lengthMatch.Groups["Seconds"].Value);                    TimeSpan duration = TimeSpan.FromSeconds(totalTime);                  description += string.Format(" | Length: \u0002{0}\u000F"' duration.ToString("g"));                    if (data["statistics"] != null)                  {                      JToken stats = data["statistics"];                      int likes = (stats["likeCount"] != null) ? stats["likeCount"].Value<int>() : 0;                      string pluralLikes = (likes > 1) ? "s" : string.Empty;                      int dislikes = (stats["dislikeCount"] != null) ? stats["dislikeCount"].Value<int>() : 0;                      string pluralDislikes = (dislikes > 1) ? "s" : string.Empty;                      double percent = 100.0 * ((double)likes / (likes + dislikes));                      description += string.Format(" | Rating: {0} Like{1}' {2} Dislike{3} (\u0002{4}\u000F%)"' likes' pluralLikes' dislikes' pluralDislikes' Math.Round(percent' 1));                        description += string.Format(" | Views: \u0002{0}\u000F"' data["statistics"]["viewCount"].Value<int>());                  }                    DateTime uploadDate = Convert.ToDateTime(data["snippet"]["publishedAt"].Value<string>());                    description += string.Format(" | Uploaded By: \u0002{0}\u000F on \u0002{1}\u000F"' data["snippet"]["channelTitle"].Value<string>()' uploadDate.ToString("R"));                    if (data["contentDetails"]["contentRating"] != null)                  {                      description += " | \u0002NSFW\u000F";                  }              }              catch (WebException ex)              {                  description = string.Empty;              }
Magic Number,Combot.Modules.Plugins,YouTube,C:\repos\uncled1023_Combot\Modules\YouTube\YouTube.cs,GetYoutubeDescription,The following statement contains a magic number: try              {                  string page = web.DownloadString(searchUrl);                    JObject parsed = (JObject)JsonConvert.DeserializeObject(page);                  var data = parsed["items"].First();                    description = string.Format("\u0002{0}\u000F"' data["snippet"]["title"]);                    if (data["contentDetails"]["duration"] == null)                  {                      return description;                  }                    string length = data["contentDetails"]["duration"].Value<string>();                    Regex lengthRegex = new Regex(@"PT((?<Days>[0-9]+)D)?((?<Hours>[0-9]+)H)?((?<Minutes>[0-9]+)M)?((?<Seconds>[0-9]+)S)?");                  Match lengthMatch = lengthRegex.Match(length);                  double totalTime = 0;                    if (lengthMatch.Groups["Days"].Success)                      totalTime += 86400.0 * Convert.ToDouble(lengthMatch.Groups["Days"].Value);                    if (lengthMatch.Groups["Hours"].Success)                      totalTime += 3600.0 * Convert.ToDouble(lengthMatch.Groups["Hours"].Value);                    if (lengthMatch.Groups["Minutes"].Success)                      totalTime += 60.0 * Convert.ToDouble(lengthMatch.Groups["Minutes"].Value);                    if (lengthMatch.Groups["Seconds"].Success)                      totalTime += Convert.ToDouble(lengthMatch.Groups["Seconds"].Value);                    TimeSpan duration = TimeSpan.FromSeconds(totalTime);                  description += string.Format(" | Length: \u0002{0}\u000F"' duration.ToString("g"));                    if (data["statistics"] != null)                  {                      JToken stats = data["statistics"];                      int likes = (stats["likeCount"] != null) ? stats["likeCount"].Value<int>() : 0;                      string pluralLikes = (likes > 1) ? "s" : string.Empty;                      int dislikes = (stats["dislikeCount"] != null) ? stats["dislikeCount"].Value<int>() : 0;                      string pluralDislikes = (dislikes > 1) ? "s" : string.Empty;                      double percent = 100.0 * ((double)likes / (likes + dislikes));                      description += string.Format(" | Rating: {0} Like{1}' {2} Dislike{3} (\u0002{4}\u000F%)"' likes' pluralLikes' dislikes' pluralDislikes' Math.Round(percent' 1));                        description += string.Format(" | Views: \u0002{0}\u000F"' data["statistics"]["viewCount"].Value<int>());                  }                    DateTime uploadDate = Convert.ToDateTime(data["snippet"]["publishedAt"].Value<string>());                    description += string.Format(" | Uploaded By: \u0002{0}\u000F on \u0002{1}\u000F"' data["snippet"]["channelTitle"].Value<string>()' uploadDate.ToString("R"));                    if (data["contentDetails"]["contentRating"] != null)                  {                      description += " | \u0002NSFW\u000F";                  }              }              catch (WebException ex)              {                  description = string.Empty;              }
Magic Number,Combot.Modules.Plugins,YouTube,C:\repos\uncled1023_Combot\Modules\YouTube\YouTube.cs,GetYoutubeDescription,The following statement contains a magic number: try              {                  string page = web.DownloadString(searchUrl);                    JObject parsed = (JObject)JsonConvert.DeserializeObject(page);                  var data = parsed["items"].First();                    description = string.Format("\u0002{0}\u000F"' data["snippet"]["title"]);                    if (data["contentDetails"]["duration"] == null)                  {                      return description;                  }                    string length = data["contentDetails"]["duration"].Value<string>();                    Regex lengthRegex = new Regex(@"PT((?<Days>[0-9]+)D)?((?<Hours>[0-9]+)H)?((?<Minutes>[0-9]+)M)?((?<Seconds>[0-9]+)S)?");                  Match lengthMatch = lengthRegex.Match(length);                  double totalTime = 0;                    if (lengthMatch.Groups["Days"].Success)                      totalTime += 86400.0 * Convert.ToDouble(lengthMatch.Groups["Days"].Value);                    if (lengthMatch.Groups["Hours"].Success)                      totalTime += 3600.0 * Convert.ToDouble(lengthMatch.Groups["Hours"].Value);                    if (lengthMatch.Groups["Minutes"].Success)                      totalTime += 60.0 * Convert.ToDouble(lengthMatch.Groups["Minutes"].Value);                    if (lengthMatch.Groups["Seconds"].Success)                      totalTime += Convert.ToDouble(lengthMatch.Groups["Seconds"].Value);                    TimeSpan duration = TimeSpan.FromSeconds(totalTime);                  description += string.Format(" | Length: \u0002{0}\u000F"' duration.ToString("g"));                    if (data["statistics"] != null)                  {                      JToken stats = data["statistics"];                      int likes = (stats["likeCount"] != null) ? stats["likeCount"].Value<int>() : 0;                      string pluralLikes = (likes > 1) ? "s" : string.Empty;                      int dislikes = (stats["dislikeCount"] != null) ? stats["dislikeCount"].Value<int>() : 0;                      string pluralDislikes = (dislikes > 1) ? "s" : string.Empty;                      double percent = 100.0 * ((double)likes / (likes + dislikes));                      description += string.Format(" | Rating: {0} Like{1}' {2} Dislike{3} (\u0002{4}\u000F%)"' likes' pluralLikes' dislikes' pluralDislikes' Math.Round(percent' 1));                        description += string.Format(" | Views: \u0002{0}\u000F"' data["statistics"]["viewCount"].Value<int>());                  }                    DateTime uploadDate = Convert.ToDateTime(data["snippet"]["publishedAt"].Value<string>());                    description += string.Format(" | Uploaded By: \u0002{0}\u000F on \u0002{1}\u000F"' data["snippet"]["channelTitle"].Value<string>()' uploadDate.ToString("R"));                    if (data["contentDetails"]["contentRating"] != null)                  {                      description += " | \u0002NSFW\u000F";                  }              }              catch (WebException ex)              {                  description = string.Empty;              }
Magic Number,Combot.Modules.Plugins,YouTube,C:\repos\uncled1023_Combot\Modules\YouTube\YouTube.cs,GetYoutubeDescription,The following statement contains a magic number: try              {                  string page = web.DownloadString(searchUrl);                    JObject parsed = (JObject)JsonConvert.DeserializeObject(page);                  var data = parsed["items"].First();                    description = string.Format("\u0002{0}\u000F"' data["snippet"]["title"]);                    if (data["contentDetails"]["duration"] == null)                  {                      return description;                  }                    string length = data["contentDetails"]["duration"].Value<string>();                    Regex lengthRegex = new Regex(@"PT((?<Days>[0-9]+)D)?((?<Hours>[0-9]+)H)?((?<Minutes>[0-9]+)M)?((?<Seconds>[0-9]+)S)?");                  Match lengthMatch = lengthRegex.Match(length);                  double totalTime = 0;                    if (lengthMatch.Groups["Days"].Success)                      totalTime += 86400.0 * Convert.ToDouble(lengthMatch.Groups["Days"].Value);                    if (lengthMatch.Groups["Hours"].Success)                      totalTime += 3600.0 * Convert.ToDouble(lengthMatch.Groups["Hours"].Value);                    if (lengthMatch.Groups["Minutes"].Success)                      totalTime += 60.0 * Convert.ToDouble(lengthMatch.Groups["Minutes"].Value);                    if (lengthMatch.Groups["Seconds"].Success)                      totalTime += Convert.ToDouble(lengthMatch.Groups["Seconds"].Value);                    TimeSpan duration = TimeSpan.FromSeconds(totalTime);                  description += string.Format(" | Length: \u0002{0}\u000F"' duration.ToString("g"));                    if (data["statistics"] != null)                  {                      JToken stats = data["statistics"];                      int likes = (stats["likeCount"] != null) ? stats["likeCount"].Value<int>() : 0;                      string pluralLikes = (likes > 1) ? "s" : string.Empty;                      int dislikes = (stats["dislikeCount"] != null) ? stats["dislikeCount"].Value<int>() : 0;                      string pluralDislikes = (dislikes > 1) ? "s" : string.Empty;                      double percent = 100.0 * ((double)likes / (likes + dislikes));                      description += string.Format(" | Rating: {0} Like{1}' {2} Dislike{3} (\u0002{4}\u000F%)"' likes' pluralLikes' dislikes' pluralDislikes' Math.Round(percent' 1));                        description += string.Format(" | Views: \u0002{0}\u000F"' data["statistics"]["viewCount"].Value<int>());                  }                    DateTime uploadDate = Convert.ToDateTime(data["snippet"]["publishedAt"].Value<string>());                    description += string.Format(" | Uploaded By: \u0002{0}\u000F on \u0002{1}\u000F"' data["snippet"]["channelTitle"].Value<string>()' uploadDate.ToString("R"));                    if (data["contentDetails"]["contentRating"] != null)                  {                      description += " | \u0002NSFW\u000F";                  }              }              catch (WebException ex)              {                  description = string.Empty;              }
Missing Default,Combot.Modules.Plugins,YouTube,C:\repos\uncled1023_Combot\Modules\YouTube\YouTube.cs,ParseCommand,The following switch statement is missing a default case: switch (foundCommand.Name)              {                  case "YouTube Search":                      YoutubeSearch(command);                      break;              }
