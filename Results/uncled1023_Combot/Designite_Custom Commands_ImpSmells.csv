Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Combot.Modules.Plugins,Custom_Commands,C:\repos\uncled1023_Combot\Modules\Custom Commands\Custom_Commands.cs,GetTrigger,Cyclomatic complexity of the method is 15
Long Parameter List,Combot.Modules.Plugins,Custom_Commands,C:\repos\uncled1023_Combot\Modules\Custom Commands\Custom_Commands.cs,AddCommand,The method has 7 parameters. Parameters: command' type' permission' channels' nicknames' trigger' response
Long Parameter List,Combot.Modules.Plugins,Custom_Commands,C:\repos\uncled1023_Combot\Modules\Custom Commands\Custom_Commands.cs,EditCommand,The method has 7 parameters. Parameters: command' type' permission' channels' nicknames' trigger' response
Long Parameter List,Combot.Modules.Plugins,Custom_Commands,C:\repos\uncled1023_Combot\Modules\Custom Commands\Custom_Commands.cs,GetTrigger,The method has 6 parameters. Parameters: caller' permission' channels' nicknames' trigger' edit
Long Statement,Combot.Modules.Plugins,Custom_Commands,C:\repos\uncled1023_Combot\Modules\Custom Commands\Custom_Commands.cs,HandleChannelMessage,The length of the statement  "                    List<Dictionary<string' object>> foundTriggers = GetTrigger(message.Sender' null' message.Channel' message.Sender.Nickname' command); " is 133.
Long Statement,Combot.Modules.Plugins,Custom_Commands,C:\repos\uncled1023_Combot\Modules\Custom Commands\Custom_Commands.cs,HandlePrivateMessage,The length of the statement  "                    List<Dictionary<string' object>> foundTriggers = GetTrigger(message.Sender' null' null' message.Sender.Nickname' command); " is 122.
Long Statement,Combot.Modules.Plugins,Custom_Commands,C:\repos\uncled1023_Combot\Modules\Custom Commands\Custom_Commands.cs,HandlePrivateNotice,The length of the statement  "                    List<Dictionary<string' object>> foundTriggers = GetTrigger(message.Sender' null' null' message.Sender.Nickname' command); " is 122.
Long Statement,Combot.Modules.Plugins,Custom_Commands,C:\repos\uncled1023_Combot\Modules\Custom Commands\Custom_Commands.cs,HasValidCommandID,The length of the statement  "            List<Dictionary<string' object>> foundTriggers = GetTrigger(command.Nick' "Self"' string.Empty' string.Empty' null' true); " is 122.
Long Statement,Combot.Modules.Plugins,Custom_Commands,C:\repos\uncled1023_Combot\Modules\Custom Commands\Custom_Commands.cs,AddCommand,The length of the statement  "                List<Dictionary<string' object>> currentCommands = GetTrigger(command.Nick' "Self"' string.Empty' string.Empty' null' true); " is 124.
Long Statement,Combot.Modules.Plugins,Custom_Commands,C:\repos\uncled1023_Combot\Modules\Custom Commands\Custom_Commands.cs,AddCommand,The length of the statement  "                                       "`nick_id` = (SELECT `nicks`.`id` FROM `nicks` INNER JOIN `servers` ON `servers`.`id` = `nicks`.`server_id` WHERE `servers`.`name` = {1} && `nicks`.`nickname` = {2})' " + " is 170.
Long Statement,Combot.Modules.Plugins,Custom_Commands,C:\repos\uncled1023_Combot\Modules\Custom Commands\Custom_Commands.cs,AddCommand,The length of the statement  "                        Bot.Database.Execute(query' new object[] {Bot.ServerConfig.Name' Bot.ServerConfig.Name' command.Nick.Nickname' type' permission' channels' nicknames' trigger' response' command.TimeStamp}); " is 189.
Long Statement,Combot.Modules.Plugins,Custom_Commands,C:\repos\uncled1023_Combot\Modules\Custom Commands\Custom_Commands.cs,AddCommand,The length of the statement  "                    string errorMessage = string.Format("You can not have more than \u0002{0}\u0002 custom commands set.  Please delete one before adding another."' maxTriggers); " is 158.
Long Statement,Combot.Modules.Plugins,Custom_Commands,C:\repos\uncled1023_Combot\Modules\Custom Commands\Custom_Commands.cs,DeleteCommand,The length of the statement  "            List<Dictionary<string' object>> foundTriggers = GetTrigger(command.Nick' "Self"' string.Empty' string.Empty' null' true); " is 122.
Long Statement,Combot.Modules.Plugins,Custom_Commands,C:\repos\uncled1023_Combot\Modules\Custom Commands\Custom_Commands.cs,EditCommand,The length of the statement  "            List<Dictionary<string' object>> foundTriggers = GetTrigger(command.Nick' "Self"' string.Empty' string.Empty' null' true); " is 122.
Long Statement,Combot.Modules.Plugins,Custom_Commands,C:\repos\uncled1023_Combot\Modules\Custom Commands\Custom_Commands.cs,EditCommand,The length of the statement  "                Bot.Database.Execute(query' new object[] { type' permission' channels' nicknames' trigger' response' foundTriggers[triggerIndex - 1]["id"] }); " is 142.
Long Statement,Combot.Modules.Plugins,Custom_Commands,C:\repos\uncled1023_Combot\Modules\Custom Commands\Custom_Commands.cs,ViewTriggers,The length of the statement  "            List<Dictionary<string' object>> foundTriggers = GetTrigger(command.Nick' "Self"' string.Empty' string.Empty' null' true); " is 122.
Long Statement,Combot.Modules.Plugins,Custom_Commands,C:\repos\uncled1023_Combot\Modules\Custom Commands\Custom_Commands.cs,ViewTriggers,The length of the statement  "                    string response = string.Format("Command #{0} [{1}{2}] \u0002{3}{4}\u0002: {5}"' index' foundTrigger["permission"]' allowed' Bot.ServerConfig.CommandPrefix' foundTrigger["trigger"]' foundTrigger["response"]); " is 208.
Long Statement,Combot.Modules.Plugins,Custom_Commands,C:\repos\uncled1023_Combot\Modules\Custom Commands\Custom_Commands.cs,ViewTrigger,The length of the statement  "            List<Dictionary<string' object>> foundTriggers = GetTrigger(command.Nick' null' command.Location' command.Nick.Nickname' trigger); " is 130.
Long Statement,Combot.Modules.Plugins,Custom_Commands,C:\repos\uncled1023_Combot\Modules\Custom Commands\Custom_Commands.cs,ViewTrigger,The length of the statement  "                    string response = string.Format("[{0}{1}] \u0002{2}{3}\u0002: {4}"' foundTrigger["permission"]' allowed' Bot.ServerConfig.CommandPrefix' foundTrigger["trigger"]' foundTrigger["response"]); " is 188.
Long Statement,Combot.Modules.Plugins,Custom_Commands,C:\repos\uncled1023_Combot\Modules\Custom Commands\Custom_Commands.cs,GetTrigger,The length of the statement  "                            arguments.Add(string.Format(@"{0}[[:<:]]{1}[[:>:]]"' string.Join(@"\\"' match.Groups["Prefix"].ToString().ToCharArray())' match.Groups["Channel"])); " is 148.
Long Statement,Combot.Modules.Plugins,Custom_Commands,C:\repos\uncled1023_Combot\Modules\Custom Commands\Custom_Commands.cs,GetTrigger,The length of the statement  "                    search += "`nick_id` = (SELECT `nicks`.`id` FROM `nicks` INNER JOIN `servers` ON `servers`.`id` = `nicks`.`server_id` WHERE `servers`.`name` = {" + argCount++ + "} && `nickname` = {" + argCount++ + "})"; " is 203.
Long Statement,Combot.Modules.Plugins,Custom_Commands,C:\repos\uncled1023_Combot\Modules\Custom Commands\Custom_Commands.cs,GetTrigger,The length of the statement  "                    search += "`nick_id` = (SELECT `nicks`.`id` FROM `nicks` INNER JOIN `servers` ON `servers`.`id` = `nicks`.`server_id` WHERE `servers`.`name` = {" + argCount++ + "} && `nickname` = {" + argCount++ + "})"; " is 203.
Long Statement,Combot.Modules.Plugins,Custom_Commands,C:\repos\uncled1023_Combot\Modules\Custom Commands\Custom_Commands.cs,GetTrigger,The length of the statement  "                search += "(`nick_id` = (SELECT `nicks`.`id` FROM `nicks` INNER JOIN `servers` ON `servers`.`id` = `nicks`.`server_id` WHERE `servers`.`name` = {" + argCount++ + "} && `nickname` = {" + argCount++ + "})"; " is 204.
Missing Default,Combot.Modules.Plugins,Custom_Commands,C:\repos\uncled1023_Combot\Modules\Custom Commands\Custom_Commands.cs,ParseCommand,The following switch statement is missing a default case: switch (foundCommand.Name)              {                  case "Custom Command":                      string action = command.Arguments["Action"];                      switch (action.ToLower())                      {                          case "add":                              string addType = command.Arguments["Type"];                              string addPermission = command.Arguments["Permission"];                              string addChannels = (command.Arguments.ContainsKey("Channels")) ? command.Arguments["Channels"] : string.Empty;                              string addNicknames = (command.Arguments.ContainsKey("Nicknames")) ? command.Arguments["Nicknames"] : string.Empty;                              string addTrigger = command.Arguments["Trigger"];                              string addResponse = command.Arguments["Response"];                              AddCommand(command' addType' addPermission' addChannels' addNicknames' addTrigger' addResponse);                              break;                          case "del":                              DeleteCommand(command);                              break;                          case "edit":                              string editType = command.Arguments["Type"];                              string editPermission = command.Arguments["Permission"];                              string editChannels = (command.Arguments.ContainsKey("Channels")) ? command.Arguments["Channels"] : string.Empty;                              string editNicknames = (command.Arguments.ContainsKey("Nicknames")) ? command.Arguments["Nicknames"] : string.Empty;                              string editTrigger = command.Arguments["Trigger"];                              string editResponse = command.Arguments["Response"];                              EditCommand(command' editType' editPermission' editChannels' editNicknames' editTrigger' editResponse);                              break;                          case "view":                              if (command.Arguments.ContainsKey("Trigger"))                              {                                  ViewTrigger(command' command.Arguments["Trigger"]);                              }                              else                              {                                  ViewTriggers(command);                              }                              break;                      }                      break;              }
Missing Default,Combot.Modules.Plugins,Custom_Commands,C:\repos\uncled1023_Combot\Modules\Custom Commands\Custom_Commands.cs,ParseCommand,The following switch statement is missing a default case: switch (action.ToLower())                      {                          case "add":                              string addType = command.Arguments["Type"];                              string addPermission = command.Arguments["Permission"];                              string addChannels = (command.Arguments.ContainsKey("Channels")) ? command.Arguments["Channels"] : string.Empty;                              string addNicknames = (command.Arguments.ContainsKey("Nicknames")) ? command.Arguments["Nicknames"] : string.Empty;                              string addTrigger = command.Arguments["Trigger"];                              string addResponse = command.Arguments["Response"];                              AddCommand(command' addType' addPermission' addChannels' addNicknames' addTrigger' addResponse);                              break;                          case "del":                              DeleteCommand(command);                              break;                          case "edit":                              string editType = command.Arguments["Type"];                              string editPermission = command.Arguments["Permission"];                              string editChannels = (command.Arguments.ContainsKey("Channels")) ? command.Arguments["Channels"] : string.Empty;                              string editNicknames = (command.Arguments.ContainsKey("Nicknames")) ? command.Arguments["Nicknames"] : string.Empty;                              string editTrigger = command.Arguments["Trigger"];                              string editResponse = command.Arguments["Response"];                              EditCommand(command' editType' editPermission' editChannels' editNicknames' editTrigger' editResponse);                              break;                          case "view":                              if (command.Arguments.ContainsKey("Trigger"))                              {                                  ViewTrigger(command' command.Arguments["Trigger"]);                              }                              else                              {                                  ViewTriggers(command);                              }                              break;                      }
Missing Default,Combot.Modules.Plugins,Custom_Commands,C:\repos\uncled1023_Combot\Modules\Custom Commands\Custom_Commands.cs,ViewTriggers,The following switch statement is missing a default case: switch (foundTrigger["permission"].ToString().ToLower())                      {                          case "channels":                              allowed = " " + foundTrigger["channels"];                              break;                          case "nicks":                              allowed = " " + foundTrigger["nicknames"];                              break;                      }
Missing Default,Combot.Modules.Plugins,Custom_Commands,C:\repos\uncled1023_Combot\Modules\Custom Commands\Custom_Commands.cs,ViewTrigger,The following switch statement is missing a default case: switch (foundTrigger["permission"].ToString().ToLower())                      {                          case "channels":                              allowed = " " + foundTrigger["channels"];                              break;                          case "nicks":                              allowed = " " + foundTrigger["nicknames"];                              break;                      }
Missing Default,Combot.Modules.Plugins,Custom_Commands,C:\repos\uncled1023_Combot\Modules\Custom Commands\Custom_Commands.cs,ExecuteCommand,The following switch statement is missing a default case: switch (type.ToLower())              {                  case "response":                      message = "\u200B" + message;                      SendResponse(messageType' location' nick.Nickname' message);                      break;                  case "command":                      Bot.ExecuteCommand(Bot.ServerConfig.CommandPrefix + message' location' messageType' nick);                      break;                  case "list":                      // todo handle list commands                      break;              }
