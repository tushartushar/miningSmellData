Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Combot.Modules.Plugins,Search,D:\newReposJune17\uncled1023_Combot\Modules\Search\Search.cs,ParseCommand,Cyclomatic complexity of the method is 8
Long Statement,Combot.Modules.Plugins,Search,D:\newReposJune17\uncled1023_Combot\Modules\Search\Search.cs,GoogleSearch,The length of the statement  "				string title = HttpUtility.HtmlDecode (HttpUtility.UrlDecode (StripTagsCharArray (result.Value<string> ("titleNoFormatting")))); " is 128.
Long Statement,Combot.Modules.Plugins,Search,D:\newReposJune17\uncled1023_Combot\Modules\Search\Search.cs,GoogleSearch,The length of the statement  "				string content = HttpUtility.HtmlDecode (HttpUtility.UrlDecode (StripTagsCharArray (result.Value<string> ("content")))); " is 120.
Long Statement,Combot.Modules.Plugins,Search,D:\newReposJune17\uncled1023_Combot\Modules\Search\Search.cs,GoogleSearch,The length of the statement  "			string errorCode = string.Format ("Unable to search for \u0002{0}\u000F.  Google returned status code \u0002{1}\u000F."' command.Arguments ["Query"]' responseCode); " is 164.
Long Statement,Combot.Modules.Plugins,Search,D:\newReposJune17\uncled1023_Combot\Modules\Search\Search.cs,GoogleSearch,The length of the statement  "			string errorCode = string.Format ("Unable to search for \u0002{0}\u000F.  Google returned status code \u0002{1}\u000F."' command.Arguments ["Query"]' code); " is 156.
Long Statement,Combot.Modules.Plugins,Search,D:\newReposJune17\uncled1023_Combot\Modules\Search\Search.cs,SearxSearch,The length of the statement  "		Uri searchUrl = new Uri (string.Format (urlTemplate' host' HttpUtility.UrlEncode (command.Arguments ["Query"])' string.Join ("'"' engines))); " is 141.
Long Statement,Combot.Modules.Plugins,Search,D:\newReposJune17\uncled1023_Combot\Modules\Search\Search.cs,SearxSearch,The length of the statement  "				string content = HttpUtility.HtmlDecode (HttpUtility.UrlDecode (StripTagsCharArray (result.Value<string> ("content")))); " is 120.
Long Statement,Combot.Modules.Plugins,Search,D:\newReposJune17\uncled1023_Combot\Modules\Search\Search.cs,SearxSearch,The length of the statement  "			string errorCode = string.Format ("Unable to search for \u0002{0}\u000F.  Returned status code \u0002{1}\u000F."' command.Arguments ["Query"]' code); " is 149.
Magic Number,Combot.Modules.Plugins,Search,D:\newReposJune17\uncled1023_Combot\Modules\Search\Search.cs,GoogleSearch,The following statement contains a magic number: try {  	string page = web.DownloadString (searchUrl);  	JObject parsed = (JObject)JsonConvert.DeserializeObject (page);  	int responseCode = parsed.Value<int> ("responseStatus");  	if (responseCode < 300 && responseCode >= 200) {  		if (parsed ["responseData"] ["results"].Any ()) {  			var result = parsed ["responseData"] ["results"] [0];  			string url = result.Value<string> ("unescapedUrl");  			string title = HttpUtility.HtmlDecode (HttpUtility.UrlDecode (StripTagsCharArray (result.Value<string> ("titleNoFormatting"))));  			string content = HttpUtility.HtmlDecode (HttpUtility.UrlDecode (StripTagsCharArray (result.Value<string> ("content"))));  			string resultMessage = string.Format ("[{0}] \u0002{1}\u000F: {2}."' url' title' content);  			SendResponse (command.MessageType' command.Location' command.Nick.Nickname' resultMessage);  		} else {  			string noResults = string.Format ("No results found for \u0002{0}\u000F."' command.Arguments ["Query"]);  			SendResponse (command.MessageType' command.Location' command.Nick.Nickname' noResults);  		}  	} else {  		string errorCode = string.Format ("Unable to search for \u0002{0}\u000F.  Google returned status code \u0002{1}\u000F."' command.Arguments ["Query"]' responseCode);  		SendResponse (command.MessageType' command.Location' command.Nick.Nickname' errorCode);  	}  } catch (WebException ex) {  	if (ex.Response != null) {  		int code = (int)((HttpWebResponse)ex.Response).StatusCode;  		string errorCode = string.Format ("Unable to search for \u0002{0}\u000F.  Google returned status code \u0002{1}\u000F."' command.Arguments ["Query"]' code);  		SendResponse (command.MessageType' command.Location' command.Nick.Nickname' errorCode);  	} else {  		string errorCode = string.Format ("Unable to search for \u0002{0}\u000F."' command.Arguments ["Query"]);  		SendResponse (command.MessageType' command.Location' command.Nick.Nickname' errorCode);  	}  }  
Magic Number,Combot.Modules.Plugins,Search,D:\newReposJune17\uncled1023_Combot\Modules\Search\Search.cs,GoogleSearch,The following statement contains a magic number: try {  	string page = web.DownloadString (searchUrl);  	JObject parsed = (JObject)JsonConvert.DeserializeObject (page);  	int responseCode = parsed.Value<int> ("responseStatus");  	if (responseCode < 300 && responseCode >= 200) {  		if (parsed ["responseData"] ["results"].Any ()) {  			var result = parsed ["responseData"] ["results"] [0];  			string url = result.Value<string> ("unescapedUrl");  			string title = HttpUtility.HtmlDecode (HttpUtility.UrlDecode (StripTagsCharArray (result.Value<string> ("titleNoFormatting"))));  			string content = HttpUtility.HtmlDecode (HttpUtility.UrlDecode (StripTagsCharArray (result.Value<string> ("content"))));  			string resultMessage = string.Format ("[{0}] \u0002{1}\u000F: {2}."' url' title' content);  			SendResponse (command.MessageType' command.Location' command.Nick.Nickname' resultMessage);  		} else {  			string noResults = string.Format ("No results found for \u0002{0}\u000F."' command.Arguments ["Query"]);  			SendResponse (command.MessageType' command.Location' command.Nick.Nickname' noResults);  		}  	} else {  		string errorCode = string.Format ("Unable to search for \u0002{0}\u000F.  Google returned status code \u0002{1}\u000F."' command.Arguments ["Query"]' responseCode);  		SendResponse (command.MessageType' command.Location' command.Nick.Nickname' errorCode);  	}  } catch (WebException ex) {  	if (ex.Response != null) {  		int code = (int)((HttpWebResponse)ex.Response).StatusCode;  		string errorCode = string.Format ("Unable to search for \u0002{0}\u000F.  Google returned status code \u0002{1}\u000F."' command.Arguments ["Query"]' code);  		SendResponse (command.MessageType' command.Location' command.Nick.Nickname' errorCode);  	} else {  		string errorCode = string.Format ("Unable to search for \u0002{0}\u000F."' command.Arguments ["Query"]);  		SendResponse (command.MessageType' command.Location' command.Nick.Nickname' errorCode);  	}  }  
Magic Number,Combot.Modules.Plugins,Search,D:\newReposJune17\uncled1023_Combot\Modules\Search\Search.cs,GoogleSearch,The following statement contains a magic number: if (responseCode < 300 && responseCode >= 200) {  	if (parsed ["responseData"] ["results"].Any ()) {  		var result = parsed ["responseData"] ["results"] [0];  		string url = result.Value<string> ("unescapedUrl");  		string title = HttpUtility.HtmlDecode (HttpUtility.UrlDecode (StripTagsCharArray (result.Value<string> ("titleNoFormatting"))));  		string content = HttpUtility.HtmlDecode (HttpUtility.UrlDecode (StripTagsCharArray (result.Value<string> ("content"))));  		string resultMessage = string.Format ("[{0}] \u0002{1}\u000F: {2}."' url' title' content);  		SendResponse (command.MessageType' command.Location' command.Nick.Nickname' resultMessage);  	} else {  		string noResults = string.Format ("No results found for \u0002{0}\u000F."' command.Arguments ["Query"]);  		SendResponse (command.MessageType' command.Location' command.Nick.Nickname' noResults);  	}  } else {  	string errorCode = string.Format ("Unable to search for \u0002{0}\u000F.  Google returned status code \u0002{1}\u000F."' command.Arguments ["Query"]' responseCode);  	SendResponse (command.MessageType' command.Location' command.Nick.Nickname' errorCode);  }  
Magic Number,Combot.Modules.Plugins,Search,D:\newReposJune17\uncled1023_Combot\Modules\Search\Search.cs,GoogleSearch,The following statement contains a magic number: if (responseCode < 300 && responseCode >= 200) {  	if (parsed ["responseData"] ["results"].Any ()) {  		var result = parsed ["responseData"] ["results"] [0];  		string url = result.Value<string> ("unescapedUrl");  		string title = HttpUtility.HtmlDecode (HttpUtility.UrlDecode (StripTagsCharArray (result.Value<string> ("titleNoFormatting"))));  		string content = HttpUtility.HtmlDecode (HttpUtility.UrlDecode (StripTagsCharArray (result.Value<string> ("content"))));  		string resultMessage = string.Format ("[{0}] \u0002{1}\u000F: {2}."' url' title' content);  		SendResponse (command.MessageType' command.Location' command.Nick.Nickname' resultMessage);  	} else {  		string noResults = string.Format ("No results found for \u0002{0}\u000F."' command.Arguments ["Query"]);  		SendResponse (command.MessageType' command.Location' command.Nick.Nickname' noResults);  	}  } else {  	string errorCode = string.Format ("Unable to search for \u0002{0}\u000F.  Google returned status code \u0002{1}\u000F."' command.Arguments ["Query"]' responseCode);  	SendResponse (command.MessageType' command.Location' command.Nick.Nickname' errorCode);  }  
Missing Default,Combot.Modules.Plugins,Search,D:\newReposJune17\uncled1023_Combot\Modules\Search\Search.cs,ParseCommand,The following switch statement is missing a default case: switch (foundCommand.Name) {  case "Google":  	GoogleSearch (command);  	break;  case "Bing":  	break;  case "Searx":  	SearxSearch (command);  	break;  }  
