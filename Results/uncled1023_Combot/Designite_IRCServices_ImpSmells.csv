Implementation smell,Namespace,Class,File,Method,Description
Long Method,Combot.IRCServices.Messaging,Messages,C:\repos\uncled1023_Combot\IRCServices\Messaging\Messages.cs,ParseTCPMessage,The method has 398 lines of code.
Complex Method,Combot.IRCServices.Commanding,Commands,C:\repos\uncled1023_Combot\IRCServices\Commanding\Commands.cs,SendPrivateMessage,Cyclomatic complexity of the method is 9
Complex Method,Combot.IRCServices.Commanding,Commands,C:\repos\uncled1023_Combot\IRCServices\Commanding\Commands.cs,SendNotice,Cyclomatic complexity of the method is 9
Long Statement,Combot.IRCServices.Commanding,Commands,C:\repos\uncled1023_Combot\IRCServices\Commanding\Commands.cs,SendCTCPMessage,The length of the statement  "                CTCPMessageCommandEvent(this' new CTCPMessageCommand { Arguments = message' Command = command' Recipient = recipient }); " is 120.
Long Statement,Combot.IRCServices.Commanding,Commands,C:\repos\uncled1023_Combot\IRCServices\Commanding\Commands.cs,SendUser,The length of the statement  "                UserCommandEvent(this' new UserCommand { Username = username' Hostname = hostname' Servername = servername' Realname = realname }); " is 131.
Long Statement,Combot.IRCServices.Commanding,Commands,C:\repos\uncled1023_Combot\IRCServices\Commanding\Commands.cs,SendMode,The length of the statement  "                if ((setList.Length + modeList.Length + channel.Length + modeInfo.Parameter.Length + 8 + ((modeInfo.Set != lastSet) ? 1 : 0)) > MaxMessageLength || modeIndex > 4) " is 162.
Long Statement,Combot.IRCServices.Messaging,Messages,C:\repos\uncled1023_Combot\IRCServices\Messaging\Messages.cs,ParseTCPMessage,The length of the statement  "            Regex messageRegex = new Regex(@"^:(?<Sender>[^\s]+)\s(?<Type>[^\s]+)\s(?<Recipient>[^\s]+)\s?:?(?<Args>.*)"' RegexOptions.None); " is 129.
Empty Catch Block,Combot.IRCServices.TCP,TCPInterface,C:\repos\uncled1023_Combot\IRCServices\TCP\TCPInterface.cs,Write,The method has an empty catch block.
Empty Catch Block,Combot.IRCServices.TCP,TCPInterface,C:\repos\uncled1023_Combot\IRCServices\TCP\TCPInterface.cs,Read,The method has an empty catch block.
Magic Number,Combot.IRCServices,IRC,C:\repos\uncled1023_Combot\IRCServices\IRC.cs,CheckConnection,The following statement contains a magic number: while (_TCP.Connected)              {                  Thread.Sleep(5000);                   bool stillConnected = NetworkInterface.GetIsNetworkAvailable();                    if (stillConnected)                  {                      Socket s = new Socket(AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.Tcp);                      try                      {                          s.Connect(IP' port);                      }                      catch                      {                          stillConnected = false;                      }                  }                    if (!stillConnected)                  {                      diconnectCount++;                  }                  else                  {                      diconnectCount = 0;                  }                    if (diconnectCount >= 5 && !disconnectActivated)                  {                      disconnectActivated = true;                      Task.Run(() =>                      {                          Disconnect();                      });                  }              }
Magic Number,Combot.IRCServices,IRC,C:\repos\uncled1023_Combot\IRCServices\IRC.cs,CheckConnection,The following statement contains a magic number: while (_TCP.Connected)              {                  Thread.Sleep(5000);                   bool stillConnected = NetworkInterface.GetIsNetworkAvailable();                    if (stillConnected)                  {                      Socket s = new Socket(AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.Tcp);                      try                      {                          s.Connect(IP' port);                      }                      catch                      {                          stillConnected = false;                      }                  }                    if (!stillConnected)                  {                      diconnectCount++;                  }                  else                  {                      diconnectCount = 0;                  }                    if (diconnectCount >= 5 && !disconnectActivated)                  {                      disconnectActivated = true;                      Task.Run(() =>                      {                          Disconnect();                      });                  }              }
Magic Number,Combot.IRCServices,IRC,C:\repos\uncled1023_Combot\IRCServices\IRC.cs,HandleReply,The following statement contains a magic number: if (e.GetType() == typeof(ServerReplyMessage))              {                  ServerReplyMessage msg = (ServerReplyMessage)e;                  switch (msg.ReplyCode)                  {                      // If we get a WHO response' we parse and add the nicks to the specified channel if they are not there already.                      case IRCReplyCode.RPL_WHOREPLY:                          ChannelRWLock.EnterWriteLock();                          string[] msgSplit = msg.Message.Split(new char[] { ' ' }' StringSplitOptions.RemoveEmptyEntries);                          if (msgSplit.GetUpperBound(0) > 0)                          {                              string target = msgSplit[0];                              if (target.StartsWith("&") || target.StartsWith("#"))                              {                                  if (msgSplit.GetUpperBound(0) >= 7)                                  {                                      string nickname = msgSplit[4];                                      string realname = msgSplit[7];                                      string username = msgSplit[1];                                      string host = msgSplit[2];                                      string modeString = msgSplit[5];                                      Channel channel = Channels.Find(chan => chan.Name == target);                                      if (channel != null)                                      {                                          Nick nick = channel.GetNick(nickname);                                          bool nickFound = true;                                          if (nick == null)                                          {                                              nickFound = false;                                              nick = new Nick();                                          }                                          nick.Nickname = nickname;                                          nick.Host = host;                                          nick.Realname = realname;                                          nick.Username = username;                                          nick.Modes = new List<UserMode>();                                          nick.Privileges = new List<PrivilegeMode>();                                          char[] modeArr = modeString.ToCharArray();                                          for (int i = 1; i <= modeArr.GetUpperBound(0); i++)                                          {                                              if (PrivilegeMapping.ContainsKey(modeArr[i].ToString()))                                              {                                                  nick.Privileges.Add(PrivilegeMapping[modeArr[i].ToString()]);                                              }                                              else if (modeArr[i].ToString() == "*")                                              {                                                  nick.Modes.Add(UserMode.o);                                              }                                              else                                              {                                                  UserMode foundMode;                                                  bool valid = Enum.TryParse(modeArr[i].ToString()' false' out foundMode);                                                  if (valid)                                                  {                                                      nick.Modes.Add(foundMode);                                                  }                                              }                                          }                                          if (!nickFound)                                          {                                              channel.AddNick(nick);                                          }                                      }                                  }                              }                          }                          ChannelRWLock.ExitWriteLock();                          break;                      // On a topic reply' update the channel's topic                      case IRCReplyCode.RPL_TOPIC:                          ChannelRWLock.EnterWriteLock();                          string[] topicSplit = msg.Message.Split(new char[] { ' ' }' StringSplitOptions.RemoveEmptyEntries);                          if (topicSplit.GetUpperBound(0) > 0)                          {                              string topicChan = topicSplit[0];                              Channel topicChannel = Channels.Find(chan => chan.Name == topicChan);                              if (topicChannel != null)                              {                                  topicChannel.Topic = topicSplit[1].Remove(0' 1);                              }                          }                          ChannelRWLock.ExitWriteLock();                          break;                      default:                          break;                  }              }              else              {                  ServerErrorMessage msg = (ServerErrorMessage)e;              }
Magic Number,Combot.IRCServices,IRC,C:\repos\uncled1023_Combot\IRCServices\IRC.cs,HandleReply,The following statement contains a magic number: if (e.GetType() == typeof(ServerReplyMessage))              {                  ServerReplyMessage msg = (ServerReplyMessage)e;                  switch (msg.ReplyCode)                  {                      // If we get a WHO response' we parse and add the nicks to the specified channel if they are not there already.                      case IRCReplyCode.RPL_WHOREPLY:                          ChannelRWLock.EnterWriteLock();                          string[] msgSplit = msg.Message.Split(new char[] { ' ' }' StringSplitOptions.RemoveEmptyEntries);                          if (msgSplit.GetUpperBound(0) > 0)                          {                              string target = msgSplit[0];                              if (target.StartsWith("&") || target.StartsWith("#"))                              {                                  if (msgSplit.GetUpperBound(0) >= 7)                                  {                                      string nickname = msgSplit[4];                                      string realname = msgSplit[7];                                      string username = msgSplit[1];                                      string host = msgSplit[2];                                      string modeString = msgSplit[5];                                      Channel channel = Channels.Find(chan => chan.Name == target);                                      if (channel != null)                                      {                                          Nick nick = channel.GetNick(nickname);                                          bool nickFound = true;                                          if (nick == null)                                          {                                              nickFound = false;                                              nick = new Nick();                                          }                                          nick.Nickname = nickname;                                          nick.Host = host;                                          nick.Realname = realname;                                          nick.Username = username;                                          nick.Modes = new List<UserMode>();                                          nick.Privileges = new List<PrivilegeMode>();                                          char[] modeArr = modeString.ToCharArray();                                          for (int i = 1; i <= modeArr.GetUpperBound(0); i++)                                          {                                              if (PrivilegeMapping.ContainsKey(modeArr[i].ToString()))                                              {                                                  nick.Privileges.Add(PrivilegeMapping[modeArr[i].ToString()]);                                              }                                              else if (modeArr[i].ToString() == "*")                                              {                                                  nick.Modes.Add(UserMode.o);                                              }                                              else                                              {                                                  UserMode foundMode;                                                  bool valid = Enum.TryParse(modeArr[i].ToString()' false' out foundMode);                                                  if (valid)                                                  {                                                      nick.Modes.Add(foundMode);                                                  }                                              }                                          }                                          if (!nickFound)                                          {                                              channel.AddNick(nick);                                          }                                      }                                  }                              }                          }                          ChannelRWLock.ExitWriteLock();                          break;                      // On a topic reply' update the channel's topic                      case IRCReplyCode.RPL_TOPIC:                          ChannelRWLock.EnterWriteLock();                          string[] topicSplit = msg.Message.Split(new char[] { ' ' }' StringSplitOptions.RemoveEmptyEntries);                          if (topicSplit.GetUpperBound(0) > 0)                          {                              string topicChan = topicSplit[0];                              Channel topicChannel = Channels.Find(chan => chan.Name == topicChan);                              if (topicChannel != null)                              {                                  topicChannel.Topic = topicSplit[1].Remove(0' 1);                              }                          }                          ChannelRWLock.ExitWriteLock();                          break;                      default:                          break;                  }              }              else              {                  ServerErrorMessage msg = (ServerErrorMessage)e;              }
Magic Number,Combot.IRCServices,IRC,C:\repos\uncled1023_Combot\IRCServices\IRC.cs,HandleReply,The following statement contains a magic number: if (e.GetType() == typeof(ServerReplyMessage))              {                  ServerReplyMessage msg = (ServerReplyMessage)e;                  switch (msg.ReplyCode)                  {                      // If we get a WHO response' we parse and add the nicks to the specified channel if they are not there already.                      case IRCReplyCode.RPL_WHOREPLY:                          ChannelRWLock.EnterWriteLock();                          string[] msgSplit = msg.Message.Split(new char[] { ' ' }' StringSplitOptions.RemoveEmptyEntries);                          if (msgSplit.GetUpperBound(0) > 0)                          {                              string target = msgSplit[0];                              if (target.StartsWith("&") || target.StartsWith("#"))                              {                                  if (msgSplit.GetUpperBound(0) >= 7)                                  {                                      string nickname = msgSplit[4];                                      string realname = msgSplit[7];                                      string username = msgSplit[1];                                      string host = msgSplit[2];                                      string modeString = msgSplit[5];                                      Channel channel = Channels.Find(chan => chan.Name == target);                                      if (channel != null)                                      {                                          Nick nick = channel.GetNick(nickname);                                          bool nickFound = true;                                          if (nick == null)                                          {                                              nickFound = false;                                              nick = new Nick();                                          }                                          nick.Nickname = nickname;                                          nick.Host = host;                                          nick.Realname = realname;                                          nick.Username = username;                                          nick.Modes = new List<UserMode>();                                          nick.Privileges = new List<PrivilegeMode>();                                          char[] modeArr = modeString.ToCharArray();                                          for (int i = 1; i <= modeArr.GetUpperBound(0); i++)                                          {                                              if (PrivilegeMapping.ContainsKey(modeArr[i].ToString()))                                              {                                                  nick.Privileges.Add(PrivilegeMapping[modeArr[i].ToString()]);                                              }                                              else if (modeArr[i].ToString() == "*")                                              {                                                  nick.Modes.Add(UserMode.o);                                              }                                              else                                              {                                                  UserMode foundMode;                                                  bool valid = Enum.TryParse(modeArr[i].ToString()' false' out foundMode);                                                  if (valid)                                                  {                                                      nick.Modes.Add(foundMode);                                                  }                                              }                                          }                                          if (!nickFound)                                          {                                              channel.AddNick(nick);                                          }                                      }                                  }                              }                          }                          ChannelRWLock.ExitWriteLock();                          break;                      // On a topic reply' update the channel's topic                      case IRCReplyCode.RPL_TOPIC:                          ChannelRWLock.EnterWriteLock();                          string[] topicSplit = msg.Message.Split(new char[] { ' ' }' StringSplitOptions.RemoveEmptyEntries);                          if (topicSplit.GetUpperBound(0) > 0)                          {                              string topicChan = topicSplit[0];                              Channel topicChannel = Channels.Find(chan => chan.Name == topicChan);                              if (topicChannel != null)                              {                                  topicChannel.Topic = topicSplit[1].Remove(0' 1);                              }                          }                          ChannelRWLock.ExitWriteLock();                          break;                      default:                          break;                  }              }              else              {                  ServerErrorMessage msg = (ServerErrorMessage)e;              }
Magic Number,Combot.IRCServices,IRC,C:\repos\uncled1023_Combot\IRCServices\IRC.cs,HandleReply,The following statement contains a magic number: if (e.GetType() == typeof(ServerReplyMessage))              {                  ServerReplyMessage msg = (ServerReplyMessage)e;                  switch (msg.ReplyCode)                  {                      // If we get a WHO response' we parse and add the nicks to the specified channel if they are not there already.                      case IRCReplyCode.RPL_WHOREPLY:                          ChannelRWLock.EnterWriteLock();                          string[] msgSplit = msg.Message.Split(new char[] { ' ' }' StringSplitOptions.RemoveEmptyEntries);                          if (msgSplit.GetUpperBound(0) > 0)                          {                              string target = msgSplit[0];                              if (target.StartsWith("&") || target.StartsWith("#"))                              {                                  if (msgSplit.GetUpperBound(0) >= 7)                                  {                                      string nickname = msgSplit[4];                                      string realname = msgSplit[7];                                      string username = msgSplit[1];                                      string host = msgSplit[2];                                      string modeString = msgSplit[5];                                      Channel channel = Channels.Find(chan => chan.Name == target);                                      if (channel != null)                                      {                                          Nick nick = channel.GetNick(nickname);                                          bool nickFound = true;                                          if (nick == null)                                          {                                              nickFound = false;                                              nick = new Nick();                                          }                                          nick.Nickname = nickname;                                          nick.Host = host;                                          nick.Realname = realname;                                          nick.Username = username;                                          nick.Modes = new List<UserMode>();                                          nick.Privileges = new List<PrivilegeMode>();                                          char[] modeArr = modeString.ToCharArray();                                          for (int i = 1; i <= modeArr.GetUpperBound(0); i++)                                          {                                              if (PrivilegeMapping.ContainsKey(modeArr[i].ToString()))                                              {                                                  nick.Privileges.Add(PrivilegeMapping[modeArr[i].ToString()]);                                              }                                              else if (modeArr[i].ToString() == "*")                                              {                                                  nick.Modes.Add(UserMode.o);                                              }                                              else                                              {                                                  UserMode foundMode;                                                  bool valid = Enum.TryParse(modeArr[i].ToString()' false' out foundMode);                                                  if (valid)                                                  {                                                      nick.Modes.Add(foundMode);                                                  }                                              }                                          }                                          if (!nickFound)                                          {                                              channel.AddNick(nick);                                          }                                      }                                  }                              }                          }                          ChannelRWLock.ExitWriteLock();                          break;                      // On a topic reply' update the channel's topic                      case IRCReplyCode.RPL_TOPIC:                          ChannelRWLock.EnterWriteLock();                          string[] topicSplit = msg.Message.Split(new char[] { ' ' }' StringSplitOptions.RemoveEmptyEntries);                          if (topicSplit.GetUpperBound(0) > 0)                          {                              string topicChan = topicSplit[0];                              Channel topicChannel = Channels.Find(chan => chan.Name == topicChan);                              if (topicChannel != null)                              {                                  topicChannel.Topic = topicSplit[1].Remove(0' 1);                              }                          }                          ChannelRWLock.ExitWriteLock();                          break;                      default:                          break;                  }              }              else              {                  ServerErrorMessage msg = (ServerErrorMessage)e;              }
Magic Number,Combot.IRCServices,IRC,C:\repos\uncled1023_Combot\IRCServices\IRC.cs,HandleReply,The following statement contains a magic number: if (e.GetType() == typeof(ServerReplyMessage))              {                  ServerReplyMessage msg = (ServerReplyMessage)e;                  switch (msg.ReplyCode)                  {                      // If we get a WHO response' we parse and add the nicks to the specified channel if they are not there already.                      case IRCReplyCode.RPL_WHOREPLY:                          ChannelRWLock.EnterWriteLock();                          string[] msgSplit = msg.Message.Split(new char[] { ' ' }' StringSplitOptions.RemoveEmptyEntries);                          if (msgSplit.GetUpperBound(0) > 0)                          {                              string target = msgSplit[0];                              if (target.StartsWith("&") || target.StartsWith("#"))                              {                                  if (msgSplit.GetUpperBound(0) >= 7)                                  {                                      string nickname = msgSplit[4];                                      string realname = msgSplit[7];                                      string username = msgSplit[1];                                      string host = msgSplit[2];                                      string modeString = msgSplit[5];                                      Channel channel = Channels.Find(chan => chan.Name == target);                                      if (channel != null)                                      {                                          Nick nick = channel.GetNick(nickname);                                          bool nickFound = true;                                          if (nick == null)                                          {                                              nickFound = false;                                              nick = new Nick();                                          }                                          nick.Nickname = nickname;                                          nick.Host = host;                                          nick.Realname = realname;                                          nick.Username = username;                                          nick.Modes = new List<UserMode>();                                          nick.Privileges = new List<PrivilegeMode>();                                          char[] modeArr = modeString.ToCharArray();                                          for (int i = 1; i <= modeArr.GetUpperBound(0); i++)                                          {                                              if (PrivilegeMapping.ContainsKey(modeArr[i].ToString()))                                              {                                                  nick.Privileges.Add(PrivilegeMapping[modeArr[i].ToString()]);                                              }                                              else if (modeArr[i].ToString() == "*")                                              {                                                  nick.Modes.Add(UserMode.o);                                              }                                              else                                              {                                                  UserMode foundMode;                                                  bool valid = Enum.TryParse(modeArr[i].ToString()' false' out foundMode);                                                  if (valid)                                                  {                                                      nick.Modes.Add(foundMode);                                                  }                                              }                                          }                                          if (!nickFound)                                          {                                              channel.AddNick(nick);                                          }                                      }                                  }                              }                          }                          ChannelRWLock.ExitWriteLock();                          break;                      // On a topic reply' update the channel's topic                      case IRCReplyCode.RPL_TOPIC:                          ChannelRWLock.EnterWriteLock();                          string[] topicSplit = msg.Message.Split(new char[] { ' ' }' StringSplitOptions.RemoveEmptyEntries);                          if (topicSplit.GetUpperBound(0) > 0)                          {                              string topicChan = topicSplit[0];                              Channel topicChannel = Channels.Find(chan => chan.Name == topicChan);                              if (topicChannel != null)                              {                                  topicChannel.Topic = topicSplit[1].Remove(0' 1);                              }                          }                          ChannelRWLock.ExitWriteLock();                          break;                      default:                          break;                  }              }              else              {                  ServerErrorMessage msg = (ServerErrorMessage)e;              }
Magic Number,Combot.IRCServices.Commanding,Commands,C:\repos\uncled1023_Combot\IRCServices\Commanding\Commands.cs,SendMode,The following statement contains a magic number: foreach (ChannelModeInfo modeInfo in modeInfos)              {                  if ((setList.Length + modeList.Length + channel.Length + modeInfo.Parameter.Length + 8 + ((modeInfo.Set != lastSet) ? 1 : 0)) > MaxMessageLength || modeIndex > 4)                  {                      _IRC.SendTCPMessage(string.Format("MODE {0} {1} {2}"' channel' setList' modeList));                      setList = string.Empty;                      modeList = string.Empty;                      lastSet = true;                      modeIndex = 1;                  }                  if (modeInfo.Set != lastSet)                      setList += modeInfo.Set ? "+" : "-";                    setList += modeInfo.Mode;                  modeList += modeInfo.Parameter + " ";                    lastSet = modeInfo.Set;                  modeIndex++;                  if (ChannelModeCommandEvent != null)                  {                      ChannelModeCommandEvent(this' new ChannelModeCommand { Channel = channel' Mode = modeInfo });                  }              }
Magic Number,Combot.IRCServices.Commanding,Commands,C:\repos\uncled1023_Combot\IRCServices\Commanding\Commands.cs,SendMode,The following statement contains a magic number: foreach (ChannelModeInfo modeInfo in modeInfos)              {                  if ((setList.Length + modeList.Length + channel.Length + modeInfo.Parameter.Length + 8 + ((modeInfo.Set != lastSet) ? 1 : 0)) > MaxMessageLength || modeIndex > 4)                  {                      _IRC.SendTCPMessage(string.Format("MODE {0} {1} {2}"' channel' setList' modeList));                      setList = string.Empty;                      modeList = string.Empty;                      lastSet = true;                      modeIndex = 1;                  }                  if (modeInfo.Set != lastSet)                      setList += modeInfo.Set ? "+" : "-";                    setList += modeInfo.Mode;                  modeList += modeInfo.Parameter + " ";                    lastSet = modeInfo.Set;                  modeIndex++;                  if (ChannelModeCommandEvent != null)                  {                      ChannelModeCommandEvent(this' new ChannelModeCommand { Channel = channel' Mode = modeInfo });                  }              }
Magic Number,Combot.IRCServices.Messaging,Messages,C:\repos\uncled1023_Combot\IRCServices\Messaging\Messages.cs,GetServerReply,The following statement contains a magic number: reply.Ready.Wait(TimeSpan.FromMilliseconds(5000));
Magic Number,Combot.IRCServices.Messaging,Messages,C:\repos\uncled1023_Combot\IRCServices\Messaging\Messages.cs,GetServerError,The following statement contains a magic number: error.Ready.Wait(TimeSpan.FromMilliseconds(5000));
Magic Number,Combot.IRCServices.TCP,TCPInterface,C:\repos\uncled1023_Combot\IRCServices\TCP\TCPInterface.cs,Read,The following statement contains a magic number: try              {                  if (_tcpStream.CanRead && Connected)                  {                      byte[] readBytes = new byte[100000];                      _tcpStream.Read(readBytes' 0' readBytes.Length);                      string result = Encoding.UTF8.GetString(readBytes' 0' readBytes.Length);                      // Reset Failed Counter                      _currentFailedCount = 0;                      return result.TrimEnd('\0');                  }              }              catch (IOException)              {                  /*                  _currentFailedCount++;                  Action<TCPError> localEvent = TCPErrorEvent;                  if (localEvent != null && _tcpStream.CanRead)                  {                      TCPError error = new TCPError();                      error.Message = string.Format("Read Timeout' No Response from Server in {0}ms"' _readTimeout);                      localEvent(error);                  }                  */              }              catch (Exception ex)              {                  _currentFailedCount++;                  Action<TCPError> localEvent = TCPErrorEvent;                  if (localEvent != null)                  {                      TCPError error = new TCPError();                      error.Message = ex.Message;                      localEvent(error);                  }              }
