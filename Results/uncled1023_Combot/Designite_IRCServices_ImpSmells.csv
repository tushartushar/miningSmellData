Implementation smell,Namespace,Class,File,Method,Description
Long Method,Combot.IRCServices,IRC,D:\newReposJune17\uncled1023_Combot\IRCServices\IRC.cs,HandleReply,The method has 78 lines of code.
Long Method,Combot.IRCServices.Messaging,Messages,D:\newReposJune17\uncled1023_Combot\IRCServices\Messaging\Messages.cs,ParseTCPMessage,The method has 374 lines of code.
Complex Method,Combot.IRCServices,IRC,D:\newReposJune17\uncled1023_Combot\IRCServices\IRC.cs,ParseChannelModeString,Cyclomatic complexity of the method is 22
Complex Method,Combot.IRCServices,IRC,D:\newReposJune17\uncled1023_Combot\IRCServices\IRC.cs,ParseUserModeString,Cyclomatic complexity of the method is 7
Complex Method,Combot.IRCServices,IRC,D:\newReposJune17\uncled1023_Combot\IRCServices\IRC.cs,HandleReply,Cyclomatic complexity of the method is 27
Complex Method,Combot.IRCServices,IRC,D:\newReposJune17\uncled1023_Combot\IRCServices\IRC.cs,HandleChannelModeChange,Cyclomatic complexity of the method is 24
Complex Method,Combot.IRCServices.Commanding,Commands,D:\newReposJune17\uncled1023_Combot\IRCServices\Commanding\Commands.cs,SendPrivateMessage,Cyclomatic complexity of the method is 10
Complex Method,Combot.IRCServices.Commanding,Commands,D:\newReposJune17\uncled1023_Combot\IRCServices\Commanding\Commands.cs,SendNotice,Cyclomatic complexity of the method is 10
Complex Method,Combot.IRCServices.Messaging,Messages,D:\newReposJune17\uncled1023_Combot\IRCServices\Messaging\Messages.cs,ParseTCPMessage,Cyclomatic complexity of the method is 81
Long Parameter List,Combot.IRCServices,IRC,D:\newReposJune17\uncled1023_Combot\IRCServices\IRC.cs,IRC,The method has 4 parameters.
Long Parameter List,Combot.IRCServices.Commanding,Commands,D:\newReposJune17\uncled1023_Combot\IRCServices\Commanding\Commands.cs,SendUser,The method has 4 parameters.
Long Parameter List,Combot.IRCServices.TCP,TCPInterface,D:\newReposJune17\uncled1023_Combot\IRCServices\TCP\TCPInterface.cs,Connect,The method has 4 parameters.
Long Statement,Combot.IRCServices.Commanding,Commands,D:\newReposJune17\uncled1023_Combot\IRCServices\Commanding\Commands.cs,SendPrivateMessage,The length of the statement  "					string lastPart = (leftover > 0) ? splitMessage [i].Substring (leftover' (wordLength - leftover) - 1) : splitMessage [i]; " is 121.
Long Statement,Combot.IRCServices.Commanding,Commands,D:\newReposJune17\uncled1023_Combot\IRCServices\Commanding\Commands.cs,SendNotice,The length of the statement  "					string lastPart = (leftover > 0) ? splitMessage [i].Substring (leftover' (wordLength - leftover) - 1) : splitMessage [i]; " is 121.
Long Statement,Combot.IRCServices.Commanding,Commands,D:\newReposJune17\uncled1023_Combot\IRCServices\Commanding\Commands.cs,SendMode,The length of the statement  "		if ((setList.Length + modeList.Length + channel.Length + modeInfo.Parameter.Length + 8 + ((modeInfo.Set != lastSet) ? 1 : 0)) > MaxMessageLength || modeIndex > 4) { " is 164.
Long Statement,Combot.IRCServices.Messaging,Messages,D:\newReposJune17\uncled1023_Combot\IRCServices\Messaging\Messages.cs,ParseTCPMessage,The length of the statement  "	Regex messageRegex = new Regex (@"^:(?<Sender>[^\s]+)\s(?<Type>[^\s]+)\s(?<Recipient>[^\s]+)\s?:?(?<Args>.*)"' RegexOptions.None); " is 130.
Empty Catch Block,Combot.IRCServices.TCP,TCPInterface,D:\newReposJune17\uncled1023_Combot\IRCServices\TCP\TCPInterface.cs,Write,The method has an empty catch block.
Empty Catch Block,Combot.IRCServices.TCP,TCPInterface,D:\newReposJune17\uncled1023_Combot\IRCServices\TCP\TCPInterface.cs,Read,The method has an empty catch block.
Magic Number,Combot.IRCServices,IRC,D:\newReposJune17\uncled1023_Combot\IRCServices\IRC.cs,CheckConnection,The following statement contains a magic number: while (_TCP.Connected) {  	Thread.Sleep (5000);  	bool stillConnected = NetworkInterface.GetIsNetworkAvailable ();  	if (stillConnected) {  		Socket s = new Socket (AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.Tcp);  		try {  			s.Connect (IP' port);  		} catch {  			stillConnected = false;  		}  	}  	if (!stillConnected) {  		diconnectCount++;  	} else {  		diconnectCount = 0;  	}  	if (diconnectCount >= 5 && !disconnectActivated) {  		disconnectActivated = true;  		Task.Run (() => {  			Disconnect ();  		});  	}  }  
Magic Number,Combot.IRCServices,IRC,D:\newReposJune17\uncled1023_Combot\IRCServices\IRC.cs,CheckConnection,The following statement contains a magic number: while (_TCP.Connected) {  	Thread.Sleep (5000);  	bool stillConnected = NetworkInterface.GetIsNetworkAvailable ();  	if (stillConnected) {  		Socket s = new Socket (AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.Tcp);  		try {  			s.Connect (IP' port);  		} catch {  			stillConnected = false;  		}  	}  	if (!stillConnected) {  		diconnectCount++;  	} else {  		diconnectCount = 0;  	}  	if (diconnectCount >= 5 && !disconnectActivated) {  		disconnectActivated = true;  		Task.Run (() => {  			Disconnect ();  		});  	}  }  
Magic Number,Combot.IRCServices,IRC,D:\newReposJune17\uncled1023_Combot\IRCServices\IRC.cs,CheckConnection,The following statement contains a magic number: Thread.Sleep (5000);  
Magic Number,Combot.IRCServices,IRC,D:\newReposJune17\uncled1023_Combot\IRCServices\IRC.cs,CheckConnection,The following statement contains a magic number: if (diconnectCount >= 5 && !disconnectActivated) {  	disconnectActivated = true;  	Task.Run (() => {  		Disconnect ();  	});  }  
Magic Number,Combot.IRCServices,IRC,D:\newReposJune17\uncled1023_Combot\IRCServices\IRC.cs,HandleReply,The following statement contains a magic number: if (e.GetType () == typeof(ServerReplyMessage)) {  	ServerReplyMessage msg = (ServerReplyMessage)e;  	switch (msg.ReplyCode) {  	// If we get a WHO response' we parse and add the nicks to the specified channel if they are not there already.  	case IRCReplyCode.RPL_WHOREPLY:  		ChannelRWLock.EnterWriteLock ();  		string[] msgSplit = msg.Message.Split (new char[] {  			' '  		}' StringSplitOptions.RemoveEmptyEntries);  		if (msgSplit.GetUpperBound (0) > 0) {  			string target = msgSplit [0];  			if (target.StartsWith ("&") || target.StartsWith ("#")) {  				if (msgSplit.GetUpperBound (0) >= 7) {  					string nickname = msgSplit [4];  					string realname = msgSplit [7];  					string username = msgSplit [1];  					string host = msgSplit [2];  					string modeString = msgSplit [5];  					Channel channel = Channels.Find (chan => chan.Name == target);  					if (channel != null) {  						Nick nick = channel.GetNick (nickname);  						bool nickFound = true;  						if (nick == null) {  							nickFound = false;  							nick = new Nick ();  						}  						nick.Nickname = nickname;  						nick.Host = host;  						nick.Realname = realname;  						nick.Username = username;  						nick.Modes = new List<UserMode> ();  						nick.Privileges = new List<PrivilegeMode> ();  						char[] modeArr = modeString.ToCharArray ();  						for (int i = 1; i <= modeArr.GetUpperBound (0); i++) {  							if (PrivilegeMapping.ContainsKey (modeArr [i].ToString ())) {  								nick.Privileges.Add (PrivilegeMapping [modeArr [i].ToString ()]);  							} else if (modeArr [i].ToString () == "*") {  								nick.Modes.Add (UserMode.o);  							} else {  								UserMode foundMode;  								bool valid = Enum.TryParse (modeArr [i].ToString ()' false' out foundMode);  								if (valid) {  									nick.Modes.Add (foundMode);  								}  							}  						}  						if (!nickFound) {  							channel.AddNick (nick);  						}  					}  				}  			}  		}  		ChannelRWLock.ExitWriteLock ();  		break;  	// On a topic reply' update the channel's topic  	case IRCReplyCode.RPL_TOPIC:  		ChannelRWLock.EnterWriteLock ();  		string[] topicSplit = msg.Message.Split (new char[] {  			' '  		}' StringSplitOptions.RemoveEmptyEntries);  		if (topicSplit.GetUpperBound (0) > 0) {  			string topicChan = topicSplit [0];  			Channel topicChannel = Channels.Find (chan => chan.Name == topicChan);  			if (topicChannel != null) {  				topicChannel.Topic = topicSplit [1].Remove (0' 1);  			}  		}  		ChannelRWLock.ExitWriteLock ();  		break;  	default:  		break;  	}  } else {  	ServerErrorMessage msg = (ServerErrorMessage)e;  }  
Magic Number,Combot.IRCServices,IRC,D:\newReposJune17\uncled1023_Combot\IRCServices\IRC.cs,HandleReply,The following statement contains a magic number: if (e.GetType () == typeof(ServerReplyMessage)) {  	ServerReplyMessage msg = (ServerReplyMessage)e;  	switch (msg.ReplyCode) {  	// If we get a WHO response' we parse and add the nicks to the specified channel if they are not there already.  	case IRCReplyCode.RPL_WHOREPLY:  		ChannelRWLock.EnterWriteLock ();  		string[] msgSplit = msg.Message.Split (new char[] {  			' '  		}' StringSplitOptions.RemoveEmptyEntries);  		if (msgSplit.GetUpperBound (0) > 0) {  			string target = msgSplit [0];  			if (target.StartsWith ("&") || target.StartsWith ("#")) {  				if (msgSplit.GetUpperBound (0) >= 7) {  					string nickname = msgSplit [4];  					string realname = msgSplit [7];  					string username = msgSplit [1];  					string host = msgSplit [2];  					string modeString = msgSplit [5];  					Channel channel = Channels.Find (chan => chan.Name == target);  					if (channel != null) {  						Nick nick = channel.GetNick (nickname);  						bool nickFound = true;  						if (nick == null) {  							nickFound = false;  							nick = new Nick ();  						}  						nick.Nickname = nickname;  						nick.Host = host;  						nick.Realname = realname;  						nick.Username = username;  						nick.Modes = new List<UserMode> ();  						nick.Privileges = new List<PrivilegeMode> ();  						char[] modeArr = modeString.ToCharArray ();  						for (int i = 1; i <= modeArr.GetUpperBound (0); i++) {  							if (PrivilegeMapping.ContainsKey (modeArr [i].ToString ())) {  								nick.Privileges.Add (PrivilegeMapping [modeArr [i].ToString ()]);  							} else if (modeArr [i].ToString () == "*") {  								nick.Modes.Add (UserMode.o);  							} else {  								UserMode foundMode;  								bool valid = Enum.TryParse (modeArr [i].ToString ()' false' out foundMode);  								if (valid) {  									nick.Modes.Add (foundMode);  								}  							}  						}  						if (!nickFound) {  							channel.AddNick (nick);  						}  					}  				}  			}  		}  		ChannelRWLock.ExitWriteLock ();  		break;  	// On a topic reply' update the channel's topic  	case IRCReplyCode.RPL_TOPIC:  		ChannelRWLock.EnterWriteLock ();  		string[] topicSplit = msg.Message.Split (new char[] {  			' '  		}' StringSplitOptions.RemoveEmptyEntries);  		if (topicSplit.GetUpperBound (0) > 0) {  			string topicChan = topicSplit [0];  			Channel topicChannel = Channels.Find (chan => chan.Name == topicChan);  			if (topicChannel != null) {  				topicChannel.Topic = topicSplit [1].Remove (0' 1);  			}  		}  		ChannelRWLock.ExitWriteLock ();  		break;  	default:  		break;  	}  } else {  	ServerErrorMessage msg = (ServerErrorMessage)e;  }  
Magic Number,Combot.IRCServices,IRC,D:\newReposJune17\uncled1023_Combot\IRCServices\IRC.cs,HandleReply,The following statement contains a magic number: if (e.GetType () == typeof(ServerReplyMessage)) {  	ServerReplyMessage msg = (ServerReplyMessage)e;  	switch (msg.ReplyCode) {  	// If we get a WHO response' we parse and add the nicks to the specified channel if they are not there already.  	case IRCReplyCode.RPL_WHOREPLY:  		ChannelRWLock.EnterWriteLock ();  		string[] msgSplit = msg.Message.Split (new char[] {  			' '  		}' StringSplitOptions.RemoveEmptyEntries);  		if (msgSplit.GetUpperBound (0) > 0) {  			string target = msgSplit [0];  			if (target.StartsWith ("&") || target.StartsWith ("#")) {  				if (msgSplit.GetUpperBound (0) >= 7) {  					string nickname = msgSplit [4];  					string realname = msgSplit [7];  					string username = msgSplit [1];  					string host = msgSplit [2];  					string modeString = msgSplit [5];  					Channel channel = Channels.Find (chan => chan.Name == target);  					if (channel != null) {  						Nick nick = channel.GetNick (nickname);  						bool nickFound = true;  						if (nick == null) {  							nickFound = false;  							nick = new Nick ();  						}  						nick.Nickname = nickname;  						nick.Host = host;  						nick.Realname = realname;  						nick.Username = username;  						nick.Modes = new List<UserMode> ();  						nick.Privileges = new List<PrivilegeMode> ();  						char[] modeArr = modeString.ToCharArray ();  						for (int i = 1; i <= modeArr.GetUpperBound (0); i++) {  							if (PrivilegeMapping.ContainsKey (modeArr [i].ToString ())) {  								nick.Privileges.Add (PrivilegeMapping [modeArr [i].ToString ()]);  							} else if (modeArr [i].ToString () == "*") {  								nick.Modes.Add (UserMode.o);  							} else {  								UserMode foundMode;  								bool valid = Enum.TryParse (modeArr [i].ToString ()' false' out foundMode);  								if (valid) {  									nick.Modes.Add (foundMode);  								}  							}  						}  						if (!nickFound) {  							channel.AddNick (nick);  						}  					}  				}  			}  		}  		ChannelRWLock.ExitWriteLock ();  		break;  	// On a topic reply' update the channel's topic  	case IRCReplyCode.RPL_TOPIC:  		ChannelRWLock.EnterWriteLock ();  		string[] topicSplit = msg.Message.Split (new char[] {  			' '  		}' StringSplitOptions.RemoveEmptyEntries);  		if (topicSplit.GetUpperBound (0) > 0) {  			string topicChan = topicSplit [0];  			Channel topicChannel = Channels.Find (chan => chan.Name == topicChan);  			if (topicChannel != null) {  				topicChannel.Topic = topicSplit [1].Remove (0' 1);  			}  		}  		ChannelRWLock.ExitWriteLock ();  		break;  	default:  		break;  	}  } else {  	ServerErrorMessage msg = (ServerErrorMessage)e;  }  
Magic Number,Combot.IRCServices,IRC,D:\newReposJune17\uncled1023_Combot\IRCServices\IRC.cs,HandleReply,The following statement contains a magic number: if (e.GetType () == typeof(ServerReplyMessage)) {  	ServerReplyMessage msg = (ServerReplyMessage)e;  	switch (msg.ReplyCode) {  	// If we get a WHO response' we parse and add the nicks to the specified channel if they are not there already.  	case IRCReplyCode.RPL_WHOREPLY:  		ChannelRWLock.EnterWriteLock ();  		string[] msgSplit = msg.Message.Split (new char[] {  			' '  		}' StringSplitOptions.RemoveEmptyEntries);  		if (msgSplit.GetUpperBound (0) > 0) {  			string target = msgSplit [0];  			if (target.StartsWith ("&") || target.StartsWith ("#")) {  				if (msgSplit.GetUpperBound (0) >= 7) {  					string nickname = msgSplit [4];  					string realname = msgSplit [7];  					string username = msgSplit [1];  					string host = msgSplit [2];  					string modeString = msgSplit [5];  					Channel channel = Channels.Find (chan => chan.Name == target);  					if (channel != null) {  						Nick nick = channel.GetNick (nickname);  						bool nickFound = true;  						if (nick == null) {  							nickFound = false;  							nick = new Nick ();  						}  						nick.Nickname = nickname;  						nick.Host = host;  						nick.Realname = realname;  						nick.Username = username;  						nick.Modes = new List<UserMode> ();  						nick.Privileges = new List<PrivilegeMode> ();  						char[] modeArr = modeString.ToCharArray ();  						for (int i = 1; i <= modeArr.GetUpperBound (0); i++) {  							if (PrivilegeMapping.ContainsKey (modeArr [i].ToString ())) {  								nick.Privileges.Add (PrivilegeMapping [modeArr [i].ToString ()]);  							} else if (modeArr [i].ToString () == "*") {  								nick.Modes.Add (UserMode.o);  							} else {  								UserMode foundMode;  								bool valid = Enum.TryParse (modeArr [i].ToString ()' false' out foundMode);  								if (valid) {  									nick.Modes.Add (foundMode);  								}  							}  						}  						if (!nickFound) {  							channel.AddNick (nick);  						}  					}  				}  			}  		}  		ChannelRWLock.ExitWriteLock ();  		break;  	// On a topic reply' update the channel's topic  	case IRCReplyCode.RPL_TOPIC:  		ChannelRWLock.EnterWriteLock ();  		string[] topicSplit = msg.Message.Split (new char[] {  			' '  		}' StringSplitOptions.RemoveEmptyEntries);  		if (topicSplit.GetUpperBound (0) > 0) {  			string topicChan = topicSplit [0];  			Channel topicChannel = Channels.Find (chan => chan.Name == topicChan);  			if (topicChannel != null) {  				topicChannel.Topic = topicSplit [1].Remove (0' 1);  			}  		}  		ChannelRWLock.ExitWriteLock ();  		break;  	default:  		break;  	}  } else {  	ServerErrorMessage msg = (ServerErrorMessage)e;  }  
Magic Number,Combot.IRCServices,IRC,D:\newReposJune17\uncled1023_Combot\IRCServices\IRC.cs,HandleReply,The following statement contains a magic number: if (e.GetType () == typeof(ServerReplyMessage)) {  	ServerReplyMessage msg = (ServerReplyMessage)e;  	switch (msg.ReplyCode) {  	// If we get a WHO response' we parse and add the nicks to the specified channel if they are not there already.  	case IRCReplyCode.RPL_WHOREPLY:  		ChannelRWLock.EnterWriteLock ();  		string[] msgSplit = msg.Message.Split (new char[] {  			' '  		}' StringSplitOptions.RemoveEmptyEntries);  		if (msgSplit.GetUpperBound (0) > 0) {  			string target = msgSplit [0];  			if (target.StartsWith ("&") || target.StartsWith ("#")) {  				if (msgSplit.GetUpperBound (0) >= 7) {  					string nickname = msgSplit [4];  					string realname = msgSplit [7];  					string username = msgSplit [1];  					string host = msgSplit [2];  					string modeString = msgSplit [5];  					Channel channel = Channels.Find (chan => chan.Name == target);  					if (channel != null) {  						Nick nick = channel.GetNick (nickname);  						bool nickFound = true;  						if (nick == null) {  							nickFound = false;  							nick = new Nick ();  						}  						nick.Nickname = nickname;  						nick.Host = host;  						nick.Realname = realname;  						nick.Username = username;  						nick.Modes = new List<UserMode> ();  						nick.Privileges = new List<PrivilegeMode> ();  						char[] modeArr = modeString.ToCharArray ();  						for (int i = 1; i <= modeArr.GetUpperBound (0); i++) {  							if (PrivilegeMapping.ContainsKey (modeArr [i].ToString ())) {  								nick.Privileges.Add (PrivilegeMapping [modeArr [i].ToString ()]);  							} else if (modeArr [i].ToString () == "*") {  								nick.Modes.Add (UserMode.o);  							} else {  								UserMode foundMode;  								bool valid = Enum.TryParse (modeArr [i].ToString ()' false' out foundMode);  								if (valid) {  									nick.Modes.Add (foundMode);  								}  							}  						}  						if (!nickFound) {  							channel.AddNick (nick);  						}  					}  				}  			}  		}  		ChannelRWLock.ExitWriteLock ();  		break;  	// On a topic reply' update the channel's topic  	case IRCReplyCode.RPL_TOPIC:  		ChannelRWLock.EnterWriteLock ();  		string[] topicSplit = msg.Message.Split (new char[] {  			' '  		}' StringSplitOptions.RemoveEmptyEntries);  		if (topicSplit.GetUpperBound (0) > 0) {  			string topicChan = topicSplit [0];  			Channel topicChannel = Channels.Find (chan => chan.Name == topicChan);  			if (topicChannel != null) {  				topicChannel.Topic = topicSplit [1].Remove (0' 1);  			}  		}  		ChannelRWLock.ExitWriteLock ();  		break;  	default:  		break;  	}  } else {  	ServerErrorMessage msg = (ServerErrorMessage)e;  }  
Magic Number,Combot.IRCServices,IRC,D:\newReposJune17\uncled1023_Combot\IRCServices\IRC.cs,HandleReply,The following statement contains a magic number: switch (msg.ReplyCode) {  // If we get a WHO response' we parse and add the nicks to the specified channel if they are not there already.  case IRCReplyCode.RPL_WHOREPLY:  	ChannelRWLock.EnterWriteLock ();  	string[] msgSplit = msg.Message.Split (new char[] {  		' '  	}' StringSplitOptions.RemoveEmptyEntries);  	if (msgSplit.GetUpperBound (0) > 0) {  		string target = msgSplit [0];  		if (target.StartsWith ("&") || target.StartsWith ("#")) {  			if (msgSplit.GetUpperBound (0) >= 7) {  				string nickname = msgSplit [4];  				string realname = msgSplit [7];  				string username = msgSplit [1];  				string host = msgSplit [2];  				string modeString = msgSplit [5];  				Channel channel = Channels.Find (chan => chan.Name == target);  				if (channel != null) {  					Nick nick = channel.GetNick (nickname);  					bool nickFound = true;  					if (nick == null) {  						nickFound = false;  						nick = new Nick ();  					}  					nick.Nickname = nickname;  					nick.Host = host;  					nick.Realname = realname;  					nick.Username = username;  					nick.Modes = new List<UserMode> ();  					nick.Privileges = new List<PrivilegeMode> ();  					char[] modeArr = modeString.ToCharArray ();  					for (int i = 1; i <= modeArr.GetUpperBound (0); i++) {  						if (PrivilegeMapping.ContainsKey (modeArr [i].ToString ())) {  							nick.Privileges.Add (PrivilegeMapping [modeArr [i].ToString ()]);  						} else if (modeArr [i].ToString () == "*") {  							nick.Modes.Add (UserMode.o);  						} else {  							UserMode foundMode;  							bool valid = Enum.TryParse (modeArr [i].ToString ()' false' out foundMode);  							if (valid) {  								nick.Modes.Add (foundMode);  							}  						}  					}  					if (!nickFound) {  						channel.AddNick (nick);  					}  				}  			}  		}  	}  	ChannelRWLock.ExitWriteLock ();  	break;  // On a topic reply' update the channel's topic  case IRCReplyCode.RPL_TOPIC:  	ChannelRWLock.EnterWriteLock ();  	string[] topicSplit = msg.Message.Split (new char[] {  		' '  	}' StringSplitOptions.RemoveEmptyEntries);  	if (topicSplit.GetUpperBound (0) > 0) {  		string topicChan = topicSplit [0];  		Channel topicChannel = Channels.Find (chan => chan.Name == topicChan);  		if (topicChannel != null) {  			topicChannel.Topic = topicSplit [1].Remove (0' 1);  		}  	}  	ChannelRWLock.ExitWriteLock ();  	break;  default:  	break;  }  
Magic Number,Combot.IRCServices,IRC,D:\newReposJune17\uncled1023_Combot\IRCServices\IRC.cs,HandleReply,The following statement contains a magic number: switch (msg.ReplyCode) {  // If we get a WHO response' we parse and add the nicks to the specified channel if they are not there already.  case IRCReplyCode.RPL_WHOREPLY:  	ChannelRWLock.EnterWriteLock ();  	string[] msgSplit = msg.Message.Split (new char[] {  		' '  	}' StringSplitOptions.RemoveEmptyEntries);  	if (msgSplit.GetUpperBound (0) > 0) {  		string target = msgSplit [0];  		if (target.StartsWith ("&") || target.StartsWith ("#")) {  			if (msgSplit.GetUpperBound (0) >= 7) {  				string nickname = msgSplit [4];  				string realname = msgSplit [7];  				string username = msgSplit [1];  				string host = msgSplit [2];  				string modeString = msgSplit [5];  				Channel channel = Channels.Find (chan => chan.Name == target);  				if (channel != null) {  					Nick nick = channel.GetNick (nickname);  					bool nickFound = true;  					if (nick == null) {  						nickFound = false;  						nick = new Nick ();  					}  					nick.Nickname = nickname;  					nick.Host = host;  					nick.Realname = realname;  					nick.Username = username;  					nick.Modes = new List<UserMode> ();  					nick.Privileges = new List<PrivilegeMode> ();  					char[] modeArr = modeString.ToCharArray ();  					for (int i = 1; i <= modeArr.GetUpperBound (0); i++) {  						if (PrivilegeMapping.ContainsKey (modeArr [i].ToString ())) {  							nick.Privileges.Add (PrivilegeMapping [modeArr [i].ToString ()]);  						} else if (modeArr [i].ToString () == "*") {  							nick.Modes.Add (UserMode.o);  						} else {  							UserMode foundMode;  							bool valid = Enum.TryParse (modeArr [i].ToString ()' false' out foundMode);  							if (valid) {  								nick.Modes.Add (foundMode);  							}  						}  					}  					if (!nickFound) {  						channel.AddNick (nick);  					}  				}  			}  		}  	}  	ChannelRWLock.ExitWriteLock ();  	break;  // On a topic reply' update the channel's topic  case IRCReplyCode.RPL_TOPIC:  	ChannelRWLock.EnterWriteLock ();  	string[] topicSplit = msg.Message.Split (new char[] {  		' '  	}' StringSplitOptions.RemoveEmptyEntries);  	if (topicSplit.GetUpperBound (0) > 0) {  		string topicChan = topicSplit [0];  		Channel topicChannel = Channels.Find (chan => chan.Name == topicChan);  		if (topicChannel != null) {  			topicChannel.Topic = topicSplit [1].Remove (0' 1);  		}  	}  	ChannelRWLock.ExitWriteLock ();  	break;  default:  	break;  }  
Magic Number,Combot.IRCServices,IRC,D:\newReposJune17\uncled1023_Combot\IRCServices\IRC.cs,HandleReply,The following statement contains a magic number: switch (msg.ReplyCode) {  // If we get a WHO response' we parse and add the nicks to the specified channel if they are not there already.  case IRCReplyCode.RPL_WHOREPLY:  	ChannelRWLock.EnterWriteLock ();  	string[] msgSplit = msg.Message.Split (new char[] {  		' '  	}' StringSplitOptions.RemoveEmptyEntries);  	if (msgSplit.GetUpperBound (0) > 0) {  		string target = msgSplit [0];  		if (target.StartsWith ("&") || target.StartsWith ("#")) {  			if (msgSplit.GetUpperBound (0) >= 7) {  				string nickname = msgSplit [4];  				string realname = msgSplit [7];  				string username = msgSplit [1];  				string host = msgSplit [2];  				string modeString = msgSplit [5];  				Channel channel = Channels.Find (chan => chan.Name == target);  				if (channel != null) {  					Nick nick = channel.GetNick (nickname);  					bool nickFound = true;  					if (nick == null) {  						nickFound = false;  						nick = new Nick ();  					}  					nick.Nickname = nickname;  					nick.Host = host;  					nick.Realname = realname;  					nick.Username = username;  					nick.Modes = new List<UserMode> ();  					nick.Privileges = new List<PrivilegeMode> ();  					char[] modeArr = modeString.ToCharArray ();  					for (int i = 1; i <= modeArr.GetUpperBound (0); i++) {  						if (PrivilegeMapping.ContainsKey (modeArr [i].ToString ())) {  							nick.Privileges.Add (PrivilegeMapping [modeArr [i].ToString ()]);  						} else if (modeArr [i].ToString () == "*") {  							nick.Modes.Add (UserMode.o);  						} else {  							UserMode foundMode;  							bool valid = Enum.TryParse (modeArr [i].ToString ()' false' out foundMode);  							if (valid) {  								nick.Modes.Add (foundMode);  							}  						}  					}  					if (!nickFound) {  						channel.AddNick (nick);  					}  				}  			}  		}  	}  	ChannelRWLock.ExitWriteLock ();  	break;  // On a topic reply' update the channel's topic  case IRCReplyCode.RPL_TOPIC:  	ChannelRWLock.EnterWriteLock ();  	string[] topicSplit = msg.Message.Split (new char[] {  		' '  	}' StringSplitOptions.RemoveEmptyEntries);  	if (topicSplit.GetUpperBound (0) > 0) {  		string topicChan = topicSplit [0];  		Channel topicChannel = Channels.Find (chan => chan.Name == topicChan);  		if (topicChannel != null) {  			topicChannel.Topic = topicSplit [1].Remove (0' 1);  		}  	}  	ChannelRWLock.ExitWriteLock ();  	break;  default:  	break;  }  
Magic Number,Combot.IRCServices,IRC,D:\newReposJune17\uncled1023_Combot\IRCServices\IRC.cs,HandleReply,The following statement contains a magic number: switch (msg.ReplyCode) {  // If we get a WHO response' we parse and add the nicks to the specified channel if they are not there already.  case IRCReplyCode.RPL_WHOREPLY:  	ChannelRWLock.EnterWriteLock ();  	string[] msgSplit = msg.Message.Split (new char[] {  		' '  	}' StringSplitOptions.RemoveEmptyEntries);  	if (msgSplit.GetUpperBound (0) > 0) {  		string target = msgSplit [0];  		if (target.StartsWith ("&") || target.StartsWith ("#")) {  			if (msgSplit.GetUpperBound (0) >= 7) {  				string nickname = msgSplit [4];  				string realname = msgSplit [7];  				string username = msgSplit [1];  				string host = msgSplit [2];  				string modeString = msgSplit [5];  				Channel channel = Channels.Find (chan => chan.Name == target);  				if (channel != null) {  					Nick nick = channel.GetNick (nickname);  					bool nickFound = true;  					if (nick == null) {  						nickFound = false;  						nick = new Nick ();  					}  					nick.Nickname = nickname;  					nick.Host = host;  					nick.Realname = realname;  					nick.Username = username;  					nick.Modes = new List<UserMode> ();  					nick.Privileges = new List<PrivilegeMode> ();  					char[] modeArr = modeString.ToCharArray ();  					for (int i = 1; i <= modeArr.GetUpperBound (0); i++) {  						if (PrivilegeMapping.ContainsKey (modeArr [i].ToString ())) {  							nick.Privileges.Add (PrivilegeMapping [modeArr [i].ToString ()]);  						} else if (modeArr [i].ToString () == "*") {  							nick.Modes.Add (UserMode.o);  						} else {  							UserMode foundMode;  							bool valid = Enum.TryParse (modeArr [i].ToString ()' false' out foundMode);  							if (valid) {  								nick.Modes.Add (foundMode);  							}  						}  					}  					if (!nickFound) {  						channel.AddNick (nick);  					}  				}  			}  		}  	}  	ChannelRWLock.ExitWriteLock ();  	break;  // On a topic reply' update the channel's topic  case IRCReplyCode.RPL_TOPIC:  	ChannelRWLock.EnterWriteLock ();  	string[] topicSplit = msg.Message.Split (new char[] {  		' '  	}' StringSplitOptions.RemoveEmptyEntries);  	if (topicSplit.GetUpperBound (0) > 0) {  		string topicChan = topicSplit [0];  		Channel topicChannel = Channels.Find (chan => chan.Name == topicChan);  		if (topicChannel != null) {  			topicChannel.Topic = topicSplit [1].Remove (0' 1);  		}  	}  	ChannelRWLock.ExitWriteLock ();  	break;  default:  	break;  }  
Magic Number,Combot.IRCServices,IRC,D:\newReposJune17\uncled1023_Combot\IRCServices\IRC.cs,HandleReply,The following statement contains a magic number: switch (msg.ReplyCode) {  // If we get a WHO response' we parse and add the nicks to the specified channel if they are not there already.  case IRCReplyCode.RPL_WHOREPLY:  	ChannelRWLock.EnterWriteLock ();  	string[] msgSplit = msg.Message.Split (new char[] {  		' '  	}' StringSplitOptions.RemoveEmptyEntries);  	if (msgSplit.GetUpperBound (0) > 0) {  		string target = msgSplit [0];  		if (target.StartsWith ("&") || target.StartsWith ("#")) {  			if (msgSplit.GetUpperBound (0) >= 7) {  				string nickname = msgSplit [4];  				string realname = msgSplit [7];  				string username = msgSplit [1];  				string host = msgSplit [2];  				string modeString = msgSplit [5];  				Channel channel = Channels.Find (chan => chan.Name == target);  				if (channel != null) {  					Nick nick = channel.GetNick (nickname);  					bool nickFound = true;  					if (nick == null) {  						nickFound = false;  						nick = new Nick ();  					}  					nick.Nickname = nickname;  					nick.Host = host;  					nick.Realname = realname;  					nick.Username = username;  					nick.Modes = new List<UserMode> ();  					nick.Privileges = new List<PrivilegeMode> ();  					char[] modeArr = modeString.ToCharArray ();  					for (int i = 1; i <= modeArr.GetUpperBound (0); i++) {  						if (PrivilegeMapping.ContainsKey (modeArr [i].ToString ())) {  							nick.Privileges.Add (PrivilegeMapping [modeArr [i].ToString ()]);  						} else if (modeArr [i].ToString () == "*") {  							nick.Modes.Add (UserMode.o);  						} else {  							UserMode foundMode;  							bool valid = Enum.TryParse (modeArr [i].ToString ()' false' out foundMode);  							if (valid) {  								nick.Modes.Add (foundMode);  							}  						}  					}  					if (!nickFound) {  						channel.AddNick (nick);  					}  				}  			}  		}  	}  	ChannelRWLock.ExitWriteLock ();  	break;  // On a topic reply' update the channel's topic  case IRCReplyCode.RPL_TOPIC:  	ChannelRWLock.EnterWriteLock ();  	string[] topicSplit = msg.Message.Split (new char[] {  		' '  	}' StringSplitOptions.RemoveEmptyEntries);  	if (topicSplit.GetUpperBound (0) > 0) {  		string topicChan = topicSplit [0];  		Channel topicChannel = Channels.Find (chan => chan.Name == topicChan);  		if (topicChannel != null) {  			topicChannel.Topic = topicSplit [1].Remove (0' 1);  		}  	}  	ChannelRWLock.ExitWriteLock ();  	break;  default:  	break;  }  
Magic Number,Combot.IRCServices,IRC,D:\newReposJune17\uncled1023_Combot\IRCServices\IRC.cs,HandleReply,The following statement contains a magic number: if (msgSplit.GetUpperBound (0) > 0) {  	string target = msgSplit [0];  	if (target.StartsWith ("&") || target.StartsWith ("#")) {  		if (msgSplit.GetUpperBound (0) >= 7) {  			string nickname = msgSplit [4];  			string realname = msgSplit [7];  			string username = msgSplit [1];  			string host = msgSplit [2];  			string modeString = msgSplit [5];  			Channel channel = Channels.Find (chan => chan.Name == target);  			if (channel != null) {  				Nick nick = channel.GetNick (nickname);  				bool nickFound = true;  				if (nick == null) {  					nickFound = false;  					nick = new Nick ();  				}  				nick.Nickname = nickname;  				nick.Host = host;  				nick.Realname = realname;  				nick.Username = username;  				nick.Modes = new List<UserMode> ();  				nick.Privileges = new List<PrivilegeMode> ();  				char[] modeArr = modeString.ToCharArray ();  				for (int i = 1; i <= modeArr.GetUpperBound (0); i++) {  					if (PrivilegeMapping.ContainsKey (modeArr [i].ToString ())) {  						nick.Privileges.Add (PrivilegeMapping [modeArr [i].ToString ()]);  					} else if (modeArr [i].ToString () == "*") {  						nick.Modes.Add (UserMode.o);  					} else {  						UserMode foundMode;  						bool valid = Enum.TryParse (modeArr [i].ToString ()' false' out foundMode);  						if (valid) {  							nick.Modes.Add (foundMode);  						}  					}  				}  				if (!nickFound) {  					channel.AddNick (nick);  				}  			}  		}  	}  }  
Magic Number,Combot.IRCServices,IRC,D:\newReposJune17\uncled1023_Combot\IRCServices\IRC.cs,HandleReply,The following statement contains a magic number: if (msgSplit.GetUpperBound (0) > 0) {  	string target = msgSplit [0];  	if (target.StartsWith ("&") || target.StartsWith ("#")) {  		if (msgSplit.GetUpperBound (0) >= 7) {  			string nickname = msgSplit [4];  			string realname = msgSplit [7];  			string username = msgSplit [1];  			string host = msgSplit [2];  			string modeString = msgSplit [5];  			Channel channel = Channels.Find (chan => chan.Name == target);  			if (channel != null) {  				Nick nick = channel.GetNick (nickname);  				bool nickFound = true;  				if (nick == null) {  					nickFound = false;  					nick = new Nick ();  				}  				nick.Nickname = nickname;  				nick.Host = host;  				nick.Realname = realname;  				nick.Username = username;  				nick.Modes = new List<UserMode> ();  				nick.Privileges = new List<PrivilegeMode> ();  				char[] modeArr = modeString.ToCharArray ();  				for (int i = 1; i <= modeArr.GetUpperBound (0); i++) {  					if (PrivilegeMapping.ContainsKey (modeArr [i].ToString ())) {  						nick.Privileges.Add (PrivilegeMapping [modeArr [i].ToString ()]);  					} else if (modeArr [i].ToString () == "*") {  						nick.Modes.Add (UserMode.o);  					} else {  						UserMode foundMode;  						bool valid = Enum.TryParse (modeArr [i].ToString ()' false' out foundMode);  						if (valid) {  							nick.Modes.Add (foundMode);  						}  					}  				}  				if (!nickFound) {  					channel.AddNick (nick);  				}  			}  		}  	}  }  
Magic Number,Combot.IRCServices,IRC,D:\newReposJune17\uncled1023_Combot\IRCServices\IRC.cs,HandleReply,The following statement contains a magic number: if (msgSplit.GetUpperBound (0) > 0) {  	string target = msgSplit [0];  	if (target.StartsWith ("&") || target.StartsWith ("#")) {  		if (msgSplit.GetUpperBound (0) >= 7) {  			string nickname = msgSplit [4];  			string realname = msgSplit [7];  			string username = msgSplit [1];  			string host = msgSplit [2];  			string modeString = msgSplit [5];  			Channel channel = Channels.Find (chan => chan.Name == target);  			if (channel != null) {  				Nick nick = channel.GetNick (nickname);  				bool nickFound = true;  				if (nick == null) {  					nickFound = false;  					nick = new Nick ();  				}  				nick.Nickname = nickname;  				nick.Host = host;  				nick.Realname = realname;  				nick.Username = username;  				nick.Modes = new List<UserMode> ();  				nick.Privileges = new List<PrivilegeMode> ();  				char[] modeArr = modeString.ToCharArray ();  				for (int i = 1; i <= modeArr.GetUpperBound (0); i++) {  					if (PrivilegeMapping.ContainsKey (modeArr [i].ToString ())) {  						nick.Privileges.Add (PrivilegeMapping [modeArr [i].ToString ()]);  					} else if (modeArr [i].ToString () == "*") {  						nick.Modes.Add (UserMode.o);  					} else {  						UserMode foundMode;  						bool valid = Enum.TryParse (modeArr [i].ToString ()' false' out foundMode);  						if (valid) {  							nick.Modes.Add (foundMode);  						}  					}  				}  				if (!nickFound) {  					channel.AddNick (nick);  				}  			}  		}  	}  }  
Magic Number,Combot.IRCServices,IRC,D:\newReposJune17\uncled1023_Combot\IRCServices\IRC.cs,HandleReply,The following statement contains a magic number: if (msgSplit.GetUpperBound (0) > 0) {  	string target = msgSplit [0];  	if (target.StartsWith ("&") || target.StartsWith ("#")) {  		if (msgSplit.GetUpperBound (0) >= 7) {  			string nickname = msgSplit [4];  			string realname = msgSplit [7];  			string username = msgSplit [1];  			string host = msgSplit [2];  			string modeString = msgSplit [5];  			Channel channel = Channels.Find (chan => chan.Name == target);  			if (channel != null) {  				Nick nick = channel.GetNick (nickname);  				bool nickFound = true;  				if (nick == null) {  					nickFound = false;  					nick = new Nick ();  				}  				nick.Nickname = nickname;  				nick.Host = host;  				nick.Realname = realname;  				nick.Username = username;  				nick.Modes = new List<UserMode> ();  				nick.Privileges = new List<PrivilegeMode> ();  				char[] modeArr = modeString.ToCharArray ();  				for (int i = 1; i <= modeArr.GetUpperBound (0); i++) {  					if (PrivilegeMapping.ContainsKey (modeArr [i].ToString ())) {  						nick.Privileges.Add (PrivilegeMapping [modeArr [i].ToString ()]);  					} else if (modeArr [i].ToString () == "*") {  						nick.Modes.Add (UserMode.o);  					} else {  						UserMode foundMode;  						bool valid = Enum.TryParse (modeArr [i].ToString ()' false' out foundMode);  						if (valid) {  							nick.Modes.Add (foundMode);  						}  					}  				}  				if (!nickFound) {  					channel.AddNick (nick);  				}  			}  		}  	}  }  
Magic Number,Combot.IRCServices,IRC,D:\newReposJune17\uncled1023_Combot\IRCServices\IRC.cs,HandleReply,The following statement contains a magic number: if (msgSplit.GetUpperBound (0) > 0) {  	string target = msgSplit [0];  	if (target.StartsWith ("&") || target.StartsWith ("#")) {  		if (msgSplit.GetUpperBound (0) >= 7) {  			string nickname = msgSplit [4];  			string realname = msgSplit [7];  			string username = msgSplit [1];  			string host = msgSplit [2];  			string modeString = msgSplit [5];  			Channel channel = Channels.Find (chan => chan.Name == target);  			if (channel != null) {  				Nick nick = channel.GetNick (nickname);  				bool nickFound = true;  				if (nick == null) {  					nickFound = false;  					nick = new Nick ();  				}  				nick.Nickname = nickname;  				nick.Host = host;  				nick.Realname = realname;  				nick.Username = username;  				nick.Modes = new List<UserMode> ();  				nick.Privileges = new List<PrivilegeMode> ();  				char[] modeArr = modeString.ToCharArray ();  				for (int i = 1; i <= modeArr.GetUpperBound (0); i++) {  					if (PrivilegeMapping.ContainsKey (modeArr [i].ToString ())) {  						nick.Privileges.Add (PrivilegeMapping [modeArr [i].ToString ()]);  					} else if (modeArr [i].ToString () == "*") {  						nick.Modes.Add (UserMode.o);  					} else {  						UserMode foundMode;  						bool valid = Enum.TryParse (modeArr [i].ToString ()' false' out foundMode);  						if (valid) {  							nick.Modes.Add (foundMode);  						}  					}  				}  				if (!nickFound) {  					channel.AddNick (nick);  				}  			}  		}  	}  }  
Magic Number,Combot.IRCServices,IRC,D:\newReposJune17\uncled1023_Combot\IRCServices\IRC.cs,HandleReply,The following statement contains a magic number: if (target.StartsWith ("&") || target.StartsWith ("#")) {  	if (msgSplit.GetUpperBound (0) >= 7) {  		string nickname = msgSplit [4];  		string realname = msgSplit [7];  		string username = msgSplit [1];  		string host = msgSplit [2];  		string modeString = msgSplit [5];  		Channel channel = Channels.Find (chan => chan.Name == target);  		if (channel != null) {  			Nick nick = channel.GetNick (nickname);  			bool nickFound = true;  			if (nick == null) {  				nickFound = false;  				nick = new Nick ();  			}  			nick.Nickname = nickname;  			nick.Host = host;  			nick.Realname = realname;  			nick.Username = username;  			nick.Modes = new List<UserMode> ();  			nick.Privileges = new List<PrivilegeMode> ();  			char[] modeArr = modeString.ToCharArray ();  			for (int i = 1; i <= modeArr.GetUpperBound (0); i++) {  				if (PrivilegeMapping.ContainsKey (modeArr [i].ToString ())) {  					nick.Privileges.Add (PrivilegeMapping [modeArr [i].ToString ()]);  				} else if (modeArr [i].ToString () == "*") {  					nick.Modes.Add (UserMode.o);  				} else {  					UserMode foundMode;  					bool valid = Enum.TryParse (modeArr [i].ToString ()' false' out foundMode);  					if (valid) {  						nick.Modes.Add (foundMode);  					}  				}  			}  			if (!nickFound) {  				channel.AddNick (nick);  			}  		}  	}  }  
Magic Number,Combot.IRCServices,IRC,D:\newReposJune17\uncled1023_Combot\IRCServices\IRC.cs,HandleReply,The following statement contains a magic number: if (target.StartsWith ("&") || target.StartsWith ("#")) {  	if (msgSplit.GetUpperBound (0) >= 7) {  		string nickname = msgSplit [4];  		string realname = msgSplit [7];  		string username = msgSplit [1];  		string host = msgSplit [2];  		string modeString = msgSplit [5];  		Channel channel = Channels.Find (chan => chan.Name == target);  		if (channel != null) {  			Nick nick = channel.GetNick (nickname);  			bool nickFound = true;  			if (nick == null) {  				nickFound = false;  				nick = new Nick ();  			}  			nick.Nickname = nickname;  			nick.Host = host;  			nick.Realname = realname;  			nick.Username = username;  			nick.Modes = new List<UserMode> ();  			nick.Privileges = new List<PrivilegeMode> ();  			char[] modeArr = modeString.ToCharArray ();  			for (int i = 1; i <= modeArr.GetUpperBound (0); i++) {  				if (PrivilegeMapping.ContainsKey (modeArr [i].ToString ())) {  					nick.Privileges.Add (PrivilegeMapping [modeArr [i].ToString ()]);  				} else if (modeArr [i].ToString () == "*") {  					nick.Modes.Add (UserMode.o);  				} else {  					UserMode foundMode;  					bool valid = Enum.TryParse (modeArr [i].ToString ()' false' out foundMode);  					if (valid) {  						nick.Modes.Add (foundMode);  					}  				}  			}  			if (!nickFound) {  				channel.AddNick (nick);  			}  		}  	}  }  
Magic Number,Combot.IRCServices,IRC,D:\newReposJune17\uncled1023_Combot\IRCServices\IRC.cs,HandleReply,The following statement contains a magic number: if (target.StartsWith ("&") || target.StartsWith ("#")) {  	if (msgSplit.GetUpperBound (0) >= 7) {  		string nickname = msgSplit [4];  		string realname = msgSplit [7];  		string username = msgSplit [1];  		string host = msgSplit [2];  		string modeString = msgSplit [5];  		Channel channel = Channels.Find (chan => chan.Name == target);  		if (channel != null) {  			Nick nick = channel.GetNick (nickname);  			bool nickFound = true;  			if (nick == null) {  				nickFound = false;  				nick = new Nick ();  			}  			nick.Nickname = nickname;  			nick.Host = host;  			nick.Realname = realname;  			nick.Username = username;  			nick.Modes = new List<UserMode> ();  			nick.Privileges = new List<PrivilegeMode> ();  			char[] modeArr = modeString.ToCharArray ();  			for (int i = 1; i <= modeArr.GetUpperBound (0); i++) {  				if (PrivilegeMapping.ContainsKey (modeArr [i].ToString ())) {  					nick.Privileges.Add (PrivilegeMapping [modeArr [i].ToString ()]);  				} else if (modeArr [i].ToString () == "*") {  					nick.Modes.Add (UserMode.o);  				} else {  					UserMode foundMode;  					bool valid = Enum.TryParse (modeArr [i].ToString ()' false' out foundMode);  					if (valid) {  						nick.Modes.Add (foundMode);  					}  				}  			}  			if (!nickFound) {  				channel.AddNick (nick);  			}  		}  	}  }  
Magic Number,Combot.IRCServices,IRC,D:\newReposJune17\uncled1023_Combot\IRCServices\IRC.cs,HandleReply,The following statement contains a magic number: if (target.StartsWith ("&") || target.StartsWith ("#")) {  	if (msgSplit.GetUpperBound (0) >= 7) {  		string nickname = msgSplit [4];  		string realname = msgSplit [7];  		string username = msgSplit [1];  		string host = msgSplit [2];  		string modeString = msgSplit [5];  		Channel channel = Channels.Find (chan => chan.Name == target);  		if (channel != null) {  			Nick nick = channel.GetNick (nickname);  			bool nickFound = true;  			if (nick == null) {  				nickFound = false;  				nick = new Nick ();  			}  			nick.Nickname = nickname;  			nick.Host = host;  			nick.Realname = realname;  			nick.Username = username;  			nick.Modes = new List<UserMode> ();  			nick.Privileges = new List<PrivilegeMode> ();  			char[] modeArr = modeString.ToCharArray ();  			for (int i = 1; i <= modeArr.GetUpperBound (0); i++) {  				if (PrivilegeMapping.ContainsKey (modeArr [i].ToString ())) {  					nick.Privileges.Add (PrivilegeMapping [modeArr [i].ToString ()]);  				} else if (modeArr [i].ToString () == "*") {  					nick.Modes.Add (UserMode.o);  				} else {  					UserMode foundMode;  					bool valid = Enum.TryParse (modeArr [i].ToString ()' false' out foundMode);  					if (valid) {  						nick.Modes.Add (foundMode);  					}  				}  			}  			if (!nickFound) {  				channel.AddNick (nick);  			}  		}  	}  }  
Magic Number,Combot.IRCServices,IRC,D:\newReposJune17\uncled1023_Combot\IRCServices\IRC.cs,HandleReply,The following statement contains a magic number: if (target.StartsWith ("&") || target.StartsWith ("#")) {  	if (msgSplit.GetUpperBound (0) >= 7) {  		string nickname = msgSplit [4];  		string realname = msgSplit [7];  		string username = msgSplit [1];  		string host = msgSplit [2];  		string modeString = msgSplit [5];  		Channel channel = Channels.Find (chan => chan.Name == target);  		if (channel != null) {  			Nick nick = channel.GetNick (nickname);  			bool nickFound = true;  			if (nick == null) {  				nickFound = false;  				nick = new Nick ();  			}  			nick.Nickname = nickname;  			nick.Host = host;  			nick.Realname = realname;  			nick.Username = username;  			nick.Modes = new List<UserMode> ();  			nick.Privileges = new List<PrivilegeMode> ();  			char[] modeArr = modeString.ToCharArray ();  			for (int i = 1; i <= modeArr.GetUpperBound (0); i++) {  				if (PrivilegeMapping.ContainsKey (modeArr [i].ToString ())) {  					nick.Privileges.Add (PrivilegeMapping [modeArr [i].ToString ()]);  				} else if (modeArr [i].ToString () == "*") {  					nick.Modes.Add (UserMode.o);  				} else {  					UserMode foundMode;  					bool valid = Enum.TryParse (modeArr [i].ToString ()' false' out foundMode);  					if (valid) {  						nick.Modes.Add (foundMode);  					}  				}  			}  			if (!nickFound) {  				channel.AddNick (nick);  			}  		}  	}  }  
Magic Number,Combot.IRCServices,IRC,D:\newReposJune17\uncled1023_Combot\IRCServices\IRC.cs,HandleReply,The following statement contains a magic number: if (msgSplit.GetUpperBound (0) >= 7) {  	string nickname = msgSplit [4];  	string realname = msgSplit [7];  	string username = msgSplit [1];  	string host = msgSplit [2];  	string modeString = msgSplit [5];  	Channel channel = Channels.Find (chan => chan.Name == target);  	if (channel != null) {  		Nick nick = channel.GetNick (nickname);  		bool nickFound = true;  		if (nick == null) {  			nickFound = false;  			nick = new Nick ();  		}  		nick.Nickname = nickname;  		nick.Host = host;  		nick.Realname = realname;  		nick.Username = username;  		nick.Modes = new List<UserMode> ();  		nick.Privileges = new List<PrivilegeMode> ();  		char[] modeArr = modeString.ToCharArray ();  		for (int i = 1; i <= modeArr.GetUpperBound (0); i++) {  			if (PrivilegeMapping.ContainsKey (modeArr [i].ToString ())) {  				nick.Privileges.Add (PrivilegeMapping [modeArr [i].ToString ()]);  			} else if (modeArr [i].ToString () == "*") {  				nick.Modes.Add (UserMode.o);  			} else {  				UserMode foundMode;  				bool valid = Enum.TryParse (modeArr [i].ToString ()' false' out foundMode);  				if (valid) {  					nick.Modes.Add (foundMode);  				}  			}  		}  		if (!nickFound) {  			channel.AddNick (nick);  		}  	}  }  
Magic Number,Combot.IRCServices,IRC,D:\newReposJune17\uncled1023_Combot\IRCServices\IRC.cs,HandleReply,The following statement contains a magic number: if (msgSplit.GetUpperBound (0) >= 7) {  	string nickname = msgSplit [4];  	string realname = msgSplit [7];  	string username = msgSplit [1];  	string host = msgSplit [2];  	string modeString = msgSplit [5];  	Channel channel = Channels.Find (chan => chan.Name == target);  	if (channel != null) {  		Nick nick = channel.GetNick (nickname);  		bool nickFound = true;  		if (nick == null) {  			nickFound = false;  			nick = new Nick ();  		}  		nick.Nickname = nickname;  		nick.Host = host;  		nick.Realname = realname;  		nick.Username = username;  		nick.Modes = new List<UserMode> ();  		nick.Privileges = new List<PrivilegeMode> ();  		char[] modeArr = modeString.ToCharArray ();  		for (int i = 1; i <= modeArr.GetUpperBound (0); i++) {  			if (PrivilegeMapping.ContainsKey (modeArr [i].ToString ())) {  				nick.Privileges.Add (PrivilegeMapping [modeArr [i].ToString ()]);  			} else if (modeArr [i].ToString () == "*") {  				nick.Modes.Add (UserMode.o);  			} else {  				UserMode foundMode;  				bool valid = Enum.TryParse (modeArr [i].ToString ()' false' out foundMode);  				if (valid) {  					nick.Modes.Add (foundMode);  				}  			}  		}  		if (!nickFound) {  			channel.AddNick (nick);  		}  	}  }  
Magic Number,Combot.IRCServices,IRC,D:\newReposJune17\uncled1023_Combot\IRCServices\IRC.cs,HandleReply,The following statement contains a magic number: if (msgSplit.GetUpperBound (0) >= 7) {  	string nickname = msgSplit [4];  	string realname = msgSplit [7];  	string username = msgSplit [1];  	string host = msgSplit [2];  	string modeString = msgSplit [5];  	Channel channel = Channels.Find (chan => chan.Name == target);  	if (channel != null) {  		Nick nick = channel.GetNick (nickname);  		bool nickFound = true;  		if (nick == null) {  			nickFound = false;  			nick = new Nick ();  		}  		nick.Nickname = nickname;  		nick.Host = host;  		nick.Realname = realname;  		nick.Username = username;  		nick.Modes = new List<UserMode> ();  		nick.Privileges = new List<PrivilegeMode> ();  		char[] modeArr = modeString.ToCharArray ();  		for (int i = 1; i <= modeArr.GetUpperBound (0); i++) {  			if (PrivilegeMapping.ContainsKey (modeArr [i].ToString ())) {  				nick.Privileges.Add (PrivilegeMapping [modeArr [i].ToString ()]);  			} else if (modeArr [i].ToString () == "*") {  				nick.Modes.Add (UserMode.o);  			} else {  				UserMode foundMode;  				bool valid = Enum.TryParse (modeArr [i].ToString ()' false' out foundMode);  				if (valid) {  					nick.Modes.Add (foundMode);  				}  			}  		}  		if (!nickFound) {  			channel.AddNick (nick);  		}  	}  }  
Magic Number,Combot.IRCServices,IRC,D:\newReposJune17\uncled1023_Combot\IRCServices\IRC.cs,HandleReply,The following statement contains a magic number: if (msgSplit.GetUpperBound (0) >= 7) {  	string nickname = msgSplit [4];  	string realname = msgSplit [7];  	string username = msgSplit [1];  	string host = msgSplit [2];  	string modeString = msgSplit [5];  	Channel channel = Channels.Find (chan => chan.Name == target);  	if (channel != null) {  		Nick nick = channel.GetNick (nickname);  		bool nickFound = true;  		if (nick == null) {  			nickFound = false;  			nick = new Nick ();  		}  		nick.Nickname = nickname;  		nick.Host = host;  		nick.Realname = realname;  		nick.Username = username;  		nick.Modes = new List<UserMode> ();  		nick.Privileges = new List<PrivilegeMode> ();  		char[] modeArr = modeString.ToCharArray ();  		for (int i = 1; i <= modeArr.GetUpperBound (0); i++) {  			if (PrivilegeMapping.ContainsKey (modeArr [i].ToString ())) {  				nick.Privileges.Add (PrivilegeMapping [modeArr [i].ToString ()]);  			} else if (modeArr [i].ToString () == "*") {  				nick.Modes.Add (UserMode.o);  			} else {  				UserMode foundMode;  				bool valid = Enum.TryParse (modeArr [i].ToString ()' false' out foundMode);  				if (valid) {  					nick.Modes.Add (foundMode);  				}  			}  		}  		if (!nickFound) {  			channel.AddNick (nick);  		}  	}  }  
Magic Number,Combot.IRCServices,IRC,D:\newReposJune17\uncled1023_Combot\IRCServices\IRC.cs,HandleReply,The following statement contains a magic number: if (msgSplit.GetUpperBound (0) >= 7) {  	string nickname = msgSplit [4];  	string realname = msgSplit [7];  	string username = msgSplit [1];  	string host = msgSplit [2];  	string modeString = msgSplit [5];  	Channel channel = Channels.Find (chan => chan.Name == target);  	if (channel != null) {  		Nick nick = channel.GetNick (nickname);  		bool nickFound = true;  		if (nick == null) {  			nickFound = false;  			nick = new Nick ();  		}  		nick.Nickname = nickname;  		nick.Host = host;  		nick.Realname = realname;  		nick.Username = username;  		nick.Modes = new List<UserMode> ();  		nick.Privileges = new List<PrivilegeMode> ();  		char[] modeArr = modeString.ToCharArray ();  		for (int i = 1; i <= modeArr.GetUpperBound (0); i++) {  			if (PrivilegeMapping.ContainsKey (modeArr [i].ToString ())) {  				nick.Privileges.Add (PrivilegeMapping [modeArr [i].ToString ()]);  			} else if (modeArr [i].ToString () == "*") {  				nick.Modes.Add (UserMode.o);  			} else {  				UserMode foundMode;  				bool valid = Enum.TryParse (modeArr [i].ToString ()' false' out foundMode);  				if (valid) {  					nick.Modes.Add (foundMode);  				}  			}  		}  		if (!nickFound) {  			channel.AddNick (nick);  		}  	}  }  
Magic Number,Combot.IRCServices.Commanding,Commands,D:\newReposJune17\uncled1023_Combot\IRCServices\Commanding\Commands.cs,SendMode,The following statement contains a magic number: foreach (ChannelModeInfo modeInfo in modeInfos) {  	if ((setList.Length + modeList.Length + channel.Length + modeInfo.Parameter.Length + 8 + ((modeInfo.Set != lastSet) ? 1 : 0)) > MaxMessageLength || modeIndex > 4) {  		_IRC.SendTCPMessage (string.Format ("MODE {0} {1} {2}"' channel' setList' modeList));  		setList = string.Empty;  		modeList = string.Empty;  		lastSet = true;  		modeIndex = 1;  	}  	if (modeInfo.Set != lastSet)  		setList += modeInfo.Set ? "+" : "-";  	setList += modeInfo.Mode;  	modeList += modeInfo.Parameter + " ";  	lastSet = modeInfo.Set;  	modeIndex++;  	if (ChannelModeCommandEvent != null) {  		ChannelModeCommandEvent (this' new ChannelModeCommand {  			Channel = channel'  			Mode = modeInfo  		});  	}  }  
Magic Number,Combot.IRCServices.Commanding,Commands,D:\newReposJune17\uncled1023_Combot\IRCServices\Commanding\Commands.cs,SendMode,The following statement contains a magic number: foreach (ChannelModeInfo modeInfo in modeInfos) {  	if ((setList.Length + modeList.Length + channel.Length + modeInfo.Parameter.Length + 8 + ((modeInfo.Set != lastSet) ? 1 : 0)) > MaxMessageLength || modeIndex > 4) {  		_IRC.SendTCPMessage (string.Format ("MODE {0} {1} {2}"' channel' setList' modeList));  		setList = string.Empty;  		modeList = string.Empty;  		lastSet = true;  		modeIndex = 1;  	}  	if (modeInfo.Set != lastSet)  		setList += modeInfo.Set ? "+" : "-";  	setList += modeInfo.Mode;  	modeList += modeInfo.Parameter + " ";  	lastSet = modeInfo.Set;  	modeIndex++;  	if (ChannelModeCommandEvent != null) {  		ChannelModeCommandEvent (this' new ChannelModeCommand {  			Channel = channel'  			Mode = modeInfo  		});  	}  }  
Magic Number,Combot.IRCServices.Commanding,Commands,D:\newReposJune17\uncled1023_Combot\IRCServices\Commanding\Commands.cs,SendMode,The following statement contains a magic number: if ((setList.Length + modeList.Length + channel.Length + modeInfo.Parameter.Length + 8 + ((modeInfo.Set != lastSet) ? 1 : 0)) > MaxMessageLength || modeIndex > 4) {  	_IRC.SendTCPMessage (string.Format ("MODE {0} {1} {2}"' channel' setList' modeList));  	setList = string.Empty;  	modeList = string.Empty;  	lastSet = true;  	modeIndex = 1;  }  
Magic Number,Combot.IRCServices.Commanding,Commands,D:\newReposJune17\uncled1023_Combot\IRCServices\Commanding\Commands.cs,SendMode,The following statement contains a magic number: if ((setList.Length + modeList.Length + channel.Length + modeInfo.Parameter.Length + 8 + ((modeInfo.Set != lastSet) ? 1 : 0)) > MaxMessageLength || modeIndex > 4) {  	_IRC.SendTCPMessage (string.Format ("MODE {0} {1} {2}"' channel' setList' modeList));  	setList = string.Empty;  	modeList = string.Empty;  	lastSet = true;  	modeIndex = 1;  }  
Magic Number,Combot.IRCServices.Messaging,Messages,D:\newReposJune17\uncled1023_Combot\IRCServices\Messaging\Messages.cs,GetServerReply,The following statement contains a magic number: reply.Ready.Wait (TimeSpan.FromMilliseconds (5000));  
Magic Number,Combot.IRCServices.Messaging,Messages,D:\newReposJune17\uncled1023_Combot\IRCServices\Messaging\Messages.cs,GetServerError,The following statement contains a magic number: error.Ready.Wait (TimeSpan.FromMilliseconds (5000));  
Magic Number,Combot.IRCServices.TCP,TCPInterface,D:\newReposJune17\uncled1023_Combot\IRCServices\TCP\TCPInterface.cs,Read,The following statement contains a magic number: try {  	if (_tcpStream.CanRead && Connected) {  		byte[] readBytes = new byte[100000];  		_tcpStream.Read (readBytes' 0' readBytes.Length);  		string result = Encoding.UTF8.GetString (readBytes' 0' readBytes.Length);  		// Reset Failed Counter  		_currentFailedCount = 0;  		return result.TrimEnd ('\0');  	}  } catch (IOException) {  	/*                 _currentFailedCount++;                 Action<TCPError> localEvent = TCPErrorEvent;                 if (localEvent != null && _tcpStream.CanRead)                 {                     TCPError error = new TCPError();                     error.Message = string.Format("Read Timeout' No Response from Server in {0}ms"' _readTimeout);                     localEvent(error);                 }                 */} catch (Exception ex) {  	_currentFailedCount++;  	Action<TCPError> localEvent = TCPErrorEvent;  	if (localEvent != null) {  		TCPError error = new TCPError ();  		error.Message = ex.Message;  		localEvent (error);  	}  }  
Magic Number,Combot.IRCServices.TCP,TCPInterface,D:\newReposJune17\uncled1023_Combot\IRCServices\TCP\TCPInterface.cs,Read,The following statement contains a magic number: if (_tcpStream.CanRead && Connected) {  	byte[] readBytes = new byte[100000];  	_tcpStream.Read (readBytes' 0' readBytes.Length);  	string result = Encoding.UTF8.GetString (readBytes' 0' readBytes.Length);  	// Reset Failed Counter  	_currentFailedCount = 0;  	return result.TrimEnd ('\0');  }  
