Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Combot.Modules.Plugins,Whois,D:\research\architectureSmells\repos\uncled1023_Combot\Modules\Whois\Whois.cs,findMatches,The method has 5 parameters. Parameters: nickList' hostList' nick' host' detail
Long Statement,Combot.Modules.Plugins,Whois,D:\research\architectureSmells\repos\uncled1023_Combot\Modules\Whois\Whois.cs,ParseCommand,The length of the statement  "                            string nicksFound = string.Format("\u0002{0}\u0002 has been seen as: \u0002{1}\u0002"' mask' string.Join("' "' nicksList)); " is 123.
Long Statement,Combot.Modules.Plugins,Whois,D:\research\architectureSmells\repos\uncled1023_Combot\Modules\Whois\Whois.cs,ParseCommand,The length of the statement  "                            string hostsFound = string.Format("\u0002{0}\u0002 has used the following hosts: \u0002{1}\u0002"' mask' string.Join("' "' hostList)); " is 134.
Long Statement,Combot.Modules.Plugins,Whois,D:\research\architectureSmells\repos\uncled1023_Combot\Modules\Whois\Whois.cs,ParseCommand,The length of the statement  "                        SendResponse(command.MessageType' command.Location' command.Nick.Nickname' string.Format("I have no information about \u0002{0}\u0002"' mask)' true); " is 149.
Complex Conditional,Combot.Modules.Plugins,Whois,D:\research\architectureSmells\repos\uncled1023_Combot\Modules\Whois\Whois.cs,ParseCommand,The conditional expression  "nicksList.Any() && (string.IsNullOrEmpty(option) || option.ToLower() == "nicks" || option.ToLower() == "detail")"  is complex.
Complex Conditional,Combot.Modules.Plugins,Whois,D:\research\architectureSmells\repos\uncled1023_Combot\Modules\Whois\Whois.cs,ParseCommand,The conditional expression  "hostList.Any() && (string.IsNullOrEmpty(option) || option.ToLower() == "hosts" || option.ToLower() == "detail")"  is complex.
Missing Default,Combot.Modules.Plugins,Whois,D:\research\architectureSmells\repos\uncled1023_Combot\Modules\Whois\Whois.cs,ParseCommand,The following switch statement is missing a default case: switch (foundCommand.Name)              {                  case "Whois":                      string option = (command.Arguments.ContainsKey("Option")) ? command.Arguments["Option"] : string.Empty;                      string mask = (command.Arguments.ContainsKey("Nickname")) ? command.Arguments["Nickname"] : command.Nick.Nickname;                      List<string> nicksList = new List<string>();                      List<string> hostList = new List<string>();                      bool detail = (option.ToLower() == "detail");                      findMatches(ref nicksList' ref hostList' mask' mask' detail);                      if (nicksList.Any() || hostList.Any())                      {                          // display results                          if (nicksList.Any() && (string.IsNullOrEmpty(option) || option.ToLower() == "nicks" || option.ToLower() == "detail"))                          {                              string nicksFound = string.Format("\u0002{0}\u0002 has been seen as: \u0002{1}\u0002"' mask' string.Join("' "' nicksList));                              SendResponse(command.MessageType' command.Location' command.Nick.Nickname' nicksFound' true);                          }                          if (hostList.Any() && (string.IsNullOrEmpty(option) || option.ToLower() == "hosts" || option.ToLower() == "detail"))                          {                              string hostsFound = string.Format("\u0002{0}\u0002 has used the following hosts: \u0002{1}\u0002"' mask' string.Join("' "' hostList));                              SendResponse(command.MessageType' command.Location' command.Nick.Nickname' hostsFound' true);                          }                      }                      else                      {                          SendResponse(command.MessageType' command.Location' command.Nick.Nickname' string.Format("I have no information about \u0002{0}\u0002"' mask)' true);                      }                      break;              }
