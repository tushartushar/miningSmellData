Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Combot.Modules.Plugins,Timer,D:\newReposJune17\uncled1023_Combot\Modules\Timer\Timer.cs,ParseCommand,Cyclomatic complexity of the method is 8
Long Parameter List,Combot.Modules.Plugins,Timer,D:\newReposJune17\uncled1023_Combot\Modules\Timer\Timer.cs,TimerElapsed,The method has 4 parameters.
Magic Number,Combot.Modules.Plugins,Timer,D:\newReposJune17\uncled1023_Combot\Modules\Timer\Timer.cs,ParseCommand,The following statement contains a magic number: switch (foundCommand.Name) {  case "Timer":  	double timeout;  	string message = command.Arguments.ContainsKey ("Message") ? command.Arguments ["Message"] : string.Empty;  	if (double.TryParse (command.Arguments ["Time"]' out timeout) && timeout > 0) {  		if (message.StartsWith (Bot.ServerConfig.CommandPrefix)) {  			string cmd = message.Split (new[] {  				' '  			}' StringSplitOptions.RemoveEmptyEntries).First ();  			if (foundCommand.Triggers.Contains (cmd.TrimStart (Bot.ServerConfig.CommandPrefix.ToCharArray ()))) {  				SendResponse (command.MessageType' command.Location' command.Nick.Nickname' "Recursion is bad."' true);  				break;  			}  		}  		System.Timers.Timer newTimer = new System.Timers.Timer ();  		newTimer.Interval = (timeout * 1000.0);  		newTimer.Enabled = true;  		newTimer.AutoReset = false;  		newTimer.Elapsed += (sender' e) => TimerElapsed (sender' e' message' command);  		listLock.EnterWriteLock ();  		timers.Add (newTimer);  		listLock.ExitWriteLock ();  		string addedTimer = string.Format ("Timer added for {0} seconds from now."' timeout);  		SendResponse (command.MessageType' command.Location' command.Nick.Nickname' addedTimer);  	} else {  		string notValid = "Please enter a valid time.";  		SendResponse (command.MessageType' command.Location' command.Nick.Nickname' notValid' true);  	}  	break;  }  
Magic Number,Combot.Modules.Plugins,Timer,D:\newReposJune17\uncled1023_Combot\Modules\Timer\Timer.cs,ParseCommand,The following statement contains a magic number: if (double.TryParse (command.Arguments ["Time"]' out timeout) && timeout > 0) {  	if (message.StartsWith (Bot.ServerConfig.CommandPrefix)) {  		string cmd = message.Split (new[] {  			' '  		}' StringSplitOptions.RemoveEmptyEntries).First ();  		if (foundCommand.Triggers.Contains (cmd.TrimStart (Bot.ServerConfig.CommandPrefix.ToCharArray ()))) {  			SendResponse (command.MessageType' command.Location' command.Nick.Nickname' "Recursion is bad."' true);  			break;  		}  	}  	System.Timers.Timer newTimer = new System.Timers.Timer ();  	newTimer.Interval = (timeout * 1000.0);  	newTimer.Enabled = true;  	newTimer.AutoReset = false;  	newTimer.Elapsed += (sender' e) => TimerElapsed (sender' e' message' command);  	listLock.EnterWriteLock ();  	timers.Add (newTimer);  	listLock.ExitWriteLock ();  	string addedTimer = string.Format ("Timer added for {0} seconds from now."' timeout);  	SendResponse (command.MessageType' command.Location' command.Nick.Nickname' addedTimer);  } else {  	string notValid = "Please enter a valid time.";  	SendResponse (command.MessageType' command.Location' command.Nick.Nickname' notValid' true);  }  
Magic Number,Combot.Modules.Plugins,Timer,D:\newReposJune17\uncled1023_Combot\Modules\Timer\Timer.cs,ParseCommand,The following statement contains a magic number: newTimer.Interval = (timeout * 1000.0);  
Missing Default,Combot.Modules.Plugins,Timer,D:\newReposJune17\uncled1023_Combot\Modules\Timer\Timer.cs,ParseCommand,The following switch statement is missing a default case: switch (foundCommand.Name) {  case "Timer":  	double timeout;  	string message = command.Arguments.ContainsKey ("Message") ? command.Arguments ["Message"] : string.Empty;  	if (double.TryParse (command.Arguments ["Time"]' out timeout) && timeout > 0) {  		if (message.StartsWith (Bot.ServerConfig.CommandPrefix)) {  			string cmd = message.Split (new[] {  				' '  			}' StringSplitOptions.RemoveEmptyEntries).First ();  			if (foundCommand.Triggers.Contains (cmd.TrimStart (Bot.ServerConfig.CommandPrefix.ToCharArray ()))) {  				SendResponse (command.MessageType' command.Location' command.Nick.Nickname' "Recursion is bad."' true);  				break;  			}  		}  		System.Timers.Timer newTimer = new System.Timers.Timer ();  		newTimer.Interval = (timeout * 1000.0);  		newTimer.Enabled = true;  		newTimer.AutoReset = false;  		newTimer.Elapsed += (sender' e) => TimerElapsed (sender' e' message' command);  		listLock.EnterWriteLock ();  		timers.Add (newTimer);  		listLock.ExitWriteLock ();  		string addedTimer = string.Format ("Timer added for {0} seconds from now."' timeout);  		SendResponse (command.MessageType' command.Location' command.Nick.Nickname' addedTimer);  	} else {  		string notValid = "Please enter a valid time.";  		SendResponse (command.MessageType' command.Location' command.Nick.Nickname' notValid' true);  	}  	break;  }  
