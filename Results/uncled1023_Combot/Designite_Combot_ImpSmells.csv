Implementation smell,Namespace,Class,File,Method,Description
Long Method,Combot,Bot,D:\research\architectureSmells\repos\uncled1023_Combot\Combot\Bot.cs,ParseCommandMessage,The method has 170 lines of code.
Complex Method,Combot,Bot,D:\research\architectureSmells\repos\uncled1023_Combot\Combot\Bot.cs,CheckChannelAccess,Cyclomatic complexity of the method is 18
Complex Method,Combot,Bot,D:\research\architectureSmells\repos\uncled1023_Combot\Combot\Bot.cs,CheckNickAccess,Cyclomatic complexity of the method is 15
Complex Method,Combot,Bot,D:\research\architectureSmells\repos\uncled1023_Combot\Combot\Bot.cs,SpamCheck,Cyclomatic complexity of the method is 9
Complex Method,Combot,Bot,D:\research\architectureSmells\repos\uncled1023_Combot\Combot\Bot.cs,HandleReplyEvent,Cyclomatic complexity of the method is 9
Complex Method,Combot,Bot,D:\research\architectureSmells\repos\uncled1023_Combot\Combot\Bot.cs,ParseCommandMessage,Cyclomatic complexity of the method is 16
Complex Method,Combot.Modules,Module,D:\research\architectureSmells\repos\uncled1023_Combot\Combot\Modules\Module.cs,AddNickInfo,Cyclomatic complexity of the method is 9
Long Parameter List,Combot,Bot,D:\research\architectureSmells\repos\uncled1023_Combot\Combot\Bot.cs,ParseCommandMessage,The method has 5 parameters. Parameters: timestamp' message' sender' location' messageType
Long Parameter List,Combot.Modules,Module,D:\research\architectureSmells\repos\uncled1023_Combot\Combot\Modules\Module.cs,SendResponse,The method has 5 parameters. Parameters: messageType' location' nickname' message' silent
Long Statement,Combot,Bot,D:\research\architectureSmells\repos\uncled1023_Combot\Combot\Bot.cs,Reconnect,The length of the statement  "                    ErrorEvent(new BotError() { Message = string.Format("Retrying connection in {0} seconds."' (int)Math.Pow(2' RetryCount))' Type = ErrorType.IRC }); " is 146.
Long Statement,Combot,Bot,D:\research\architectureSmells\repos\uncled1023_Combot\Combot\Bot.cs,CheckChannelAccess,The length of the statement  "                                    if (access == AccessType.User || access == AccessType.Voice || access == AccessType.HalfOperator || access == AccessType.Operator) " is 130.
Long Statement,Combot,Bot,D:\research\architectureSmells\repos\uncled1023_Combot\Combot\Bot.cs,CheckChannelAccess,The length of the statement  "                                    if (access == AccessType.User || access == AccessType.Voice || access == AccessType.HalfOperator || access == AccessType.Operator || access == AccessType.SuperOperator) " is 168.
Long Statement,Combot,Bot,D:\research\architectureSmells\repos\uncled1023_Combot\Combot\Bot.cs,CheckChannelAccess,The length of the statement  "                                    if (access == AccessType.User || access == AccessType.Voice || access == AccessType.HalfOperator || access == AccessType.Operator || access == AccessType.SuperOperator || access == AccessType.Founder) " is 200.
Long Statement,Combot,Bot,D:\research\architectureSmells\repos\uncled1023_Combot\Combot\Bot.cs,CheckNickAccess,The length of the statement  "                                    if (!foundFirstNick.Privileges.Contains(PrivilegeMode.v) && !foundFirstNick.Privileges.Contains(PrivilegeMode.h) && !foundFirstNick.Privileges.Contains(PrivilegeMode.o) && !foundFirstNick.Privileges.Contains(PrivilegeMode.a) && !foundFirstNick.Privileges.Contains(PrivilegeMode.q)) " is 281.
Long Statement,Combot,Bot,D:\research\architectureSmells\repos\uncled1023_Combot\Combot\Bot.cs,CheckNickAccess,The length of the statement  "                                    if (!foundFirstNick.Privileges.Contains(PrivilegeMode.h) && !foundFirstNick.Privileges.Contains(PrivilegeMode.o) && !foundFirstNick.Privileges.Contains(PrivilegeMode.a) && !foundFirstNick.Privileges.Contains(PrivilegeMode.q)) " is 225.
Long Statement,Combot,Bot,D:\research\architectureSmells\repos\uncled1023_Combot\Combot\Bot.cs,CheckNickAccess,The length of the statement  "                                    if (!foundFirstNick.Privileges.Contains(PrivilegeMode.o) && !foundFirstNick.Privileges.Contains(PrivilegeMode.a) && !foundFirstNick.Privileges.Contains(PrivilegeMode.q)) " is 169.
Long Statement,Combot,Bot,D:\research\architectureSmells\repos\uncled1023_Combot\Combot\Bot.cs,IsCommand,The length of the statement  "            Module module = Modules.Find(mod => mod.Commands.Exists(c => c.Triggers.Contains(command)) && mod.Loaded && mod.Enabled); " is 121.
Long Statement,Combot,Bot,D:\research\architectureSmells\repos\uncled1023_Combot\Combot\Bot.cs,HandleReplyEvent,The length of the statement  "                                IRC.Command.SendPrivateMessage("NickServ"' string.Format("GHOST {0} {1}"' ServerConfig.Nicknames[PreNickChoice]' ServerConfig.Password)); " is 137.
Long Statement,Combot,Bot,D:\research\architectureSmells\repos\uncled1023_Combot\Combot\Bot.cs,HandleReplyEvent,The length of the statement  "                                IRC.Command.SendPrivateMessage("NickServ"' string.Format("REGISTER {0} {1}"' ServerConfig.Password' ServerConfig.Email)); " is 121.
Long Statement,Combot,Bot,D:\research\architectureSmells\repos\uncled1023_Combot\Combot\Bot.cs,ParseCommandMessage,The length of the statement  "                Module module = Modules.Find(mod => mod.Commands.Exists(c => c.Triggers.Contains(command)) && mod.Loaded && mod.Enabled); " is 121.
Long Statement,Combot,Bot,D:\research\architectureSmells\repos\uncled1023_Combot\Combot\Bot.cs,ParseCommandMessage,The length of the statement  "                            string whoStyle = string.Format(@"[^\s]+\s[^\s]+\s[^\s]+\s[^\s]+\s({0})\s(?<Modes>[^\s]+)\s:[\d]\s(.+)"' newCommand.Nick.Nickname); " is 131.
Long Statement,Combot,Bot,D:\research\architectureSmells\repos\uncled1023_Combot\Combot\Bot.cs,ParseCommandMessage,The length of the statement  "                                            argString += string.Format("\u0002:When {0}\u0002)"' string.Join(" or "' arg.DependentArguments.Select(dep => { return string.Format("\u0002\u001F{0}\u001F\u0002=\u0002{1}\u0002"' dep.Name' string.Join("'"' dep.Values)); }))); " is 226.
Long Statement,Combot,Bot,D:\research\architectureSmells\repos\uncled1023_Combot\Combot\Bot.cs,ParseCommandMessage,The length of the statement  "                                    string invalidMessage = string.Format("Invalid value for \u0002{0}\u0002 in \u0002{1}{2}\u0002{3}.  Valid options are \u0002{4}\u0002."' validArguments[i].Name' ServerConfig.CommandPrefix' command' argHelp' string.Join("' "' validArguments[i].AllowedValues)); " is 259.
Long Statement,Combot,Bot,D:\research\architectureSmells\repos\uncled1023_Combot\Combot\Bot.cs,ParseCommandMessage,The length of the statement  "                                    argString += string.Format("\u0002:When {0}\u0002)"' string.Join(" or "' arg.DependentArguments.Select(dep => { return string.Format("\u0002\u001F{0}\u001F\u0002=\u0002{1}\u0002"' dep.Name' string.Join("'"' dep.Values)); }))); " is 226.
Long Statement,Combot,Bot,D:\research\architectureSmells\repos\uncled1023_Combot\Combot\Bot.cs,ParseCommandMessage,The length of the statement  "                            string missingArgument = string.Format("Missing a required argument for \u0002{0}{1}\u0002{2}.  The required arguments are \u0002{3}\u0002."' ServerConfig.CommandPrefix' command' argHelp' string.Join("' "' validArguments.Where(arg => arg.Required).Select(arg => arg.Name))); " is 274.
Long Statement,Combot,Bot,D:\research\architectureSmells\repos\uncled1023_Combot\Combot\Bot.cs,HandleMysqlErrorEvent,The length of the statement  "            Logger.LogToFile(ServerConfig.LogFilePath' "errors"' "Mysql Error: " + message.GetExceptionMessage(true' true)' ServerConfig.LogFileSizeMax); " is 141.
Long Statement,Combot,Bot,D:\research\architectureSmells\repos\uncled1023_Combot\Combot\Bot.cs,HandleModuleErrorEvent,The length of the statement  "            Logger.LogToFile(ServerConfig.LogFilePath' "errors"' message.GetExceptionMessage(true' true)' ServerConfig.LogFileSizeMax); " is 123.
Long Statement,Combot,Bot,D:\research\architectureSmells\repos\uncled1023_Combot\Combot\Bot.cs,ThrowException,The length of the statement  "            Logger.LogToFile(ServerConfig.LogFilePath' "errors"' newEx.GetExceptionMessage(true' true)' ServerConfig.LogFileSizeMax); " is 121.
Long Statement,Combot.Databases,Database,D:\research\architectureSmells\repos\uncled1023_Combot\Combot\Databases\Database.cs,Connect,The length of the statement  "                if (config.Server != string.Empty && config.Database != string.Empty && config.Username != string.Empty && config.Password != string.Empty) " is 139.
Long Statement,Combot.Databases,Database,D:\research\architectureSmells\repos\uncled1023_Combot\Combot\Databases\Database.cs,Connect,The length of the statement  "                    string strCon = string.Format("Server={0}; database={1}; user={2}; password={3}; port={4}; charset=utf8"' config.Server' config.Database' config.Username' config.Password' config.Port); " is 185.
Long Statement,Combot.Modules,Command,D:\research\architectureSmells\repos\uncled1023_Combot\Combot\Modules\Command.cs,GetValidArguments,The length of the statement  "                            CommandArgument.DependentArgumentInfo checkedArgument = Arguments[i].DependentArguments.Find(dep => Arguments.Exists(val => val.Name == dep.Name)); " is 147.
Long Statement,Combot.Modules,Module,D:\research\architectureSmells\repos\uncled1023_Combot\Combot\Modules\Module.cs,HandleCommandEvent,The length of the statement  "                    if ((Bot.ServerConfig.Owners.Contains(command.Nick.Nickname) && command.Nick.Modes.Exists(mode => mode == UserMode.r || mode == UserMode.o)) || command.Nick.Nickname == Bot.IRC.Nickname) " is 186.
Long Statement,Combot.Modules,Module,D:\research\architectureSmells\repos\uncled1023_Combot\Combot\Modules\Module.cs,AddNick,The length of the statement  "            List<Dictionary<string' object>> results = Bot.Database.Query(search' new object[] { Bot.ServerConfig.Name' nick.Nickname }); " is 125.
Long Statement,Combot.Modules,Module,D:\research\architectureSmells\repos\uncled1023_Combot\Combot\Modules\Module.cs,AddNickInfo,The length of the statement  "                            "`nick_id` = (SELECT `nicks`.`id` FROM `nicks` INNER JOIN `servers` ON `nicks`.`server_id` = `servers`.`id` WHERE `nicks`.`nickname` = {0} AND `servers`.`name` = {1})"; " is 168.
Long Statement,Combot.Modules,Module,D:\research\architectureSmells\repos\uncled1023_Combot\Combot\Modules\Module.cs,AddNickInfo,The length of the statement  "                                "`nick_id` = (SELECT `nicks`.`id` FROM `nicks` INNER JOIN `servers` ON `nicks`.`server_id` = `servers`.`id` WHERE `nicks`.`nickname` = {0} AND `servers`.`name` = {1})"; " is 168.
Long Statement,Combot.Modules,Module,D:\research\architectureSmells\repos\uncled1023_Combot\Combot\Modules\Module.cs,AddNickInfo,The length of the statement  "                Bot.Database.Execute(update' new object[] { (nickInfo.Modes.Any() && nickInfo.Modes.Contains(UserMode.r))' results.First()["id"] }); " is 132.
Complex Conditional,Combot,Bot,D:\research\architectureSmells\repos\uncled1023_Combot\Combot\Bot.cs,CheckChannelAccess,The conditional expression  "access == AccessType.User || access == AccessType.Voice || access == AccessType.HalfOperator || access == AccessType.Operator"  is complex.
Complex Conditional,Combot,Bot,D:\research\architectureSmells\repos\uncled1023_Combot\Combot\Bot.cs,CheckChannelAccess,The conditional expression  "access == AccessType.User || access == AccessType.Voice || access == AccessType.HalfOperator || access == AccessType.Operator || access == AccessType.SuperOperator"  is complex.
Complex Conditional,Combot,Bot,D:\research\architectureSmells\repos\uncled1023_Combot\Combot\Bot.cs,CheckChannelAccess,The conditional expression  "access == AccessType.User || access == AccessType.Voice || access == AccessType.HalfOperator || access == AccessType.Operator || access == AccessType.SuperOperator || access == AccessType.Founder"  is complex.
Complex Conditional,Combot,Bot,D:\research\architectureSmells\repos\uncled1023_Combot\Combot\Bot.cs,CheckNickAccess,The conditional expression  "!foundFirstNick.Privileges.Contains(PrivilegeMode.v) && !foundFirstNick.Privileges.Contains(PrivilegeMode.h) && !foundFirstNick.Privileges.Contains(PrivilegeMode.o) && !foundFirstNick.Privileges.Contains(PrivilegeMode.a) && !foundFirstNick.Privileges.Contains(PrivilegeMode.q)"  is complex.
Complex Conditional,Combot,Bot,D:\research\architectureSmells\repos\uncled1023_Combot\Combot\Bot.cs,CheckNickAccess,The conditional expression  "!foundFirstNick.Privileges.Contains(PrivilegeMode.h) && !foundFirstNick.Privileges.Contains(PrivilegeMode.o) && !foundFirstNick.Privileges.Contains(PrivilegeMode.a) && !foundFirstNick.Privileges.Contains(PrivilegeMode.q)"  is complex.
Complex Conditional,Combot.Databases,Database,D:\research\architectureSmells\repos\uncled1023_Combot\Combot\Databases\Database.cs,Connect,The conditional expression  "config.Server != string.Empty && config.Database != string.Empty && config.Username != string.Empty && config.Password != string.Empty"  is complex.
Complex Conditional,Combot.Modules,Module,D:\research\architectureSmells\repos\uncled1023_Combot\Combot\Modules\Module.cs,HandleCommandEvent,The conditional expression  "Loaded                      && Enabled                      && !ChannelBlacklist.Contains(command.Location)                      && !NickBlacklist.Contains(command.Nick.Nickname)                      && Commands.Exists(c => c.Triggers.Contains(command.Command)                                              && c.Enabled                                              && !c.ChannelBlacklist.Contains(command.Location)                                              && !c.NickBlacklist.Contains(command.Nick.Nickname)                                          )"  is complex.
Complex Conditional,Combot.Modules,Module,D:\research\architectureSmells\repos\uncled1023_Combot\Combot\Modules\Module.cs,HandleCommandEvent,The conditional expression  "(Bot.ServerConfig.Owners.Contains(command.Nick.Nickname) && command.Nick.Modes.Exists(mode => mode == UserMode.r || mode == UserMode.o)) || command.Nick.Nickname == Bot.IRC.Nickname"  is complex.
Magic Number,Combot,Bot,D:\research\architectureSmells\repos\uncled1023_Combot\Combot\Bot.cs,Reconnect,The following statement contains a magic number: ErrorEvent(new BotError() { Message = string.Format("Retrying connection in {0} seconds."' (int)Math.Pow(2' RetryCount))' Type = ErrorType.IRC });
Magic Number,Combot,Bot,D:\research\architectureSmells\repos\uncled1023_Combot\Combot\Bot.cs,Reconnect,The following statement contains a magic number: Task.Run(() =>                  {                      Thread.Sleep(1000 * (int)Math.Pow(2' RetryCount));                      RetryCount++;                      Connect();                  });
Magic Number,Combot,Bot,D:\research\architectureSmells\repos\uncled1023_Combot\Combot\Bot.cs,Reconnect,The following statement contains a magic number: Task.Run(() =>                  {                      Thread.Sleep(1000 * (int)Math.Pow(2' RetryCount));                      RetryCount++;                      Connect();                  });
Magic Number,Combot,Bot,D:\research\architectureSmells\repos\uncled1023_Combot\Combot\Bot.cs,GetCommand,The following statement contains a magic number: string[] msgArgs = message.Split(new[] { ' ' }' 2' StringSplitOptions.RemoveEmptyEntries);
Magic Number,Combot,Bot,D:\research\architectureSmells\repos\uncled1023_Combot\Combot\Bot.cs,HandleReplyEvent,The following statement contains a magic number: switch (reply.ReplyCode)                      {                          case IRCReplyCode.RPL_WELCOME:                              // If the reply is Welcome' that means we are fully connected to the server.                              LoggedIn = true;                              if (!GhostSent && PreNickChoice >= 0 && IRC.Nickname != ServerConfig.Nicknames[PreNickChoice])                              {                                  IRC.Command.SendPrivateMessage("NickServ"' string.Format("GHOST {0} {1}"' ServerConfig.Nicknames[PreNickChoice]' ServerConfig.Password));                                  Thread.Sleep(1000);                                  IRC.Command.SendNick(ServerConfig.Nicknames[PreNickChoice]);                                  GhostSent = true;                              }                              // Identify to NickServ if need be                              IRC.Command.SendPrivateMessage("NickServ"' string.Format("IDENTIFY {0}"' ServerConfig.Password));                                // Join all required channels                              // Delay joining channels for configured time                              Thread.Sleep(ServerConfig.JoinDelay);                              foreach (ChannelConfig channel in ServerConfig.Channels)                              {                                  IRC.Command.SendJoin(channel.Name' channel.Key);                              }                              break;                      }
Magic Number,Combot,Bot,D:\research\architectureSmells\repos\uncled1023_Combot\Combot\Bot.cs,ParseCommandMessage,The following statement contains a magic number: string[] msgArgs = message.Split(new[] { ' ' }' 2' StringSplitOptions.RemoveEmptyEntries);
Magic Number,Combot.Configurations,DatabaseConfig,D:\research\architectureSmells\repos\uncled1023_Combot\Combot\Configurations\DatabaseConfig.cs,SetDefaults,The following statement contains a magic number: Port = 3306;
Magic Number,Combot.Configurations,ServerConfig,D:\research\architectureSmells\repos\uncled1023_Combot\Combot\Configurations\ServerConfig.cs,SetDefaults,The following statement contains a magic number: MaxMessageLength = 400;
Magic Number,Combot.Configurations,ServerConfig,D:\research\architectureSmells\repos\uncled1023_Combot\Combot\Configurations\ServerConfig.cs,SetDefaults,The following statement contains a magic number: SpamCountMax = 5;
Magic Number,Combot.Configurations,ServerConfig,D:\research\architectureSmells\repos\uncled1023_Combot\Combot\Configurations\ServerConfig.cs,SetDefaults,The following statement contains a magic number: LogFileSizeMax = 10000;
Magic Number,Combot.Modules,Module,D:\research\architectureSmells\repos\uncled1023_Combot\Combot\Modules\Module.cs,AddNickInfo,The following statement contains a magic number: int argIndex = 2;
Magic Number,Combot.Modules,Module,D:\research\architectureSmells\repos\uncled1023_Combot\Combot\Modules\Module.cs,AddNickInfo,The following statement contains a magic number: argIndex = 2;
Duplicate Code,Combot,Bot,D:\research\architectureSmells\repos\uncled1023_Combot\Combot\Bot.cs,ParseCommandMessage,The method contains a code clone-set at the following line numbers (starting from the method definition): ((104' 124)' (143' 163))
Missing Default,Combot,Bot,D:\research\architectureSmells\repos\uncled1023_Combot\Combot\Bot.cs,CheckChannelAccess,The following switch statement is missing a default case: switch (PrivilegeModeMapping[foundNick.Privileges[i]])                              {                                  case AccessType.User:                                      if (access == AccessType.User)                                      {                                          return true;                                      }                                      break;                                  case AccessType.Voice:                                      if (access == AccessType.User || access == AccessType.Voice)                                      {                                          return true;                                      }                                      break;                                  case AccessType.HalfOperator:                                      if (access == AccessType.User || access == AccessType.Voice || access == AccessType.HalfOperator)                                      {                                          return true;                                      }                                      break;                                  case AccessType.Operator:                                      if (access == AccessType.User || access == AccessType.Voice || access == AccessType.HalfOperator || access == AccessType.Operator)                                      {                                          return true;                                      }                                      break;                                  case AccessType.SuperOperator:                                      if (access == AccessType.User || access == AccessType.Voice || access == AccessType.HalfOperator || access == AccessType.Operator || access == AccessType.SuperOperator)                                      {                                          return true;                                      }                                      break;                                  case AccessType.Founder:                                      if (access == AccessType.User || access == AccessType.Voice || access == AccessType.HalfOperator || access == AccessType.Operator || access == AccessType.SuperOperator || access == AccessType.Founder)                                      {                                          return true;                                      }                                      break;                                  case AccessType.Owner:                                      return true;                              }
Missing Default,Combot,Bot,D:\research\architectureSmells\repos\uncled1023_Combot\Combot\Bot.cs,CheckNickAccess,The following switch statement is missing a default case: switch (foundSecondNick.Privileges[i])                              {                                  case PrivilegeMode.v:                                      if (!foundFirstNick.Privileges.Contains(PrivilegeMode.v) && !foundFirstNick.Privileges.Contains(PrivilegeMode.h) && !foundFirstNick.Privileges.Contains(PrivilegeMode.o) && !foundFirstNick.Privileges.Contains(PrivilegeMode.a) && !foundFirstNick.Privileges.Contains(PrivilegeMode.q))                                      {                                          return false;                                      }                                      break;                                  case PrivilegeMode.h:                                      if (!foundFirstNick.Privileges.Contains(PrivilegeMode.h) && !foundFirstNick.Privileges.Contains(PrivilegeMode.o) && !foundFirstNick.Privileges.Contains(PrivilegeMode.a) && !foundFirstNick.Privileges.Contains(PrivilegeMode.q))                                      {                                          return false;                                      }                                      break;                                  case PrivilegeMode.o:                                      if (!foundFirstNick.Privileges.Contains(PrivilegeMode.o) && !foundFirstNick.Privileges.Contains(PrivilegeMode.a) && !foundFirstNick.Privileges.Contains(PrivilegeMode.q))                                      {                                          return false;                                      }                                      break;                                  case PrivilegeMode.a:                                      if (!foundFirstNick.Privileges.Contains(PrivilegeMode.a) && !foundFirstNick.Privileges.Contains(PrivilegeMode.q))                                      {                                          return false;                                      }                                      break;                                  case PrivilegeMode.q:                                      if (!foundFirstNick.Privileges.Contains(PrivilegeMode.q))                                      {                                          return false;                                      }                                      break;                              }
Missing Default,Combot,Bot,D:\research\architectureSmells\repos\uncled1023_Combot\Combot\Bot.cs,SpamCheck,The following switch statement is missing a default case: switch (ServerConfig.SpamSourceType)                  {                      case SpamSourceType.Server:                          source = ServerConfig.Name;                          break;                      case SpamSourceType.Channel:                          source = channel.Name;                          break;                      case SpamSourceType.Nick:                          source = nick.Nickname;                          break;                      case SpamSourceType.Module:                          source = module.Name;                          break;                      case SpamSourceType.Command:                          source = command.Name;                          break;                  }
Missing Default,Combot,Bot,D:\research\architectureSmells\repos\uncled1023_Combot\Combot\Bot.cs,HandleChannelModeChangeEvent,The following switch statement is missing a default case: switch (mode.Mode)                      {                          case ChannelMode.k:                              channel.Key = (mode.Set) ? mode.Parameter : string.Empty;                              ServerConfig.Save();                              break;                      }
Missing Default,Combot,Bot,D:\research\architectureSmells\repos\uncled1023_Combot\Combot\Bot.cs,HandleReplyEvent,The following switch statement is missing a default case: switch (reply.ReplyCode)                      {                          case IRCReplyCode.RPL_WELCOME:                              // If the reply is Welcome' that means we are fully connected to the server.                              LoggedIn = true;                              if (!GhostSent && PreNickChoice >= 0 && IRC.Nickname != ServerConfig.Nicknames[PreNickChoice])                              {                                  IRC.Command.SendPrivateMessage("NickServ"' string.Format("GHOST {0} {1}"' ServerConfig.Nicknames[PreNickChoice]' ServerConfig.Password));                                  Thread.Sleep(1000);                                  IRC.Command.SendNick(ServerConfig.Nicknames[PreNickChoice]);                                  GhostSent = true;                              }                              // Identify to NickServ if need be                              IRC.Command.SendPrivateMessage("NickServ"' string.Format("IDENTIFY {0}"' ServerConfig.Password));                                // Join all required channels                              // Delay joining channels for configured time                              Thread.Sleep(ServerConfig.JoinDelay);                              foreach (ChannelConfig channel in ServerConfig.Channels)                              {                                  IRC.Command.SendJoin(channel.Name' channel.Key);                              }                              break;                      }
Missing Default,Combot,Bot,D:\research\architectureSmells\repos\uncled1023_Combot\Combot\Bot.cs,HandleReplyEvent,The following switch statement is missing a default case: switch (error.ErrorCode)                      {                          case IRCErrorCode.ERR_NOTREGISTERED:                              if (ServerConfig.AutoRegister && ServerConfig.Password != string.Empty && ServerConfig.Email != string.Empty)                              {                                  IRC.Command.SendPrivateMessage("NickServ"' string.Format("REGISTER {0} {1}"' ServerConfig.Password' ServerConfig.Email));                              }                              break;                          case IRCErrorCode.ERR_NICKNAMEINUSE:                              if (LoggedIn == false)                              {                                  string nick;                                  if (IRC.Nickname == ServerConfig.Nicknames[CurNickChoice] && ServerConfig.Nicknames.Count > CurNickChoice + 1)                                  {                                      GhostSent = false;                                      CurNickChoice++;                                      PreNickChoice++;                                      nick = ServerConfig.Nicknames[CurNickChoice];                                  }                                  else                                  {                                      Random rand = new Random();                                      nick = string.Format("{0}_{1}"' ServerConfig.Nicknames.First()' rand.Next(100000).ToString());                                  }                                  IRC.Login(ServerConfig.Name' new Nick()                                  {                                      Nickname = nick'                                      Host = Dns.GetHostName()'                                      Realname = ServerConfig.Realname'                                      Username = ServerConfig.Username                                  });                              }                              break;                      }
Missing Default,Combot.Modules,Module,D:\research\architectureSmells\repos\uncled1023_Combot\Combot\Modules\Module.cs,SendResponse,The following switch statement is missing a default case: switch (messageType)              {                  case MessageType.Channel:                      if (silent)                      {                          Bot.IRC.Command.SendNotice(nickname' message);                      }                      else                      {                          Bot.IRC.Command.SendPrivateMessage(location' message);                      }                      break;                  case MessageType.Query:                      Bot.IRC.Command.SendPrivateMessage(nickname' message);                      break;                  case MessageType.Notice:                      Bot.IRC.Command.SendNotice(nickname' message);                      break;              }
