Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Combot.Modules.Plugins,Url_Parsing,C:\repos\uncled1023_Combot\Modules\Url Parsing\Url_Parsing.cs,ParseTitle,Cyclomatic complexity of the method is 8
Complex Method,Combot.Modules.Plugins,Url_Parsing,C:\repos\uncled1023_Combot\Modules\Url Parsing\Url_Parsing.cs,GetYoutubeDescription,Cyclomatic complexity of the method is 8
Long Statement,Combot.Modules.Plugins,Url_Parsing,C:\repos\uncled1023_Combot\Modules\Url Parsing\Url_Parsing.cs,HandleChannelMessage,The length of the statement  "                    if (Bot.SpamCheck(Bot.IRC.Channels.Find(chan => chan.Name == message.Channel)' message.Sender' this' new Command() { Name = string.Format( "{0} Commands"' Name) })) " is 164.
Long Statement,Combot.Modules.Plugins,Url_Parsing,C:\repos\uncled1023_Combot\Modules\Url Parsing\Url_Parsing.cs,DisplayTitle,The length of the statement  "            webRequest.UserAgent = "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML' like Gecko) Chrome/52.0.2743.116 Safari/537.36"; " is 136.
Long Statement,Combot.Modules.Plugins,Url_Parsing,C:\repos\uncled1023_Combot\Modules\Url Parsing\Url_Parsing.cs,DisplayTitle,The length of the statement  "                                Bot.IRC.Command.SendPrivateMessage(message.Channel' string.Format("[{0}] Size: {1}"' webResponse.ContentType' ToFileSize(contentLength))); " is 138.
Long Statement,Combot.Modules.Plugins,Url_Parsing,C:\repos\uncled1023_Combot\Modules\Url Parsing\Url_Parsing.cs,DisplayTitle,The length of the statement  "                                Bot.IRC.Command.SendPrivateMessage(message.Channel' string.Format("[Video] Type: {0} | Size: {1}"' webResponse.ContentType.Split('/')[1]' ToFileSize(contentLength))); " is 166.
Long Statement,Combot.Modules.Plugins,Url_Parsing,C:\repos\uncled1023_Combot\Modules\Url Parsing\Url_Parsing.cs,DisplayTitle,The length of the statement  "                                Bot.IRC.Command.SendPrivateMessage(message.Channel' string.Format("[Application] Type: {0} | Size: {1}"' webResponse.ContentType.Split('/')[1]' ToFileSize(contentLength))); " is 172.
Long Statement,Combot.Modules.Plugins,Url_Parsing,C:\repos\uncled1023_Combot\Modules\Url Parsing\Url_Parsing.cs,DisplayTitle,The length of the statement  "                                Bot.IRC.Command.SendPrivateMessage(message.Channel' string.Format("[Audio] Type: {0} | Size: {1}"' webResponse.ContentType.Split('/')[1]' ToFileSize(contentLength))); " is 166.
Long Statement,Combot.Modules.Plugins,Url_Parsing,C:\repos\uncled1023_Combot\Modules\Url Parsing\Url_Parsing.cs,DisplayTitle,The length of the statement  "                            Bot.IRC.Command.SendPrivateMessage(message.Channel' string.Format("[URL] Returned Status Code \u0002{0}\u0002 ({1})"' code' url.Host)); " is 135.
Long Statement,Combot.Modules.Plugins,Url_Parsing,C:\repos\uncled1023_Combot\Modules\Url Parsing\Url_Parsing.cs,DisplayTitle,The length of the statement  "                    Bot.IRC.Command.SendPrivateMessage(message.Channel' string.Format("[URL] Response Code: \u0002{0}\u0002 ({1})"' code' url.Host)); " is 129.
Long Statement,Combot.Modules.Plugins,Url_Parsing,C:\repos\uncled1023_Combot\Modules\Url Parsing\Url_Parsing.cs,DisplayTitle,The length of the statement  "                Bot.IRC.Command.SendPrivateMessage(message.Channel' string.Format("[URL] \u0002Site content was too large\u0002 ({0})"' url.Host)); " is 131.
Long Statement,Combot.Modules.Plugins,Url_Parsing,C:\repos\uncled1023_Combot\Modules\Url Parsing\Url_Parsing.cs,ParseTitle,The length of the statement  "                Bot.IRC.Command.SendPrivateMessage(message.Channel' string.Format("[URL] {0} ({1})"' HttpUtility.HtmlDecode(HttpUtility.UrlDecode(StripTagsCharArray(title)))' url.Host)); " is 170.
Long Statement,Combot.Modules.Plugins,Url_Parsing,C:\repos\uncled1023_Combot\Modules\Url Parsing\Url_Parsing.cs,GetYoutubeDescription,The length of the statement  "            string urlTemplate = "https://www.googleapis.com/youtube/v3/videos?part=snippet'statistics'contentDetails&id={0}&key={1}"; " is 122.
Long Statement,Combot.Modules.Plugins,Url_Parsing,C:\repos\uncled1023_Combot\Modules\Url Parsing\Url_Parsing.cs,GetYoutubeDescription,The length of the statement  "                Regex lengthRegex = new Regex(@"PT((?<Days>[0-9]+)D)?((?<Hours>[0-9]+)H)?((?<Minutes>[0-9]+)M)?((?<Seconds>[0-9]+)S)?"); " is 120.
Long Statement,Combot.Modules.Plugins,Url_Parsing,C:\repos\uncled1023_Combot\Modules\Url Parsing\Url_Parsing.cs,GetYoutubeDescription,The length of the statement  "                    description += string.Format(" | Rating: {0} Like{1}' {2} Dislike{3} (\u0002{4}\u000F%)"' likes' pluralLikes' dislikes' pluralDislikes' Math.Round(percent' 1)); " is 160.
Long Statement,Combot.Modules.Plugins,Url_Parsing,C:\repos\uncled1023_Combot\Modules\Url Parsing\Url_Parsing.cs,GetYoutubeDescription,The length of the statement  "                description += string.Format(" | Uploaded By: \u0002{0}\u000F on \u0002{1}\u000F"' data["snippet"]["channelTitle"].Value<string>()' uploadDate.ToString("R")); " is 158.
Complex Conditional,Combot.Modules.Plugins,Url_Parsing,C:\repos\uncled1023_Combot\Modules\Url Parsing\Url_Parsing.cs,HandleChannelMessage,The conditional expression  "Enabled                  && !Bot.ServerConfig.ChannelBlacklist.Contains(message.Channel)                  && !Bot.ServerConfig.NickBlacklist.Contains(message.Sender.Nickname)                  && !ChannelBlacklist.Contains(message.Channel)                  && !NickBlacklist.Contains(message.Sender.Nickname)                  && !Bot.IsCommand(message.Message)"  is complex.
Magic Number,Combot.Modules.Plugins,Url_Parsing,C:\repos\uncled1023_Combot\Modules\Url Parsing\Url_Parsing.cs,DisplayTitle,The following statement contains a magic number: try              {                  using (HttpWebResponse webResponse = webRequest.GetHttpResponse())                  {                      int code = (int)webResponse.StatusCode;                      if (code < 400)                      {                          string contentType = webResponse.ContentType.Split('/')[0];                          long contentLength = webResponse.ContentLength;                          switch (contentType)                          {                              case "image":                                  Bot.IRC.Command.SendPrivateMessage(message.Channel' string.Format("[{0}] Size: {1}"' webResponse.ContentType' ToFileSize(contentLength)));                                  break;                              case "video":                                  Bot.IRC.Command.SendPrivateMessage(message.Channel' string.Format("[Video] Type: {0} | Size: {1}"' webResponse.ContentType.Split('/')[1]' ToFileSize(contentLength)));                                  break;                              case "application":                                  Bot.IRC.Command.SendPrivateMessage(message.Channel' string.Format("[Application] Type: {0} | Size: {1}"' webResponse.ContentType.Split('/')[1]' ToFileSize(contentLength)));                                  break;                              case "audio":                                  Bot.IRC.Command.SendPrivateMessage(message.Channel' string.Format("[Audio] Type: {0} | Size: {1}"' webResponse.ContentType.Split('/')[1]' ToFileSize(contentLength)));                                  break;                              default:                                  Regex ytRegex = new Regex(YOUTUBE_URL);                                  if (ytRegex.IsMatch(urlMatch.ToString()))                                  {                                      Match ytMatch = ytRegex.Match(urlMatch.ToString());                                      string youtubeMessage = GetYoutubeDescription(ytMatch.Groups["ID"].Value);                                        Regex ytTitle = new Regex(YOUTUBE_URL);                                      if (ytTitle.IsMatch(youtubeMessage))                                      {                                          youtubeMessage = ytTitle.Replace(youtubeMessage' string.Empty);                                      }                                      Bot.IRC.Command.SendPrivateMessage(message.Channel' youtubeMessage);                                  }                                  else                                  {                                      ParseTitle(message' urlMatch.ToString());                                  }                                  break;                          }                      }                      else                      {                          if (head)                          {                              DisplayTitle(message' urlMatch' false);                              return;                          }                          else                          {                              Bot.IRC.Command.SendPrivateMessage(message.Channel' string.Format("[URL] Returned Status Code \u0002{0}\u0002 ({1})"' code' url.Host));                          }                      }                  }              }              catch (WebException ex)              {                  if (ex.Response != null)                  {                      int code = (int)((HttpWebResponse)ex.Response).StatusCode;                      Bot.IRC.Command.SendPrivateMessage(message.Channel' string.Format("[URL] Response Code: \u0002{0}\u0002 ({1})"' code' url.Host));                  }              }              catch (OutOfMemoryException ex)              {                  Bot.IRC.Command.SendPrivateMessage(message.Channel' string.Format("[URL] \u0002Site content was too large\u0002 ({0})"' url.Host));              }
Magic Number,Combot.Modules.Plugins,Url_Parsing,C:\repos\uncled1023_Combot\Modules\Url Parsing\Url_Parsing.cs,ParseTitle,The following statement contains a magic number: Char[] buf = new Char[256];
Magic Number,Combot.Modules.Plugins,Url_Parsing,C:\repos\uncled1023_Combot\Modules\Url Parsing\Url_Parsing.cs,ParseTitle,The following statement contains a magic number: int count = streamReader.Read(buf' 0' 256);
Magic Number,Combot.Modules.Plugins,Url_Parsing,C:\repos\uncled1023_Combot\Modules\Url Parsing\Url_Parsing.cs,ParseTitle,The following statement contains a magic number: while (count > 0 && stopwatch.Elapsed < timeout)              {                  outputData += new String(buf' 0' count);                    if (!startTagFound)                  {                      // check for a full match                      Match fullMatch = Regex.Match(outputData' @"\<title\b[^>]*\>\s*(?<Title>[\s\S]*?)\</title\>"' RegexOptions.IgnoreCase);                      if (fullMatch.Success)                      {                          title = fullMatch.Groups["Title"].Value;                          break;                      }                  }                    string pattern = string.Empty;                  if (startTagFound)                  {                      pattern = @"^(?<Title>[\s\S]*?)\</title\>";                      Match match = Regex.Match(outputData' pattern' RegexOptions.IgnoreCase);                      if (match.Success)                      {                          title = match.Groups["Title"].Value;                          break;                      }                  }                  else                  {                      pattern = @"\<title\b[^>]*\>\s*(?<Title>[\s\S]*?)$";                      Match match = Regex.Match(outputData' pattern' RegexOptions.IgnoreCase);                      if (match.Success)                      {                          title = match.Groups["Title"].Value;                          outputData = title;                          startTagFound = true;                      }                  }                  count = streamReader.Read(buf' 0' 256);              }
Magic Number,Combot.Modules.Plugins,Url_Parsing,C:\repos\uncled1023_Combot\Modules\Url Parsing\Url_Parsing.cs,ToFileSize,The following statement contains a magic number: const int byteConversion = 1024;
Magic Number,Combot.Modules.Plugins,Url_Parsing,C:\repos\uncled1023_Combot\Modules\Url Parsing\Url_Parsing.cs,ToFileSize,The following statement contains a magic number: if (bytes >= Math.Pow(byteConversion' 3)) //GB Range              {                  return string.Concat(Math.Round(bytes / Math.Pow(byteConversion' 3)' 2)' " GB");              }              else if (bytes >= Math.Pow(byteConversion' 2)) //MB Range              {                  return string.Concat(Math.Round(bytes / Math.Pow(byteConversion' 2)' 2)' " MB");              }              else if (bytes >= byteConversion) //KB Range              {                  return string.Concat(Math.Round(bytes / byteConversion' 2)' " KB");              }              else //Bytes              {                  return string.Concat(bytes' " Bytes");              }
Magic Number,Combot.Modules.Plugins,Url_Parsing,C:\repos\uncled1023_Combot\Modules\Url Parsing\Url_Parsing.cs,ToFileSize,The following statement contains a magic number: if (bytes >= Math.Pow(byteConversion' 3)) //GB Range              {                  return string.Concat(Math.Round(bytes / Math.Pow(byteConversion' 3)' 2)' " GB");              }              else if (bytes >= Math.Pow(byteConversion' 2)) //MB Range              {                  return string.Concat(Math.Round(bytes / Math.Pow(byteConversion' 2)' 2)' " MB");              }              else if (bytes >= byteConversion) //KB Range              {                  return string.Concat(Math.Round(bytes / byteConversion' 2)' " KB");              }              else //Bytes              {                  return string.Concat(bytes' " Bytes");              }
Magic Number,Combot.Modules.Plugins,Url_Parsing,C:\repos\uncled1023_Combot\Modules\Url Parsing\Url_Parsing.cs,ToFileSize,The following statement contains a magic number: if (bytes >= Math.Pow(byteConversion' 3)) //GB Range              {                  return string.Concat(Math.Round(bytes / Math.Pow(byteConversion' 3)' 2)' " GB");              }              else if (bytes >= Math.Pow(byteConversion' 2)) //MB Range              {                  return string.Concat(Math.Round(bytes / Math.Pow(byteConversion' 2)' 2)' " MB");              }              else if (bytes >= byteConversion) //KB Range              {                  return string.Concat(Math.Round(bytes / byteConversion' 2)' " KB");              }              else //Bytes              {                  return string.Concat(bytes' " Bytes");              }
Magic Number,Combot.Modules.Plugins,Url_Parsing,C:\repos\uncled1023_Combot\Modules\Url Parsing\Url_Parsing.cs,ToFileSize,The following statement contains a magic number: if (bytes >= Math.Pow(byteConversion' 3)) //GB Range              {                  return string.Concat(Math.Round(bytes / Math.Pow(byteConversion' 3)' 2)' " GB");              }              else if (bytes >= Math.Pow(byteConversion' 2)) //MB Range              {                  return string.Concat(Math.Round(bytes / Math.Pow(byteConversion' 2)' 2)' " MB");              }              else if (bytes >= byteConversion) //KB Range              {                  return string.Concat(Math.Round(bytes / byteConversion' 2)' " KB");              }              else //Bytes              {                  return string.Concat(bytes' " Bytes");              }
Magic Number,Combot.Modules.Plugins,Url_Parsing,C:\repos\uncled1023_Combot\Modules\Url Parsing\Url_Parsing.cs,ToFileSize,The following statement contains a magic number: if (bytes >= Math.Pow(byteConversion' 3)) //GB Range              {                  return string.Concat(Math.Round(bytes / Math.Pow(byteConversion' 3)' 2)' " GB");              }              else if (bytes >= Math.Pow(byteConversion' 2)) //MB Range              {                  return string.Concat(Math.Round(bytes / Math.Pow(byteConversion' 2)' 2)' " MB");              }              else if (bytes >= byteConversion) //KB Range              {                  return string.Concat(Math.Round(bytes / byteConversion' 2)' " KB");              }              else //Bytes              {                  return string.Concat(bytes' " Bytes");              }
Magic Number,Combot.Modules.Plugins,Url_Parsing,C:\repos\uncled1023_Combot\Modules\Url Parsing\Url_Parsing.cs,ToFileSize,The following statement contains a magic number: if (bytes >= Math.Pow(byteConversion' 3)) //GB Range              {                  return string.Concat(Math.Round(bytes / Math.Pow(byteConversion' 3)' 2)' " GB");              }              else if (bytes >= Math.Pow(byteConversion' 2)) //MB Range              {                  return string.Concat(Math.Round(bytes / Math.Pow(byteConversion' 2)' 2)' " MB");              }              else if (bytes >= byteConversion) //KB Range              {                  return string.Concat(Math.Round(bytes / byteConversion' 2)' " KB");              }              else //Bytes              {                  return string.Concat(bytes' " Bytes");              }
Magic Number,Combot.Modules.Plugins,Url_Parsing,C:\repos\uncled1023_Combot\Modules\Url Parsing\Url_Parsing.cs,ToFileSize,The following statement contains a magic number: if (bytes >= Math.Pow(byteConversion' 3)) //GB Range              {                  return string.Concat(Math.Round(bytes / Math.Pow(byteConversion' 3)' 2)' " GB");              }              else if (bytes >= Math.Pow(byteConversion' 2)) //MB Range              {                  return string.Concat(Math.Round(bytes / Math.Pow(byteConversion' 2)' 2)' " MB");              }              else if (bytes >= byteConversion) //KB Range              {                  return string.Concat(Math.Round(bytes / byteConversion' 2)' " KB");              }              else //Bytes              {                  return string.Concat(bytes' " Bytes");              }
Magic Number,Combot.Modules.Plugins,Url_Parsing,C:\repos\uncled1023_Combot\Modules\Url Parsing\Url_Parsing.cs,GetYoutubeDescription,The following statement contains a magic number: try              {                  string page = web.DownloadString(searchUrl);                    JObject parsed = (JObject)JsonConvert.DeserializeObject(page);                  var data = parsed["items"].First();                    description = string.Format("\u0002{0}\u000F"' data["snippet"]["title"]);                    if (data["contentDetails"]["duration"] == null)                  {                      return description;                  }                    string length = data["contentDetails"]["duration"].Value<string>();                    Regex lengthRegex = new Regex(@"PT((?<Days>[0-9]+)D)?((?<Hours>[0-9]+)H)?((?<Minutes>[0-9]+)M)?((?<Seconds>[0-9]+)S)?");                  Match lengthMatch = lengthRegex.Match(length);                  double totalTime = 0;                    if (lengthMatch.Groups["Days"].Success)                      totalTime += 86400.0 * Convert.ToDouble(lengthMatch.Groups["Days"].Value);                    if (lengthMatch.Groups["Hours"].Success)                      totalTime += 3600.0 * Convert.ToDouble(lengthMatch.Groups["Hours"].Value);                    if (lengthMatch.Groups["Minutes"].Success)                      totalTime += 60.0 * Convert.ToDouble(lengthMatch.Groups["Minutes"].Value);                    if (lengthMatch.Groups["Seconds"].Success)                      totalTime += Convert.ToDouble(lengthMatch.Groups["Seconds"].Value);                    TimeSpan duration = TimeSpan.FromSeconds(totalTime);                  description += string.Format(" | Length: \u0002{0}\u000F"' duration.ToString("g"));                    if (data["statistics"] != null)                  {                      JToken stats = data["statistics"];                      int likes = (stats["likeCount"] != null) ? stats["likeCount"].Value<int>() : 0;                      string pluralLikes = (likes > 1) ? "s" : string.Empty;                      int dislikes = (stats["dislikeCount"] != null) ? stats["dislikeCount"].Value<int>() : 0;                      string pluralDislikes = (dislikes > 1) ? "s" : string.Empty;                      double percent = 100.0 * ((double)likes / (likes + dislikes));                      description += string.Format(" | Rating: {0} Like{1}' {2} Dislike{3} (\u0002{4}\u000F%)"' likes' pluralLikes' dislikes' pluralDislikes' Math.Round(percent' 1));                        description += string.Format(" | Views: \u0002{0}\u000F"' data["statistics"]["viewCount"].Value<int>());                  }                    DateTime uploadDate = Convert.ToDateTime(data["snippet"]["publishedAt"].Value<string>());                    description += string.Format(" | Uploaded By: \u0002{0}\u000F on \u0002{1}\u000F"' data["snippet"]["channelTitle"].Value<string>()' uploadDate.ToString("R"));                    if (data["contentDetails"]["contentRating"] != null)                  {                      description += " | \u0002NSFW\u000F";                  }              }              catch (WebException ex)              {                  description = string.Empty;              }
Magic Number,Combot.Modules.Plugins,Url_Parsing,C:\repos\uncled1023_Combot\Modules\Url Parsing\Url_Parsing.cs,GetYoutubeDescription,The following statement contains a magic number: try              {                  string page = web.DownloadString(searchUrl);                    JObject parsed = (JObject)JsonConvert.DeserializeObject(page);                  var data = parsed["items"].First();                    description = string.Format("\u0002{0}\u000F"' data["snippet"]["title"]);                    if (data["contentDetails"]["duration"] == null)                  {                      return description;                  }                    string length = data["contentDetails"]["duration"].Value<string>();                    Regex lengthRegex = new Regex(@"PT((?<Days>[0-9]+)D)?((?<Hours>[0-9]+)H)?((?<Minutes>[0-9]+)M)?((?<Seconds>[0-9]+)S)?");                  Match lengthMatch = lengthRegex.Match(length);                  double totalTime = 0;                    if (lengthMatch.Groups["Days"].Success)                      totalTime += 86400.0 * Convert.ToDouble(lengthMatch.Groups["Days"].Value);                    if (lengthMatch.Groups["Hours"].Success)                      totalTime += 3600.0 * Convert.ToDouble(lengthMatch.Groups["Hours"].Value);                    if (lengthMatch.Groups["Minutes"].Success)                      totalTime += 60.0 * Convert.ToDouble(lengthMatch.Groups["Minutes"].Value);                    if (lengthMatch.Groups["Seconds"].Success)                      totalTime += Convert.ToDouble(lengthMatch.Groups["Seconds"].Value);                    TimeSpan duration = TimeSpan.FromSeconds(totalTime);                  description += string.Format(" | Length: \u0002{0}\u000F"' duration.ToString("g"));                    if (data["statistics"] != null)                  {                      JToken stats = data["statistics"];                      int likes = (stats["likeCount"] != null) ? stats["likeCount"].Value<int>() : 0;                      string pluralLikes = (likes > 1) ? "s" : string.Empty;                      int dislikes = (stats["dislikeCount"] != null) ? stats["dislikeCount"].Value<int>() : 0;                      string pluralDislikes = (dislikes > 1) ? "s" : string.Empty;                      double percent = 100.0 * ((double)likes / (likes + dislikes));                      description += string.Format(" | Rating: {0} Like{1}' {2} Dislike{3} (\u0002{4}\u000F%)"' likes' pluralLikes' dislikes' pluralDislikes' Math.Round(percent' 1));                        description += string.Format(" | Views: \u0002{0}\u000F"' data["statistics"]["viewCount"].Value<int>());                  }                    DateTime uploadDate = Convert.ToDateTime(data["snippet"]["publishedAt"].Value<string>());                    description += string.Format(" | Uploaded By: \u0002{0}\u000F on \u0002{1}\u000F"' data["snippet"]["channelTitle"].Value<string>()' uploadDate.ToString("R"));                    if (data["contentDetails"]["contentRating"] != null)                  {                      description += " | \u0002NSFW\u000F";                  }              }              catch (WebException ex)              {                  description = string.Empty;              }
Magic Number,Combot.Modules.Plugins,Url_Parsing,C:\repos\uncled1023_Combot\Modules\Url Parsing\Url_Parsing.cs,GetYoutubeDescription,The following statement contains a magic number: try              {                  string page = web.DownloadString(searchUrl);                    JObject parsed = (JObject)JsonConvert.DeserializeObject(page);                  var data = parsed["items"].First();                    description = string.Format("\u0002{0}\u000F"' data["snippet"]["title"]);                    if (data["contentDetails"]["duration"] == null)                  {                      return description;                  }                    string length = data["contentDetails"]["duration"].Value<string>();                    Regex lengthRegex = new Regex(@"PT((?<Days>[0-9]+)D)?((?<Hours>[0-9]+)H)?((?<Minutes>[0-9]+)M)?((?<Seconds>[0-9]+)S)?");                  Match lengthMatch = lengthRegex.Match(length);                  double totalTime = 0;                    if (lengthMatch.Groups["Days"].Success)                      totalTime += 86400.0 * Convert.ToDouble(lengthMatch.Groups["Days"].Value);                    if (lengthMatch.Groups["Hours"].Success)                      totalTime += 3600.0 * Convert.ToDouble(lengthMatch.Groups["Hours"].Value);                    if (lengthMatch.Groups["Minutes"].Success)                      totalTime += 60.0 * Convert.ToDouble(lengthMatch.Groups["Minutes"].Value);                    if (lengthMatch.Groups["Seconds"].Success)                      totalTime += Convert.ToDouble(lengthMatch.Groups["Seconds"].Value);                    TimeSpan duration = TimeSpan.FromSeconds(totalTime);                  description += string.Format(" | Length: \u0002{0}\u000F"' duration.ToString("g"));                    if (data["statistics"] != null)                  {                      JToken stats = data["statistics"];                      int likes = (stats["likeCount"] != null) ? stats["likeCount"].Value<int>() : 0;                      string pluralLikes = (likes > 1) ? "s" : string.Empty;                      int dislikes = (stats["dislikeCount"] != null) ? stats["dislikeCount"].Value<int>() : 0;                      string pluralDislikes = (dislikes > 1) ? "s" : string.Empty;                      double percent = 100.0 * ((double)likes / (likes + dislikes));                      description += string.Format(" | Rating: {0} Like{1}' {2} Dislike{3} (\u0002{4}\u000F%)"' likes' pluralLikes' dislikes' pluralDislikes' Math.Round(percent' 1));                        description += string.Format(" | Views: \u0002{0}\u000F"' data["statistics"]["viewCount"].Value<int>());                  }                    DateTime uploadDate = Convert.ToDateTime(data["snippet"]["publishedAt"].Value<string>());                    description += string.Format(" | Uploaded By: \u0002{0}\u000F on \u0002{1}\u000F"' data["snippet"]["channelTitle"].Value<string>()' uploadDate.ToString("R"));                    if (data["contentDetails"]["contentRating"] != null)                  {                      description += " | \u0002NSFW\u000F";                  }              }              catch (WebException ex)              {                  description = string.Empty;              }
Magic Number,Combot.Modules.Plugins,Url_Parsing,C:\repos\uncled1023_Combot\Modules\Url Parsing\Url_Parsing.cs,GetYoutubeDescription,The following statement contains a magic number: try              {                  string page = web.DownloadString(searchUrl);                    JObject parsed = (JObject)JsonConvert.DeserializeObject(page);                  var data = parsed["items"].First();                    description = string.Format("\u0002{0}\u000F"' data["snippet"]["title"]);                    if (data["contentDetails"]["duration"] == null)                  {                      return description;                  }                    string length = data["contentDetails"]["duration"].Value<string>();                    Regex lengthRegex = new Regex(@"PT((?<Days>[0-9]+)D)?((?<Hours>[0-9]+)H)?((?<Minutes>[0-9]+)M)?((?<Seconds>[0-9]+)S)?");                  Match lengthMatch = lengthRegex.Match(length);                  double totalTime = 0;                    if (lengthMatch.Groups["Days"].Success)                      totalTime += 86400.0 * Convert.ToDouble(lengthMatch.Groups["Days"].Value);                    if (lengthMatch.Groups["Hours"].Success)                      totalTime += 3600.0 * Convert.ToDouble(lengthMatch.Groups["Hours"].Value);                    if (lengthMatch.Groups["Minutes"].Success)                      totalTime += 60.0 * Convert.ToDouble(lengthMatch.Groups["Minutes"].Value);                    if (lengthMatch.Groups["Seconds"].Success)                      totalTime += Convert.ToDouble(lengthMatch.Groups["Seconds"].Value);                    TimeSpan duration = TimeSpan.FromSeconds(totalTime);                  description += string.Format(" | Length: \u0002{0}\u000F"' duration.ToString("g"));                    if (data["statistics"] != null)                  {                      JToken stats = data["statistics"];                      int likes = (stats["likeCount"] != null) ? stats["likeCount"].Value<int>() : 0;                      string pluralLikes = (likes > 1) ? "s" : string.Empty;                      int dislikes = (stats["dislikeCount"] != null) ? stats["dislikeCount"].Value<int>() : 0;                      string pluralDislikes = (dislikes > 1) ? "s" : string.Empty;                      double percent = 100.0 * ((double)likes / (likes + dislikes));                      description += string.Format(" | Rating: {0} Like{1}' {2} Dislike{3} (\u0002{4}\u000F%)"' likes' pluralLikes' dislikes' pluralDislikes' Math.Round(percent' 1));                        description += string.Format(" | Views: \u0002{0}\u000F"' data["statistics"]["viewCount"].Value<int>());                  }                    DateTime uploadDate = Convert.ToDateTime(data["snippet"]["publishedAt"].Value<string>());                    description += string.Format(" | Uploaded By: \u0002{0}\u000F on \u0002{1}\u000F"' data["snippet"]["channelTitle"].Value<string>()' uploadDate.ToString("R"));                    if (data["contentDetails"]["contentRating"] != null)                  {                      description += " | \u0002NSFW\u000F";                  }              }              catch (WebException ex)              {                  description = string.Empty;              }
