Implementation smell,Namespace,Class,File,Method,Description
Long Method,Combot.Modules.Plugins,Moderation,D:\research\architectureSmells\repos\uncled1023_Combot\Modules\Moderation\Moderation.cs,ParseCommand,The method has 103 lines of code.
Complex Method,Combot.Modules.Plugins,Moderation,D:\research\architectureSmells\repos\uncled1023_Combot\Modules\Moderation\Moderation.cs,ParseCommand,Cyclomatic complexity of the method is 28
Complex Method,Combot.Modules.Plugins,Moderation,D:\research\architectureSmells\repos\uncled1023_Combot\Modules\Moderation\Moderation.cs,BanNick,Cyclomatic complexity of the method is 9
Long Statement,Combot.Modules.Plugins,Moderation,D:\research\architectureSmells\repos\uncled1023_Combot\Modules\Moderation\Moderation.cs,ParseCommand,The length of the statement  "                        SendResponse(command.MessageType' command.Location' command.Nick.Nickname' string.Format("I am not in \u0002{0}\u0002"' channel)); " is 130.
Long Statement,Combot.Modules.Plugins,Moderation,D:\research\architectureSmells\repos\uncled1023_Combot\Modules\Moderation\Moderation.cs,ModifyUserPrivilege,The length of the statement  "                string noAccessMessage = string.Format("You do not have access to set mode \u0002+{0}\u000F for \u0002{1}\u000F on \u0002{2}\u000F."' mode' command.Arguments["Nickname"]' channel); " is 180.
Long Statement,Combot.Modules.Plugins,Moderation,D:\research\architectureSmells\repos\uncled1023_Combot\Modules\Moderation\Moderation.cs,ModifyAutoUserPrivilege,The length of the statement  "                Bot.IRC.Command.SendPrivateMessage("ChanServ"' string.Format("{0} {1} {2} {3}"' optionCommand' channel' command.Arguments["Option"]' command.Arguments["Nickname"])); " is 165.
Long Statement,Combot.Modules.Plugins,Moderation,D:\research\architectureSmells\repos\uncled1023_Combot\Modules\Moderation\Moderation.cs,ModifyAutoUserPrivilege,The length of the statement  "                string noAccessMessage = string.Format("You do not have access to \u0002{0}\u000F \u0002{1}\u000F to the \u0002{2}\u000F list on \u0002{3}\u000F."' command.Arguments["Option"].ToLower()' command.Arguments["Nickname"]' optionCommand' channel); " is 242.
Long Statement,Combot.Modules.Plugins,Moderation,D:\research\architectureSmells\repos\uncled1023_Combot\Modules\Moderation\Moderation.cs,ModifyChannelModes,The length of the statement  "                    string noAccessMessage = string.Format("You do not have access to set mode \u0002+{0}\u000F on \u0002{1}\u000F."' mode' channel); " is 129.
Long Statement,Combot.Modules.Plugins,Moderation,D:\research\architectureSmells\repos\uncled1023_Combot\Modules\Moderation\Moderation.cs,ModifyChannelModes,The length of the statement  "                string noAccessMessage = string.Format("You do not have access to use \u0002{0}\u000F on \u0002{1}\u000F."' command.Command' channel); " is 134.
Long Statement,Combot.Modules.Plugins,Moderation,D:\research\architectureSmells\repos\uncled1023_Combot\Modules\Moderation\Moderation.cs,AutoBan,The length of the statement  "            if (Bot.CheckChannelAccess(channel' command.Nick.Nickname' curCommand.AllowedAccess) && (!hasNick || Bot.CheckNickAccess(channel' command.Nick.Nickname' nickname))) " is 164.
Long Statement,Combot.Modules.Plugins,Moderation,D:\research\architectureSmells\repos\uncled1023_Combot\Modules\Moderation\Moderation.cs,AutoBan,The length of the statement  "                string noAccessMessage = string.Format("You do not have access to {0} an auto ban for \u0002{1}\u000F on \u0002{2}\u000F."' method' command.Arguments["Nickname"]' channel); " is 172.
Long Statement,Combot.Modules.Plugins,Moderation,D:\research\architectureSmells\repos\uncled1023_Combot\Modules\Moderation\Moderation.cs,BanNick,The length of the statement  "            if (Bot.CheckChannelAccess(channel' command.Nick.Nickname' curCommand.AllowedAccess) && Bot.CheckNickAccess(channel' command.Nick.Nickname' command.Arguments["Nickname"])) " is 171.
Long Statement,Combot.Modules.Plugins,Moderation,D:\research\architectureSmells\repos\uncled1023_Combot\Modules\Moderation\Moderation.cs,BanNick,The length of the statement  "                string noAccessMessage = string.Format("You do not have access to {0} \u0002{1}\u000F on \u0002{2}\u000F."' banMessage' command.Arguments["Nickname"]' channel); " is 160.
Long Statement,Combot.Modules.Plugins,Moderation,D:\research\architectureSmells\repos\uncled1023_Combot\Modules\Moderation\Moderation.cs,KickNick,The length of the statement  "            if (Bot.CheckChannelAccess(channel' command.Nick.Nickname' curCommand.AllowedAccess) && Bot.CheckNickAccess(channel' command.Nick.Nickname' command.Arguments["Nickname"])) " is 171.
Long Statement,Combot.Modules.Plugins,Moderation,D:\research\architectureSmells\repos\uncled1023_Combot\Modules\Moderation\Moderation.cs,KickNick,The length of the statement  "                string noAccessMessage = string.Format("You do not have access to kick \u0002{0}\u000F from \u0002{1}\u000F."' command.Arguments["Nickname"]' channel); " is 151.
Long Statement,Combot.Modules.Plugins,Moderation,D:\research\architectureSmells\repos\uncled1023_Combot\Modules\Moderation\Moderation.cs,ClearChannel,The length of the statement  "                string noAccessMessage = string.Format("You do not have access to clear \u0002{0}\u000F on \u0002{1}\u000F."' command.Arguments["Target"]' channel); " is 148.
Long Statement,Combot.Modules.Plugins,Moderation,D:\research\architectureSmells\repos\uncled1023_Combot\Modules\Moderation\Moderation.cs,AddAutoBan,The length of the statement  "                                "`channel_id` = (SELECT `channels`.`id` FROM `channels` INNER JOIN `servers` ON `servers`.`id` = `channels`.`server_id` WHERE `servers`.`name` = {1} && `channels`.`name` = {2})' " + " is 181.
Long Statement,Combot.Modules.Plugins,Moderation,D:\research\architectureSmells\repos\uncled1023_Combot\Modules\Moderation\Moderation.cs,AddAutoBan,The length of the statement  "                                "`nick_id` = (SELECT `nicks`.`id` FROM `nicks` INNER JOIN `servers` ON `servers`.`id` = `nicks`.`server_id` WHERE `servers`.`name` = {3} && `nickname` = {4})' " + " is 162.
Long Statement,Combot.Modules.Plugins,Moderation,D:\research\architectureSmells\repos\uncled1023_Combot\Modules\Moderation\Moderation.cs,AddAutoBan,The length of the statement  "                                "`request_nick_id` = (SELECT `nicks`.`id` FROM `nicks` INNER JOIN `servers` ON `servers`.`id` = `nicks`.`server_id` WHERE `servers`.`name` = {5} && `nickname` = {6})' " + " is 170.
Long Statement,Combot.Modules.Plugins,Moderation,D:\research\architectureSmells\repos\uncled1023_Combot\Modules\Moderation\Moderation.cs,AddAutoBan,The length of the statement  "                Bot.Database.Execute(query' new object[] { Bot.ServerConfig.Name' Bot.ServerConfig.Name' channel' Bot.ServerConfig.Name' nickname' Bot.ServerConfig.Name' command.Nick.Nickname' reason' command.TimeStamp }); " is 206.
Long Statement,Combot.Modules.Plugins,Moderation,D:\research\architectureSmells\repos\uncled1023_Combot\Modules\Moderation\Moderation.cs,ViewAutoBan,The length of the statement  "                    string introMessage = string.Format("Auto Ban \u0002{0}\u0002 by {1} on {2} for reason: {3}"' GetNickname(nickID)' GetNickname(requestID)' addedTime.ToString("G")' results[i]["Reason"]); " is 186.
Long Statement,Combot.Modules.Plugins,Moderation,D:\research\architectureSmells\repos\uncled1023_Combot\Modules\Moderation\Moderation.cs,GetAutoBanList,The length of the statement  "                    nickJoin = @"INNER JOIN `nicks` ON `autobans`.`nick_id` = `nicks`.`id` INNER JOIN `nickinfo` ON `autobans`.`nick_id` = `nickinfo`.`nick_id` "; " is 142.
Long Statement,Combot.Modules.Plugins,Moderation,D:\research\architectureSmells\repos\uncled1023_Combot\Modules\Moderation\Moderation.cs,GetAutoBanList,The length of the statement  "            string search = "SELECT `autobans`.`id` AS `BanID`' `autobans`.`nick_id` AS `NickID`' `autobans`.`request_nick_id` AS `RequestID`' `autobans`.`reason` AS `Reason`' `autobans`.`date_added` AS `DateAdded` FROM `autobans` " + " is 222.
Complex Conditional,Combot.Modules.Plugins,Moderation,D:\research\architectureSmells\repos\uncled1023_Combot\Modules\Moderation\Moderation.cs,HandleJoinEvent,The conditional expression  "Enabled                  && !Bot.ServerConfig.ChannelBlacklist.Contains(info.Channel)                  && !Bot.ServerConfig.NickBlacklist.Contains(info.Nick.Nickname)                  && !ChannelBlacklist.Contains(info.Channel)                  && !NickBlacklist.Contains(info.Nick.Nickname)"  is complex.
Complex Conditional,Combot.Modules.Plugins,Moderation,D:\research\architectureSmells\repos\uncled1023_Combot\Modules\Moderation\Moderation.cs,HandleChannelMessageEvent,The conditional expression  "Enabled                  && !Bot.ServerConfig.ChannelBlacklist.Contains(info.Channel)                  && !Bot.ServerConfig.NickBlacklist.Contains(info.Sender.Nickname)                  && !ChannelBlacklist.Contains(info.Channel)                  && !NickBlacklist.Contains(info.Sender.Nickname)"  is complex.
Complex Conditional,Combot.Modules.Plugins,Moderation,D:\research\architectureSmells\repos\uncled1023_Combot\Modules\Moderation\Moderation.cs,HandleChannelNoticeEvent,The conditional expression  "Enabled                  && !Bot.ServerConfig.ChannelBlacklist.Contains(info.Channel)                  && !Bot.ServerConfig.NickBlacklist.Contains(info.Sender.Nickname)                  && !ChannelBlacklist.Contains(info.Channel)                  && !NickBlacklist.Contains(info.Sender.Nickname)"  is complex.
Magic Number,Combot.Modules.Plugins,Moderation,D:\research\architectureSmells\repos\uncled1023_Combot\Modules\Moderation\Moderation.cs,TimedBan,The following statement contains a magic number: unban_trigger.Interval = (timeout * 1000.0);
Missing Default,Combot.Modules.Plugins,Moderation,D:\research\architectureSmells\repos\uncled1023_Combot\Modules\Moderation\Moderation.cs,ParseCommand,The following switch statement is missing a default case: switch (foundCommand.Name)              {                  // Privilege Mode Commands                  case "Founder":                      ModifyUserPrivilege(true' command' ChannelMode.q);                      break;                  case "Remove Founder":                      ModifyUserPrivilege(false' command' ChannelMode.q);                      break;                  case "SOP":                      ModifyUserPrivilege(true' command' ChannelMode.a);                      break;                  case "Remove SOP":                      ModifyUserPrivilege(false' command' ChannelMode.a);                      break;                  case "OP":                      ModifyUserPrivilege(true' command' ChannelMode.o);                      break;                  case "Remove OP":                      ModifyUserPrivilege(false' command' ChannelMode.o);                      break;                  case "HOP":                      ModifyUserPrivilege(true' command' ChannelMode.h);                      break;                  case "Remove HOP":                      ModifyUserPrivilege(false' command' ChannelMode.h);                      break;                  case "Voice":                      ModifyUserPrivilege(true' command' ChannelMode.v);                      break;                  case "Remove Voice":                      ModifyUserPrivilege(false' command' ChannelMode.v);                      break;                  // Auto Privilege Management                  case "ASOP":                      ModifyAutoUserPrivilege("SOP"' command' ChannelMode.a);                      break;                  case "AOP":                      ModifyAutoUserPrivilege("AOP"' command' ChannelMode.o);                      break;                  case "AHOP":                      ModifyAutoUserPrivilege("HOP"' command' ChannelMode.h);                      break;                  case "AVoice":                      ModifyAutoUserPrivilege("VOP"' command' ChannelMode.v);                      break;                  // Channel Moderation                  case "Mode":                      ModifyChannelModes(foundCommand' command);                      break;                  case "Topic":                      ModifyChannelTopic(foundCommand' command);                      break;                  case "Invite":                      InviteNick(foundCommand' command);                      break;                  case "Auto Ban":                      AutoBan(foundCommand' command);                      break;                  case "Ban":                      BanNick(true' foundCommand' command);                      break;                  case "UnBan":                      BanNick(false' foundCommand' command);                      break;                  case "Kick Ban":                      BanNick(true' foundCommand' command);                      KickNick(foundCommand' command);                      break;                  case "Timed Ban":                      TimedBan(foundCommand' command);                      break;                  case "Timed Kick Ban":                      TimedBan(foundCommand' command);                      KickNick(foundCommand' command);                      break;                  case "Kick":                      KickNick(foundCommand' command);                      break;                  case "Kick Self":                      KickSelf(command);                      break;                  case "Clear":                      ClearChannel(foundCommand' command);                      break;                  case "Roll Call":                      string channel = command.Arguments.ContainsKey("Channel") ? command.Arguments["Channel"] : command.Location;                      Channel foundChannel = Bot.IRC.Channels.Find(chan => chan.Name == channel);                      if (foundChannel != null)                      {                          string rollCall = string.Join("' "' foundChannel.Nicks.Select(nick => nick.Nickname));                          Bot.IRC.Command.SendPrivateMessage(channel' "It's time for a Roll Call!");                          Bot.IRC.Command.SendPrivateMessage(channel' rollCall);                      }                      else                      {                          SendResponse(command.MessageType' command.Location' command.Nick.Nickname' string.Format("I am not in \u0002{0}\u0002"' channel));                      }                      break;              }
Missing Default,Combot.Modules.Plugins,Moderation,D:\research\architectureSmells\repos\uncled1023_Combot\Modules\Moderation\Moderation.cs,ModifyChannelModes,The following switch statement is missing a default case: switch (modeList[i].Mode)                      {                          case ChannelMode.v:                          case ChannelMode.h:                          case ChannelMode.o:                          case ChannelMode.a:                          case ChannelMode.q:                              allowedMode = Bot.CheckChannelAccess(channel' command.Nick.Nickname' Bot.ChannelModeMapping[modeList[i].Mode]);                              if (!allowedMode)                              {                                  mode = modeList[i].Mode;                              }                              break;                      }
Missing Default,Combot.Modules.Plugins,Moderation,D:\research\architectureSmells\repos\uncled1023_Combot\Modules\Moderation\Moderation.cs,AutoBan,The following switch statement is missing a default case: switch (method.ToLower())                  {                      case "add":                          // Set the auto ban                          AddAutoBan(command);                            // Process the auto ban now that we added it                          if (command.Arguments.ContainsKey("Reason"))                          {                              command.Arguments["Reason"] = string.Format("[Auto Ban] {0}"' command.Arguments["Reason"].ToString());                          }                          else                          {                              command.Arguments.Add("Reason"' "[Auto Ban] No Reason Specified");                          }                          command.Arguments["Nickname"] = banMask;                          TimedBan(curCommand' command);                          command.Arguments["Nickname"] = nickname;                          KickNick(curCommand' command);                          break;                      case "delete":                      case "del":                          // Remove the auto-ban                          DeleteAutoBan(command);                            // Force an unban in case they are still banned                          command.Arguments["Nickname"] = banMask;                          BanNick(false' curCommand' command);                          break;                      case "view":                          ViewAutoBan(command);                          break;                  }
