Implementation smell,Namespace,Class,File,Method,Description
Long Method,FlickrNet,Photoset,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Photoset.cs,Load,The method has 109 lines of code.
Long Method,FlickrNet,Photo,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Photo.cs,Load,The method has 308 lines of code.
Long Method,FlickrNet,TopicReplyCollection,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\TopicReplyCollection.cs,Load,The method has 113 lines of code.
Complex Method,FlickrNet,ActivityEvent,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\ActivityEvent.cs,Load,Cyclomatic complexity of the method is 22
Complex Method,FlickrNet,ActivityItem,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\ActivityItem.cs,LoadAttributes,Cyclomatic complexity of the method is 27
Complex Method,FlickrNet,Blog,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Blog.cs,Load,Cyclomatic complexity of the method is 8
Complex Method,FlickrNet,Camera,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Camera.cs,Load,Cyclomatic complexity of the method is 12
Complex Method,FlickrNet,Contact,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Contact.cs,Load,Cyclomatic complexity of the method is 16
Complex Method,FlickrNet,ExifTag,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\ExifTag.cs,Load,Cyclomatic complexity of the method is 10
Complex Method,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PeopleGetPhotosAsync,Cyclomatic complexity of the method is 11
Complex Method,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PlacesPlacesForUserAsync,Cyclomatic complexity of the method is 8
Complex Method,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PlacesPlacesForTagsAsync,Cyclomatic complexity of the method is 12
Complex Method,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PlacesPlacesForContactsAsync,Cyclomatic complexity of the method is 9
Complex Method,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PlacesTagsForPlaceAsync,Cyclomatic complexity of the method is 8
Complex Method,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PushSubscribe,Cyclomatic complexity of the method is 11
Complex Method,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PushSubscribeAsync,Cyclomatic complexity of the method is 11
Complex Method,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,UploadPicture,Cyclomatic complexity of the method is 8
Complex Method,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,UploadPictureAsync,Cyclomatic complexity of the method is 8
Complex Method,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PeopleGetPhotos,Cyclomatic complexity of the method is 11
Complex Method,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PlacesPlacesForUser,Cyclomatic complexity of the method is 8
Complex Method,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PlacesPlacesForTags,Cyclomatic complexity of the method is 12
Complex Method,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PlacesPlacesForContacts,Cyclomatic complexity of the method is 9
Complex Method,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PlacesTagsForPlace,Cyclomatic complexity of the method is 8
Complex Method,FlickrNet,Gallery,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Gallery.cs,Load,Cyclomatic complexity of the method is 27
Complex Method,FlickrNet,GalleryCollection,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\GalleryCollection.cs,Load,Cyclomatic complexity of the method is 10
Complex Method,FlickrNet,GalleryPhotoCollection,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\GalleryPhotoCollection.cs,Load,Cyclomatic complexity of the method is 8
Complex Method,FlickrNet,GroupCategory,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\GroupCategory.cs,Load,Cyclomatic complexity of the method is 8
Complex Method,FlickrNet,Collection,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Collection.cs,Load,Cyclomatic complexity of the method is 12
Complex Method,FlickrNet,CollectionInfo,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\CollectionInfo.cs,Load,Cyclomatic complexity of the method is 15
Complex Method,FlickrNet,GroupFullInfo,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\GroupFullInfo.cs,Load,Cyclomatic complexity of the method is 21
Complex Method,FlickrNet,Institution,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Institution.cs,Load,Cyclomatic complexity of the method is 9
Complex Method,FlickrNet,MemberGroupInfo,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\MemberGroupInfo.cs,Load,Cyclomatic complexity of the method is 13
Complex Method,FlickrNet,MemberGroupInfoCollection,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\MemberGroupInfoCollection.cs,Load,Cyclomatic complexity of the method is 8
Complex Method,FlickrNet,NamespaceCollection,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\NamespaceCollection.cs,Load,Cyclomatic complexity of the method is 8
Complex Method,FlickrNet,PairCollection,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\PairCollection.cs,Load,Cyclomatic complexity of the method is 10
Complex Method,FlickrNet,PersonLimits,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\PersonLimits.cs,Load,Cyclomatic complexity of the method is 10
Complex Method,FlickrNet,PhotoComment,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\PhotoComment.cs,Load,Cyclomatic complexity of the method is 13
Complex Method,FlickrNet,ContactCollection,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\ContactCollection.cs,Load,Cyclomatic complexity of the method is 8
Complex Method,FlickrNet,ContextPhoto,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Context.cs,Load,Cyclomatic complexity of the method is 9
Complex Method,FlickrNet,PhotoPerson,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\PhotoPerson.cs,Load,Cyclomatic complexity of the method is 14
Complex Method,FlickrNet,Photoset,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Photoset.cs,Load,Cyclomatic complexity of the method is 28
Complex Method,FlickrNet,PhotosetPhotoCollection,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\PhotosetPhotoCollection.cs,Load,Cyclomatic complexity of the method is 14
Complex Method,FlickrNet,PlaceInfo,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\PlaceInfo.cs,LoadElements,Cyclomatic complexity of the method is 10
Complex Method,FlickrNet,PlaceInfo,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\PlaceInfo.cs,LoadAttributes,Cyclomatic complexity of the method is 17
Complex Method,FlickrNet,PopularPhoto,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\PopularPhoto.cs,Load,Cyclomatic complexity of the method is 11
Complex Method,FlickrNet,PopularPhotoCollection,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\PopularPhotoCollection.cs,Load,Cyclomatic complexity of the method is 8
Complex Method,FlickrNet,PredicateCollection,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\PredicateCollection.cs,Load,Cyclomatic complexity of the method is 8
Complex Method,FlickrNet,GroupInfo,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\GroupInfo.cs,Load,Cyclomatic complexity of the method is 14
Complex Method,FlickrNet,Profile,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Profile.cs,Load,Cyclomatic complexity of the method is 19
Complex Method,FlickrNet,ShapeData,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\ShapeData.cs,Load,Cyclomatic complexity of the method is 13
Complex Method,FlickrNet,ShapeDataCollection,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\ShapeDataCollection.cs,Load,Cyclomatic complexity of the method is 12
Complex Method,FlickrNet,ExceptionHandler,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\ExceptionHandler.cs,CreateException,Cyclomatic complexity of the method is 11
Complex Method,FlickrNet,ExifTagCollection,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\ExifTagCollection.cs,Load,Cyclomatic complexity of the method is 9
Complex Method,FlickrNet,FlickrConfigurationSettings,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\FlickrConfigurationSettings.cs,FlickrConfigurationSettings,Cyclomatic complexity of the method is 13
Complex Method,FlickrNet,FlickrConfigurationSettings,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\FlickrConfigurationSettings.cs,ProcessProxyNode,Cyclomatic complexity of the method is 13
Complex Method,FlickrNet,GroupInfoRestrictions,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Groups.cs,Load,Cyclomatic complexity of the method is 10
Complex Method,FlickrNet,GroupSearchResultCollection,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\GroupSearchResultCollection.cs,Load,Cyclomatic complexity of the method is 8
Complex Method,FlickrNet,GroupSearchResult,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\GroupSearchResultCollection.cs,Load,Cyclomatic complexity of the method is 12
Complex Method,FlickrNet,Method,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\MethodCollection.cs,Load,Cyclomatic complexity of the method is 12
Complex Method,FlickrNet,PandaPhotoCollection,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\PandaPhotoCollection.cs,Load,Cyclomatic complexity of the method is 9
Complex Method,FlickrNet,PeoplePhotoCollection,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\PeoplePhotoCollection.cs,Load,Cyclomatic complexity of the method is 10
Complex Method,FlickrNet,Person,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Person.cs,LoadElements,Cyclomatic complexity of the method is 12
Complex Method,FlickrNet,Person,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Person.cs,LoadAttributes,Cyclomatic complexity of the method is 24
Complex Method,FlickrNet,Photo,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Photo.cs,Load,Cyclomatic complexity of the method is 99
Complex Method,FlickrNet,PhotoInfo,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\PhotoInfo.cs,LoadElements,Cyclomatic complexity of the method is 20
Complex Method,FlickrNet,PhotoInfo,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\PhotoInfo.cs,LoadAttributes,Cyclomatic complexity of the method is 15
Complex Method,FlickrNet,PhotoInfo,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\PhotoInfo.cs,ParseOwner,Cyclomatic complexity of the method is 9
Complex Method,FlickrNet,PhotoInfoNote,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\PhotoInfo.cs,Load,Cyclomatic complexity of the method is 15
Complex Method,FlickrNet,PhotoInfoTag,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\PhotoInfo.cs,Load,Cyclomatic complexity of the method is 8
Complex Method,FlickrNet,PhotoPermissions,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\PhotoPermissions.cs,Load,Cyclomatic complexity of the method is 8
Complex Method,FlickrNet,PhotoCollection,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\PhotoCollection.cs,Load,Cyclomatic complexity of the method is 9
Complex Method,FlickrNet,PhotoSearchOptions,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\PhotoSearchOptions.cs,AddToDictionary,Cyclomatic complexity of the method is 53
Complex Method,FlickrNet,PhotosetCollection,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\PhotoSetCollection.cs,Load,Cyclomatic complexity of the method is 9
Complex Method,FlickrNet,Place,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Place.cs,Load,Cyclomatic complexity of the method is 17
Complex Method,FlickrNet,Size,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Sizes.cs,Load,Cyclomatic complexity of the method is 8
Complex Method,FlickrNet,StatDomainCollection,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\StatDomainCollection.cs,Load,Cyclomatic complexity of the method is 8
Complex Method,FlickrNet,StatReferrerCollection,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\StatReferrerCollection.cs,Load,Cyclomatic complexity of the method is 9
Complex Method,FlickrNet,StatViews,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\StatViews.cs,Load,Cyclomatic complexity of the method is 9
Complex Method,FlickrNet,Subscription,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Subscription.cs,Load,Cyclomatic complexity of the method is 10
Complex Method,FlickrNet,Suggestion,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Suggestion.cs,Load,Cyclomatic complexity of the method is 16
Complex Method,FlickrNet,Topic,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Topic.cs,Load,Cyclomatic complexity of the method is 28
Complex Method,FlickrNet,TopicCollection,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\TopicCollection.cs,Load,Cyclomatic complexity of the method is 18
Complex Method,FlickrNet,TopicReply,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\TopicReply.cs,Load,Cyclomatic complexity of the method is 19
Complex Method,FlickrNet,TopicReplyCollection,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\TopicReplyCollection.cs,Load,Cyclomatic complexity of the method is 35
Complex Method,FlickrNet,UserStatus,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\User.cs,LoadElements,Cyclomatic complexity of the method is 8
Complex Method,FlickrNet,UserStatus,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\User.cs,LoadAttributes,Cyclomatic complexity of the method is 9
Complex Method,FlickrNet,UserStatus,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\User.cs,ParseBandwidth,Cyclomatic complexity of the method is 9
Complex Method,FlickrNet,UtilityMethods,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\UtilityMethods.cs,SortOrderToString,Cyclomatic complexity of the method is 8
Complex Method,FlickrNet,UtilityMethods,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\UtilityMethods.cs,PartialOptionsIntoArray,Cyclomatic complexity of the method is 12
Complex Method,FlickrNet,ValueCollection,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\ValueCollection.cs,Load,Cyclomatic complexity of the method is 14
Complex Method,FlickrNet,VideoInfo,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\VideoInfo.cs,Load,Cyclomatic complexity of the method is 8
Long Parameter List,FlickrNet,BoundaryBox,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\BoundaryBox.cs,BoundaryBox,The method has 5 parameters. Parameters: minimumLongitude' minimumLatitude' maximumLongitude' maximumLatitude' accuracy
Long Parameter List,FlickrNet,FlickrResponder,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\FlickrResponder.cs,DownloadDataAsync,The method has 6 parameters. Parameters: method' baseUrl' data' contentType' authHeader' callback
Long Parameter List,FlickrNet,FlickrResponder,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\FlickrResponder.cs,DownloadData,The method has 5 parameters. Parameters: method' baseUrl' data' contentType' authHeader
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,ActivityUserPhotosAsync,The method has 5 parameters. Parameters: timePeriod' timeType' page' perPage' callback
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,BlogsPostPhotoAsync,The method has 5 parameters. Parameters: blogId' photoId' title' description' callback
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,BlogsPostPhotoAsync,The method has 6 parameters. Parameters: blogId' photoId' title' description' blogPassword' callback
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,FavoritesGetListAsync,The method has 7 parameters. Parameters: userId' minFavoriteDate' maxFavoriteDate' extras' page' perPage' callback
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,FavoritesGetPublicListAsync,The method has 7 parameters. Parameters: userId' minFavoriteDate' maxFavoriteDate' extras' page' perPage' callback
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,FavoritesGetContextAsync,The method has 5 parameters. Parameters: photoId' userId' numPrevious' numNext' callback
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,FavoritesGetContextAsync,The method has 6 parameters. Parameters: photoId' userId' numPrevious' numNext' extras' callback
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,GroupsMembersGetListAsync,The method has 5 parameters. Parameters: groupId' page' perPage' memberTypes' callback
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,GroupsPoolsGetPhotosAsync,The method has 5 parameters. Parameters: groupId' tags' page' perPage' callback
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,GroupsPoolsGetPhotosAsync,The method has 7 parameters. Parameters: groupId' tags' userId' extras' page' perPage' callback
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,InterestingnessGetListAsync,The method has 5 parameters. Parameters: date' extras' page' perPage' callback
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,MachineTagsGetRecentValues,The method has 5 parameters. Parameters: namespaceName' predicate' addedSince' page' perPage
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,MachineTagsGetPairsAsync,The method has 5 parameters. Parameters: namespaceName' predicate' page' perPage' callback
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,MachineTagsGetValuesAsync,The method has 5 parameters. Parameters: namespaceName' predicate' page' perPage' callback
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,MachineTagsGetRecentValuesAsync,The method has 5 parameters. Parameters: namespaceName' predicate' page' perPage' callback
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,MachineTagsGetRecentValuesAsync,The method has 6 parameters. Parameters: namespaceName' predicate' addedSince' page' perPage' callback
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosNotesAddAsync,The method has 7 parameters. Parameters: photoId' noteX' noteY' noteWidth' noteHeight' noteText' callback
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosNotesEditAsync,The method has 7 parameters. Parameters: noteId' noteX' noteY' noteWidth' noteHeight' noteText' callback
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PandaGetPhotosAsync,The method has 5 parameters. Parameters: pandaName' extras' page' perPage' callback
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PeopleGetPublicPhotosAsync,The method has 6 parameters. Parameters: userId' page' perPage' safetyLevel' extras' callback
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PeopleGetPhotosAsync,The method has 5 parameters. Parameters: userId' extras' page' perPage' callback
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PeopleGetPhotosAsync,The method has 12 parameters. Parameters: userId' safeSearch' minUploadDate' maxUploadDate' minTakenDate' maxTakenDate' contentType' privacyFilter' extras' page' perPage' callback
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PeopleGetPhotosOfAsync,The method has 5 parameters. Parameters: userId' extras' page' perPage' callback
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosGetContactsPhotosAsync,The method has 6 parameters. Parameters: count' justFriends' singlePhoto' includeSelf' extras' callback
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosGetContactsPublicPhotosAsync,The method has 6 parameters. Parameters: userId' count' justFriends' singlePhoto' includeSelf' callback
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosGetContactsPublicPhotosAsync,The method has 7 parameters. Parameters: userId' count' justFriends' singlePhoto' includeSelf' extras' callback
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosRecentlyUpdatedAsync,The method has 5 parameters. Parameters: minDate' extras' page' perPage' callback
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosSetDatesAsync,The method has 5 parameters. Parameters: photoId' datePosted' dateTaken' granularity' callback
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosSetPermsAsync,The method has 7 parameters. Parameters: photoId' isPublic' isFriend' isFamily' permComment' permAddMeta' callback
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosSetPermsAsync,The method has 7 parameters. Parameters: photoId' isPublic' isFriend' isFamily' permComment' permAddMeta' callback
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosCommentsGetRecentForContactsAsync,The method has 5 parameters. Parameters: dateLastComment' extras' page' perPage' callback
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosCommentsGetRecentForContactsAsync,The method has 6 parameters. Parameters: dateLastComment' contactsFilter' extras' page' perPage' callback
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosetsGetPhotosAsync,The method has 5 parameters. Parameters: photosetId' privacyFilter' page' perPage' callback
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosetsGetPhotosAsync,The method has 5 parameters. Parameters: photosetId' extras' page' perPage' callback
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosetsGetPhotosAsync,The method has 6 parameters. Parameters: photosetId' extras' privacyFilter' page' perPage' callback
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosetsGetPhotosAsync,The method has 7 parameters. Parameters: photosetId' extras' privacyFilter' page' perPage' media' callback
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosGeoBatchCorrectLocationAsync,The method has 6 parameters. Parameters: latitude' longitude' accuracy' placeId' woeId' callback
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosGeoSetLocationAsync,The method has 5 parameters. Parameters: photoId' latitude' longitude' accuracy' callback
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosGeoPhotosForLocationAsync,The method has 7 parameters. Parameters: latitude' longitude' accuracy' extras' perPage' page' callback
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosGeoSetPermsAsync,The method has 6 parameters. Parameters: photoId' isPublic' isContact' isFamily' isFriend' callback
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosPeopleAdd,The method has 6 parameters. Parameters: photoId' userId' personX' personY' personWidth' personHeight
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosPeopleEditCoords,The method has 6 parameters. Parameters: photoId' userId' personX' personY' personWidth' personHeight
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosPeopleAddAsync,The method has 7 parameters. Parameters: photoId' userId' personX' personY' personWidth' personHeight' callback
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosPeopleEditCoordsAsync,The method has 7 parameters. Parameters: photoId' userId' personX' personY' personWidth' personHeight' callback
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosSuggestionsSuggestLocationAsync,The method has 8 parameters. Parameters: photoId' latitude' longitude' accuracy' woeId' placeId' note' callback
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PlacesGetTopPlacesListAsync,The method has 5 parameters. Parameters: placeType' date' placeId' woeId' callback
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PlacesPlacesForUserAsync,The method has 9 parameters. Parameters: placeType' woeId' placeId' threshold' minUploadDate' maxUploadDate' minTakenDate' maxTakenDate' callback
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PlacesPlacesForTagsAsync,The method has 13 parameters. Parameters: placeType' woeId' placeId' threshold' tags' tagMode' machineTags' machineTagMode' minUploadDate' maxUploadDate' minTakenDate' maxTakenDate' callback
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PlacesPlacesForContactsAsync,The method has 10 parameters. Parameters: placeType' woeId' placeId' threshold' contactType' minUploadDate' maxUploadDate' minTakenDate' maxTakenDate' callback
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PlacesPlacesForBoundingBoxAsync,The method has 5 parameters. Parameters: placeType' woeId' placeId' boundaryBox' callback
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PlacesTagsForPlaceAsync,The method has 7 parameters. Parameters: placeId' woeId' minUploadDate' maxUploadDate' minTakenDate' maxTakenDate' callback
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PushSubscribe,The method has 14 parameters. Parameters: topic' callback' verify' verifyToken' leaseSeconds' woeIds' placeIds' latitude' longitude' radius' radiusUnits' accuracy' nsids' tags
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PushSubscribeAsync,The method has 15 parameters. Parameters: topic' callback' verify' verifyToken' leaseSeconds' woeIds' placeIds' latitude' longitude' radius' radiusUnits' accuracy' nsids' tags' callbackAction
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PushUnsubscribeAsync,The method has 5 parameters. Parameters: topic' callback' verify' verifyToken' callbackAction
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,StatsGetCollectionDomainsAsync,The method has 5 parameters. Parameters: date' collectionId' page' perPage' callback
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,StatsGetPhotoDomainsAsync,The method has 5 parameters. Parameters: date' photoId' page' perPage' callback
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,StatsGetPhotosetDomainsAsync,The method has 5 parameters. Parameters: date' photosetId' page' perPage' callback
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,StatsGetPhotoReferrersAsync,The method has 5 parameters. Parameters: date' domain' page' perPage' callback
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,StatsGetPhotoReferrersAsync,The method has 6 parameters. Parameters: date' domain' photoId' page' perPage' callback
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,StatsGetPhotosetReferrersAsync,The method has 5 parameters. Parameters: date' domain' page' perPage' callback
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,StatsGetPhotosetReferrersAsync,The method has 6 parameters. Parameters: date' domain' photosetId' page' perPage' callback
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,StatsGetCollectionReferrersAsync,The method has 5 parameters. Parameters: date' domain' page' perPage' callback
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,StatsGetCollectionReferrersAsync,The method has 6 parameters. Parameters: date' domain' collectionId' page' perPage' callback
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,StatsGetPhotostreamReferrersAsync,The method has 5 parameters. Parameters: date' domain' page' perPage' callback
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,StatsGetPopularPhotosAsync,The method has 5 parameters. Parameters: date' sort' page' perPage' callback
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,UploadPicture,The method has 7 parameters. Parameters: fileName' title' description' tags' isPublic' isFamily' isFriend
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,UploadPicture,The method has 11 parameters. Parameters: stream' fileName' title' description' tags' isPublic' isFamily' isFriend' contentType' safetyLevel' hiddenFromSearch
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,UploadPictureAsync,The method has 12 parameters. Parameters: stream' fileName' title' description' tags' isPublic' isFamily' isFriend' contentType' safetyLevel' hiddenFromSearch' callback
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,UploadDataAsync,The method has 5 parameters. Parameters: imageStream' fileName' uploadUri' parameters' callback
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,BlogsPostPhoto,The method has 5 parameters. Parameters: blogId' photoId' title' description' blogPassword
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,FavoritesGetList,The method has 6 parameters. Parameters: userId' minFavoriteDate' maxFavoriteDate' extras' page' perPage
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,FavoritesGetPublicList,The method has 6 parameters. Parameters: userId' minFavoriteDate' maxFavoriteDate' extras' page' perPage
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,FavoritesGetContext,The method has 5 parameters. Parameters: photoId' userId' numPrevious' numNext' extras
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,GroupsPoolsGetPhotos,The method has 6 parameters. Parameters: groupId' tags' userId' extras' page' perPage
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosNotesAdd,The method has 6 parameters. Parameters: photoId' noteX' noteY' noteWidth' noteHeight' noteText
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosNotesEdit,The method has 6 parameters. Parameters: noteId' noteX' noteY' noteWidth' noteHeight' noteText
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosCommentsGetRecentForContacts,The method has 5 parameters. Parameters: dateLastComment' contactsFilter' extras' page' perPage
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosetsGetPhotos,The method has 5 parameters. Parameters: photosetId' extras' privacyFilter' page' perPage
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosetsGetPhotos,The method has 6 parameters. Parameters: photosetId' extras' privacyFilter' page' perPage' media
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosGeoBatchCorrectLocation,The method has 5 parameters. Parameters: latitude' longitude' accuracy' placeId' woeId
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosGeoSetLocation,The method has 5 parameters. Parameters: photoId' latitude' longitude' accuracy' context
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosGeoPhotosForLocation,The method has 6 parameters. Parameters: latitude' longitude' accuracy' extras' perPage' page
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosGeoSetPerms,The method has 5 parameters. Parameters: photoId' isPublic' isContact' isFamily' isFriend
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosSuggestionsSuggestLocation,The method has 7 parameters. Parameters: photoId' latitude' longitude' accuracy' woeId' placeId' note
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PeopleGetPublicPhotos,The method has 5 parameters. Parameters: userId' page' perPage' safetyLevel' extras
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PeopleGetPhotos,The method has 11 parameters. Parameters: userId' safeSearch' minUploadDate' maxUploadDate' minTakenDate' maxTakenDate' contentType' privacyFilter' extras' page' perPage
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosGetContactsPhotos,The method has 5 parameters. Parameters: count' justFriends' singlePhoto' includeSelf' extras
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosGetContactsPublicPhotos,The method has 5 parameters. Parameters: userId' count' justFriends' singlePhoto' includeSelf
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosGetContactsPublicPhotos,The method has 6 parameters. Parameters: userId' count' justFriends' singlePhoto' includeSelf' extras
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosGetPopular,The method has 5 parameters. Parameters: userId' extras' sort' perPage' page
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosSetPerms,The method has 6 parameters. Parameters: photoId' isPublic' isFriend' isFamily' permComment' permAddMeta
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosSetPerms,The method has 6 parameters. Parameters: photoId' isPublic' isFriend' isFamily' permComment' permAddMeta
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PlacesPlacesForUser,The method has 8 parameters. Parameters: placeType' woeId' placeId' threshold' minUploadDate' maxUploadDate' minTakenDate' maxTakenDate
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PlacesPlacesForTags,The method has 12 parameters. Parameters: placeType' woeId' placeId' threshold' tags' tagMode' machineTags' machineTagMode' minUploadDate' maxUploadDate' minTakenDate' maxTakenDate
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PlacesPlacesForContacts,The method has 9 parameters. Parameters: placeType' woeId' placeId' threshold' contactType' minUploadDate' maxUploadDate' minTakenDate' maxTakenDate
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PlacesTagsForPlace,The method has 6 parameters. Parameters: placeId' woeId' minUploadDate' maxUploadDate' minTakenDate' maxTakenDate
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,StatsGetPhotoReferrers,The method has 5 parameters. Parameters: date' domain' photoId' page' perPage
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,StatsGetPhotosetReferrers,The method has 5 parameters. Parameters: date' domain' photosetId' page' perPage
Long Parameter List,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,StatsGetCollectionReferrers,The method has 5 parameters. Parameters: date' domain' collectionId' page' perPage
Long Parameter List,FlickrNet,UtilityMethods,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\UtilityMethods.cs,UrlFormat,The method has 6 parameters. Parameters: farm' server' photoid' secret' size' extension
Long Statement,FlickrNet,BoundaryBox,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\BoundaryBox.cs,ToString,The length of the statement  "            return string.Format(System.Globalization.NumberFormatInfo.InvariantInfo' "{0}'{1}'{2}'{3}"' MinimumLongitude' MinimumLatitude' MaximumLongitude' MaximumLatitude); " is 163.
Long Statement,FlickrNet,BoundaryBox,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\BoundaryBox.cs,DiagonalDistance,The length of the statement  "            double e = Math.Acos((Math.Sin(latRad1) * Math.Sin(latRad2)) + (Math.Cos(latRad1) * Math.Cos(latRad2) * Math.Cos(lonRad2 - lonRad1))); " is 134.
Long Statement,FlickrNet,ResponseCacheItemPersister,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Cache.cs,Read,The length of the statement  "            var creationTime = new DateTime(long.Parse(chunks[1]' System.Globalization.NumberStyles.Any' System.Globalization.NumberFormatInfo.InvariantInfo)); " is 147.
Long Statement,FlickrNet,CsvFile,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\CsvFile.cs,Load,The length of the statement  "                        Date = DateTime.Parse(reader.Value' System.Globalization.DateTimeFormatInfo.CurrentInfo' System.Globalization.DateTimeStyles.None); " is 131.
Long Statement,FlickrNet,FlickrResponder,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\FlickrResponder.cs,GetDataResponseOAuth,The length of the statement  "                throw new WebException("WebException occurred with the following body content: " + responseData' ex' ex.Status' ex.Response); " is 125.
Long Statement,FlickrNet,FlickrResponder,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\FlickrResponder.cs,DownloadData,The length of the statement  "                    if (response != null && (response.StatusCode == HttpStatusCode.BadGateway || response.StatusCode == HttpStatusCode.GatewayTimeout)) " is 131.
Long Statement,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,AuthCalcUrl,The length of the statement  "            string hash = sharedSecret + "api_key" + apiKey + "frob" + frob + "perms" + UtilityMethods.AuthLevelToString(authLevel); " is 120.
Long Statement,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,AuthCalcUrl,The length of the statement  "            string url = AuthUrl + "?api_key=" + apiKey + "&perms=" + UtilityMethods.AuthLevelToString(authLevel) + "&frob=" + frob; " is 120.
Long Statement,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,ContactsGetListRecentlyUploadedAsync,The length of the statement  "            if (dateLastUpdated != DateTime.MinValue) parameters.Add("date_lastupload"' UtilityMethods.DateToUnixTimestamp(dateLastUpdated)); " is 129.
Long Statement,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,GetResponseAsync,The length of the statement  "            if (method.StartsWith("flickr.auth"' StringComparison.Ordinal) && !method.EndsWith("oauth.checkToken"' StringComparison.Ordinal)) " is 129.
Long Statement,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,InterestingnessGetListAsync,The length of the statement  "            if (date > DateTime.MinValue) parameters.Add("date"' date.ToString("yyyy-MM-dd"' System.Globalization.DateTimeFormatInfo.InvariantInfo)); " is 137.
Long Statement,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,OAuthCalculateSignature,The length of the statement  "            baseString = method + "&" + UtilityMethods.EscapeOAuthString(url) + "&" + UtilityMethods.EscapeOAuthString(sb.ToString()); " is 122.
Long Statement,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,OAuthCalculateAuthorizationUrl,The length of the statement  "            return "https://" + (mobile?"m":"www") + ".flickr.com/services/oauth/authorize?oauth_token=" + requestToken + permsString; " is 122.
Long Statement,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosGetContactsPhotosAsync,The length of the statement  "                throw new ArgumentOutOfRangeException("count"' string.Format(System.Globalization.CultureInfo.InvariantCulture' "Count must be between 10 and 50. ({0})"' count)); " is 162.
Long Statement,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosGetContactsPhotosAsync,The length of the statement  "            if (count > 0 && !singlePhoto) parameters.Add("count"' count.ToString(System.Globalization.NumberFormatInfo.InvariantInfo)); " is 124.
Long Statement,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosGetContactsPublicPhotosAsync,The length of the statement  "            PhotosGetContactsPublicPhotosAsync(userId' count' justFriends' singlePhoto' includeSelf' PhotoSearchExtras.None' callback); " is 123.
Long Statement,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosGetCountsAsync,The length of the statement  "                dateString = string.Join("'"' new List<DateTime>(dates).ConvertAll<string>(new Converter<DateTime' string>(delegate(DateTime d)  " is 127.
Long Statement,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosGetCountsAsync,The length of the statement  "                takenDateString = string.Join("'"' new List<DateTime>(takenDates).ConvertAll<string>(new Converter<DateTime' string>(delegate(DateTime d)  " is 137.
Long Statement,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosGetCountsAsync,The length of the statement  "                takenDateString = string.Join("'"' (from d in takenDates select UtilityMethods.DateToUnixTimestamp(d)).ToArray<string>()); " is 122.
Long Statement,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosSetDatesAsync,The length of the statement  "            if (datePosted != DateTime.MinValue) parameters.Add("date_posted"' UtilityMethods.DateToUnixTimestamp(datePosted).ToString()); " is 126.
Long Statement,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosSetDatesAsync,The length of the statement  "                parameters.Add("date_taken"' dateTaken.ToString("yyyy-MM-dd HH:mm:ss"' System.Globalization.DateTimeFormatInfo.InvariantInfo)); " is 127.
Long Statement,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosetsGetPhotosAsync,The length of the statement  "            if (media != MediaType.None) parameters.Add("media"'(media == MediaType.All? "all": (media == MediaType.Photos? "photos": (media == MediaType.Videos ? "videos" : string.Empty)))); " is 179.
Long Statement,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosPeopleAdd,The length of the statement  "            if (personX != null) parameters.Add("person_x"' personX.Value.ToString(System.Globalization.NumberFormatInfo.InvariantInfo)); " is 125.
Long Statement,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosPeopleAdd,The length of the statement  "            if (personY != null) parameters.Add("person_y"' personY.Value.ToString(System.Globalization.NumberFormatInfo.InvariantInfo)); " is 125.
Long Statement,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosPeopleAdd,The length of the statement  "            if (personWidth != null) parameters.Add("person_w"' personWidth.Value.ToString(System.Globalization.NumberFormatInfo.InvariantInfo)); " is 133.
Long Statement,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosPeopleAdd,The length of the statement  "            if (personHeight != null) parameters.Add("person_h"' personHeight.Value.ToString(System.Globalization.NumberFormatInfo.InvariantInfo)); " is 135.
Long Statement,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosPeopleAddAsync,The length of the statement  "            if (personX != null) parameters.Add("person_x"' personX.Value.ToString(System.Globalization.NumberFormatInfo.InvariantInfo)); " is 125.
Long Statement,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosPeopleAddAsync,The length of the statement  "            if (personY != null) parameters.Add("person_y"' personY.Value.ToString(System.Globalization.NumberFormatInfo.InvariantInfo)); " is 125.
Long Statement,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosPeopleAddAsync,The length of the statement  "            if (personWidth != null) parameters.Add("person_w"' personWidth.Value.ToString(System.Globalization.NumberFormatInfo.InvariantInfo)); " is 133.
Long Statement,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosPeopleAddAsync,The length of the statement  "            if (personHeight != null) parameters.Add("person_h"' personHeight.Value.ToString(System.Globalization.NumberFormatInfo.InvariantInfo)); " is 135.
Long Statement,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PlacesTagsForPlaceAsync,The length of the statement  "            PlacesTagsForPlaceAsync(placeId' woeId' DateTime.MinValue' DateTime.MinValue' DateTime.MinValue' DateTime.MinValue' callback); " is 126.
Long Statement,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PrefsGetContentTypeAsync,The length of the statement  "                        result.Result = (ContentType)int.Parse(r.Result.GetAttributeValue("*"' "content_type")' System.Globalization.NumberFormatInfo.InvariantInfo); " is 141.
Long Statement,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PrefsGetHiddenAsync,The length of the statement  "                        result.Result = (HiddenFromSearch)int.Parse(r.Result.GetAttributeValue("*"' "hidden")' System.Globalization.NumberFormatInfo.InvariantInfo); " is 140.
Long Statement,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PrefsGetPrivacyAsync,The length of the statement  "                        result.Result = (PrivacyFilter)int.Parse(r.Result.GetAttributeValue("*"' "privacy")' System.Globalization.NumberFormatInfo.InvariantInfo); " is 138.
Long Statement,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PrefsGetSafetyLevelAsync,The length of the statement  "                        result.Result = (SafetyLevel)int.Parse(r.Result.GetAttributeValue("*"' "safety_level")' System.Globalization.NumberFormatInfo.InvariantInfo); " is 141.
Long Statement,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,UploadPicture,The length of the statement  "                var photoId = UploadPicture(stream' file' title' description' tags' false' false' false' ContentType.None' SafetyLevel.None' HiddenFromSearch.None); " is 148.
Long Statement,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,UploadPicture,The length of the statement  "                var photoId = UploadPicture(stream' file' title' description' tags' isPublic' isFamily' isFriend' ContentType.None' SafetyLevel.None' HiddenFromSearch.None); " is 157.
Long Statement,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,UploadData,The length of the statement  "            var boundary = "FLICKR_MIME_" + DateTime.Now.ToString("yyyyMMddhhmmss"' System.Globalization.DateTimeFormatInfo.InvariantInfo); " is 127.
Long Statement,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,UploadDataAsync,The length of the statement  "            string boundary = "FLICKR_MIME_" + DateTime.Now.ToString("yyyyMMddhhmmss"' System.Globalization.DateTimeFormatInfo.InvariantInfo); " is 130.
Long Statement,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,ContactsGetListRecentlyUploaded,The length of the statement  "            if (dateLastUpdated != DateTime.MinValue) parameters.Add("date_lastupload"' UtilityMethods.DateToUnixTimestamp(dateLastUpdated)); " is 129.
Long Statement,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,FavoritesGetList,The length of the statement  "            if (minFavoriteDate != DateTime.MinValue) parameters.Add("min_fave_date"' UtilityMethods.DateToUnixTimestamp(minFavoriteDate)); " is 127.
Long Statement,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,FavoritesGetList,The length of the statement  "            if (maxFavoriteDate != DateTime.MinValue) parameters.Add("max_fave_date"' UtilityMethods.DateToUnixTimestamp(maxFavoriteDate)); " is 127.
Long Statement,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,FavoritesGetPublicList,The length of the statement  "            if (minFavoriteDate != DateTime.MinValue) parameters.Add("min_fave_date"' UtilityMethods.DateToUnixTimestamp(minFavoriteDate)); " is 127.
Long Statement,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,FavoritesGetPublicList,The length of the statement  "            if (maxFavoriteDate != DateTime.MinValue) parameters.Add("max_fave_date"' UtilityMethods.DateToUnixTimestamp(maxFavoriteDate)); " is 127.
Long Statement,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,InterestingnessGetList,The length of the statement  "            if (date > DateTime.MinValue) parameters.Add("date"' date.ToString("yyyy-MM-dd"' System.Globalization.DateTimeFormatInfo.InvariantInfo)); " is 137.
Long Statement,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosCommentsGetRecentForContacts,The length of the statement  "            if (dateLastComment != DateTime.MinValue) parameters.Add("date_lastcomment"' UtilityMethods.DateToUnixTimestamp(dateLastComment)); " is 130.
Long Statement,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosCommentsGetRecentForContacts,The length of the statement  "            if (contactsFilter != null && contactsFilter.Length > 0) parameters.Add("contacts_filter"' string.Join("'"' contactsFilter)); " is 125.
Long Statement,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosetsGetList,The length of the statement  "            if( primaryPhotoExtras != PhotoSearchExtras.None ) parameters.Add("primary_photo_extras"' UtilityMethods.ExtrasToString(primaryPhotoExtras)); " is 141.
Long Statement,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosetsGetPhotos,The length of the statement  "            if (media != MediaType.None) parameters.Add("media"' (media == MediaType.All ? "all" : (media == MediaType.Photos ? "photos" : (media == MediaType.Videos ? "videos" : string.Empty)))); " is 184.
Long Statement,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,CreateUploadData,The length of the statement  "            contentStringBuilder.Write("Content-Disposition: form-data; name=\"photo\"; filename=\"" + Path.GetFileName(fileName) + "\"\r\n"); " is 130.
Long Statement,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,GetResponse,The length of the statement  "            if (method.StartsWith("flickr.auth"' StringComparison.Ordinal) && !method.EndsWith("oauth.checkToken"' StringComparison.Ordinal)) " is 129.
Long Statement,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosGetContactsPhotos,The length of the statement  "                throw new ArgumentOutOfRangeException("count"' string.Format(System.Globalization.CultureInfo.InvariantCulture' "Count must be between 10 and 50. ({0})"' count)); " is 162.
Long Statement,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosGetContactsPhotos,The length of the statement  "            if (count > 0 && !singlePhoto) parameters.Add("count"' count.ToString(System.Globalization.NumberFormatInfo.InvariantInfo)); " is 124.
Long Statement,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosSetDates,The length of the statement  "            if (datePosted != DateTime.MinValue) parameters.Add("date_posted"' UtilityMethods.DateToUnixTimestamp(datePosted).ToString()); " is 126.
Long Statement,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosSetDates,The length of the statement  "                parameters.Add("date_taken"' dateTaken.ToString("yyyy-MM-dd HH:mm:ss"' System.Globalization.DateTimeFormatInfo.InvariantInfo)); " is 127.
Long Statement,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PlacesFindByLatLon,The length of the statement  "            if (accuracy != GeoAccuracy.None) parameters.Add("accuracy"' ((int)accuracy).ToString(System.Globalization.NumberFormatInfo.InvariantInfo)); " is 140.
Long Statement,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PlacesPlacesForUser,The length of the statement  "            return PlacesPlacesForUser(placeType' woeId' placeId' 0' DateTime.MinValue' DateTime.MinValue' DateTime.MinValue' DateTime.MinValue); " is 133.
Long Statement,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PlacesTagsForPlace,The length of the statement  "            if (minUploadDate != DateTime.MinValue) parameters.Add("min_upload_date"' UtilityMethods.DateToUnixTimestamp(minUploadDate)); " is 125.
Long Statement,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PlacesTagsForPlace,The length of the statement  "            if (maxUploadDate != DateTime.MinValue) parameters.Add("max_upload_date"' UtilityMethods.DateToUnixTimestamp(maxUploadDate)); " is 125.
Long Statement,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,StatsGetCollectionDomains,The length of the statement  "            if (!string.IsNullOrEmpty(collectionId)) parameters.Add("collection_id"' UtilityMethods.CleanCollectionId(collectionId)); " is 121.
Long Statement,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,StatsGetCollectionReferrers,The length of the statement  "            if (!string.IsNullOrEmpty(collectionId)) parameters.Add("collection_id"' UtilityMethods.CleanCollectionId(collectionId)); " is 121.
Long Statement,FlickrNet,MemberGroupInfo,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\MemberGroupInfo.cs,Load,The length of the statement  "                        Photos = long.Parse(reader.Value' System.Globalization.NumberStyles.Any' System.Globalization.NumberFormatInfo.InvariantInfo); " is 126.
Long Statement,FlickrNet,PersonLimits,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\PersonLimits.cs,Load,The length of the statement  "            if (!reader.ReadToFollowing("photos")) throw new ResponseXmlException("Unable to find \"photos\" element in response."); " is 120.
Long Statement,FlickrNet,PersonLimits,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\PersonLimits.cs,Load,The length of the statement  "            if (!reader.ReadToFollowing("videos")) throw new ResponseXmlException("Unable to find \"videos\" element in response."); " is 120.
Long Statement,FlickrNet,ExceptionHandler,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\ExceptionHandler.cs,CreateResponseException,The length of the statement  "                        code = int.Parse(reader.Value' System.Globalization.NumberStyles.Any' System.Globalization.NumberFormatInfo.InvariantInfo); " is 123.
Long Statement,FlickrNet,FlickrConfigurationSettings,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\FlickrConfigurationSettings.cs,ProcessProxyNode,The length of the statement  "                throw new System.Configuration.ConfigurationErrorsException("proxy ipaddress is mandatory if you specify the proxy element"); " is 125.
Long Statement,FlickrNet,FlickrConfigurationSettings,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\FlickrConfigurationSettings.cs,ProcessProxyNode,The length of the statement  "                throw new System.Configuration.ConfigurationErrorsException("proxy port is mandatory if you specify the proxy element"); " is 120.
Long Statement,FlickrNet,FlickrConfigurationSettings,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\FlickrConfigurationSettings.cs,ProcessProxyNode,The length of the statement  "                throw new System.Configuration.ConfigurationErrorsException("proxy password must be specified if proxy username is specified"); " is 127.
Long Statement,FlickrNet,FlickrConfigurationSettings,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\FlickrConfigurationSettings.cs,ProcessProxyNode,The length of the statement  "                throw new System.Configuration.ConfigurationErrorsException("proxy username must be specified if proxy password is specified"); " is 127.
Long Statement,FlickrNet,FlickrConfigurationSettings,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\FlickrConfigurationSettings.cs,ProcessProxyNode,The length of the statement  "                throw new System.Configuration.ConfigurationErrorsException("proxy username/password must be specified if proxy domain is specified"); " is 134.
Long Statement,FlickrNet,GroupThrottleInfo,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Groups.cs,ParseMode,The length of the statement  "                    throw new ArgumentException(string.Format(System.Globalization.CultureInfo.InvariantCulture' "Unknown mode found {0}"' mode)' "mode"); " is 134.
Long Statement,FlickrNet,MemberCollection,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\MemberCollection.cs,Load,The length of the statement  "            if (reader.GetAttribute("page") != null) Page = int.Parse(reader.GetAttribute("page")' System.Globalization.CultureInfo.InvariantCulture); " is 138.
Long Statement,FlickrNet,MemberCollection,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\MemberCollection.cs,Load,The length of the statement  "            if (reader.GetAttribute("pages") != null) Pages = int.Parse(reader.GetAttribute("pages")' System.Globalization.CultureInfo.InvariantCulture); " is 141.
Long Statement,FlickrNet,MemberCollection,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\MemberCollection.cs,Load,The length of the statement  "            if (reader.GetAttribute("perpage") != null) PerPage = int.Parse(reader.GetAttribute("perpage")' System.Globalization.CultureInfo.InvariantCulture); " is 147.
Long Statement,FlickrNet,MemberCollection,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\MemberCollection.cs,Load,The length of the statement  "            if (reader.GetAttribute("total") != null) Total = int.Parse(reader.GetAttribute("total")' System.Globalization.CultureInfo.InvariantCulture); " is 141.
Long Statement,FlickrNet,PhotoCount,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\PhotoCountCollection.cs,Load,The length of the statement  "                        FromDate = System.Text.RegularExpressions.Regex.IsMatch(reader.Value' "^\\d+$") ? UtilityMethods.UnixTimestampToDate(reader.Value) : UtilityMethods.MySqlToDate(reader.Value); " is 174.
Long Statement,FlickrNet,PhotoCount,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\PhotoCountCollection.cs,Load,The length of the statement  "                        ToDate = System.Text.RegularExpressions.Regex.IsMatch(reader.Value' "^\\d+$") ? UtilityMethods.UnixTimestampToDate(reader.Value) : UtilityMethods.MySqlToDate(reader.Value); " is 172.
Long Statement,FlickrNet,PhotoCollection,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\PhotoCollection.cs,Load,The length of the statement  "                        Total = string.IsNullOrEmpty(reader.Value) ? 0 : int.Parse(reader.Value' System.Globalization.CultureInfo.InvariantCulture); " is 124.
Long Statement,FlickrNet,PhotoCollection,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\PhotoCollection.cs,Load,The length of the statement  "                        PerPage = string.IsNullOrEmpty(reader.Value) ? 0 : int.Parse(reader.Value' System.Globalization.CultureInfo.InvariantCulture); " is 126.
Long Statement,FlickrNet,PhotoCollection,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\PhotoCollection.cs,Load,The length of the statement  "                        Page = string.IsNullOrEmpty(reader.Value) ? 0 : int.Parse(reader.Value' System.Globalization.CultureInfo.InvariantCulture); " is 123.
Long Statement,FlickrNet,PhotoCollection,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\PhotoCollection.cs,Load,The length of the statement  "                        Pages = string.IsNullOrEmpty(reader.Value) ? 0 : int.Parse(reader.Value' System.Globalization.CultureInfo.InvariantCulture); " is 124.
Long Statement,FlickrNet,PhotoSearchOptions,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\PhotoSearchOptions.cs,AddToDictionary,The length of the statement  "            if (MachineTagMode != MachineTagMode.None) parameters.Add("machine_tag_mode"' UtilityMethods.MachineTagModeToString(MachineTagMode)); " is 133.
Long Statement,FlickrNet,PhotoSearchOptions,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\PhotoSearchOptions.cs,AddToDictionary,The length of the statement  "            if (MinUploadDate != DateTime.MinValue) parameters.Add("min_upload_date"' UtilityMethods.DateToUnixTimestamp(MinUploadDate).ToString()); " is 136.
Long Statement,FlickrNet,PhotoSearchOptions,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\PhotoSearchOptions.cs,AddToDictionary,The length of the statement  "            if (MaxUploadDate != DateTime.MinValue) parameters.Add("max_upload_date"' UtilityMethods.DateToUnixTimestamp(MaxUploadDate).ToString()); " is 136.
Long Statement,FlickrNet,PhotoSearchOptions,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\PhotoSearchOptions.cs,AddToDictionary,The length of the statement  "            if (Latitude != null) parameters.Add("lat"' Latitude.Value.ToString(System.Globalization.NumberFormatInfo.InvariantInfo)); " is 122.
Long Statement,FlickrNet,PhotoSearchOptions,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\PhotoSearchOptions.cs,AddToDictionary,The length of the statement  "            if (Longitude != null) parameters.Add("lon"' Longitude.Value.ToString(System.Globalization.NumberFormatInfo.InvariantInfo)); " is 124.
Long Statement,FlickrNet,PhotoSearchOptions,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\PhotoSearchOptions.cs,AddToDictionary,The length of the statement  "            if (Radius != null) parameters.Add("radius"' Radius.Value.ToString("0.00000"' System.Globalization.NumberFormatInfo.InvariantInfo)); " is 132.
Long Statement,FlickrNet,PhotoSearchOptions,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\PhotoSearchOptions.cs,AddToDictionary,The length of the statement  "            if (ExifMinExposure != null) parameters.Add("exif_min_exposure"' ExifMinExposure.Value.ToString("0.00000"' System.Globalization.NumberFormatInfo.InvariantInfo)); " is 161.
Long Statement,FlickrNet,PhotoSearchOptions,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\PhotoSearchOptions.cs,AddToDictionary,The length of the statement  "            if (ExifMaxExposure != null) parameters.Add("exif_max_exposure"' ExifMaxExposure.Value.ToString("0.00000"' System.Globalization.NumberFormatInfo.InvariantInfo)); " is 161.
Long Statement,FlickrNet,PhotoSearchOptions,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\PhotoSearchOptions.cs,AddToDictionary,The length of the statement  "            if (ExifMinAperture != null) parameters.Add("exif_min_aperture"' ExifMinAperture.Value.ToString("0.00000"' System.Globalization.NumberFormatInfo.InvariantInfo)); " is 161.
Long Statement,FlickrNet,PhotoSearchOptions,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\PhotoSearchOptions.cs,AddToDictionary,The length of the statement  "            if (ExifMaxAperture != null) parameters.Add("exif_max_aperture"' ExifMaxAperture.Value.ToString("0.00000"' System.Globalization.NumberFormatInfo.InvariantInfo)); " is 161.
Long Statement,FlickrNet,PhotoSearchOptions,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\PhotoSearchOptions.cs,AddToDictionary,The length of the statement  "            if (ExifMinFocalLength != null) parameters.Add("exif_min_focallen"' ExifMinFocalLength.Value.ToString("0"' System.Globalization.NumberFormatInfo.InvariantInfo)); " is 161.
Long Statement,FlickrNet,PhotoSearchOptions,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\PhotoSearchOptions.cs,AddToDictionary,The length of the statement  "            if (ExifMaxFocalLength != null) parameters.Add("exif_max_focallen"' ExifMaxFocalLength.Value.ToString("0"' System.Globalization.NumberFormatInfo.InvariantInfo)); " is 161.
Long Statement,FlickrNet,Place,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Place.cs,Load,The length of the statement  "            if( (reader.NodeType == XmlNodeType.Element || reader.NodeType == XmlNodeType.EndElement) && reader.LocalName != elementName) " is 125.
Long Statement,FlickrNet,SafeNativeMethods,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\SafeNativeMethods.cs,GetErrorCode,The length of the statement  "            var permission = new System.Security.Permissions.SecurityPermission(System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode); " is 134.
Long Statement,FlickrNet,Stats,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Stats.cs,Load,The length of the statement  "                        Views = string.IsNullOrEmpty(reader.Value) ? 0 : int.Parse(reader.Value' System.Globalization.NumberFormatInfo.InvariantInfo); " is 126.
Long Statement,FlickrNet,Stats,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Stats.cs,Load,The length of the statement  "                        Comments = string.IsNullOrEmpty(reader.Value) ? 0 : int.Parse(reader.Value' System.Globalization.NumberFormatInfo.InvariantInfo); " is 129.
Long Statement,FlickrNet,Stats,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Stats.cs,Load,The length of the statement  "                        Favorites = string.IsNullOrEmpty(reader.Value) ? 0 : int.Parse(reader.Value' System.Globalization.NumberFormatInfo.InvariantInfo); " is 130.
Long Statement,FlickrNet,Topic,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Topic.cs,Load,The length of the statement  "                        DateLastEdited = reader.Value == "" || reader.Value == "0" ? (DateTime?)null : UtilityMethods.UnixTimestampToDate(reader.Value); " is 128.
Long Statement,FlickrNet,TopicCollection,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\TopicCollection.cs,Load,The length of the statement  "            if (reader.LocalName != "topics") throw new ResponseXmlException("Unknown initial element \"" + reader.LocalName + "\". Expecting \"topics\"."); " is 144.
Long Statement,FlickrNet,UtilityMethods,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\UtilityMethods.cs,UnixTimestampToDate,The length of the statement  "                return UnixTimestampToDate(Int64.Parse(timestamp' System.Globalization.NumberStyles.Any' System.Globalization.NumberFormatInfo.InvariantInfo)); " is 143.
Long Statement,FlickrNet,UtilityMethods,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\UtilityMethods.cs,PartialOptionsIntoArray,The length of the statement  "            if (options.MinUploadDate != DateTime.MinValue) parameters.Add("min_uploaded_date"' UtilityMethods.DateToUnixTimestamp(options.MinUploadDate).ToString()); " is 154.
Long Statement,FlickrNet,UtilityMethods,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\UtilityMethods.cs,PartialOptionsIntoArray,The length of the statement  "            if (options.MaxUploadDate != DateTime.MinValue) parameters.Add("max_uploaded_date"' UtilityMethods.DateToUnixTimestamp(options.MaxUploadDate).ToString()); " is 154.
Long Statement,FlickrNet,UtilityMethods,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\UtilityMethods.cs,PartialOptionsIntoArray,The length of the statement  "            if (options.PerPage > 0) parameters.Add("per_page"' options.PerPage.ToString(System.Globalization.NumberFormatInfo.InvariantInfo)); " is 131.
Long Statement,FlickrNet,UtilityMethods,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\UtilityMethods.cs,PartialOptionsIntoArray,The length of the statement  "            if (options.Page > 0) parameters.Add("page"' options.Page.ToString(System.Globalization.NumberFormatInfo.InvariantInfo)); " is 121.
Long Statement,FlickrNet,UtilityMethods,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\UtilityMethods.cs,MD5Hash,The length of the statement  "            using (System.Security.Cryptography.MD5CryptoServiceProvider csp = new System.Security.Cryptography.MD5CryptoServiceProvider()) " is 127.
Long Statement,FlickrNet,UtilityMethods,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\UtilityMethods.cs,MD5Hash,The length of the statement  "            return BitConverter.ToString(hashedBytes).Replace("-"' string.Empty).ToLower(System.Globalization.CultureInfo.InvariantCulture); " is 128.
Long Statement,FlickrNet,UtilityMethods,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\UtilityMethods.cs,ParseDateWithGranularity,The length of the statement  "                output = DateTime.ParseExact(date' format' System.Globalization.DateTimeFormatInfo.InvariantInfo' System.Globalization.DateTimeStyles.None); " is 140.
Long Statement,FlickrNet,UtilityMethods,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\UtilityMethods.cs,BuddyIcon,The length of the statement  "                return string.Format(System.Globalization.CultureInfo.InvariantCulture' "https://farm{0}.staticflickr.com/{1}/buddyicons/{2}.jpg"' farm' server' userId); " is 153.
Long Statement,FlickrNet,ValueCollection,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\ValueCollection.cs,Load,The length of the statement  "                if (!string.IsNullOrEmpty(NamespaceName) && string.IsNullOrEmpty(item.NamespaceName)) item.NamespaceName = NamespaceName; " is 121.
Long Statement,FlickrNet,ValueCollection,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\ValueCollection.cs,Load,The length of the statement  "                if (!string.IsNullOrEmpty(PredicateName) && string.IsNullOrEmpty(item.PredicateName)) item.PredicateName = PredicateName; " is 121.
Complex Conditional,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosGetContactsPhotosAsync,The conditional expression  "count != 0 && (count < 10 || count > 50) && !singlePhoto"  is complex.
Complex Conditional,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PlacesGetChildrenWithPhotosPublicAsync,The conditional expression  "(placeId == null || placeId.Length == 0) && (woeId == null || woeId.Length == 0)"  is complex.
Complex Conditional,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosGetContactsPhotos,The conditional expression  "count != 0 && (count < 10 || count > 50) && !singlePhoto"  is complex.
Complex Conditional,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PlacesGetChildrenWithPhotosPublic,The conditional expression  "(placeId == null || placeId.Length == 0) && (woeId == null || woeId.Length == 0)"  is complex.
Empty Catch Block,FlickrNet,LockFile,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\LockFile.cs,Release,The method has an empty catch block.
Empty Catch Block,FlickrNet,UtilityMethods,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\UtilityMethods.cs,MySqlToDate,The method has an empty catch block.
Empty Catch Block,FlickrNet,UtilityMethods,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\UtilityMethods.cs,MySqlToDate,The method has an empty catch block.
Magic Number,FlickrNet,BoundaryBox,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\BoundaryBox.cs,BoundaryBox,The following statement contains a magic number: splits.Length != 4
Magic Number,FlickrNet,BoundaryBox,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\BoundaryBox.cs,BoundaryBox,The following statement contains a magic number: MaximumLongitude = double.Parse(splits[2]' System.Globalization.NumberFormatInfo.InvariantInfo);
Magic Number,FlickrNet,BoundaryBox,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\BoundaryBox.cs,BoundaryBox,The following statement contains a magic number: MaximumLatitude = double.Parse(splits[3]' System.Globalization.NumberFormatInfo.InvariantInfo);
Magic Number,FlickrNet,BoundaryBox,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\BoundaryBox.cs,DiagonalDistanceInMiles,The following statement contains a magic number: return DiagonalDistance() * 3963.191;
Magic Number,FlickrNet,BoundaryBox,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\BoundaryBox.cs,DiagonalDistanceInKM,The following statement contains a magic number: return DiagonalDistance() * 6378.137;
Magic Number,FlickrNet,BoundaryBox,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\BoundaryBox.cs,DiagonalDistance,The following statement contains a magic number: double latRad1 = MinimumLatitude / 180.0 * Math.PI;
Magic Number,FlickrNet,BoundaryBox,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\BoundaryBox.cs,DiagonalDistance,The following statement contains a magic number: double latRad2 = MaximumLatitude / 180.0 * Math.PI;
Magic Number,FlickrNet,BoundaryBox,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\BoundaryBox.cs,DiagonalDistance,The following statement contains a magic number: double lonRad1 = MinimumLongitude / 180.0 * Math.PI;
Magic Number,FlickrNet,BoundaryBox,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\BoundaryBox.cs,DiagonalDistance,The following statement contains a magic number: double lonRad2 = MaximumLongitude / 180.0 * Math.PI;
Magic Number,FlickrNet,ResponseCacheItemPersister,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Cache.cs,Read,The following statement contains a magic number: chunks.Length != 2
Magic Number,FlickrNet,FlickrResponder,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\FlickrResponder.cs,GetDataResponseNormalAsync,The following statement contains a magic number: method == "GET" && data.Length > 2000
Magic Number,FlickrNet,FlickrResponder,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\FlickrResponder.cs,GetDataResponseNormal,The following statement contains a magic number: method == "GET" && data.Length > 2000
Magic Number,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,DoGetResponseAsync,The following statement contains a magic number: url.AbsoluteUri.Length > 2000
Magic Number,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosGetContactsPhotosAsync,The following statement contains a magic number: count != 0 && (count < 10 || count > 50) && !singlePhoto
Magic Number,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosGetContactsPhotosAsync,The following statement contains a magic number: count != 0 && (count < 10 || count > 50) && !singlePhoto
Magic Number,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosGeoGetLocationAsync,The following statement contains a magic number: GetResponseAsync<PhotoInfo>(                  parameters'                  r =>                  {                      var result = new FlickrResult<PlaceInfo>();                      result.HasError = r.HasError;                      if (result.HasError)                      {                          if (result.ErrorCode == 2)                          {                              result.HasError = false;                              result.Result = null;                              result.Error = null;                          }                          else                          {                              result.Error = r.Error;                          }                      }                      else                      {                          result.Result = r.Result.Location;                      }                      callback(result);                  });
Magic Number,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosTransformRotateAsync,The following statement contains a magic number: degrees != 90 && degrees != 180 && degrees != 270
Magic Number,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosTransformRotateAsync,The following statement contains a magic number: degrees != 90 && degrees != 180 && degrees != 270
Magic Number,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosTransformRotateAsync,The following statement contains a magic number: degrees != 90 && degrees != 180 && degrees != 270
Magic Number,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,UploadData,The following statement contains a magic number: var bufferSize = 32 * 1024;
Magic Number,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,UploadData,The following statement contains a magic number: var bufferSize = 32 * 1024;
Magic Number,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,UploadData,The following statement contains a magic number: bufferSize = bufferSize * 2;
Magic Number,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,UploadData,The following statement contains a magic number: dataBuffer.Length / 100 > bufferSize
Magic Number,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,UploadDataAsync,The following statement contains a magic number: req.BeginGetRequestStream(                  r =>                  {                      var result = new FlickrResult<string>();                        using (var reqStream = req.EndGetRequestStream(r))                      {                          try                          {                              var bufferSize = 32*1024;                              if (dataBuffer.Length/100 > bufferSize) bufferSize = bufferSize*2;                              dataBuffer.UploadProgress += (o' e) =>                                                           {                                                               if (OnUploadProgress != null) OnUploadProgress(this' e);                                                           };                              dataBuffer.CopyTo(reqStream' bufferSize);                              reqStream.Close();                          }                          catch (Exception ex)                          {                              result.Error = ex;                              callback(result);                          }                      }                        req.BeginGetResponse(                          r2 =>                          {                                try                              {                                  var res = req.EndGetResponse(r2);                                  var sr = new StreamReader(res.GetResponseStream());                                  var responseXml = sr.ReadToEnd();                                  sr.Close();                                    var t = new UnknownResponse();                                  ((IFlickrParsable)t).Load(responseXml);                                  result.Result = t.GetElementValue("photoid");                                  result.HasError = false;                              }                              catch (Exception ex)                              {                                  if (ex is WebException)                                  {                                      var oauthEx = new OAuthException(ex);                                      result.Error = string.IsNullOrEmpty(oauthEx.Message) ? ex : oauthEx;                                  }                                  else                                  {                                      result.Error = ex;                                  }                              }                                callback(result);                            }'                           this);                  }'                   this);
Magic Number,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,UploadDataAsync,The following statement contains a magic number: req.BeginGetRequestStream(                  r =>                  {                      var result = new FlickrResult<string>();                        using (var reqStream = req.EndGetRequestStream(r))                      {                          try                          {                              var bufferSize = 32*1024;                              if (dataBuffer.Length/100 > bufferSize) bufferSize = bufferSize*2;                              dataBuffer.UploadProgress += (o' e) =>                                                           {                                                               if (OnUploadProgress != null) OnUploadProgress(this' e);                                                           };                              dataBuffer.CopyTo(reqStream' bufferSize);                              reqStream.Close();                          }                          catch (Exception ex)                          {                              result.Error = ex;                              callback(result);                          }                      }                        req.BeginGetResponse(                          r2 =>                          {                                try                              {                                  var res = req.EndGetResponse(r2);                                  var sr = new StreamReader(res.GetResponseStream());                                  var responseXml = sr.ReadToEnd();                                  sr.Close();                                    var t = new UnknownResponse();                                  ((IFlickrParsable)t).Load(responseXml);                                  result.Result = t.GetElementValue("photoid");                                  result.HasError = false;                              }                              catch (Exception ex)                              {                                  if (ex is WebException)                                  {                                      var oauthEx = new OAuthException(ex);                                      result.Error = string.IsNullOrEmpty(oauthEx.Message) ? ex : oauthEx;                                  }                                  else                                  {                                      result.Error = ex;                                  }                              }                                callback(result);                            }'                           this);                  }'                   this);
Magic Number,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,UploadDataAsync,The following statement contains a magic number: req.BeginGetRequestStream(                  r =>                  {                      var result = new FlickrResult<string>();                        using (var reqStream = req.EndGetRequestStream(r))                      {                          try                          {                              var bufferSize = 32*1024;                              if (dataBuffer.Length/100 > bufferSize) bufferSize = bufferSize*2;                              dataBuffer.UploadProgress += (o' e) =>                                                           {                                                               if (OnUploadProgress != null) OnUploadProgress(this' e);                                                           };                              dataBuffer.CopyTo(reqStream' bufferSize);                              reqStream.Close();                          }                          catch (Exception ex)                          {                              result.Error = ex;                              callback(result);                          }                      }                        req.BeginGetResponse(                          r2 =>                          {                                try                              {                                  var res = req.EndGetResponse(r2);                                  var sr = new StreamReader(res.GetResponseStream());                                  var responseXml = sr.ReadToEnd();                                  sr.Close();                                    var t = new UnknownResponse();                                  ((IFlickrParsable)t).Load(responseXml);                                  result.Result = t.GetElementValue("photoid");                                  result.HasError = false;                              }                              catch (Exception ex)                              {                                  if (ex is WebException)                                  {                                      var oauthEx = new OAuthException(ex);                                      result.Error = string.IsNullOrEmpty(oauthEx.Message) ? ex : oauthEx;                                  }                                  else                                  {                                      result.Error = ex;                                  }                              }                                callback(result);                            }'                           this);                  }'                   this);
Magic Number,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,UploadDataAsync,The following statement contains a magic number: req.BeginGetRequestStream(                  r =>                  {                      var result = new FlickrResult<string>();                        using (var reqStream = req.EndGetRequestStream(r))                      {                          try                          {                              var bufferSize = 32*1024;                              if (dataBuffer.Length/100 > bufferSize) bufferSize = bufferSize*2;                              dataBuffer.UploadProgress += (o' e) =>                                                           {                                                               if (OnUploadProgress != null) OnUploadProgress(this' e);                                                           };                              dataBuffer.CopyTo(reqStream' bufferSize);                              reqStream.Close();                          }                          catch (Exception ex)                          {                              result.Error = ex;                              callback(result);                          }                      }                        req.BeginGetResponse(                          r2 =>                          {                                try                              {                                  var res = req.EndGetResponse(r2);                                  var sr = new StreamReader(res.GetResponseStream());                                  var responseXml = sr.ReadToEnd();                                  sr.Close();                                    var t = new UnknownResponse();                                  ((IFlickrParsable)t).Load(responseXml);                                  result.Result = t.GetElementValue("photoid");                                  result.HasError = false;                              }                              catch (Exception ex)                              {                                  if (ex is WebException)                                  {                                      var oauthEx = new OAuthException(ex);                                      result.Error = string.IsNullOrEmpty(oauthEx.Message) ? ex : oauthEx;                                  }                                  else                                  {                                      result.Error = ex;                                  }                              }                                callback(result);                            }'                           this);                  }'                   this);
Magic Number,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosTransformRotate,The following statement contains a magic number: degrees != 90 && degrees != 180 && degrees != 270
Magic Number,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosTransformRotate,The following statement contains a magic number: degrees != 90 && degrees != 180 && degrees != 270
Magic Number,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosTransformRotate,The following statement contains a magic number: degrees != 90 && degrees != 180 && degrees != 270
Magic Number,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,CreateUploadData,The following statement contains a magic number: var hashStringBuilder = new StringBuilder(sharedSecret' 2 * 1024);
Magic Number,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,CreateUploadData,The following statement contains a magic number: var hashStringBuilder = new StringBuilder(sharedSecret' 2 * 1024);
Magic Number,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosGetContactsPhotos,The following statement contains a magic number: count != 0 && (count < 10 || count > 50) && !singlePhoto
Magic Number,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosGetContactsPhotos,The following statement contains a magic number: count != 0 && (count < 10 || count > 50) && !singlePhoto
Magic Number,FlickrNet,ShapeData,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\ShapeData.cs,Load,The following statement contains a magic number: switch (reader.LocalName)                  {                      case "polylines":                          reader.Read();                          while (reader.LocalName == "polyline")                          {                              var polyline = new Collection<PointD>();                              string polystring = reader.ReadElementContentAsString();                              string[] points = polystring.Split(' ');                              foreach (string point in points)                              {                                  string[] xy = point.Split(''');                                  if (xy.Length != 2)                                      throw new ParsingException("Invalid polypoint found in polyline : '" + polystring +                                                                 "'");                                  polyline.Add(                                      new PointD(                                          double.Parse(xy[0]' System.Globalization.NumberFormatInfo.InvariantInfo)'                                          double.Parse(xy[1]' System.Globalization.NumberFormatInfo.InvariantInfo)));                              }                              PolyLines.Add(polyline);                          }                          reader.Read();                          break;                      case "urls":                          reader.Skip();                          break;                    }
Magic Number,FlickrNet,ExceptionHandler,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\ExceptionHandler.cs,CreateException,The following statement contains a magic number: switch (code)              {                  case 96:                      return new InvalidSignatureException(message);                  case 97:                      return new MissingSignatureException(message);                  case 98:                      return new LoginFailedInvalidTokenException(message);                  case 99:                      return new UserNotLoggedInInsufficientPermissionsException(message);                  case 100:                      return new InvalidApiKeyException(message);                  case 105:                      return new ServiceUnavailableException(message);                  case 111:                      return new FormatNotFoundException(message);                  case 112:                      return new MethodNotFoundException(message);                  case 116:                      return new BadUrlFoundException(message);                  case 114: // Soap Error                  case 115: // XML-RPC error                      return new FlickrApiException(code' message);                  default:                      return CreateExceptionFromMessage(code' message);              }
Magic Number,FlickrNet,ExceptionHandler,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\ExceptionHandler.cs,CreateException,The following statement contains a magic number: switch (code)              {                  case 96:                      return new InvalidSignatureException(message);                  case 97:                      return new MissingSignatureException(message);                  case 98:                      return new LoginFailedInvalidTokenException(message);                  case 99:                      return new UserNotLoggedInInsufficientPermissionsException(message);                  case 100:                      return new InvalidApiKeyException(message);                  case 105:                      return new ServiceUnavailableException(message);                  case 111:                      return new FormatNotFoundException(message);                  case 112:                      return new MethodNotFoundException(message);                  case 116:                      return new BadUrlFoundException(message);                  case 114: // Soap Error                  case 115: // XML-RPC error                      return new FlickrApiException(code' message);                  default:                      return CreateExceptionFromMessage(code' message);              }
Magic Number,FlickrNet,ExceptionHandler,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\ExceptionHandler.cs,CreateException,The following statement contains a magic number: switch (code)              {                  case 96:                      return new InvalidSignatureException(message);                  case 97:                      return new MissingSignatureException(message);                  case 98:                      return new LoginFailedInvalidTokenException(message);                  case 99:                      return new UserNotLoggedInInsufficientPermissionsException(message);                  case 100:                      return new InvalidApiKeyException(message);                  case 105:                      return new ServiceUnavailableException(message);                  case 111:                      return new FormatNotFoundException(message);                  case 112:                      return new MethodNotFoundException(message);                  case 116:                      return new BadUrlFoundException(message);                  case 114: // Soap Error                  case 115: // XML-RPC error                      return new FlickrApiException(code' message);                  default:                      return CreateExceptionFromMessage(code' message);              }
Magic Number,FlickrNet,ExceptionHandler,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\ExceptionHandler.cs,CreateException,The following statement contains a magic number: switch (code)              {                  case 96:                      return new InvalidSignatureException(message);                  case 97:                      return new MissingSignatureException(message);                  case 98:                      return new LoginFailedInvalidTokenException(message);                  case 99:                      return new UserNotLoggedInInsufficientPermissionsException(message);                  case 100:                      return new InvalidApiKeyException(message);                  case 105:                      return new ServiceUnavailableException(message);                  case 111:                      return new FormatNotFoundException(message);                  case 112:                      return new MethodNotFoundException(message);                  case 116:                      return new BadUrlFoundException(message);                  case 114: // Soap Error                  case 115: // XML-RPC error                      return new FlickrApiException(code' message);                  default:                      return CreateExceptionFromMessage(code' message);              }
Magic Number,FlickrNet,ExceptionHandler,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\ExceptionHandler.cs,CreateException,The following statement contains a magic number: switch (code)              {                  case 96:                      return new InvalidSignatureException(message);                  case 97:                      return new MissingSignatureException(message);                  case 98:                      return new LoginFailedInvalidTokenException(message);                  case 99:                      return new UserNotLoggedInInsufficientPermissionsException(message);                  case 100:                      return new InvalidApiKeyException(message);                  case 105:                      return new ServiceUnavailableException(message);                  case 111:                      return new FormatNotFoundException(message);                  case 112:                      return new MethodNotFoundException(message);                  case 116:                      return new BadUrlFoundException(message);                  case 114: // Soap Error                  case 115: // XML-RPC error                      return new FlickrApiException(code' message);                  default:                      return CreateExceptionFromMessage(code' message);              }
Magic Number,FlickrNet,ExceptionHandler,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\ExceptionHandler.cs,CreateException,The following statement contains a magic number: switch (code)              {                  case 96:                      return new InvalidSignatureException(message);                  case 97:                      return new MissingSignatureException(message);                  case 98:                      return new LoginFailedInvalidTokenException(message);                  case 99:                      return new UserNotLoggedInInsufficientPermissionsException(message);                  case 100:                      return new InvalidApiKeyException(message);                  case 105:                      return new ServiceUnavailableException(message);                  case 111:                      return new FormatNotFoundException(message);                  case 112:                      return new MethodNotFoundException(message);                  case 116:                      return new BadUrlFoundException(message);                  case 114: // Soap Error                  case 115: // XML-RPC error                      return new FlickrApiException(code' message);                  default:                      return CreateExceptionFromMessage(code' message);              }
Magic Number,FlickrNet,ExceptionHandler,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\ExceptionHandler.cs,CreateException,The following statement contains a magic number: switch (code)              {                  case 96:                      return new InvalidSignatureException(message);                  case 97:                      return new MissingSignatureException(message);                  case 98:                      return new LoginFailedInvalidTokenException(message);                  case 99:                      return new UserNotLoggedInInsufficientPermissionsException(message);                  case 100:                      return new InvalidApiKeyException(message);                  case 105:                      return new ServiceUnavailableException(message);                  case 111:                      return new FormatNotFoundException(message);                  case 112:                      return new MethodNotFoundException(message);                  case 116:                      return new BadUrlFoundException(message);                  case 114: // Soap Error                  case 115: // XML-RPC error                      return new FlickrApiException(code' message);                  default:                      return CreateExceptionFromMessage(code' message);              }
Magic Number,FlickrNet,ExceptionHandler,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\ExceptionHandler.cs,CreateException,The following statement contains a magic number: switch (code)              {                  case 96:                      return new InvalidSignatureException(message);                  case 97:                      return new MissingSignatureException(message);                  case 98:                      return new LoginFailedInvalidTokenException(message);                  case 99:                      return new UserNotLoggedInInsufficientPermissionsException(message);                  case 100:                      return new InvalidApiKeyException(message);                  case 105:                      return new ServiceUnavailableException(message);                  case 111:                      return new FormatNotFoundException(message);                  case 112:                      return new MethodNotFoundException(message);                  case 116:                      return new BadUrlFoundException(message);                  case 114: // Soap Error                  case 115: // XML-RPC error                      return new FlickrApiException(code' message);                  default:                      return CreateExceptionFromMessage(code' message);              }
Magic Number,FlickrNet,ExceptionHandler,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\ExceptionHandler.cs,CreateException,The following statement contains a magic number: switch (code)              {                  case 96:                      return new InvalidSignatureException(message);                  case 97:                      return new MissingSignatureException(message);                  case 98:                      return new LoginFailedInvalidTokenException(message);                  case 99:                      return new UserNotLoggedInInsufficientPermissionsException(message);                  case 100:                      return new InvalidApiKeyException(message);                  case 105:                      return new ServiceUnavailableException(message);                  case 111:                      return new FormatNotFoundException(message);                  case 112:                      return new MethodNotFoundException(message);                  case 116:                      return new BadUrlFoundException(message);                  case 114: // Soap Error                  case 115: // XML-RPC error                      return new FlickrApiException(code' message);                  default:                      return CreateExceptionFromMessage(code' message);              }
Magic Number,FlickrNet,ExceptionHandler,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\ExceptionHandler.cs,CreateException,The following statement contains a magic number: switch (code)              {                  case 96:                      return new InvalidSignatureException(message);                  case 97:                      return new MissingSignatureException(message);                  case 98:                      return new LoginFailedInvalidTokenException(message);                  case 99:                      return new UserNotLoggedInInsufficientPermissionsException(message);                  case 100:                      return new InvalidApiKeyException(message);                  case 105:                      return new ServiceUnavailableException(message);                  case 111:                      return new FormatNotFoundException(message);                  case 112:                      return new MethodNotFoundException(message);                  case 116:                      return new BadUrlFoundException(message);                  case 114: // Soap Error                  case 115: // XML-RPC error                      return new FlickrApiException(code' message);                  default:                      return CreateExceptionFromMessage(code' message);              }
Magic Number,FlickrNet,ExceptionHandler,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\ExceptionHandler.cs,CreateException,The following statement contains a magic number: switch (code)              {                  case 96:                      return new InvalidSignatureException(message);                  case 97:                      return new MissingSignatureException(message);                  case 98:                      return new LoginFailedInvalidTokenException(message);                  case 99:                      return new UserNotLoggedInInsufficientPermissionsException(message);                  case 100:                      return new InvalidApiKeyException(message);                  case 105:                      return new ServiceUnavailableException(message);                  case 111:                      return new FormatNotFoundException(message);                  case 112:                      return new MethodNotFoundException(message);                  case 116:                      return new BadUrlFoundException(message);                  case 114: // Soap Error                  case 115: // XML-RPC error                      return new FlickrApiException(code' message);                  default:                      return CreateExceptionFromMessage(code' message);              }
Magic Number,FlickrNet,UtilityMethods,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\UtilityMethods.cs,WriteInt32,The following statement contains a magic number: s.WriteByte((byte)((i >> 8) & 0xFF));
Magic Number,FlickrNet,UtilityMethods,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\UtilityMethods.cs,WriteInt32,The following statement contains a magic number: s.WriteByte((byte)((i >> 16) & 0xFF));
Magic Number,FlickrNet,UtilityMethods,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\UtilityMethods.cs,WriteInt32,The following statement contains a magic number: s.WriteByte((byte)((i >> 24) & 0xFF));
Magic Number,FlickrNet,UtilityMethods,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\UtilityMethods.cs,WriteString,The following statement contains a magic number: s.WriteByte((byte)((c >> 8) & 0xFF));
Magic Number,FlickrNet,UtilityMethods,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\UtilityMethods.cs,ReadInt32,The following statement contains a magic number: i |= b << (j * 8);
Magic Number,FlickrNet,UtilityMethods,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\UtilityMethods.cs,ReadInt32,The following statement contains a magic number: j < 4
Magic Number,FlickrNet,UtilityMethods,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\UtilityMethods.cs,ReadString,The following statement contains a magic number: chars[i] = (char)(lo | (hi << 8));
Magic Number,FlickrNet,UtilityMethods,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\UtilityMethods.cs,ParseDateWithGranularity,The following statement contains a magic number: output = new DateTime(int.Parse(date.Substring(0' 4)' System.Globalization.NumberFormatInfo.InvariantInfo)' 1' 1);
Magic Number,FlickrNet,UtilityMethods,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\UtilityMethods.cs,StringToDictionary,The following statement contains a magic number: var bits = part.Split(new[] { '=' }' 2' StringSplitOptions.RemoveEmptyEntries);
Magic Number,FlickrNet,UtilityMethods,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\UtilityMethods.cs,EscapeDataString,The following statement contains a magic number: var limit = 2000;
Magic Number,FlickrNet,UtilityMethods,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\UtilityMethods.cs,EscapeDataString,The following statement contains a magic number: var sb = new StringBuilder(value.Length + value.Length / 2);
Missing Default,FlickrNet,ActivityItem,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\ActivityItem.cs,LoadAttributes,The following switch statement is missing a default case: switch (reader.Value)                          {                              case "photoset":                                  ItemType = ActivityItemType.Photoset;                                  break;                              case "photo":                                  ItemType = ActivityItemType.Photo;                                  break;                              case "gallery":                                  ItemType = ActivityItemType.Gallery;                                  break;                          }
Missing Default,FlickrNet,ActivityItem,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\ActivityItem.cs,LoadAttributes,The following switch statement is missing a default case: switch (reader.Value)                          {                              case "photo":                                  Media = MediaType.Photos;                                  break;                              case "video":                                  Media = MediaType.Videos;                                  break;                          }
Missing Default,FlickrNet,Cluster,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Cluster.cs,Load,The following switch statement is missing a default case: switch (reader.LocalName)                  {                      case "total":                          TotalTags = reader.ReadContentAsInt();                          break;                  }
Missing Default,FlickrNet,ClusterCollection,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\ClusterCollection.cs,Load,The following switch statement is missing a default case: switch (reader.LocalName)                  {                      case "source":                          SourceTag = reader.Value;                          break;                      case "total":                          TotalClusters = reader.ReadContentAsInt();                          break;                  }
Missing Default,FlickrNet,CsvFile,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\CsvFile.cs,Load,The following switch statement is missing a default case: switch (reader.LocalName)                  {                      case "href":                          Href = reader.Value;                          break;                      case "type":                          Type = reader.Value;                          break;                      case "date":                          Date = DateTime.Parse(reader.Value' System.Globalization.DateTimeFormatInfo.CurrentInfo' System.Globalization.DateTimeStyles.None);                          break;                  }
Missing Default,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosSetSafetyLevelAsync,The following switch statement is missing a default case: switch (hidden)              {                  case HiddenFromSearch.Visible:                      parameters.Add("hidden"' "0");                      break;                  case HiddenFromSearch.Hidden:                      parameters.Add("hidden"' "1");                      break;              }
Missing Default,FlickrNet,Flickr,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Flickr_ActivityAsync.cs,PhotosSetSafetyLevel,The following switch statement is missing a default case: switch (hidden)              {                  case HiddenFromSearch.Visible:                      parameters.Add("hidden"' "0");                      break;                  case HiddenFromSearch.Hidden:                      parameters.Add("hidden"' "1");                      break;              }
Missing Default,FlickrNet,HotTag,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\HotTag.cs,Load,The following switch statement is missing a default case: switch (reader.LocalName)                  {                      case "score":                          Score = reader.ReadContentAsInt();                          break;                  }
Missing Default,FlickrNet,HotTagCollection,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\HotTagCollection.cs,Load,The following switch statement is missing a default case: switch (reader.LocalName)                  {                      case "period":                          Period = reader.Value;                          break;                      case "count":                          TagCount = reader.ReadContentAsInt();                          break;                  }
Missing Default,FlickrNet,Institution,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Institution.cs,Load,The following switch statement is missing a default case: switch (reader.LocalName)                  {                      case "name":                          InstitutionName = reader.ReadElementContentAsString();                          break;                      case "urls":                          reader.Read();                          while (reader.LocalName == "url")                          {                              string type = reader.GetAttribute("type");                              string url = reader.ReadElementContentAsString();                              switch (type)                              {                                  case "site":                                      SiteUrl = url;                                      break;                                  case "flickr":                                      FlickrUrl = url;                                      break;                                  case "license":                                      LicenseUrl = url;                                      break;                              }                          }                          reader.Read();                          break;                  }
Missing Default,FlickrNet,Institution,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Institution.cs,Load,The following switch statement is missing a default case: switch (type)                              {                                  case "site":                                      SiteUrl = url;                                      break;                                  case "flickr":                                      FlickrUrl = url;                                      break;                                  case "license":                                      LicenseUrl = url;                                      break;                              }
Missing Default,FlickrNet,Namespace,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Namespace.cs,Load,The following switch statement is missing a default case: switch (reader.LocalName)                  {                      case "usage":                          Usage = reader.ReadContentAsInt();                          break;                      case "predicates":                          Predicates = reader.ReadContentAsInt();                          break;                  }
Missing Default,FlickrNet,Pair,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Pair.cs,Load,The following switch statement is missing a default case: switch (reader.LocalName)                  {                      case "usage":                          Usage = reader.ReadContentAsInt();                          break;                      case "predicate":                          PredicateName = reader.Value;                          break;                      case "namespace":                          NamespaceName = reader.Value;                          break;                  }
Missing Default,FlickrNet,Context,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Context.cs,Load,The following switch statement is missing a default case: switch (reader.LocalName)                  {                      case "count":                          Count = reader.ReadElementContentAsInt();                          break;                      case "prevphoto":                          PreviousPhoto = new ContextPhoto();                          ((IFlickrParsable)PreviousPhoto).Load(reader);                          if (PreviousPhoto.PhotoId == "0") PreviousPhoto = null;                          break;                      case "nextphoto":                          NextPhoto = new ContextPhoto();                          ((IFlickrParsable)NextPhoto).Load(reader);                          if (NextPhoto.PhotoId == "0") NextPhoto = null;                          break;                    }
Missing Default,FlickrNet,ContextPhoto,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Context.cs,Load,The following switch statement is missing a default case: switch (reader.LocalName)                  {                      case "id":                          PhotoId = reader.Value;                          break;                      case "secret":                          Secret = reader.Value;                          break;                      case "server":                          Server = reader.Value;                          break;                      case "farm":                          Farm = reader.Value;                          break;                      case "title":                          Title = reader.Value;                          break;                      case "url":                          Url = "https://www.flickr.com" + reader.Value;                          break;                      case "thumb":                          ThumbnailUrl = reader.Value;                          break;                      case "media":                          MediaType = reader.Value == "photo" ? MediaType.Photos : MediaType.Videos;                          break;                    }
Missing Default,FlickrNet,AllContexts,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Context.cs,Load,The following switch statement is missing a default case: switch (reader.LocalName)                  {                      case "set":                          var set = new ContextSet();                          set.PhotosetId = reader.GetAttribute("id");                          set.Title = reader.GetAttribute("title");                          Sets.Add(set);                          reader.Read();                          break;                      case "pool":                          var group = new ContextGroup();                          group.GroupId = reader.GetAttribute("id");                          group.Title = reader.GetAttribute("title");                          Groups.Add(group);                          reader.Read();                          break;                  }
Missing Default,FlickrNet,Predicate,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Predicate.cs,Load,The following switch statement is missing a default case: switch (reader.LocalName)                  {                      case "usage":                          Usage = reader.ReadContentAsInt();                          break;                      case "namespaces":                          Namespaces = reader.ReadContentAsInt();                          break;                  }
Missing Default,FlickrNet,ShapeData,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\ShapeData.cs,Load,The following switch statement is missing a default case: switch (reader.LocalName)                  {                      case "polylines":                          reader.Read();                          while (reader.LocalName == "polyline")                          {                              var polyline = new Collection<PointD>();                              string polystring = reader.ReadElementContentAsString();                              string[] points = polystring.Split(' ');                              foreach (string point in points)                              {                                  string[] xy = point.Split(''');                                  if (xy.Length != 2)                                      throw new ParsingException("Invalid polypoint found in polyline : '" + polystring +                                                                 "'");                                  polyline.Add(                                      new PointD(                                          double.Parse(xy[0]' System.Globalization.NumberFormatInfo.InvariantInfo)'                                          double.Parse(xy[1]' System.Globalization.NumberFormatInfo.InvariantInfo)));                              }                              PolyLines.Add(polyline);                          }                          reader.Read();                          break;                      case "urls":                          reader.Skip();                          break;                    }
Missing Default,FlickrNet,ExceptionHandler,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\ExceptionHandler.cs,CreateExceptionFromMessage,The following switch statement is missing a default case: switch (message)              {                  case "Photo not found":                  case "Photo not found.":                      return new PhotoNotFoundException(code' message);                  case "Photoset not found":                  case "Photoset not found.":                      return new PhotosetNotFoundException(code' message);                  case "Permission Denied":                      return new PermissionDeniedException(code' message);                  case "User not found":                  case "User not found.":                      return new UserNotFoundException(code' message);              }
Missing Default,FlickrNet,GeoPermissions,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\GeoPermissions.cs,Load,The following switch statement is missing a default case: switch (reader.LocalName)                  {                      case "id":                          PhotoId = reader.Value;                          break;                      case "ispublic":                          IsPublic = reader.Value == "1";                          break;                      case "iscontact":                          IsContact = reader.Value == "1";                          break;                      case "isfamily":                          IsFamily = reader.Value == "1";                          break;                      case "isfriend":                          IsFriend = reader.Value == "1";                          break;                  }
Missing Default,FlickrNet,GroupThrottleInfo,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Groups.cs,Load,The following switch statement is missing a default case: switch (reader.LocalName)                  {                      case "count":                          Count = reader.ReadContentAsInt();                          break;                      case "mode":                          Mode = ParseMode(reader.Value);                          break;                      case "remaining":                          Remaining = reader.ReadContentAsInt();                          break;                  }
Missing Default,FlickrNet,GroupInfoRestrictions,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Groups.cs,Load,The following switch statement is missing a default case: switch (reader.LocalName)                  {                      case "photos_ok":                          PhotosAccepted = reader.Value == "1";                          break;                      case "videos_ok":                          VideosAccepted = reader.Value == "1";                          break;                      case "images_ok":                          ImagesAccepted = reader.Value == "1";                          break;                      case "screens_ok":                          ScreenshotsAccepted = reader.Value == "1";                          break;                      case "art_ok":                          ArtIllustrationsAccepted = reader.Value == "1";                          break;                      case "safe_ok":                          SafeItemsAccepted = reader.Value == "1";                          break;                      case "moderate_ok":                          ModeratedItemsAccepted = reader.Value == "1";                          break;                      case "resitricted_ok":                          RestrictedItemsAccepted = reader.Value == "1";                          break;                      case "has_geo":                          GeoInfoRequired = reader.Value == "1";                          break;                  }
Missing Default,FlickrNet,Method,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\MethodCollection.cs,Load,The following switch statement is missing a default case: switch (reader.LocalName)                  {                      case "description":                          Description = reader.ReadElementContentAsString();                          break;                      case "response":                          Response = reader.ReadElementContentAsString();                          break;                      case "explanation":                          Explanation = reader.ReadElementContentAsString();                          break;                  }
Missing Default,FlickrNet,PhotoFavorite,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\PhotoFavorite.cs,Load,The following switch statement is missing a default case: switch (reader.Name)                  {                      case "nsid":                          UserId = reader.Value;                          break;                      case "username":                          UserName = reader.Value;                          break;                      case "favedate":                          FavoriteDate = UtilityMethods.UnixTimestampToDate(reader.Value);                          break;                  }
Missing Default,FlickrNet,PhotoFavoriteCollection,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\PhotoFavoriteCollection.cs,Load,The following switch statement is missing a default case: switch (reader.Name)                  {                      case "id":                          PhotoId = reader.Value;                          break;                      case "page":                          Page = int.Parse(reader.Value' System.Globalization.CultureInfo.InvariantCulture);                          break;                      case "pages":                          Pages = int.Parse(reader.Value' System.Globalization.CultureInfo.InvariantCulture);                          break;                      case "perpage":                          PerPage = int.Parse(reader.Value' System.Globalization.CultureInfo.InvariantCulture);                          break;                      case "total":                          Total = int.Parse(reader.Value' System.Globalization.CultureInfo.InvariantCulture);                          break;                  }
Missing Default,FlickrNet,SuggestionCollection,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\SuggestionCollection.cs,Load,The following switch statement is missing a default case: switch (reader.LocalName)                  {                      case "total":                          Total = reader.ReadContentAsInt();                          break;                      case "page":                          Page = reader.ReadContentAsInt();                          break;                      case "per_page":                          PerPage = reader.ReadContentAsInt();                          break;                  }
Missing Default,FlickrNet,Ticket,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Ticket.cs,Load,The following switch statement is missing a default case: switch (reader.LocalName)                  {                      case "id":                          TicketId = reader.Value;                          break;                      case "invalid":                          InvalidTicketId = true;                          break;                      case "photoid":                          PhotoId = reader.Value;                          break;                      case "complete":                          CompleteStatus = reader.ReadContentAsInt();                          break;                  }
Missing Default,FlickrNet,UserGeoPermissions,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\UserGeoPermissions.cs,Load,The following switch statement is missing a default case: switch (reader.LocalName)                  {                      case "nsid":                          UserId = reader.Value;                          break;                      case "geoperms":                          GeoPermissions = (GeoPermissionType)reader.ReadContentAsInt();                          break;                      case "importgeoexif":                          ImportGeoExif = reader.Value == "1";                          break;                  }
Missing Default,FlickrNet,Value,D:\research\architectureSmells\repos1\samjudson_flickr-net\FlickrNet\Value.cs,Load,The following switch statement is missing a default case: switch (reader.LocalName)                  {                      case "usage":                          Usage = reader.ReadContentAsInt();                          break;                      case "predicate":                          PredicateName = reader.Value;                          break;                      case "namespace":                          NamespaceName = reader.Value;                          break;                      case "first_added":                          DateFirstAdded = UtilityMethods.UnixTimestampToDate(reader.Value);                          break;                      case "last_added":                          DateLastUsed = UtilityMethods.UnixTimestampToDate(reader.Value);                          break;                  }
