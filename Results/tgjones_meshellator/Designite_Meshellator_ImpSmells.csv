Implementation smell,Namespace,Class,File,Method,Description
Long Method,Meshellator.Importers.Ply,PlyImporter,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Ply\PlyImporter.cs,ImportFile,The method has 102 lines of code.
Long Method,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetControlPoints,The method has 132 lines of code.
Complex Method,Meshellator.Importers.Autodesk3ds,Autodesk3dsImporter,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Autodesk3dsImporter.cs,computeNormals,Cyclomatic complexity of the method is 13
Complex Method,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,readSplineParams,Cyclomatic complexity of the method is 12
Complex Method,Meshellator.Importers.Obj,ObjImporter,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Obj\ObjImporter.cs,ImportFile,Cyclomatic complexity of the method is 10
Complex Method,Meshellator.Importers.Ply,PlyImporter,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Ply\PlyImporter.cs,ImportFile,Cyclomatic complexity of the method is 11
Long Parameter List,Meshellator.Importers.Ply,PlyImporter,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Ply\PlyImporter.cs,GetAsciiItem,The method has 5 parameters. Parameters: word' type' intVal' uintVal' doubleVal
Long Parameter List,Meshellator.Primitives,BezierPrimitiveTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\BezierPrimitiveTessellator.cs,Bezier,The method has 5 parameters. Parameters: p1' p2' p3' p4' t
Long Parameter List,Meshellator.Primitives,BezierPrimitiveTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\BezierPrimitiveTessellator.cs,Bezier,The method has 5 parameters. Parameters: p1' p2' p3' p4' t
Long Parameter List,Meshellator.Primitives,BezierPrimitiveTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\BezierPrimitiveTessellator.cs,BezierTangent,The method has 5 parameters. Parameters: p1' p2' p3' p4' t
Long Parameter List,Meshellator.Primitives,BezierPrimitiveTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\BezierPrimitiveTessellator.cs,BezierTangent,The method has 5 parameters. Parameters: p1' p2' p3' p4' t
Long Statement,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,read_MAT_ENTRY,The length of the statement  "						mat._transparency = 1.0f - mat._transparency;	// values come form 3ds inverted' so we need to invert it here again. 0 is full transparent' 1 is opaque. " is 151.
Long Statement,Meshellator.Importers.Obj.Objects.Parsers,LineParserFactory,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Obj\Objects\Parsers\LineParserFactory.cs,GetLineParser,The length of the statement  "			//String[] lineWords = line.split(" ");		// Nhaaaaaaaaaaa' 3DS max doesn't use clean space but some other shity character :( ! " is 126.
Long Statement,Meshellator.Importers.Obj.Objects.Parsers.Obj,FaceParser,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Obj\Objects\Parsers\Obj\FaceParser.cs,ParseLine,The length of the statement  "					if (currentValue <= _object.Textures.Count)  // This is to compensate the fact that if no texture is in the obj file' sometimes '1' is put instead of 'blank' (we find coord1/1/coord3 instead of coord1//coord3 or coord1/coord3) " is 226.
Magic Number,Meshellator,Material,C:\repos\tgjones_meshellator\src\Meshellator\Material.cs,Material,The following statement contains a magic number: Shininess = 16;
Magic Number,Meshellator,MeshUtility,C:\repos\tgjones_meshellator\src\Meshellator\MeshUtility.cs,AccumulateTriangleNormals,The following statement contains a magic number: for (int i = 0; i < indices.Count; i += 3)  			{  				Point3D vector4 = positions[indices[i]];  				Point3D vector = positions[indices[i + 1]];  				Point3D vector3 = positions[indices[i + 2]];  				Vector3D vector2 = Vector3D.Normalize(Vector3D.Cross(vector3 - vector' vector - vector4));  				for (int j = 0; j < 3; j++)  					vertexNormals[indices[i + j]] += vector2;  			}
Magic Number,Meshellator,MeshUtility,C:\repos\tgjones_meshellator\src\Meshellator\MeshUtility.cs,AccumulateTriangleNormals,The following statement contains a magic number: for (int i = 0; i < indices.Count; i += 3)  			{  				Point3D vector4 = positions[indices[i]];  				Point3D vector = positions[indices[i + 1]];  				Point3D vector3 = positions[indices[i + 2]];  				Vector3D vector2 = Vector3D.Normalize(Vector3D.Cross(vector3 - vector' vector - vector4));  				for (int j = 0; j < 3; j++)  					vertexNormals[indices[i + j]] += vector2;  			}
Magic Number,Meshellator,MeshUtility,C:\repos\tgjones_meshellator\src\Meshellator\MeshUtility.cs,AccumulateTriangleNormals,The following statement contains a magic number: for (int i = 0; i < indices.Count; i += 3)  			{  				Point3D vector4 = positions[indices[i]];  				Point3D vector = positions[indices[i + 1]];  				Point3D vector3 = positions[indices[i + 2]];  				Vector3D vector2 = Vector3D.Normalize(Vector3D.Cross(vector3 - vector' vector - vector4));  				for (int j = 0; j < 3; j++)  					vertexNormals[indices[i + j]] += vector2;  			}
Magic Number,Meshellator,MeshUtility,C:\repos\tgjones_meshellator\src\Meshellator\MeshUtility.cs,ConvertTriangleStripToTriangleList,The following statement contains a magic number: for (int i = 2; i < indices.Count; ++i)  			{  				if (i % 2 == 0)  				{  					newIndices.Add(indices[i - 2]);  					newIndices.Add(indices[i - 1]);  					newIndices.Add(indices[i - 0]);  				}  				else  				{  					newIndices.Add(indices[i - 1]);  					newIndices.Add(indices[i - 2]);  					newIndices.Add(indices[i - 0]);  				}  			}
Magic Number,Meshellator,MeshUtility,C:\repos\tgjones_meshellator\src\Meshellator\MeshUtility.cs,ConvertTriangleStripToTriangleList,The following statement contains a magic number: for (int i = 2; i < indices.Count; ++i)  			{  				if (i % 2 == 0)  				{  					newIndices.Add(indices[i - 2]);  					newIndices.Add(indices[i - 1]);  					newIndices.Add(indices[i - 0]);  				}  				else  				{  					newIndices.Add(indices[i - 1]);  					newIndices.Add(indices[i - 2]);  					newIndices.Add(indices[i - 0]);  				}  			}
Magic Number,Meshellator,MeshUtility,C:\repos\tgjones_meshellator\src\Meshellator\MeshUtility.cs,ConvertTriangleStripToTriangleList,The following statement contains a magic number: for (int i = 2; i < indices.Count; ++i)  			{  				if (i % 2 == 0)  				{  					newIndices.Add(indices[i - 2]);  					newIndices.Add(indices[i - 1]);  					newIndices.Add(indices[i - 0]);  				}  				else  				{  					newIndices.Add(indices[i - 1]);  					newIndices.Add(indices[i - 2]);  					newIndices.Add(indices[i - 0]);  				}  			}
Magic Number,Meshellator,MeshUtility,C:\repos\tgjones_meshellator\src\Meshellator\MeshUtility.cs,ConvertTriangleStripToTriangleList,The following statement contains a magic number: for (int i = 2; i < indices.Count; ++i)  			{  				if (i % 2 == 0)  				{  					newIndices.Add(indices[i - 2]);  					newIndices.Add(indices[i - 1]);  					newIndices.Add(indices[i - 0]);  				}  				else  				{  					newIndices.Add(indices[i - 1]);  					newIndices.Add(indices[i - 2]);  					newIndices.Add(indices[i - 0]);  				}  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Autodesk3dsImporter,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Autodesk3dsImporter.cs,ImportFile,The following statement contains a magic number: Material defaultMaterial = new Material  			{  				Name = "Default"'  				FileName = fileName'  				DiffuseColor = ColorsRgbF.Gray'  				SpecularColor = ColorsRgbF.White'  				Shininess = 64  			};
Magic Number,Meshellator.Importers.Autodesk3ds,Decode3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Decode3ds.cs,printBytes,The following statement contains a magic number: if (mDecLevel >= Scene3ds.DECODE_ALL)  			{  				while (n > 0)  				{  					for (int i = 0; i < mLevel; i++)  					{  						mDecCont.mText.Append("  ");  					}  					int run = n;  					if (run > 20)  					{  						run = 20;  					}  					for (int i = 0; i < run; i++)  					{  						mDecCont.mText.Append(intToHex(reader.ReadByte()' 2) + " ");  					}  					n -= run;  					mDecCont.mText.Append(mNL);  				}  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Decode3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Decode3ds.cs,printBytes,The following statement contains a magic number: if (mDecLevel >= Scene3ds.DECODE_ALL)  			{  				while (n > 0)  				{  					for (int i = 0; i < mLevel; i++)  					{  						mDecCont.mText.Append("  ");  					}  					int run = n;  					if (run > 20)  					{  						run = 20;  					}  					for (int i = 0; i < run; i++)  					{  						mDecCont.mText.Append(intToHex(reader.ReadByte()' 2) + " ");  					}  					n -= run;  					mDecCont.mText.Append(mNL);  				}  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Decode3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Decode3ds.cs,printBytes,The following statement contains a magic number: if (mDecLevel >= Scene3ds.DECODE_ALL)  			{  				while (n > 0)  				{  					for (int i = 0; i < mLevel; i++)  					{  						mDecCont.mText.Append("  ");  					}  					int run = n;  					if (run > 20)  					{  						run = 20;  					}  					for (int i = 0; i < run; i++)  					{  						mDecCont.mText.Append(intToHex(reader.ReadByte()' 2) + " ");  					}  					n -= run;  					mDecCont.mText.Append(mNL);  				}  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Decode3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Decode3ds.cs,intToHex,The following statement contains a magic number: char[] buf = new char[8];
Magic Number,Meshellator.Importers.Autodesk3ds,Decode3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Decode3ds.cs,intToHex,The following statement contains a magic number: int shift = (digits - 1) * 4;
Magic Number,Meshellator.Importers.Autodesk3ds,Decode3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Decode3ds.cs,intToHex,The following statement contains a magic number: for (int i = 0; i < digits; i++)  			{  				buf[i] = lut[(val >> shift) & 0xf];  				shift -= 4;  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Decode3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Decode3ds.cs,printHead,The following statement contains a magic number: if ((known == true) || (mDecLevel >= Scene3ds.DECODE_USED_PARAMS))  			{  				println(name + "  id=0x" + intToHex(id' 4) + " length=" + length);  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Face3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Face3ds.cs,ToString,The following statement contains a magic number: return "P0 P1 P2:" +  		       Utils3ds.intToString(P0' 6) +   		       Utils3ds.intToString(P1' 6) +  		       Utils3ds.intToString(P2' 6) +  		       "  Flags: " + ((Flags & AB_VISIBLE) != 0 ? "AB" : "--") +  		       " "  +        ((Flags & BC_VISIBLE) != 0 ? "BC" : "--") +  		       " "  +        ((Flags & CA_VISIBLE) != 0 ? "CA" : "--") +   			 "  "  +       ((Flags & U_WRAP) != 0 ? "U"  : "-") +   			 " "  +        ((Flags & V_WRAP) != 0 ? "V"  : "-");
Magic Number,Meshellator.Importers.Autodesk3ds,Face3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Face3ds.cs,ToString,The following statement contains a magic number: return "P0 P1 P2:" +  		       Utils3ds.intToString(P0' 6) +   		       Utils3ds.intToString(P1' 6) +  		       Utils3ds.intToString(P2' 6) +  		       "  Flags: " + ((Flags & AB_VISIBLE) != 0 ? "AB" : "--") +  		       " "  +        ((Flags & BC_VISIBLE) != 0 ? "BC" : "--") +  		       " "  +        ((Flags & CA_VISIBLE) != 0 ? "CA" : "--") +   			 "  "  +       ((Flags & U_WRAP) != 0 ? "U"  : "-") +   			 " "  +        ((Flags & V_WRAP) != 0 ? "V"  : "-");
Magic Number,Meshellator.Importers.Autodesk3ds,Face3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Face3ds.cs,ToString,The following statement contains a magic number: return "P0 P1 P2:" +  		       Utils3ds.intToString(P0' 6) +   		       Utils3ds.intToString(P1' 6) +  		       Utils3ds.intToString(P2' 6) +  		       "  Flags: " + ((Flags & AB_VISIBLE) != 0 ? "AB" : "--") +  		       " "  +        ((Flags & BC_VISIBLE) != 0 ? "BC" : "--") +  		       " "  +        ((Flags & CA_VISIBLE) != 0 ? "CA" : "--") +   			 "  "  +       ((Flags & U_WRAP) != 0 ? "U"  : "-") +   			 " "  +        ((Flags & V_WRAP) != 0 ? "V"  : "-");
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,Read3ds,The following statement contains a magic number: read_M3DMAGIC(head.length - 6);
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,read_M3DMAGIC,The following statement contains a magic number: while (filePos() < chunk_end)  			{  				Head head = read_HEAD();  				switch (head.id)  				{  					case CHUNK_MDATA:  						read_MDATA(head.length - 6);  						break;  					case CHUNK_KFDATA:  						read_KFDATA(head.length - 6);  						break;  					default:  						SkipChunk(head.length - 6);  						break;  				}  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,read_M3DMAGIC,The following statement contains a magic number: while (filePos() < chunk_end)  			{  				Head head = read_HEAD();  				switch (head.id)  				{  					case CHUNK_MDATA:  						read_MDATA(head.length - 6);  						break;  					case CHUNK_KFDATA:  						read_KFDATA(head.length - 6);  						break;  					default:  						SkipChunk(head.length - 6);  						break;  				}  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,read_M3DMAGIC,The following statement contains a magic number: while (filePos() < chunk_end)  			{  				Head head = read_HEAD();  				switch (head.id)  				{  					case CHUNK_MDATA:  						read_MDATA(head.length - 6);  						break;  					case CHUNK_KFDATA:  						read_KFDATA(head.length - 6);  						break;  					default:  						SkipChunk(head.length - 6);  						break;  				}  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,read_MDATA,The following statement contains a magic number: while (filePos() < chunk_end)  			{  				Head head = read_HEAD();  				switch (head.id)  				{  					case CHUNK_NAMED_OBJECT:  						read_NAMED_OBJECT(head.length - 6);  						break;  					case CHUNK_MAT_ENTRY:  						read_MAT_ENTRY(head.length - 6);  						break;  					default:  						SkipChunk(head.length - 6);  						break;  				}  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,read_MDATA,The following statement contains a magic number: while (filePos() < chunk_end)  			{  				Head head = read_HEAD();  				switch (head.id)  				{  					case CHUNK_NAMED_OBJECT:  						read_NAMED_OBJECT(head.length - 6);  						break;  					case CHUNK_MAT_ENTRY:  						read_MAT_ENTRY(head.length - 6);  						break;  					default:  						SkipChunk(head.length - 6);  						break;  				}  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,read_MDATA,The following statement contains a magic number: while (filePos() < chunk_end)  			{  				Head head = read_HEAD();  				switch (head.id)  				{  					case CHUNK_NAMED_OBJECT:  						read_NAMED_OBJECT(head.length - 6);  						break;  					case CHUNK_MAT_ENTRY:  						read_MAT_ENTRY(head.length - 6);  						break;  					default:  						SkipChunk(head.length - 6);  						break;  				}  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,readColor,The following statement contains a magic number: while (filePos() < chunk_end)  			{  				Head head = read_HEAD();  				switch (head.id)  				{  					case CHUNK_COL_RGB:  						lvColor = readRGBColor();  						break;  					case CHUNK_COL_TRU:  						lvColor = readTrueColor();  						break;  					default:  						SkipChunk(head.length - 6);  						break;  				}  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,readPercentage,The following statement contains a magic number: while (filePos() < chunk_end)  			{  				Head head = read_HEAD();  				switch (head.id)  				{  					case CHUNK_PERCENTW:  						//lvColor = readRGBColor();  						int trans = ReadUnsignedShort();  						val = (float)(trans / 100.0);  						//System.out.println( "short: " + trans + "  float: " + val );    						break;  					case CHUNK_PERCENTF:  						val = ReadFloat();  						//System.out.println( "just float: " + val );  						break;  					default:  						SkipChunk(head.length - 6);  						break;  				}  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,readPercentage,The following statement contains a magic number: while (filePos() < chunk_end)  			{  				Head head = read_HEAD();  				switch (head.id)  				{  					case CHUNK_PERCENTW:  						//lvColor = readRGBColor();  						int trans = ReadUnsignedShort();  						val = (float)(trans / 100.0);  						//System.out.println( "short: " + trans + "  float: " + val );    						break;  					case CHUNK_PERCENTF:  						val = ReadFloat();  						//System.out.println( "just float: " + val );  						break;  					default:  						SkipChunk(head.length - 6);  						break;  				}  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,read_MAT_ENTRY,The following statement contains a magic number: while (filePos() < chunk_end)  			{  				Head head = read_HEAD();  				switch (head.id)  				{  					case CHUNK_MAT_NAME:  						mat.mName = ReadName();  						break;  					case CHUNK_MAT_AMBIENT:  						mat.mAmbient = readColor(head.length - 6);  						break;  					case CHUNK_MAT_SPECULAR:  						mat.mSpecular = readColor(head.length - 6);  						break;  					case CHUNK_MAT_DIFFUSE:  						mat.mDiffuse = readColor(head.length - 6);  						break;  					case CHUNK_MAT_MAP:  						mat.DiffuseTexture = ParseTextureChunk(head.length - 6);  						break;  					//case CHUNK_MAT_SHININESS:  					//mat._shininess = readFloat();  					//break;  					case CHUNK_MAT_TRANSPARENCY:  						mat._transparency = readPercentage(head.length - 6);  						mat._transparency = 1.0f - mat._transparency;	// values come form 3ds inverted' so we need to invert it here again. 0 is full transparent' 1 is opaque.  						break;  					default:  						SkipChunk(head.length - 6);  						break;  				}  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,read_MAT_ENTRY,The following statement contains a magic number: while (filePos() < chunk_end)  			{  				Head head = read_HEAD();  				switch (head.id)  				{  					case CHUNK_MAT_NAME:  						mat.mName = ReadName();  						break;  					case CHUNK_MAT_AMBIENT:  						mat.mAmbient = readColor(head.length - 6);  						break;  					case CHUNK_MAT_SPECULAR:  						mat.mSpecular = readColor(head.length - 6);  						break;  					case CHUNK_MAT_DIFFUSE:  						mat.mDiffuse = readColor(head.length - 6);  						break;  					case CHUNK_MAT_MAP:  						mat.DiffuseTexture = ParseTextureChunk(head.length - 6);  						break;  					//case CHUNK_MAT_SHININESS:  					//mat._shininess = readFloat();  					//break;  					case CHUNK_MAT_TRANSPARENCY:  						mat._transparency = readPercentage(head.length - 6);  						mat._transparency = 1.0f - mat._transparency;	// values come form 3ds inverted' so we need to invert it here again. 0 is full transparent' 1 is opaque.  						break;  					default:  						SkipChunk(head.length - 6);  						break;  				}  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,read_MAT_ENTRY,The following statement contains a magic number: while (filePos() < chunk_end)  			{  				Head head = read_HEAD();  				switch (head.id)  				{  					case CHUNK_MAT_NAME:  						mat.mName = ReadName();  						break;  					case CHUNK_MAT_AMBIENT:  						mat.mAmbient = readColor(head.length - 6);  						break;  					case CHUNK_MAT_SPECULAR:  						mat.mSpecular = readColor(head.length - 6);  						break;  					case CHUNK_MAT_DIFFUSE:  						mat.mDiffuse = readColor(head.length - 6);  						break;  					case CHUNK_MAT_MAP:  						mat.DiffuseTexture = ParseTextureChunk(head.length - 6);  						break;  					//case CHUNK_MAT_SHININESS:  					//mat._shininess = readFloat();  					//break;  					case CHUNK_MAT_TRANSPARENCY:  						mat._transparency = readPercentage(head.length - 6);  						mat._transparency = 1.0f - mat._transparency;	// values come form 3ds inverted' so we need to invert it here again. 0 is full transparent' 1 is opaque.  						break;  					default:  						SkipChunk(head.length - 6);  						break;  				}  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,read_MAT_ENTRY,The following statement contains a magic number: while (filePos() < chunk_end)  			{  				Head head = read_HEAD();  				switch (head.id)  				{  					case CHUNK_MAT_NAME:  						mat.mName = ReadName();  						break;  					case CHUNK_MAT_AMBIENT:  						mat.mAmbient = readColor(head.length - 6);  						break;  					case CHUNK_MAT_SPECULAR:  						mat.mSpecular = readColor(head.length - 6);  						break;  					case CHUNK_MAT_DIFFUSE:  						mat.mDiffuse = readColor(head.length - 6);  						break;  					case CHUNK_MAT_MAP:  						mat.DiffuseTexture = ParseTextureChunk(head.length - 6);  						break;  					//case CHUNK_MAT_SHININESS:  					//mat._shininess = readFloat();  					//break;  					case CHUNK_MAT_TRANSPARENCY:  						mat._transparency = readPercentage(head.length - 6);  						mat._transparency = 1.0f - mat._transparency;	// values come form 3ds inverted' so we need to invert it here again. 0 is full transparent' 1 is opaque.  						break;  					default:  						SkipChunk(head.length - 6);  						break;  				}  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,read_MAT_ENTRY,The following statement contains a magic number: while (filePos() < chunk_end)  			{  				Head head = read_HEAD();  				switch (head.id)  				{  					case CHUNK_MAT_NAME:  						mat.mName = ReadName();  						break;  					case CHUNK_MAT_AMBIENT:  						mat.mAmbient = readColor(head.length - 6);  						break;  					case CHUNK_MAT_SPECULAR:  						mat.mSpecular = readColor(head.length - 6);  						break;  					case CHUNK_MAT_DIFFUSE:  						mat.mDiffuse = readColor(head.length - 6);  						break;  					case CHUNK_MAT_MAP:  						mat.DiffuseTexture = ParseTextureChunk(head.length - 6);  						break;  					//case CHUNK_MAT_SHININESS:  					//mat._shininess = readFloat();  					//break;  					case CHUNK_MAT_TRANSPARENCY:  						mat._transparency = readPercentage(head.length - 6);  						mat._transparency = 1.0f - mat._transparency;	// values come form 3ds inverted' so we need to invert it here again. 0 is full transparent' 1 is opaque.  						break;  					default:  						SkipChunk(head.length - 6);  						break;  				}  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,read_MAT_ENTRY,The following statement contains a magic number: while (filePos() < chunk_end)  			{  				Head head = read_HEAD();  				switch (head.id)  				{  					case CHUNK_MAT_NAME:  						mat.mName = ReadName();  						break;  					case CHUNK_MAT_AMBIENT:  						mat.mAmbient = readColor(head.length - 6);  						break;  					case CHUNK_MAT_SPECULAR:  						mat.mSpecular = readColor(head.length - 6);  						break;  					case CHUNK_MAT_DIFFUSE:  						mat.mDiffuse = readColor(head.length - 6);  						break;  					case CHUNK_MAT_MAP:  						mat.DiffuseTexture = ParseTextureChunk(head.length - 6);  						break;  					//case CHUNK_MAT_SHININESS:  					//mat._shininess = readFloat();  					//break;  					case CHUNK_MAT_TRANSPARENCY:  						mat._transparency = readPercentage(head.length - 6);  						mat._transparency = 1.0f - mat._transparency;	// values come form 3ds inverted' so we need to invert it here again. 0 is full transparent' 1 is opaque.  						break;  					default:  						SkipChunk(head.length - 6);  						break;  				}  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,ParseTextureChunk,The following statement contains a magic number: while (filePos() < chunk_end)  			{  				Head head = read_HEAD();  				switch (head.id)  				{  					case CHUNK_MAT_MAPNAME:  						result.MapName = ReadName();  						break;  					case CHUNK_MAT_MAP_USCALE:  						// Texture coordinate scaling in the U direction  						result.ScaleU = ReadFloat();  						break;  					case CHUNK_MAT_MAP_VSCALE:  						// Texture coordinate scaling in the V direction  						result.ScaleV = ReadFloat();  						break;  					case CHUNK_MAT_MAP_UOFFSET:  						// Texture coordinate offset in the U direction  						result.OffsetU = -ReadFloat();  						break;    					case CHUNK_MAT_MAP_VOFFSET:  						// Texture coordinate offset in the V direction  						result.OffsetV = ReadFloat();  						break;    					case CHUNK_MAT_MAP_ANG:  						// Texture coordinate rotation' CCW in DEGREES  						result.Rotation = -MathUtility.ToRadians((ReadFloat()));  						break;    					case CHUNK_MAT_MAP_TILING:  					{  						int iFlags = ReadUnsignedShort();    						// Get the mapping mode (for both axes)  						if ((iFlags & 0x2u) != 0)  							result.MapMode = TextureMapMode.Mirror;  						else if ((iFlags & 0x10u) != 0)  							result.MapMode = TextureMapMode.Decal;  						else // wrapping in all remaining cases  							result.MapMode = TextureMapMode.Wrap;    						break;  					}  					default:  						SkipChunk(head.length - 6);  						break;  				}  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,read_NAMED_OBJECT,The following statement contains a magic number: while (filePos() < chunk_end)  			{  				Head head = read_HEAD();  				switch (head.id)  				{  					case CHUNK_N_TRI_OBJECT:  						read_N_TRI_OBJECT(name' head.length - 6);  						break;  					case CHUNK_N_LIGHT:  						read_N_LIGHT(name' head.length - 6);  						break;  					case CHUNK_N_CAMERA:  						read_N_CAMERA(name' head.length - 6);  						break;  					default:  						SkipChunk(head.length - 6);  						break;  				}  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,read_NAMED_OBJECT,The following statement contains a magic number: while (filePos() < chunk_end)  			{  				Head head = read_HEAD();  				switch (head.id)  				{  					case CHUNK_N_TRI_OBJECT:  						read_N_TRI_OBJECT(name' head.length - 6);  						break;  					case CHUNK_N_LIGHT:  						read_N_LIGHT(name' head.length - 6);  						break;  					case CHUNK_N_CAMERA:  						read_N_CAMERA(name' head.length - 6);  						break;  					default:  						SkipChunk(head.length - 6);  						break;  				}  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,read_NAMED_OBJECT,The following statement contains a magic number: while (filePos() < chunk_end)  			{  				Head head = read_HEAD();  				switch (head.id)  				{  					case CHUNK_N_TRI_OBJECT:  						read_N_TRI_OBJECT(name' head.length - 6);  						break;  					case CHUNK_N_LIGHT:  						read_N_LIGHT(name' head.length - 6);  						break;  					case CHUNK_N_CAMERA:  						read_N_CAMERA(name' head.length - 6);  						break;  					default:  						SkipChunk(head.length - 6);  						break;  				}  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,read_NAMED_OBJECT,The following statement contains a magic number: while (filePos() < chunk_end)  			{  				Head head = read_HEAD();  				switch (head.id)  				{  					case CHUNK_N_TRI_OBJECT:  						read_N_TRI_OBJECT(name' head.length - 6);  						break;  					case CHUNK_N_LIGHT:  						read_N_LIGHT(name' head.length - 6);  						break;  					case CHUNK_N_CAMERA:  						read_N_CAMERA(name' head.length - 6);  						break;  					default:  						SkipChunk(head.length - 6);  						break;  				}  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,readSpotChunk,The following statement contains a magic number: if (mDecode != null)  			{  				mDecode.println("Target: " + pLight.mTarget);  				mDecode.println("Hotspot: " + Utils3ds.floatToString(pLight.mHotspot' 12));  				mDecode.println("Falloff: " + Utils3ds.floatToString(pLight.mFalloff' 12));  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,readSpotChunk,The following statement contains a magic number: if (mDecode != null)  			{  				mDecode.println("Target: " + pLight.mTarget);  				mDecode.println("Hotspot: " + Utils3ds.floatToString(pLight.mHotspot' 12));  				mDecode.println("Falloff: " + Utils3ds.floatToString(pLight.mFalloff' 12));  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,readSpotChunk,The following statement contains a magic number: while (filePos() < chunk_end)  			{  				Head head = read_HEAD();  				switch (head.id)  				{  					case CHUNK_LIT_RAYSHAD:  						//        pLight.mRayShadows = (readUnsignedShort() > 0);  						pLight.mRayShadows = true;  						break;  					case CHUNK_LIT_SHADOWED:  						//        pLight.mShadowed = (readUnsignedShort() > 0);  						pLight.mShadowed = true;  						break;  					case CHUNK_LIT_LOCAL_SHADOW:  						ReadFloat();  						ReadFloat();  						ReadFloat();  						break;  					case CHUNK_LIT_LOCAL_SHADOW2:  						pLight.mShadowBias = ReadFloat();  						pLight.mShadowFilter = ReadFloat();  						pLight.mShadowSize = ReadFloat();  						break;  					case CHUNK_LIT_SEE_CONE:  						//        pLight.mCone = (readUnsignedShort() > 0);  						pLight.mCone = true;  						break;  					case CHUNK_LIT_SPOT_RECTANGULAR:  						//        pLight.mRectangular = (readUnsignedShort() > 0);  						pLight.mRectangular = true;  						break;  					case CHUNK_LIT_SPOT_OVERSHOOT:  						//        pLight.mOvershoot = (readUnsignedShort() > 0);  						pLight.mOvershoot = true;  						break;  					case CHUNK_LIT_SPOT_PROJECTOR:  						//        pLight.mProjector = (readUnsignedShort() > 0);  						pLight.mProjector = true;  						pLight.mProjectorName = ReadName(64);  						break;  					case CHUNK_LIT_SPOT_RANGE:  						ReadFloat();  						break;  					case CHUNK_LIT_SPOT_ROLL:  						pLight.mRoll = ReadFloat();  						break;  					case CHUNK_LIT_SPOT_ASPECT:  						pLight.mAspect = ReadFloat();  						break;  					case CHUNK_LIT_RAY_BIAS:  						pLight.mRayBias = ReadFloat();  						break;  					default:  						SkipChunk(head.length - 6);  						break;  				}  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,readSpotChunk,The following statement contains a magic number: while (filePos() < chunk_end)  			{  				Head head = read_HEAD();  				switch (head.id)  				{  					case CHUNK_LIT_RAYSHAD:  						//        pLight.mRayShadows = (readUnsignedShort() > 0);  						pLight.mRayShadows = true;  						break;  					case CHUNK_LIT_SHADOWED:  						//        pLight.mShadowed = (readUnsignedShort() > 0);  						pLight.mShadowed = true;  						break;  					case CHUNK_LIT_LOCAL_SHADOW:  						ReadFloat();  						ReadFloat();  						ReadFloat();  						break;  					case CHUNK_LIT_LOCAL_SHADOW2:  						pLight.mShadowBias = ReadFloat();  						pLight.mShadowFilter = ReadFloat();  						pLight.mShadowSize = ReadFloat();  						break;  					case CHUNK_LIT_SEE_CONE:  						//        pLight.mCone = (readUnsignedShort() > 0);  						pLight.mCone = true;  						break;  					case CHUNK_LIT_SPOT_RECTANGULAR:  						//        pLight.mRectangular = (readUnsignedShort() > 0);  						pLight.mRectangular = true;  						break;  					case CHUNK_LIT_SPOT_OVERSHOOT:  						//        pLight.mOvershoot = (readUnsignedShort() > 0);  						pLight.mOvershoot = true;  						break;  					case CHUNK_LIT_SPOT_PROJECTOR:  						//        pLight.mProjector = (readUnsignedShort() > 0);  						pLight.mProjector = true;  						pLight.mProjectorName = ReadName(64);  						break;  					case CHUNK_LIT_SPOT_RANGE:  						ReadFloat();  						break;  					case CHUNK_LIT_SPOT_ROLL:  						pLight.mRoll = ReadFloat();  						break;  					case CHUNK_LIT_SPOT_ASPECT:  						pLight.mAspect = ReadFloat();  						break;  					case CHUNK_LIT_RAY_BIAS:  						pLight.mRayBias = ReadFloat();  						break;  					default:  						SkipChunk(head.length - 6);  						break;  				}  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,read_N_LIGHT,The following statement contains a magic number: while (filePos() < chunk_end)  			{  				Head head = read_HEAD();  				switch (head.id)  				{  					case CHUNK_LIT_OFF:  						lit.mOff = (ReadUnsignedShort() > 0);  						break;  					case CHUNK_LIT_SPOT:  						readSpotChunk(lit' head.length - 6);  						break;  					case CHUNK_COL_RGB:  					case CHUNK_COL_LINRGB:  						lit.mColor = readRGBColor();  						break;  					case CHUNK_COL_TRU:  					case CHUNK_COL_LINTRU:  						lit.mColor = readTrueColor();  						break;  					case CHUNK_LIT_ATTENUATE:  						lit.mAttenuation = ReadFloat();  						break;  					case CHUNK_LIT_INNER_RANGE:  						lit.mInnerRange = ReadFloat();  						break;  					case CHUNK_LIT_OUTER_RANGE:  						lit.mOuterRange = ReadFloat();  						break;  					case CHUNK_LIT_MULTIPLIER:  						lit.mMultiplexer = ReadFloat();  						break;  					default:  						SkipChunk(head.length - 6);  						break;  				}  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,read_N_LIGHT,The following statement contains a magic number: while (filePos() < chunk_end)  			{  				Head head = read_HEAD();  				switch (head.id)  				{  					case CHUNK_LIT_OFF:  						lit.mOff = (ReadUnsignedShort() > 0);  						break;  					case CHUNK_LIT_SPOT:  						readSpotChunk(lit' head.length - 6);  						break;  					case CHUNK_COL_RGB:  					case CHUNK_COL_LINRGB:  						lit.mColor = readRGBColor();  						break;  					case CHUNK_COL_TRU:  					case CHUNK_COL_LINTRU:  						lit.mColor = readTrueColor();  						break;  					case CHUNK_LIT_ATTENUATE:  						lit.mAttenuation = ReadFloat();  						break;  					case CHUNK_LIT_INNER_RANGE:  						lit.mInnerRange = ReadFloat();  						break;  					case CHUNK_LIT_OUTER_RANGE:  						lit.mOuterRange = ReadFloat();  						break;  					case CHUNK_LIT_MULTIPLIER:  						lit.mMultiplexer = ReadFloat();  						break;  					default:  						SkipChunk(head.length - 6);  						break;  				}  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,readTrueColor,The following statement contains a magic number: lvColor.mRed = (float)(ReadByte() & 0xff) / 255;
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,readTrueColor,The following statement contains a magic number: lvColor.mGreen = (float)(ReadByte() & 0xff) / 255;
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,readTrueColor,The following statement contains a magic number: lvColor.mBlue = (float)(ReadByte() & 0xff) / 255;
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,read_N_CAMERA,The following statement contains a magic number: if (mDecode != null)  			{  				mDecode.enter();  				mDecode.println("Position: " + cam.mPosition);  				mDecode.println("Target:   " + cam.mTarget);  				mDecode.println("Roll: " + Utils3ds.floatToString(cam.mRoll' 12));  				mDecode.println("Lens: " + Utils3ds.floatToString(cam.mLens' 12));  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,read_N_CAMERA,The following statement contains a magic number: if (mDecode != null)  			{  				mDecode.enter();  				mDecode.println("Position: " + cam.mPosition);  				mDecode.println("Target:   " + cam.mTarget);  				mDecode.println("Roll: " + Utils3ds.floatToString(cam.mRoll' 12));  				mDecode.println("Lens: " + Utils3ds.floatToString(cam.mLens' 12));  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,read_N_CAMERA,The following statement contains a magic number: while (filePos() < chunk_end)  			{  				Head head = read_HEAD();  				switch (head.id)  				{  					case CHUNK_CAM_RANGES:  						read_CAM_RANGES(cam);  						break;  					case CHUNK_CAM_SEE_CONE:  					default:  						SkipChunk(head.length - 6);  						break;  				}  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,read_CAM_RANGES,The following statement contains a magic number: if (mDecode != null)  			{  				mDecode.enter();  				mDecode.println("Near plane:" + Utils3ds.floatToString(cam.mNearPlane' 14));  				mDecode.println("Far plane: " + Utils3ds.floatToString(cam.mFarPlane' 14));  				mDecode.leave();  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,read_CAM_RANGES,The following statement contains a magic number: if (mDecode != null)  			{  				mDecode.enter();  				mDecode.println("Near plane:" + Utils3ds.floatToString(cam.mNearPlane' 14));  				mDecode.println("Far plane: " + Utils3ds.floatToString(cam.mFarPlane' 14));  				mDecode.leave();  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,read_N_TRI_OBJECT,The following statement contains a magic number: while (filePos() < chunk_end)  			{  				Head head = read_HEAD();  				switch (head.id)  				{  					case CHUNK_POINT_ARRAY:  						mes.mVertex = read_POINT_ARRAY();  						break;  					case CHUNK_TEX_VERTS:  						mes.mTexCoord = read_TEX_VERTS();  						break;  					case CHUNK_MESH_TEXTURE_INFO:  						read_MESH_TEXTURE_INFO(mes);  						break;  					case CHUNK_MESH_MATRIX:  						readMatrix(mes.mLocalSystem);  						break;  					case CHUNK_FACE_ARRAY:  						read_FACE_ARRAY(mes' head.length - 6);  						break;  					default:  						SkipChunk(head.length - 6);  						break;  				}  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,read_N_TRI_OBJECT,The following statement contains a magic number: while (filePos() < chunk_end)  			{  				Head head = read_HEAD();  				switch (head.id)  				{  					case CHUNK_POINT_ARRAY:  						mes.mVertex = read_POINT_ARRAY();  						break;  					case CHUNK_TEX_VERTS:  						mes.mTexCoord = read_TEX_VERTS();  						break;  					case CHUNK_MESH_TEXTURE_INFO:  						read_MESH_TEXTURE_INFO(mes);  						break;  					case CHUNK_MESH_MATRIX:  						readMatrix(mes.mLocalSystem);  						break;  					case CHUNK_FACE_ARRAY:  						read_FACE_ARRAY(mes' head.length - 6);  						break;  					default:  						SkipChunk(head.length - 6);  						break;  				}  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,read_POINT_ARRAY,The following statement contains a magic number: if (mDecode != null)  			{  				mDecode.enter();  				mDecode.println("Vertices: " + verts);  				for (int i = 0; i < verts; i++)  				{  					mDecode.println(" " + Utils3ds.intToString(i' 4) + ":  " + v[i]);  				}  				mDecode.leave();  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,read_TEX_VERTS,The following statement contains a magic number: if (mDecode != null)  			{  				mDecode.enter();  				mDecode.println("Coords: " + coords);  				for (int i = 0; i < coords; i++)  				{  					mDecode.println(" " + Utils3ds.intToString(i' 4) + ":  " + tc[i]);  				}  				mDecode.leave();  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,read_MESH_TEXTURE_INFO,The following statement contains a magic number: if (mDecode != null)  			{  				mDecode.enter();  				string type = "";  				switch (mes.TextureMappingMode)  				{  					case TextureMappingMode3ds.PlanarMap:  						type = "PLANAR";  						break;  					case TextureMappingMode3ds.CylindricalMap:  						type = "CYLINDRICAL";  						break;  					case TextureMappingMode3ds.SphericalMap:  						type = "SPHERICAL";  						break;  					default:  						type = "" + mes.TextureMappingMode;  						break;  				}  				mDecode.println("Texture mapping type: " + type);  				mDecode.println("Texture U tiling: " + Utils3ds.floatToString(mes.mTexUTile' 9));  				mDecode.println("Texture V tiling: " + Utils3ds.floatToString(mes.mTexVTile' 9));  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,read_MESH_TEXTURE_INFO,The following statement contains a magic number: if (mDecode != null)  			{  				mDecode.enter();  				string type = "";  				switch (mes.TextureMappingMode)  				{  					case TextureMappingMode3ds.PlanarMap:  						type = "PLANAR";  						break;  					case TextureMappingMode3ds.CylindricalMap:  						type = "CYLINDRICAL";  						break;  					case TextureMappingMode3ds.SphericalMap:  						type = "SPHERICAL";  						break;  					default:  						type = "" + mes.TextureMappingMode;  						break;  				}  				mDecode.println("Texture mapping type: " + type);  				mDecode.println("Texture U tiling: " + Utils3ds.floatToString(mes.mTexUTile' 9));  				mDecode.println("Texture V tiling: " + Utils3ds.floatToString(mes.mTexVTile' 9));  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,read_MESH_TEXTURE_INFO,The following statement contains a magic number: SkipBytes(4 * 4 + (3 * 4 + 3) * 4);
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,read_MESH_TEXTURE_INFO,The following statement contains a magic number: SkipBytes(4 * 4 + (3 * 4 + 3) * 4);
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,read_MESH_TEXTURE_INFO,The following statement contains a magic number: SkipBytes(4 * 4 + (3 * 4 + 3) * 4);
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,read_MESH_TEXTURE_INFO,The following statement contains a magic number: SkipBytes(4 * 4 + (3 * 4 + 3) * 4);
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,read_MESH_TEXTURE_INFO,The following statement contains a magic number: SkipBytes(4 * 4 + (3 * 4 + 3) * 4);
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,read_MESH_TEXTURE_INFO,The following statement contains a magic number: SkipBytes(4 * 4 + (3 * 4 + 3) * 4);
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,readMatrix,The following statement contains a magic number: mtx[0' 2] = ReadFloat();
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,readMatrix,The following statement contains a magic number: mtx[2' 0] = ReadFloat();
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,readMatrix,The following statement contains a magic number: mtx[2' 2] = ReadFloat();
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,readMatrix,The following statement contains a magic number: mtx[2' 2] = ReadFloat();
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,readMatrix,The following statement contains a magic number: mtx[2' 1] = ReadFloat();
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,readMatrix,The following statement contains a magic number: mtx[1' 2] = ReadFloat();
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,readMatrix,The following statement contains a magic number: mtx[0' 3] = ReadFloat();
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,readMatrix,The following statement contains a magic number: mtx[2' 3] = ReadFloat();
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,readMatrix,The following statement contains a magic number: mtx[2' 3] = ReadFloat();
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,readMatrix,The following statement contains a magic number: mtx[1' 3] = ReadFloat();
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,readMatrix,The following statement contains a magic number: if (mDecode != null)  			{  				mDecode.enter();  				for (int n = 0; n < 3; n++)  				{  					mDecode.println("" + Utils3ds.floatToString(mtx[n' 0]' 13) +  													" " + Utils3ds.floatToString(mtx[n' 1]' 13) +  													" " + Utils3ds.floatToString(mtx[n' 2]' 13) +  													" " + Utils3ds.floatToString(mtx[n' 3]' 13));  				}  				mDecode.leave();  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,readMatrix,The following statement contains a magic number: if (mDecode != null)  			{  				mDecode.enter();  				for (int n = 0; n < 3; n++)  				{  					mDecode.println("" + Utils3ds.floatToString(mtx[n' 0]' 13) +  													" " + Utils3ds.floatToString(mtx[n' 1]' 13) +  													" " + Utils3ds.floatToString(mtx[n' 2]' 13) +  													" " + Utils3ds.floatToString(mtx[n' 3]' 13));  				}  				mDecode.leave();  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,readMatrix,The following statement contains a magic number: if (mDecode != null)  			{  				mDecode.enter();  				for (int n = 0; n < 3; n++)  				{  					mDecode.println("" + Utils3ds.floatToString(mtx[n' 0]' 13) +  													" " + Utils3ds.floatToString(mtx[n' 1]' 13) +  													" " + Utils3ds.floatToString(mtx[n' 2]' 13) +  													" " + Utils3ds.floatToString(mtx[n' 3]' 13));  				}  				mDecode.leave();  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,readMatrix,The following statement contains a magic number: if (mDecode != null)  			{  				mDecode.enter();  				for (int n = 0; n < 3; n++)  				{  					mDecode.println("" + Utils3ds.floatToString(mtx[n' 0]' 13) +  													" " + Utils3ds.floatToString(mtx[n' 1]' 13) +  													" " + Utils3ds.floatToString(mtx[n' 2]' 13) +  													" " + Utils3ds.floatToString(mtx[n' 3]' 13));  				}  				mDecode.leave();  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,readMatrix,The following statement contains a magic number: if (mDecode != null)  			{  				mDecode.enter();  				for (int n = 0; n < 3; n++)  				{  					mDecode.println("" + Utils3ds.floatToString(mtx[n' 0]' 13) +  													" " + Utils3ds.floatToString(mtx[n' 1]' 13) +  													" " + Utils3ds.floatToString(mtx[n' 2]' 13) +  													" " + Utils3ds.floatToString(mtx[n' 3]' 13));  				}  				mDecode.leave();  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,readMatrix,The following statement contains a magic number: if (mDecode != null)  			{  				mDecode.enter();  				for (int n = 0; n < 3; n++)  				{  					mDecode.println("" + Utils3ds.floatToString(mtx[n' 0]' 13) +  													" " + Utils3ds.floatToString(mtx[n' 1]' 13) +  													" " + Utils3ds.floatToString(mtx[n' 2]' 13) +  													" " + Utils3ds.floatToString(mtx[n' 3]' 13));  				}  				mDecode.leave();  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,readMatrix,The following statement contains a magic number: if (mDecode != null)  			{  				mDecode.enter();  				for (int n = 0; n < 3; n++)  				{  					mDecode.println("" + Utils3ds.floatToString(mtx[n' 0]' 13) +  													" " + Utils3ds.floatToString(mtx[n' 1]' 13) +  													" " + Utils3ds.floatToString(mtx[n' 2]' 13) +  													" " + Utils3ds.floatToString(mtx[n' 3]' 13));  				}  				mDecode.leave();  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,read_FACE_ARRAY,The following statement contains a magic number: if (mDecode != null)  			{  				mDecode.enter();  				mDecode.println("Faces: " + faces);  				for (int i = 0; i < faces; i++)  				{  					mDecode.println(" " + Utils3ds.intToString(i' 4) + ":  " + mes.mFace[i]);  				}  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,read_FACE_ARRAY,The following statement contains a magic number: while (filePos() < chunk_end)  			{  				Head head = read_HEAD();  				switch (head.id)  				{  					case CHUNK_MSH_MAT_GROUP:  						read_MSH_MAT_GROUP(mes);  						break;  					case CHUNK_SMOOTH_GROUP:  						read_SMOOTH_GROUP(mes' head.length - 6);  						break;  					default:  						SkipChunk(head.length - 6);  						break;  				}  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,read_FACE_ARRAY,The following statement contains a magic number: while (filePos() < chunk_end)  			{  				Head head = read_HEAD();  				switch (head.id)  				{  					case CHUNK_MSH_MAT_GROUP:  						read_MSH_MAT_GROUP(mes);  						break;  					case CHUNK_SMOOTH_GROUP:  						read_SMOOTH_GROUP(mes' head.length - 6);  						break;  					default:  						SkipChunk(head.length - 6);  						break;  				}  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,read_SMOOTH_GROUP,The following statement contains a magic number: int entrys = chunk_len / 4;
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,read_SMOOTH_GROUP,The following statement contains a magic number: if (mDecode != null)  			{  				mDecode.enter();  				mDecode.println("Entrys: " + entrys);  				for (int i = 0; i < entrys; i++)  				{  					mDecode.println(Utils3ds.intToString(i' 4) + ": " + Utils3ds.intToBinString(mes.mSmoothGroup[i]' 32));  				}  				mDecode.leave();  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,read_SMOOTH_GROUP,The following statement contains a magic number: if (mDecode != null)  			{  				mDecode.enter();  				mDecode.println("Entrys: " + entrys);  				for (int i = 0; i < entrys; i++)  				{  					mDecode.println(Utils3ds.intToString(i' 4) + ": " + Utils3ds.intToBinString(mes.mSmoothGroup[i]' 32));  				}  				mDecode.leave();  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,read_KFDATA,The following statement contains a magic number: while (filePos() < chunk_end)  			{  				Head head = read_HEAD();  				switch (head.id)  				{  					case CHUNK_KFSEG:  						mStartFrame = ReadInt();  						mEndFrame = ReadInt();  						if (mDecode != null)  						{  							mDecode.enter();  							mDecode.println("Start frame: " + mStartFrame);  							mDecode.println("End frame:   " + mEndFrame);  							mDecode.leave();  						}  						break;  					case CHUNK_OBJECT_NODE_TAG:  						read_OBJECT_NODE_TAG(head.length - 6);  						break;  					case CHUNK_TARGET_NODE_TAG:  						read_TARGET_NODE_TAG(head.length - 6);  						break;  					case CHUNK_CAMERA_NODE_TAG:  						read_CAMERA_NODE_TAG(head.length - 6);  						break;  					default:  						SkipChunk(head.length - 6);  						break;  				}  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,read_KFDATA,The following statement contains a magic number: while (filePos() < chunk_end)  			{  				Head head = read_HEAD();  				switch (head.id)  				{  					case CHUNK_KFSEG:  						mStartFrame = ReadInt();  						mEndFrame = ReadInt();  						if (mDecode != null)  						{  							mDecode.enter();  							mDecode.println("Start frame: " + mStartFrame);  							mDecode.println("End frame:   " + mEndFrame);  							mDecode.leave();  						}  						break;  					case CHUNK_OBJECT_NODE_TAG:  						read_OBJECT_NODE_TAG(head.length - 6);  						break;  					case CHUNK_TARGET_NODE_TAG:  						read_TARGET_NODE_TAG(head.length - 6);  						break;  					case CHUNK_CAMERA_NODE_TAG:  						read_CAMERA_NODE_TAG(head.length - 6);  						break;  					default:  						SkipChunk(head.length - 6);  						break;  				}  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,read_KFDATA,The following statement contains a magic number: while (filePos() < chunk_end)  			{  				Head head = read_HEAD();  				switch (head.id)  				{  					case CHUNK_KFSEG:  						mStartFrame = ReadInt();  						mEndFrame = ReadInt();  						if (mDecode != null)  						{  							mDecode.enter();  							mDecode.println("Start frame: " + mStartFrame);  							mDecode.println("End frame:   " + mEndFrame);  							mDecode.leave();  						}  						break;  					case CHUNK_OBJECT_NODE_TAG:  						read_OBJECT_NODE_TAG(head.length - 6);  						break;  					case CHUNK_TARGET_NODE_TAG:  						read_TARGET_NODE_TAG(head.length - 6);  						break;  					case CHUNK_CAMERA_NODE_TAG:  						read_CAMERA_NODE_TAG(head.length - 6);  						break;  					default:  						SkipChunk(head.length - 6);  						break;  				}  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,read_KFDATA,The following statement contains a magic number: while (filePos() < chunk_end)  			{  				Head head = read_HEAD();  				switch (head.id)  				{  					case CHUNK_KFSEG:  						mStartFrame = ReadInt();  						mEndFrame = ReadInt();  						if (mDecode != null)  						{  							mDecode.enter();  							mDecode.println("Start frame: " + mStartFrame);  							mDecode.println("End frame:   " + mEndFrame);  							mDecode.leave();  						}  						break;  					case CHUNK_OBJECT_NODE_TAG:  						read_OBJECT_NODE_TAG(head.length - 6);  						break;  					case CHUNK_TARGET_NODE_TAG:  						read_TARGET_NODE_TAG(head.length - 6);  						break;  					case CHUNK_CAMERA_NODE_TAG:  						read_CAMERA_NODE_TAG(head.length - 6);  						break;  					default:  						SkipChunk(head.length - 6);  						break;  				}  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,read_OBJECT_NODE_TAG,The following statement contains a magic number: while (filePos() < chunk_end)  			{  				Head head = read_HEAD();  				switch (head.id)  				{  					case CHUNK_NODE_ID:  						node_id = read_NODE_ID();  						break;  					case CHUNK_NODE_HDR:  						name = ReadName();  						mes = Meshes.FirstOrDefault(m => m.Name == name);  						if (mes == null) // TODO: This doesn't seem right.  							mes = Meshes.First();  						mes.mNodeId = node_id;  						mes.mNodeFlags = ReadInt();  						mes.mParentNodeId = ReadUnsignedShort();  						if (mDecode != null)  						{  							mDecode.enter();  							mDecode.println("Node flags: 0x" + Utils3ds.intToHexString(mes.mNodeFlags' 8));  							mDecode.println("Parent node id: " + mes.mParentNodeId);  							mDecode.leave();  						}  						// BUG: Build hierarchy here...  						break;  					case CHUNK_PIVOT:  						mes.mPivot.X = ReadFloat();  						mes.mPivot.Z = ReadFloat();  						mes.mPivot.Y = ReadFloat();  						if (mDecode != null)  						{  							mDecode.enter();  							mDecode.println(mes.mPivot.ToString());  							mDecode.leave();  						}  						break;  					case CHUNK_POS_TRACK_TAG:  						read_POS_TRACK_TAG(mes.mPositionTrack);  						break;  					case CHUNK_ROT_TRACK_TAG:  						read_ROT_TRACK_TAG(mes.mRotationTrack);  						break;  					case CHUNK_SCL_TRACK_TAG:  						read_POS_TRACK_TAG(mes.mScaleTrack);  						break;  					case CHUNK_MORPH_TRACK_TAG:  						read_MORPH_TRACK_TAG(mes.mMorphTrack);  						break;  					case CHUNK_HIDE_TRACK_TAG:  						read_HIDE_TRACK_TAG(mes.mHideTrack);  						break;  					default:  						SkipChunk(head.length - 6);  						break;  				}  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,read_OBJECT_NODE_TAG,The following statement contains a magic number: while (filePos() < chunk_end)  			{  				Head head = read_HEAD();  				switch (head.id)  				{  					case CHUNK_NODE_ID:  						node_id = read_NODE_ID();  						break;  					case CHUNK_NODE_HDR:  						name = ReadName();  						mes = Meshes.FirstOrDefault(m => m.Name == name);  						if (mes == null) // TODO: This doesn't seem right.  							mes = Meshes.First();  						mes.mNodeId = node_id;  						mes.mNodeFlags = ReadInt();  						mes.mParentNodeId = ReadUnsignedShort();  						if (mDecode != null)  						{  							mDecode.enter();  							mDecode.println("Node flags: 0x" + Utils3ds.intToHexString(mes.mNodeFlags' 8));  							mDecode.println("Parent node id: " + mes.mParentNodeId);  							mDecode.leave();  						}  						// BUG: Build hierarchy here...  						break;  					case CHUNK_PIVOT:  						mes.mPivot.X = ReadFloat();  						mes.mPivot.Z = ReadFloat();  						mes.mPivot.Y = ReadFloat();  						if (mDecode != null)  						{  							mDecode.enter();  							mDecode.println(mes.mPivot.ToString());  							mDecode.leave();  						}  						break;  					case CHUNK_POS_TRACK_TAG:  						read_POS_TRACK_TAG(mes.mPositionTrack);  						break;  					case CHUNK_ROT_TRACK_TAG:  						read_ROT_TRACK_TAG(mes.mRotationTrack);  						break;  					case CHUNK_SCL_TRACK_TAG:  						read_POS_TRACK_TAG(mes.mScaleTrack);  						break;  					case CHUNK_MORPH_TRACK_TAG:  						read_MORPH_TRACK_TAG(mes.mMorphTrack);  						break;  					case CHUNK_HIDE_TRACK_TAG:  						read_HIDE_TRACK_TAG(mes.mHideTrack);  						break;  					default:  						SkipChunk(head.length - 6);  						break;  				}  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,read_TARGET_NODE_TAG,The following statement contains a magic number: while (filePos() < chunk_end)  			{  				Head head = read_HEAD();  				switch (head.id)  				{  					case CHUNK_NODE_ID:  						target_node_id = read_NODE_ID();  						break;  					case CHUNK_NODE_HDR:  						name = ReadName();  						cam = Cameras.FirstOrDefault(c => c.name() == name);  						if (cam == null) // TODO: This doesn't seem right.  							cam = Cameras.First();  						cam.mTargetNodeId = target_node_id;  						cam.mTargetNodeFlags = ReadInt();  						cam.mTargetParentNodeId = ReadUnsignedShort();  						if (mDecode != null)  						{  							mDecode.enter();  							mDecode.println("Target node flags: 0x" + Utils3ds.intToHexString(cam.mTargetNodeFlags' 8));  							mDecode.println("Target parent node id: " + cam.mTargetParentNodeId);  							mDecode.leave();  						}  						// BUG: Build hierarchy here...  						break;  					case CHUNK_POS_TRACK_TAG:  						read_POS_TRACK_TAG(cam.mTargetTrack);  						break;  					default:  						SkipChunk(head.length - 6);  						break;  				}  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,read_TARGET_NODE_TAG,The following statement contains a magic number: while (filePos() < chunk_end)  			{  				Head head = read_HEAD();  				switch (head.id)  				{  					case CHUNK_NODE_ID:  						target_node_id = read_NODE_ID();  						break;  					case CHUNK_NODE_HDR:  						name = ReadName();  						cam = Cameras.FirstOrDefault(c => c.name() == name);  						if (cam == null) // TODO: This doesn't seem right.  							cam = Cameras.First();  						cam.mTargetNodeId = target_node_id;  						cam.mTargetNodeFlags = ReadInt();  						cam.mTargetParentNodeId = ReadUnsignedShort();  						if (mDecode != null)  						{  							mDecode.enter();  							mDecode.println("Target node flags: 0x" + Utils3ds.intToHexString(cam.mTargetNodeFlags' 8));  							mDecode.println("Target parent node id: " + cam.mTargetParentNodeId);  							mDecode.leave();  						}  						// BUG: Build hierarchy here...  						break;  					case CHUNK_POS_TRACK_TAG:  						read_POS_TRACK_TAG(cam.mTargetTrack);  						break;  					default:  						SkipChunk(head.length - 6);  						break;  				}  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,read_CAMERA_NODE_TAG,The following statement contains a magic number: while (filePos() < chunk_end)  			{  				Head head = read_HEAD();  				switch (head.id)  				{  					case CHUNK_NODE_ID:  						position_node_id = read_NODE_ID();  						break;  					case CHUNK_NODE_HDR:  						name = ReadName();  						cam = Cameras.First(c => c.name() == name);  						cam.mPositionNodeId = position_node_id;  						cam.mPositionNodeFlags = ReadInt();  						cam.mPositionParentNodeId = ReadUnsignedShort();  						if (mDecode != null)  						{  							mDecode.enter();  							mDecode.println("Position node flags: 0x" + Utils3ds.intToHexString(cam.mPositionNodeFlags' 8));  							mDecode.println("Position parent node id: " + cam.mPositionParentNodeId);  							mDecode.leave();  						}  						// BUG: Build hierarchy here...  						break;  					case CHUNK_POS_TRACK_TAG:  						read_POS_TRACK_TAG(cam.mPositionTrack);  						break;  					case CHUNK_FOV_TRACK_TAG:  						readPTrack(cam.mFovTrack);  						break;  					case CHUNK_ROLL_TRACK_TAG:  						readPTrack(cam.mRollTrack);  						break;  					default:  						SkipChunk(head.length - 6);  						break;  				}  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,read_CAMERA_NODE_TAG,The following statement contains a magic number: while (filePos() < chunk_end)  			{  				Head head = read_HEAD();  				switch (head.id)  				{  					case CHUNK_NODE_ID:  						position_node_id = read_NODE_ID();  						break;  					case CHUNK_NODE_HDR:  						name = ReadName();  						cam = Cameras.First(c => c.name() == name);  						cam.mPositionNodeId = position_node_id;  						cam.mPositionNodeFlags = ReadInt();  						cam.mPositionParentNodeId = ReadUnsignedShort();  						if (mDecode != null)  						{  							mDecode.enter();  							mDecode.println("Position node flags: 0x" + Utils3ds.intToHexString(cam.mPositionNodeFlags' 8));  							mDecode.println("Position parent node id: " + cam.mPositionParentNodeId);  							mDecode.leave();  						}  						// BUG: Build hierarchy here...  						break;  					case CHUNK_POS_TRACK_TAG:  						read_POS_TRACK_TAG(cam.mPositionTrack);  						break;  					case CHUNK_FOV_TRACK_TAG:  						readPTrack(cam.mFovTrack);  						break;  					case CHUNK_ROLL_TRACK_TAG:  						readPTrack(cam.mRollTrack);  						break;  					default:  						SkipChunk(head.length - 6);  						break;  				}  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,readTrackHead,The following statement contains a magic number: SkipBytes(2 * 4);
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,readTrackHead,The following statement contains a magic number: SkipBytes(2 * 4);
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,readSplineParams,The following statement contains a magic number: if (flags != 0)  			{  				if ((flags & 0x01) != 0)  				{  					key.Tension = ReadFloat();  					if (mDecode != null)  					{  						mDecode.println("    Tension:    " + Utils3ds.floatToString(key.Tension' 7));  					}  				}  				if ((flags & 0x02) != 0)  				{  					key.Bias = ReadFloat();  					if (mDecode != null)  					{  						mDecode.println("    Bias:       " + Utils3ds.floatToString(key.Bias' 7));  					}  				}  				if ((flags & 0x04) != 0)  				{  					key.Continuity = ReadFloat();  					if (mDecode != null)  					{  						mDecode.println("    Continuity: " + Utils3ds.floatToString(key.Continuity' 7));  					}  				}  				if ((flags & 0x08) != 0)  				{  					key.EaseTo = ReadFloat();  					if (mDecode != null)  					{  						mDecode.println("    Ease to:    " + Utils3ds.floatToString(key.EaseTo' 7));  					}  				}  				if ((flags & 0x10) != 0)  				{  					key.EaseFrom = ReadFloat();  					if (mDecode != null)  					{  						mDecode.println("    Ease from:  " + Utils3ds.floatToString(key.EaseFrom' 7));  					}  				}  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,readSplineParams,The following statement contains a magic number: if (flags != 0)  			{  				if ((flags & 0x01) != 0)  				{  					key.Tension = ReadFloat();  					if (mDecode != null)  					{  						mDecode.println("    Tension:    " + Utils3ds.floatToString(key.Tension' 7));  					}  				}  				if ((flags & 0x02) != 0)  				{  					key.Bias = ReadFloat();  					if (mDecode != null)  					{  						mDecode.println("    Bias:       " + Utils3ds.floatToString(key.Bias' 7));  					}  				}  				if ((flags & 0x04) != 0)  				{  					key.Continuity = ReadFloat();  					if (mDecode != null)  					{  						mDecode.println("    Continuity: " + Utils3ds.floatToString(key.Continuity' 7));  					}  				}  				if ((flags & 0x08) != 0)  				{  					key.EaseTo = ReadFloat();  					if (mDecode != null)  					{  						mDecode.println("    Ease to:    " + Utils3ds.floatToString(key.EaseTo' 7));  					}  				}  				if ((flags & 0x10) != 0)  				{  					key.EaseFrom = ReadFloat();  					if (mDecode != null)  					{  						mDecode.println("    Ease from:  " + Utils3ds.floatToString(key.EaseFrom' 7));  					}  				}  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,readSplineParams,The following statement contains a magic number: if (flags != 0)  			{  				if ((flags & 0x01) != 0)  				{  					key.Tension = ReadFloat();  					if (mDecode != null)  					{  						mDecode.println("    Tension:    " + Utils3ds.floatToString(key.Tension' 7));  					}  				}  				if ((flags & 0x02) != 0)  				{  					key.Bias = ReadFloat();  					if (mDecode != null)  					{  						mDecode.println("    Bias:       " + Utils3ds.floatToString(key.Bias' 7));  					}  				}  				if ((flags & 0x04) != 0)  				{  					key.Continuity = ReadFloat();  					if (mDecode != null)  					{  						mDecode.println("    Continuity: " + Utils3ds.floatToString(key.Continuity' 7));  					}  				}  				if ((flags & 0x08) != 0)  				{  					key.EaseTo = ReadFloat();  					if (mDecode != null)  					{  						mDecode.println("    Ease to:    " + Utils3ds.floatToString(key.EaseTo' 7));  					}  				}  				if ((flags & 0x10) != 0)  				{  					key.EaseFrom = ReadFloat();  					if (mDecode != null)  					{  						mDecode.println("    Ease from:  " + Utils3ds.floatToString(key.EaseFrom' 7));  					}  				}  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,readSplineParams,The following statement contains a magic number: if (flags != 0)  			{  				if ((flags & 0x01) != 0)  				{  					key.Tension = ReadFloat();  					if (mDecode != null)  					{  						mDecode.println("    Tension:    " + Utils3ds.floatToString(key.Tension' 7));  					}  				}  				if ((flags & 0x02) != 0)  				{  					key.Bias = ReadFloat();  					if (mDecode != null)  					{  						mDecode.println("    Bias:       " + Utils3ds.floatToString(key.Bias' 7));  					}  				}  				if ((flags & 0x04) != 0)  				{  					key.Continuity = ReadFloat();  					if (mDecode != null)  					{  						mDecode.println("    Continuity: " + Utils3ds.floatToString(key.Continuity' 7));  					}  				}  				if ((flags & 0x08) != 0)  				{  					key.EaseTo = ReadFloat();  					if (mDecode != null)  					{  						mDecode.println("    Ease to:    " + Utils3ds.floatToString(key.EaseTo' 7));  					}  				}  				if ((flags & 0x10) != 0)  				{  					key.EaseFrom = ReadFloat();  					if (mDecode != null)  					{  						mDecode.println("    Ease from:  " + Utils3ds.floatToString(key.EaseFrom' 7));  					}  				}  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,readSplineParams,The following statement contains a magic number: if (flags != 0)  			{  				if ((flags & 0x01) != 0)  				{  					key.Tension = ReadFloat();  					if (mDecode != null)  					{  						mDecode.println("    Tension:    " + Utils3ds.floatToString(key.Tension' 7));  					}  				}  				if ((flags & 0x02) != 0)  				{  					key.Bias = ReadFloat();  					if (mDecode != null)  					{  						mDecode.println("    Bias:       " + Utils3ds.floatToString(key.Bias' 7));  					}  				}  				if ((flags & 0x04) != 0)  				{  					key.Continuity = ReadFloat();  					if (mDecode != null)  					{  						mDecode.println("    Continuity: " + Utils3ds.floatToString(key.Continuity' 7));  					}  				}  				if ((flags & 0x08) != 0)  				{  					key.EaseTo = ReadFloat();  					if (mDecode != null)  					{  						mDecode.println("    Ease to:    " + Utils3ds.floatToString(key.EaseTo' 7));  					}  				}  				if ((flags & 0x10) != 0)  				{  					key.EaseFrom = ReadFloat();  					if (mDecode != null)  					{  						mDecode.println("    Ease from:  " + Utils3ds.floatToString(key.EaseFrom' 7));  					}  				}  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,readPTrack,The following statement contains a magic number: for (int i = 0; i < keys; i++)  			{  				PKey3ds key = new PKey3ds();  				key.Frame = ReadInt();  				if (mDecode != null)  				{  					mDecode.println("  Frame: " + key.Frame);  				}  				readSplineParams(key);  				key.P = ReadFloat();  				if (mDecode != null)  				{  					mDecode.println("  " + Utils3ds.floatToString(key.P' 13));  				}  				track.mKey[i] = key;  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,read_POS_TRACK_TAG,The following statement contains a magic number: for (int i = 0; i < keys; i++)  			{  				XYZKey3ds key = new XYZKey3ds();  				key.Frame = ReadInt();  				if (mDecode != null)  				{  					mDecode.println("  Frame: " + key.Frame);  				}  				readSplineParams(key);  				key.X = ReadFloat();  				key.Z = ReadFloat();  				key.Y = ReadFloat();  				if (mDecode != null)  				{  					mDecode.println("    X Y Z:" +  														Utils3ds.floatToString(key.X' 13) +  														Utils3ds.floatToString(key.Y' 13) +  														Utils3ds.floatToString(key.Z' 13));  				}  				track.mKey[i] = key;  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,read_POS_TRACK_TAG,The following statement contains a magic number: for (int i = 0; i < keys; i++)  			{  				XYZKey3ds key = new XYZKey3ds();  				key.Frame = ReadInt();  				if (mDecode != null)  				{  					mDecode.println("  Frame: " + key.Frame);  				}  				readSplineParams(key);  				key.X = ReadFloat();  				key.Z = ReadFloat();  				key.Y = ReadFloat();  				if (mDecode != null)  				{  					mDecode.println("    X Y Z:" +  														Utils3ds.floatToString(key.X' 13) +  														Utils3ds.floatToString(key.Y' 13) +  														Utils3ds.floatToString(key.Z' 13));  				}  				track.mKey[i] = key;  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,read_POS_TRACK_TAG,The following statement contains a magic number: for (int i = 0; i < keys; i++)  			{  				XYZKey3ds key = new XYZKey3ds();  				key.Frame = ReadInt();  				if (mDecode != null)  				{  					mDecode.println("  Frame: " + key.Frame);  				}  				readSplineParams(key);  				key.X = ReadFloat();  				key.Z = ReadFloat();  				key.Y = ReadFloat();  				if (mDecode != null)  				{  					mDecode.println("    X Y Z:" +  														Utils3ds.floatToString(key.X' 13) +  														Utils3ds.floatToString(key.Y' 13) +  														Utils3ds.floatToString(key.Z' 13));  				}  				track.mKey[i] = key;  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,read_ROT_TRACK_TAG,The following statement contains a magic number: for (int i = 0; i < keys; i++)  			{  				RotationKey3ds key = new RotationKey3ds();  				key.Frame = ReadInt();  				if (mDecode != null)  				{  					mDecode.println("  Frame: " + key.Frame);  				}  				readSplineParams(key);  				key.A = ReadFloat();  				key.X = ReadFloat();  				key.Z = ReadFloat();  				key.Y = ReadFloat();  				if (mDecode != null)  				{  					mDecode.println("    A X Y Z:" +  														Utils3ds.floatToString(key.A' 12) +  														Utils3ds.floatToString(key.X' 9) +  														Utils3ds.floatToString(key.Y' 9) +  														Utils3ds.floatToString(key.Z' 9));  				}  				track.mKey[i] = key;  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,read_ROT_TRACK_TAG,The following statement contains a magic number: for (int i = 0; i < keys; i++)  			{  				RotationKey3ds key = new RotationKey3ds();  				key.Frame = ReadInt();  				if (mDecode != null)  				{  					mDecode.println("  Frame: " + key.Frame);  				}  				readSplineParams(key);  				key.A = ReadFloat();  				key.X = ReadFloat();  				key.Z = ReadFloat();  				key.Y = ReadFloat();  				if (mDecode != null)  				{  					mDecode.println("    A X Y Z:" +  														Utils3ds.floatToString(key.A' 12) +  														Utils3ds.floatToString(key.X' 9) +  														Utils3ds.floatToString(key.Y' 9) +  														Utils3ds.floatToString(key.Z' 9));  				}  				track.mKey[i] = key;  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,read_ROT_TRACK_TAG,The following statement contains a magic number: for (int i = 0; i < keys; i++)  			{  				RotationKey3ds key = new RotationKey3ds();  				key.Frame = ReadInt();  				if (mDecode != null)  				{  					mDecode.println("  Frame: " + key.Frame);  				}  				readSplineParams(key);  				key.A = ReadFloat();  				key.X = ReadFloat();  				key.Z = ReadFloat();  				key.Y = ReadFloat();  				if (mDecode != null)  				{  					mDecode.println("    A X Y Z:" +  														Utils3ds.floatToString(key.A' 12) +  														Utils3ds.floatToString(key.X' 9) +  														Utils3ds.floatToString(key.Y' 9) +  														Utils3ds.floatToString(key.Z' 9));  				}  				track.mKey[i] = key;  			}
Magic Number,Meshellator.Importers.Autodesk3ds,Scene3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Scene3ds.cs,read_ROT_TRACK_TAG,The following statement contains a magic number: for (int i = 0; i < keys; i++)  			{  				RotationKey3ds key = new RotationKey3ds();  				key.Frame = ReadInt();  				if (mDecode != null)  				{  					mDecode.println("  Frame: " + key.Frame);  				}  				readSplineParams(key);  				key.A = ReadFloat();  				key.X = ReadFloat();  				key.Z = ReadFloat();  				key.Y = ReadFloat();  				if (mDecode != null)  				{  					mDecode.println("    A X Y Z:" +  														Utils3ds.floatToString(key.A' 12) +  														Utils3ds.floatToString(key.X' 9) +  														Utils3ds.floatToString(key.Y' 9) +  														Utils3ds.floatToString(key.Z' 9));  				}  				track.mKey[i] = key;  			}
Magic Number,Meshellator.Importers.Autodesk3ds,TexCoord3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\TexCoords3ds.cs,ToString,The following statement contains a magic number: return "U V:" +  						 Utils3ds.floatToString(U' 10) +  						 Utils3ds.floatToString(V' 10);
Magic Number,Meshellator.Importers.Autodesk3ds,TexCoord3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\TexCoords3ds.cs,ToString,The following statement contains a magic number: return "U V:" +  						 Utils3ds.floatToString(U' 10) +  						 Utils3ds.floatToString(V' 10);
Magic Number,Meshellator.Importers.Autodesk3ds,Utils3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Utils3ds.cs,intToBinString,The following statement contains a magic number: string str = Convert.ToString(val' 2);
Magic Number,Meshellator.Importers.Autodesk3ds,Vertex3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Vertex3ds.cs,ToString,The following statement contains a magic number: return "X Y Z:" +  						 Utils3ds.floatToString(X' 14) +  						 Utils3ds.floatToString(Y' 14) +  						 Utils3ds.floatToString(Z' 14);
Magic Number,Meshellator.Importers.Autodesk3ds,Vertex3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Vertex3ds.cs,ToString,The following statement contains a magic number: return "X Y Z:" +  						 Utils3ds.floatToString(X' 14) +  						 Utils3ds.floatToString(Y' 14) +  						 Utils3ds.floatToString(Z' 14);
Magic Number,Meshellator.Importers.Autodesk3ds,Vertex3ds,C:\repos\tgjones_meshellator\src\Meshellator\Importers\3ds\Vertex3ds.cs,ToString,The following statement contains a magic number: return "X Y Z:" +  						 Utils3ds.floatToString(X' 14) +  						 Utils3ds.floatToString(Y' 14) +  						 Utils3ds.floatToString(Z' 14);
Magic Number,Meshellator.Importers.Obj,ObjImporter,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Obj\ObjImporter.cs,ImportFile,The following statement contains a magic number: Material defaultMaterial = new Material  			{  				Name = "Default"'  				DiffuseColor = ColorsRgbF.Gray'  				SpecularColor = ColorsRgbF.White'  				Shininess = 64  			};
Magic Number,Meshellator.Importers.Obj.Objects,Vertex,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Obj\Objects\Vertex.cs,Length,The following statement contains a magic number: return (float) Math.Sqrt(Math.Pow(X' 2) + Math.Pow(Y' 2) + Math.Pow(Z' 2));
Magic Number,Meshellator.Importers.Obj.Objects,Vertex,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Obj\Objects\Vertex.cs,Length,The following statement contains a magic number: return (float) Math.Sqrt(Math.Pow(X' 2) + Math.Pow(Y' 2) + Math.Pow(Z' 2));
Magic Number,Meshellator.Importers.Obj.Objects,Vertex,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Obj\Objects\Vertex.cs,Length,The following statement contains a magic number: return (float) Math.Sqrt(Math.Pow(X' 2) + Math.Pow(Y' 2) + Math.Pow(Z' 2));
Magic Number,Meshellator.Importers.Obj.Objects.Parsers,NormalParser,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Obj\Objects\Parsers\NormalParser.cs,Parse,The following statement contains a magic number: _vertex.Y = float.Parse(Words[2]);
Magic Number,Meshellator.Importers.Obj.Objects.Parsers,NormalParser,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Obj\Objects\Parsers\NormalParser.cs,Parse,The following statement contains a magic number: _vertex.Z = float.Parse(Words[3]);
Magic Number,Meshellator.Importers.Obj.Objects.Parsers.Mtl,KaParser,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Obj\Objects\Parsers\Mtl\KaParser.cs,Parse,The following statement contains a magic number: _ka.Y = float.Parse(Words[2]);
Magic Number,Meshellator.Importers.Obj.Objects.Parsers.Mtl,KaParser,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Obj\Objects\Parsers\Mtl\KaParser.cs,Parse,The following statement contains a magic number: _ka.Z = float.Parse(Words[3]);
Magic Number,Meshellator.Importers.Obj.Objects.Parsers.Mtl,KdParser,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Obj\Objects\Parsers\Mtl\KdParser.cs,Parse,The following statement contains a magic number: _kd.Y = float.Parse(Words[2]);
Magic Number,Meshellator.Importers.Obj.Objects.Parsers.Mtl,KdParser,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Obj\Objects\Parsers\Mtl\KdParser.cs,Parse,The following statement contains a magic number: _kd.Z = float.Parse(Words[3]);
Magic Number,Meshellator.Importers.Obj.Objects.Parsers.Mtl,KsParser,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Obj\Objects\Parsers\Mtl\KsParser.cs,Parse,The following statement contains a magic number: _ks.Y = float.Parse(Words[2]);
Magic Number,Meshellator.Importers.Obj.Objects.Parsers.Mtl,KsParser,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Obj\Objects\Parsers\Mtl\KsParser.cs,Parse,The following statement contains a magic number: _ks.Z = float.Parse(Words[3]);
Magic Number,Meshellator.Importers.Obj.Objects.Parsers.Obj,FaceParser,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Obj\Objects\Parsers\Obj\FaceParser.cs,Parse,The following statement contains a magic number: switch (Words.Length)  			{  				case 4:  					ParseTriangles();  					break;  				case 5:  					ParseQuad();  					break;  				default:  					break;  			}
Magic Number,Meshellator.Importers.Obj.Objects.Parsers.Obj,FaceParser,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Obj\Objects\Parsers\Obj\FaceParser.cs,Parse,The following statement contains a magic number: switch (Words.Length)  			{  				case 4:  					ParseTriangles();  					break;  				case 5:  					ParseQuad();  					break;  				default:  					break;  			}
Magic Number,Meshellator.Importers.Obj.Objects.Parsers.Obj,FaceParser,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Obj\Objects\Parsers\Obj\FaceParser.cs,ParseTriangles,The following statement contains a magic number: ParseLine(3);
Magic Number,Meshellator.Importers.Obj.Objects.Parsers.Obj,FaceParser,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Obj\Objects\Parsers\Obj\FaceParser.cs,ParseLine,The following statement contains a magic number: string[] rawFaces = new string[3];
Magic Number,Meshellator.Importers.Obj.Objects.Parsers.Obj,FaceParser,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Obj\Objects\Parsers\Obj\FaceParser.cs,ParseLine,The following statement contains a magic number: for (int i = 1; i <= vertexCount; i++)  			{  				// Fix: Use additional array for parsed words  				var wordParts = Words[i].Split('/');  				// Fix: setup rawFaces array  				rawFaces[0] = wordParts[0];  				rawFaces[1] = (wordParts.Length == 3) ? wordParts[1] : null;  				rawFaces[2] = (wordParts.Length == 3)  					? wordParts[2]  					: (wordParts.Length == 2)  						? wordParts[1]  						: null;    				// v  				int currentValue = int.Parse(rawFaces[0]);  				vindices[i - 1] = currentValue - 1;  				// save vertex  				vertices[i - 1] = _object.Vertices[currentValue - 1];	// -1 because references starts at 1    				if (wordParts.Length == 1)  					continue;    				// save texcoords  				if (!string.IsNullOrEmpty(rawFaces[1]))  				{  					currentValue = int.Parse(rawFaces[1]);  					if (currentValue <= _object.Textures.Count)  // This is to compensate the fact that if no texture is in the obj file' sometimes '1' is put instead of 'blank' (we find coord1/1/coord3 instead of coord1//coord3 or coord1/coord3)  					{  						tindices[i - 1] = currentValue - 1;  						textures[i - 1] = _object.Textures[currentValue - 1]; // -1 because references starts at 1  					}  				}    				// save normal  				if (!string.IsNullOrEmpty(rawFaces[2]))  				{  					currentValue = int.Parse(rawFaces[2]);    					nindices[i - 1] = currentValue - 1;  					normals[i - 1] = _object.Normals[currentValue - 1]; // -1 because references starts at 1  				}  			}
Magic Number,Meshellator.Importers.Obj.Objects.Parsers.Obj,FaceParser,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Obj\Objects\Parsers\Obj\FaceParser.cs,ParseLine,The following statement contains a magic number: for (int i = 1; i <= vertexCount; i++)  			{  				// Fix: Use additional array for parsed words  				var wordParts = Words[i].Split('/');  				// Fix: setup rawFaces array  				rawFaces[0] = wordParts[0];  				rawFaces[1] = (wordParts.Length == 3) ? wordParts[1] : null;  				rawFaces[2] = (wordParts.Length == 3)  					? wordParts[2]  					: (wordParts.Length == 2)  						? wordParts[1]  						: null;    				// v  				int currentValue = int.Parse(rawFaces[0]);  				vindices[i - 1] = currentValue - 1;  				// save vertex  				vertices[i - 1] = _object.Vertices[currentValue - 1];	// -1 because references starts at 1    				if (wordParts.Length == 1)  					continue;    				// save texcoords  				if (!string.IsNullOrEmpty(rawFaces[1]))  				{  					currentValue = int.Parse(rawFaces[1]);  					if (currentValue <= _object.Textures.Count)  // This is to compensate the fact that if no texture is in the obj file' sometimes '1' is put instead of 'blank' (we find coord1/1/coord3 instead of coord1//coord3 or coord1/coord3)  					{  						tindices[i - 1] = currentValue - 1;  						textures[i - 1] = _object.Textures[currentValue - 1]; // -1 because references starts at 1  					}  				}    				// save normal  				if (!string.IsNullOrEmpty(rawFaces[2]))  				{  					currentValue = int.Parse(rawFaces[2]);    					nindices[i - 1] = currentValue - 1;  					normals[i - 1] = _object.Normals[currentValue - 1]; // -1 because references starts at 1  				}  			}
Magic Number,Meshellator.Importers.Obj.Objects.Parsers.Obj,FaceParser,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Obj\Objects\Parsers\Obj\FaceParser.cs,ParseLine,The following statement contains a magic number: for (int i = 1; i <= vertexCount; i++)  			{  				// Fix: Use additional array for parsed words  				var wordParts = Words[i].Split('/');  				// Fix: setup rawFaces array  				rawFaces[0] = wordParts[0];  				rawFaces[1] = (wordParts.Length == 3) ? wordParts[1] : null;  				rawFaces[2] = (wordParts.Length == 3)  					? wordParts[2]  					: (wordParts.Length == 2)  						? wordParts[1]  						: null;    				// v  				int currentValue = int.Parse(rawFaces[0]);  				vindices[i - 1] = currentValue - 1;  				// save vertex  				vertices[i - 1] = _object.Vertices[currentValue - 1];	// -1 because references starts at 1    				if (wordParts.Length == 1)  					continue;    				// save texcoords  				if (!string.IsNullOrEmpty(rawFaces[1]))  				{  					currentValue = int.Parse(rawFaces[1]);  					if (currentValue <= _object.Textures.Count)  // This is to compensate the fact that if no texture is in the obj file' sometimes '1' is put instead of 'blank' (we find coord1/1/coord3 instead of coord1//coord3 or coord1/coord3)  					{  						tindices[i - 1] = currentValue - 1;  						textures[i - 1] = _object.Textures[currentValue - 1]; // -1 because references starts at 1  					}  				}    				// save normal  				if (!string.IsNullOrEmpty(rawFaces[2]))  				{  					currentValue = int.Parse(rawFaces[2]);    					nindices[i - 1] = currentValue - 1;  					normals[i - 1] = _object.Normals[currentValue - 1]; // -1 because references starts at 1  				}  			}
Magic Number,Meshellator.Importers.Obj.Objects.Parsers.Obj,FaceParser,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Obj\Objects\Parsers\Obj\FaceParser.cs,ParseLine,The following statement contains a magic number: for (int i = 1; i <= vertexCount; i++)  			{  				// Fix: Use additional array for parsed words  				var wordParts = Words[i].Split('/');  				// Fix: setup rawFaces array  				rawFaces[0] = wordParts[0];  				rawFaces[1] = (wordParts.Length == 3) ? wordParts[1] : null;  				rawFaces[2] = (wordParts.Length == 3)  					? wordParts[2]  					: (wordParts.Length == 2)  						? wordParts[1]  						: null;    				// v  				int currentValue = int.Parse(rawFaces[0]);  				vindices[i - 1] = currentValue - 1;  				// save vertex  				vertices[i - 1] = _object.Vertices[currentValue - 1];	// -1 because references starts at 1    				if (wordParts.Length == 1)  					continue;    				// save texcoords  				if (!string.IsNullOrEmpty(rawFaces[1]))  				{  					currentValue = int.Parse(rawFaces[1]);  					if (currentValue <= _object.Textures.Count)  // This is to compensate the fact that if no texture is in the obj file' sometimes '1' is put instead of 'blank' (we find coord1/1/coord3 instead of coord1//coord3 or coord1/coord3)  					{  						tindices[i - 1] = currentValue - 1;  						textures[i - 1] = _object.Textures[currentValue - 1]; // -1 because references starts at 1  					}  				}    				// save normal  				if (!string.IsNullOrEmpty(rawFaces[2]))  				{  					currentValue = int.Parse(rawFaces[2]);    					nindices[i - 1] = currentValue - 1;  					normals[i - 1] = _object.Normals[currentValue - 1]; // -1 because references starts at 1  				}  			}
Magic Number,Meshellator.Importers.Obj.Objects.Parsers.Obj,FaceParser,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Obj\Objects\Parsers\Obj\FaceParser.cs,ParseLine,The following statement contains a magic number: for (int i = 1; i <= vertexCount; i++)  			{  				// Fix: Use additional array for parsed words  				var wordParts = Words[i].Split('/');  				// Fix: setup rawFaces array  				rawFaces[0] = wordParts[0];  				rawFaces[1] = (wordParts.Length == 3) ? wordParts[1] : null;  				rawFaces[2] = (wordParts.Length == 3)  					? wordParts[2]  					: (wordParts.Length == 2)  						? wordParts[1]  						: null;    				// v  				int currentValue = int.Parse(rawFaces[0]);  				vindices[i - 1] = currentValue - 1;  				// save vertex  				vertices[i - 1] = _object.Vertices[currentValue - 1];	// -1 because references starts at 1    				if (wordParts.Length == 1)  					continue;    				// save texcoords  				if (!string.IsNullOrEmpty(rawFaces[1]))  				{  					currentValue = int.Parse(rawFaces[1]);  					if (currentValue <= _object.Textures.Count)  // This is to compensate the fact that if no texture is in the obj file' sometimes '1' is put instead of 'blank' (we find coord1/1/coord3 instead of coord1//coord3 or coord1/coord3)  					{  						tindices[i - 1] = currentValue - 1;  						textures[i - 1] = _object.Textures[currentValue - 1]; // -1 because references starts at 1  					}  				}    				// save normal  				if (!string.IsNullOrEmpty(rawFaces[2]))  				{  					currentValue = int.Parse(rawFaces[2]);    					nindices[i - 1] = currentValue - 1;  					normals[i - 1] = _object.Normals[currentValue - 1]; // -1 because references starts at 1  				}  			}
Magic Number,Meshellator.Importers.Obj.Objects.Parsers.Obj,FaceParser,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Obj\Objects\Parsers\Obj\FaceParser.cs,ParseLine,The following statement contains a magic number: for (int i = 1; i <= vertexCount; i++)  			{  				// Fix: Use additional array for parsed words  				var wordParts = Words[i].Split('/');  				// Fix: setup rawFaces array  				rawFaces[0] = wordParts[0];  				rawFaces[1] = (wordParts.Length == 3) ? wordParts[1] : null;  				rawFaces[2] = (wordParts.Length == 3)  					? wordParts[2]  					: (wordParts.Length == 2)  						? wordParts[1]  						: null;    				// v  				int currentValue = int.Parse(rawFaces[0]);  				vindices[i - 1] = currentValue - 1;  				// save vertex  				vertices[i - 1] = _object.Vertices[currentValue - 1];	// -1 because references starts at 1    				if (wordParts.Length == 1)  					continue;    				// save texcoords  				if (!string.IsNullOrEmpty(rawFaces[1]))  				{  					currentValue = int.Parse(rawFaces[1]);  					if (currentValue <= _object.Textures.Count)  // This is to compensate the fact that if no texture is in the obj file' sometimes '1' is put instead of 'blank' (we find coord1/1/coord3 instead of coord1//coord3 or coord1/coord3)  					{  						tindices[i - 1] = currentValue - 1;  						textures[i - 1] = _object.Textures[currentValue - 1]; // -1 because references starts at 1  					}  				}    				// save normal  				if (!string.IsNullOrEmpty(rawFaces[2]))  				{  					currentValue = int.Parse(rawFaces[2]);    					nindices[i - 1] = currentValue - 1;  					normals[i - 1] = _object.Normals[currentValue - 1]; // -1 because references starts at 1  				}  			}
Magic Number,Meshellator.Importers.Obj.Objects.Parsers.Obj,FaceParser,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Obj\Objects\Parsers\Obj\FaceParser.cs,ParseLine,The following statement contains a magic number: for (int i = 1; i <= vertexCount; i++)  			{  				// Fix: Use additional array for parsed words  				var wordParts = Words[i].Split('/');  				// Fix: setup rawFaces array  				rawFaces[0] = wordParts[0];  				rawFaces[1] = (wordParts.Length == 3) ? wordParts[1] : null;  				rawFaces[2] = (wordParts.Length == 3)  					? wordParts[2]  					: (wordParts.Length == 2)  						? wordParts[1]  						: null;    				// v  				int currentValue = int.Parse(rawFaces[0]);  				vindices[i - 1] = currentValue - 1;  				// save vertex  				vertices[i - 1] = _object.Vertices[currentValue - 1];	// -1 because references starts at 1    				if (wordParts.Length == 1)  					continue;    				// save texcoords  				if (!string.IsNullOrEmpty(rawFaces[1]))  				{  					currentValue = int.Parse(rawFaces[1]);  					if (currentValue <= _object.Textures.Count)  // This is to compensate the fact that if no texture is in the obj file' sometimes '1' is put instead of 'blank' (we find coord1/1/coord3 instead of coord1//coord3 or coord1/coord3)  					{  						tindices[i - 1] = currentValue - 1;  						textures[i - 1] = _object.Textures[currentValue - 1]; // -1 because references starts at 1  					}  				}    				// save normal  				if (!string.IsNullOrEmpty(rawFaces[2]))  				{  					currentValue = int.Parse(rawFaces[2]);    					nindices[i - 1] = currentValue - 1;  					normals[i - 1] = _object.Normals[currentValue - 1]; // -1 because references starts at 1  				}  			}
Magic Number,Meshellator.Importers.Obj.Objects.Parsers.Obj,FaceParser,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Obj\Objects\Parsers\Obj\FaceParser.cs,ParseQuad,The following statement contains a magic number: ParseLine(4);
Magic Number,Meshellator.Importers.Obj.Objects.Parsers.Obj,FaceParser,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Obj\Objects\Parsers\Obj\FaceParser.cs,IncorporateResults,The following statement contains a magic number: if (vertices.Length == 3)  			{  				// Add list of vertex/normal/texcoord to current group  				// Each object keeps a list of its own data' apart from the global list  				group.Vertices.Add(this.vertices[0]);  				group.Vertices.Add(this.vertices[1]);  				group.Vertices.Add(this.vertices[2]);  				group.Normals.Add(this.normals[0]);  				group.Normals.Add(this.normals[1]);  				group.Normals.Add(this.normals[2]);  				group.TextureCoordinates.Add(this.textures[0]);  				group.TextureCoordinates.Add(this.textures[1]);  				group.TextureCoordinates.Add(this.textures[2]);  				group.Indices.Add(group.IndexCount++);  				group.Indices.Add(group.IndexCount++);  				group.Indices.Add(group.IndexCount++);	// create index list for current object  			}  			else  			{  				// Add list of vertex/normal/texcoord to current group  				// Each object keeps a list of its own data' apart from the global list  				group.Vertices.Add(this.vertices[0]);  				group.Vertices.Add(this.vertices[1]);  				group.Vertices.Add(this.vertices[2]);  				group.Vertices.Add(this.vertices[3]);  				group.Normals.Add(this.normals[0]);  				group.Normals.Add(this.normals[1]);  				group.Normals.Add(this.normals[2]);  				group.Normals.Add(this.normals[3]);  				group.TextureCoordinates.Add(this.textures[0]);  				group.TextureCoordinates.Add(this.textures[1]);  				group.TextureCoordinates.Add(this.textures[2]);  				group.TextureCoordinates.Add(this.textures[3]);  				group.Indices.Add(group.IndexCount++);  				group.Indices.Add(group.IndexCount++);  				group.Indices.Add(group.IndexCount++);  				group.Indices.Add(group.IndexCount++);	// create index list for current object  			}
Magic Number,Meshellator.Importers.Obj.Objects.Parsers.Obj,FaceParser,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Obj\Objects\Parsers\Obj\FaceParser.cs,IncorporateResults,The following statement contains a magic number: if (vertices.Length == 3)  			{  				// Add list of vertex/normal/texcoord to current group  				// Each object keeps a list of its own data' apart from the global list  				group.Vertices.Add(this.vertices[0]);  				group.Vertices.Add(this.vertices[1]);  				group.Vertices.Add(this.vertices[2]);  				group.Normals.Add(this.normals[0]);  				group.Normals.Add(this.normals[1]);  				group.Normals.Add(this.normals[2]);  				group.TextureCoordinates.Add(this.textures[0]);  				group.TextureCoordinates.Add(this.textures[1]);  				group.TextureCoordinates.Add(this.textures[2]);  				group.Indices.Add(group.IndexCount++);  				group.Indices.Add(group.IndexCount++);  				group.Indices.Add(group.IndexCount++);	// create index list for current object  			}  			else  			{  				// Add list of vertex/normal/texcoord to current group  				// Each object keeps a list of its own data' apart from the global list  				group.Vertices.Add(this.vertices[0]);  				group.Vertices.Add(this.vertices[1]);  				group.Vertices.Add(this.vertices[2]);  				group.Vertices.Add(this.vertices[3]);  				group.Normals.Add(this.normals[0]);  				group.Normals.Add(this.normals[1]);  				group.Normals.Add(this.normals[2]);  				group.Normals.Add(this.normals[3]);  				group.TextureCoordinates.Add(this.textures[0]);  				group.TextureCoordinates.Add(this.textures[1]);  				group.TextureCoordinates.Add(this.textures[2]);  				group.TextureCoordinates.Add(this.textures[3]);  				group.Indices.Add(group.IndexCount++);  				group.Indices.Add(group.IndexCount++);  				group.Indices.Add(group.IndexCount++);  				group.Indices.Add(group.IndexCount++);	// create index list for current object  			}
Magic Number,Meshellator.Importers.Obj.Objects.Parsers.Obj,FaceParser,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Obj\Objects\Parsers\Obj\FaceParser.cs,IncorporateResults,The following statement contains a magic number: if (vertices.Length == 3)  			{  				// Add list of vertex/normal/texcoord to current group  				// Each object keeps a list of its own data' apart from the global list  				group.Vertices.Add(this.vertices[0]);  				group.Vertices.Add(this.vertices[1]);  				group.Vertices.Add(this.vertices[2]);  				group.Normals.Add(this.normals[0]);  				group.Normals.Add(this.normals[1]);  				group.Normals.Add(this.normals[2]);  				group.TextureCoordinates.Add(this.textures[0]);  				group.TextureCoordinates.Add(this.textures[1]);  				group.TextureCoordinates.Add(this.textures[2]);  				group.Indices.Add(group.IndexCount++);  				group.Indices.Add(group.IndexCount++);  				group.Indices.Add(group.IndexCount++);	// create index list for current object  			}  			else  			{  				// Add list of vertex/normal/texcoord to current group  				// Each object keeps a list of its own data' apart from the global list  				group.Vertices.Add(this.vertices[0]);  				group.Vertices.Add(this.vertices[1]);  				group.Vertices.Add(this.vertices[2]);  				group.Vertices.Add(this.vertices[3]);  				group.Normals.Add(this.normals[0]);  				group.Normals.Add(this.normals[1]);  				group.Normals.Add(this.normals[2]);  				group.Normals.Add(this.normals[3]);  				group.TextureCoordinates.Add(this.textures[0]);  				group.TextureCoordinates.Add(this.textures[1]);  				group.TextureCoordinates.Add(this.textures[2]);  				group.TextureCoordinates.Add(this.textures[3]);  				group.Indices.Add(group.IndexCount++);  				group.Indices.Add(group.IndexCount++);  				group.Indices.Add(group.IndexCount++);  				group.Indices.Add(group.IndexCount++);	// create index list for current object  			}
Magic Number,Meshellator.Importers.Obj.Objects.Parsers.Obj,FaceParser,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Obj\Objects\Parsers\Obj\FaceParser.cs,IncorporateResults,The following statement contains a magic number: if (vertices.Length == 3)  			{  				// Add list of vertex/normal/texcoord to current group  				// Each object keeps a list of its own data' apart from the global list  				group.Vertices.Add(this.vertices[0]);  				group.Vertices.Add(this.vertices[1]);  				group.Vertices.Add(this.vertices[2]);  				group.Normals.Add(this.normals[0]);  				group.Normals.Add(this.normals[1]);  				group.Normals.Add(this.normals[2]);  				group.TextureCoordinates.Add(this.textures[0]);  				group.TextureCoordinates.Add(this.textures[1]);  				group.TextureCoordinates.Add(this.textures[2]);  				group.Indices.Add(group.IndexCount++);  				group.Indices.Add(group.IndexCount++);  				group.Indices.Add(group.IndexCount++);	// create index list for current object  			}  			else  			{  				// Add list of vertex/normal/texcoord to current group  				// Each object keeps a list of its own data' apart from the global list  				group.Vertices.Add(this.vertices[0]);  				group.Vertices.Add(this.vertices[1]);  				group.Vertices.Add(this.vertices[2]);  				group.Vertices.Add(this.vertices[3]);  				group.Normals.Add(this.normals[0]);  				group.Normals.Add(this.normals[1]);  				group.Normals.Add(this.normals[2]);  				group.Normals.Add(this.normals[3]);  				group.TextureCoordinates.Add(this.textures[0]);  				group.TextureCoordinates.Add(this.textures[1]);  				group.TextureCoordinates.Add(this.textures[2]);  				group.TextureCoordinates.Add(this.textures[3]);  				group.Indices.Add(group.IndexCount++);  				group.Indices.Add(group.IndexCount++);  				group.Indices.Add(group.IndexCount++);  				group.Indices.Add(group.IndexCount++);	// create index list for current object  			}
Magic Number,Meshellator.Importers.Obj.Objects.Parsers.Obj,FaceParser,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Obj\Objects\Parsers\Obj\FaceParser.cs,IncorporateResults,The following statement contains a magic number: if (vertices.Length == 3)  			{  				// Add list of vertex/normal/texcoord to current group  				// Each object keeps a list of its own data' apart from the global list  				group.Vertices.Add(this.vertices[0]);  				group.Vertices.Add(this.vertices[1]);  				group.Vertices.Add(this.vertices[2]);  				group.Normals.Add(this.normals[0]);  				group.Normals.Add(this.normals[1]);  				group.Normals.Add(this.normals[2]);  				group.TextureCoordinates.Add(this.textures[0]);  				group.TextureCoordinates.Add(this.textures[1]);  				group.TextureCoordinates.Add(this.textures[2]);  				group.Indices.Add(group.IndexCount++);  				group.Indices.Add(group.IndexCount++);  				group.Indices.Add(group.IndexCount++);	// create index list for current object  			}  			else  			{  				// Add list of vertex/normal/texcoord to current group  				// Each object keeps a list of its own data' apart from the global list  				group.Vertices.Add(this.vertices[0]);  				group.Vertices.Add(this.vertices[1]);  				group.Vertices.Add(this.vertices[2]);  				group.Vertices.Add(this.vertices[3]);  				group.Normals.Add(this.normals[0]);  				group.Normals.Add(this.normals[1]);  				group.Normals.Add(this.normals[2]);  				group.Normals.Add(this.normals[3]);  				group.TextureCoordinates.Add(this.textures[0]);  				group.TextureCoordinates.Add(this.textures[1]);  				group.TextureCoordinates.Add(this.textures[2]);  				group.TextureCoordinates.Add(this.textures[3]);  				group.Indices.Add(group.IndexCount++);  				group.Indices.Add(group.IndexCount++);  				group.Indices.Add(group.IndexCount++);  				group.Indices.Add(group.IndexCount++);	// create index list for current object  			}
Magic Number,Meshellator.Importers.Obj.Objects.Parsers.Obj,FaceParser,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Obj\Objects\Parsers\Obj\FaceParser.cs,IncorporateResults,The following statement contains a magic number: if (vertices.Length == 3)  			{  				// Add list of vertex/normal/texcoord to current group  				// Each object keeps a list of its own data' apart from the global list  				group.Vertices.Add(this.vertices[0]);  				group.Vertices.Add(this.vertices[1]);  				group.Vertices.Add(this.vertices[2]);  				group.Normals.Add(this.normals[0]);  				group.Normals.Add(this.normals[1]);  				group.Normals.Add(this.normals[2]);  				group.TextureCoordinates.Add(this.textures[0]);  				group.TextureCoordinates.Add(this.textures[1]);  				group.TextureCoordinates.Add(this.textures[2]);  				group.Indices.Add(group.IndexCount++);  				group.Indices.Add(group.IndexCount++);  				group.Indices.Add(group.IndexCount++);	// create index list for current object  			}  			else  			{  				// Add list of vertex/normal/texcoord to current group  				// Each object keeps a list of its own data' apart from the global list  				group.Vertices.Add(this.vertices[0]);  				group.Vertices.Add(this.vertices[1]);  				group.Vertices.Add(this.vertices[2]);  				group.Vertices.Add(this.vertices[3]);  				group.Normals.Add(this.normals[0]);  				group.Normals.Add(this.normals[1]);  				group.Normals.Add(this.normals[2]);  				group.Normals.Add(this.normals[3]);  				group.TextureCoordinates.Add(this.textures[0]);  				group.TextureCoordinates.Add(this.textures[1]);  				group.TextureCoordinates.Add(this.textures[2]);  				group.TextureCoordinates.Add(this.textures[3]);  				group.Indices.Add(group.IndexCount++);  				group.Indices.Add(group.IndexCount++);  				group.Indices.Add(group.IndexCount++);  				group.Indices.Add(group.IndexCount++);	// create index list for current object  			}
Magic Number,Meshellator.Importers.Obj.Objects.Parsers.Obj,FaceParser,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Obj\Objects\Parsers\Obj\FaceParser.cs,IncorporateResults,The following statement contains a magic number: if (vertices.Length == 3)  			{  				// Add list of vertex/normal/texcoord to current group  				// Each object keeps a list of its own data' apart from the global list  				group.Vertices.Add(this.vertices[0]);  				group.Vertices.Add(this.vertices[1]);  				group.Vertices.Add(this.vertices[2]);  				group.Normals.Add(this.normals[0]);  				group.Normals.Add(this.normals[1]);  				group.Normals.Add(this.normals[2]);  				group.TextureCoordinates.Add(this.textures[0]);  				group.TextureCoordinates.Add(this.textures[1]);  				group.TextureCoordinates.Add(this.textures[2]);  				group.Indices.Add(group.IndexCount++);  				group.Indices.Add(group.IndexCount++);  				group.Indices.Add(group.IndexCount++);	// create index list for current object  			}  			else  			{  				// Add list of vertex/normal/texcoord to current group  				// Each object keeps a list of its own data' apart from the global list  				group.Vertices.Add(this.vertices[0]);  				group.Vertices.Add(this.vertices[1]);  				group.Vertices.Add(this.vertices[2]);  				group.Vertices.Add(this.vertices[3]);  				group.Normals.Add(this.normals[0]);  				group.Normals.Add(this.normals[1]);  				group.Normals.Add(this.normals[2]);  				group.Normals.Add(this.normals[3]);  				group.TextureCoordinates.Add(this.textures[0]);  				group.TextureCoordinates.Add(this.textures[1]);  				group.TextureCoordinates.Add(this.textures[2]);  				group.TextureCoordinates.Add(this.textures[3]);  				group.Indices.Add(group.IndexCount++);  				group.Indices.Add(group.IndexCount++);  				group.Indices.Add(group.IndexCount++);  				group.Indices.Add(group.IndexCount++);	// create index list for current object  			}
Magic Number,Meshellator.Importers.Obj.Objects.Parsers.Obj,FaceParser,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Obj\Objects\Parsers\Obj\FaceParser.cs,IncorporateResults,The following statement contains a magic number: if (vertices.Length == 3)  			{  				// Add list of vertex/normal/texcoord to current group  				// Each object keeps a list of its own data' apart from the global list  				group.Vertices.Add(this.vertices[0]);  				group.Vertices.Add(this.vertices[1]);  				group.Vertices.Add(this.vertices[2]);  				group.Normals.Add(this.normals[0]);  				group.Normals.Add(this.normals[1]);  				group.Normals.Add(this.normals[2]);  				group.TextureCoordinates.Add(this.textures[0]);  				group.TextureCoordinates.Add(this.textures[1]);  				group.TextureCoordinates.Add(this.textures[2]);  				group.Indices.Add(group.IndexCount++);  				group.Indices.Add(group.IndexCount++);  				group.Indices.Add(group.IndexCount++);	// create index list for current object  			}  			else  			{  				// Add list of vertex/normal/texcoord to current group  				// Each object keeps a list of its own data' apart from the global list  				group.Vertices.Add(this.vertices[0]);  				group.Vertices.Add(this.vertices[1]);  				group.Vertices.Add(this.vertices[2]);  				group.Vertices.Add(this.vertices[3]);  				group.Normals.Add(this.normals[0]);  				group.Normals.Add(this.normals[1]);  				group.Normals.Add(this.normals[2]);  				group.Normals.Add(this.normals[3]);  				group.TextureCoordinates.Add(this.textures[0]);  				group.TextureCoordinates.Add(this.textures[1]);  				group.TextureCoordinates.Add(this.textures[2]);  				group.TextureCoordinates.Add(this.textures[3]);  				group.Indices.Add(group.IndexCount++);  				group.Indices.Add(group.IndexCount++);  				group.Indices.Add(group.IndexCount++);  				group.Indices.Add(group.IndexCount++);	// create index list for current object  			}
Magic Number,Meshellator.Importers.Obj.Objects.Parsers.Obj,FaceParser,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Obj\Objects\Parsers\Obj\FaceParser.cs,IncorporateResults,The following statement contains a magic number: if (vertices.Length == 3)  			{  				// Add list of vertex/normal/texcoord to current group  				// Each object keeps a list of its own data' apart from the global list  				group.Vertices.Add(this.vertices[0]);  				group.Vertices.Add(this.vertices[1]);  				group.Vertices.Add(this.vertices[2]);  				group.Normals.Add(this.normals[0]);  				group.Normals.Add(this.normals[1]);  				group.Normals.Add(this.normals[2]);  				group.TextureCoordinates.Add(this.textures[0]);  				group.TextureCoordinates.Add(this.textures[1]);  				group.TextureCoordinates.Add(this.textures[2]);  				group.Indices.Add(group.IndexCount++);  				group.Indices.Add(group.IndexCount++);  				group.Indices.Add(group.IndexCount++);	// create index list for current object  			}  			else  			{  				// Add list of vertex/normal/texcoord to current group  				// Each object keeps a list of its own data' apart from the global list  				group.Vertices.Add(this.vertices[0]);  				group.Vertices.Add(this.vertices[1]);  				group.Vertices.Add(this.vertices[2]);  				group.Vertices.Add(this.vertices[3]);  				group.Normals.Add(this.normals[0]);  				group.Normals.Add(this.normals[1]);  				group.Normals.Add(this.normals[2]);  				group.Normals.Add(this.normals[3]);  				group.TextureCoordinates.Add(this.textures[0]);  				group.TextureCoordinates.Add(this.textures[1]);  				group.TextureCoordinates.Add(this.textures[2]);  				group.TextureCoordinates.Add(this.textures[3]);  				group.Indices.Add(group.IndexCount++);  				group.Indices.Add(group.IndexCount++);  				group.Indices.Add(group.IndexCount++);  				group.Indices.Add(group.IndexCount++);	// create index list for current object  			}
Magic Number,Meshellator.Importers.Obj.Objects.Parsers.Obj,FaceParser,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Obj\Objects\Parsers\Obj\FaceParser.cs,IncorporateResults,The following statement contains a magic number: if (vertices.Length == 3)  			{  				// Add list of vertex/normal/texcoord to current group  				// Each object keeps a list of its own data' apart from the global list  				group.Vertices.Add(this.vertices[0]);  				group.Vertices.Add(this.vertices[1]);  				group.Vertices.Add(this.vertices[2]);  				group.Normals.Add(this.normals[0]);  				group.Normals.Add(this.normals[1]);  				group.Normals.Add(this.normals[2]);  				group.TextureCoordinates.Add(this.textures[0]);  				group.TextureCoordinates.Add(this.textures[1]);  				group.TextureCoordinates.Add(this.textures[2]);  				group.Indices.Add(group.IndexCount++);  				group.Indices.Add(group.IndexCount++);  				group.Indices.Add(group.IndexCount++);	// create index list for current object  			}  			else  			{  				// Add list of vertex/normal/texcoord to current group  				// Each object keeps a list of its own data' apart from the global list  				group.Vertices.Add(this.vertices[0]);  				group.Vertices.Add(this.vertices[1]);  				group.Vertices.Add(this.vertices[2]);  				group.Vertices.Add(this.vertices[3]);  				group.Normals.Add(this.normals[0]);  				group.Normals.Add(this.normals[1]);  				group.Normals.Add(this.normals[2]);  				group.Normals.Add(this.normals[3]);  				group.TextureCoordinates.Add(this.textures[0]);  				group.TextureCoordinates.Add(this.textures[1]);  				group.TextureCoordinates.Add(this.textures[2]);  				group.TextureCoordinates.Add(this.textures[3]);  				group.Indices.Add(group.IndexCount++);  				group.Indices.Add(group.IndexCount++);  				group.Indices.Add(group.IndexCount++);  				group.Indices.Add(group.IndexCount++);	// create index list for current object  			}
Magic Number,Meshellator.Importers.Obj.Objects.Parsers.Obj,TextureCoordinateParser,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Obj\Objects\Parsers\Obj\TextureCoordinateParser.cs,Parse,The following statement contains a magic number: if (Words.Length >= 2)  				_coordinate.U = float.Parse(Words[1]);
Magic Number,Meshellator.Importers.Obj.Objects.Parsers.Obj,TextureCoordinateParser,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Obj\Objects\Parsers\Obj\TextureCoordinateParser.cs,Parse,The following statement contains a magic number: if (Words.Length >= 3)  				_coordinate.V = 1 - float.Parse(Words[2]);
Magic Number,Meshellator.Importers.Obj.Objects.Parsers.Obj,TextureCoordinateParser,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Obj\Objects\Parsers\Obj\TextureCoordinateParser.cs,Parse,The following statement contains a magic number: if (Words.Length >= 3)  				_coordinate.V = 1 - float.Parse(Words[2]);
Magic Number,Meshellator.Importers.Obj.Objects.Parsers.Obj,TextureCoordinateParser,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Obj\Objects\Parsers\Obj\TextureCoordinateParser.cs,Parse,The following statement contains a magic number: if (Words.Length >= 4)  				_coordinate.W = float.Parse(Words[3]);
Magic Number,Meshellator.Importers.Obj.Objects.Parsers.Obj,TextureCoordinateParser,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Obj\Objects\Parsers\Obj\TextureCoordinateParser.cs,Parse,The following statement contains a magic number: if (Words.Length >= 4)  				_coordinate.W = float.Parse(Words[3]);
Magic Number,Meshellator.Importers.Obj.Objects.Parsers.Obj,VertexParser,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Obj\Objects\Parsers\Obj\VertexParser.cs,Parse,The following statement contains a magic number: _vertex.Y = float.Parse(Words[2]);
Magic Number,Meshellator.Importers.Obj.Objects.Parsers.Obj,VertexParser,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Obj\Objects\Parsers\Obj\VertexParser.cs,Parse,The following statement contains a magic number: _vertex.Z = float.Parse(Words[3]);
Magic Number,Meshellator.Importers.Nff.Parsers,TorusParser,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Nff\Parsers\TorusParser.cs,Parse,The following statement contains a magic number: center.Y = float.Parse(words[2]);
Magic Number,Meshellator.Importers.Nff.Parsers,TorusParser,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Nff\Parsers\TorusParser.cs,Parse,The following statement contains a magic number: center.Z = float.Parse(words[3]);
Magic Number,Meshellator.Importers.Nff.Parsers,TorusParser,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Nff\Parsers\TorusParser.cs,Parse,The following statement contains a magic number: float radius = float.Parse(words[4]);
Magic Number,Meshellator.Importers.Nff.Parsers,TorusParser,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Nff\Parsers\TorusParser.cs,Parse,The following statement contains a magic number: float thickness = float.Parse(words[5]);
Magic Number,Meshellator.Importers.Nff.Parsers,PlaneParser,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Nff\Parsers\PlaneParser.cs,Parse,The following statement contains a magic number: center.Y = float.Parse(words[2]);
Magic Number,Meshellator.Importers.Nff.Parsers,PlaneParser,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Nff\Parsers\PlaneParser.cs,Parse,The following statement contains a magic number: center.Z = float.Parse(words[3]);
Magic Number,Meshellator.Importers.Nff.Parsers,PlaneParser,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Nff\Parsers\PlaneParser.cs,Parse,The following statement contains a magic number: int width = int.Parse(words[4]);
Magic Number,Meshellator.Importers.Nff.Parsers,PlaneParser,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Nff\Parsers\PlaneParser.cs,Parse,The following statement contains a magic number: int height = int.Parse(words[5]);
Magic Number,Meshellator.Importers.Nff.Parsers,CylinderParser,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Nff\Parsers\CylinderParser.cs,Parse,The following statement contains a magic number: center.Y = float.Parse(words[2]);
Magic Number,Meshellator.Importers.Nff.Parsers,CylinderParser,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Nff\Parsers\CylinderParser.cs,Parse,The following statement contains a magic number: center.Z = float.Parse(words[3]);
Magic Number,Meshellator.Importers.Nff.Parsers,CylinderParser,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Nff\Parsers\CylinderParser.cs,Parse,The following statement contains a magic number: float radius = float.Parse(words[4]);
Magic Number,Meshellator.Importers.Nff.Parsers,CylinderParser,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Nff\Parsers\CylinderParser.cs,Parse,The following statement contains a magic number: float height = float.Parse(words[5]);
Magic Number,Meshellator.Importers.Nff.Parsers,CubeParser,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Nff\Parsers\CubeParser.cs,Parse,The following statement contains a magic number: center.Y = float.Parse(words[2]);
Magic Number,Meshellator.Importers.Nff.Parsers,CubeParser,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Nff\Parsers\CubeParser.cs,Parse,The following statement contains a magic number: center.Z = float.Parse(words[3]);
Magic Number,Meshellator.Importers.Nff.Parsers,CubeParser,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Nff\Parsers\CubeParser.cs,Parse,The following statement contains a magic number: float size = float.Parse(words[4]);
Magic Number,Meshellator.Importers.Nff.Parsers,TeapotParser,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Nff\Parsers\TeapotParser.cs,Parse,The following statement contains a magic number: center.Y = float.Parse(words[2]);
Magic Number,Meshellator.Importers.Nff.Parsers,TeapotParser,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Nff\Parsers\TeapotParser.cs,Parse,The following statement contains a magic number: center.Z = float.Parse(words[3]);
Magic Number,Meshellator.Importers.Nff.Parsers,TeapotParser,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Nff\Parsers\TeapotParser.cs,Parse,The following statement contains a magic number: float size = float.Parse(words[4]);
Magic Number,Meshellator.Importers.Nff.Parsers,TessellationParser,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Nff\Parsers\TessellationParser.cs,Parse,The following statement contains a magic number: string[] primitiveWords = words.Skip(2).ToArray();
Magic Number,Meshellator.Importers.Nff.Parsers,MaterialParser,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Nff\Parsers\MaterialParser.cs,Parse,The following statement contains a magic number: float g = float.Parse(words[2]);
Magic Number,Meshellator.Importers.Nff.Parsers,MaterialParser,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Nff\Parsers\MaterialParser.cs,Parse,The following statement contains a magic number: float b = float.Parse(words[3]);
Magic Number,Meshellator.Importers.Nff.Parsers,MaterialParser,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Nff\Parsers\MaterialParser.cs,Parse,The following statement contains a magic number: float kd = float.Parse(words[4]);
Magic Number,Meshellator.Importers.Nff.Parsers,MaterialParser,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Nff\Parsers\MaterialParser.cs,Parse,The following statement contains a magic number: float ks = float.Parse(words[5]);
Magic Number,Meshellator.Importers.Nff.Parsers,MaterialParser,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Nff\Parsers\MaterialParser.cs,Parse,The following statement contains a magic number: float shine = float.Parse(words[6]);
Magic Number,Meshellator.Importers.Nff.Parsers,ParserContext,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Nff\Parsers\ParserContext.cs,ParserContext,The following statement contains a magic number: CurrentTessellationLevel = 20;
Magic Number,Meshellator.Importers.Nff.Parsers,SphereParser,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Nff\Parsers\SphereParser.cs,Parse,The following statement contains a magic number: center.Y = float.Parse(words[2]);
Magic Number,Meshellator.Importers.Nff.Parsers,SphereParser,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Nff\Parsers\SphereParser.cs,Parse,The following statement contains a magic number: center.Z = float.Parse(words[3]);
Magic Number,Meshellator.Importers.Nff.Parsers,SphereParser,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Nff\Parsers\SphereParser.cs,Parse,The following statement contains a magic number: float radius = float.Parse(words[4]);
Magic Number,Meshellator.Importers.Ply,PlyImporter,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Ply\PlyImporter.cs,ImportFile,The following statement contains a magic number: foreach (var element in plyFile.Elements)  			{  				switch (element.Name)  				{  					case "vertex" :  						int xIndex = element.Properties.IndexOf(element.Properties.SingleOrDefault(p => p.Name == "x"));  						int yIndex = element.Properties.IndexOf(element.Properties.SingleOrDefault(p => p.Name == "y"));  						int zIndex = element.Properties.IndexOf(element.Properties.SingleOrDefault(p => p.Name == "z"));  						int nxIndex = element.Properties.IndexOf(element.Properties.SingleOrDefault(p => p.Name == "nx"));  						int nyIndex = element.Properties.IndexOf(element.Properties.SingleOrDefault(p => p.Name == "ny"));  						int nzIndex = element.Properties.IndexOf(element.Properties.SingleOrDefault(p => p.Name == "nz"));  						int sIndex = element.Properties.IndexOf(element.Properties.SingleOrDefault(p => p.Name == "s"));  						int tIndex = element.Properties.IndexOf(element.Properties.SingleOrDefault(p => p.Name == "t"));  						foreach (var elementValue in element.ElementValues)  						{  							if (xIndex != -1 && yIndex != -1 && zIndex != -1)  								mesh.Positions.Add(new Point3D(  									(float) elementValue.PropertyValues[xIndex]'  									(float) elementValue.PropertyValues[yIndex]'  									(float) elementValue.PropertyValues[zIndex]));    							if (nxIndex != -1 && nyIndex != -1 && nzIndex != -1)  								mesh.Normals.Add(new Vector3D(  									(float) elementValue.PropertyValues[nxIndex]'  									(float) elementValue.PropertyValues[nyIndex]'  									(float) elementValue.PropertyValues[nzIndex]));    							if (sIndex != -1 && tIndex != -1)  								mesh.TextureCoordinates.Add(new Point3D(  									(float)elementValue.PropertyValues[sIndex]'  									(float)elementValue.PropertyValues[tIndex]'  									0));  						}  						break;  					case "face" :  						foreach (var elementValue in element.ElementValues)  						{  							if (elementValue.PropertyValues.Count != 3)  								throw new Exception("Only triangle faces are currently supported");    							mesh.Indices.Add(Convert.ToInt32(elementValue.PropertyValues[0]));  							mesh.Indices.Add(Convert.ToInt32(elementValue.PropertyValues[1]));  							mesh.Indices.Add(Convert.ToInt32(elementValue.PropertyValues[2]));  						}  						break;  				}  			}
Magic Number,Meshellator.Importers.Ply,PlyImporter,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Ply\PlyImporter.cs,ImportFile,The following statement contains a magic number: foreach (var element in plyFile.Elements)  			{  				switch (element.Name)  				{  					case "vertex" :  						int xIndex = element.Properties.IndexOf(element.Properties.SingleOrDefault(p => p.Name == "x"));  						int yIndex = element.Properties.IndexOf(element.Properties.SingleOrDefault(p => p.Name == "y"));  						int zIndex = element.Properties.IndexOf(element.Properties.SingleOrDefault(p => p.Name == "z"));  						int nxIndex = element.Properties.IndexOf(element.Properties.SingleOrDefault(p => p.Name == "nx"));  						int nyIndex = element.Properties.IndexOf(element.Properties.SingleOrDefault(p => p.Name == "ny"));  						int nzIndex = element.Properties.IndexOf(element.Properties.SingleOrDefault(p => p.Name == "nz"));  						int sIndex = element.Properties.IndexOf(element.Properties.SingleOrDefault(p => p.Name == "s"));  						int tIndex = element.Properties.IndexOf(element.Properties.SingleOrDefault(p => p.Name == "t"));  						foreach (var elementValue in element.ElementValues)  						{  							if (xIndex != -1 && yIndex != -1 && zIndex != -1)  								mesh.Positions.Add(new Point3D(  									(float) elementValue.PropertyValues[xIndex]'  									(float) elementValue.PropertyValues[yIndex]'  									(float) elementValue.PropertyValues[zIndex]));    							if (nxIndex != -1 && nyIndex != -1 && nzIndex != -1)  								mesh.Normals.Add(new Vector3D(  									(float) elementValue.PropertyValues[nxIndex]'  									(float) elementValue.PropertyValues[nyIndex]'  									(float) elementValue.PropertyValues[nzIndex]));    							if (sIndex != -1 && tIndex != -1)  								mesh.TextureCoordinates.Add(new Point3D(  									(float)elementValue.PropertyValues[sIndex]'  									(float)elementValue.PropertyValues[tIndex]'  									0));  						}  						break;  					case "face" :  						foreach (var elementValue in element.ElementValues)  						{  							if (elementValue.PropertyValues.Count != 3)  								throw new Exception("Only triangle faces are currently supported");    							mesh.Indices.Add(Convert.ToInt32(elementValue.PropertyValues[0]));  							mesh.Indices.Add(Convert.ToInt32(elementValue.PropertyValues[1]));  							mesh.Indices.Add(Convert.ToInt32(elementValue.PropertyValues[2]));  						}  						break;  				}  			}
Magic Number,Meshellator.Importers.Ply,PlyImporter,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Ply\PlyImporter.cs,ParseHeader,The following statement contains a magic number: while (words != null)  			{  				// Parse words.  				switch (words[0])  				{  					case "format":  						if (words.Length != 3)  							throw new Exception("Invalid header: format.");  						switch (words[1])  						{  							case "ascii":  								plyFile.FileType = PlyFileType.Ascii;  								break;  							case "binary_little_endian":  								plyFile.FileType = PlyFileType.BinaryLittleEndian;  								break;  							case "binary_big_endian":  								plyFile.FileType = PlyFileType.BinaryBigEndian;  								break;  							default:  								throw new Exception("Invalid header: format.");  						}  						plyFile.Version = Convert.ToSingle(words[2]);  						break;  					case "element":  						AddElement(plyFile' words);  						break;  					case "property":  						AddProperty(plyFile' words);  						break;  					case "comment":  						AddComment(plyFile' originalLine);  						break;  					case "obj_info":  						AddObjInfo(plyFile' originalLine);  						break;  					case "end_header":  						return;  				}    				words = GetWords(reader' out originalLine);  			}
Magic Number,Meshellator.Importers.Ply,PlyImporter,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Ply\PlyImporter.cs,ParseHeader,The following statement contains a magic number: while (words != null)  			{  				// Parse words.  				switch (words[0])  				{  					case "format":  						if (words.Length != 3)  							throw new Exception("Invalid header: format.");  						switch (words[1])  						{  							case "ascii":  								plyFile.FileType = PlyFileType.Ascii;  								break;  							case "binary_little_endian":  								plyFile.FileType = PlyFileType.BinaryLittleEndian;  								break;  							case "binary_big_endian":  								plyFile.FileType = PlyFileType.BinaryBigEndian;  								break;  							default:  								throw new Exception("Invalid header: format.");  						}  						plyFile.Version = Convert.ToSingle(words[2]);  						break;  					case "element":  						AddElement(plyFile' words);  						break;  					case "property":  						AddProperty(plyFile' words);  						break;  					case "comment":  						AddComment(plyFile' originalLine);  						break;  					case "obj_info":  						AddObjInfo(plyFile' originalLine);  						break;  					case "end_header":  						return;  				}    				words = GetWords(reader' out originalLine);  			}
Magic Number,Meshellator.Importers.Ply,PlyImporter,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Ply\PlyImporter.cs,AddElement,The following statement contains a magic number: plyFile.Elements.Add(new PlyElement  			{  				Name = words[1]'  				Num = Convert.ToInt32(words[2])  			});
Magic Number,Meshellator.Importers.Ply,PlyImporter,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Ply\PlyImporter.cs,AddProperty,The following statement contains a magic number: if (words[1] == "list")  			{  				property.CountExternal = GetPropertyType(words[2]);  				property.ExternalType = GetPropertyType(words[3]);  				property.Name = words[4];  				property.IsList = true;  			}  			else  			{  				property.ExternalType = GetPropertyType(words[1]);  				property.Name = words[2];  				property.IsList = false;  			}
Magic Number,Meshellator.Importers.Ply,PlyImporter,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Ply\PlyImporter.cs,AddProperty,The following statement contains a magic number: if (words[1] == "list")  			{  				property.CountExternal = GetPropertyType(words[2]);  				property.ExternalType = GetPropertyType(words[3]);  				property.Name = words[4];  				property.IsList = true;  			}  			else  			{  				property.ExternalType = GetPropertyType(words[1]);  				property.Name = words[2];  				property.IsList = false;  			}
Magic Number,Meshellator.Importers.Ply,PlyImporter,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Ply\PlyImporter.cs,AddProperty,The following statement contains a magic number: if (words[1] == "list")  			{  				property.CountExternal = GetPropertyType(words[2]);  				property.ExternalType = GetPropertyType(words[3]);  				property.Name = words[4];  				property.IsList = true;  			}  			else  			{  				property.ExternalType = GetPropertyType(words[1]);  				property.Name = words[2];  				property.IsList = false;  			}
Magic Number,Meshellator.Importers.Ply,PlyImporter,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Ply\PlyImporter.cs,AddProperty,The following statement contains a magic number: if (words[1] == "list")  			{  				property.CountExternal = GetPropertyType(words[2]);  				property.ExternalType = GetPropertyType(words[3]);  				property.Name = words[4];  				property.IsList = true;  			}  			else  			{  				property.ExternalType = GetPropertyType(words[1]);  				property.Name = words[2];  				property.IsList = false;  			}
Magic Number,Meshellator.Importers.Ply,PlyImporter,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Ply\PlyImporter.cs,AddComment,The following statement contains a magic number: int i = 7;
Magic Number,Meshellator.Importers.Ply,PlyImporter,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Ply\PlyImporter.cs,AddObjInfo,The following statement contains a magic number: int i = 8;
Magic Number,Meshellator.Primitives,BezierPrimitiveTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\BezierPrimitiveTessellator.cs,CreatePatchVertices,The following statement contains a magic number: Debug.Assert(patch.Length == 16);
Magic Number,Meshellator.Primitives,BezierPrimitiveTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\BezierPrimitiveTessellator.cs,CreatePatchVertices,The following statement contains a magic number: for (int i = 0; i <= TessellationLevel; i++)  			{  				float ti = (float)i / TessellationLevel;    				for (int j = 0; j <= TessellationLevel; j++)  				{  					float tj = (float)j / TessellationLevel;    					// Perform four horizontal bezier interpolations  					// between the control points of this patch.  					Point3D p1 = Bezier(patch[0]' patch[1]' patch[2]' patch[3]' ti);  					Point3D p2 = Bezier(patch[4]' patch[5]' patch[6]' patch[7]' ti);  					Point3D p3 = Bezier(patch[8]' patch[9]' patch[10]' patch[11]' ti);  					Point3D p4 = Bezier(patch[12]' patch[13]' patch[14]' patch[15]' ti);    					// Perform a vertical interpolation between the results of the  					// previous horizontal interpolations' to compute the position.  					Point3D position = Bezier(p1' p2' p3' p4' tj);    					// Perform another four bezier interpolations between the control  					// points' but this time vertically rather than horizontally.  					Point3D q1 = Bezier(patch[0]' patch[4]' patch[8]' patch[12]' tj);  					Point3D q2 = Bezier(patch[1]' patch[5]' patch[9]' patch[13]' tj);  					Point3D q3 = Bezier(patch[2]' patch[6]' patch[10]' patch[14]' tj);  					Point3D q4 = Bezier(patch[3]' patch[7]' patch[11]' patch[15]' tj);    					// Compute vertical and horizontal tangent vectors.  					Vector3D tangentA = BezierTangent(p1' p2' p3' p4' tj);  					Vector3D tangentB = BezierTangent(q1' q2' q3' q4' ti);    					// Cross the two tangent vectors to compute the normal.  					Vector3D normal = Vector3D.Cross(tangentA' tangentB);    					if (normal.Length() > 0.0001f)  					{  						normal.Normalize();    						// If this patch is mirrored' we must invert the normal.  						if (isMirrored)  							normal = -normal;  					}  					else  					{  						// In a tidy and well constructed bezier patch' the preceding  						// normal computation will always work. But the classic teapot  						// model is not tidy or well constructed! At the top and bottom  						// of the teapot' it contains degenerate geometry where a patch  						// has several control points in the same place' which causes  						// the tangent computation to fail and produce a zero normal.  						// We 'fix' these cases by just hard-coding a normal that points  						// either straight up or straight down' depending on whether we  						// are on the top or bottom of the teapot. This is not a robust  						// solution for all possible degenerate bezier patches' but hey'  						// it's good enough to make the teapot work correctly!    						if (position.Y > 0)  							normal = Vector3D.Up;  						else  							normal = Vector3D.Down;  					}    					// Create the vertex.  					AddVertex(position' normal);  				}  			}
Magic Number,Meshellator.Primitives,BezierPrimitiveTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\BezierPrimitiveTessellator.cs,CreatePatchVertices,The following statement contains a magic number: for (int i = 0; i <= TessellationLevel; i++)  			{  				float ti = (float)i / TessellationLevel;    				for (int j = 0; j <= TessellationLevel; j++)  				{  					float tj = (float)j / TessellationLevel;    					// Perform four horizontal bezier interpolations  					// between the control points of this patch.  					Point3D p1 = Bezier(patch[0]' patch[1]' patch[2]' patch[3]' ti);  					Point3D p2 = Bezier(patch[4]' patch[5]' patch[6]' patch[7]' ti);  					Point3D p3 = Bezier(patch[8]' patch[9]' patch[10]' patch[11]' ti);  					Point3D p4 = Bezier(patch[12]' patch[13]' patch[14]' patch[15]' ti);    					// Perform a vertical interpolation between the results of the  					// previous horizontal interpolations' to compute the position.  					Point3D position = Bezier(p1' p2' p3' p4' tj);    					// Perform another four bezier interpolations between the control  					// points' but this time vertically rather than horizontally.  					Point3D q1 = Bezier(patch[0]' patch[4]' patch[8]' patch[12]' tj);  					Point3D q2 = Bezier(patch[1]' patch[5]' patch[9]' patch[13]' tj);  					Point3D q3 = Bezier(patch[2]' patch[6]' patch[10]' patch[14]' tj);  					Point3D q4 = Bezier(patch[3]' patch[7]' patch[11]' patch[15]' tj);    					// Compute vertical and horizontal tangent vectors.  					Vector3D tangentA = BezierTangent(p1' p2' p3' p4' tj);  					Vector3D tangentB = BezierTangent(q1' q2' q3' q4' ti);    					// Cross the two tangent vectors to compute the normal.  					Vector3D normal = Vector3D.Cross(tangentA' tangentB);    					if (normal.Length() > 0.0001f)  					{  						normal.Normalize();    						// If this patch is mirrored' we must invert the normal.  						if (isMirrored)  							normal = -normal;  					}  					else  					{  						// In a tidy and well constructed bezier patch' the preceding  						// normal computation will always work. But the classic teapot  						// model is not tidy or well constructed! At the top and bottom  						// of the teapot' it contains degenerate geometry where a patch  						// has several control points in the same place' which causes  						// the tangent computation to fail and produce a zero normal.  						// We 'fix' these cases by just hard-coding a normal that points  						// either straight up or straight down' depending on whether we  						// are on the top or bottom of the teapot. This is not a robust  						// solution for all possible degenerate bezier patches' but hey'  						// it's good enough to make the teapot work correctly!    						if (position.Y > 0)  							normal = Vector3D.Up;  						else  							normal = Vector3D.Down;  					}    					// Create the vertex.  					AddVertex(position' normal);  				}  			}
Magic Number,Meshellator.Primitives,BezierPrimitiveTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\BezierPrimitiveTessellator.cs,CreatePatchVertices,The following statement contains a magic number: for (int i = 0; i <= TessellationLevel; i++)  			{  				float ti = (float)i / TessellationLevel;    				for (int j = 0; j <= TessellationLevel; j++)  				{  					float tj = (float)j / TessellationLevel;    					// Perform four horizontal bezier interpolations  					// between the control points of this patch.  					Point3D p1 = Bezier(patch[0]' patch[1]' patch[2]' patch[3]' ti);  					Point3D p2 = Bezier(patch[4]' patch[5]' patch[6]' patch[7]' ti);  					Point3D p3 = Bezier(patch[8]' patch[9]' patch[10]' patch[11]' ti);  					Point3D p4 = Bezier(patch[12]' patch[13]' patch[14]' patch[15]' ti);    					// Perform a vertical interpolation between the results of the  					// previous horizontal interpolations' to compute the position.  					Point3D position = Bezier(p1' p2' p3' p4' tj);    					// Perform another four bezier interpolations between the control  					// points' but this time vertically rather than horizontally.  					Point3D q1 = Bezier(patch[0]' patch[4]' patch[8]' patch[12]' tj);  					Point3D q2 = Bezier(patch[1]' patch[5]' patch[9]' patch[13]' tj);  					Point3D q3 = Bezier(patch[2]' patch[6]' patch[10]' patch[14]' tj);  					Point3D q4 = Bezier(patch[3]' patch[7]' patch[11]' patch[15]' tj);    					// Compute vertical and horizontal tangent vectors.  					Vector3D tangentA = BezierTangent(p1' p2' p3' p4' tj);  					Vector3D tangentB = BezierTangent(q1' q2' q3' q4' ti);    					// Cross the two tangent vectors to compute the normal.  					Vector3D normal = Vector3D.Cross(tangentA' tangentB);    					if (normal.Length() > 0.0001f)  					{  						normal.Normalize();    						// If this patch is mirrored' we must invert the normal.  						if (isMirrored)  							normal = -normal;  					}  					else  					{  						// In a tidy and well constructed bezier patch' the preceding  						// normal computation will always work. But the classic teapot  						// model is not tidy or well constructed! At the top and bottom  						// of the teapot' it contains degenerate geometry where a patch  						// has several control points in the same place' which causes  						// the tangent computation to fail and produce a zero normal.  						// We 'fix' these cases by just hard-coding a normal that points  						// either straight up or straight down' depending on whether we  						// are on the top or bottom of the teapot. This is not a robust  						// solution for all possible degenerate bezier patches' but hey'  						// it's good enough to make the teapot work correctly!    						if (position.Y > 0)  							normal = Vector3D.Up;  						else  							normal = Vector3D.Down;  					}    					// Create the vertex.  					AddVertex(position' normal);  				}  			}
Magic Number,Meshellator.Primitives,BezierPrimitiveTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\BezierPrimitiveTessellator.cs,CreatePatchVertices,The following statement contains a magic number: for (int i = 0; i <= TessellationLevel; i++)  			{  				float ti = (float)i / TessellationLevel;    				for (int j = 0; j <= TessellationLevel; j++)  				{  					float tj = (float)j / TessellationLevel;    					// Perform four horizontal bezier interpolations  					// between the control points of this patch.  					Point3D p1 = Bezier(patch[0]' patch[1]' patch[2]' patch[3]' ti);  					Point3D p2 = Bezier(patch[4]' patch[5]' patch[6]' patch[7]' ti);  					Point3D p3 = Bezier(patch[8]' patch[9]' patch[10]' patch[11]' ti);  					Point3D p4 = Bezier(patch[12]' patch[13]' patch[14]' patch[15]' ti);    					// Perform a vertical interpolation between the results of the  					// previous horizontal interpolations' to compute the position.  					Point3D position = Bezier(p1' p2' p3' p4' tj);    					// Perform another four bezier interpolations between the control  					// points' but this time vertically rather than horizontally.  					Point3D q1 = Bezier(patch[0]' patch[4]' patch[8]' patch[12]' tj);  					Point3D q2 = Bezier(patch[1]' patch[5]' patch[9]' patch[13]' tj);  					Point3D q3 = Bezier(patch[2]' patch[6]' patch[10]' patch[14]' tj);  					Point3D q4 = Bezier(patch[3]' patch[7]' patch[11]' patch[15]' tj);    					// Compute vertical and horizontal tangent vectors.  					Vector3D tangentA = BezierTangent(p1' p2' p3' p4' tj);  					Vector3D tangentB = BezierTangent(q1' q2' q3' q4' ti);    					// Cross the two tangent vectors to compute the normal.  					Vector3D normal = Vector3D.Cross(tangentA' tangentB);    					if (normal.Length() > 0.0001f)  					{  						normal.Normalize();    						// If this patch is mirrored' we must invert the normal.  						if (isMirrored)  							normal = -normal;  					}  					else  					{  						// In a tidy and well constructed bezier patch' the preceding  						// normal computation will always work. But the classic teapot  						// model is not tidy or well constructed! At the top and bottom  						// of the teapot' it contains degenerate geometry where a patch  						// has several control points in the same place' which causes  						// the tangent computation to fail and produce a zero normal.  						// We 'fix' these cases by just hard-coding a normal that points  						// either straight up or straight down' depending on whether we  						// are on the top or bottom of the teapot. This is not a robust  						// solution for all possible degenerate bezier patches' but hey'  						// it's good enough to make the teapot work correctly!    						if (position.Y > 0)  							normal = Vector3D.Up;  						else  							normal = Vector3D.Down;  					}    					// Create the vertex.  					AddVertex(position' normal);  				}  			}
Magic Number,Meshellator.Primitives,BezierPrimitiveTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\BezierPrimitiveTessellator.cs,CreatePatchVertices,The following statement contains a magic number: for (int i = 0; i <= TessellationLevel; i++)  			{  				float ti = (float)i / TessellationLevel;    				for (int j = 0; j <= TessellationLevel; j++)  				{  					float tj = (float)j / TessellationLevel;    					// Perform four horizontal bezier interpolations  					// between the control points of this patch.  					Point3D p1 = Bezier(patch[0]' patch[1]' patch[2]' patch[3]' ti);  					Point3D p2 = Bezier(patch[4]' patch[5]' patch[6]' patch[7]' ti);  					Point3D p3 = Bezier(patch[8]' patch[9]' patch[10]' patch[11]' ti);  					Point3D p4 = Bezier(patch[12]' patch[13]' patch[14]' patch[15]' ti);    					// Perform a vertical interpolation between the results of the  					// previous horizontal interpolations' to compute the position.  					Point3D position = Bezier(p1' p2' p3' p4' tj);    					// Perform another four bezier interpolations between the control  					// points' but this time vertically rather than horizontally.  					Point3D q1 = Bezier(patch[0]' patch[4]' patch[8]' patch[12]' tj);  					Point3D q2 = Bezier(patch[1]' patch[5]' patch[9]' patch[13]' tj);  					Point3D q3 = Bezier(patch[2]' patch[6]' patch[10]' patch[14]' tj);  					Point3D q4 = Bezier(patch[3]' patch[7]' patch[11]' patch[15]' tj);    					// Compute vertical and horizontal tangent vectors.  					Vector3D tangentA = BezierTangent(p1' p2' p3' p4' tj);  					Vector3D tangentB = BezierTangent(q1' q2' q3' q4' ti);    					// Cross the two tangent vectors to compute the normal.  					Vector3D normal = Vector3D.Cross(tangentA' tangentB);    					if (normal.Length() > 0.0001f)  					{  						normal.Normalize();    						// If this patch is mirrored' we must invert the normal.  						if (isMirrored)  							normal = -normal;  					}  					else  					{  						// In a tidy and well constructed bezier patch' the preceding  						// normal computation will always work. But the classic teapot  						// model is not tidy or well constructed! At the top and bottom  						// of the teapot' it contains degenerate geometry where a patch  						// has several control points in the same place' which causes  						// the tangent computation to fail and produce a zero normal.  						// We 'fix' these cases by just hard-coding a normal that points  						// either straight up or straight down' depending on whether we  						// are on the top or bottom of the teapot. This is not a robust  						// solution for all possible degenerate bezier patches' but hey'  						// it's good enough to make the teapot work correctly!    						if (position.Y > 0)  							normal = Vector3D.Up;  						else  							normal = Vector3D.Down;  					}    					// Create the vertex.  					AddVertex(position' normal);  				}  			}
Magic Number,Meshellator.Primitives,BezierPrimitiveTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\BezierPrimitiveTessellator.cs,CreatePatchVertices,The following statement contains a magic number: for (int i = 0; i <= TessellationLevel; i++)  			{  				float ti = (float)i / TessellationLevel;    				for (int j = 0; j <= TessellationLevel; j++)  				{  					float tj = (float)j / TessellationLevel;    					// Perform four horizontal bezier interpolations  					// between the control points of this patch.  					Point3D p1 = Bezier(patch[0]' patch[1]' patch[2]' patch[3]' ti);  					Point3D p2 = Bezier(patch[4]' patch[5]' patch[6]' patch[7]' ti);  					Point3D p3 = Bezier(patch[8]' patch[9]' patch[10]' patch[11]' ti);  					Point3D p4 = Bezier(patch[12]' patch[13]' patch[14]' patch[15]' ti);    					// Perform a vertical interpolation between the results of the  					// previous horizontal interpolations' to compute the position.  					Point3D position = Bezier(p1' p2' p3' p4' tj);    					// Perform another four bezier interpolations between the control  					// points' but this time vertically rather than horizontally.  					Point3D q1 = Bezier(patch[0]' patch[4]' patch[8]' patch[12]' tj);  					Point3D q2 = Bezier(patch[1]' patch[5]' patch[9]' patch[13]' tj);  					Point3D q3 = Bezier(patch[2]' patch[6]' patch[10]' patch[14]' tj);  					Point3D q4 = Bezier(patch[3]' patch[7]' patch[11]' patch[15]' tj);    					// Compute vertical and horizontal tangent vectors.  					Vector3D tangentA = BezierTangent(p1' p2' p3' p4' tj);  					Vector3D tangentB = BezierTangent(q1' q2' q3' q4' ti);    					// Cross the two tangent vectors to compute the normal.  					Vector3D normal = Vector3D.Cross(tangentA' tangentB);    					if (normal.Length() > 0.0001f)  					{  						normal.Normalize();    						// If this patch is mirrored' we must invert the normal.  						if (isMirrored)  							normal = -normal;  					}  					else  					{  						// In a tidy and well constructed bezier patch' the preceding  						// normal computation will always work. But the classic teapot  						// model is not tidy or well constructed! At the top and bottom  						// of the teapot' it contains degenerate geometry where a patch  						// has several control points in the same place' which causes  						// the tangent computation to fail and produce a zero normal.  						// We 'fix' these cases by just hard-coding a normal that points  						// either straight up or straight down' depending on whether we  						// are on the top or bottom of the teapot. This is not a robust  						// solution for all possible degenerate bezier patches' but hey'  						// it's good enough to make the teapot work correctly!    						if (position.Y > 0)  							normal = Vector3D.Up;  						else  							normal = Vector3D.Down;  					}    					// Create the vertex.  					AddVertex(position' normal);  				}  			}
Magic Number,Meshellator.Primitives,BezierPrimitiveTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\BezierPrimitiveTessellator.cs,CreatePatchVertices,The following statement contains a magic number: for (int i = 0; i <= TessellationLevel; i++)  			{  				float ti = (float)i / TessellationLevel;    				for (int j = 0; j <= TessellationLevel; j++)  				{  					float tj = (float)j / TessellationLevel;    					// Perform four horizontal bezier interpolations  					// between the control points of this patch.  					Point3D p1 = Bezier(patch[0]' patch[1]' patch[2]' patch[3]' ti);  					Point3D p2 = Bezier(patch[4]' patch[5]' patch[6]' patch[7]' ti);  					Point3D p3 = Bezier(patch[8]' patch[9]' patch[10]' patch[11]' ti);  					Point3D p4 = Bezier(patch[12]' patch[13]' patch[14]' patch[15]' ti);    					// Perform a vertical interpolation between the results of the  					// previous horizontal interpolations' to compute the position.  					Point3D position = Bezier(p1' p2' p3' p4' tj);    					// Perform another four bezier interpolations between the control  					// points' but this time vertically rather than horizontally.  					Point3D q1 = Bezier(patch[0]' patch[4]' patch[8]' patch[12]' tj);  					Point3D q2 = Bezier(patch[1]' patch[5]' patch[9]' patch[13]' tj);  					Point3D q3 = Bezier(patch[2]' patch[6]' patch[10]' patch[14]' tj);  					Point3D q4 = Bezier(patch[3]' patch[7]' patch[11]' patch[15]' tj);    					// Compute vertical and horizontal tangent vectors.  					Vector3D tangentA = BezierTangent(p1' p2' p3' p4' tj);  					Vector3D tangentB = BezierTangent(q1' q2' q3' q4' ti);    					// Cross the two tangent vectors to compute the normal.  					Vector3D normal = Vector3D.Cross(tangentA' tangentB);    					if (normal.Length() > 0.0001f)  					{  						normal.Normalize();    						// If this patch is mirrored' we must invert the normal.  						if (isMirrored)  							normal = -normal;  					}  					else  					{  						// In a tidy and well constructed bezier patch' the preceding  						// normal computation will always work. But the classic teapot  						// model is not tidy or well constructed! At the top and bottom  						// of the teapot' it contains degenerate geometry where a patch  						// has several control points in the same place' which causes  						// the tangent computation to fail and produce a zero normal.  						// We 'fix' these cases by just hard-coding a normal that points  						// either straight up or straight down' depending on whether we  						// are on the top or bottom of the teapot. This is not a robust  						// solution for all possible degenerate bezier patches' but hey'  						// it's good enough to make the teapot work correctly!    						if (position.Y > 0)  							normal = Vector3D.Up;  						else  							normal = Vector3D.Down;  					}    					// Create the vertex.  					AddVertex(position' normal);  				}  			}
Magic Number,Meshellator.Primitives,BezierPrimitiveTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\BezierPrimitiveTessellator.cs,CreatePatchVertices,The following statement contains a magic number: for (int i = 0; i <= TessellationLevel; i++)  			{  				float ti = (float)i / TessellationLevel;    				for (int j = 0; j <= TessellationLevel; j++)  				{  					float tj = (float)j / TessellationLevel;    					// Perform four horizontal bezier interpolations  					// between the control points of this patch.  					Point3D p1 = Bezier(patch[0]' patch[1]' patch[2]' patch[3]' ti);  					Point3D p2 = Bezier(patch[4]' patch[5]' patch[6]' patch[7]' ti);  					Point3D p3 = Bezier(patch[8]' patch[9]' patch[10]' patch[11]' ti);  					Point3D p4 = Bezier(patch[12]' patch[13]' patch[14]' patch[15]' ti);    					// Perform a vertical interpolation between the results of the  					// previous horizontal interpolations' to compute the position.  					Point3D position = Bezier(p1' p2' p3' p4' tj);    					// Perform another four bezier interpolations between the control  					// points' but this time vertically rather than horizontally.  					Point3D q1 = Bezier(patch[0]' patch[4]' patch[8]' patch[12]' tj);  					Point3D q2 = Bezier(patch[1]' patch[5]' patch[9]' patch[13]' tj);  					Point3D q3 = Bezier(patch[2]' patch[6]' patch[10]' patch[14]' tj);  					Point3D q4 = Bezier(patch[3]' patch[7]' patch[11]' patch[15]' tj);    					// Compute vertical and horizontal tangent vectors.  					Vector3D tangentA = BezierTangent(p1' p2' p3' p4' tj);  					Vector3D tangentB = BezierTangent(q1' q2' q3' q4' ti);    					// Cross the two tangent vectors to compute the normal.  					Vector3D normal = Vector3D.Cross(tangentA' tangentB);    					if (normal.Length() > 0.0001f)  					{  						normal.Normalize();    						// If this patch is mirrored' we must invert the normal.  						if (isMirrored)  							normal = -normal;  					}  					else  					{  						// In a tidy and well constructed bezier patch' the preceding  						// normal computation will always work. But the classic teapot  						// model is not tidy or well constructed! At the top and bottom  						// of the teapot' it contains degenerate geometry where a patch  						// has several control points in the same place' which causes  						// the tangent computation to fail and produce a zero normal.  						// We 'fix' these cases by just hard-coding a normal that points  						// either straight up or straight down' depending on whether we  						// are on the top or bottom of the teapot. This is not a robust  						// solution for all possible degenerate bezier patches' but hey'  						// it's good enough to make the teapot work correctly!    						if (position.Y > 0)  							normal = Vector3D.Up;  						else  							normal = Vector3D.Down;  					}    					// Create the vertex.  					AddVertex(position' normal);  				}  			}
Magic Number,Meshellator.Primitives,BezierPrimitiveTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\BezierPrimitiveTessellator.cs,CreatePatchVertices,The following statement contains a magic number: for (int i = 0; i <= TessellationLevel; i++)  			{  				float ti = (float)i / TessellationLevel;    				for (int j = 0; j <= TessellationLevel; j++)  				{  					float tj = (float)j / TessellationLevel;    					// Perform four horizontal bezier interpolations  					// between the control points of this patch.  					Point3D p1 = Bezier(patch[0]' patch[1]' patch[2]' patch[3]' ti);  					Point3D p2 = Bezier(patch[4]' patch[5]' patch[6]' patch[7]' ti);  					Point3D p3 = Bezier(patch[8]' patch[9]' patch[10]' patch[11]' ti);  					Point3D p4 = Bezier(patch[12]' patch[13]' patch[14]' patch[15]' ti);    					// Perform a vertical interpolation between the results of the  					// previous horizontal interpolations' to compute the position.  					Point3D position = Bezier(p1' p2' p3' p4' tj);    					// Perform another four bezier interpolations between the control  					// points' but this time vertically rather than horizontally.  					Point3D q1 = Bezier(patch[0]' patch[4]' patch[8]' patch[12]' tj);  					Point3D q2 = Bezier(patch[1]' patch[5]' patch[9]' patch[13]' tj);  					Point3D q3 = Bezier(patch[2]' patch[6]' patch[10]' patch[14]' tj);  					Point3D q4 = Bezier(patch[3]' patch[7]' patch[11]' patch[15]' tj);    					// Compute vertical and horizontal tangent vectors.  					Vector3D tangentA = BezierTangent(p1' p2' p3' p4' tj);  					Vector3D tangentB = BezierTangent(q1' q2' q3' q4' ti);    					// Cross the two tangent vectors to compute the normal.  					Vector3D normal = Vector3D.Cross(tangentA' tangentB);    					if (normal.Length() > 0.0001f)  					{  						normal.Normalize();    						// If this patch is mirrored' we must invert the normal.  						if (isMirrored)  							normal = -normal;  					}  					else  					{  						// In a tidy and well constructed bezier patch' the preceding  						// normal computation will always work. But the classic teapot  						// model is not tidy or well constructed! At the top and bottom  						// of the teapot' it contains degenerate geometry where a patch  						// has several control points in the same place' which causes  						// the tangent computation to fail and produce a zero normal.  						// We 'fix' these cases by just hard-coding a normal that points  						// either straight up or straight down' depending on whether we  						// are on the top or bottom of the teapot. This is not a robust  						// solution for all possible degenerate bezier patches' but hey'  						// it's good enough to make the teapot work correctly!    						if (position.Y > 0)  							normal = Vector3D.Up;  						else  							normal = Vector3D.Down;  					}    					// Create the vertex.  					AddVertex(position' normal);  				}  			}
Magic Number,Meshellator.Primitives,BezierPrimitiveTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\BezierPrimitiveTessellator.cs,CreatePatchVertices,The following statement contains a magic number: for (int i = 0; i <= TessellationLevel; i++)  			{  				float ti = (float)i / TessellationLevel;    				for (int j = 0; j <= TessellationLevel; j++)  				{  					float tj = (float)j / TessellationLevel;    					// Perform four horizontal bezier interpolations  					// between the control points of this patch.  					Point3D p1 = Bezier(patch[0]' patch[1]' patch[2]' patch[3]' ti);  					Point3D p2 = Bezier(patch[4]' patch[5]' patch[6]' patch[7]' ti);  					Point3D p3 = Bezier(patch[8]' patch[9]' patch[10]' patch[11]' ti);  					Point3D p4 = Bezier(patch[12]' patch[13]' patch[14]' patch[15]' ti);    					// Perform a vertical interpolation between the results of the  					// previous horizontal interpolations' to compute the position.  					Point3D position = Bezier(p1' p2' p3' p4' tj);    					// Perform another four bezier interpolations between the control  					// points' but this time vertically rather than horizontally.  					Point3D q1 = Bezier(patch[0]' patch[4]' patch[8]' patch[12]' tj);  					Point3D q2 = Bezier(patch[1]' patch[5]' patch[9]' patch[13]' tj);  					Point3D q3 = Bezier(patch[2]' patch[6]' patch[10]' patch[14]' tj);  					Point3D q4 = Bezier(patch[3]' patch[7]' patch[11]' patch[15]' tj);    					// Compute vertical and horizontal tangent vectors.  					Vector3D tangentA = BezierTangent(p1' p2' p3' p4' tj);  					Vector3D tangentB = BezierTangent(q1' q2' q3' q4' ti);    					// Cross the two tangent vectors to compute the normal.  					Vector3D normal = Vector3D.Cross(tangentA' tangentB);    					if (normal.Length() > 0.0001f)  					{  						normal.Normalize();    						// If this patch is mirrored' we must invert the normal.  						if (isMirrored)  							normal = -normal;  					}  					else  					{  						// In a tidy and well constructed bezier patch' the preceding  						// normal computation will always work. But the classic teapot  						// model is not tidy or well constructed! At the top and bottom  						// of the teapot' it contains degenerate geometry where a patch  						// has several control points in the same place' which causes  						// the tangent computation to fail and produce a zero normal.  						// We 'fix' these cases by just hard-coding a normal that points  						// either straight up or straight down' depending on whether we  						// are on the top or bottom of the teapot. This is not a robust  						// solution for all possible degenerate bezier patches' but hey'  						// it's good enough to make the teapot work correctly!    						if (position.Y > 0)  							normal = Vector3D.Up;  						else  							normal = Vector3D.Down;  					}    					// Create the vertex.  					AddVertex(position' normal);  				}  			}
Magic Number,Meshellator.Primitives,BezierPrimitiveTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\BezierPrimitiveTessellator.cs,CreatePatchVertices,The following statement contains a magic number: for (int i = 0; i <= TessellationLevel; i++)  			{  				float ti = (float)i / TessellationLevel;    				for (int j = 0; j <= TessellationLevel; j++)  				{  					float tj = (float)j / TessellationLevel;    					// Perform four horizontal bezier interpolations  					// between the control points of this patch.  					Point3D p1 = Bezier(patch[0]' patch[1]' patch[2]' patch[3]' ti);  					Point3D p2 = Bezier(patch[4]' patch[5]' patch[6]' patch[7]' ti);  					Point3D p3 = Bezier(patch[8]' patch[9]' patch[10]' patch[11]' ti);  					Point3D p4 = Bezier(patch[12]' patch[13]' patch[14]' patch[15]' ti);    					// Perform a vertical interpolation between the results of the  					// previous horizontal interpolations' to compute the position.  					Point3D position = Bezier(p1' p2' p3' p4' tj);    					// Perform another four bezier interpolations between the control  					// points' but this time vertically rather than horizontally.  					Point3D q1 = Bezier(patch[0]' patch[4]' patch[8]' patch[12]' tj);  					Point3D q2 = Bezier(patch[1]' patch[5]' patch[9]' patch[13]' tj);  					Point3D q3 = Bezier(patch[2]' patch[6]' patch[10]' patch[14]' tj);  					Point3D q4 = Bezier(patch[3]' patch[7]' patch[11]' patch[15]' tj);    					// Compute vertical and horizontal tangent vectors.  					Vector3D tangentA = BezierTangent(p1' p2' p3' p4' tj);  					Vector3D tangentB = BezierTangent(q1' q2' q3' q4' ti);    					// Cross the two tangent vectors to compute the normal.  					Vector3D normal = Vector3D.Cross(tangentA' tangentB);    					if (normal.Length() > 0.0001f)  					{  						normal.Normalize();    						// If this patch is mirrored' we must invert the normal.  						if (isMirrored)  							normal = -normal;  					}  					else  					{  						// In a tidy and well constructed bezier patch' the preceding  						// normal computation will always work. But the classic teapot  						// model is not tidy or well constructed! At the top and bottom  						// of the teapot' it contains degenerate geometry where a patch  						// has several control points in the same place' which causes  						// the tangent computation to fail and produce a zero normal.  						// We 'fix' these cases by just hard-coding a normal that points  						// either straight up or straight down' depending on whether we  						// are on the top or bottom of the teapot. This is not a robust  						// solution for all possible degenerate bezier patches' but hey'  						// it's good enough to make the teapot work correctly!    						if (position.Y > 0)  							normal = Vector3D.Up;  						else  							normal = Vector3D.Down;  					}    					// Create the vertex.  					AddVertex(position' normal);  				}  			}
Magic Number,Meshellator.Primitives,BezierPrimitiveTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\BezierPrimitiveTessellator.cs,CreatePatchVertices,The following statement contains a magic number: for (int i = 0; i <= TessellationLevel; i++)  			{  				float ti = (float)i / TessellationLevel;    				for (int j = 0; j <= TessellationLevel; j++)  				{  					float tj = (float)j / TessellationLevel;    					// Perform four horizontal bezier interpolations  					// between the control points of this patch.  					Point3D p1 = Bezier(patch[0]' patch[1]' patch[2]' patch[3]' ti);  					Point3D p2 = Bezier(patch[4]' patch[5]' patch[6]' patch[7]' ti);  					Point3D p3 = Bezier(patch[8]' patch[9]' patch[10]' patch[11]' ti);  					Point3D p4 = Bezier(patch[12]' patch[13]' patch[14]' patch[15]' ti);    					// Perform a vertical interpolation between the results of the  					// previous horizontal interpolations' to compute the position.  					Point3D position = Bezier(p1' p2' p3' p4' tj);    					// Perform another four bezier interpolations between the control  					// points' but this time vertically rather than horizontally.  					Point3D q1 = Bezier(patch[0]' patch[4]' patch[8]' patch[12]' tj);  					Point3D q2 = Bezier(patch[1]' patch[5]' patch[9]' patch[13]' tj);  					Point3D q3 = Bezier(patch[2]' patch[6]' patch[10]' patch[14]' tj);  					Point3D q4 = Bezier(patch[3]' patch[7]' patch[11]' patch[15]' tj);    					// Compute vertical and horizontal tangent vectors.  					Vector3D tangentA = BezierTangent(p1' p2' p3' p4' tj);  					Vector3D tangentB = BezierTangent(q1' q2' q3' q4' ti);    					// Cross the two tangent vectors to compute the normal.  					Vector3D normal = Vector3D.Cross(tangentA' tangentB);    					if (normal.Length() > 0.0001f)  					{  						normal.Normalize();    						// If this patch is mirrored' we must invert the normal.  						if (isMirrored)  							normal = -normal;  					}  					else  					{  						// In a tidy and well constructed bezier patch' the preceding  						// normal computation will always work. But the classic teapot  						// model is not tidy or well constructed! At the top and bottom  						// of the teapot' it contains degenerate geometry where a patch  						// has several control points in the same place' which causes  						// the tangent computation to fail and produce a zero normal.  						// We 'fix' these cases by just hard-coding a normal that points  						// either straight up or straight down' depending on whether we  						// are on the top or bottom of the teapot. This is not a robust  						// solution for all possible degenerate bezier patches' but hey'  						// it's good enough to make the teapot work correctly!    						if (position.Y > 0)  							normal = Vector3D.Up;  						else  							normal = Vector3D.Down;  					}    					// Create the vertex.  					AddVertex(position' normal);  				}  			}
Magic Number,Meshellator.Primitives,BezierPrimitiveTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\BezierPrimitiveTessellator.cs,CreatePatchVertices,The following statement contains a magic number: for (int i = 0; i <= TessellationLevel; i++)  			{  				float ti = (float)i / TessellationLevel;    				for (int j = 0; j <= TessellationLevel; j++)  				{  					float tj = (float)j / TessellationLevel;    					// Perform four horizontal bezier interpolations  					// between the control points of this patch.  					Point3D p1 = Bezier(patch[0]' patch[1]' patch[2]' patch[3]' ti);  					Point3D p2 = Bezier(patch[4]' patch[5]' patch[6]' patch[7]' ti);  					Point3D p3 = Bezier(patch[8]' patch[9]' patch[10]' patch[11]' ti);  					Point3D p4 = Bezier(patch[12]' patch[13]' patch[14]' patch[15]' ti);    					// Perform a vertical interpolation between the results of the  					// previous horizontal interpolations' to compute the position.  					Point3D position = Bezier(p1' p2' p3' p4' tj);    					// Perform another four bezier interpolations between the control  					// points' but this time vertically rather than horizontally.  					Point3D q1 = Bezier(patch[0]' patch[4]' patch[8]' patch[12]' tj);  					Point3D q2 = Bezier(patch[1]' patch[5]' patch[9]' patch[13]' tj);  					Point3D q3 = Bezier(patch[2]' patch[6]' patch[10]' patch[14]' tj);  					Point3D q4 = Bezier(patch[3]' patch[7]' patch[11]' patch[15]' tj);    					// Compute vertical and horizontal tangent vectors.  					Vector3D tangentA = BezierTangent(p1' p2' p3' p4' tj);  					Vector3D tangentB = BezierTangent(q1' q2' q3' q4' ti);    					// Cross the two tangent vectors to compute the normal.  					Vector3D normal = Vector3D.Cross(tangentA' tangentB);    					if (normal.Length() > 0.0001f)  					{  						normal.Normalize();    						// If this patch is mirrored' we must invert the normal.  						if (isMirrored)  							normal = -normal;  					}  					else  					{  						// In a tidy and well constructed bezier patch' the preceding  						// normal computation will always work. But the classic teapot  						// model is not tidy or well constructed! At the top and bottom  						// of the teapot' it contains degenerate geometry where a patch  						// has several control points in the same place' which causes  						// the tangent computation to fail and produce a zero normal.  						// We 'fix' these cases by just hard-coding a normal that points  						// either straight up or straight down' depending on whether we  						// are on the top or bottom of the teapot. This is not a robust  						// solution for all possible degenerate bezier patches' but hey'  						// it's good enough to make the teapot work correctly!    						if (position.Y > 0)  							normal = Vector3D.Up;  						else  							normal = Vector3D.Down;  					}    					// Create the vertex.  					AddVertex(position' normal);  				}  			}
Magic Number,Meshellator.Primitives,BezierPrimitiveTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\BezierPrimitiveTessellator.cs,CreatePatchVertices,The following statement contains a magic number: for (int i = 0; i <= TessellationLevel; i++)  			{  				float ti = (float)i / TessellationLevel;    				for (int j = 0; j <= TessellationLevel; j++)  				{  					float tj = (float)j / TessellationLevel;    					// Perform four horizontal bezier interpolations  					// between the control points of this patch.  					Point3D p1 = Bezier(patch[0]' patch[1]' patch[2]' patch[3]' ti);  					Point3D p2 = Bezier(patch[4]' patch[5]' patch[6]' patch[7]' ti);  					Point3D p3 = Bezier(patch[8]' patch[9]' patch[10]' patch[11]' ti);  					Point3D p4 = Bezier(patch[12]' patch[13]' patch[14]' patch[15]' ti);    					// Perform a vertical interpolation between the results of the  					// previous horizontal interpolations' to compute the position.  					Point3D position = Bezier(p1' p2' p3' p4' tj);    					// Perform another four bezier interpolations between the control  					// points' but this time vertically rather than horizontally.  					Point3D q1 = Bezier(patch[0]' patch[4]' patch[8]' patch[12]' tj);  					Point3D q2 = Bezier(patch[1]' patch[5]' patch[9]' patch[13]' tj);  					Point3D q3 = Bezier(patch[2]' patch[6]' patch[10]' patch[14]' tj);  					Point3D q4 = Bezier(patch[3]' patch[7]' patch[11]' patch[15]' tj);    					// Compute vertical and horizontal tangent vectors.  					Vector3D tangentA = BezierTangent(p1' p2' p3' p4' tj);  					Vector3D tangentB = BezierTangent(q1' q2' q3' q4' ti);    					// Cross the two tangent vectors to compute the normal.  					Vector3D normal = Vector3D.Cross(tangentA' tangentB);    					if (normal.Length() > 0.0001f)  					{  						normal.Normalize();    						// If this patch is mirrored' we must invert the normal.  						if (isMirrored)  							normal = -normal;  					}  					else  					{  						// In a tidy and well constructed bezier patch' the preceding  						// normal computation will always work. But the classic teapot  						// model is not tidy or well constructed! At the top and bottom  						// of the teapot' it contains degenerate geometry where a patch  						// has several control points in the same place' which causes  						// the tangent computation to fail and produce a zero normal.  						// We 'fix' these cases by just hard-coding a normal that points  						// either straight up or straight down' depending on whether we  						// are on the top or bottom of the teapot. This is not a robust  						// solution for all possible degenerate bezier patches' but hey'  						// it's good enough to make the teapot work correctly!    						if (position.Y > 0)  							normal = Vector3D.Up;  						else  							normal = Vector3D.Down;  					}    					// Create the vertex.  					AddVertex(position' normal);  				}  			}
Magic Number,Meshellator.Primitives,BezierPrimitiveTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\BezierPrimitiveTessellator.cs,CreatePatchVertices,The following statement contains a magic number: for (int i = 0; i <= TessellationLevel; i++)  			{  				float ti = (float)i / TessellationLevel;    				for (int j = 0; j <= TessellationLevel; j++)  				{  					float tj = (float)j / TessellationLevel;    					// Perform four horizontal bezier interpolations  					// between the control points of this patch.  					Point3D p1 = Bezier(patch[0]' patch[1]' patch[2]' patch[3]' ti);  					Point3D p2 = Bezier(patch[4]' patch[5]' patch[6]' patch[7]' ti);  					Point3D p3 = Bezier(patch[8]' patch[9]' patch[10]' patch[11]' ti);  					Point3D p4 = Bezier(patch[12]' patch[13]' patch[14]' patch[15]' ti);    					// Perform a vertical interpolation between the results of the  					// previous horizontal interpolations' to compute the position.  					Point3D position = Bezier(p1' p2' p3' p4' tj);    					// Perform another four bezier interpolations between the control  					// points' but this time vertically rather than horizontally.  					Point3D q1 = Bezier(patch[0]' patch[4]' patch[8]' patch[12]' tj);  					Point3D q2 = Bezier(patch[1]' patch[5]' patch[9]' patch[13]' tj);  					Point3D q3 = Bezier(patch[2]' patch[6]' patch[10]' patch[14]' tj);  					Point3D q4 = Bezier(patch[3]' patch[7]' patch[11]' patch[15]' tj);    					// Compute vertical and horizontal tangent vectors.  					Vector3D tangentA = BezierTangent(p1' p2' p3' p4' tj);  					Vector3D tangentB = BezierTangent(q1' q2' q3' q4' ti);    					// Cross the two tangent vectors to compute the normal.  					Vector3D normal = Vector3D.Cross(tangentA' tangentB);    					if (normal.Length() > 0.0001f)  					{  						normal.Normalize();    						// If this patch is mirrored' we must invert the normal.  						if (isMirrored)  							normal = -normal;  					}  					else  					{  						// In a tidy and well constructed bezier patch' the preceding  						// normal computation will always work. But the classic teapot  						// model is not tidy or well constructed! At the top and bottom  						// of the teapot' it contains degenerate geometry where a patch  						// has several control points in the same place' which causes  						// the tangent computation to fail and produce a zero normal.  						// We 'fix' these cases by just hard-coding a normal that points  						// either straight up or straight down' depending on whether we  						// are on the top or bottom of the teapot. This is not a robust  						// solution for all possible degenerate bezier patches' but hey'  						// it's good enough to make the teapot work correctly!    						if (position.Y > 0)  							normal = Vector3D.Up;  						else  							normal = Vector3D.Down;  					}    					// Create the vertex.  					AddVertex(position' normal);  				}  			}
Magic Number,Meshellator.Primitives,BezierPrimitiveTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\BezierPrimitiveTessellator.cs,CreatePatchVertices,The following statement contains a magic number: for (int i = 0; i <= TessellationLevel; i++)  			{  				float ti = (float)i / TessellationLevel;    				for (int j = 0; j <= TessellationLevel; j++)  				{  					float tj = (float)j / TessellationLevel;    					// Perform four horizontal bezier interpolations  					// between the control points of this patch.  					Point3D p1 = Bezier(patch[0]' patch[1]' patch[2]' patch[3]' ti);  					Point3D p2 = Bezier(patch[4]' patch[5]' patch[6]' patch[7]' ti);  					Point3D p3 = Bezier(patch[8]' patch[9]' patch[10]' patch[11]' ti);  					Point3D p4 = Bezier(patch[12]' patch[13]' patch[14]' patch[15]' ti);    					// Perform a vertical interpolation between the results of the  					// previous horizontal interpolations' to compute the position.  					Point3D position = Bezier(p1' p2' p3' p4' tj);    					// Perform another four bezier interpolations between the control  					// points' but this time vertically rather than horizontally.  					Point3D q1 = Bezier(patch[0]' patch[4]' patch[8]' patch[12]' tj);  					Point3D q2 = Bezier(patch[1]' patch[5]' patch[9]' patch[13]' tj);  					Point3D q3 = Bezier(patch[2]' patch[6]' patch[10]' patch[14]' tj);  					Point3D q4 = Bezier(patch[3]' patch[7]' patch[11]' patch[15]' tj);    					// Compute vertical and horizontal tangent vectors.  					Vector3D tangentA = BezierTangent(p1' p2' p3' p4' tj);  					Vector3D tangentB = BezierTangent(q1' q2' q3' q4' ti);    					// Cross the two tangent vectors to compute the normal.  					Vector3D normal = Vector3D.Cross(tangentA' tangentB);    					if (normal.Length() > 0.0001f)  					{  						normal.Normalize();    						// If this patch is mirrored' we must invert the normal.  						if (isMirrored)  							normal = -normal;  					}  					else  					{  						// In a tidy and well constructed bezier patch' the preceding  						// normal computation will always work. But the classic teapot  						// model is not tidy or well constructed! At the top and bottom  						// of the teapot' it contains degenerate geometry where a patch  						// has several control points in the same place' which causes  						// the tangent computation to fail and produce a zero normal.  						// We 'fix' these cases by just hard-coding a normal that points  						// either straight up or straight down' depending on whether we  						// are on the top or bottom of the teapot. This is not a robust  						// solution for all possible degenerate bezier patches' but hey'  						// it's good enough to make the teapot work correctly!    						if (position.Y > 0)  							normal = Vector3D.Up;  						else  							normal = Vector3D.Down;  					}    					// Create the vertex.  					AddVertex(position' normal);  				}  			}
Magic Number,Meshellator.Primitives,BezierPrimitiveTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\BezierPrimitiveTessellator.cs,CreatePatchVertices,The following statement contains a magic number: for (int i = 0; i <= TessellationLevel; i++)  			{  				float ti = (float)i / TessellationLevel;    				for (int j = 0; j <= TessellationLevel; j++)  				{  					float tj = (float)j / TessellationLevel;    					// Perform four horizontal bezier interpolations  					// between the control points of this patch.  					Point3D p1 = Bezier(patch[0]' patch[1]' patch[2]' patch[3]' ti);  					Point3D p2 = Bezier(patch[4]' patch[5]' patch[6]' patch[7]' ti);  					Point3D p3 = Bezier(patch[8]' patch[9]' patch[10]' patch[11]' ti);  					Point3D p4 = Bezier(patch[12]' patch[13]' patch[14]' patch[15]' ti);    					// Perform a vertical interpolation between the results of the  					// previous horizontal interpolations' to compute the position.  					Point3D position = Bezier(p1' p2' p3' p4' tj);    					// Perform another four bezier interpolations between the control  					// points' but this time vertically rather than horizontally.  					Point3D q1 = Bezier(patch[0]' patch[4]' patch[8]' patch[12]' tj);  					Point3D q2 = Bezier(patch[1]' patch[5]' patch[9]' patch[13]' tj);  					Point3D q3 = Bezier(patch[2]' patch[6]' patch[10]' patch[14]' tj);  					Point3D q4 = Bezier(patch[3]' patch[7]' patch[11]' patch[15]' tj);    					// Compute vertical and horizontal tangent vectors.  					Vector3D tangentA = BezierTangent(p1' p2' p3' p4' tj);  					Vector3D tangentB = BezierTangent(q1' q2' q3' q4' ti);    					// Cross the two tangent vectors to compute the normal.  					Vector3D normal = Vector3D.Cross(tangentA' tangentB);    					if (normal.Length() > 0.0001f)  					{  						normal.Normalize();    						// If this patch is mirrored' we must invert the normal.  						if (isMirrored)  							normal = -normal;  					}  					else  					{  						// In a tidy and well constructed bezier patch' the preceding  						// normal computation will always work. But the classic teapot  						// model is not tidy or well constructed! At the top and bottom  						// of the teapot' it contains degenerate geometry where a patch  						// has several control points in the same place' which causes  						// the tangent computation to fail and produce a zero normal.  						// We 'fix' these cases by just hard-coding a normal that points  						// either straight up or straight down' depending on whether we  						// are on the top or bottom of the teapot. This is not a robust  						// solution for all possible degenerate bezier patches' but hey'  						// it's good enough to make the teapot work correctly!    						if (position.Y > 0)  							normal = Vector3D.Up;  						else  							normal = Vector3D.Down;  					}    					// Create the vertex.  					AddVertex(position' normal);  				}  			}
Magic Number,Meshellator.Primitives,BezierPrimitiveTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\BezierPrimitiveTessellator.cs,CreatePatchVertices,The following statement contains a magic number: for (int i = 0; i <= TessellationLevel; i++)  			{  				float ti = (float)i / TessellationLevel;    				for (int j = 0; j <= TessellationLevel; j++)  				{  					float tj = (float)j / TessellationLevel;    					// Perform four horizontal bezier interpolations  					// between the control points of this patch.  					Point3D p1 = Bezier(patch[0]' patch[1]' patch[2]' patch[3]' ti);  					Point3D p2 = Bezier(patch[4]' patch[5]' patch[6]' patch[7]' ti);  					Point3D p3 = Bezier(patch[8]' patch[9]' patch[10]' patch[11]' ti);  					Point3D p4 = Bezier(patch[12]' patch[13]' patch[14]' patch[15]' ti);    					// Perform a vertical interpolation between the results of the  					// previous horizontal interpolations' to compute the position.  					Point3D position = Bezier(p1' p2' p3' p4' tj);    					// Perform another four bezier interpolations between the control  					// points' but this time vertically rather than horizontally.  					Point3D q1 = Bezier(patch[0]' patch[4]' patch[8]' patch[12]' tj);  					Point3D q2 = Bezier(patch[1]' patch[5]' patch[9]' patch[13]' tj);  					Point3D q3 = Bezier(patch[2]' patch[6]' patch[10]' patch[14]' tj);  					Point3D q4 = Bezier(patch[3]' patch[7]' patch[11]' patch[15]' tj);    					// Compute vertical and horizontal tangent vectors.  					Vector3D tangentA = BezierTangent(p1' p2' p3' p4' tj);  					Vector3D tangentB = BezierTangent(q1' q2' q3' q4' ti);    					// Cross the two tangent vectors to compute the normal.  					Vector3D normal = Vector3D.Cross(tangentA' tangentB);    					if (normal.Length() > 0.0001f)  					{  						normal.Normalize();    						// If this patch is mirrored' we must invert the normal.  						if (isMirrored)  							normal = -normal;  					}  					else  					{  						// In a tidy and well constructed bezier patch' the preceding  						// normal computation will always work. But the classic teapot  						// model is not tidy or well constructed! At the top and bottom  						// of the teapot' it contains degenerate geometry where a patch  						// has several control points in the same place' which causes  						// the tangent computation to fail and produce a zero normal.  						// We 'fix' these cases by just hard-coding a normal that points  						// either straight up or straight down' depending on whether we  						// are on the top or bottom of the teapot. This is not a robust  						// solution for all possible degenerate bezier patches' but hey'  						// it's good enough to make the teapot work correctly!    						if (position.Y > 0)  							normal = Vector3D.Up;  						else  							normal = Vector3D.Down;  					}    					// Create the vertex.  					AddVertex(position' normal);  				}  			}
Magic Number,Meshellator.Primitives,BezierPrimitiveTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\BezierPrimitiveTessellator.cs,CreatePatchVertices,The following statement contains a magic number: for (int i = 0; i <= TessellationLevel; i++)  			{  				float ti = (float)i / TessellationLevel;    				for (int j = 0; j <= TessellationLevel; j++)  				{  					float tj = (float)j / TessellationLevel;    					// Perform four horizontal bezier interpolations  					// between the control points of this patch.  					Point3D p1 = Bezier(patch[0]' patch[1]' patch[2]' patch[3]' ti);  					Point3D p2 = Bezier(patch[4]' patch[5]' patch[6]' patch[7]' ti);  					Point3D p3 = Bezier(patch[8]' patch[9]' patch[10]' patch[11]' ti);  					Point3D p4 = Bezier(patch[12]' patch[13]' patch[14]' patch[15]' ti);    					// Perform a vertical interpolation between the results of the  					// previous horizontal interpolations' to compute the position.  					Point3D position = Bezier(p1' p2' p3' p4' tj);    					// Perform another four bezier interpolations between the control  					// points' but this time vertically rather than horizontally.  					Point3D q1 = Bezier(patch[0]' patch[4]' patch[8]' patch[12]' tj);  					Point3D q2 = Bezier(patch[1]' patch[5]' patch[9]' patch[13]' tj);  					Point3D q3 = Bezier(patch[2]' patch[6]' patch[10]' patch[14]' tj);  					Point3D q4 = Bezier(patch[3]' patch[7]' patch[11]' patch[15]' tj);    					// Compute vertical and horizontal tangent vectors.  					Vector3D tangentA = BezierTangent(p1' p2' p3' p4' tj);  					Vector3D tangentB = BezierTangent(q1' q2' q3' q4' ti);    					// Cross the two tangent vectors to compute the normal.  					Vector3D normal = Vector3D.Cross(tangentA' tangentB);    					if (normal.Length() > 0.0001f)  					{  						normal.Normalize();    						// If this patch is mirrored' we must invert the normal.  						if (isMirrored)  							normal = -normal;  					}  					else  					{  						// In a tidy and well constructed bezier patch' the preceding  						// normal computation will always work. But the classic teapot  						// model is not tidy or well constructed! At the top and bottom  						// of the teapot' it contains degenerate geometry where a patch  						// has several control points in the same place' which causes  						// the tangent computation to fail and produce a zero normal.  						// We 'fix' these cases by just hard-coding a normal that points  						// either straight up or straight down' depending on whether we  						// are on the top or bottom of the teapot. This is not a robust  						// solution for all possible degenerate bezier patches' but hey'  						// it's good enough to make the teapot work correctly!    						if (position.Y > 0)  							normal = Vector3D.Up;  						else  							normal = Vector3D.Down;  					}    					// Create the vertex.  					AddVertex(position' normal);  				}  			}
Magic Number,Meshellator.Primitives,BezierPrimitiveTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\BezierPrimitiveTessellator.cs,CreatePatchVertices,The following statement contains a magic number: for (int i = 0; i <= TessellationLevel; i++)  			{  				float ti = (float)i / TessellationLevel;    				for (int j = 0; j <= TessellationLevel; j++)  				{  					float tj = (float)j / TessellationLevel;    					// Perform four horizontal bezier interpolations  					// between the control points of this patch.  					Point3D p1 = Bezier(patch[0]' patch[1]' patch[2]' patch[3]' ti);  					Point3D p2 = Bezier(patch[4]' patch[5]' patch[6]' patch[7]' ti);  					Point3D p3 = Bezier(patch[8]' patch[9]' patch[10]' patch[11]' ti);  					Point3D p4 = Bezier(patch[12]' patch[13]' patch[14]' patch[15]' ti);    					// Perform a vertical interpolation between the results of the  					// previous horizontal interpolations' to compute the position.  					Point3D position = Bezier(p1' p2' p3' p4' tj);    					// Perform another four bezier interpolations between the control  					// points' but this time vertically rather than horizontally.  					Point3D q1 = Bezier(patch[0]' patch[4]' patch[8]' patch[12]' tj);  					Point3D q2 = Bezier(patch[1]' patch[5]' patch[9]' patch[13]' tj);  					Point3D q3 = Bezier(patch[2]' patch[6]' patch[10]' patch[14]' tj);  					Point3D q4 = Bezier(patch[3]' patch[7]' patch[11]' patch[15]' tj);    					// Compute vertical and horizontal tangent vectors.  					Vector3D tangentA = BezierTangent(p1' p2' p3' p4' tj);  					Vector3D tangentB = BezierTangent(q1' q2' q3' q4' ti);    					// Cross the two tangent vectors to compute the normal.  					Vector3D normal = Vector3D.Cross(tangentA' tangentB);    					if (normal.Length() > 0.0001f)  					{  						normal.Normalize();    						// If this patch is mirrored' we must invert the normal.  						if (isMirrored)  							normal = -normal;  					}  					else  					{  						// In a tidy and well constructed bezier patch' the preceding  						// normal computation will always work. But the classic teapot  						// model is not tidy or well constructed! At the top and bottom  						// of the teapot' it contains degenerate geometry where a patch  						// has several control points in the same place' which causes  						// the tangent computation to fail and produce a zero normal.  						// We 'fix' these cases by just hard-coding a normal that points  						// either straight up or straight down' depending on whether we  						// are on the top or bottom of the teapot. This is not a robust  						// solution for all possible degenerate bezier patches' but hey'  						// it's good enough to make the teapot work correctly!    						if (position.Y > 0)  							normal = Vector3D.Up;  						else  							normal = Vector3D.Down;  					}    					// Create the vertex.  					AddVertex(position' normal);  				}  			}
Magic Number,Meshellator.Primitives,BezierPrimitiveTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\BezierPrimitiveTessellator.cs,CreatePatchVertices,The following statement contains a magic number: for (int i = 0; i <= TessellationLevel; i++)  			{  				float ti = (float)i / TessellationLevel;    				for (int j = 0; j <= TessellationLevel; j++)  				{  					float tj = (float)j / TessellationLevel;    					// Perform four horizontal bezier interpolations  					// between the control points of this patch.  					Point3D p1 = Bezier(patch[0]' patch[1]' patch[2]' patch[3]' ti);  					Point3D p2 = Bezier(patch[4]' patch[5]' patch[6]' patch[7]' ti);  					Point3D p3 = Bezier(patch[8]' patch[9]' patch[10]' patch[11]' ti);  					Point3D p4 = Bezier(patch[12]' patch[13]' patch[14]' patch[15]' ti);    					// Perform a vertical interpolation between the results of the  					// previous horizontal interpolations' to compute the position.  					Point3D position = Bezier(p1' p2' p3' p4' tj);    					// Perform another four bezier interpolations between the control  					// points' but this time vertically rather than horizontally.  					Point3D q1 = Bezier(patch[0]' patch[4]' patch[8]' patch[12]' tj);  					Point3D q2 = Bezier(patch[1]' patch[5]' patch[9]' patch[13]' tj);  					Point3D q3 = Bezier(patch[2]' patch[6]' patch[10]' patch[14]' tj);  					Point3D q4 = Bezier(patch[3]' patch[7]' patch[11]' patch[15]' tj);    					// Compute vertical and horizontal tangent vectors.  					Vector3D tangentA = BezierTangent(p1' p2' p3' p4' tj);  					Vector3D tangentB = BezierTangent(q1' q2' q3' q4' ti);    					// Cross the two tangent vectors to compute the normal.  					Vector3D normal = Vector3D.Cross(tangentA' tangentB);    					if (normal.Length() > 0.0001f)  					{  						normal.Normalize();    						// If this patch is mirrored' we must invert the normal.  						if (isMirrored)  							normal = -normal;  					}  					else  					{  						// In a tidy and well constructed bezier patch' the preceding  						// normal computation will always work. But the classic teapot  						// model is not tidy or well constructed! At the top and bottom  						// of the teapot' it contains degenerate geometry where a patch  						// has several control points in the same place' which causes  						// the tangent computation to fail and produce a zero normal.  						// We 'fix' these cases by just hard-coding a normal that points  						// either straight up or straight down' depending on whether we  						// are on the top or bottom of the teapot. This is not a robust  						// solution for all possible degenerate bezier patches' but hey'  						// it's good enough to make the teapot work correctly!    						if (position.Y > 0)  							normal = Vector3D.Up;  						else  							normal = Vector3D.Down;  					}    					// Create the vertex.  					AddVertex(position' normal);  				}  			}
Magic Number,Meshellator.Primitives,BezierPrimitiveTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\BezierPrimitiveTessellator.cs,CreatePatchVertices,The following statement contains a magic number: for (int i = 0; i <= TessellationLevel; i++)  			{  				float ti = (float)i / TessellationLevel;    				for (int j = 0; j <= TessellationLevel; j++)  				{  					float tj = (float)j / TessellationLevel;    					// Perform four horizontal bezier interpolations  					// between the control points of this patch.  					Point3D p1 = Bezier(patch[0]' patch[1]' patch[2]' patch[3]' ti);  					Point3D p2 = Bezier(patch[4]' patch[5]' patch[6]' patch[7]' ti);  					Point3D p3 = Bezier(patch[8]' patch[9]' patch[10]' patch[11]' ti);  					Point3D p4 = Bezier(patch[12]' patch[13]' patch[14]' patch[15]' ti);    					// Perform a vertical interpolation between the results of the  					// previous horizontal interpolations' to compute the position.  					Point3D position = Bezier(p1' p2' p3' p4' tj);    					// Perform another four bezier interpolations between the control  					// points' but this time vertically rather than horizontally.  					Point3D q1 = Bezier(patch[0]' patch[4]' patch[8]' patch[12]' tj);  					Point3D q2 = Bezier(patch[1]' patch[5]' patch[9]' patch[13]' tj);  					Point3D q3 = Bezier(patch[2]' patch[6]' patch[10]' patch[14]' tj);  					Point3D q4 = Bezier(patch[3]' patch[7]' patch[11]' patch[15]' tj);    					// Compute vertical and horizontal tangent vectors.  					Vector3D tangentA = BezierTangent(p1' p2' p3' p4' tj);  					Vector3D tangentB = BezierTangent(q1' q2' q3' q4' ti);    					// Cross the two tangent vectors to compute the normal.  					Vector3D normal = Vector3D.Cross(tangentA' tangentB);    					if (normal.Length() > 0.0001f)  					{  						normal.Normalize();    						// If this patch is mirrored' we must invert the normal.  						if (isMirrored)  							normal = -normal;  					}  					else  					{  						// In a tidy and well constructed bezier patch' the preceding  						// normal computation will always work. But the classic teapot  						// model is not tidy or well constructed! At the top and bottom  						// of the teapot' it contains degenerate geometry where a patch  						// has several control points in the same place' which causes  						// the tangent computation to fail and produce a zero normal.  						// We 'fix' these cases by just hard-coding a normal that points  						// either straight up or straight down' depending on whether we  						// are on the top or bottom of the teapot. This is not a robust  						// solution for all possible degenerate bezier patches' but hey'  						// it's good enough to make the teapot work correctly!    						if (position.Y > 0)  							normal = Vector3D.Up;  						else  							normal = Vector3D.Down;  					}    					// Create the vertex.  					AddVertex(position' normal);  				}  			}
Magic Number,Meshellator.Primitives,BezierPrimitiveTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\BezierPrimitiveTessellator.cs,CreatePatchVertices,The following statement contains a magic number: for (int i = 0; i <= TessellationLevel; i++)  			{  				float ti = (float)i / TessellationLevel;    				for (int j = 0; j <= TessellationLevel; j++)  				{  					float tj = (float)j / TessellationLevel;    					// Perform four horizontal bezier interpolations  					// between the control points of this patch.  					Point3D p1 = Bezier(patch[0]' patch[1]' patch[2]' patch[3]' ti);  					Point3D p2 = Bezier(patch[4]' patch[5]' patch[6]' patch[7]' ti);  					Point3D p3 = Bezier(patch[8]' patch[9]' patch[10]' patch[11]' ti);  					Point3D p4 = Bezier(patch[12]' patch[13]' patch[14]' patch[15]' ti);    					// Perform a vertical interpolation between the results of the  					// previous horizontal interpolations' to compute the position.  					Point3D position = Bezier(p1' p2' p3' p4' tj);    					// Perform another four bezier interpolations between the control  					// points' but this time vertically rather than horizontally.  					Point3D q1 = Bezier(patch[0]' patch[4]' patch[8]' patch[12]' tj);  					Point3D q2 = Bezier(patch[1]' patch[5]' patch[9]' patch[13]' tj);  					Point3D q3 = Bezier(patch[2]' patch[6]' patch[10]' patch[14]' tj);  					Point3D q4 = Bezier(patch[3]' patch[7]' patch[11]' patch[15]' tj);    					// Compute vertical and horizontal tangent vectors.  					Vector3D tangentA = BezierTangent(p1' p2' p3' p4' tj);  					Vector3D tangentB = BezierTangent(q1' q2' q3' q4' ti);    					// Cross the two tangent vectors to compute the normal.  					Vector3D normal = Vector3D.Cross(tangentA' tangentB);    					if (normal.Length() > 0.0001f)  					{  						normal.Normalize();    						// If this patch is mirrored' we must invert the normal.  						if (isMirrored)  							normal = -normal;  					}  					else  					{  						// In a tidy and well constructed bezier patch' the preceding  						// normal computation will always work. But the classic teapot  						// model is not tidy or well constructed! At the top and bottom  						// of the teapot' it contains degenerate geometry where a patch  						// has several control points in the same place' which causes  						// the tangent computation to fail and produce a zero normal.  						// We 'fix' these cases by just hard-coding a normal that points  						// either straight up or straight down' depending on whether we  						// are on the top or bottom of the teapot. This is not a robust  						// solution for all possible degenerate bezier patches' but hey'  						// it's good enough to make the teapot work correctly!    						if (position.Y > 0)  							normal = Vector3D.Up;  						else  							normal = Vector3D.Down;  					}    					// Create the vertex.  					AddVertex(position' normal);  				}  			}
Magic Number,Meshellator.Primitives,BezierPrimitiveTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\BezierPrimitiveTessellator.cs,CreatePatchVertices,The following statement contains a magic number: for (int i = 0; i <= TessellationLevel; i++)  			{  				float ti = (float)i / TessellationLevel;    				for (int j = 0; j <= TessellationLevel; j++)  				{  					float tj = (float)j / TessellationLevel;    					// Perform four horizontal bezier interpolations  					// between the control points of this patch.  					Point3D p1 = Bezier(patch[0]' patch[1]' patch[2]' patch[3]' ti);  					Point3D p2 = Bezier(patch[4]' patch[5]' patch[6]' patch[7]' ti);  					Point3D p3 = Bezier(patch[8]' patch[9]' patch[10]' patch[11]' ti);  					Point3D p4 = Bezier(patch[12]' patch[13]' patch[14]' patch[15]' ti);    					// Perform a vertical interpolation between the results of the  					// previous horizontal interpolations' to compute the position.  					Point3D position = Bezier(p1' p2' p3' p4' tj);    					// Perform another four bezier interpolations between the control  					// points' but this time vertically rather than horizontally.  					Point3D q1 = Bezier(patch[0]' patch[4]' patch[8]' patch[12]' tj);  					Point3D q2 = Bezier(patch[1]' patch[5]' patch[9]' patch[13]' tj);  					Point3D q3 = Bezier(patch[2]' patch[6]' patch[10]' patch[14]' tj);  					Point3D q4 = Bezier(patch[3]' patch[7]' patch[11]' patch[15]' tj);    					// Compute vertical and horizontal tangent vectors.  					Vector3D tangentA = BezierTangent(p1' p2' p3' p4' tj);  					Vector3D tangentB = BezierTangent(q1' q2' q3' q4' ti);    					// Cross the two tangent vectors to compute the normal.  					Vector3D normal = Vector3D.Cross(tangentA' tangentB);    					if (normal.Length() > 0.0001f)  					{  						normal.Normalize();    						// If this patch is mirrored' we must invert the normal.  						if (isMirrored)  							normal = -normal;  					}  					else  					{  						// In a tidy and well constructed bezier patch' the preceding  						// normal computation will always work. But the classic teapot  						// model is not tidy or well constructed! At the top and bottom  						// of the teapot' it contains degenerate geometry where a patch  						// has several control points in the same place' which causes  						// the tangent computation to fail and produce a zero normal.  						// We 'fix' these cases by just hard-coding a normal that points  						// either straight up or straight down' depending on whether we  						// are on the top or bottom of the teapot. This is not a robust  						// solution for all possible degenerate bezier patches' but hey'  						// it's good enough to make the teapot work correctly!    						if (position.Y > 0)  							normal = Vector3D.Up;  						else  							normal = Vector3D.Down;  					}    					// Create the vertex.  					AddVertex(position' normal);  				}  			}
Magic Number,Meshellator.Primitives,BezierPrimitiveTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\BezierPrimitiveTessellator.cs,CreatePatchVertices,The following statement contains a magic number: for (int i = 0; i <= TessellationLevel; i++)  			{  				float ti = (float)i / TessellationLevel;    				for (int j = 0; j <= TessellationLevel; j++)  				{  					float tj = (float)j / TessellationLevel;    					// Perform four horizontal bezier interpolations  					// between the control points of this patch.  					Point3D p1 = Bezier(patch[0]' patch[1]' patch[2]' patch[3]' ti);  					Point3D p2 = Bezier(patch[4]' patch[5]' patch[6]' patch[7]' ti);  					Point3D p3 = Bezier(patch[8]' patch[9]' patch[10]' patch[11]' ti);  					Point3D p4 = Bezier(patch[12]' patch[13]' patch[14]' patch[15]' ti);    					// Perform a vertical interpolation between the results of the  					// previous horizontal interpolations' to compute the position.  					Point3D position = Bezier(p1' p2' p3' p4' tj);    					// Perform another four bezier interpolations between the control  					// points' but this time vertically rather than horizontally.  					Point3D q1 = Bezier(patch[0]' patch[4]' patch[8]' patch[12]' tj);  					Point3D q2 = Bezier(patch[1]' patch[5]' patch[9]' patch[13]' tj);  					Point3D q3 = Bezier(patch[2]' patch[6]' patch[10]' patch[14]' tj);  					Point3D q4 = Bezier(patch[3]' patch[7]' patch[11]' patch[15]' tj);    					// Compute vertical and horizontal tangent vectors.  					Vector3D tangentA = BezierTangent(p1' p2' p3' p4' tj);  					Vector3D tangentB = BezierTangent(q1' q2' q3' q4' ti);    					// Cross the two tangent vectors to compute the normal.  					Vector3D normal = Vector3D.Cross(tangentA' tangentB);    					if (normal.Length() > 0.0001f)  					{  						normal.Normalize();    						// If this patch is mirrored' we must invert the normal.  						if (isMirrored)  							normal = -normal;  					}  					else  					{  						// In a tidy and well constructed bezier patch' the preceding  						// normal computation will always work. But the classic teapot  						// model is not tidy or well constructed! At the top and bottom  						// of the teapot' it contains degenerate geometry where a patch  						// has several control points in the same place' which causes  						// the tangent computation to fail and produce a zero normal.  						// We 'fix' these cases by just hard-coding a normal that points  						// either straight up or straight down' depending on whether we  						// are on the top or bottom of the teapot. This is not a robust  						// solution for all possible degenerate bezier patches' but hey'  						// it's good enough to make the teapot work correctly!    						if (position.Y > 0)  							normal = Vector3D.Up;  						else  							normal = Vector3D.Down;  					}    					// Create the vertex.  					AddVertex(position' normal);  				}  			}
Magic Number,Meshellator.Primitives,BezierPrimitiveTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\BezierPrimitiveTessellator.cs,CreatePatchVertices,The following statement contains a magic number: for (int i = 0; i <= TessellationLevel; i++)  			{  				float ti = (float)i / TessellationLevel;    				for (int j = 0; j <= TessellationLevel; j++)  				{  					float tj = (float)j / TessellationLevel;    					// Perform four horizontal bezier interpolations  					// between the control points of this patch.  					Point3D p1 = Bezier(patch[0]' patch[1]' patch[2]' patch[3]' ti);  					Point3D p2 = Bezier(patch[4]' patch[5]' patch[6]' patch[7]' ti);  					Point3D p3 = Bezier(patch[8]' patch[9]' patch[10]' patch[11]' ti);  					Point3D p4 = Bezier(patch[12]' patch[13]' patch[14]' patch[15]' ti);    					// Perform a vertical interpolation between the results of the  					// previous horizontal interpolations' to compute the position.  					Point3D position = Bezier(p1' p2' p3' p4' tj);    					// Perform another four bezier interpolations between the control  					// points' but this time vertically rather than horizontally.  					Point3D q1 = Bezier(patch[0]' patch[4]' patch[8]' patch[12]' tj);  					Point3D q2 = Bezier(patch[1]' patch[5]' patch[9]' patch[13]' tj);  					Point3D q3 = Bezier(patch[2]' patch[6]' patch[10]' patch[14]' tj);  					Point3D q4 = Bezier(patch[3]' patch[7]' patch[11]' patch[15]' tj);    					// Compute vertical and horizontal tangent vectors.  					Vector3D tangentA = BezierTangent(p1' p2' p3' p4' tj);  					Vector3D tangentB = BezierTangent(q1' q2' q3' q4' ti);    					// Cross the two tangent vectors to compute the normal.  					Vector3D normal = Vector3D.Cross(tangentA' tangentB);    					if (normal.Length() > 0.0001f)  					{  						normal.Normalize();    						// If this patch is mirrored' we must invert the normal.  						if (isMirrored)  							normal = -normal;  					}  					else  					{  						// In a tidy and well constructed bezier patch' the preceding  						// normal computation will always work. But the classic teapot  						// model is not tidy or well constructed! At the top and bottom  						// of the teapot' it contains degenerate geometry where a patch  						// has several control points in the same place' which causes  						// the tangent computation to fail and produce a zero normal.  						// We 'fix' these cases by just hard-coding a normal that points  						// either straight up or straight down' depending on whether we  						// are on the top or bottom of the teapot. This is not a robust  						// solution for all possible degenerate bezier patches' but hey'  						// it's good enough to make the teapot work correctly!    						if (position.Y > 0)  							normal = Vector3D.Up;  						else  							normal = Vector3D.Down;  					}    					// Create the vertex.  					AddVertex(position' normal);  				}  			}
Magic Number,Meshellator.Primitives,BezierPrimitiveTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\BezierPrimitiveTessellator.cs,CreatePatchVertices,The following statement contains a magic number: for (int i = 0; i <= TessellationLevel; i++)  			{  				float ti = (float)i / TessellationLevel;    				for (int j = 0; j <= TessellationLevel; j++)  				{  					float tj = (float)j / TessellationLevel;    					// Perform four horizontal bezier interpolations  					// between the control points of this patch.  					Point3D p1 = Bezier(patch[0]' patch[1]' patch[2]' patch[3]' ti);  					Point3D p2 = Bezier(patch[4]' patch[5]' patch[6]' patch[7]' ti);  					Point3D p3 = Bezier(patch[8]' patch[9]' patch[10]' patch[11]' ti);  					Point3D p4 = Bezier(patch[12]' patch[13]' patch[14]' patch[15]' ti);    					// Perform a vertical interpolation between the results of the  					// previous horizontal interpolations' to compute the position.  					Point3D position = Bezier(p1' p2' p3' p4' tj);    					// Perform another four bezier interpolations between the control  					// points' but this time vertically rather than horizontally.  					Point3D q1 = Bezier(patch[0]' patch[4]' patch[8]' patch[12]' tj);  					Point3D q2 = Bezier(patch[1]' patch[5]' patch[9]' patch[13]' tj);  					Point3D q3 = Bezier(patch[2]' patch[6]' patch[10]' patch[14]' tj);  					Point3D q4 = Bezier(patch[3]' patch[7]' patch[11]' patch[15]' tj);    					// Compute vertical and horizontal tangent vectors.  					Vector3D tangentA = BezierTangent(p1' p2' p3' p4' tj);  					Vector3D tangentB = BezierTangent(q1' q2' q3' q4' ti);    					// Cross the two tangent vectors to compute the normal.  					Vector3D normal = Vector3D.Cross(tangentA' tangentB);    					if (normal.Length() > 0.0001f)  					{  						normal.Normalize();    						// If this patch is mirrored' we must invert the normal.  						if (isMirrored)  							normal = -normal;  					}  					else  					{  						// In a tidy and well constructed bezier patch' the preceding  						// normal computation will always work. But the classic teapot  						// model is not tidy or well constructed! At the top and bottom  						// of the teapot' it contains degenerate geometry where a patch  						// has several control points in the same place' which causes  						// the tangent computation to fail and produce a zero normal.  						// We 'fix' these cases by just hard-coding a normal that points  						// either straight up or straight down' depending on whether we  						// are on the top or bottom of the teapot. This is not a robust  						// solution for all possible degenerate bezier patches' but hey'  						// it's good enough to make the teapot work correctly!    						if (position.Y > 0)  							normal = Vector3D.Up;  						else  							normal = Vector3D.Down;  					}    					// Create the vertex.  					AddVertex(position' normal);  				}  			}
Magic Number,Meshellator.Primitives,BezierPrimitiveTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\BezierPrimitiveTessellator.cs,CreatePatchVertices,The following statement contains a magic number: for (int i = 0; i <= TessellationLevel; i++)  			{  				float ti = (float)i / TessellationLevel;    				for (int j = 0; j <= TessellationLevel; j++)  				{  					float tj = (float)j / TessellationLevel;    					// Perform four horizontal bezier interpolations  					// between the control points of this patch.  					Point3D p1 = Bezier(patch[0]' patch[1]' patch[2]' patch[3]' ti);  					Point3D p2 = Bezier(patch[4]' patch[5]' patch[6]' patch[7]' ti);  					Point3D p3 = Bezier(patch[8]' patch[9]' patch[10]' patch[11]' ti);  					Point3D p4 = Bezier(patch[12]' patch[13]' patch[14]' patch[15]' ti);    					// Perform a vertical interpolation between the results of the  					// previous horizontal interpolations' to compute the position.  					Point3D position = Bezier(p1' p2' p3' p4' tj);    					// Perform another four bezier interpolations between the control  					// points' but this time vertically rather than horizontally.  					Point3D q1 = Bezier(patch[0]' patch[4]' patch[8]' patch[12]' tj);  					Point3D q2 = Bezier(patch[1]' patch[5]' patch[9]' patch[13]' tj);  					Point3D q3 = Bezier(patch[2]' patch[6]' patch[10]' patch[14]' tj);  					Point3D q4 = Bezier(patch[3]' patch[7]' patch[11]' patch[15]' tj);    					// Compute vertical and horizontal tangent vectors.  					Vector3D tangentA = BezierTangent(p1' p2' p3' p4' tj);  					Vector3D tangentB = BezierTangent(q1' q2' q3' q4' ti);    					// Cross the two tangent vectors to compute the normal.  					Vector3D normal = Vector3D.Cross(tangentA' tangentB);    					if (normal.Length() > 0.0001f)  					{  						normal.Normalize();    						// If this patch is mirrored' we must invert the normal.  						if (isMirrored)  							normal = -normal;  					}  					else  					{  						// In a tidy and well constructed bezier patch' the preceding  						// normal computation will always work. But the classic teapot  						// model is not tidy or well constructed! At the top and bottom  						// of the teapot' it contains degenerate geometry where a patch  						// has several control points in the same place' which causes  						// the tangent computation to fail and produce a zero normal.  						// We 'fix' these cases by just hard-coding a normal that points  						// either straight up or straight down' depending on whether we  						// are on the top or bottom of the teapot. This is not a robust  						// solution for all possible degenerate bezier patches' but hey'  						// it's good enough to make the teapot work correctly!    						if (position.Y > 0)  							normal = Vector3D.Up;  						else  							normal = Vector3D.Down;  					}    					// Create the vertex.  					AddVertex(position' normal);  				}  			}
Magic Number,Meshellator.Primitives,BezierPrimitiveTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\BezierPrimitiveTessellator.cs,Bezier,The following statement contains a magic number: return p1 * (1 - t) * (1 - t) * (1 - t) +  						 p2 * 3 * t * (1 - t) * (1 - t) +  						 p3 * 3 * t * t * (1 - t) +  						 p4 * t * t * t;
Magic Number,Meshellator.Primitives,BezierPrimitiveTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\BezierPrimitiveTessellator.cs,Bezier,The following statement contains a magic number: return p1 * (1 - t) * (1 - t) * (1 - t) +  						 p2 * 3 * t * (1 - t) * (1 - t) +  						 p3 * 3 * t * t * (1 - t) +  						 p4 * t * t * t;
Magic Number,Meshellator.Primitives,BezierPrimitiveTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\BezierPrimitiveTessellator.cs,BezierTangent,The following statement contains a magic number: return p1 * (-1 + 2 * t - t * t) +  						 p2 * (1 - 4 * t + 3 * t * t) +  						 p3 * (2 * t - 3 * t * t) +  						 p4 * (t * t);
Magic Number,Meshellator.Primitives,BezierPrimitiveTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\BezierPrimitiveTessellator.cs,BezierTangent,The following statement contains a magic number: return p1 * (-1 + 2 * t - t * t) +  						 p2 * (1 - 4 * t + 3 * t * t) +  						 p3 * (2 * t - 3 * t * t) +  						 p4 * (t * t);
Magic Number,Meshellator.Primitives,BezierPrimitiveTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\BezierPrimitiveTessellator.cs,BezierTangent,The following statement contains a magic number: return p1 * (-1 + 2 * t - t * t) +  						 p2 * (1 - 4 * t + 3 * t * t) +  						 p3 * (2 * t - 3 * t * t) +  						 p4 * (t * t);
Magic Number,Meshellator.Primitives,BezierPrimitiveTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\BezierPrimitiveTessellator.cs,BezierTangent,The following statement contains a magic number: return p1 * (-1 + 2 * t - t * t) +  						 p2 * (1 - 4 * t + 3 * t * t) +  						 p3 * (2 * t - 3 * t * t) +  						 p4 * (t * t);
Magic Number,Meshellator.Primitives,BezierPrimitiveTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\BezierPrimitiveTessellator.cs,BezierTangent,The following statement contains a magic number: return p1 * (-1 + 2 * t - t * t) +  						 p2 * (1 - 4 * t + 3 * t * t) +  						 p3 * (2 * t - 3 * t * t) +  						 p4 * (t * t);
Magic Number,Meshellator.Primitives,PlaneTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\PlaneTessellator.cs,Tessellate,The following statement contains a magic number: for (int z = 0; z < _length - 1; ++z)  				for (int x = 0; x < _width; ++x)  				{  					// Create vertex for degenerate triangle.  					if (x == 0 && z > 0)  						AddIndex(((z + 0) * _width) + x);    					AddIndex(((z + 0) * _width) + x);  					AddIndex(((z + 1) * _width) + x);    					// Create vertex for degenerate triangle.  					if (x == _width - 1 && z < _length - 2)  						AddIndex(((z + 1) * _width) + x);  				}
Magic Number,Meshellator.Primitives,CubeTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\CubeTessellator.cs,Tessellate,The following statement contains a magic number: foreach (Vector3D normal in normals)  			{  				// Get two vectors perpendicular to the face normal and to each other.  				Vector3D side1 = new Vector3D(normal.Y' normal.Z' normal.X);  				Vector3D side2 = Vector3D.Cross(normal' side1);    				// Six indices (two triangles) per face.  				AddIndex(CurrentVertex + 0);  				AddIndex(CurrentVertex + 1);  				AddIndex(CurrentVertex + 2);    				AddIndex(CurrentVertex + 0);  				AddIndex(CurrentVertex + 2);  				AddIndex(CurrentVertex + 3);    				// Four vertices per face.  				AddVertex((Point3D)((normal - side1 - side2) * _size / 2)' normal);  				AddVertex((Point3D)((normal - side1 + side2) * _size / 2)' normal);  				AddVertex((Point3D)((normal + side1 + side2) * _size / 2)' normal);  				AddVertex((Point3D)((normal + side1 - side2) * _size / 2)' normal);  			}
Magic Number,Meshellator.Primitives,CubeTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\CubeTessellator.cs,Tessellate,The following statement contains a magic number: foreach (Vector3D normal in normals)  			{  				// Get two vectors perpendicular to the face normal and to each other.  				Vector3D side1 = new Vector3D(normal.Y' normal.Z' normal.X);  				Vector3D side2 = Vector3D.Cross(normal' side1);    				// Six indices (two triangles) per face.  				AddIndex(CurrentVertex + 0);  				AddIndex(CurrentVertex + 1);  				AddIndex(CurrentVertex + 2);    				AddIndex(CurrentVertex + 0);  				AddIndex(CurrentVertex + 2);  				AddIndex(CurrentVertex + 3);    				// Four vertices per face.  				AddVertex((Point3D)((normal - side1 - side2) * _size / 2)' normal);  				AddVertex((Point3D)((normal - side1 + side2) * _size / 2)' normal);  				AddVertex((Point3D)((normal + side1 + side2) * _size / 2)' normal);  				AddVertex((Point3D)((normal + side1 - side2) * _size / 2)' normal);  			}
Magic Number,Meshellator.Primitives,CubeTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\CubeTessellator.cs,Tessellate,The following statement contains a magic number: foreach (Vector3D normal in normals)  			{  				// Get two vectors perpendicular to the face normal and to each other.  				Vector3D side1 = new Vector3D(normal.Y' normal.Z' normal.X);  				Vector3D side2 = Vector3D.Cross(normal' side1);    				// Six indices (two triangles) per face.  				AddIndex(CurrentVertex + 0);  				AddIndex(CurrentVertex + 1);  				AddIndex(CurrentVertex + 2);    				AddIndex(CurrentVertex + 0);  				AddIndex(CurrentVertex + 2);  				AddIndex(CurrentVertex + 3);    				// Four vertices per face.  				AddVertex((Point3D)((normal - side1 - side2) * _size / 2)' normal);  				AddVertex((Point3D)((normal - side1 + side2) * _size / 2)' normal);  				AddVertex((Point3D)((normal + side1 + side2) * _size / 2)' normal);  				AddVertex((Point3D)((normal + side1 - side2) * _size / 2)' normal);  			}
Magic Number,Meshellator.Primitives,CubeTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\CubeTessellator.cs,Tessellate,The following statement contains a magic number: foreach (Vector3D normal in normals)  			{  				// Get two vectors perpendicular to the face normal and to each other.  				Vector3D side1 = new Vector3D(normal.Y' normal.Z' normal.X);  				Vector3D side2 = Vector3D.Cross(normal' side1);    				// Six indices (two triangles) per face.  				AddIndex(CurrentVertex + 0);  				AddIndex(CurrentVertex + 1);  				AddIndex(CurrentVertex + 2);    				AddIndex(CurrentVertex + 0);  				AddIndex(CurrentVertex + 2);  				AddIndex(CurrentVertex + 3);    				// Four vertices per face.  				AddVertex((Point3D)((normal - side1 - side2) * _size / 2)' normal);  				AddVertex((Point3D)((normal - side1 + side2) * _size / 2)' normal);  				AddVertex((Point3D)((normal + side1 + side2) * _size / 2)' normal);  				AddVertex((Point3D)((normal + side1 - side2) * _size / 2)' normal);  			}
Magic Number,Meshellator.Primitives,CubeTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\CubeTessellator.cs,Tessellate,The following statement contains a magic number: foreach (Vector3D normal in normals)  			{  				// Get two vectors perpendicular to the face normal and to each other.  				Vector3D side1 = new Vector3D(normal.Y' normal.Z' normal.X);  				Vector3D side2 = Vector3D.Cross(normal' side1);    				// Six indices (two triangles) per face.  				AddIndex(CurrentVertex + 0);  				AddIndex(CurrentVertex + 1);  				AddIndex(CurrentVertex + 2);    				AddIndex(CurrentVertex + 0);  				AddIndex(CurrentVertex + 2);  				AddIndex(CurrentVertex + 3);    				// Four vertices per face.  				AddVertex((Point3D)((normal - side1 - side2) * _size / 2)' normal);  				AddVertex((Point3D)((normal - side1 + side2) * _size / 2)' normal);  				AddVertex((Point3D)((normal + side1 + side2) * _size / 2)' normal);  				AddVertex((Point3D)((normal + side1 - side2) * _size / 2)' normal);  			}
Magic Number,Meshellator.Primitives,CubeTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\CubeTessellator.cs,Tessellate,The following statement contains a magic number: foreach (Vector3D normal in normals)  			{  				// Get two vectors perpendicular to the face normal and to each other.  				Vector3D side1 = new Vector3D(normal.Y' normal.Z' normal.X);  				Vector3D side2 = Vector3D.Cross(normal' side1);    				// Six indices (two triangles) per face.  				AddIndex(CurrentVertex + 0);  				AddIndex(CurrentVertex + 1);  				AddIndex(CurrentVertex + 2);    				AddIndex(CurrentVertex + 0);  				AddIndex(CurrentVertex + 2);  				AddIndex(CurrentVertex + 3);    				// Four vertices per face.  				AddVertex((Point3D)((normal - side1 - side2) * _size / 2)' normal);  				AddVertex((Point3D)((normal - side1 + side2) * _size / 2)' normal);  				AddVertex((Point3D)((normal + side1 + side2) * _size / 2)' normal);  				AddVertex((Point3D)((normal + side1 - side2) * _size / 2)' normal);  			}
Magic Number,Meshellator.Primitives,CubeTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\CubeTessellator.cs,Tessellate,The following statement contains a magic number: foreach (Vector3D normal in normals)  			{  				// Get two vectors perpendicular to the face normal and to each other.  				Vector3D side1 = new Vector3D(normal.Y' normal.Z' normal.X);  				Vector3D side2 = Vector3D.Cross(normal' side1);    				// Six indices (two triangles) per face.  				AddIndex(CurrentVertex + 0);  				AddIndex(CurrentVertex + 1);  				AddIndex(CurrentVertex + 2);    				AddIndex(CurrentVertex + 0);  				AddIndex(CurrentVertex + 2);  				AddIndex(CurrentVertex + 3);    				// Four vertices per face.  				AddVertex((Point3D)((normal - side1 - side2) * _size / 2)' normal);  				AddVertex((Point3D)((normal - side1 + side2) * _size / 2)' normal);  				AddVertex((Point3D)((normal + side1 + side2) * _size / 2)' normal);  				AddVertex((Point3D)((normal + side1 - side2) * _size / 2)' normal);  			}
Magic Number,Meshellator.Primitives,TorusTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TorusTessellator.cs,TorusTessellator,The following statement contains a magic number: if (tessellationLevel < 3)  				throw new ArgumentOutOfRangeException("tessellationLevel");
Magic Number,Meshellator.Primitives,TorusTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TorusTessellator.cs,Tessellate,The following statement contains a magic number: for (int i = 0; i < TessellationLevel; i++)  			{  				float outerAngle = i * MathUtility.TWO_PI / TessellationLevel;    				// Create a transform matrix that will align geometry to  				// slice perpendicularly though the current ring position.  				Matrix3D transform = Matrix3D.CreateTranslation(_radius' 0' 0) *  													 Matrix3D.CreateRotationY(outerAngle);    				// Now we loop along the other axis' around the side of the tube.  				for (int j = 0; j < TessellationLevel; j++)  				{  					float innerAngle = j * MathUtility.TWO_PI / TessellationLevel;    					float dx = (float)Math.Cos(innerAngle);  					float dy = (float)Math.Sin(innerAngle);    					// Create a vertex.  					Vector3D normal = new Vector3D(dx' dy' 0);  					Point3D position = (Point3D)(normal * _thickness / 2);    					position = Point3D.Transform(position' transform);  					normal = Vector3D.TransformNormal(normal' transform);    					AddVertex(position' normal);    					// And create indices for two triangles.  					int nextI = (i + 1) % TessellationLevel;  					int nextJ = (j + 1) % TessellationLevel;    					AddIndex(i * TessellationLevel + j);  					AddIndex(i * TessellationLevel + nextJ);  					AddIndex(nextI * TessellationLevel + j);    					AddIndex(i * TessellationLevel + nextJ);  					AddIndex(nextI * TessellationLevel + nextJ);  					AddIndex(nextI * TessellationLevel + j);  				}  			}
Magic Number,Meshellator.Primitives,CylinderTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\CylinderTessellator.cs,CylinderTessellator,The following statement contains a magic number: if (tessellationLevel < 3)  				throw new ArgumentOutOfRangeException("tessellationLevel");
Magic Number,Meshellator.Primitives,CylinderTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\CylinderTessellator.cs,CylinderTessellator,The following statement contains a magic number: _height = height / 2;
Magic Number,Meshellator.Primitives,CylinderTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\CylinderTessellator.cs,Tessellate,The following statement contains a magic number: for (int i = 0; i < TessellationLevel; i++)  			{  				Vector3D normal = GetCircleVector(i);    				AddVertex((Point3D)(normal * _radius + Vector3D.Up * _height)' normal);  				AddVertex((Point3D)(normal * _radius + Vector3D.Down * _height)' normal);    				AddIndex(i * 2);  				AddIndex(i * 2 + 1);  				AddIndex((i * 2 + 2) % (TessellationLevel * 2));    				AddIndex(i * 2 + 1);  				AddIndex((i * 2 + 3) % (TessellationLevel * 2));  				AddIndex((i * 2 + 2) % (TessellationLevel * 2));  			}
Magic Number,Meshellator.Primitives,CylinderTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\CylinderTessellator.cs,Tessellate,The following statement contains a magic number: for (int i = 0; i < TessellationLevel; i++)  			{  				Vector3D normal = GetCircleVector(i);    				AddVertex((Point3D)(normal * _radius + Vector3D.Up * _height)' normal);  				AddVertex((Point3D)(normal * _radius + Vector3D.Down * _height)' normal);    				AddIndex(i * 2);  				AddIndex(i * 2 + 1);  				AddIndex((i * 2 + 2) % (TessellationLevel * 2));    				AddIndex(i * 2 + 1);  				AddIndex((i * 2 + 3) % (TessellationLevel * 2));  				AddIndex((i * 2 + 2) % (TessellationLevel * 2));  			}
Magic Number,Meshellator.Primitives,CylinderTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\CylinderTessellator.cs,Tessellate,The following statement contains a magic number: for (int i = 0; i < TessellationLevel; i++)  			{  				Vector3D normal = GetCircleVector(i);    				AddVertex((Point3D)(normal * _radius + Vector3D.Up * _height)' normal);  				AddVertex((Point3D)(normal * _radius + Vector3D.Down * _height)' normal);    				AddIndex(i * 2);  				AddIndex(i * 2 + 1);  				AddIndex((i * 2 + 2) % (TessellationLevel * 2));    				AddIndex(i * 2 + 1);  				AddIndex((i * 2 + 3) % (TessellationLevel * 2));  				AddIndex((i * 2 + 2) % (TessellationLevel * 2));  			}
Magic Number,Meshellator.Primitives,CylinderTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\CylinderTessellator.cs,Tessellate,The following statement contains a magic number: for (int i = 0; i < TessellationLevel; i++)  			{  				Vector3D normal = GetCircleVector(i);    				AddVertex((Point3D)(normal * _radius + Vector3D.Up * _height)' normal);  				AddVertex((Point3D)(normal * _radius + Vector3D.Down * _height)' normal);    				AddIndex(i * 2);  				AddIndex(i * 2 + 1);  				AddIndex((i * 2 + 2) % (TessellationLevel * 2));    				AddIndex(i * 2 + 1);  				AddIndex((i * 2 + 3) % (TessellationLevel * 2));  				AddIndex((i * 2 + 2) % (TessellationLevel * 2));  			}
Magic Number,Meshellator.Primitives,CylinderTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\CylinderTessellator.cs,Tessellate,The following statement contains a magic number: for (int i = 0; i < TessellationLevel; i++)  			{  				Vector3D normal = GetCircleVector(i);    				AddVertex((Point3D)(normal * _radius + Vector3D.Up * _height)' normal);  				AddVertex((Point3D)(normal * _radius + Vector3D.Down * _height)' normal);    				AddIndex(i * 2);  				AddIndex(i * 2 + 1);  				AddIndex((i * 2 + 2) % (TessellationLevel * 2));    				AddIndex(i * 2 + 1);  				AddIndex((i * 2 + 3) % (TessellationLevel * 2));  				AddIndex((i * 2 + 2) % (TessellationLevel * 2));  			}
Magic Number,Meshellator.Primitives,CylinderTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\CylinderTessellator.cs,Tessellate,The following statement contains a magic number: for (int i = 0; i < TessellationLevel; i++)  			{  				Vector3D normal = GetCircleVector(i);    				AddVertex((Point3D)(normal * _radius + Vector3D.Up * _height)' normal);  				AddVertex((Point3D)(normal * _radius + Vector3D.Down * _height)' normal);    				AddIndex(i * 2);  				AddIndex(i * 2 + 1);  				AddIndex((i * 2 + 2) % (TessellationLevel * 2));    				AddIndex(i * 2 + 1);  				AddIndex((i * 2 + 3) % (TessellationLevel * 2));  				AddIndex((i * 2 + 2) % (TessellationLevel * 2));  			}
Magic Number,Meshellator.Primitives,CylinderTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\CylinderTessellator.cs,Tessellate,The following statement contains a magic number: for (int i = 0; i < TessellationLevel; i++)  			{  				Vector3D normal = GetCircleVector(i);    				AddVertex((Point3D)(normal * _radius + Vector3D.Up * _height)' normal);  				AddVertex((Point3D)(normal * _radius + Vector3D.Down * _height)' normal);    				AddIndex(i * 2);  				AddIndex(i * 2 + 1);  				AddIndex((i * 2 + 2) % (TessellationLevel * 2));    				AddIndex(i * 2 + 1);  				AddIndex((i * 2 + 3) % (TessellationLevel * 2));  				AddIndex((i * 2 + 2) % (TessellationLevel * 2));  			}
Magic Number,Meshellator.Primitives,CylinderTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\CylinderTessellator.cs,Tessellate,The following statement contains a magic number: for (int i = 0; i < TessellationLevel; i++)  			{  				Vector3D normal = GetCircleVector(i);    				AddVertex((Point3D)(normal * _radius + Vector3D.Up * _height)' normal);  				AddVertex((Point3D)(normal * _radius + Vector3D.Down * _height)' normal);    				AddIndex(i * 2);  				AddIndex(i * 2 + 1);  				AddIndex((i * 2 + 2) % (TessellationLevel * 2));    				AddIndex(i * 2 + 1);  				AddIndex((i * 2 + 3) % (TessellationLevel * 2));  				AddIndex((i * 2 + 2) % (TessellationLevel * 2));  			}
Magic Number,Meshellator.Primitives,CylinderTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\CylinderTessellator.cs,Tessellate,The following statement contains a magic number: for (int i = 0; i < TessellationLevel; i++)  			{  				Vector3D normal = GetCircleVector(i);    				AddVertex((Point3D)(normal * _radius + Vector3D.Up * _height)' normal);  				AddVertex((Point3D)(normal * _radius + Vector3D.Down * _height)' normal);    				AddIndex(i * 2);  				AddIndex(i * 2 + 1);  				AddIndex((i * 2 + 2) % (TessellationLevel * 2));    				AddIndex(i * 2 + 1);  				AddIndex((i * 2 + 3) % (TessellationLevel * 2));  				AddIndex((i * 2 + 2) % (TessellationLevel * 2));  			}
Magic Number,Meshellator.Primitives,CylinderTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\CylinderTessellator.cs,Tessellate,The following statement contains a magic number: for (int i = 0; i < TessellationLevel; i++)  			{  				Vector3D normal = GetCircleVector(i);    				AddVertex((Point3D)(normal * _radius + Vector3D.Up * _height)' normal);  				AddVertex((Point3D)(normal * _radius + Vector3D.Down * _height)' normal);    				AddIndex(i * 2);  				AddIndex(i * 2 + 1);  				AddIndex((i * 2 + 2) % (TessellationLevel * 2));    				AddIndex(i * 2 + 1);  				AddIndex((i * 2 + 3) % (TessellationLevel * 2));  				AddIndex((i * 2 + 2) % (TessellationLevel * 2));  			}
Magic Number,Meshellator.Primitives,CylinderTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\CylinderTessellator.cs,Tessellate,The following statement contains a magic number: for (int i = 0; i < TessellationLevel; i++)  			{  				Vector3D normal = GetCircleVector(i);    				AddVertex((Point3D)(normal * _radius + Vector3D.Up * _height)' normal);  				AddVertex((Point3D)(normal * _radius + Vector3D.Down * _height)' normal);    				AddIndex(i * 2);  				AddIndex(i * 2 + 1);  				AddIndex((i * 2 + 2) % (TessellationLevel * 2));    				AddIndex(i * 2 + 1);  				AddIndex((i * 2 + 3) % (TessellationLevel * 2));  				AddIndex((i * 2 + 2) % (TessellationLevel * 2));  			}
Magic Number,Meshellator.Primitives,CylinderTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\CylinderTessellator.cs,Tessellate,The following statement contains a magic number: for (int i = 0; i < TessellationLevel; i++)  			{  				Vector3D normal = GetCircleVector(i);    				AddVertex((Point3D)(normal * _radius + Vector3D.Up * _height)' normal);  				AddVertex((Point3D)(normal * _radius + Vector3D.Down * _height)' normal);    				AddIndex(i * 2);  				AddIndex(i * 2 + 1);  				AddIndex((i * 2 + 2) % (TessellationLevel * 2));    				AddIndex(i * 2 + 1);  				AddIndex((i * 2 + 3) % (TessellationLevel * 2));  				AddIndex((i * 2 + 2) % (TessellationLevel * 2));  			}
Magic Number,Meshellator.Primitives,CylinderTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\CylinderTessellator.cs,CreateCap,The following statement contains a magic number: for (int i = 0; i < TessellationLevel - 2; i++)  			{  				if (normal.Y > 0)  				{  					AddIndex(CurrentVertex);  					AddIndex(CurrentVertex + (i + 1) % TessellationLevel);  					AddIndex(CurrentVertex + (i + 2) % TessellationLevel);  				}  				else  				{  					AddIndex(CurrentVertex);  					AddIndex(CurrentVertex + (i + 2) % TessellationLevel);  					AddIndex(CurrentVertex + (i + 1) % TessellationLevel);  				}  			}
Magic Number,Meshellator.Primitives,CylinderTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\CylinderTessellator.cs,CreateCap,The following statement contains a magic number: for (int i = 0; i < TessellationLevel - 2; i++)  			{  				if (normal.Y > 0)  				{  					AddIndex(CurrentVertex);  					AddIndex(CurrentVertex + (i + 1) % TessellationLevel);  					AddIndex(CurrentVertex + (i + 2) % TessellationLevel);  				}  				else  				{  					AddIndex(CurrentVertex);  					AddIndex(CurrentVertex + (i + 2) % TessellationLevel);  					AddIndex(CurrentVertex + (i + 1) % TessellationLevel);  				}  			}
Magic Number,Meshellator.Primitives,CylinderTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\CylinderTessellator.cs,CreateCap,The following statement contains a magic number: for (int i = 0; i < TessellationLevel - 2; i++)  			{  				if (normal.Y > 0)  				{  					AddIndex(CurrentVertex);  					AddIndex(CurrentVertex + (i + 1) % TessellationLevel);  					AddIndex(CurrentVertex + (i + 2) % TessellationLevel);  				}  				else  				{  					AddIndex(CurrentVertex);  					AddIndex(CurrentVertex + (i + 2) % TessellationLevel);  					AddIndex(CurrentVertex + (i + 1) % TessellationLevel);  				}  			}
Magic Number,Meshellator.Primitives,SphereTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\SphereTessellator.cs,SphereTessellator,The following statement contains a magic number: if (tessellationLevel < 3)  				throw new ArgumentOutOfRangeException("tessellationLevel");
Magic Number,Meshellator.Primitives,SphereTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\SphereTessellator.cs,Tessellate,The following statement contains a magic number: int horizontalSegments = TessellationLevel * 2;
Magic Number,Meshellator.Primitives,SphereTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\SphereTessellator.cs,Tessellate,The following statement contains a magic number: for (int i = 0; i < verticalSegments - 2; i++)  			{  				for (int j = 0; j < horizontalSegments; j++)  				{  					int nextI = i + 1;  					int nextJ = (j + 1) % horizontalSegments;    					AddIndex(1 + i * horizontalSegments + j);  					AddIndex(1 + i * horizontalSegments + nextJ);  					AddIndex(1 + nextI * horizontalSegments + j);    					AddIndex(1 + i * horizontalSegments + nextJ);  					AddIndex(1 + nextI * horizontalSegments + nextJ);  					AddIndex(1 + nextI * horizontalSegments + j);  				}  			}
Magic Number,Meshellator.Primitives,SphereTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\SphereTessellator.cs,Tessellate,The following statement contains a magic number: for (int i = 0; i < horizontalSegments; i++)  			{  				AddIndex(CurrentVertex - 1);  				AddIndex(CurrentVertex - 2 - (i + 1) % horizontalSegments);  				AddIndex(CurrentVertex - 2 - i);  			}
Magic Number,Meshellator.Primitives,SphereTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\SphereTessellator.cs,Tessellate,The following statement contains a magic number: for (int i = 0; i < horizontalSegments; i++)  			{  				AddIndex(CurrentVertex - 1);  				AddIndex(CurrentVertex - 2 - (i + 1) % horizontalSegments);  				AddIndex(CurrentVertex - 2 - i);  			}
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,TeapotTessellator,The following statement contains a magic number: if (tessellationLevel < 3)  				throw new ArgumentOutOfRangeException("tessellationLevel");
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,GetPatches,The following statement contains a magic number: return new[]  			{  				// Rim.  				new BezierPatch(true' new int[]  				{  					102' 103' 104' 105' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15  				})'    				// Body.  				new BezierPatch(true' new int[]  				{  					12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27  				})'    				new BezierPatch(true' new int[]  				{  					24' 25' 26' 27' 29' 30' 31' 32' 33' 34' 35' 36' 37' 38' 39' 40  				})'    				// Lid.  				new BezierPatch(true' new int[]  				{  					96' 96' 96' 96' 97' 98' 99' 100' 101' 101' 101' 101' 0' 1' 2' 3  				})'    				new BezierPatch(true' new int[]  				{  					0' 1' 2' 3' 106' 107' 108' 109' 110' 111' 112' 113' 114' 115' 116' 117  				})'    				// Handle.  				new BezierPatch(false' new int[]  				{  					41' 42' 43' 44' 45' 46' 47' 48' 49' 50' 51' 52' 53' 54' 55' 56  				})'    				new BezierPatch(false' new int[]  				{  					53' 54' 55' 56' 57' 58' 59' 60' 61' 62' 63' 64' 28' 65' 66' 67  				})'    				// Spout.  				new BezierPatch(false' new int[]  				{  					68' 69' 70' 71' 72' 73' 74' 75' 76' 77' 78' 79' 80' 81' 82' 83  				})'    				new BezierPatch(false' new int[]  				{  					80' 81' 82' 83' 84' 85' 86' 87' 88' 89' 90' 91' 92' 93' 94' 95  				})'    				// Bottom.  				new BezierPatch(true' new int[]  				{  					118' 118' 118' 118' 124' 122' 119' 121'  					123' 126' 125' 120' 40' 39' 38' 37  				})'  			};
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,TessellatePatch,The following statement contains a magic number: Point3D[] controlPoints = new Point3D[16];
Magic Number,Meshellator.Primitives,TeapotTessellator,C:\repos\tgjones_meshellator\src\Meshellator\Primitives\TeapotTessellator.cs,TessellatePatch,The following statement contains a magic number: for (int i = 0; i < 16; i++)  			{  				int index = patch.Indices[i];  				controlPoints[i] = ControlPoints[index] * scale;  			}
Missing Default,Meshellator.Importers.Ply,PlyImporter,C:\repos\tgjones_meshellator\src\Meshellator\Importers\Ply\PlyImporter.cs,ImportFile,The following switch statement is missing a default case: switch (element.Name)  				{  					case "vertex" :  						int xIndex = element.Properties.IndexOf(element.Properties.SingleOrDefault(p => p.Name == "x"));  						int yIndex = element.Properties.IndexOf(element.Properties.SingleOrDefault(p => p.Name == "y"));  						int zIndex = element.Properties.IndexOf(element.Properties.SingleOrDefault(p => p.Name == "z"));  						int nxIndex = element.Properties.IndexOf(element.Properties.SingleOrDefault(p => p.Name == "nx"));  						int nyIndex = element.Properties.IndexOf(element.Properties.SingleOrDefault(p => p.Name == "ny"));  						int nzIndex = element.Properties.IndexOf(element.Properties.SingleOrDefault(p => p.Name == "nz"));  						int sIndex = element.Properties.IndexOf(element.Properties.SingleOrDefault(p => p.Name == "s"));  						int tIndex = element.Properties.IndexOf(element.Properties.SingleOrDefault(p => p.Name == "t"));  						foreach (var elementValue in element.ElementValues)  						{  							if (xIndex != -1 && yIndex != -1 && zIndex != -1)  								mesh.Positions.Add(new Point3D(  									(float) elementValue.PropertyValues[xIndex]'  									(float) elementValue.PropertyValues[yIndex]'  									(float) elementValue.PropertyValues[zIndex]));    							if (nxIndex != -1 && nyIndex != -1 && nzIndex != -1)  								mesh.Normals.Add(new Vector3D(  									(float) elementValue.PropertyValues[nxIndex]'  									(float) elementValue.PropertyValues[nyIndex]'  									(float) elementValue.PropertyValues[nzIndex]));    							if (sIndex != -1 && tIndex != -1)  								mesh.TextureCoordinates.Add(new Point3D(  									(float)elementValue.PropertyValues[sIndex]'  									(float)elementValue.PropertyValues[tIndex]'  									0));  						}  						break;  					case "face" :  						foreach (var elementValue in element.ElementValues)  						{  							if (elementValue.PropertyValues.Count != 3)  								throw new Exception("Only triangle faces are currently supported");    							mesh.Indices.Add(Convert.ToInt32(elementValue.PropertyValues[0]));  							mesh.Indices.Add(Convert.ToInt32(elementValue.PropertyValues[1]));  							mesh.Indices.Add(Convert.ToInt32(elementValue.PropertyValues[2]));  						}  						break;  				}
