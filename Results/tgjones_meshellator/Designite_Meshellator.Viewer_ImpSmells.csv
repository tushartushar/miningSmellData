Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Meshellator.Viewer.Framework.Rendering,ModelMesh,D:\newReposJune17\tgjones_meshellator\src\Meshellator.Viewer\Framework\Rendering\ModelMesh.cs,ModelMesh,The method has 8 parameters.
Long Parameter List,Meshellator.Viewer.Framework.Rendering,Renderer,D:\newReposJune17\tgjones_meshellator\src\Meshellator.Viewer\Framework\Rendering\Renderer.cs,Renderer,The method has 5 parameters.
Long Parameter List,Meshellator.Viewer.Framework.Rendering.Decorators,BlurComponent,D:\newReposJune17\tgjones_meshellator\src\Meshellator.Viewer\Framework\Rendering\Decorators\BlurComponent.cs,SetBlurEffectParameters,The method has 4 parameters.
Long Statement,Meshellator.Viewer.Framework.Rendering,ModelConverter,D:\newReposJune17\tgjones_meshellator\src\Meshellator.Viewer\Framework\Rendering\ModelConverter.cs,FromScene,The length of the statement  "		VertexBuffer vertexBuffer = new VertexBuffer (device' mesh.Positions.Count * VertexPositionNormalTexture.SizeInBytes' Usage.WriteOnly' VertexFormat.None' Pool.Default); " is 168.
Long Statement,Meshellator.Viewer.Framework.Rendering,ModelConverter,D:\newReposJune17\tgjones_meshellator\src\Meshellator.Viewer\Framework\Rendering\ModelConverter.cs,FromScene,The length of the statement  "		DataStream vertexDataStream = vertexBuffer.Lock (0' mesh.Positions.Count * VertexPositionNormalTexture.SizeInBytes' LockFlags.None); " is 132.
Long Statement,Meshellator.Viewer.Framework.Rendering,ModelConverter,D:\newReposJune17\tgjones_meshellator\src\Meshellator.Viewer\Framework\Rendering\ModelConverter.cs,FromScene,The length of the statement  "			vertices [i] = new VertexPositionNormalTexture (mesh.Positions [i]' (mesh.Normals.Count > i) ? mesh.Normals [i] : Vector3D.Zero' (mesh.TextureCoordinates.Count > i) ? mesh.TextureCoordinates [i].Xy : Point2D.Zero); " is 214.
Long Statement,Meshellator.Viewer.Framework.Rendering,ModelConverter,D:\newReposJune17\tgjones_meshellator\src\Meshellator.Viewer\Framework\Rendering\ModelConverter.cs,FromScene,The length of the statement  "		IndexBuffer indexBuffer = new IndexBuffer (device' mesh.Indices.Count * sizeof(int)' Usage.WriteOnly' Pool.Default' false); " is 123.
Long Statement,Meshellator.Viewer.Framework.Rendering,ModelConverter,D:\newReposJune17\tgjones_meshellator\src\Meshellator.Viewer\Framework\Rendering\ModelConverter.cs,FromScene,The length of the statement  "		ModelMesh modelMesh = new ModelMesh (mesh' device' vertexBuffer' mesh.Positions.Count' indexBuffer' mesh.PrimitiveCount' Matrix3D.Identity' mesh.Material); " is 155.
Long Statement,Meshellator.Viewer.Framework.Rendering.Decorators,BlurComponent,D:\newReposJune17\tgjones_meshellator\src\Meshellator.Viewer\Framework\Rendering\Decorators\BlurComponent.cs,DrawFullscreenQuad,The length of the statement  "			vertices[0] = new VertexTransformedPositionTexture(new Point4D(dest.Left - 0.5f' dest.Top - 0.5f' 0' 1)' new Point2D(0' 0));" is 124.
Long Statement,Meshellator.Viewer.Framework.Rendering.Decorators,BlurComponent,D:\newReposJune17\tgjones_meshellator\src\Meshellator.Viewer\Framework\Rendering\Decorators\BlurComponent.cs,DrawFullscreenQuad,The length of the statement  "			vertices[1] = new VertexTransformedPositionTexture(new Point4D(dest.Right - 0.5f' dest.Top - 0.5f' 0' 1)' new Point2D(1' 0));" is 125.
Long Statement,Meshellator.Viewer.Framework.Rendering.Decorators,BlurComponent,D:\newReposJune17\tgjones_meshellator\src\Meshellator.Viewer\Framework\Rendering\Decorators\BlurComponent.cs,DrawFullscreenQuad,The length of the statement  "			vertices[2] = new VertexTransformedPositionTexture(new Point4D(dest.Right - 0.5f' dest.Bottom - 0.5f' 0' 1)' new Point2D(0' 1));" is 128.
Long Statement,Meshellator.Viewer.Framework.Rendering.Decorators,BlurComponent,D:\newReposJune17\tgjones_meshellator\src\Meshellator.Viewer\Framework\Rendering\Decorators\BlurComponent.cs,DrawFullscreenQuad,The length of the statement  "			vertices[3] = new VertexTransformedPositionTexture(new Point4D(dest.Right - 0.5f' dest.Bottom - 0.5f' 0' 1)' new Point2D(1' 1));" is 128.
Long Statement,Meshellator.Viewer.Framework.Rendering.Decorators,NormalsDecorator,D:\newReposJune17\tgjones_meshellator\src\Meshellator.Viewer\Framework\Rendering\Decorators\NormalsDecorator.cs,GetNormalBuffers,The length of the statement  "		VertexBuffer vertexBuffer = new VertexBuffer (_device' normalBuffers.VertexCount * VertexPositionColor.SizeInBytes' Usage.WriteOnly' VertexFormat.None' Pool.Default); " is 166.
Long Statement,Meshellator.Viewer.Framework.Rendering.Decorators,NormalsDecorator,D:\newReposJune17\tgjones_meshellator\src\Meshellator.Viewer\Framework\Rendering\Decorators\NormalsDecorator.cs,GetNormalBuffers,The length of the statement  "		DataStream vertexDataStream = vertexBuffer.Lock (0' normalBuffers.VertexCount * VertexPositionColor.SizeInBytes' LockFlags.None); " is 129.
Long Statement,Meshellator.Viewer.Framework.Rendering.Decorators,NormalsDecorator,D:\newReposJune17\tgjones_meshellator\src\Meshellator.Viewer\Framework\Rendering\Decorators\NormalsDecorator.cs,GetNormalBuffers,The length of the statement  "		IndexBuffer indexBuffer = new IndexBuffer (_device' normalBuffers.VertexCount * sizeof(int)' Usage.WriteOnly' Pool.Default' false); " is 131.
Long Statement,Meshellator.Viewer.Framework.Rendering.Decorators,NormalsDecorator,D:\newReposJune17\tgjones_meshellator\src\Meshellator.Viewer\Framework\Rendering\Decorators\NormalsDecorator.cs,OnEndDrawMesh,The length of the statement  "		_device.DrawIndexedPrimitive (PrimitiveType.LineList' 0' 0' normalBuffers.VertexCount' 0' normalBuffers.PrimitiveCount); " is 120.
Long Statement,Meshellator.Viewer.Modules.ModelEditor,EditorProvider,D:\newReposJune17\tgjones_meshellator\src\Meshellator.Viewer\Modules\ModelEditor\EditorProvider.cs,Create,The length of the statement  "	return new ModelEditorViewModel (new SceneViewModel (MeshellatorLoader.ImportFromFile (path))' Path.GetFileName (path)); " is 120.
Long Statement,Meshellator.Viewer.Modules.ModelEditor.Views,ModelEditorView,D:\newReposJune17\tgjones_meshellator\src\Meshellator.Viewer\Modules\ModelEditor\Views\ModelEditorView.xaml.cs,OnLoaded,The length of the statement  "	_renderer = new Renderer (_graphicsDeviceService.Device' GetModel ()' _graphicsDeviceService.Device.Viewport.Width' _graphicsDeviceService.Device.Viewport.Height' _trackball.Transform); " is 185.
Long Statement,Meshellator.Viewer.Modules.ModelExplorer,Module,D:\newReposJune17\tgjones_meshellator\src\Meshellator.Viewer\Modules\ModelExplorer\Module.cs,OnShellActiveDocumentChanged,The length of the statement  "	SceneViewModel scene = (Shell.ActiveItem is ModelEditorViewModel) ? ((ModelEditorViewModel)Shell.ActiveItem).Scene : null; " is 122.
Long Statement,Meshellator.Viewer.Modules.Startup,Module,D:\newReposJune17\tgjones_meshellator\src\Meshellator.Viewer\Modules\Startup\Module.cs,Initialize,The length of the statement  "	rendererMenu.Add (new CheckableMenuItem ("Wireframe"' ToggleFillModeWireframe)' MenuItemBase.Separator' new CheckableMenuItem ("Show Normals"' ToggleNormals' ChangeRenderStateCanExecute)' new CheckableMenuItem ("Show Shadows"' ToggleShadows' ChangeRenderStateCanExecute) { " is 272.
Long Statement,Meshellator.Viewer.Modules.Startup,Module,D:\newReposJune17\tgjones_meshellator\src\Meshellator.Viewer\Modules\Startup\Module.cs,NewSphere,The length of the statement  "	yield return Show.Document (new ModelEditorViewModel (new SceneViewModel (MeshellatorLoader.CreateFromSphere (10' 10))' "[New Sphere]")); " is 137.
Long Statement,Meshellator.Viewer.Modules.Startup,Module,D:\newReposJune17\tgjones_meshellator\src\Meshellator.Viewer\Modules\Startup\Module.cs,NewTeapot,The length of the statement  "	yield return Show.Document (new ModelEditorViewModel (new SceneViewModel (MeshellatorLoader.CreateFromTeapot (10' 10))' "[New Teapot]")); " is 137.
Long Statement,Meshellator.Viewer.Modules.Startup,Module,D:\newReposJune17\tgjones_meshellator\src\Meshellator.Viewer\Modules\Startup\Module.cs,ToggleFillModeWireframe,The length of the statement  "	yield return new RenderSettingsResult (e => e.RenderParameters.FillMode = (isChecked) ? FillMode.Wireframe : FillMode.Solid); " is 125.
Magic Number,Meshellator.Viewer.Framework.Rendering,Renderer,D:\newReposJune17\tgjones_meshellator\src\Meshellator.Viewer\Framework\Rendering\Renderer.cs,Renderer,The following statement contains a magic number: _projection = Matrix3D.CreatePerspectiveFieldOfView (fov' width / (float)height' 1.0f' radius * 10);  
Magic Number,Meshellator.Viewer.Framework.Rendering.Decorators,BlurComponent,D:\newReposJune17\tgjones_meshellator\src\Meshellator.Viewer\Framework\Rendering\Decorators\BlurComponent.cs,SetBlurEffectParameters,The following statement contains a magic number: for (int i = 0; i < SampleCount / 2; i++) {  	// Store weights for the positive and negative taps.  	float weight = ComputeGaussian (i + 1);  	weights [i * 2 + 1] = weight;  	weights [i * 2 + 2] = weight;  	totalWeights += weight * 2;  	// To get the maximum amount of blurring from a limited number of  	// pixel shader samples' we take advantage of the bilinear filtering  	// hardware inside the texture fetch unit. If we position our texture  	// coordinates exactly halfway between two texels' the filtering unit  	// will average them for us' giving two samples for the price of one.  	// This allows us to step in units of two texels per sample' rather  	// than just one at a time. The 1.5 offset kicks things off by  	// positioning us nicely in between two texels.  	float sampleOffset = i * 2 + 1.5f;  	Vector4D delta = new Vector4D (dx' dy' 1.0f' 1.0f) * sampleOffset;  	// Store texture coordinate offsets for the positive and negative taps.  	offsets [i * 2 + 1] = delta;  	offsets [i * 2 + 2] = -delta;  }  
Magic Number,Meshellator.Viewer.Framework.Rendering.Decorators,BlurComponent,D:\newReposJune17\tgjones_meshellator\src\Meshellator.Viewer\Framework\Rendering\Decorators\BlurComponent.cs,SetBlurEffectParameters,The following statement contains a magic number: for (int i = 0; i < SampleCount / 2; i++) {  	// Store weights for the positive and negative taps.  	float weight = ComputeGaussian (i + 1);  	weights [i * 2 + 1] = weight;  	weights [i * 2 + 2] = weight;  	totalWeights += weight * 2;  	// To get the maximum amount of blurring from a limited number of  	// pixel shader samples' we take advantage of the bilinear filtering  	// hardware inside the texture fetch unit. If we position our texture  	// coordinates exactly halfway between two texels' the filtering unit  	// will average them for us' giving two samples for the price of one.  	// This allows us to step in units of two texels per sample' rather  	// than just one at a time. The 1.5 offset kicks things off by  	// positioning us nicely in between two texels.  	float sampleOffset = i * 2 + 1.5f;  	Vector4D delta = new Vector4D (dx' dy' 1.0f' 1.0f) * sampleOffset;  	// Store texture coordinate offsets for the positive and negative taps.  	offsets [i * 2 + 1] = delta;  	offsets [i * 2 + 2] = -delta;  }  
Magic Number,Meshellator.Viewer.Framework.Rendering.Decorators,BlurComponent,D:\newReposJune17\tgjones_meshellator\src\Meshellator.Viewer\Framework\Rendering\Decorators\BlurComponent.cs,SetBlurEffectParameters,The following statement contains a magic number: for (int i = 0; i < SampleCount / 2; i++) {  	// Store weights for the positive and negative taps.  	float weight = ComputeGaussian (i + 1);  	weights [i * 2 + 1] = weight;  	weights [i * 2 + 2] = weight;  	totalWeights += weight * 2;  	// To get the maximum amount of blurring from a limited number of  	// pixel shader samples' we take advantage of the bilinear filtering  	// hardware inside the texture fetch unit. If we position our texture  	// coordinates exactly halfway between two texels' the filtering unit  	// will average them for us' giving two samples for the price of one.  	// This allows us to step in units of two texels per sample' rather  	// than just one at a time. The 1.5 offset kicks things off by  	// positioning us nicely in between two texels.  	float sampleOffset = i * 2 + 1.5f;  	Vector4D delta = new Vector4D (dx' dy' 1.0f' 1.0f) * sampleOffset;  	// Store texture coordinate offsets for the positive and negative taps.  	offsets [i * 2 + 1] = delta;  	offsets [i * 2 + 2] = -delta;  }  
Magic Number,Meshellator.Viewer.Framework.Rendering.Decorators,BlurComponent,D:\newReposJune17\tgjones_meshellator\src\Meshellator.Viewer\Framework\Rendering\Decorators\BlurComponent.cs,SetBlurEffectParameters,The following statement contains a magic number: for (int i = 0; i < SampleCount / 2; i++) {  	// Store weights for the positive and negative taps.  	float weight = ComputeGaussian (i + 1);  	weights [i * 2 + 1] = weight;  	weights [i * 2 + 2] = weight;  	totalWeights += weight * 2;  	// To get the maximum amount of blurring from a limited number of  	// pixel shader samples' we take advantage of the bilinear filtering  	// hardware inside the texture fetch unit. If we position our texture  	// coordinates exactly halfway between two texels' the filtering unit  	// will average them for us' giving two samples for the price of one.  	// This allows us to step in units of two texels per sample' rather  	// than just one at a time. The 1.5 offset kicks things off by  	// positioning us nicely in between two texels.  	float sampleOffset = i * 2 + 1.5f;  	Vector4D delta = new Vector4D (dx' dy' 1.0f' 1.0f) * sampleOffset;  	// Store texture coordinate offsets for the positive and negative taps.  	offsets [i * 2 + 1] = delta;  	offsets [i * 2 + 2] = -delta;  }  
Magic Number,Meshellator.Viewer.Framework.Rendering.Decorators,BlurComponent,D:\newReposJune17\tgjones_meshellator\src\Meshellator.Viewer\Framework\Rendering\Decorators\BlurComponent.cs,SetBlurEffectParameters,The following statement contains a magic number: for (int i = 0; i < SampleCount / 2; i++) {  	// Store weights for the positive and negative taps.  	float weight = ComputeGaussian (i + 1);  	weights [i * 2 + 1] = weight;  	weights [i * 2 + 2] = weight;  	totalWeights += weight * 2;  	// To get the maximum amount of blurring from a limited number of  	// pixel shader samples' we take advantage of the bilinear filtering  	// hardware inside the texture fetch unit. If we position our texture  	// coordinates exactly halfway between two texels' the filtering unit  	// will average them for us' giving two samples for the price of one.  	// This allows us to step in units of two texels per sample' rather  	// than just one at a time. The 1.5 offset kicks things off by  	// positioning us nicely in between two texels.  	float sampleOffset = i * 2 + 1.5f;  	Vector4D delta = new Vector4D (dx' dy' 1.0f' 1.0f) * sampleOffset;  	// Store texture coordinate offsets for the positive and negative taps.  	offsets [i * 2 + 1] = delta;  	offsets [i * 2 + 2] = -delta;  }  
Magic Number,Meshellator.Viewer.Framework.Rendering.Decorators,BlurComponent,D:\newReposJune17\tgjones_meshellator\src\Meshellator.Viewer\Framework\Rendering\Decorators\BlurComponent.cs,SetBlurEffectParameters,The following statement contains a magic number: for (int i = 0; i < SampleCount / 2; i++) {  	// Store weights for the positive and negative taps.  	float weight = ComputeGaussian (i + 1);  	weights [i * 2 + 1] = weight;  	weights [i * 2 + 2] = weight;  	totalWeights += weight * 2;  	// To get the maximum amount of blurring from a limited number of  	// pixel shader samples' we take advantage of the bilinear filtering  	// hardware inside the texture fetch unit. If we position our texture  	// coordinates exactly halfway between two texels' the filtering unit  	// will average them for us' giving two samples for the price of one.  	// This allows us to step in units of two texels per sample' rather  	// than just one at a time. The 1.5 offset kicks things off by  	// positioning us nicely in between two texels.  	float sampleOffset = i * 2 + 1.5f;  	Vector4D delta = new Vector4D (dx' dy' 1.0f' 1.0f) * sampleOffset;  	// Store texture coordinate offsets for the positive and negative taps.  	offsets [i * 2 + 1] = delta;  	offsets [i * 2 + 2] = -delta;  }  
Magic Number,Meshellator.Viewer.Framework.Rendering.Decorators,BlurComponent,D:\newReposJune17\tgjones_meshellator\src\Meshellator.Viewer\Framework\Rendering\Decorators\BlurComponent.cs,SetBlurEffectParameters,The following statement contains a magic number: for (int i = 0; i < SampleCount / 2; i++) {  	// Store weights for the positive and negative taps.  	float weight = ComputeGaussian (i + 1);  	weights [i * 2 + 1] = weight;  	weights [i * 2 + 2] = weight;  	totalWeights += weight * 2;  	// To get the maximum amount of blurring from a limited number of  	// pixel shader samples' we take advantage of the bilinear filtering  	// hardware inside the texture fetch unit. If we position our texture  	// coordinates exactly halfway between two texels' the filtering unit  	// will average them for us' giving two samples for the price of one.  	// This allows us to step in units of two texels per sample' rather  	// than just one at a time. The 1.5 offset kicks things off by  	// positioning us nicely in between two texels.  	float sampleOffset = i * 2 + 1.5f;  	Vector4D delta = new Vector4D (dx' dy' 1.0f' 1.0f) * sampleOffset;  	// Store texture coordinate offsets for the positive and negative taps.  	offsets [i * 2 + 1] = delta;  	offsets [i * 2 + 2] = -delta;  }  
Magic Number,Meshellator.Viewer.Framework.Rendering.Decorators,BlurComponent,D:\newReposJune17\tgjones_meshellator\src\Meshellator.Viewer\Framework\Rendering\Decorators\BlurComponent.cs,SetBlurEffectParameters,The following statement contains a magic number: for (int i = 0; i < SampleCount / 2; i++) {  	// Store weights for the positive and negative taps.  	float weight = ComputeGaussian (i + 1);  	weights [i * 2 + 1] = weight;  	weights [i * 2 + 2] = weight;  	totalWeights += weight * 2;  	// To get the maximum amount of blurring from a limited number of  	// pixel shader samples' we take advantage of the bilinear filtering  	// hardware inside the texture fetch unit. If we position our texture  	// coordinates exactly halfway between two texels' the filtering unit  	// will average them for us' giving two samples for the price of one.  	// This allows us to step in units of two texels per sample' rather  	// than just one at a time. The 1.5 offset kicks things off by  	// positioning us nicely in between two texels.  	float sampleOffset = i * 2 + 1.5f;  	Vector4D delta = new Vector4D (dx' dy' 1.0f' 1.0f) * sampleOffset;  	// Store texture coordinate offsets for the positive and negative taps.  	offsets [i * 2 + 1] = delta;  	offsets [i * 2 + 2] = -delta;  }  
Magic Number,Meshellator.Viewer.Framework.Rendering.Decorators,BlurComponent,D:\newReposJune17\tgjones_meshellator\src\Meshellator.Viewer\Framework\Rendering\Decorators\BlurComponent.cs,SetBlurEffectParameters,The following statement contains a magic number: for (int i = 0; i < SampleCount / 2; i++) {  	// Store weights for the positive and negative taps.  	float weight = ComputeGaussian (i + 1);  	weights [i * 2 + 1] = weight;  	weights [i * 2 + 2] = weight;  	totalWeights += weight * 2;  	// To get the maximum amount of blurring from a limited number of  	// pixel shader samples' we take advantage of the bilinear filtering  	// hardware inside the texture fetch unit. If we position our texture  	// coordinates exactly halfway between two texels' the filtering unit  	// will average them for us' giving two samples for the price of one.  	// This allows us to step in units of two texels per sample' rather  	// than just one at a time. The 1.5 offset kicks things off by  	// positioning us nicely in between two texels.  	float sampleOffset = i * 2 + 1.5f;  	Vector4D delta = new Vector4D (dx' dy' 1.0f' 1.0f) * sampleOffset;  	// Store texture coordinate offsets for the positive and negative taps.  	offsets [i * 2 + 1] = delta;  	offsets [i * 2 + 2] = -delta;  }  
Magic Number,Meshellator.Viewer.Framework.Rendering.Decorators,BlurComponent,D:\newReposJune17\tgjones_meshellator\src\Meshellator.Viewer\Framework\Rendering\Decorators\BlurComponent.cs,SetBlurEffectParameters,The following statement contains a magic number: weights [i * 2 + 1] = weight;  
Magic Number,Meshellator.Viewer.Framework.Rendering.Decorators,BlurComponent,D:\newReposJune17\tgjones_meshellator\src\Meshellator.Viewer\Framework\Rendering\Decorators\BlurComponent.cs,SetBlurEffectParameters,The following statement contains a magic number: weights [i * 2 + 2] = weight;  
Magic Number,Meshellator.Viewer.Framework.Rendering.Decorators,BlurComponent,D:\newReposJune17\tgjones_meshellator\src\Meshellator.Viewer\Framework\Rendering\Decorators\BlurComponent.cs,SetBlurEffectParameters,The following statement contains a magic number: weights [i * 2 + 2] = weight;  
Magic Number,Meshellator.Viewer.Framework.Rendering.Decorators,BlurComponent,D:\newReposJune17\tgjones_meshellator\src\Meshellator.Viewer\Framework\Rendering\Decorators\BlurComponent.cs,SetBlurEffectParameters,The following statement contains a magic number: totalWeights += weight * 2;  
Magic Number,Meshellator.Viewer.Framework.Rendering.Decorators,BlurComponent,D:\newReposJune17\tgjones_meshellator\src\Meshellator.Viewer\Framework\Rendering\Decorators\BlurComponent.cs,SetBlurEffectParameters,The following statement contains a magic number: offsets [i * 2 + 1] = delta;  
Magic Number,Meshellator.Viewer.Framework.Rendering.Decorators,BlurComponent,D:\newReposJune17\tgjones_meshellator\src\Meshellator.Viewer\Framework\Rendering\Decorators\BlurComponent.cs,SetBlurEffectParameters,The following statement contains a magic number: offsets [i * 2 + 2] = -delta;  
Magic Number,Meshellator.Viewer.Framework.Rendering.Decorators,BlurComponent,D:\newReposJune17\tgjones_meshellator\src\Meshellator.Viewer\Framework\Rendering\Decorators\BlurComponent.cs,SetBlurEffectParameters,The following statement contains a magic number: offsets [i * 2 + 2] = -delta;  
Magic Number,Meshellator.Viewer.Framework.Rendering.Decorators,BlurComponent,D:\newReposJune17\tgjones_meshellator\src\Meshellator.Viewer\Framework\Rendering\Decorators\BlurComponent.cs,ComputeGaussian,The following statement contains a magic number: return ((1.0f / MathUtility.Sqrt (2 * MathUtility.PI * theta)) * MathUtility.Exp (-(n * n) / (2 * theta * theta)));  
Magic Number,Meshellator.Viewer.Framework.Rendering.Decorators,BlurComponent,D:\newReposJune17\tgjones_meshellator\src\Meshellator.Viewer\Framework\Rendering\Decorators\BlurComponent.cs,ComputeGaussian,The following statement contains a magic number: return ((1.0f / MathUtility.Sqrt (2 * MathUtility.PI * theta)) * MathUtility.Exp (-(n * n) / (2 * theta * theta)));  
Magic Number,Meshellator.Viewer.Framework.Rendering.Decorators,NormalsDecorator,D:\newReposJune17\tgjones_meshellator\src\Meshellator.Viewer\Framework\Rendering\Decorators\NormalsDecorator.cs,GetNormalBuffers,The following statement contains a magic number: if (!_normals.ContainsKey (mesh)) {  	NormalBuffers normalBuffers = new NormalBuffers ();  	Line3D[] normalLines = NormalLinesGenerator.Generate (mesh.SourceMesh);  	normalBuffers.PrimitiveCount = normalLines.Length;  	normalBuffers.VertexCount = normalLines.Length * 2;  	VertexBuffer vertexBuffer = new VertexBuffer (_device' normalBuffers.VertexCount * VertexPositionColor.SizeInBytes' Usage.WriteOnly' VertexFormat.None' Pool.Default);  	DataStream vertexDataStream = vertexBuffer.Lock (0' normalBuffers.VertexCount * VertexPositionColor.SizeInBytes' LockFlags.None);  	VertexPositionColor[] vertices = new VertexPositionColor[normalBuffers.VertexCount];  	int counter = 0;  	for (int i = 0; i < normalLines.Length; ++i) {  		Vector3D normalColor = Vector3D.Normalize (normalLines [i].Direction);  		normalColor += Vector3D.One;  		normalColor *= 0.5f;  		vertices [counter++] = new VertexPositionColor (normalLines [i].Start' normalColor);  		vertices [counter++] = new VertexPositionColor (normalLines [i].End' normalColor);  	}  	vertexDataStream.WriteRange (vertices);  	vertexBuffer.Unlock ();  	normalBuffers.Vertices = vertexBuffer;  	IndexBuffer indexBuffer = new IndexBuffer (_device' normalBuffers.VertexCount * sizeof(int)' Usage.WriteOnly' Pool.Default' false);  	DataStream indexDataStream = indexBuffer.Lock (0' normalBuffers.VertexCount * sizeof(int)' LockFlags.None);  	indexDataStream.WriteRange (Enumerable.Range (0' normalBuffers.VertexCount).ToArray ());  	indexBuffer.Unlock ();  	normalBuffers.Indices = indexBuffer;  	_normals.Add (mesh' normalBuffers);  }  
Magic Number,Meshellator.Viewer.Framework.Rendering.Decorators,NormalsDecorator,D:\newReposJune17\tgjones_meshellator\src\Meshellator.Viewer\Framework\Rendering\Decorators\NormalsDecorator.cs,GetNormalBuffers,The following statement contains a magic number: normalBuffers.VertexCount = normalLines.Length * 2;  
Magic Number,Meshellator.Viewer.Modules.Startup,Module,D:\newReposJune17\tgjones_meshellator\src\Meshellator.Viewer\Modules\Startup\Module.cs,Initialize,The following statement contains a magic number: fileMenuItem.Children.Insert (2' new MenuItemSeparator ());  
Magic Number,Meshellator.Viewer.Modules.Startup,Module,D:\newReposJune17\tgjones_meshellator\src\Meshellator.Viewer\Modules\Startup\Module.cs,NewSphere,The following statement contains a magic number: yield return Show.Document (new ModelEditorViewModel (new SceneViewModel (MeshellatorLoader.CreateFromSphere (10' 10))' "[New Sphere]"));  
Magic Number,Meshellator.Viewer.Modules.Startup,Module,D:\newReposJune17\tgjones_meshellator\src\Meshellator.Viewer\Modules\Startup\Module.cs,NewSphere,The following statement contains a magic number: yield return Show.Document (new ModelEditorViewModel (new SceneViewModel (MeshellatorLoader.CreateFromSphere (10' 10))' "[New Sphere]"));  
Magic Number,Meshellator.Viewer.Modules.Startup,Module,D:\newReposJune17\tgjones_meshellator\src\Meshellator.Viewer\Modules\Startup\Module.cs,NewTeapot,The following statement contains a magic number: yield return Show.Document (new ModelEditorViewModel (new SceneViewModel (MeshellatorLoader.CreateFromTeapot (10' 10))' "[New Teapot]"));  
Magic Number,Meshellator.Viewer.Modules.Startup,Module,D:\newReposJune17\tgjones_meshellator\src\Meshellator.Viewer\Modules\Startup\Module.cs,NewTeapot,The following statement contains a magic number: yield return Show.Document (new ModelEditorViewModel (new SceneViewModel (MeshellatorLoader.CreateFromTeapot (10' 10))' "[New Teapot]"));  
