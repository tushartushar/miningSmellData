Implementation smell,Namespace,Class,File,Method,Description
Long Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,symbexec,The method has 189 lines of code.
Long Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,llex,The method has 126 lines of code.
Long Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The method has 103 lines of code.
Long Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaV_execute,The method has 455 lines of code.
Long Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,PrintCode,The method has 101 lines of code.
Long Method,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,sprintf,The method has 265 lines of code.
Complex Method,KopiLua,Program,F:\newReposMay17\gerich-home_kopilua\lua.cs,collectargs,Cyclomatic complexity of the method is 24
Complex Method,KopiLua,Program,F:\newReposMay17\gerich-home_kopilua\lua.cs,runargs,Cyclomatic complexity of the method is 10
Complex Method,KopiLua,Program,F:\newReposMay17\gerich-home_kopilua\lua.cs,pmain,Cyclomatic complexity of the method is 8
Complex Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,lua_getmetatable,Cyclomatic complexity of the method is 10
Complex Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,lua_getfenv,Cyclomatic complexity of the method is 12
Complex Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,lua_setmetatable,Cyclomatic complexity of the method is 9
Complex Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,lua_setfenv,Cyclomatic complexity of the method is 13
Complex Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,lua_gc,Cyclomatic complexity of the method is 22
Complex Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaL_loadfile,Cyclomatic complexity of the method is 11
Complex Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaB_tostring,Cyclomatic complexity of the method is 15
Complex Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaK_dischargevars,Cyclomatic complexity of the method is 13
Complex Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,discharge2reg,Cyclomatic complexity of the method is 16
Complex Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaK_exp2RK,Cyclomatic complexity of the method is 10
Complex Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaK_storevar,Cyclomatic complexity of the method is 10
Complex Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaK_goiftrue,Cyclomatic complexity of the method is 10
Complex Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaK_goiffalse,Cyclomatic complexity of the method is 9
Complex Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,codenot,Cyclomatic complexity of the method is 15
Complex Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,constfolding,Cyclomatic complexity of the method is 28
Complex Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaK_prefix,Cyclomatic complexity of the method is 11
Complex Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaK_infix,Cyclomatic complexity of the method is 16
Complex Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaK_posfix,Cyclomatic complexity of the method is 46
Complex Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,db_getinfo,Cyclomatic complexity of the method is 9
Complex Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,db_errorfb,Cyclomatic complexity of the method is 12
Complex Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,auxgetinfo,Cyclomatic complexity of the method is 17
Complex Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,checkArgMode,Cyclomatic complexity of the method is 11
Complex Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,symbexec,Cyclomatic complexity of the method is 67
Complex Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,getobjname,Cyclomatic complexity of the method is 13
Complex Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,adjust_varargs,Cyclomatic complexity of the method is 8
Complex Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaD_precall,Cyclomatic complexity of the method is 9
Complex Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,DumpConstants,Cyclomatic complexity of the method is 17
Complex Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,reallymarkobject,Cyclomatic complexity of the method is 19
Complex Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,traversetable,Cyclomatic complexity of the method is 11
Complex Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,traverseproto,Cyclomatic complexity of the method is 10
Complex Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,propagatemark,Cyclomatic complexity of the method is 11
Complex Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,freeobj,Cyclomatic complexity of the method is 21
Complex Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,singlestep,Cyclomatic complexity of the method is 16
Complex Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,g_read,Cyclomatic complexity of the method is 15
Complex Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,read_long_string,Cyclomatic complexity of the method is 21
Complex Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,read_string,Cyclomatic complexity of the method is 45
Complex Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,llex,Cyclomatic complexity of the method is 35
Complex Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,ll_require,Cyclomatic complexity of the method is 10
Complex Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaO_pushvfstring,Cyclomatic complexity of the method is 18
Complex Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,constructor,Cyclomatic complexity of the method is 9
Complex Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,parlist,Cyclomatic complexity of the method is 9
Complex Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,funcargs,Cyclomatic complexity of the method is 12
Complex Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,primaryexp,Cyclomatic complexity of the method is 12
Complex Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,simpleexp,Cyclomatic complexity of the method is 18
Complex Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,getbinopr,Cyclomatic complexity of the method is 16
Complex Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,forstat,Cyclomatic complexity of the method is 10
Complex Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,statement,Cyclomatic complexity of the method is 21
Complex Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,classend,Cyclomatic complexity of the method is 11
Complex Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,match_class,Cyclomatic complexity of the method is 31
Complex Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,match,Cyclomatic complexity of the method is 28
Complex Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,str_find_aux,Cyclomatic complexity of the method is 8
Complex Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,add_value,Cyclomatic complexity of the method is 9
Complex Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,addquoted,Cyclomatic complexity of the method is 11
Complex Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,scanformat,Cyclomatic complexity of the method is 10
Complex Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,str_format,Cyclomatic complexity of the method is 26
Complex Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,resize,Cyclomatic complexity of the method is 8
Complex Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaH_get,Cyclomatic complexity of the method is 8
Complex Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,tinsert,Cyclomatic complexity of the method is 8
Complex Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,auxsort,Cyclomatic complexity of the method is 14
Complex Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaT_gettmbyobj,Cyclomatic complexity of the method is 9
Complex Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,strtoul,Cyclomatic complexity of the method is 14
Complex Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,LoadConstants,Cyclomatic complexity of the method is 22
Complex Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,LoadDebug,Cyclomatic complexity of the method is 8
Complex Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaV_equalval,Cyclomatic complexity of the method is 9
Complex Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaV_concat,Cyclomatic complexity of the method is 9
Complex Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,Arith,Cyclomatic complexity of the method is 26
Complex Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,Dump,Cyclomatic complexity of the method is 49
Complex Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaV_execute,Cyclomatic complexity of the method is 126
Complex Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,PrintString,Cyclomatic complexity of the method is 32
Complex Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,PrintConstant,Cyclomatic complexity of the method is 15
Complex Method,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,PrintCode,Cyclomatic complexity of the method is 61
Complex Method,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,IsPositive,Cyclomatic complexity of the method is 13
Complex Method,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,ToUnsigned,Cyclomatic complexity of the method is 12
Complex Method,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,ToInteger,Cyclomatic complexity of the method is 12
Complex Method,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,UnboxToLong,Cyclomatic complexity of the method is 12
Complex Method,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,ReplaceMetaCharsMatch,Cyclomatic complexity of the method is 9
Complex Method,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,sprintf,Cyclomatic complexity of the method is 96
Long Parameter List,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,condjump,The method has 5 parameters.
Long Parameter List,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,patchlistaux,The method has 5 parameters.
Long Parameter List,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,codecomp,The method has 5 parameters.
Long Parameter List,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaK_codeABC,The method has 5 parameters.
Long Parameter List,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,auxgetinfo,The method has 5 parameters.
Long Parameter List,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaD_pcall,The method has 5 parameters.
Long Parameter List,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaU_dump,The method has 5 parameters.
Long Parameter List,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaM_growvector,The method has 6 parameters.
Long Parameter List,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaM_growaux_,The method has 5 parameters.
Long Parameter List,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,opmode,The method has 5 parameters.
Long Parameter List,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,forbody,The method has 5 parameters.
Long Parameter List,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,callTMres,The method has 5 parameters.
Long Parameter List,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,callTM,The method has 5 parameters.
Long Parameter List,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,call_binTM,The method has 5 parameters.
Long Parameter List,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,Arith,The method has 5 parameters.
Long Parameter List,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,arith_op,The method has 8 parameters.
Long Parameter List,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,FormatOct,The method has 7 parameters.
Long Parameter List,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,FormatHex,The method has 7 parameters.
Long Parameter List,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,FormatNumber,The method has 9 parameters.
Long Statement,KopiLua,Program,F:\newReposMay17\gerich-home_kopilua\lua.cs,print_usage,The length of the statement  "	Console.Error.Write ("usage: {0} [options] [script [args]].\n" + "Available options are:\n" + "  -e stat  execute string " + Lua.LUA_QL ("stat").ToString () + "\n" + "  -l name  require library " + Lua.LUA_QL ("name").ToString () + "\n" + "  -i       enter interactive mode after executing " + Lua.LUA_QL ("script").ToString () + "\n" + "  -v       show version information\n" + "  --       stop handling options\n" + "  -        execute stdin and stop handling options\n"' progname); " is 484.
Long Statement,KopiLua,Program,F:\newReposMay17\gerich-home_kopilua\lua.cs,loadline,The length of the statement  "		/* repeat until gets a complete line */status = Lua.luaL_loadbuffer (L' Lua.lua_tostring (L' 1)' Lua.lua_strlen (L' 1)' "=stdin"); " is 130.
Long Statement,KopiLua,Program,F:\newReposMay17\gerich-home_kopilua\lua.cs,dotty,The length of the statement  "				l_message (progname' Lua.lua_pushfstring (L' "error calling " + Lua.LUA_QL ("print").ToString () + " (%s)"' Lua.lua_tostring (L' -1))); " is 135.
Long Statement,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaL_argerror,The length of the statement  "			/* error is in the self argument itself? */return luaL_error (L' "calling " + LUA_QS + " on bad self ({1})"' ar.name' extramsg); " is 128.
Long Statement,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaI_openlib,The length of the statement  "			/* remove previous result *//* try global variable (and create one if it does not exist) */if (luaL_findtable (L' LUA_GLOBALSINDEX' libname' size) != null) " is 155.
Long Statement,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,base_open,The length of the statement  "	/* set global _VERSION *//* `ipairs' and `pairs' need auxliliary functions as upvalues */auxopen (L' "ipairs"' luaB_ipairs' ipairsaux); " is 135.
Long Statement,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,patchtestreg,The length of the statement  "		/* no register to put value or register already has the value */i [0] = (uint)CREATE_ABC (OpCode.OP_TEST' GETARG_B (i [0])' 0' GETARG_C (i [0])); " is 145.
Long Statement,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaK_exp2RK,The length of the statement  "			/* constant fit in RK operand? */e.u.s.info = (e.k == expkind.VNIL) ? nilK (fs) : (e.k == expkind.VKNUM) ? luaK_numberK (fs' e.u.nval) : boolK (fs' (e.k == expkind.VTRUE) ? 1 : 0); " is 180.
Long Statement,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,invertjump,The length of the statement  "	lua_assert (testTMode (GET_OPCODE (pc [0])) != 0 && GET_OPCODE (pc [0]) != OpCode.OP_TESTSET && GET_OPCODE (pc [0]) != OpCode.OP_TEST); " is 135.
Long Statement,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaK_code,The length of the statement  "	/* `pc' will change *//* put new instruction in code array */luaM_growvector (fs.L' ref f.code' fs.pc' ref f.sizecode' MAX_INT' "code size overflow"); " is 150.
Long Statement,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaK_code,The length of the statement  "	/* save corresponding line information */luaM_growvector (fs.L' ref f.lineinfo' fs.pc' ref f.sizelineinfo' MAX_INT' "code size overflow"); " is 138.
Long Statement,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,resume,The length of the statement  "			/* `common' yield? *//* finish interrupted execution of `OP_CALL' */lua_assert (GET_OPCODE ((ci - 1).savedpc [-1]) == OpCode.OP_CALL || GET_OPCODE ((ci - 1).savedpc [-1]) == OpCode.OP_TAILCALL); " is 194.
Long Statement,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,propagatemark,The length of the statement  "		/* keep it gray */return GetUnmanagedSize (typeof(Table)) + GetUnmanagedSize (typeof(TValue)) * h.sizearray + GetUnmanagedSize (typeof(Node)) * sizenode (h); " is 157.
Long Statement,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,propagatemark,The length of the statement  "		return GetUnmanagedSize (typeof(lua_State)) + GetUnmanagedSize (typeof(TValue)) * th.stacksize + GetUnmanagedSize (typeof(CallInfo)) * th.size_ci; " is 146.
Long Statement,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,propagatemark,The length of the statement  "		return GetUnmanagedSize (typeof(Proto)) + GetUnmanagedSize (typeof(Instruction)) * p.sizecode + GetUnmanagedSize (typeof(Proto)) * p.sizep + GetUnmanagedSize (typeof(TValue)) * p.sizek + GetUnmanagedSize (typeof(int)) * p.sizelineinfo + GetUnmanagedSize (typeof(LocVar)) * p.sizelocvars + GetUnmanagedSize (typeof(TString)) * p.sizeupvalues; " is 341.
Long Statement,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,g_read,The length of the statement  "		/* ensure stack space for all results and for auxlib's buffer */luaL_checkstack (L' nargs + LUA_MINSTACK' "too many arguments"); " is 128.
Long Statement,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,g_write,The length of the statement  "			/* optimization: could be done exactly as for strings */status = ((status != 0) && (fprintf (f' LUA_NUMBER_FMT' lua_tonumber (L' arg)) > 0)) ? 1 : 0; " is 149.
Long Statement,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,math_random,The length of the statement  "			 some systems (SunOS!) `rand()' may return a value larger than RAND_MAX *///lua_Number r = (lua_Number)(rng.Next()%RAND_MAX) / (lua_Number)RAND_MAX; " is 147.
Long Statement,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,loaderror,The length of the statement  "	luaL_error (L' "error loading module " + LUA_QS + " from file " + LUA_QS + ":\n\t%s"' lua_tostring (L' 1)' filename' lua_tostring (L' -1)); " is 139.
Long Statement,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,modinit,The length of the statement  "	/* set _PACKAGE as package name (full module name minus last part) */lua_pushlstring (L' modname' (uint)(dot - modname)); " is 121.
Long Statement,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,ll_module,The length of the statement  "		/* remove previous result *//* try global variable (and create one if it does not exist) */if (luaL_findtable (L' LUA_GLOBALSINDEX' modname' 1) != null) " is 152.
Long Statement,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,setpath,The length of the statement  "		/* replace ";;" by ";AUXMARK;" and then AUXMARK by default path */path = luaL_gsub (L' path' LUA_PATHSEP + LUA_PATHSEP' LUA_PATHSEP + AUXMARK + LUA_PATHSEP); " is 157.
Long Statement,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaopen_package,The length of the statement  "	/* set field `cpath' *//* store config information */lua_pushliteral (L' LUA_DIRSEP + "\n" + LUA_PATHSEP + "\n" + LUA_PATH_MARK + "\n" + LUA_EXECDIR + "\n" + LUA_IGMARK); " is 170.
Long Statement,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,errorlimit,The length of the statement  "	CharPtr msg = (fs.f.linedefined == 0) ? luaO_pushfstring (fs.L' "main function has more than %d %s"' limit' what) : luaO_pushfstring (fs.L' "function at line %d has more than %d %s"' fs.f.linedefined' limit' what); " is 214.
Long Statement,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,check_match,The length of the statement  "			luaX_syntaxerror (ls' luaO_pushfstring (ls.L' LUA_QS + " expected (to close " + LUA_QS + " at line %d)"' luaX_token2str (ls' what)' luaX_token2str (ls' who)' where)); " is 166.
Long Statement,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,close_func,The length of the statement  "	/* remove table and prototype from the stack *//* last token read was anchored in defunct function; must reanchor it */if (fs != null) " is 134.
Long Statement,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaY_parser,The length of the statement  "	/* read first token */System.Threading.Thread.CurrentThread.CurrentCulture = System.Globalization.CultureInfo.InvariantCulture; " is 127.
Long Statement,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,forbody,The length of the statement  "	endfor = (isnum != 0) ? luaK_codeAsBx (fs' OpCode.OP_FORLOOP' base_' NO_JUMP) : luaK_codeABC (fs' OpCode.OP_TFORLOOP' base_' 0' nvars); " is 135.
Long Statement,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,str_find_aux,The length of the statement  "		/* or no special characters? *//* do a plain search */CharPtr s2 = lmemfind (s + init' (uint)(l1 - init)' p' (uint)(l2)); " is 121.
Long Statement,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,str_gsub,The length of the statement  "	luaL_argcheck (L' tr == LUA_TNUMBER || tr == LUA_TSTRING || tr == LUA_TFUNCTION || tr == LUA_TTABLE' 3' "string/function/table expected"); " is 138.
Long Statement,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,str_format,The length of the statement  "				/* also treat cases `pnLlh' */return luaL_error (L' "invalid option " + LUA_QL ("%%%c") + " to " + LUA_QL ("format")' strfrmt [-1]); " is 132.
Long Statement,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,findindex,The length of the statement  "			/* check whether `key' is somewhere in the chain *//* key may be dead already' but it is ok to use it in `next' */if ((luaO_rawequalObj (key2tval (n)' key) != 0) || (ttype (gkey (n)) == LUA_TDEADKEY && iscollectable (key) && gcvalue (gkey (n)) == gcvalue (key))) { " is 264.
Long Statement,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,newkey,The length of the statement  "			/* is colliding node out of its main position? *//* yes; move colliding node into free position */while (gnext (othern) != mp) " is 126.
Long Statement,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaH_get,The length of the statement  "		/* use specialized version *//* else go through ... actually on second thoughts don't' because this is C#*/Node node = mainposition (t' key); " is 141.
Long Statement,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,auxsort,The length of the statement  "		/* swap pivot (a[u-1]) with a[i] *//* a[l..i-1] <= a[i] == P <= a[i+1..u] *//* adjust so that smaller half is in [j..i] and larger one in [l..u] */if (i - l < u - i) { " is 167.
Long Statement,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaV_gettable,The length of the statement  "			/* do a primitive get */if (!ttisnil (res) || /* result is no nil? */(tm = fasttm (L' h.metatable' TMS.TM_INDEX)) == null) { " is 124.
Long Statement,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaV_settable,The length of the statement  "			/* do a primitive set */if (!ttisnil (oldval) || /* result is no nil? */(tm = fasttm (L' h.metatable' TMS.TM_NEWINDEX)) == null) { " is 130.
Long Statement,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,l_strcmp,The length of the statement  "			/* l is smaller than r (because r is not finished) *//* both strings longer than `len'; go on comparing (after the `\0') */len++; " is 129.
Long Statement,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaV_concat,The length of the statement  "		/* number of elements handled in this pass (at least 2) */if (!(ttisstring (top - 2) || ttisnumber (top - 2)) || (tostring (L' top - 1) == 0)) { " is 144.
Long Statement,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaV_execute,The length of the statement  "		if (((L.hookmask & (LUA_MASKLINE | LUA_MASKCOUNT)) != 0) && (((--L.hookcount) == 0) || ((L.hookmask & LUA_MASKLINE) != 0))) { " is 125.
Long Statement,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,PrintHeader,The length of the statement  "	printf ("\n%s <%s:%d'%d> (%d Instruction%s' %d bytes at %p)\n"' (f.linedefined == 0) ? "main" : "function"' s' f.linedefined' f.lastlinedefined' f.sizecode' SS (f.sizecode)' f.sizecode * GetUnmanagedSize (typeof(Instruction))' VOID (f)); " is 237.
Long Statement,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,PrintHeader,The length of the statement  "	printf ("%d%s param%s' %d slot%s' %d upvalue%s' "' f.numparams' (f.is_vararg != 0) ? "+" : ""' SS (f.numparams)' f.maxstacksize' SS (f.maxstacksize)' f.nups' SS (f.nups)); " is 171.
Long Statement,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,PrintHeader,The length of the statement  "	printf ("%d local%s' %d constant%s' %d function%s\n"' f.sizelocvars' SS (f.sizelocvars)' f.sizek' SS (f.sizek)' f.sizep' SS (f.sizep)); " is 135.
Long Statement,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,IsNumericType,The length of the statement  "	return (o is byte || o is sbyte || o is short || o is ushort || o is int || o is uint || o is long || o is ulong || o is float || o is double || o is decimal); " is 159.
Long Statement,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,sprintf,The length of the statement  "		if (fieldPrecision == int.MinValue && formatSpecifier != 's' && formatSpecifier != 'c' && Char.ToUpper (formatSpecifier) != 'X' && formatSpecifier != 'o') " is 154.
Long Statement,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,sprintf,The length of the statement  "			w = FormatNumber ((flagGroupThousands ? "n" : "d")' flagAlternate' fieldLength' int.MinValue' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o); " is 168.
Long Statement,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,sprintf,The length of the statement  "			w = FormatNumber ((flagGroupThousands ? "n" : "d")' flagAlternate' fieldLength' int.MinValue' flagLeft2Right' false' false' paddingCharacter' ToUnsigned (o)); " is 158.
Long Statement,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,sprintf,The length of the statement  "			string t = "{0" + (fieldLength != int.MinValue ? "'" + (flagLeft2Right ? "-" : String.Empty) + fieldLength.ToString () : String.Empty) + ":s}"; " is 143.
Long Statement,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,sprintf,The length of the statement  "			w = FormatNumber ((flagGroupThousands ? "n" : "f")' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o); " is 170.
Long Statement,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,sprintf,The length of the statement  "			w = FormatNumber ("e"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o); " is 141.
Long Statement,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,sprintf,The length of the statement  "			w = FormatNumber ("E"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o); " is 141.
Long Statement,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,sprintf,The length of the statement  "			w = FormatNumber ("g"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o); " is 141.
Long Statement,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,sprintf,The length of the statement  "			w = FormatNumber ("G"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o); " is 141.
Long Statement,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,sprintf,The length of the statement  "			w = FormatNumber ("d"' flagAlternate' fieldLength' int.MinValue' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' m.Index); " is 145.
Long Statement,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,FormatOct,The length of the statement  "	string lengthFormat = "{0" + (FieldLength != int.MinValue ? "'" + (Left2Right ? "-" : String.Empty) + FieldLength.ToString () : String.Empty) + "}"; " is 148.
Long Statement,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,FormatHex,The length of the statement  "	string lengthFormat = "{0" + (FieldLength != int.MinValue ? "'" + (Left2Right ? "-" : String.Empty) + FieldLength.ToString () : String.Empty) + "}"; " is 148.
Long Statement,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,FormatHex,The length of the statement  "	string numberFormat = "{0:" + NativeFormat + (FieldPrecision != int.MinValue ? FieldPrecision.ToString () : String.Empty) + "}"; " is 128.
Long Statement,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,FormatNumber,The length of the statement  "	string lengthFormat = "{0" + (FieldLength != int.MinValue ? "'" + (Left2Right ? "-" : String.Empty) + FieldLength.ToString () : String.Empty) + "}"; " is 148.
Complex Conditional,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,findindex,The conditional expression  "(luaO_rawequalObj (key2tval (n)' key) != 0) || (ttype (gkey (n)) == LUA_TDEADKEY && iscollectable (key) && gcvalue (gkey (n)) == gcvalue (key))"  is complex.
Complex Conditional,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,sprintf,The conditional expression  "fieldPrecision == int.MinValue && formatSpecifier != 's' && formatSpecifier != 'c' && Char.ToUpper (formatSpecifier) != 'X' && formatSpecifier != 'o'"  is complex.
Empty Catch Block,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,fgets,The method has an empty catch block.
Empty Catch Block,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,freopen,The method has an empty catch block.
Magic Number,KopiLua,Program,F:\newReposMay17\gerich-home_kopilua\lua.cs,traceback,The following statement contains a magic number: if (!Lua.lua_isfunction (L' -1)) {  	Lua.lua_pop (L' 2);  	return 1;  }  
Magic Number,KopiLua,Program,F:\newReposMay17\gerich-home_kopilua\lua.cs,traceback,The following statement contains a magic number: Lua.lua_pop (L' 2);  
Magic Number,KopiLua,Program,F:\newReposMay17\gerich-home_kopilua\lua.cs,traceback,The following statement contains a magic number: Lua.lua_pushinteger (L' 2);  
Magic Number,KopiLua,Program,F:\newReposMay17\gerich-home_kopilua\lua.cs,traceback,The following statement contains a magic number: Lua.lua_call (L' 2' 1);  
Magic Number,KopiLua,Program,F:\newReposMay17\gerich-home_kopilua\lua.cs,getargs,The following statement contains a magic number: Lua.luaL_checkstack (L' narg + 3' "too many arguments to script");  
Magic Number,KopiLua,Program,F:\newReposMay17\gerich-home_kopilua\lua.cs,getargs,The following statement contains a magic number: for (i = 0; i < argc; i++) {  	Lua.lua_pushstring (L' argv [i]);  	Lua.lua_rawseti (L' -2' i - n);  }  
Magic Number,KopiLua,Program,F:\newReposMay17\gerich-home_kopilua\lua.cs,getargs,The following statement contains a magic number: Lua.lua_rawseti (L' -2' i - n);  
Magic Number,KopiLua,Program,F:\newReposMay17\gerich-home_kopilua\lua.cs,loadline,The following statement contains a magic number: for (; ;) {  	/* repeat until gets a complete line */status = Lua.luaL_loadbuffer (L' Lua.lua_tostring (L' 1)' Lua.lua_strlen (L' 1)' "=stdin");  	if (incomplete (L' status) == 0)  		break;  	/* cannot try to add lines? */if (pushline (L' 0) == 0)  		/* no more input? */return -1;  	Lua.lua_pushliteral (L' "\n");  	/* add a new line... */Lua.lua_insert (L' -2);  	/* ...between the two lines */Lua.lua_concat (L' 3);  	/* join them */}  
Magic Number,KopiLua,Program,F:\newReposMay17\gerich-home_kopilua\lua.cs,loadline,The following statement contains a magic number: for (; ;) {  	/* repeat until gets a complete line */status = Lua.luaL_loadbuffer (L' Lua.lua_tostring (L' 1)' Lua.lua_strlen (L' 1)' "=stdin");  	if (incomplete (L' status) == 0)  		break;  	/* cannot try to add lines? */if (pushline (L' 0) == 0)  		/* no more input? */return -1;  	Lua.lua_pushliteral (L' "\n");  	/* add a new line... */Lua.lua_insert (L' -2);  	/* ...between the two lines */Lua.lua_concat (L' 3);  	/* join them */}  
Magic Number,KopiLua,Program,F:\newReposMay17\gerich-home_kopilua\lua.cs,loadline,The following statement contains a magic number: Lua.lua_insert (L' -2);  
Magic Number,KopiLua,Program,F:\newReposMay17\gerich-home_kopilua\lua.cs,loadline,The following statement contains a magic number: Lua.lua_concat (L' 3);  
Magic Number,KopiLua,Program,F:\newReposMay17\gerich-home_kopilua\lua.cs,collectargs,The following statement contains a magic number: for (i = 1; i < argv.Length; i++) {  	if (argv [i] [0] != '-')  		/* not an option? */return i;  	switch (argv [i] [1]) {  	/* option */case '-':  		if (argv [i].Length != 2)  			return -1;  		return (i + 1) >= argv.Length ? i + 1 : 0;  	case '\0':  		return i;  	case 'i':  		if (argv [i].Length != 2)  			return -1;  		pi = 1;  		if (argv [i].Length != 2)  			return -1;  		pv = 1;  		break;  	case 'v':  		if (argv [i].Length != 2)  			return -1;  		pv = 1;  		break;  	case 'e':  		pe = 1;  		if (argv [i].Length == 2) {  			i++;  			if (argv [i] == null)  				return -1;  		}  		break;  	case 'l':  		if (argv [i].Length == 2) {  			i++;  			if (i >= argv.Length)  				return -1;  		}  		break;  	default:  		return -1;  	/* invalid option */}  }  
Magic Number,KopiLua,Program,F:\newReposMay17\gerich-home_kopilua\lua.cs,collectargs,The following statement contains a magic number: for (i = 1; i < argv.Length; i++) {  	if (argv [i] [0] != '-')  		/* not an option? */return i;  	switch (argv [i] [1]) {  	/* option */case '-':  		if (argv [i].Length != 2)  			return -1;  		return (i + 1) >= argv.Length ? i + 1 : 0;  	case '\0':  		return i;  	case 'i':  		if (argv [i].Length != 2)  			return -1;  		pi = 1;  		if (argv [i].Length != 2)  			return -1;  		pv = 1;  		break;  	case 'v':  		if (argv [i].Length != 2)  			return -1;  		pv = 1;  		break;  	case 'e':  		pe = 1;  		if (argv [i].Length == 2) {  			i++;  			if (argv [i] == null)  				return -1;  		}  		break;  	case 'l':  		if (argv [i].Length == 2) {  			i++;  			if (i >= argv.Length)  				return -1;  		}  		break;  	default:  		return -1;  	/* invalid option */}  }  
Magic Number,KopiLua,Program,F:\newReposMay17\gerich-home_kopilua\lua.cs,collectargs,The following statement contains a magic number: for (i = 1; i < argv.Length; i++) {  	if (argv [i] [0] != '-')  		/* not an option? */return i;  	switch (argv [i] [1]) {  	/* option */case '-':  		if (argv [i].Length != 2)  			return -1;  		return (i + 1) >= argv.Length ? i + 1 : 0;  	case '\0':  		return i;  	case 'i':  		if (argv [i].Length != 2)  			return -1;  		pi = 1;  		if (argv [i].Length != 2)  			return -1;  		pv = 1;  		break;  	case 'v':  		if (argv [i].Length != 2)  			return -1;  		pv = 1;  		break;  	case 'e':  		pe = 1;  		if (argv [i].Length == 2) {  			i++;  			if (argv [i] == null)  				return -1;  		}  		break;  	case 'l':  		if (argv [i].Length == 2) {  			i++;  			if (i >= argv.Length)  				return -1;  		}  		break;  	default:  		return -1;  	/* invalid option */}  }  
Magic Number,KopiLua,Program,F:\newReposMay17\gerich-home_kopilua\lua.cs,collectargs,The following statement contains a magic number: for (i = 1; i < argv.Length; i++) {  	if (argv [i] [0] != '-')  		/* not an option? */return i;  	switch (argv [i] [1]) {  	/* option */case '-':  		if (argv [i].Length != 2)  			return -1;  		return (i + 1) >= argv.Length ? i + 1 : 0;  	case '\0':  		return i;  	case 'i':  		if (argv [i].Length != 2)  			return -1;  		pi = 1;  		if (argv [i].Length != 2)  			return -1;  		pv = 1;  		break;  	case 'v':  		if (argv [i].Length != 2)  			return -1;  		pv = 1;  		break;  	case 'e':  		pe = 1;  		if (argv [i].Length == 2) {  			i++;  			if (argv [i] == null)  				return -1;  		}  		break;  	case 'l':  		if (argv [i].Length == 2) {  			i++;  			if (i >= argv.Length)  				return -1;  		}  		break;  	default:  		return -1;  	/* invalid option */}  }  
Magic Number,KopiLua,Program,F:\newReposMay17\gerich-home_kopilua\lua.cs,collectargs,The following statement contains a magic number: for (i = 1; i < argv.Length; i++) {  	if (argv [i] [0] != '-')  		/* not an option? */return i;  	switch (argv [i] [1]) {  	/* option */case '-':  		if (argv [i].Length != 2)  			return -1;  		return (i + 1) >= argv.Length ? i + 1 : 0;  	case '\0':  		return i;  	case 'i':  		if (argv [i].Length != 2)  			return -1;  		pi = 1;  		if (argv [i].Length != 2)  			return -1;  		pv = 1;  		break;  	case 'v':  		if (argv [i].Length != 2)  			return -1;  		pv = 1;  		break;  	case 'e':  		pe = 1;  		if (argv [i].Length == 2) {  			i++;  			if (argv [i] == null)  				return -1;  		}  		break;  	case 'l':  		if (argv [i].Length == 2) {  			i++;  			if (i >= argv.Length)  				return -1;  		}  		break;  	default:  		return -1;  	/* invalid option */}  }  
Magic Number,KopiLua,Program,F:\newReposMay17\gerich-home_kopilua\lua.cs,collectargs,The following statement contains a magic number: for (i = 1; i < argv.Length; i++) {  	if (argv [i] [0] != '-')  		/* not an option? */return i;  	switch (argv [i] [1]) {  	/* option */case '-':  		if (argv [i].Length != 2)  			return -1;  		return (i + 1) >= argv.Length ? i + 1 : 0;  	case '\0':  		return i;  	case 'i':  		if (argv [i].Length != 2)  			return -1;  		pi = 1;  		if (argv [i].Length != 2)  			return -1;  		pv = 1;  		break;  	case 'v':  		if (argv [i].Length != 2)  			return -1;  		pv = 1;  		break;  	case 'e':  		pe = 1;  		if (argv [i].Length == 2) {  			i++;  			if (argv [i] == null)  				return -1;  		}  		break;  	case 'l':  		if (argv [i].Length == 2) {  			i++;  			if (i >= argv.Length)  				return -1;  		}  		break;  	default:  		return -1;  	/* invalid option */}  }  
Magic Number,KopiLua,Program,F:\newReposMay17\gerich-home_kopilua\lua.cs,collectargs,The following statement contains a magic number: switch (argv [i] [1]) {  /* option */case '-':  	if (argv [i].Length != 2)  		return -1;  	return (i + 1) >= argv.Length ? i + 1 : 0;  case '\0':  	return i;  case 'i':  	if (argv [i].Length != 2)  		return -1;  	pi = 1;  	if (argv [i].Length != 2)  		return -1;  	pv = 1;  	break;  case 'v':  	if (argv [i].Length != 2)  		return -1;  	pv = 1;  	break;  case 'e':  	pe = 1;  	if (argv [i].Length == 2) {  		i++;  		if (argv [i] == null)  			return -1;  	}  	break;  case 'l':  	if (argv [i].Length == 2) {  		i++;  		if (i >= argv.Length)  			return -1;  	}  	break;  default:  	return -1;  /* invalid option */}  
Magic Number,KopiLua,Program,F:\newReposMay17\gerich-home_kopilua\lua.cs,collectargs,The following statement contains a magic number: switch (argv [i] [1]) {  /* option */case '-':  	if (argv [i].Length != 2)  		return -1;  	return (i + 1) >= argv.Length ? i + 1 : 0;  case '\0':  	return i;  case 'i':  	if (argv [i].Length != 2)  		return -1;  	pi = 1;  	if (argv [i].Length != 2)  		return -1;  	pv = 1;  	break;  case 'v':  	if (argv [i].Length != 2)  		return -1;  	pv = 1;  	break;  case 'e':  	pe = 1;  	if (argv [i].Length == 2) {  		i++;  		if (argv [i] == null)  			return -1;  	}  	break;  case 'l':  	if (argv [i].Length == 2) {  		i++;  		if (i >= argv.Length)  			return -1;  	}  	break;  default:  	return -1;  /* invalid option */}  
Magic Number,KopiLua,Program,F:\newReposMay17\gerich-home_kopilua\lua.cs,collectargs,The following statement contains a magic number: switch (argv [i] [1]) {  /* option */case '-':  	if (argv [i].Length != 2)  		return -1;  	return (i + 1) >= argv.Length ? i + 1 : 0;  case '\0':  	return i;  case 'i':  	if (argv [i].Length != 2)  		return -1;  	pi = 1;  	if (argv [i].Length != 2)  		return -1;  	pv = 1;  	break;  case 'v':  	if (argv [i].Length != 2)  		return -1;  	pv = 1;  	break;  case 'e':  	pe = 1;  	if (argv [i].Length == 2) {  		i++;  		if (argv [i] == null)  			return -1;  	}  	break;  case 'l':  	if (argv [i].Length == 2) {  		i++;  		if (i >= argv.Length)  			return -1;  	}  	break;  default:  	return -1;  /* invalid option */}  
Magic Number,KopiLua,Program,F:\newReposMay17\gerich-home_kopilua\lua.cs,collectargs,The following statement contains a magic number: switch (argv [i] [1]) {  /* option */case '-':  	if (argv [i].Length != 2)  		return -1;  	return (i + 1) >= argv.Length ? i + 1 : 0;  case '\0':  	return i;  case 'i':  	if (argv [i].Length != 2)  		return -1;  	pi = 1;  	if (argv [i].Length != 2)  		return -1;  	pv = 1;  	break;  case 'v':  	if (argv [i].Length != 2)  		return -1;  	pv = 1;  	break;  case 'e':  	pe = 1;  	if (argv [i].Length == 2) {  		i++;  		if (argv [i] == null)  			return -1;  	}  	break;  case 'l':  	if (argv [i].Length == 2) {  		i++;  		if (i >= argv.Length)  			return -1;  	}  	break;  default:  	return -1;  /* invalid option */}  
Magic Number,KopiLua,Program,F:\newReposMay17\gerich-home_kopilua\lua.cs,collectargs,The following statement contains a magic number: switch (argv [i] [1]) {  /* option */case '-':  	if (argv [i].Length != 2)  		return -1;  	return (i + 1) >= argv.Length ? i + 1 : 0;  case '\0':  	return i;  case 'i':  	if (argv [i].Length != 2)  		return -1;  	pi = 1;  	if (argv [i].Length != 2)  		return -1;  	pv = 1;  	break;  case 'v':  	if (argv [i].Length != 2)  		return -1;  	pv = 1;  	break;  case 'e':  	pe = 1;  	if (argv [i].Length == 2) {  		i++;  		if (argv [i] == null)  			return -1;  	}  	break;  case 'l':  	if (argv [i].Length == 2) {  		i++;  		if (i >= argv.Length)  			return -1;  	}  	break;  default:  	return -1;  /* invalid option */}  
Magic Number,KopiLua,Program,F:\newReposMay17\gerich-home_kopilua\lua.cs,collectargs,The following statement contains a magic number: switch (argv [i] [1]) {  /* option */case '-':  	if (argv [i].Length != 2)  		return -1;  	return (i + 1) >= argv.Length ? i + 1 : 0;  case '\0':  	return i;  case 'i':  	if (argv [i].Length != 2)  		return -1;  	pi = 1;  	if (argv [i].Length != 2)  		return -1;  	pv = 1;  	break;  case 'v':  	if (argv [i].Length != 2)  		return -1;  	pv = 1;  	break;  case 'e':  	pe = 1;  	if (argv [i].Length == 2) {  		i++;  		if (argv [i] == null)  			return -1;  	}  	break;  case 'l':  	if (argv [i].Length == 2) {  		i++;  		if (i >= argv.Length)  			return -1;  	}  	break;  default:  	return -1;  /* invalid option */}  
Magic Number,KopiLua,Program,F:\newReposMay17\gerich-home_kopilua\lua.cs,collectargs,The following statement contains a magic number: if (argv [i].Length != 2)  	return -1;  
Magic Number,KopiLua,Program,F:\newReposMay17\gerich-home_kopilua\lua.cs,collectargs,The following statement contains a magic number: if (argv [i].Length != 2)  	return -1;  
Magic Number,KopiLua,Program,F:\newReposMay17\gerich-home_kopilua\lua.cs,collectargs,The following statement contains a magic number: if (argv [i].Length != 2)  	return -1;  
Magic Number,KopiLua,Program,F:\newReposMay17\gerich-home_kopilua\lua.cs,collectargs,The following statement contains a magic number: if (argv [i].Length != 2)  	return -1;  
Magic Number,KopiLua,Program,F:\newReposMay17\gerich-home_kopilua\lua.cs,collectargs,The following statement contains a magic number: if (argv [i].Length == 2) {  	i++;  	if (argv [i] == null)  		return -1;  }  
Magic Number,KopiLua,Program,F:\newReposMay17\gerich-home_kopilua\lua.cs,collectargs,The following statement contains a magic number: if (argv [i].Length == 2) {  	i++;  	if (i >= argv.Length)  		return -1;  }  
Magic Number,KopiLua,Program,F:\newReposMay17\gerich-home_kopilua\lua.cs,runargs,The following statement contains a magic number: for (i = 1; i < n; i++) {  	if (argv [i] == null)  		continue;  	Lua.lua_assert (argv [i] [0] == '-');  	switch (argv [i] [1]) {  	/* option */case 'e': {  		string chunk = argv [i].Substring (2);  		if (chunk == "")  			chunk = argv [++i];  		Lua.lua_assert (chunk != null);  		if (dostring (L' chunk' "=(command line)") != 0)  			return 1;  		break;  	}  	case 'l': {  		string filename = argv [i].Substring (2);  		if (filename == "")  			filename = argv [++i];  		Lua.lua_assert (filename != null);  		if (dolibrary (L' filename) != 0)  			return 1;  		/* stop if file fails */break;  	}  	default:  		break;  	}  }  
Magic Number,KopiLua,Program,F:\newReposMay17\gerich-home_kopilua\lua.cs,runargs,The following statement contains a magic number: for (i = 1; i < n; i++) {  	if (argv [i] == null)  		continue;  	Lua.lua_assert (argv [i] [0] == '-');  	switch (argv [i] [1]) {  	/* option */case 'e': {  		string chunk = argv [i].Substring (2);  		if (chunk == "")  			chunk = argv [++i];  		Lua.lua_assert (chunk != null);  		if (dostring (L' chunk' "=(command line)") != 0)  			return 1;  		break;  	}  	case 'l': {  		string filename = argv [i].Substring (2);  		if (filename == "")  			filename = argv [++i];  		Lua.lua_assert (filename != null);  		if (dolibrary (L' filename) != 0)  			return 1;  		/* stop if file fails */break;  	}  	default:  		break;  	}  }  
Magic Number,KopiLua,Program,F:\newReposMay17\gerich-home_kopilua\lua.cs,runargs,The following statement contains a magic number: switch (argv [i] [1]) {  /* option */case 'e': {  	string chunk = argv [i].Substring (2);  	if (chunk == "")  		chunk = argv [++i];  	Lua.lua_assert (chunk != null);  	if (dostring (L' chunk' "=(command line)") != 0)  		return 1;  	break;  }  case 'l': {  	string filename = argv [i].Substring (2);  	if (filename == "")  		filename = argv [++i];  	Lua.lua_assert (filename != null);  	if (dolibrary (L' filename) != 0)  		return 1;  	/* stop if file fails */break;  }  default:  	break;  }  
Magic Number,KopiLua,Program,F:\newReposMay17\gerich-home_kopilua\lua.cs,runargs,The following statement contains a magic number: switch (argv [i] [1]) {  /* option */case 'e': {  	string chunk = argv [i].Substring (2);  	if (chunk == "")  		chunk = argv [++i];  	Lua.lua_assert (chunk != null);  	if (dostring (L' chunk' "=(command line)") != 0)  		return 1;  	break;  }  case 'l': {  	string filename = argv [i].Substring (2);  	if (filename == "")  		filename = argv [++i];  	Lua.lua_assert (filename != null);  	if (dolibrary (L' filename) != 0)  		return 1;  	/* stop if file fails */break;  }  default:  	break;  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,lua_settable,The following statement contains a magic number: api_checknelems (L' 2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,lua_settable,The following statement contains a magic number: luaV_settable (L' t' L.top - 2' L.top - 1);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,lua_settable,The following statement contains a magic number: L.top -= 2;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,lua_rawset,The following statement contains a magic number: api_checknelems (L' 2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,lua_rawset,The following statement contains a magic number: setobj2t (L' luaH_set (L' hvalue (t)' L.top - 2)' L.top - 1);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,lua_rawset,The following statement contains a magic number: L.top -= 2;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,f_Ccall,The following statement contains a magic number: luaD_call (L' L.top - 2' 0);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,lua_gc,The following statement contains a magic number: switch (what) {  case LUA_GCSTOP: {  	g.GCthreshold = MAX_LUMEM;  	break;  }  case LUA_GCRESTART: {  	g.GCthreshold = g.totalbytes;  	break;  }  case LUA_GCCOLLECT: {  	luaC_fullgc (L);  	break;  }  case LUA_GCCOUNT: {  	/* GC values are expressed in Kbytes: #bytes/2^10 */res = cast_int (g.totalbytes >> 10);  	break;  }  case LUA_GCCOUNTB: {  	res = cast_int (g.totalbytes & 0x3ff);  	break;  }  case LUA_GCSTEP: {  	lu_mem a = ((lu_mem)data << 10);  	if (a <= g.totalbytes)  		g.GCthreshold = (uint)(g.totalbytes - a);  	else  		g.GCthreshold = 0;  	while (g.GCthreshold <= g.totalbytes) {  		luaC_step (L);  		if (g.gcstate == GCSpause) {  			/* end of cycle? */res = 1;  			/* signal it */break;  		}  	}  	break;  }  case LUA_GCSETPAUSE: {  	res = g.gcpause;  	g.gcpause = data;  	break;  }  case LUA_GCSETSTEPMUL: {  	res = g.gcstepmul;  	g.gcstepmul = data;  	break;  }  default:  	res = -1;  	/* invalid option */break;  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,lua_gc,The following statement contains a magic number: switch (what) {  case LUA_GCSTOP: {  	g.GCthreshold = MAX_LUMEM;  	break;  }  case LUA_GCRESTART: {  	g.GCthreshold = g.totalbytes;  	break;  }  case LUA_GCCOLLECT: {  	luaC_fullgc (L);  	break;  }  case LUA_GCCOUNT: {  	/* GC values are expressed in Kbytes: #bytes/2^10 */res = cast_int (g.totalbytes >> 10);  	break;  }  case LUA_GCCOUNTB: {  	res = cast_int (g.totalbytes & 0x3ff);  	break;  }  case LUA_GCSTEP: {  	lu_mem a = ((lu_mem)data << 10);  	if (a <= g.totalbytes)  		g.GCthreshold = (uint)(g.totalbytes - a);  	else  		g.GCthreshold = 0;  	while (g.GCthreshold <= g.totalbytes) {  		luaC_step (L);  		if (g.gcstate == GCSpause) {  			/* end of cycle? */res = 1;  			/* signal it */break;  		}  	}  	break;  }  case LUA_GCSETPAUSE: {  	res = g.gcpause;  	g.gcpause = data;  	break;  }  case LUA_GCSETSTEPMUL: {  	res = g.gcstepmul;  	g.gcstepmul = data;  	break;  }  default:  	res = -1;  	/* invalid option */break;  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,lua_gc,The following statement contains a magic number: res = cast_int (g.totalbytes >> 10);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,lua_concat,The following statement contains a magic number: if (n >= 2) {  	luaC_checkGC (L);  	luaV_concat (L' n' cast_int (L.top - L.base_) - 1);  	L.top -= (n - 1);  } else if (n == 0) {  	/* push empty string */setsvalue2s (L' L.top' luaS_newlstr (L' ""' 0));  	api_incr_top (L);  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaL_error,The following statement contains a magic number: lua_concat (L' 2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaL_checkudata,The following statement contains a magic number: if (p != null) {  	/* value is a userdata? */if (lua_getmetatable (L' ud) != 0) {  		/* does it have a metatable? */lua_getfield (L' LUA_REGISTRYINDEX' tname);  		/* get correct metatable */if (lua_rawequal (L' -1' -2) != 0) {  			/* does it have the correct mt? */lua_pop (L' 2);  			/* remove both metatables */return p;  		}  	}  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaL_checkudata,The following statement contains a magic number: if (p != null) {  	/* value is a userdata? */if (lua_getmetatable (L' ud) != 0) {  		/* does it have a metatable? */lua_getfield (L' LUA_REGISTRYINDEX' tname);  		/* get correct metatable */if (lua_rawequal (L' -1' -2) != 0) {  			/* does it have the correct mt? */lua_pop (L' 2);  			/* remove both metatables */return p;  		}  	}  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaL_checkudata,The following statement contains a magic number: if (lua_getmetatable (L' ud) != 0) {  	/* does it have a metatable? */lua_getfield (L' LUA_REGISTRYINDEX' tname);  	/* get correct metatable */if (lua_rawequal (L' -1' -2) != 0) {  		/* does it have the correct mt? */lua_pop (L' 2);  		/* remove both metatables */return p;  	}  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaL_checkudata,The following statement contains a magic number: if (lua_getmetatable (L' ud) != 0) {  	/* does it have a metatable? */lua_getfield (L' LUA_REGISTRYINDEX' tname);  	/* get correct metatable */if (lua_rawequal (L' -1' -2) != 0) {  		/* does it have the correct mt? */lua_pop (L' 2);  		/* remove both metatables */return p;  	}  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaL_checkudata,The following statement contains a magic number: if (lua_rawequal (L' -1' -2) != 0) {  	/* does it have the correct mt? */lua_pop (L' 2);  	/* remove both metatables */return p;  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaL_checkudata,The following statement contains a magic number: if (lua_rawequal (L' -1' -2) != 0) {  	/* does it have the correct mt? */lua_pop (L' 2);  	/* remove both metatables */return p;  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaL_checkudata,The following statement contains a magic number: lua_pop (L' 2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaL_getmetafield,The following statement contains a magic number: lua_rawget (L' -2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaL_getmetafield,The following statement contains a magic number: if (lua_isnil (L' -1)) {  	lua_pop (L' 2);  	/* remove metatable and metafield */return 0;  } else {  	lua_remove (L' -2);  	/* remove only metatable */return 1;  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaL_getmetafield,The following statement contains a magic number: if (lua_isnil (L' -1)) {  	lua_pop (L' 2);  	/* remove metatable and metafield */return 0;  } else {  	lua_remove (L' -2);  	/* remove only metatable */return 1;  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaL_getmetafield,The following statement contains a magic number: lua_pop (L' 2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaL_getmetafield,The following statement contains a magic number: lua_remove (L' -2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaI_openlib,The following statement contains a magic number: if (libname != null) {  	int size = libsize (l);  	/* check whether lib already exists */luaL_findtable (L' LUA_REGISTRYINDEX' "_LOADED"' 1);  	lua_getfield (L' -1' libname);  	/* get _LOADED[libname] */if (!lua_istable (L' -1)) {  		/* not found? */lua_pop (L' 1);  		/* remove previous result *//* try global variable (and create one if it does not exist) */if (luaL_findtable (L' LUA_GLOBALSINDEX' libname' size) != null)  			luaL_error (L' "name conflict for module " + LUA_QS' libname);  		lua_pushvalue (L' -1);  		lua_setfield (L' -3' libname);  		/* _LOADED[libname] = new table */}  	lua_remove (L' -2);  	/* remove _LOADED table */lua_insert (L' -(nup + 1));  	/* move library table to below upvalues */}  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaI_openlib,The following statement contains a magic number: if (libname != null) {  	int size = libsize (l);  	/* check whether lib already exists */luaL_findtable (L' LUA_REGISTRYINDEX' "_LOADED"' 1);  	lua_getfield (L' -1' libname);  	/* get _LOADED[libname] */if (!lua_istable (L' -1)) {  		/* not found? */lua_pop (L' 1);  		/* remove previous result *//* try global variable (and create one if it does not exist) */if (luaL_findtable (L' LUA_GLOBALSINDEX' libname' size) != null)  			luaL_error (L' "name conflict for module " + LUA_QS' libname);  		lua_pushvalue (L' -1);  		lua_setfield (L' -3' libname);  		/* _LOADED[libname] = new table */}  	lua_remove (L' -2);  	/* remove _LOADED table */lua_insert (L' -(nup + 1));  	/* move library table to below upvalues */}  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaI_openlib,The following statement contains a magic number: if (!lua_istable (L' -1)) {  	/* not found? */lua_pop (L' 1);  	/* remove previous result *//* try global variable (and create one if it does not exist) */if (luaL_findtable (L' LUA_GLOBALSINDEX' libname' size) != null)  		luaL_error (L' "name conflict for module " + LUA_QS' libname);  	lua_pushvalue (L' -1);  	lua_setfield (L' -3' libname);  	/* _LOADED[libname] = new table */}  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaI_openlib,The following statement contains a magic number: lua_setfield (L' -3' libname);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaI_openlib,The following statement contains a magic number: lua_remove (L' -2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaI_openlib,The following statement contains a magic number: for (; l [reg_num].name != null; reg_num++) {  	int i;  	for (i = 0; i < nup; i++)  		/* copy upvalues to the top */lua_pushvalue (L' -nup);  	lua_pushcclosure (L' l [reg_num].func' nup);  	lua_setfield (L' -(nup + 2)' l [reg_num].name);  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaI_openlib,The following statement contains a magic number: lua_setfield (L' -(nup + 2)' l [reg_num].name);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaL_findtable,The following statement contains a magic number: do {  	e = strchr (fname' '.');  	if (e == null)  		e = fname + strlen (fname);  	lua_pushlstring (L' fname' (uint)(e - fname));  	lua_rawget (L' -2);  	if (lua_isnil (L' -1)) {  		/* no such field? */lua_pop (L' 1);  		/* remove this nil */lua_createtable (L' 0' (e == '.' ? 1 : szhint));  		/* new table for field */lua_pushlstring (L' fname' (uint)(e - fname));  		lua_pushvalue (L' -2);  		lua_settable (L' -4);  		/* set new table into field */} else if (!lua_istable (L' -1)) {  		/* field has a non-table value? */lua_pop (L' 2);  		/* remove table and value */return fname;  		/* return problematic part of the name */}  	lua_remove (L' -2);  	/* remove previous table */fname = e + 1;  } while (e == '.');  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaL_findtable,The following statement contains a magic number: do {  	e = strchr (fname' '.');  	if (e == null)  		e = fname + strlen (fname);  	lua_pushlstring (L' fname' (uint)(e - fname));  	lua_rawget (L' -2);  	if (lua_isnil (L' -1)) {  		/* no such field? */lua_pop (L' 1);  		/* remove this nil */lua_createtable (L' 0' (e == '.' ? 1 : szhint));  		/* new table for field */lua_pushlstring (L' fname' (uint)(e - fname));  		lua_pushvalue (L' -2);  		lua_settable (L' -4);  		/* set new table into field */} else if (!lua_istable (L' -1)) {  		/* field has a non-table value? */lua_pop (L' 2);  		/* remove table and value */return fname;  		/* return problematic part of the name */}  	lua_remove (L' -2);  	/* remove previous table */fname = e + 1;  } while (e == '.');  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaL_findtable,The following statement contains a magic number: do {  	e = strchr (fname' '.');  	if (e == null)  		e = fname + strlen (fname);  	lua_pushlstring (L' fname' (uint)(e - fname));  	lua_rawget (L' -2);  	if (lua_isnil (L' -1)) {  		/* no such field? */lua_pop (L' 1);  		/* remove this nil */lua_createtable (L' 0' (e == '.' ? 1 : szhint));  		/* new table for field */lua_pushlstring (L' fname' (uint)(e - fname));  		lua_pushvalue (L' -2);  		lua_settable (L' -4);  		/* set new table into field */} else if (!lua_istable (L' -1)) {  		/* field has a non-table value? */lua_pop (L' 2);  		/* remove table and value */return fname;  		/* return problematic part of the name */}  	lua_remove (L' -2);  	/* remove previous table */fname = e + 1;  } while (e == '.');  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaL_findtable,The following statement contains a magic number: do {  	e = strchr (fname' '.');  	if (e == null)  		e = fname + strlen (fname);  	lua_pushlstring (L' fname' (uint)(e - fname));  	lua_rawget (L' -2);  	if (lua_isnil (L' -1)) {  		/* no such field? */lua_pop (L' 1);  		/* remove this nil */lua_createtable (L' 0' (e == '.' ? 1 : szhint));  		/* new table for field */lua_pushlstring (L' fname' (uint)(e - fname));  		lua_pushvalue (L' -2);  		lua_settable (L' -4);  		/* set new table into field */} else if (!lua_istable (L' -1)) {  		/* field has a non-table value? */lua_pop (L' 2);  		/* remove table and value */return fname;  		/* return problematic part of the name */}  	lua_remove (L' -2);  	/* remove previous table */fname = e + 1;  } while (e == '.');  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaL_findtable,The following statement contains a magic number: do {  	e = strchr (fname' '.');  	if (e == null)  		e = fname + strlen (fname);  	lua_pushlstring (L' fname' (uint)(e - fname));  	lua_rawget (L' -2);  	if (lua_isnil (L' -1)) {  		/* no such field? */lua_pop (L' 1);  		/* remove this nil */lua_createtable (L' 0' (e == '.' ? 1 : szhint));  		/* new table for field */lua_pushlstring (L' fname' (uint)(e - fname));  		lua_pushvalue (L' -2);  		lua_settable (L' -4);  		/* set new table into field */} else if (!lua_istable (L' -1)) {  		/* field has a non-table value? */lua_pop (L' 2);  		/* remove table and value */return fname;  		/* return problematic part of the name */}  	lua_remove (L' -2);  	/* remove previous table */fname = e + 1;  } while (e == '.');  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaL_findtable,The following statement contains a magic number: lua_rawget (L' -2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaL_findtable,The following statement contains a magic number: if (lua_isnil (L' -1)) {  	/* no such field? */lua_pop (L' 1);  	/* remove this nil */lua_createtable (L' 0' (e == '.' ? 1 : szhint));  	/* new table for field */lua_pushlstring (L' fname' (uint)(e - fname));  	lua_pushvalue (L' -2);  	lua_settable (L' -4);  	/* set new table into field */} else if (!lua_istable (L' -1)) {  	/* field has a non-table value? */lua_pop (L' 2);  	/* remove table and value */return fname;  	/* return problematic part of the name */}  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaL_findtable,The following statement contains a magic number: if (lua_isnil (L' -1)) {  	/* no such field? */lua_pop (L' 1);  	/* remove this nil */lua_createtable (L' 0' (e == '.' ? 1 : szhint));  	/* new table for field */lua_pushlstring (L' fname' (uint)(e - fname));  	lua_pushvalue (L' -2);  	lua_settable (L' -4);  	/* set new table into field */} else if (!lua_istable (L' -1)) {  	/* field has a non-table value? */lua_pop (L' 2);  	/* remove table and value */return fname;  	/* return problematic part of the name */}  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaL_findtable,The following statement contains a magic number: if (lua_isnil (L' -1)) {  	/* no such field? */lua_pop (L' 1);  	/* remove this nil */lua_createtable (L' 0' (e == '.' ? 1 : szhint));  	/* new table for field */lua_pushlstring (L' fname' (uint)(e - fname));  	lua_pushvalue (L' -2);  	lua_settable (L' -4);  	/* set new table into field */} else if (!lua_istable (L' -1)) {  	/* field has a non-table value? */lua_pop (L' 2);  	/* remove table and value */return fname;  	/* return problematic part of the name */}  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaL_findtable,The following statement contains a magic number: lua_pushvalue (L' -2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaL_findtable,The following statement contains a magic number: lua_settable (L' -4);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaL_findtable,The following statement contains a magic number: if (!lua_istable (L' -1)) {  	/* field has a non-table value? */lua_pop (L' 2);  	/* remove table and value */return fname;  	/* return problematic part of the name */}  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaL_findtable,The following statement contains a magic number: lua_pop (L' 2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaL_findtable,The following statement contains a magic number: lua_remove (L' -2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaL_addvalue,The following statement contains a magic number: if (vl <= bufffree (B)) {  	/* fit into buffer? */CharPtr dst = new CharPtr (B.buffer.chars' B.buffer.index + B.p);  	CharPtr src = new CharPtr (s.chars' s.index);  	for (uint i = 0; i < vl; i++)  		dst [i] = src [i];  	B.p += (int)vl;  	lua_pop (L' 1);  	/* remove from stack */} else {  	if (emptybuffer (B) != 0)  		lua_insert (L' -2);  	/* put buffer before new value */B.lvl++;  	/* add new value into B stack */adjuststack (B);  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaL_addvalue,The following statement contains a magic number: if (emptybuffer (B) != 0)  	lua_insert (L' -2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaL_addvalue,The following statement contains a magic number: lua_insert (L' -2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaB_tonumber,The following statement contains a magic number: if (base_ == 10) {  	/* standard conversion */luaL_checkany (L' 1);  	if (lua_isnumber (L' 1) != 0) {  		lua_pushnumber (L' lua_tonumber (L' 1));  		return 1;  	}  } else {  	CharPtr s1 = luaL_checkstring (L' 1);  	CharPtr s2;  	ulong n;  	luaL_argcheck (L' 2 <= base_ && base_ <= 36' 2' "base out of range");  	n = strtoul (s1' out s2' base_);  	if (s1 != s2) {  		/* at least one valid digit? */while (isspace ((byte)(s2 [0])))  			s2 = s2.next ();  		/* skip trailing spaces */if (s2 [0] == '\0') {  			/* no invalid trailing characters? */lua_pushnumber (L' (lua_Number)n);  			return 1;  		}  	}  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaB_tonumber,The following statement contains a magic number: if (base_ == 10) {  	/* standard conversion */luaL_checkany (L' 1);  	if (lua_isnumber (L' 1) != 0) {  		lua_pushnumber (L' lua_tonumber (L' 1));  		return 1;  	}  } else {  	CharPtr s1 = luaL_checkstring (L' 1);  	CharPtr s2;  	ulong n;  	luaL_argcheck (L' 2 <= base_ && base_ <= 36' 2' "base out of range");  	n = strtoul (s1' out s2' base_);  	if (s1 != s2) {  		/* at least one valid digit? */while (isspace ((byte)(s2 [0])))  			s2 = s2.next ();  		/* skip trailing spaces */if (s2 [0] == '\0') {  			/* no invalid trailing characters? */lua_pushnumber (L' (lua_Number)n);  			return 1;  		}  	}  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaB_tonumber,The following statement contains a magic number: if (base_ == 10) {  	/* standard conversion */luaL_checkany (L' 1);  	if (lua_isnumber (L' 1) != 0) {  		lua_pushnumber (L' lua_tonumber (L' 1));  		return 1;  	}  } else {  	CharPtr s1 = luaL_checkstring (L' 1);  	CharPtr s2;  	ulong n;  	luaL_argcheck (L' 2 <= base_ && base_ <= 36' 2' "base out of range");  	n = strtoul (s1' out s2' base_);  	if (s1 != s2) {  		/* at least one valid digit? */while (isspace ((byte)(s2 [0])))  			s2 = s2.next ();  		/* skip trailing spaces */if (s2 [0] == '\0') {  			/* no invalid trailing characters? */lua_pushnumber (L' (lua_Number)n);  			return 1;  		}  	}  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaB_tonumber,The following statement contains a magic number: if (base_ == 10) {  	/* standard conversion */luaL_checkany (L' 1);  	if (lua_isnumber (L' 1) != 0) {  		lua_pushnumber (L' lua_tonumber (L' 1));  		return 1;  	}  } else {  	CharPtr s1 = luaL_checkstring (L' 1);  	CharPtr s2;  	ulong n;  	luaL_argcheck (L' 2 <= base_ && base_ <= 36' 2' "base out of range");  	n = strtoul (s1' out s2' base_);  	if (s1 != s2) {  		/* at least one valid digit? */while (isspace ((byte)(s2 [0])))  			s2 = s2.next ();  		/* skip trailing spaces */if (s2 [0] == '\0') {  			/* no invalid trailing characters? */lua_pushnumber (L' (lua_Number)n);  			return 1;  		}  	}  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaB_tonumber,The following statement contains a magic number: luaL_argcheck (L' 2 <= base_ && base_ <= 36' 2' "base out of range");  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaB_tonumber,The following statement contains a magic number: luaL_argcheck (L' 2 <= base_ && base_ <= 36' 2' "base out of range");  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaB_tonumber,The following statement contains a magic number: luaL_argcheck (L' 2 <= base_ && base_ <= 36' 2' "base out of range");  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaB_error,The following statement contains a magic number: if ((lua_isstring (L' 1) != 0) && (level > 0)) {  	/* add extra information? */luaL_where (L' level);  	lua_pushvalue (L' 1);  	lua_concat (L' 2);  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaB_error,The following statement contains a magic number: lua_concat (L' 2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaB_setmetatable,The following statement contains a magic number: luaL_argcheck (L' t == LUA_TNIL || t == LUA_TTABLE' 2' "nil or table expected");  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaB_setmetatable,The following statement contains a magic number: lua_settop (L' 2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaB_setfenv,The following statement contains a magic number: luaL_checktype (L' 2' LUA_TTABLE);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaB_setfenv,The following statement contains a magic number: lua_pushvalue (L' 2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaB_setfenv,The following statement contains a magic number: if ((lua_isnumber (L' 1) != 0) && (lua_tonumber (L' 1) == 0)) {  	/* change environment of current thread */lua_pushthread (L);  	lua_insert (L' -2);  	lua_setfenv (L' -2);  	return 0;  } else if (lua_iscfunction (L' -2) || lua_setfenv (L' -2) == 0)  	luaL_error (L' LUA_QL ("setfenv") + " cannot change environment of given object");  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaB_setfenv,The following statement contains a magic number: if ((lua_isnumber (L' 1) != 0) && (lua_tonumber (L' 1) == 0)) {  	/* change environment of current thread */lua_pushthread (L);  	lua_insert (L' -2);  	lua_setfenv (L' -2);  	return 0;  } else if (lua_iscfunction (L' -2) || lua_setfenv (L' -2) == 0)  	luaL_error (L' LUA_QL ("setfenv") + " cannot change environment of given object");  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaB_setfenv,The following statement contains a magic number: if ((lua_isnumber (L' 1) != 0) && (lua_tonumber (L' 1) == 0)) {  	/* change environment of current thread */lua_pushthread (L);  	lua_insert (L' -2);  	lua_setfenv (L' -2);  	return 0;  } else if (lua_iscfunction (L' -2) || lua_setfenv (L' -2) == 0)  	luaL_error (L' LUA_QL ("setfenv") + " cannot change environment of given object");  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaB_setfenv,The following statement contains a magic number: if ((lua_isnumber (L' 1) != 0) && (lua_tonumber (L' 1) == 0)) {  	/* change environment of current thread */lua_pushthread (L);  	lua_insert (L' -2);  	lua_setfenv (L' -2);  	return 0;  } else if (lua_iscfunction (L' -2) || lua_setfenv (L' -2) == 0)  	luaL_error (L' LUA_QL ("setfenv") + " cannot change environment of given object");  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaB_setfenv,The following statement contains a magic number: lua_insert (L' -2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaB_setfenv,The following statement contains a magic number: lua_setfenv (L' -2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaB_setfenv,The following statement contains a magic number: if (lua_iscfunction (L' -2) || lua_setfenv (L' -2) == 0)  	luaL_error (L' LUA_QL ("setfenv") + " cannot change environment of given object");  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaB_setfenv,The following statement contains a magic number: if (lua_iscfunction (L' -2) || lua_setfenv (L' -2) == 0)  	luaL_error (L' LUA_QL ("setfenv") + " cannot change environment of given object");  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaB_rawequal,The following statement contains a magic number: luaL_checkany (L' 2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaB_rawequal,The following statement contains a magic number: lua_pushboolean (L' lua_rawequal (L' 1' 2));  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaB_rawget,The following statement contains a magic number: luaL_checkany (L' 2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaB_rawget,The following statement contains a magic number: lua_settop (L' 2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaB_rawset,The following statement contains a magic number: luaL_checkany (L' 2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaB_rawset,The following statement contains a magic number: luaL_checkany (L' 3);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaB_rawset,The following statement contains a magic number: lua_settop (L' 3);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaB_collectgarbage,The following statement contains a magic number: switch (optsnum [o]) {  case LUA_GCCOUNT: {  	int b = lua_gc (L' LUA_GCCOUNTB' 0);  	lua_pushnumber (L' res + ((lua_Number)b / 1024));  	return 1;  }  case LUA_GCSTEP: {  	lua_pushboolean (L' res);  	return 1;  }  default: {  	lua_pushnumber (L' res);  	return 1;  }  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaB_collectgarbage,The following statement contains a magic number: lua_pushnumber (L' res + ((lua_Number)b / 1024));  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaB_next,The following statement contains a magic number: lua_settop (L' 2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaB_next,The following statement contains a magic number: if (lua_next (L' 1) != 0)  	return 2;  else {  	lua_pushnil (L);  	return 1;  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaB_next,The following statement contains a magic number: return 2;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaB_pairs,The following statement contains a magic number: return 3;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,ipairsaux,The following statement contains a magic number: return (lua_isnil (L' -1)) ? 0 : 2;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaB_ipairs,The following statement contains a magic number: return 3;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,load_aux,The following statement contains a magic number: if (status == 0)  	/* OK? */return 1;  else {  	lua_pushnil (L);  	lua_insert (L' -2);  	/* put before error message */return 2;  	/* return nil plus error message */}  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,load_aux,The following statement contains a magic number: if (status == 0)  	/* OK? */return 1;  else {  	lua_pushnil (L);  	lua_insert (L' -2);  	/* put before error message */return 2;  	/* return nil plus error message */}  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,load_aux,The following statement contains a magic number: lua_insert (L' -2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,load_aux,The following statement contains a magic number: return 2;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,generic_reader,The following statement contains a magic number: luaL_checkstack (L' 2' "too many nested functions");  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,generic_reader,The following statement contains a magic number: if (lua_isnil (L' -1)) {  	size = 0;  	return null;  } else if (lua_isstring (L' -1) != 0) {  	lua_replace (L' 3);  	/* save string in a reserved stack slot */return lua_tolstring (L' 3' out size);  } else {  	size = 0;  	luaL_error (L' "reader function must return a string");  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,generic_reader,The following statement contains a magic number: if (lua_isnil (L' -1)) {  	size = 0;  	return null;  } else if (lua_isstring (L' -1) != 0) {  	lua_replace (L' 3);  	/* save string in a reserved stack slot */return lua_tolstring (L' 3' out size);  } else {  	size = 0;  	luaL_error (L' "reader function must return a string");  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,generic_reader,The following statement contains a magic number: if (lua_isstring (L' -1) != 0) {  	lua_replace (L' 3);  	/* save string in a reserved stack slot */return lua_tolstring (L' 3' out size);  } else {  	size = 0;  	luaL_error (L' "reader function must return a string");  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,generic_reader,The following statement contains a magic number: if (lua_isstring (L' -1) != 0) {  	lua_replace (L' 3);  	/* save string in a reserved stack slot */return lua_tolstring (L' 3' out size);  } else {  	size = 0;  	luaL_error (L' "reader function must return a string");  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,generic_reader,The following statement contains a magic number: lua_replace (L' 3);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,generic_reader,The following statement contains a magic number: return lua_tolstring (L' 3' out size);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaB_load,The following statement contains a magic number: lua_settop (L' 3);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaB_assert,The following statement contains a magic number: if (lua_toboolean (L' 1) == 0)  	return luaL_error (L' "%s"' luaL_optstring (L' 2' "assertion failed!"));  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaB_assert,The following statement contains a magic number: return luaL_error (L' "%s"' luaL_optstring (L' 2' "assertion failed!"));  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaB_unpack,The following statement contains a magic number: i = luaL_optint (L' 2' 1);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaB_unpack,The following statement contains a magic number: e = luaL_opt_integer (L' luaL_checkint' 3' luaL_getn (L' 1));  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaB_xpcall,The following statement contains a magic number: luaL_checkany (L' 2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaB_xpcall,The following statement contains a magic number: lua_settop (L' 2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaB_newproxy,The following statement contains a magic number: lua_setmetatable (L' 2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaB_coresume,The following statement contains a magic number: if (r < 0) {  	lua_pushboolean (L' 0);  	lua_insert (L' -2);  	return 2;  	/* return false + error message */} else {  	lua_pushboolean (L' 1);  	lua_insert (L' -(r + 1));  	return r + 1;  	/* return true + `resume' returns */}  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaB_coresume,The following statement contains a magic number: if (r < 0) {  	lua_pushboolean (L' 0);  	lua_insert (L' -2);  	return 2;  	/* return false + error message */} else {  	lua_pushboolean (L' 1);  	lua_insert (L' -(r + 1));  	return r + 1;  	/* return true + `resume' returns */}  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaB_coresume,The following statement contains a magic number: lua_insert (L' -2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaB_coresume,The following statement contains a magic number: return 2;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaB_auxwrap,The following statement contains a magic number: if (r < 0) {  	if (lua_isstring (L' -1) != 0) {  		/* error object is a string? */luaL_where (L' 1);  		/* add extra info */lua_insert (L' -2);  		lua_concat (L' 2);  	}  	lua_error (L);  	/* propagate error */}  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaB_auxwrap,The following statement contains a magic number: if (r < 0) {  	if (lua_isstring (L' -1) != 0) {  		/* error object is a string? */luaL_where (L' 1);  		/* add extra info */lua_insert (L' -2);  		lua_concat (L' 2);  	}  	lua_error (L);  	/* propagate error */}  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaB_auxwrap,The following statement contains a magic number: if (lua_isstring (L' -1) != 0) {  	/* error object is a string? */luaL_where (L' 1);  	/* add extra info */lua_insert (L' -2);  	lua_concat (L' 2);  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaB_auxwrap,The following statement contains a magic number: if (lua_isstring (L' -1) != 0) {  	/* error object is a string? */luaL_where (L' 1);  	/* add extra info */lua_insert (L' -2);  	lua_concat (L' 2);  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaB_auxwrap,The following statement contains a magic number: lua_insert (L' -2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaB_auxwrap,The following statement contains a magic number: lua_concat (L' 2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,auxopen,The following statement contains a magic number: lua_setfield (L' -2' name);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,base_open,The following statement contains a magic number: lua_setmetatable (L' -2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,base_open,The following statement contains a magic number: lua_setfield (L' -2' "__mode");  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaopen_base,The following statement contains a magic number: return 2;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaK_setoneret,The following statement contains a magic number: if (e.k == expkind.VCALL) {  	/* expression is an open function call? */e.k = expkind.VNONRELOC;  	e.u.s.info = GETARG_A (getcode (fs' e));  } else if (e.k == expkind.VVARARG) {  	SETARG_B (getcode (fs' e)' 2);  	e.k = expkind.VRELOCABLE;  	/* can relocate its simple result */}  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaK_setoneret,The following statement contains a magic number: if (e.k == expkind.VVARARG) {  	SETARG_B (getcode (fs' e)' 2);  	e.k = expkind.VRELOCABLE;  	/* can relocate its simple result */}  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaK_setoneret,The following statement contains a magic number: SETARG_B (getcode (fs' e)' 2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaK_self,The following statement contains a magic number: luaK_reserveregs (fs' 2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,db_setmetatable,The following statement contains a magic number: luaL_argcheck (L' t == LUA_TNIL || t == LUA_TTABLE' 2' "nil or table expected");  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,db_setmetatable,The following statement contains a magic number: lua_settop (L' 2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,db_setfenv,The following statement contains a magic number: luaL_checktype (L' 2' LUA_TTABLE);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,db_setfenv,The following statement contains a magic number: lua_settop (L' 2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,settabss,The following statement contains a magic number: lua_setfield (L' -2' i);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,settabsi,The following statement contains a magic number: lua_setfield (L' -2' i);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,treatstackoption,The following statement contains a magic number: if (L == L1) {  	lua_pushvalue (L' -2);  	lua_remove (L' -3);  } else  	lua_xmove (L1' L' 1);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,treatstackoption,The following statement contains a magic number: if (L == L1) {  	lua_pushvalue (L' -2);  	lua_remove (L' -3);  } else  	lua_xmove (L1' L' 1);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,treatstackoption,The following statement contains a magic number: lua_pushvalue (L' -2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,treatstackoption,The following statement contains a magic number: lua_remove (L' -3);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,treatstackoption,The following statement contains a magic number: lua_setfield (L' -2' fname);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,db_getinfo,The following statement contains a magic number: if (lua_getinfo (L1' options' ar) == 0)  	return luaL_argerror (L' arg + 2' "invalid option");  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,db_getinfo,The following statement contains a magic number: return luaL_argerror (L' arg + 2' "invalid option");  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,db_getinfo,The following statement contains a magic number: lua_createtable (L' 0' 2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,db_getlocal,The following statement contains a magic number: name = lua_getlocal (L1' ar' luaL_checkint (L' arg + 2));  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,db_getlocal,The following statement contains a magic number: if (name != null) {  	lua_xmove (L1' L' 1);  	lua_pushstring (L' name);  	lua_pushvalue (L' -2);  	return 2;  } else {  	lua_pushnil (L);  	return 1;  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,db_getlocal,The following statement contains a magic number: if (name != null) {  	lua_xmove (L1' L' 1);  	lua_pushstring (L' name);  	lua_pushvalue (L' -2);  	return 2;  } else {  	lua_pushnil (L);  	return 1;  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,db_getlocal,The following statement contains a magic number: lua_pushvalue (L' -2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,db_getlocal,The following statement contains a magic number: return 2;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,db_setlocal,The following statement contains a magic number: luaL_checkany (L' arg + 3);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,db_setlocal,The following statement contains a magic number: lua_settop (L' arg + 3);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,db_setlocal,The following statement contains a magic number: lua_pushstring (L' lua_setlocal (L1' ar' luaL_checkint (L' arg + 2)));  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,db_setupvalue,The following statement contains a magic number: luaL_checkany (L' 3);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,hookf,The following statement contains a magic number: lua_rawget (L' -2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,hookf,The following statement contains a magic number: if (lua_isfunction (L' -1)) {  	lua_pushstring (L' hooknames [(int)ar.event_]);  	if (ar.currentline >= 0)  		lua_pushinteger (L' ar.currentline);  	else  		lua_pushnil (L);  	lua_assert (lua_getinfo (L' "lS"' ar));  	lua_call (L' 2' 0);  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,hookf,The following statement contains a magic number: lua_call (L' 2' 0);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,gethooktable,The following statement contains a magic number: if (!lua_istable (L' -1)) {  	lua_pop (L' 1);  	lua_createtable (L' 0' 1);  	lua_pushlightuserdata (L' KEY_HOOK);  	lua_pushvalue (L' -2);  	lua_rawset (L' LUA_REGISTRYINDEX);  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,gethooktable,The following statement contains a magic number: lua_pushvalue (L' -2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,db_sethook,The following statement contains a magic number: if (lua_isnoneornil (L' arg + 1)) {  	lua_settop (L' arg + 1);  	func = null;  	mask = 0;  	count = 0;  	/* turn off hooks */} else {  	CharPtr smask = luaL_checkstring (L' arg + 2);  	luaL_checktype (L' arg + 1' LUA_TFUNCTION);  	count = luaL_optint (L' arg + 3' 0);  	func = hookf;  	mask = makemask (smask' count);  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,db_sethook,The following statement contains a magic number: if (lua_isnoneornil (L' arg + 1)) {  	lua_settop (L' arg + 1);  	func = null;  	mask = 0;  	count = 0;  	/* turn off hooks */} else {  	CharPtr smask = luaL_checkstring (L' arg + 2);  	luaL_checktype (L' arg + 1' LUA_TFUNCTION);  	count = luaL_optint (L' arg + 3' 0);  	func = hookf;  	mask = makemask (smask' count);  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,db_sethook,The following statement contains a magic number: count = luaL_optint (L' arg + 3' 0);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,db_sethook,The following statement contains a magic number: lua_rawset (L' -3);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,db_gethook,The following statement contains a magic number: if (hook != null && hook != hookf)  	/* external hook? */lua_pushliteral (L' "external hook");  else {  	gethooktable (L);  	lua_pushlightuserdata (L' L1);  	lua_rawget (L' -2);  	/* get hook */lua_remove (L' -2);  	/* remove hook table */}  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,db_gethook,The following statement contains a magic number: if (hook != null && hook != hookf)  	/* external hook? */lua_pushliteral (L' "external hook");  else {  	gethooktable (L);  	lua_pushlightuserdata (L' L1);  	lua_rawget (L' -2);  	/* get hook */lua_remove (L' -2);  	/* remove hook table */}  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,db_gethook,The following statement contains a magic number: lua_rawget (L' -2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,db_gethook,The following statement contains a magic number: lua_remove (L' -2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,db_gethook,The following statement contains a magic number: return 3;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,db_debug,The following statement contains a magic number: for (; ;) {  	CharPtr buffer = new char[250];  	fputs ("lua_debug> "' stderr);  	if (fgets (buffer' stdin) == null || strcmp (buffer' "cont\n") == 0)  		return 0;  	if (luaL_loadbuffer (L' buffer' (uint)strlen (buffer)' "=(debug command)") != 0 || lua_pcall (L' 0' 0' 0) != 0) {  		fputs (lua_tostring (L' -1)' stderr);  		fputs ("\n"' stderr);  	}  	lua_settop (L' 0);  	/* remove eventual returns */}  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,db_errorfb,The following statement contains a magic number: if (lua_isnumber (L' arg + 2) != 0) {  	level = (int)lua_tointeger (L' arg + 2);  	lua_pop (L' 1);  } else  	level = (L == L1) ? 1 : 0;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,db_errorfb,The following statement contains a magic number: if (lua_isnumber (L' arg + 2) != 0) {  	level = (int)lua_tointeger (L' arg + 2);  	lua_pop (L' 1);  } else  	level = (L == L1) ? 1 : 0;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,db_errorfb,The following statement contains a magic number: level = (int)lua_tointeger (L' arg + 2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,symbexec,The following statement contains a magic number: for (pc = 0; pc < lastpc; pc++) {  	Instruction i = pt.code [pc];  	OpCode op = GET_OPCODE (i);  	int a = GETARG_A (i);  	int b = 0;  	int c = 0;  	if (!((int)op < NUM_OPCODES))  		return 0;  	checkreg (pt' a);  	switch (getOpMode (op)) {  	case OpMode.iABC: {  		b = GETARG_B (i);  		c = GETARG_C (i);  		if (checkArgMode (pt' b' getBMode (op)) == 0)  			return 0;  		if (checkArgMode (pt' c' getCMode (op)) == 0)  			return 0;  		break;  	}  	case OpMode.iABx: {  		b = GETARG_Bx (i);  		if (getBMode (op) == OpArgMask.OpArgK)  			if (!(b < pt.sizek))  				return 0;  		break;  	}  	case OpMode.iAsBx: {  		b = GETARG_sBx (i);  		if (getBMode (op) == OpArgMask.OpArgR) {  			dest = pc + 1 + b;  			if (!((0 <= dest && dest < pt.sizecode)))  				return 0;  			if (dest > 0) {  				int j;  				/* check that it does not jump to a setlist count; this 					   is tricky' because the count from a previous setlist may 					   have the same value of an invalid setlist; so' we must 					   go all the way back to the first of them (if any) */for (j = 0; j < dest; j++) {  					Instruction d = pt.code [dest - 1 - j];  					if (!(GET_OPCODE (d) == OpCode.OP_SETLIST && GETARG_C (d) == 0))  						break;  				}  				/* if 'j' is even' previous value is not a setlist (even if 					   it looks like one) */if ((j & 1) != 0)  					return 0;  			}  		}  		break;  	}  	}  	if (testAMode (op) != 0) {  		if (a == reg)  			last = pc;  		/* change register `a' */}  	if (testTMode (op) != 0) {  		if (!(pc + 2 < pt.sizecode))  			return 0;  		/* check skip */if (!(GET_OPCODE (pt.code [pc + 1]) == OpCode.OP_JMP))  			return 0;  	}  	switch (op) {  	case OpCode.OP_LOADBOOL: {  		if (c == 1) {  			/* does it jump? */if (!(pc + 2 < pt.sizecode))  				return 0;  			/* check its jump */if (!(GET_OPCODE (pt.code [pc + 1]) != OpCode.OP_SETLIST || GETARG_C (pt.code [pc + 1]) != 0))  				return 0;  		}  		break;  	}  	case OpCode.OP_LOADNIL: {  		if (a <= reg && reg <= b)  			last = pc;  		/* set registers from `a' to `b' */break;  	}  	case OpCode.OP_GETUPVAL:  	case OpCode.OP_SETUPVAL: {  		if (!(b < pt.nups))  			return 0;  		break;  	}  	case OpCode.OP_GETGLOBAL:  	case OpCode.OP_SETGLOBAL: {  		if (!(ttisstring (pt.k [b])))  			return 0;  		break;  	}  	case OpCode.OP_SELF: {  		checkreg (pt' a + 1);  		if (reg == a + 1)  			last = pc;  		break;  	}  	case OpCode.OP_CONCAT: {  		if (!(b < c))  			return 0;  		/* at least two operands */break;  	}  	case OpCode.OP_TFORLOOP: {  		if (!(c >= 1))  			return 0;  		/* at least one result (control variable) */checkreg (pt' a + 2 + c);  		/* space for results */if (reg >= a + 2)  			last = pc;  		/* affect all regs above its base */break;  	}  	case OpCode.OP_FORLOOP:  	case OpCode.OP_FORPREP:  		checkreg (pt' a + 3);  		/* go through ...no' on second thoughts don't' because this is C# */dest = pc + 1 + b;  		/* not full check and jump is forward and do not skip `lastpc'? */if (reg != NO_REG && pc < dest && dest <= lastpc)  			pc += b;  		/* do the jump */break;  	case OpCode.OP_JMP: {  		dest = pc + 1 + b;  		/* not full check and jump is forward and do not skip `lastpc'? */if (reg != NO_REG && pc < dest && dest <= lastpc)  			pc += b;  		/* do the jump */break;  	}  	case OpCode.OP_CALL:  	case OpCode.OP_TAILCALL: {  		if (b != 0) {  			checkreg (pt' a + b - 1);  		}  		c--;  		/* c = num. returns */if (c == LUA_MULTRET) {  			if (checkopenop (pt' pc) == 0)  				return 0;  		} else if (c != 0)  			checkreg (pt' a + c - 1);  		if (reg >= a)  			last = pc;  		/* affect all registers above base */break;  	}  	case OpCode.OP_RETURN: {  		b--;  		/* b = num. returns */if (b > 0)  			checkreg (pt' a + b - 1);  		break;  	}  	case OpCode.OP_SETLIST: {  		if (b > 0)  			checkreg (pt' a + b);  		if (c == 0) {  			pc++;  			if (!(pc < pt.sizecode - 1))  				return 0;  		}  		break;  	}  	case OpCode.OP_CLOSURE: {  		int nup' j;  		if (!(b < pt.sizep))  			return 0;  		nup = pt.p [b].nups;  		if (!(pc + nup < pt.sizecode))  			return 0;  		for (j = 1; j <= nup; j++) {  			OpCode op1 = GET_OPCODE (pt.code [pc + j]);  			if (!(op1 == OpCode.OP_GETUPVAL || op1 == OpCode.OP_MOVE))  				return 0;  		}  		if (reg != NO_REG)  			/* tracing? */pc += nup;  		/* do not 'execute' these pseudo-instructions */break;  	}  	case OpCode.OP_VARARG: {  		if (!((pt.is_vararg & VARARG_ISVARARG) != 0 && (pt.is_vararg & VARARG_NEEDSARG) == 0))  			return 0;  		b--;  		if (b == LUA_MULTRET)  			if (checkopenop (pt' pc) == 0)  				return 0;  		checkreg (pt' a + b - 1);  		break;  	}  	default:  		break;  	}  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,symbexec,The following statement contains a magic number: for (pc = 0; pc < lastpc; pc++) {  	Instruction i = pt.code [pc];  	OpCode op = GET_OPCODE (i);  	int a = GETARG_A (i);  	int b = 0;  	int c = 0;  	if (!((int)op < NUM_OPCODES))  		return 0;  	checkreg (pt' a);  	switch (getOpMode (op)) {  	case OpMode.iABC: {  		b = GETARG_B (i);  		c = GETARG_C (i);  		if (checkArgMode (pt' b' getBMode (op)) == 0)  			return 0;  		if (checkArgMode (pt' c' getCMode (op)) == 0)  			return 0;  		break;  	}  	case OpMode.iABx: {  		b = GETARG_Bx (i);  		if (getBMode (op) == OpArgMask.OpArgK)  			if (!(b < pt.sizek))  				return 0;  		break;  	}  	case OpMode.iAsBx: {  		b = GETARG_sBx (i);  		if (getBMode (op) == OpArgMask.OpArgR) {  			dest = pc + 1 + b;  			if (!((0 <= dest && dest < pt.sizecode)))  				return 0;  			if (dest > 0) {  				int j;  				/* check that it does not jump to a setlist count; this 					   is tricky' because the count from a previous setlist may 					   have the same value of an invalid setlist; so' we must 					   go all the way back to the first of them (if any) */for (j = 0; j < dest; j++) {  					Instruction d = pt.code [dest - 1 - j];  					if (!(GET_OPCODE (d) == OpCode.OP_SETLIST && GETARG_C (d) == 0))  						break;  				}  				/* if 'j' is even' previous value is not a setlist (even if 					   it looks like one) */if ((j & 1) != 0)  					return 0;  			}  		}  		break;  	}  	}  	if (testAMode (op) != 0) {  		if (a == reg)  			last = pc;  		/* change register `a' */}  	if (testTMode (op) != 0) {  		if (!(pc + 2 < pt.sizecode))  			return 0;  		/* check skip */if (!(GET_OPCODE (pt.code [pc + 1]) == OpCode.OP_JMP))  			return 0;  	}  	switch (op) {  	case OpCode.OP_LOADBOOL: {  		if (c == 1) {  			/* does it jump? */if (!(pc + 2 < pt.sizecode))  				return 0;  			/* check its jump */if (!(GET_OPCODE (pt.code [pc + 1]) != OpCode.OP_SETLIST || GETARG_C (pt.code [pc + 1]) != 0))  				return 0;  		}  		break;  	}  	case OpCode.OP_LOADNIL: {  		if (a <= reg && reg <= b)  			last = pc;  		/* set registers from `a' to `b' */break;  	}  	case OpCode.OP_GETUPVAL:  	case OpCode.OP_SETUPVAL: {  		if (!(b < pt.nups))  			return 0;  		break;  	}  	case OpCode.OP_GETGLOBAL:  	case OpCode.OP_SETGLOBAL: {  		if (!(ttisstring (pt.k [b])))  			return 0;  		break;  	}  	case OpCode.OP_SELF: {  		checkreg (pt' a + 1);  		if (reg == a + 1)  			last = pc;  		break;  	}  	case OpCode.OP_CONCAT: {  		if (!(b < c))  			return 0;  		/* at least two operands */break;  	}  	case OpCode.OP_TFORLOOP: {  		if (!(c >= 1))  			return 0;  		/* at least one result (control variable) */checkreg (pt' a + 2 + c);  		/* space for results */if (reg >= a + 2)  			last = pc;  		/* affect all regs above its base */break;  	}  	case OpCode.OP_FORLOOP:  	case OpCode.OP_FORPREP:  		checkreg (pt' a + 3);  		/* go through ...no' on second thoughts don't' because this is C# */dest = pc + 1 + b;  		/* not full check and jump is forward and do not skip `lastpc'? */if (reg != NO_REG && pc < dest && dest <= lastpc)  			pc += b;  		/* do the jump */break;  	case OpCode.OP_JMP: {  		dest = pc + 1 + b;  		/* not full check and jump is forward and do not skip `lastpc'? */if (reg != NO_REG && pc < dest && dest <= lastpc)  			pc += b;  		/* do the jump */break;  	}  	case OpCode.OP_CALL:  	case OpCode.OP_TAILCALL: {  		if (b != 0) {  			checkreg (pt' a + b - 1);  		}  		c--;  		/* c = num. returns */if (c == LUA_MULTRET) {  			if (checkopenop (pt' pc) == 0)  				return 0;  		} else if (c != 0)  			checkreg (pt' a + c - 1);  		if (reg >= a)  			last = pc;  		/* affect all registers above base */break;  	}  	case OpCode.OP_RETURN: {  		b--;  		/* b = num. returns */if (b > 0)  			checkreg (pt' a + b - 1);  		break;  	}  	case OpCode.OP_SETLIST: {  		if (b > 0)  			checkreg (pt' a + b);  		if (c == 0) {  			pc++;  			if (!(pc < pt.sizecode - 1))  				return 0;  		}  		break;  	}  	case OpCode.OP_CLOSURE: {  		int nup' j;  		if (!(b < pt.sizep))  			return 0;  		nup = pt.p [b].nups;  		if (!(pc + nup < pt.sizecode))  			return 0;  		for (j = 1; j <= nup; j++) {  			OpCode op1 = GET_OPCODE (pt.code [pc + j]);  			if (!(op1 == OpCode.OP_GETUPVAL || op1 == OpCode.OP_MOVE))  				return 0;  		}  		if (reg != NO_REG)  			/* tracing? */pc += nup;  		/* do not 'execute' these pseudo-instructions */break;  	}  	case OpCode.OP_VARARG: {  		if (!((pt.is_vararg & VARARG_ISVARARG) != 0 && (pt.is_vararg & VARARG_NEEDSARG) == 0))  			return 0;  		b--;  		if (b == LUA_MULTRET)  			if (checkopenop (pt' pc) == 0)  				return 0;  		checkreg (pt' a + b - 1);  		break;  	}  	default:  		break;  	}  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,symbexec,The following statement contains a magic number: for (pc = 0; pc < lastpc; pc++) {  	Instruction i = pt.code [pc];  	OpCode op = GET_OPCODE (i);  	int a = GETARG_A (i);  	int b = 0;  	int c = 0;  	if (!((int)op < NUM_OPCODES))  		return 0;  	checkreg (pt' a);  	switch (getOpMode (op)) {  	case OpMode.iABC: {  		b = GETARG_B (i);  		c = GETARG_C (i);  		if (checkArgMode (pt' b' getBMode (op)) == 0)  			return 0;  		if (checkArgMode (pt' c' getCMode (op)) == 0)  			return 0;  		break;  	}  	case OpMode.iABx: {  		b = GETARG_Bx (i);  		if (getBMode (op) == OpArgMask.OpArgK)  			if (!(b < pt.sizek))  				return 0;  		break;  	}  	case OpMode.iAsBx: {  		b = GETARG_sBx (i);  		if (getBMode (op) == OpArgMask.OpArgR) {  			dest = pc + 1 + b;  			if (!((0 <= dest && dest < pt.sizecode)))  				return 0;  			if (dest > 0) {  				int j;  				/* check that it does not jump to a setlist count; this 					   is tricky' because the count from a previous setlist may 					   have the same value of an invalid setlist; so' we must 					   go all the way back to the first of them (if any) */for (j = 0; j < dest; j++) {  					Instruction d = pt.code [dest - 1 - j];  					if (!(GET_OPCODE (d) == OpCode.OP_SETLIST && GETARG_C (d) == 0))  						break;  				}  				/* if 'j' is even' previous value is not a setlist (even if 					   it looks like one) */if ((j & 1) != 0)  					return 0;  			}  		}  		break;  	}  	}  	if (testAMode (op) != 0) {  		if (a == reg)  			last = pc;  		/* change register `a' */}  	if (testTMode (op) != 0) {  		if (!(pc + 2 < pt.sizecode))  			return 0;  		/* check skip */if (!(GET_OPCODE (pt.code [pc + 1]) == OpCode.OP_JMP))  			return 0;  	}  	switch (op) {  	case OpCode.OP_LOADBOOL: {  		if (c == 1) {  			/* does it jump? */if (!(pc + 2 < pt.sizecode))  				return 0;  			/* check its jump */if (!(GET_OPCODE (pt.code [pc + 1]) != OpCode.OP_SETLIST || GETARG_C (pt.code [pc + 1]) != 0))  				return 0;  		}  		break;  	}  	case OpCode.OP_LOADNIL: {  		if (a <= reg && reg <= b)  			last = pc;  		/* set registers from `a' to `b' */break;  	}  	case OpCode.OP_GETUPVAL:  	case OpCode.OP_SETUPVAL: {  		if (!(b < pt.nups))  			return 0;  		break;  	}  	case OpCode.OP_GETGLOBAL:  	case OpCode.OP_SETGLOBAL: {  		if (!(ttisstring (pt.k [b])))  			return 0;  		break;  	}  	case OpCode.OP_SELF: {  		checkreg (pt' a + 1);  		if (reg == a + 1)  			last = pc;  		break;  	}  	case OpCode.OP_CONCAT: {  		if (!(b < c))  			return 0;  		/* at least two operands */break;  	}  	case OpCode.OP_TFORLOOP: {  		if (!(c >= 1))  			return 0;  		/* at least one result (control variable) */checkreg (pt' a + 2 + c);  		/* space for results */if (reg >= a + 2)  			last = pc;  		/* affect all regs above its base */break;  	}  	case OpCode.OP_FORLOOP:  	case OpCode.OP_FORPREP:  		checkreg (pt' a + 3);  		/* go through ...no' on second thoughts don't' because this is C# */dest = pc + 1 + b;  		/* not full check and jump is forward and do not skip `lastpc'? */if (reg != NO_REG && pc < dest && dest <= lastpc)  			pc += b;  		/* do the jump */break;  	case OpCode.OP_JMP: {  		dest = pc + 1 + b;  		/* not full check and jump is forward and do not skip `lastpc'? */if (reg != NO_REG && pc < dest && dest <= lastpc)  			pc += b;  		/* do the jump */break;  	}  	case OpCode.OP_CALL:  	case OpCode.OP_TAILCALL: {  		if (b != 0) {  			checkreg (pt' a + b - 1);  		}  		c--;  		/* c = num. returns */if (c == LUA_MULTRET) {  			if (checkopenop (pt' pc) == 0)  				return 0;  		} else if (c != 0)  			checkreg (pt' a + c - 1);  		if (reg >= a)  			last = pc;  		/* affect all registers above base */break;  	}  	case OpCode.OP_RETURN: {  		b--;  		/* b = num. returns */if (b > 0)  			checkreg (pt' a + b - 1);  		break;  	}  	case OpCode.OP_SETLIST: {  		if (b > 0)  			checkreg (pt' a + b);  		if (c == 0) {  			pc++;  			if (!(pc < pt.sizecode - 1))  				return 0;  		}  		break;  	}  	case OpCode.OP_CLOSURE: {  		int nup' j;  		if (!(b < pt.sizep))  			return 0;  		nup = pt.p [b].nups;  		if (!(pc + nup < pt.sizecode))  			return 0;  		for (j = 1; j <= nup; j++) {  			OpCode op1 = GET_OPCODE (pt.code [pc + j]);  			if (!(op1 == OpCode.OP_GETUPVAL || op1 == OpCode.OP_MOVE))  				return 0;  		}  		if (reg != NO_REG)  			/* tracing? */pc += nup;  		/* do not 'execute' these pseudo-instructions */break;  	}  	case OpCode.OP_VARARG: {  		if (!((pt.is_vararg & VARARG_ISVARARG) != 0 && (pt.is_vararg & VARARG_NEEDSARG) == 0))  			return 0;  		b--;  		if (b == LUA_MULTRET)  			if (checkopenop (pt' pc) == 0)  				return 0;  		checkreg (pt' a + b - 1);  		break;  	}  	default:  		break;  	}  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,symbexec,The following statement contains a magic number: for (pc = 0; pc < lastpc; pc++) {  	Instruction i = pt.code [pc];  	OpCode op = GET_OPCODE (i);  	int a = GETARG_A (i);  	int b = 0;  	int c = 0;  	if (!((int)op < NUM_OPCODES))  		return 0;  	checkreg (pt' a);  	switch (getOpMode (op)) {  	case OpMode.iABC: {  		b = GETARG_B (i);  		c = GETARG_C (i);  		if (checkArgMode (pt' b' getBMode (op)) == 0)  			return 0;  		if (checkArgMode (pt' c' getCMode (op)) == 0)  			return 0;  		break;  	}  	case OpMode.iABx: {  		b = GETARG_Bx (i);  		if (getBMode (op) == OpArgMask.OpArgK)  			if (!(b < pt.sizek))  				return 0;  		break;  	}  	case OpMode.iAsBx: {  		b = GETARG_sBx (i);  		if (getBMode (op) == OpArgMask.OpArgR) {  			dest = pc + 1 + b;  			if (!((0 <= dest && dest < pt.sizecode)))  				return 0;  			if (dest > 0) {  				int j;  				/* check that it does not jump to a setlist count; this 					   is tricky' because the count from a previous setlist may 					   have the same value of an invalid setlist; so' we must 					   go all the way back to the first of them (if any) */for (j = 0; j < dest; j++) {  					Instruction d = pt.code [dest - 1 - j];  					if (!(GET_OPCODE (d) == OpCode.OP_SETLIST && GETARG_C (d) == 0))  						break;  				}  				/* if 'j' is even' previous value is not a setlist (even if 					   it looks like one) */if ((j & 1) != 0)  					return 0;  			}  		}  		break;  	}  	}  	if (testAMode (op) != 0) {  		if (a == reg)  			last = pc;  		/* change register `a' */}  	if (testTMode (op) != 0) {  		if (!(pc + 2 < pt.sizecode))  			return 0;  		/* check skip */if (!(GET_OPCODE (pt.code [pc + 1]) == OpCode.OP_JMP))  			return 0;  	}  	switch (op) {  	case OpCode.OP_LOADBOOL: {  		if (c == 1) {  			/* does it jump? */if (!(pc + 2 < pt.sizecode))  				return 0;  			/* check its jump */if (!(GET_OPCODE (pt.code [pc + 1]) != OpCode.OP_SETLIST || GETARG_C (pt.code [pc + 1]) != 0))  				return 0;  		}  		break;  	}  	case OpCode.OP_LOADNIL: {  		if (a <= reg && reg <= b)  			last = pc;  		/* set registers from `a' to `b' */break;  	}  	case OpCode.OP_GETUPVAL:  	case OpCode.OP_SETUPVAL: {  		if (!(b < pt.nups))  			return 0;  		break;  	}  	case OpCode.OP_GETGLOBAL:  	case OpCode.OP_SETGLOBAL: {  		if (!(ttisstring (pt.k [b])))  			return 0;  		break;  	}  	case OpCode.OP_SELF: {  		checkreg (pt' a + 1);  		if (reg == a + 1)  			last = pc;  		break;  	}  	case OpCode.OP_CONCAT: {  		if (!(b < c))  			return 0;  		/* at least two operands */break;  	}  	case OpCode.OP_TFORLOOP: {  		if (!(c >= 1))  			return 0;  		/* at least one result (control variable) */checkreg (pt' a + 2 + c);  		/* space for results */if (reg >= a + 2)  			last = pc;  		/* affect all regs above its base */break;  	}  	case OpCode.OP_FORLOOP:  	case OpCode.OP_FORPREP:  		checkreg (pt' a + 3);  		/* go through ...no' on second thoughts don't' because this is C# */dest = pc + 1 + b;  		/* not full check and jump is forward and do not skip `lastpc'? */if (reg != NO_REG && pc < dest && dest <= lastpc)  			pc += b;  		/* do the jump */break;  	case OpCode.OP_JMP: {  		dest = pc + 1 + b;  		/* not full check and jump is forward and do not skip `lastpc'? */if (reg != NO_REG && pc < dest && dest <= lastpc)  			pc += b;  		/* do the jump */break;  	}  	case OpCode.OP_CALL:  	case OpCode.OP_TAILCALL: {  		if (b != 0) {  			checkreg (pt' a + b - 1);  		}  		c--;  		/* c = num. returns */if (c == LUA_MULTRET) {  			if (checkopenop (pt' pc) == 0)  				return 0;  		} else if (c != 0)  			checkreg (pt' a + c - 1);  		if (reg >= a)  			last = pc;  		/* affect all registers above base */break;  	}  	case OpCode.OP_RETURN: {  		b--;  		/* b = num. returns */if (b > 0)  			checkreg (pt' a + b - 1);  		break;  	}  	case OpCode.OP_SETLIST: {  		if (b > 0)  			checkreg (pt' a + b);  		if (c == 0) {  			pc++;  			if (!(pc < pt.sizecode - 1))  				return 0;  		}  		break;  	}  	case OpCode.OP_CLOSURE: {  		int nup' j;  		if (!(b < pt.sizep))  			return 0;  		nup = pt.p [b].nups;  		if (!(pc + nup < pt.sizecode))  			return 0;  		for (j = 1; j <= nup; j++) {  			OpCode op1 = GET_OPCODE (pt.code [pc + j]);  			if (!(op1 == OpCode.OP_GETUPVAL || op1 == OpCode.OP_MOVE))  				return 0;  		}  		if (reg != NO_REG)  			/* tracing? */pc += nup;  		/* do not 'execute' these pseudo-instructions */break;  	}  	case OpCode.OP_VARARG: {  		if (!((pt.is_vararg & VARARG_ISVARARG) != 0 && (pt.is_vararg & VARARG_NEEDSARG) == 0))  			return 0;  		b--;  		if (b == LUA_MULTRET)  			if (checkopenop (pt' pc) == 0)  				return 0;  		checkreg (pt' a + b - 1);  		break;  	}  	default:  		break;  	}  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,symbexec,The following statement contains a magic number: for (pc = 0; pc < lastpc; pc++) {  	Instruction i = pt.code [pc];  	OpCode op = GET_OPCODE (i);  	int a = GETARG_A (i);  	int b = 0;  	int c = 0;  	if (!((int)op < NUM_OPCODES))  		return 0;  	checkreg (pt' a);  	switch (getOpMode (op)) {  	case OpMode.iABC: {  		b = GETARG_B (i);  		c = GETARG_C (i);  		if (checkArgMode (pt' b' getBMode (op)) == 0)  			return 0;  		if (checkArgMode (pt' c' getCMode (op)) == 0)  			return 0;  		break;  	}  	case OpMode.iABx: {  		b = GETARG_Bx (i);  		if (getBMode (op) == OpArgMask.OpArgK)  			if (!(b < pt.sizek))  				return 0;  		break;  	}  	case OpMode.iAsBx: {  		b = GETARG_sBx (i);  		if (getBMode (op) == OpArgMask.OpArgR) {  			dest = pc + 1 + b;  			if (!((0 <= dest && dest < pt.sizecode)))  				return 0;  			if (dest > 0) {  				int j;  				/* check that it does not jump to a setlist count; this 					   is tricky' because the count from a previous setlist may 					   have the same value of an invalid setlist; so' we must 					   go all the way back to the first of them (if any) */for (j = 0; j < dest; j++) {  					Instruction d = pt.code [dest - 1 - j];  					if (!(GET_OPCODE (d) == OpCode.OP_SETLIST && GETARG_C (d) == 0))  						break;  				}  				/* if 'j' is even' previous value is not a setlist (even if 					   it looks like one) */if ((j & 1) != 0)  					return 0;  			}  		}  		break;  	}  	}  	if (testAMode (op) != 0) {  		if (a == reg)  			last = pc;  		/* change register `a' */}  	if (testTMode (op) != 0) {  		if (!(pc + 2 < pt.sizecode))  			return 0;  		/* check skip */if (!(GET_OPCODE (pt.code [pc + 1]) == OpCode.OP_JMP))  			return 0;  	}  	switch (op) {  	case OpCode.OP_LOADBOOL: {  		if (c == 1) {  			/* does it jump? */if (!(pc + 2 < pt.sizecode))  				return 0;  			/* check its jump */if (!(GET_OPCODE (pt.code [pc + 1]) != OpCode.OP_SETLIST || GETARG_C (pt.code [pc + 1]) != 0))  				return 0;  		}  		break;  	}  	case OpCode.OP_LOADNIL: {  		if (a <= reg && reg <= b)  			last = pc;  		/* set registers from `a' to `b' */break;  	}  	case OpCode.OP_GETUPVAL:  	case OpCode.OP_SETUPVAL: {  		if (!(b < pt.nups))  			return 0;  		break;  	}  	case OpCode.OP_GETGLOBAL:  	case OpCode.OP_SETGLOBAL: {  		if (!(ttisstring (pt.k [b])))  			return 0;  		break;  	}  	case OpCode.OP_SELF: {  		checkreg (pt' a + 1);  		if (reg == a + 1)  			last = pc;  		break;  	}  	case OpCode.OP_CONCAT: {  		if (!(b < c))  			return 0;  		/* at least two operands */break;  	}  	case OpCode.OP_TFORLOOP: {  		if (!(c >= 1))  			return 0;  		/* at least one result (control variable) */checkreg (pt' a + 2 + c);  		/* space for results */if (reg >= a + 2)  			last = pc;  		/* affect all regs above its base */break;  	}  	case OpCode.OP_FORLOOP:  	case OpCode.OP_FORPREP:  		checkreg (pt' a + 3);  		/* go through ...no' on second thoughts don't' because this is C# */dest = pc + 1 + b;  		/* not full check and jump is forward and do not skip `lastpc'? */if (reg != NO_REG && pc < dest && dest <= lastpc)  			pc += b;  		/* do the jump */break;  	case OpCode.OP_JMP: {  		dest = pc + 1 + b;  		/* not full check and jump is forward and do not skip `lastpc'? */if (reg != NO_REG && pc < dest && dest <= lastpc)  			pc += b;  		/* do the jump */break;  	}  	case OpCode.OP_CALL:  	case OpCode.OP_TAILCALL: {  		if (b != 0) {  			checkreg (pt' a + b - 1);  		}  		c--;  		/* c = num. returns */if (c == LUA_MULTRET) {  			if (checkopenop (pt' pc) == 0)  				return 0;  		} else if (c != 0)  			checkreg (pt' a + c - 1);  		if (reg >= a)  			last = pc;  		/* affect all registers above base */break;  	}  	case OpCode.OP_RETURN: {  		b--;  		/* b = num. returns */if (b > 0)  			checkreg (pt' a + b - 1);  		break;  	}  	case OpCode.OP_SETLIST: {  		if (b > 0)  			checkreg (pt' a + b);  		if (c == 0) {  			pc++;  			if (!(pc < pt.sizecode - 1))  				return 0;  		}  		break;  	}  	case OpCode.OP_CLOSURE: {  		int nup' j;  		if (!(b < pt.sizep))  			return 0;  		nup = pt.p [b].nups;  		if (!(pc + nup < pt.sizecode))  			return 0;  		for (j = 1; j <= nup; j++) {  			OpCode op1 = GET_OPCODE (pt.code [pc + j]);  			if (!(op1 == OpCode.OP_GETUPVAL || op1 == OpCode.OP_MOVE))  				return 0;  		}  		if (reg != NO_REG)  			/* tracing? */pc += nup;  		/* do not 'execute' these pseudo-instructions */break;  	}  	case OpCode.OP_VARARG: {  		if (!((pt.is_vararg & VARARG_ISVARARG) != 0 && (pt.is_vararg & VARARG_NEEDSARG) == 0))  			return 0;  		b--;  		if (b == LUA_MULTRET)  			if (checkopenop (pt' pc) == 0)  				return 0;  		checkreg (pt' a + b - 1);  		break;  	}  	default:  		break;  	}  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,symbexec,The following statement contains a magic number: if (testTMode (op) != 0) {  	if (!(pc + 2 < pt.sizecode))  		return 0;  	/* check skip */if (!(GET_OPCODE (pt.code [pc + 1]) == OpCode.OP_JMP))  		return 0;  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,symbexec,The following statement contains a magic number: if (!(pc + 2 < pt.sizecode))  	return 0;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,symbexec,The following statement contains a magic number: switch (op) {  case OpCode.OP_LOADBOOL: {  	if (c == 1) {  		/* does it jump? */if (!(pc + 2 < pt.sizecode))  			return 0;  		/* check its jump */if (!(GET_OPCODE (pt.code [pc + 1]) != OpCode.OP_SETLIST || GETARG_C (pt.code [pc + 1]) != 0))  			return 0;  	}  	break;  }  case OpCode.OP_LOADNIL: {  	if (a <= reg && reg <= b)  		last = pc;  	/* set registers from `a' to `b' */break;  }  case OpCode.OP_GETUPVAL:  case OpCode.OP_SETUPVAL: {  	if (!(b < pt.nups))  		return 0;  	break;  }  case OpCode.OP_GETGLOBAL:  case OpCode.OP_SETGLOBAL: {  	if (!(ttisstring (pt.k [b])))  		return 0;  	break;  }  case OpCode.OP_SELF: {  	checkreg (pt' a + 1);  	if (reg == a + 1)  		last = pc;  	break;  }  case OpCode.OP_CONCAT: {  	if (!(b < c))  		return 0;  	/* at least two operands */break;  }  case OpCode.OP_TFORLOOP: {  	if (!(c >= 1))  		return 0;  	/* at least one result (control variable) */checkreg (pt' a + 2 + c);  	/* space for results */if (reg >= a + 2)  		last = pc;  	/* affect all regs above its base */break;  }  case OpCode.OP_FORLOOP:  case OpCode.OP_FORPREP:  	checkreg (pt' a + 3);  	/* go through ...no' on second thoughts don't' because this is C# */dest = pc + 1 + b;  	/* not full check and jump is forward and do not skip `lastpc'? */if (reg != NO_REG && pc < dest && dest <= lastpc)  		pc += b;  	/* do the jump */break;  case OpCode.OP_JMP: {  	dest = pc + 1 + b;  	/* not full check and jump is forward and do not skip `lastpc'? */if (reg != NO_REG && pc < dest && dest <= lastpc)  		pc += b;  	/* do the jump */break;  }  case OpCode.OP_CALL:  case OpCode.OP_TAILCALL: {  	if (b != 0) {  		checkreg (pt' a + b - 1);  	}  	c--;  	/* c = num. returns */if (c == LUA_MULTRET) {  		if (checkopenop (pt' pc) == 0)  			return 0;  	} else if (c != 0)  		checkreg (pt' a + c - 1);  	if (reg >= a)  		last = pc;  	/* affect all registers above base */break;  }  case OpCode.OP_RETURN: {  	b--;  	/* b = num. returns */if (b > 0)  		checkreg (pt' a + b - 1);  	break;  }  case OpCode.OP_SETLIST: {  	if (b > 0)  		checkreg (pt' a + b);  	if (c == 0) {  		pc++;  		if (!(pc < pt.sizecode - 1))  			return 0;  	}  	break;  }  case OpCode.OP_CLOSURE: {  	int nup' j;  	if (!(b < pt.sizep))  		return 0;  	nup = pt.p [b].nups;  	if (!(pc + nup < pt.sizecode))  		return 0;  	for (j = 1; j <= nup; j++) {  		OpCode op1 = GET_OPCODE (pt.code [pc + j]);  		if (!(op1 == OpCode.OP_GETUPVAL || op1 == OpCode.OP_MOVE))  			return 0;  	}  	if (reg != NO_REG)  		/* tracing? */pc += nup;  	/* do not 'execute' these pseudo-instructions */break;  }  case OpCode.OP_VARARG: {  	if (!((pt.is_vararg & VARARG_ISVARARG) != 0 && (pt.is_vararg & VARARG_NEEDSARG) == 0))  		return 0;  	b--;  	if (b == LUA_MULTRET)  		if (checkopenop (pt' pc) == 0)  			return 0;  	checkreg (pt' a + b - 1);  	break;  }  default:  	break;  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,symbexec,The following statement contains a magic number: switch (op) {  case OpCode.OP_LOADBOOL: {  	if (c == 1) {  		/* does it jump? */if (!(pc + 2 < pt.sizecode))  			return 0;  		/* check its jump */if (!(GET_OPCODE (pt.code [pc + 1]) != OpCode.OP_SETLIST || GETARG_C (pt.code [pc + 1]) != 0))  			return 0;  	}  	break;  }  case OpCode.OP_LOADNIL: {  	if (a <= reg && reg <= b)  		last = pc;  	/* set registers from `a' to `b' */break;  }  case OpCode.OP_GETUPVAL:  case OpCode.OP_SETUPVAL: {  	if (!(b < pt.nups))  		return 0;  	break;  }  case OpCode.OP_GETGLOBAL:  case OpCode.OP_SETGLOBAL: {  	if (!(ttisstring (pt.k [b])))  		return 0;  	break;  }  case OpCode.OP_SELF: {  	checkreg (pt' a + 1);  	if (reg == a + 1)  		last = pc;  	break;  }  case OpCode.OP_CONCAT: {  	if (!(b < c))  		return 0;  	/* at least two operands */break;  }  case OpCode.OP_TFORLOOP: {  	if (!(c >= 1))  		return 0;  	/* at least one result (control variable) */checkreg (pt' a + 2 + c);  	/* space for results */if (reg >= a + 2)  		last = pc;  	/* affect all regs above its base */break;  }  case OpCode.OP_FORLOOP:  case OpCode.OP_FORPREP:  	checkreg (pt' a + 3);  	/* go through ...no' on second thoughts don't' because this is C# */dest = pc + 1 + b;  	/* not full check and jump is forward and do not skip `lastpc'? */if (reg != NO_REG && pc < dest && dest <= lastpc)  		pc += b;  	/* do the jump */break;  case OpCode.OP_JMP: {  	dest = pc + 1 + b;  	/* not full check and jump is forward and do not skip `lastpc'? */if (reg != NO_REG && pc < dest && dest <= lastpc)  		pc += b;  	/* do the jump */break;  }  case OpCode.OP_CALL:  case OpCode.OP_TAILCALL: {  	if (b != 0) {  		checkreg (pt' a + b - 1);  	}  	c--;  	/* c = num. returns */if (c == LUA_MULTRET) {  		if (checkopenop (pt' pc) == 0)  			return 0;  	} else if (c != 0)  		checkreg (pt' a + c - 1);  	if (reg >= a)  		last = pc;  	/* affect all registers above base */break;  }  case OpCode.OP_RETURN: {  	b--;  	/* b = num. returns */if (b > 0)  		checkreg (pt' a + b - 1);  	break;  }  case OpCode.OP_SETLIST: {  	if (b > 0)  		checkreg (pt' a + b);  	if (c == 0) {  		pc++;  		if (!(pc < pt.sizecode - 1))  			return 0;  	}  	break;  }  case OpCode.OP_CLOSURE: {  	int nup' j;  	if (!(b < pt.sizep))  		return 0;  	nup = pt.p [b].nups;  	if (!(pc + nup < pt.sizecode))  		return 0;  	for (j = 1; j <= nup; j++) {  		OpCode op1 = GET_OPCODE (pt.code [pc + j]);  		if (!(op1 == OpCode.OP_GETUPVAL || op1 == OpCode.OP_MOVE))  			return 0;  	}  	if (reg != NO_REG)  		/* tracing? */pc += nup;  	/* do not 'execute' these pseudo-instructions */break;  }  case OpCode.OP_VARARG: {  	if (!((pt.is_vararg & VARARG_ISVARARG) != 0 && (pt.is_vararg & VARARG_NEEDSARG) == 0))  		return 0;  	b--;  	if (b == LUA_MULTRET)  		if (checkopenop (pt' pc) == 0)  			return 0;  	checkreg (pt' a + b - 1);  	break;  }  default:  	break;  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,symbexec,The following statement contains a magic number: switch (op) {  case OpCode.OP_LOADBOOL: {  	if (c == 1) {  		/* does it jump? */if (!(pc + 2 < pt.sizecode))  			return 0;  		/* check its jump */if (!(GET_OPCODE (pt.code [pc + 1]) != OpCode.OP_SETLIST || GETARG_C (pt.code [pc + 1]) != 0))  			return 0;  	}  	break;  }  case OpCode.OP_LOADNIL: {  	if (a <= reg && reg <= b)  		last = pc;  	/* set registers from `a' to `b' */break;  }  case OpCode.OP_GETUPVAL:  case OpCode.OP_SETUPVAL: {  	if (!(b < pt.nups))  		return 0;  	break;  }  case OpCode.OP_GETGLOBAL:  case OpCode.OP_SETGLOBAL: {  	if (!(ttisstring (pt.k [b])))  		return 0;  	break;  }  case OpCode.OP_SELF: {  	checkreg (pt' a + 1);  	if (reg == a + 1)  		last = pc;  	break;  }  case OpCode.OP_CONCAT: {  	if (!(b < c))  		return 0;  	/* at least two operands */break;  }  case OpCode.OP_TFORLOOP: {  	if (!(c >= 1))  		return 0;  	/* at least one result (control variable) */checkreg (pt' a + 2 + c);  	/* space for results */if (reg >= a + 2)  		last = pc;  	/* affect all regs above its base */break;  }  case OpCode.OP_FORLOOP:  case OpCode.OP_FORPREP:  	checkreg (pt' a + 3);  	/* go through ...no' on second thoughts don't' because this is C# */dest = pc + 1 + b;  	/* not full check and jump is forward and do not skip `lastpc'? */if (reg != NO_REG && pc < dest && dest <= lastpc)  		pc += b;  	/* do the jump */break;  case OpCode.OP_JMP: {  	dest = pc + 1 + b;  	/* not full check and jump is forward and do not skip `lastpc'? */if (reg != NO_REG && pc < dest && dest <= lastpc)  		pc += b;  	/* do the jump */break;  }  case OpCode.OP_CALL:  case OpCode.OP_TAILCALL: {  	if (b != 0) {  		checkreg (pt' a + b - 1);  	}  	c--;  	/* c = num. returns */if (c == LUA_MULTRET) {  		if (checkopenop (pt' pc) == 0)  			return 0;  	} else if (c != 0)  		checkreg (pt' a + c - 1);  	if (reg >= a)  		last = pc;  	/* affect all registers above base */break;  }  case OpCode.OP_RETURN: {  	b--;  	/* b = num. returns */if (b > 0)  		checkreg (pt' a + b - 1);  	break;  }  case OpCode.OP_SETLIST: {  	if (b > 0)  		checkreg (pt' a + b);  	if (c == 0) {  		pc++;  		if (!(pc < pt.sizecode - 1))  			return 0;  	}  	break;  }  case OpCode.OP_CLOSURE: {  	int nup' j;  	if (!(b < pt.sizep))  		return 0;  	nup = pt.p [b].nups;  	if (!(pc + nup < pt.sizecode))  		return 0;  	for (j = 1; j <= nup; j++) {  		OpCode op1 = GET_OPCODE (pt.code [pc + j]);  		if (!(op1 == OpCode.OP_GETUPVAL || op1 == OpCode.OP_MOVE))  			return 0;  	}  	if (reg != NO_REG)  		/* tracing? */pc += nup;  	/* do not 'execute' these pseudo-instructions */break;  }  case OpCode.OP_VARARG: {  	if (!((pt.is_vararg & VARARG_ISVARARG) != 0 && (pt.is_vararg & VARARG_NEEDSARG) == 0))  		return 0;  	b--;  	if (b == LUA_MULTRET)  		if (checkopenop (pt' pc) == 0)  			return 0;  	checkreg (pt' a + b - 1);  	break;  }  default:  	break;  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,symbexec,The following statement contains a magic number: switch (op) {  case OpCode.OP_LOADBOOL: {  	if (c == 1) {  		/* does it jump? */if (!(pc + 2 < pt.sizecode))  			return 0;  		/* check its jump */if (!(GET_OPCODE (pt.code [pc + 1]) != OpCode.OP_SETLIST || GETARG_C (pt.code [pc + 1]) != 0))  			return 0;  	}  	break;  }  case OpCode.OP_LOADNIL: {  	if (a <= reg && reg <= b)  		last = pc;  	/* set registers from `a' to `b' */break;  }  case OpCode.OP_GETUPVAL:  case OpCode.OP_SETUPVAL: {  	if (!(b < pt.nups))  		return 0;  	break;  }  case OpCode.OP_GETGLOBAL:  case OpCode.OP_SETGLOBAL: {  	if (!(ttisstring (pt.k [b])))  		return 0;  	break;  }  case OpCode.OP_SELF: {  	checkreg (pt' a + 1);  	if (reg == a + 1)  		last = pc;  	break;  }  case OpCode.OP_CONCAT: {  	if (!(b < c))  		return 0;  	/* at least two operands */break;  }  case OpCode.OP_TFORLOOP: {  	if (!(c >= 1))  		return 0;  	/* at least one result (control variable) */checkreg (pt' a + 2 + c);  	/* space for results */if (reg >= a + 2)  		last = pc;  	/* affect all regs above its base */break;  }  case OpCode.OP_FORLOOP:  case OpCode.OP_FORPREP:  	checkreg (pt' a + 3);  	/* go through ...no' on second thoughts don't' because this is C# */dest = pc + 1 + b;  	/* not full check and jump is forward and do not skip `lastpc'? */if (reg != NO_REG && pc < dest && dest <= lastpc)  		pc += b;  	/* do the jump */break;  case OpCode.OP_JMP: {  	dest = pc + 1 + b;  	/* not full check and jump is forward and do not skip `lastpc'? */if (reg != NO_REG && pc < dest && dest <= lastpc)  		pc += b;  	/* do the jump */break;  }  case OpCode.OP_CALL:  case OpCode.OP_TAILCALL: {  	if (b != 0) {  		checkreg (pt' a + b - 1);  	}  	c--;  	/* c = num. returns */if (c == LUA_MULTRET) {  		if (checkopenop (pt' pc) == 0)  			return 0;  	} else if (c != 0)  		checkreg (pt' a + c - 1);  	if (reg >= a)  		last = pc;  	/* affect all registers above base */break;  }  case OpCode.OP_RETURN: {  	b--;  	/* b = num. returns */if (b > 0)  		checkreg (pt' a + b - 1);  	break;  }  case OpCode.OP_SETLIST: {  	if (b > 0)  		checkreg (pt' a + b);  	if (c == 0) {  		pc++;  		if (!(pc < pt.sizecode - 1))  			return 0;  	}  	break;  }  case OpCode.OP_CLOSURE: {  	int nup' j;  	if (!(b < pt.sizep))  		return 0;  	nup = pt.p [b].nups;  	if (!(pc + nup < pt.sizecode))  		return 0;  	for (j = 1; j <= nup; j++) {  		OpCode op1 = GET_OPCODE (pt.code [pc + j]);  		if (!(op1 == OpCode.OP_GETUPVAL || op1 == OpCode.OP_MOVE))  			return 0;  	}  	if (reg != NO_REG)  		/* tracing? */pc += nup;  	/* do not 'execute' these pseudo-instructions */break;  }  case OpCode.OP_VARARG: {  	if (!((pt.is_vararg & VARARG_ISVARARG) != 0 && (pt.is_vararg & VARARG_NEEDSARG) == 0))  		return 0;  	b--;  	if (b == LUA_MULTRET)  		if (checkopenop (pt' pc) == 0)  			return 0;  	checkreg (pt' a + b - 1);  	break;  }  default:  	break;  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,symbexec,The following statement contains a magic number: if (c == 1) {  	/* does it jump? */if (!(pc + 2 < pt.sizecode))  		return 0;  	/* check its jump */if (!(GET_OPCODE (pt.code [pc + 1]) != OpCode.OP_SETLIST || GETARG_C (pt.code [pc + 1]) != 0))  		return 0;  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,symbexec,The following statement contains a magic number: if (!(pc + 2 < pt.sizecode))  	return 0;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,symbexec,The following statement contains a magic number: checkreg (pt' a + 2 + c);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,symbexec,The following statement contains a magic number: if (reg >= a + 2)  	last = pc;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,symbexec,The following statement contains a magic number: checkreg (pt' a + 3);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaG_ordererror,The following statement contains a magic number: if (t1 [2] == t2 [2])  	luaG_runerror (L' "attempt to compare two %s values"' t1);  else  	luaG_runerror (L' "attempt to compare %s with %s"' t1' t2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaG_ordererror,The following statement contains a magic number: if (t1 [2] == t2 [2])  	luaG_runerror (L' "attempt to compare two %s values"' t1);  else  	luaG_runerror (L' "attempt to compare %s with %s"' t1' t2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaG_errormsg,The following statement contains a magic number: if (L.errfunc != 0) {  	/* is there an error handling function? */StkId errfunc = restorestack (L' L.errfunc);  	if (!ttisfunction (errfunc))  		luaD_throw (L' LUA_ERRERR);  	setobjs2s (L' L.top' L.top - 1);  	/* move argument */setobjs2s (L' L.top - 1' errfunc);  	/* push function */incr_top (L);  	luaD_call (L' L.top - 2' 1);  	/* call it */}  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaG_errormsg,The following statement contains a magic number: luaD_call (L' L.top - 2' 1);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaD_growstack,The following statement contains a magic number: if (n <= L.stacksize)  	/* double size is enough? */luaD_reallocstack (L' 2 * L.stacksize);  else  	luaD_reallocstack (L' L.stacksize + n);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaD_growstack,The following statement contains a magic number: luaD_reallocstack (L' 2 * L.stacksize);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,growCI,The following statement contains a magic number: if (L.size_ci > LUAI_MAXCALLS)  	/* overflow while handling overflow? */luaD_throw (L' LUA_ERRERR);  else {  	luaD_reallocCI (L' 2 * L.size_ci);  	if (L.size_ci > LUAI_MAXCALLS)  		luaG_runerror (L' "stack overflow");  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,growCI,The following statement contains a magic number: luaD_reallocCI (L' 2 * L.size_ci);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaD_call,The following statement contains a magic number: if (++L.nCcalls >= LUAI_MAXCCALLS) {  	if (L.nCcalls == LUAI_MAXCCALLS)  		luaG_runerror (L' "C stack overflow");  	else if (L.nCcalls >= (LUAI_MAXCCALLS + (LUAI_MAXCCALLS >> 3)))  		luaD_throw (L' LUA_ERRERR);  	/* error while handing stack error */}  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaD_call,The following statement contains a magic number: if (L.nCcalls == LUAI_MAXCCALLS)  	luaG_runerror (L' "C stack overflow");  else if (L.nCcalls >= (LUAI_MAXCCALLS + (LUAI_MAXCCALLS >> 3)))  	luaD_throw (L' LUA_ERRERR);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaD_call,The following statement contains a magic number: if (L.nCcalls >= (LUAI_MAXCCALLS + (LUAI_MAXCCALLS >> 3)))  	luaD_throw (L' LUA_ERRERR);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,setthreshold,The following statement contains a magic number: g.GCthreshold = (uint)((g.estimate / 100) * g.gcpause);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,checkstacksizes,The following statement contains a magic number: if (4 * ci_used < L.size_ci && 2 * BASIC_CI_SIZE < L.size_ci)  	luaD_reallocCI (L' L.size_ci / 2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,checkstacksizes,The following statement contains a magic number: if (4 * ci_used < L.size_ci && 2 * BASIC_CI_SIZE < L.size_ci)  	luaD_reallocCI (L' L.size_ci / 2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,checkstacksizes,The following statement contains a magic number: if (4 * ci_used < L.size_ci && 2 * BASIC_CI_SIZE < L.size_ci)  	luaD_reallocCI (L' L.size_ci / 2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,checkstacksizes,The following statement contains a magic number: luaD_reallocCI (L' L.size_ci / 2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,checkstacksizes,The following statement contains a magic number: if (4 * s_used < L.stacksize && 2 * (BASIC_STACK_SIZE + EXTRA_STACK) < L.stacksize)  	luaD_reallocstack (L' L.stacksize / 2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,checkstacksizes,The following statement contains a magic number: if (4 * s_used < L.stacksize && 2 * (BASIC_STACK_SIZE + EXTRA_STACK) < L.stacksize)  	luaD_reallocstack (L' L.stacksize / 2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,checkstacksizes,The following statement contains a magic number: if (4 * s_used < L.stacksize && 2 * (BASIC_STACK_SIZE + EXTRA_STACK) < L.stacksize)  	luaD_reallocstack (L' L.stacksize / 2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,checkstacksizes,The following statement contains a magic number: luaD_reallocstack (L' L.stacksize / 2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,checkSizes,The following statement contains a magic number: if (g.strt.nuse < (lu_int32)(g.strt.size / 4) && g.strt.size > MINSTRTABSIZE * 2)  	luaS_resize (L' g.strt.size / 2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,checkSizes,The following statement contains a magic number: if (g.strt.nuse < (lu_int32)(g.strt.size / 4) && g.strt.size > MINSTRTABSIZE * 2)  	luaS_resize (L' g.strt.size / 2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,checkSizes,The following statement contains a magic number: if (g.strt.nuse < (lu_int32)(g.strt.size / 4) && g.strt.size > MINSTRTABSIZE * 2)  	luaS_resize (L' g.strt.size / 2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,checkSizes,The following statement contains a magic number: luaS_resize (L' g.strt.size / 2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,checkSizes,The following statement contains a magic number: if (luaZ_sizebuffer (g.buff) > LUA_MINBUFFER * 2) {  	/* buffer too big? */uint newsize = luaZ_sizebuffer (g.buff) / 2;  	luaZ_resizebuffer (L' g.buff' (int)newsize);  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,checkSizes,The following statement contains a magic number: if (luaZ_sizebuffer (g.buff) > LUA_MINBUFFER * 2) {  	/* buffer too big? */uint newsize = luaZ_sizebuffer (g.buff) / 2;  	luaZ_resizebuffer (L' g.buff' (int)newsize);  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GCTM,The following statement contains a magic number: if (tm != null) {  	lu_byte oldah = L.allowhook;  	lu_mem oldt = (lu_mem)g.GCthreshold;  	L.allowhook = 0;  	/* stop debug hooks during GC tag method */g.GCthreshold = 2 * g.totalbytes;  	/* avoid GC steps */setobj2s (L' L.top' tm);  	setuvalue (L' L.top + 1' udata);  	L.top += 2;  	luaD_call (L' L.top - 2' 0);  	L.allowhook = oldah;  	/* restore hooks */g.GCthreshold = (uint)oldt;  	/* restore threshold */}  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GCTM,The following statement contains a magic number: if (tm != null) {  	lu_byte oldah = L.allowhook;  	lu_mem oldt = (lu_mem)g.GCthreshold;  	L.allowhook = 0;  	/* stop debug hooks during GC tag method */g.GCthreshold = 2 * g.totalbytes;  	/* avoid GC steps */setobj2s (L' L.top' tm);  	setuvalue (L' L.top + 1' udata);  	L.top += 2;  	luaD_call (L' L.top - 2' 0);  	L.allowhook = oldah;  	/* restore hooks */g.GCthreshold = (uint)oldt;  	/* restore threshold */}  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GCTM,The following statement contains a magic number: if (tm != null) {  	lu_byte oldah = L.allowhook;  	lu_mem oldt = (lu_mem)g.GCthreshold;  	L.allowhook = 0;  	/* stop debug hooks during GC tag method */g.GCthreshold = 2 * g.totalbytes;  	/* avoid GC steps */setobj2s (L' L.top' tm);  	setuvalue (L' L.top + 1' udata);  	L.top += 2;  	luaD_call (L' L.top - 2' 0);  	L.allowhook = oldah;  	/* restore hooks */g.GCthreshold = (uint)oldt;  	/* restore threshold */}  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GCTM,The following statement contains a magic number: g.GCthreshold = 2 * g.totalbytes;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GCTM,The following statement contains a magic number: L.top += 2;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GCTM,The following statement contains a magic number: luaD_call (L' L.top - 2' 0);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaC_step,The following statement contains a magic number: if (lim == 0)  	lim = (l_mem)((MAX_LUMEM - 1) / 2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaC_step,The following statement contains a magic number: lim = (l_mem)((MAX_LUMEM - 1) / 2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,pushresult,The following statement contains a magic number: if (i != 0) {  	lua_pushboolean (L' 1);  	return 1;  } else {  	lua_pushnil (L);  	if (filename != null)  		lua_pushfstring (L' "%s: %s"' filename' strerror (en));  	else  		lua_pushfstring (L' "%s"' strerror (en));  	lua_pushinteger (L' en);  	return 3;  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,pushresult,The following statement contains a magic number: return 3;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,io_type,The following statement contains a magic number: if (ud == null || (lua_getmetatable (L' 1) == 0) || (lua_rawequal (L' -2' -1) == 0))  	lua_pushnil (L);  /* not a file */else if ((ud as FilePtr).file == null)  	lua_pushliteral (L' "closed file");  else  	lua_pushliteral (L' "file");  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,newfile,The following statement contains a magic number: lua_setmetatable (L' -2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,io_noclose,The following statement contains a magic number: return 2;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,aux_lines,The following statement contains a magic number: lua_pushcclosure (L' io_readline' 2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,f_read,The following statement contains a magic number: return g_read (L' tofile (L)' 2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,io_readline,The following statement contains a magic number: if (sucess != 0)  	return 1;  else {  	/* EOF */if (lua_toboolean (L' lua_upvalueindex (2)) != 0) {  		/* generator created file? */lua_settop (L' 0);  		lua_pushvalue (L' lua_upvalueindex (1));  		aux_close (L);  		/* close it */}  	return 0;  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,io_readline,The following statement contains a magic number: if (lua_toboolean (L' lua_upvalueindex (2)) != 0) {  	/* generator created file? */lua_settop (L' 0);  	lua_pushvalue (L' lua_upvalueindex (1));  	aux_close (L);  	/* close it */}  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,f_write,The following statement contains a magic number: return g_write (L' tofile (L)' 2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,createmeta,The following statement contains a magic number: lua_setfield (L' -2' "__index");  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,createstdfile,The following statement contains a magic number: lua_pushvalue (L' -2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,createstdfile,The following statement contains a magic number: lua_setfenv (L' -2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,createstdfile,The following statement contains a magic number: lua_setfield (L' -3' fname);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,newfenv,The following statement contains a magic number: lua_setfield (L' -2' "__close");  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaopen_io,The following statement contains a magic number: lua_setfenv (L' -2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,save,The following statement contains a magic number: if (b.n + 1 > b.buffsize) {  	uint newsize;  	if (b.buffsize >= MAX_SIZET / 2)  		luaX_lexerror (ls' "lexical element too long"' 0);  	newsize = b.buffsize * 2;  	luaZ_resizebuffer (ls.L' b' (int)newsize);  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,save,The following statement contains a magic number: if (b.n + 1 > b.buffsize) {  	uint newsize;  	if (b.buffsize >= MAX_SIZET / 2)  		luaX_lexerror (ls' "lexical element too long"' 0);  	newsize = b.buffsize * 2;  	luaZ_resizebuffer (ls.L' b' (int)newsize);  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,save,The following statement contains a magic number: if (b.buffsize >= MAX_SIZET / 2)  	luaX_lexerror (ls' "lexical element too long"' 0);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,save,The following statement contains a magic number: newsize = b.buffsize * 2;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,read_long_string,The following statement contains a magic number: if (seminfo != null) {  	seminfo.ts = luaX_newstring (ls' luaZ_buffer (ls.buff) + (2 + sep)' (uint)(luaZ_bufflen (ls.buff) - 2 * (2 + sep)));  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,read_long_string,The following statement contains a magic number: if (seminfo != null) {  	seminfo.ts = luaX_newstring (ls' luaZ_buffer (ls.buff) + (2 + sep)' (uint)(luaZ_bufflen (ls.buff) - 2 * (2 + sep)));  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,read_long_string,The following statement contains a magic number: if (seminfo != null) {  	seminfo.ts = luaX_newstring (ls' luaZ_buffer (ls.buff) + (2 + sep)' (uint)(luaZ_bufflen (ls.buff) - 2 * (2 + sep)));  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,read_long_string,The following statement contains a magic number: seminfo.ts = luaX_newstring (ls' luaZ_buffer (ls.buff) + (2 + sep)' (uint)(luaZ_bufflen (ls.buff) - 2 * (2 + sep)));  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,read_long_string,The following statement contains a magic number: seminfo.ts = luaX_newstring (ls' luaZ_buffer (ls.buff) + (2 + sep)' (uint)(luaZ_bufflen (ls.buff) - 2 * (2 + sep)));  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,read_long_string,The following statement contains a magic number: seminfo.ts = luaX_newstring (ls' luaZ_buffer (ls.buff) + (2 + sep)' (uint)(luaZ_bufflen (ls.buff) - 2 * (2 + sep)));  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,read_string,The following statement contains a magic number: while (ls.current != del) {  	switch (ls.current) {  	case EOZ:  		luaX_lexerror (ls' "unfinished string"' (int)RESERVED.TK_EOS);  		continue;  	/* to avoid warnings */case '\n':  	case '\r':  		luaX_lexerror (ls' "unfinished string"' (int)RESERVED.TK_STRING);  		continue;  	/* to avoid warnings */case '\\': {  		int c;  		next (ls);  		/* do not save the `\' */switch (ls.current) {  		case 'a':  			c = '\a';  			break;  		case 'b':  			c = '\b';  			break;  		case 'f':  			c = '\f';  			break;  		case 'n':  			c = '\n';  			break;  		case 'r':  			c = '\r';  			break;  		case 't':  			c = '\t';  			break;  		case 'v':  			c = '\v';  			break;  		case '\n':  		/* go through */case '\r':  			save (ls' '\n');  			inclinenumber (ls);  			continue;  		case EOZ:  			continue;  		/* will raise an error next loop */default: {  			if (!isdigit (ls.current))  				save_and_next (ls);  			/* handles \\' \"' \'' and \? */else {  				/* \xxx */int i = 0;  				c = 0;  				do {  					c = 10 * c + (ls.current - '0');  					next (ls);  				} while (++i < 3 && isdigit (ls.current));  				if (c > System.Byte.MaxValue)  					luaX_lexerror (ls' "escape sequence too large"' (int)RESERVED.TK_STRING);  				save (ls' c);  			}  			continue;  		}  		}  		save (ls' c);  		next (ls);  		continue;  	}  	default:  		save_and_next (ls);  		break;  	}  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,read_string,The following statement contains a magic number: while (ls.current != del) {  	switch (ls.current) {  	case EOZ:  		luaX_lexerror (ls' "unfinished string"' (int)RESERVED.TK_EOS);  		continue;  	/* to avoid warnings */case '\n':  	case '\r':  		luaX_lexerror (ls' "unfinished string"' (int)RESERVED.TK_STRING);  		continue;  	/* to avoid warnings */case '\\': {  		int c;  		next (ls);  		/* do not save the `\' */switch (ls.current) {  		case 'a':  			c = '\a';  			break;  		case 'b':  			c = '\b';  			break;  		case 'f':  			c = '\f';  			break;  		case 'n':  			c = '\n';  			break;  		case 'r':  			c = '\r';  			break;  		case 't':  			c = '\t';  			break;  		case 'v':  			c = '\v';  			break;  		case '\n':  		/* go through */case '\r':  			save (ls' '\n');  			inclinenumber (ls);  			continue;  		case EOZ:  			continue;  		/* will raise an error next loop */default: {  			if (!isdigit (ls.current))  				save_and_next (ls);  			/* handles \\' \"' \'' and \? */else {  				/* \xxx */int i = 0;  				c = 0;  				do {  					c = 10 * c + (ls.current - '0');  					next (ls);  				} while (++i < 3 && isdigit (ls.current));  				if (c > System.Byte.MaxValue)  					luaX_lexerror (ls' "escape sequence too large"' (int)RESERVED.TK_STRING);  				save (ls' c);  			}  			continue;  		}  		}  		save (ls' c);  		next (ls);  		continue;  	}  	default:  		save_and_next (ls);  		break;  	}  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,read_string,The following statement contains a magic number: switch (ls.current) {  case EOZ:  	luaX_lexerror (ls' "unfinished string"' (int)RESERVED.TK_EOS);  	continue;  /* to avoid warnings */case '\n':  case '\r':  	luaX_lexerror (ls' "unfinished string"' (int)RESERVED.TK_STRING);  	continue;  /* to avoid warnings */case '\\': {  	int c;  	next (ls);  	/* do not save the `\' */switch (ls.current) {  	case 'a':  		c = '\a';  		break;  	case 'b':  		c = '\b';  		break;  	case 'f':  		c = '\f';  		break;  	case 'n':  		c = '\n';  		break;  	case 'r':  		c = '\r';  		break;  	case 't':  		c = '\t';  		break;  	case 'v':  		c = '\v';  		break;  	case '\n':  	/* go through */case '\r':  		save (ls' '\n');  		inclinenumber (ls);  		continue;  	case EOZ:  		continue;  	/* will raise an error next loop */default: {  		if (!isdigit (ls.current))  			save_and_next (ls);  		/* handles \\' \"' \'' and \? */else {  			/* \xxx */int i = 0;  			c = 0;  			do {  				c = 10 * c + (ls.current - '0');  				next (ls);  			} while (++i < 3 && isdigit (ls.current));  			if (c > System.Byte.MaxValue)  				luaX_lexerror (ls' "escape sequence too large"' (int)RESERVED.TK_STRING);  			save (ls' c);  		}  		continue;  	}  	}  	save (ls' c);  	next (ls);  	continue;  }  default:  	save_and_next (ls);  	break;  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,read_string,The following statement contains a magic number: switch (ls.current) {  case EOZ:  	luaX_lexerror (ls' "unfinished string"' (int)RESERVED.TK_EOS);  	continue;  /* to avoid warnings */case '\n':  case '\r':  	luaX_lexerror (ls' "unfinished string"' (int)RESERVED.TK_STRING);  	continue;  /* to avoid warnings */case '\\': {  	int c;  	next (ls);  	/* do not save the `\' */switch (ls.current) {  	case 'a':  		c = '\a';  		break;  	case 'b':  		c = '\b';  		break;  	case 'f':  		c = '\f';  		break;  	case 'n':  		c = '\n';  		break;  	case 'r':  		c = '\r';  		break;  	case 't':  		c = '\t';  		break;  	case 'v':  		c = '\v';  		break;  	case '\n':  	/* go through */case '\r':  		save (ls' '\n');  		inclinenumber (ls);  		continue;  	case EOZ:  		continue;  	/* will raise an error next loop */default: {  		if (!isdigit (ls.current))  			save_and_next (ls);  		/* handles \\' \"' \'' and \? */else {  			/* \xxx */int i = 0;  			c = 0;  			do {  				c = 10 * c + (ls.current - '0');  				next (ls);  			} while (++i < 3 && isdigit (ls.current));  			if (c > System.Byte.MaxValue)  				luaX_lexerror (ls' "escape sequence too large"' (int)RESERVED.TK_STRING);  			save (ls' c);  		}  		continue;  	}  	}  	save (ls' c);  	next (ls);  	continue;  }  default:  	save_and_next (ls);  	break;  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,read_string,The following statement contains a magic number: switch (ls.current) {  case 'a':  	c = '\a';  	break;  case 'b':  	c = '\b';  	break;  case 'f':  	c = '\f';  	break;  case 'n':  	c = '\n';  	break;  case 'r':  	c = '\r';  	break;  case 't':  	c = '\t';  	break;  case 'v':  	c = '\v';  	break;  case '\n':  /* go through */case '\r':  	save (ls' '\n');  	inclinenumber (ls);  	continue;  case EOZ:  	continue;  /* will raise an error next loop */default: {  	if (!isdigit (ls.current))  		save_and_next (ls);  	/* handles \\' \"' \'' and \? */else {  		/* \xxx */int i = 0;  		c = 0;  		do {  			c = 10 * c + (ls.current - '0');  			next (ls);  		} while (++i < 3 && isdigit (ls.current));  		if (c > System.Byte.MaxValue)  			luaX_lexerror (ls' "escape sequence too large"' (int)RESERVED.TK_STRING);  		save (ls' c);  	}  	continue;  }  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,read_string,The following statement contains a magic number: switch (ls.current) {  case 'a':  	c = '\a';  	break;  case 'b':  	c = '\b';  	break;  case 'f':  	c = '\f';  	break;  case 'n':  	c = '\n';  	break;  case 'r':  	c = '\r';  	break;  case 't':  	c = '\t';  	break;  case 'v':  	c = '\v';  	break;  case '\n':  /* go through */case '\r':  	save (ls' '\n');  	inclinenumber (ls);  	continue;  case EOZ:  	continue;  /* will raise an error next loop */default: {  	if (!isdigit (ls.current))  		save_and_next (ls);  	/* handles \\' \"' \'' and \? */else {  		/* \xxx */int i = 0;  		c = 0;  		do {  			c = 10 * c + (ls.current - '0');  			next (ls);  		} while (++i < 3 && isdigit (ls.current));  		if (c > System.Byte.MaxValue)  			luaX_lexerror (ls' "escape sequence too large"' (int)RESERVED.TK_STRING);  		save (ls' c);  	}  	continue;  }  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,read_string,The following statement contains a magic number: if (!isdigit (ls.current))  	save_and_next (ls);  /* handles \\' \"' \'' and \? */else {  	/* \xxx */int i = 0;  	c = 0;  	do {  		c = 10 * c + (ls.current - '0');  		next (ls);  	} while (++i < 3 && isdigit (ls.current));  	if (c > System.Byte.MaxValue)  		luaX_lexerror (ls' "escape sequence too large"' (int)RESERVED.TK_STRING);  	save (ls' c);  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,read_string,The following statement contains a magic number: if (!isdigit (ls.current))  	save_and_next (ls);  /* handles \\' \"' \'' and \? */else {  	/* \xxx */int i = 0;  	c = 0;  	do {  		c = 10 * c + (ls.current - '0');  		next (ls);  	} while (++i < 3 && isdigit (ls.current));  	if (c > System.Byte.MaxValue)  		luaX_lexerror (ls' "escape sequence too large"' (int)RESERVED.TK_STRING);  	save (ls' c);  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,read_string,The following statement contains a magic number: do {  	c = 10 * c + (ls.current - '0');  	next (ls);  } while (++i < 3 && isdigit (ls.current));  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,read_string,The following statement contains a magic number: do {  	c = 10 * c + (ls.current - '0');  	next (ls);  } while (++i < 3 && isdigit (ls.current));  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,read_string,The following statement contains a magic number: c = 10 * c + (ls.current - '0');  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,read_string,The following statement contains a magic number: seminfo.ts = luaX_newstring (ls' luaZ_buffer (ls.buff) + 1' luaZ_bufflen (ls.buff) - 2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,math_atan2,The following statement contains a magic number: lua_pushnumber (L' Math.Atan2 (luaL_checknumber (L' 1)' luaL_checknumber (L' 2)));  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,math_fmod,The following statement contains a magic number: lua_pushnumber (L' fmod (luaL_checknumber (L' 1)' luaL_checknumber (L' 2)));  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,math_modf,The following statement contains a magic number: return 2;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,math_pow,The following statement contains a magic number: lua_pushnumber (L' Math.Pow (luaL_checknumber (L' 1)' luaL_checknumber (L' 2)));  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,math_frexp,The following statement contains a magic number: return 2;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,math_ldexp,The following statement contains a magic number: lua_pushnumber (L' ldexp (luaL_checknumber (L' 1)' luaL_checkint (L' 2)));  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,math_min,The following statement contains a magic number: for (i = 2; i <= n; i++) {  	lua_Number d = luaL_checknumber (L' i);  	if (d < dmin)  		dmin = d;  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,math_min,The following statement contains a magic number: i = 2
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,math_max,The following statement contains a magic number: for (i = 2; i <= n; i++) {  	lua_Number d = luaL_checknumber (L' i);  	if (d > dmax)  		dmax = d;  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,math_max,The following statement contains a magic number: i = 2
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,math_random,The following statement contains a magic number: switch (lua_gettop (L)) {  /* check number of arguments */case 0: {  	/* no arguments */lua_pushnumber (L' r);  	/* Number between 0 and 1 */break;  }  case 1: {  	/* only upper limit */int u = luaL_checkint (L' 1);  	luaL_argcheck (L' 1 <= u' 1' "interval is empty");  	lua_pushnumber (L' Math.Floor (r * u) + 1);  	/* int between 1 and `u' */break;  }  case 2: {  	/* lower and upper limits */int l = luaL_checkint (L' 1);  	int u = luaL_checkint (L' 2);  	luaL_argcheck (L' l <= u' 2' "interval is empty");  	lua_pushnumber (L' Math.Floor (r * (u - l + 1)) + l);  	/* int between `l' and `u' */break;  }  default:  	return luaL_error (L' "wrong number of arguments");  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,math_random,The following statement contains a magic number: switch (lua_gettop (L)) {  /* check number of arguments */case 0: {  	/* no arguments */lua_pushnumber (L' r);  	/* Number between 0 and 1 */break;  }  case 1: {  	/* only upper limit */int u = luaL_checkint (L' 1);  	luaL_argcheck (L' 1 <= u' 1' "interval is empty");  	lua_pushnumber (L' Math.Floor (r * u) + 1);  	/* int between 1 and `u' */break;  }  case 2: {  	/* lower and upper limits */int l = luaL_checkint (L' 1);  	int u = luaL_checkint (L' 2);  	luaL_argcheck (L' l <= u' 2' "interval is empty");  	lua_pushnumber (L' Math.Floor (r * (u - l + 1)) + l);  	/* int between `l' and `u' */break;  }  default:  	return luaL_error (L' "wrong number of arguments");  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,math_random,The following statement contains a magic number: switch (lua_gettop (L)) {  /* check number of arguments */case 0: {  	/* no arguments */lua_pushnumber (L' r);  	/* Number between 0 and 1 */break;  }  case 1: {  	/* only upper limit */int u = luaL_checkint (L' 1);  	luaL_argcheck (L' 1 <= u' 1' "interval is empty");  	lua_pushnumber (L' Math.Floor (r * u) + 1);  	/* int between 1 and `u' */break;  }  case 2: {  	/* lower and upper limits */int l = luaL_checkint (L' 1);  	int u = luaL_checkint (L' 2);  	luaL_argcheck (L' l <= u' 2' "interval is empty");  	lua_pushnumber (L' Math.Floor (r * (u - l + 1)) + l);  	/* int between `l' and `u' */break;  }  default:  	return luaL_error (L' "wrong number of arguments");  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,math_random,The following statement contains a magic number: luaL_argcheck (L' l <= u' 2' "interval is empty");  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaopen_math,The following statement contains a magic number: lua_setfield (L' -2' "pi");  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaopen_math,The following statement contains a magic number: lua_setfield (L' -2' "huge");  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaopen_math,The following statement contains a magic number: lua_setfield (L' -2' "mod");  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaM_growaux_,The following statement contains a magic number: if (size >= limit / 2) {  	/* cannot double it? */if (size >= limit)  		/* cannot grow even a little? */luaG_runerror (L' errormsg);  	newsize = limit;  	/* still have at least one free place */} else {  	newsize = size * 2;  	if (newsize < MINSIZEARRAY)  		newsize = MINSIZEARRAY;  	/* minimum size */}  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaM_growaux_,The following statement contains a magic number: if (size >= limit / 2) {  	/* cannot double it? */if (size >= limit)  		/* cannot grow even a little? */luaG_runerror (L' errormsg);  	newsize = limit;  	/* still have at least one free place */} else {  	newsize = size * 2;  	if (newsize < MINSIZEARRAY)  		newsize = MINSIZEARRAY;  	/* minimum size */}  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaM_growaux_,The following statement contains a magic number: newsize = size * 2;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,setprogdir,The following statement contains a magic number: lua_remove (L' -2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,ll_register,The following statement contains a magic number: if (!lua_isnil (L' -1))  	/* is there an entry? */plib = lua_touserdata (L' -1);  else {  	/* no entry yet; create one */lua_pop (L' 1);  	//plib = lua_newuserdata(L' (uint)Marshal.SizeOf(plib));  	//plib[0] = null;  	luaL_getmetatable (L' "_LOADLIB");  	lua_setmetatable (L' -2);  	lua_pushfstring (L' "%s%s"' LIBPREFIX' path);  	lua_pushvalue (L' -2);  	lua_settable (L' LUA_REGISTRYINDEX);  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,ll_register,The following statement contains a magic number: if (!lua_isnil (L' -1))  	/* is there an entry? */plib = lua_touserdata (L' -1);  else {  	/* no entry yet; create one */lua_pop (L' 1);  	//plib = lua_newuserdata(L' (uint)Marshal.SizeOf(plib));  	//plib[0] = null;  	luaL_getmetatable (L' "_LOADLIB");  	lua_setmetatable (L' -2);  	lua_pushfstring (L' "%s%s"' LIBPREFIX' path);  	lua_pushvalue (L' -2);  	lua_settable (L' LUA_REGISTRYINDEX);  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,ll_register,The following statement contains a magic number: lua_setmetatable (L' -2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,ll_register,The following statement contains a magic number: lua_pushvalue (L' -2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,ll_loadlib,The following statement contains a magic number: if (stat == 0)  	/* no errors? */return 1;  /* return the loaded function */else {  	/* error; error message is on stack top */lua_pushnil (L);  	lua_insert (L' -2);  	lua_pushstring (L' (stat == ERRLIB) ? LIB_FAIL : "init");  	return 3;  	/* return nil' error message' and where */}  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,ll_loadlib,The following statement contains a magic number: if (stat == 0)  	/* no errors? */return 1;  /* return the loaded function */else {  	/* error; error message is on stack top */lua_pushnil (L);  	lua_insert (L' -2);  	lua_pushstring (L' (stat == ERRLIB) ? LIB_FAIL : "init");  	return 3;  	/* return nil' error message' and where */}  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,ll_loadlib,The following statement contains a magic number: lua_insert (L' -2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,ll_loadlib,The following statement contains a magic number: return 3;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,findfile,The following statement contains a magic number: while ((path = pushnexttemplate (L' path)) != null) {  	CharPtr filename;  	filename = luaL_gsub (L' lua_tostring (L' -1)' LUA_PATH_MARK' name);  	lua_remove (L' -2);  	/* remove path template */if (readable (filename) != 0)  		/* does file exist and is readable? */return filename;  	/* return that file name */lua_pushfstring (L' "\n\tno file " + LUA_QS' filename);  	lua_remove (L' -2);  	/* remove file name */lua_concat (L' 2);  	/* add entry to possible error message */}  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,findfile,The following statement contains a magic number: while ((path = pushnexttemplate (L' path)) != null) {  	CharPtr filename;  	filename = luaL_gsub (L' lua_tostring (L' -1)' LUA_PATH_MARK' name);  	lua_remove (L' -2);  	/* remove path template */if (readable (filename) != 0)  		/* does file exist and is readable? */return filename;  	/* return that file name */lua_pushfstring (L' "\n\tno file " + LUA_QS' filename);  	lua_remove (L' -2);  	/* remove file name */lua_concat (L' 2);  	/* add entry to possible error message */}  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,findfile,The following statement contains a magic number: while ((path = pushnexttemplate (L' path)) != null) {  	CharPtr filename;  	filename = luaL_gsub (L' lua_tostring (L' -1)' LUA_PATH_MARK' name);  	lua_remove (L' -2);  	/* remove path template */if (readable (filename) != 0)  		/* does file exist and is readable? */return filename;  	/* return that file name */lua_pushfstring (L' "\n\tno file " + LUA_QS' filename);  	lua_remove (L' -2);  	/* remove file name */lua_concat (L' 2);  	/* add entry to possible error message */}  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,findfile,The following statement contains a magic number: lua_remove (L' -2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,findfile,The following statement contains a magic number: lua_remove (L' -2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,findfile,The following statement contains a magic number: lua_concat (L' 2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,mkfuncname,The following statement contains a magic number: lua_remove (L' -2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,ll_require,The following statement contains a magic number: lua_getfield (L' 2' name);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,ll_require,The following statement contains a magic number: for (i = 1; ; i++) {  	lua_rawgeti (L' -2' i);  	/* get a loader */if (lua_isnil (L' -1))  		luaL_error (L' "module " + LUA_QS + " not found:%s"' name' lua_tostring (L' -2));  	lua_pushstring (L' name);  	lua_call (L' 1' 1);  	/* call it */if (lua_isfunction (L' -1))  		/* did it find module? */break;  	/* module loaded successfully */else if (lua_isstring (L' -1) != 0)  		/* loader returned error message? */lua_concat (L' 2);  	/* accumulate it */else  		lua_pop (L' 1);  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,ll_require,The following statement contains a magic number: for (i = 1; ; i++) {  	lua_rawgeti (L' -2' i);  	/* get a loader */if (lua_isnil (L' -1))  		luaL_error (L' "module " + LUA_QS + " not found:%s"' name' lua_tostring (L' -2));  	lua_pushstring (L' name);  	lua_call (L' 1' 1);  	/* call it */if (lua_isfunction (L' -1))  		/* did it find module? */break;  	/* module loaded successfully */else if (lua_isstring (L' -1) != 0)  		/* loader returned error message? */lua_concat (L' 2);  	/* accumulate it */else  		lua_pop (L' 1);  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,ll_require,The following statement contains a magic number: for (i = 1; ; i++) {  	lua_rawgeti (L' -2' i);  	/* get a loader */if (lua_isnil (L' -1))  		luaL_error (L' "module " + LUA_QS + " not found:%s"' name' lua_tostring (L' -2));  	lua_pushstring (L' name);  	lua_call (L' 1' 1);  	/* call it */if (lua_isfunction (L' -1))  		/* did it find module? */break;  	/* module loaded successfully */else if (lua_isstring (L' -1) != 0)  		/* loader returned error message? */lua_concat (L' 2);  	/* accumulate it */else  		lua_pop (L' 1);  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,ll_require,The following statement contains a magic number: lua_rawgeti (L' -2' i);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,ll_require,The following statement contains a magic number: if (lua_isnil (L' -1))  	luaL_error (L' "module " + LUA_QS + " not found:%s"' name' lua_tostring (L' -2));  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,ll_require,The following statement contains a magic number: luaL_error (L' "module " + LUA_QS + " not found:%s"' name' lua_tostring (L' -2));  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,ll_require,The following statement contains a magic number: if (lua_isfunction (L' -1))  	/* did it find module? */break;  /* module loaded successfully */else if (lua_isstring (L' -1) != 0)  	/* loader returned error message? */lua_concat (L' 2);  /* accumulate it */else  	lua_pop (L' 1);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,ll_require,The following statement contains a magic number: if (lua_isstring (L' -1) != 0)  	/* loader returned error message? */lua_concat (L' 2);  /* accumulate it */else  	lua_pop (L' 1);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,ll_require,The following statement contains a magic number: lua_concat (L' 2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,ll_require,The following statement contains a magic number: lua_setfield (L' 2' name);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,ll_require,The following statement contains a magic number: if (!lua_isnil (L' -1))  	/* non-nil return? */lua_setfield (L' 2' name);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,ll_require,The following statement contains a magic number: lua_setfield (L' 2' name);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,ll_require,The following statement contains a magic number: lua_getfield (L' 2' name);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,ll_require,The following statement contains a magic number: if (lua_touserdata (L' -1) == sentinel) {  	/* module did not set a value? */lua_pushboolean (L' 1);  	/* use true as result */lua_pushvalue (L' -1);  	/* extra copy to be returned */lua_setfield (L' 2' name);  	/* _LOADED[name] = true */}  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,ll_require,The following statement contains a magic number: lua_setfield (L' 2' name);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,setfenv,The following statement contains a magic number: lua_pushvalue (L' -2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,setfenv,The following statement contains a magic number: lua_setfenv (L' -2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,dooptions,The following statement contains a magic number: for (i = 2; i <= n; i++) {  	lua_pushvalue (L' i);  	/* get option (a function) */lua_pushvalue (L' -2);  	/* module */lua_call (L' 1' 0);  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,dooptions,The following statement contains a magic number: for (i = 2; i <= n; i++) {  	lua_pushvalue (L' i);  	/* get option (a function) */lua_pushvalue (L' -2);  	/* module */lua_call (L' 1' 0);  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,dooptions,The following statement contains a magic number: i = 2
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,dooptions,The following statement contains a magic number: lua_pushvalue (L' -2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,modinit,The following statement contains a magic number: lua_setfield (L' -2' "_M");  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,modinit,The following statement contains a magic number: lua_setfield (L' -2' "_NAME");  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,modinit,The following statement contains a magic number: lua_setfield (L' -2' "_PACKAGE");  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,ll_seeall,The following statement contains a magic number: lua_setfield (L' -2' "__index");  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,setpath,The following statement contains a magic number: if (path == null)  	/* no environment variable? */lua_pushstring (L' def);  /* use default */else {  	/* replace ";;" by ";AUXMARK;" and then AUXMARK by default path */path = luaL_gsub (L' path' LUA_PATHSEP + LUA_PATHSEP' LUA_PATHSEP + AUXMARK + LUA_PATHSEP);  	luaL_gsub (L' path' AUXMARK' def);  	lua_remove (L' -2);  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,setpath,The following statement contains a magic number: lua_remove (L' -2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,setpath,The following statement contains a magic number: lua_setfield (L' -2' fieldname);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaopen_package,The following statement contains a magic number: lua_setfield (L' -2' "__gc");  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaopen_package,The following statement contains a magic number: for (i = 0; loaders [i] != null; i++) {  	lua_pushcfunction (L' loaders [i]);  	lua_rawseti (L' -2' i + 1);  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaopen_package,The following statement contains a magic number: lua_rawseti (L' -2' i + 1);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaopen_package,The following statement contains a magic number: lua_setfield (L' -2' "loaders");  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaopen_package,The following statement contains a magic number: lua_setfield (L' -2' "config");  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaopen_package,The following statement contains a magic number: luaL_findtable (L' LUA_REGISTRYINDEX' "_LOADED"' 2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaopen_package,The following statement contains a magic number: lua_setfield (L' -2' "loaded");  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaopen_package,The following statement contains a magic number: lua_setfield (L' -2' "preload");  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaO_int2fb,The following statement contains a magic number: while (x >= 16) {  	x = (x + 1) >> 1;  	e++;  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaO_int2fb,The following statement contains a magic number: if (x < 8)  	return (int)x;  else  	return ((e + 1) << 3) | (cast_int (x) - 8);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaO_int2fb,The following statement contains a magic number: if (x < 8)  	return (int)x;  else  	return ((e + 1) << 3) | (cast_int (x) - 8);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaO_int2fb,The following statement contains a magic number: if (x < 8)  	return (int)x;  else  	return ((e + 1) << 3) | (cast_int (x) - 8);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaO_int2fb,The following statement contains a magic number: return ((e + 1) << 3) | (cast_int (x) - 8);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaO_int2fb,The following statement contains a magic number: return ((e + 1) << 3) | (cast_int (x) - 8);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaO_fb2int,The following statement contains a magic number: if (e == 0)  	return x;  else  	return ((x & 7) + 8) << (e - 1);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaO_fb2int,The following statement contains a magic number: if (e == 0)  	return x;  else  	return ((x & 7) + 8) << (e - 1);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaO_fb2int,The following statement contains a magic number: return ((x & 7) + 8) << (e - 1);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaO_fb2int,The following statement contains a magic number: return ((x & 7) + 8) << (e - 1);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaO_log2,The following statement contains a magic number: while (x >= 256) {  	l += 8;  	x >>= 8;  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaO_log2,The following statement contains a magic number: while (x >= 256) {  	l += 8;  	x >>= 8;  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaO_log2,The following statement contains a magic number: while (x >= 256) {  	l += 8;  	x >>= 8;  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaO_log2,The following statement contains a magic number: l += 8;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaO_log2,The following statement contains a magic number: x >>= 8;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaO_str2d,The following statement contains a magic number: if (endptr [0] == 'x' || endptr [0] == 'X')  	/* maybe an hexadecimal constant? */result = cast_num (strtoul (s' out endptr' 16));  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaO_str2d,The following statement contains a magic number: result = cast_num (strtoul (s' out endptr' 16));  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaO_pushvfstring,The following statement contains a magic number: for (; ;) {  	CharPtr e = strchr (fmt' '%');  	if (e == null)  		break;  	setsvalue2s (L' L.top' luaS_newlstr (L' fmt' (uint)(e - fmt)));  	incr_top (L);  	switch (e [1]) {  	case 's': {  		object o = argp [parm_index++];  		CharPtr s = o as CharPtr;  		if (s == null)  			s = (string)o;  		if (s == null)  			s = "(null)";  		pushstr (L' s);  		break;  	}  	case 'c': {  		CharPtr buff = new char[2];  		buff [0] = (char)(int)argp [parm_index++];  		buff [1] = '\0';  		pushstr (L' buff);  		break;  	}  	case 'd': {  		setnvalue (L.top' (int)argp [parm_index++]);  		incr_top (L);  		break;  	}  	case 'f': {  		setnvalue (L.top' (l_uacNumber)argp [parm_index++]);  		incr_top (L);  		break;  	}  	case 'p': {  		//CharPtr buff = new char[4*sizeof(void *) + 8]; /* should be enough space for a `%p' */  		CharPtr buff = new char[32];  		sprintf (buff' "0x%08x"' argp [parm_index++].GetHashCode ());  		pushstr (L' buff);  		break;  	}  	case '%': {  		pushstr (L' "%");  		break;  	}  	default: {  		CharPtr buff = new char[3];  		buff [0] = '%';  		buff [1] = e [1];  		buff [2] = '\0';  		pushstr (L' buff);  		break;  	}  	}  	n += 2;  	fmt = e + 2;  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaO_pushvfstring,The following statement contains a magic number: for (; ;) {  	CharPtr e = strchr (fmt' '%');  	if (e == null)  		break;  	setsvalue2s (L' L.top' luaS_newlstr (L' fmt' (uint)(e - fmt)));  	incr_top (L);  	switch (e [1]) {  	case 's': {  		object o = argp [parm_index++];  		CharPtr s = o as CharPtr;  		if (s == null)  			s = (string)o;  		if (s == null)  			s = "(null)";  		pushstr (L' s);  		break;  	}  	case 'c': {  		CharPtr buff = new char[2];  		buff [0] = (char)(int)argp [parm_index++];  		buff [1] = '\0';  		pushstr (L' buff);  		break;  	}  	case 'd': {  		setnvalue (L.top' (int)argp [parm_index++]);  		incr_top (L);  		break;  	}  	case 'f': {  		setnvalue (L.top' (l_uacNumber)argp [parm_index++]);  		incr_top (L);  		break;  	}  	case 'p': {  		//CharPtr buff = new char[4*sizeof(void *) + 8]; /* should be enough space for a `%p' */  		CharPtr buff = new char[32];  		sprintf (buff' "0x%08x"' argp [parm_index++].GetHashCode ());  		pushstr (L' buff);  		break;  	}  	case '%': {  		pushstr (L' "%");  		break;  	}  	default: {  		CharPtr buff = new char[3];  		buff [0] = '%';  		buff [1] = e [1];  		buff [2] = '\0';  		pushstr (L' buff);  		break;  	}  	}  	n += 2;  	fmt = e + 2;  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaO_pushvfstring,The following statement contains a magic number: for (; ;) {  	CharPtr e = strchr (fmt' '%');  	if (e == null)  		break;  	setsvalue2s (L' L.top' luaS_newlstr (L' fmt' (uint)(e - fmt)));  	incr_top (L);  	switch (e [1]) {  	case 's': {  		object o = argp [parm_index++];  		CharPtr s = o as CharPtr;  		if (s == null)  			s = (string)o;  		if (s == null)  			s = "(null)";  		pushstr (L' s);  		break;  	}  	case 'c': {  		CharPtr buff = new char[2];  		buff [0] = (char)(int)argp [parm_index++];  		buff [1] = '\0';  		pushstr (L' buff);  		break;  	}  	case 'd': {  		setnvalue (L.top' (int)argp [parm_index++]);  		incr_top (L);  		break;  	}  	case 'f': {  		setnvalue (L.top' (l_uacNumber)argp [parm_index++]);  		incr_top (L);  		break;  	}  	case 'p': {  		//CharPtr buff = new char[4*sizeof(void *) + 8]; /* should be enough space for a `%p' */  		CharPtr buff = new char[32];  		sprintf (buff' "0x%08x"' argp [parm_index++].GetHashCode ());  		pushstr (L' buff);  		break;  	}  	case '%': {  		pushstr (L' "%");  		break;  	}  	default: {  		CharPtr buff = new char[3];  		buff [0] = '%';  		buff [1] = e [1];  		buff [2] = '\0';  		pushstr (L' buff);  		break;  	}  	}  	n += 2;  	fmt = e + 2;  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaO_pushvfstring,The following statement contains a magic number: for (; ;) {  	CharPtr e = strchr (fmt' '%');  	if (e == null)  		break;  	setsvalue2s (L' L.top' luaS_newlstr (L' fmt' (uint)(e - fmt)));  	incr_top (L);  	switch (e [1]) {  	case 's': {  		object o = argp [parm_index++];  		CharPtr s = o as CharPtr;  		if (s == null)  			s = (string)o;  		if (s == null)  			s = "(null)";  		pushstr (L' s);  		break;  	}  	case 'c': {  		CharPtr buff = new char[2];  		buff [0] = (char)(int)argp [parm_index++];  		buff [1] = '\0';  		pushstr (L' buff);  		break;  	}  	case 'd': {  		setnvalue (L.top' (int)argp [parm_index++]);  		incr_top (L);  		break;  	}  	case 'f': {  		setnvalue (L.top' (l_uacNumber)argp [parm_index++]);  		incr_top (L);  		break;  	}  	case 'p': {  		//CharPtr buff = new char[4*sizeof(void *) + 8]; /* should be enough space for a `%p' */  		CharPtr buff = new char[32];  		sprintf (buff' "0x%08x"' argp [parm_index++].GetHashCode ());  		pushstr (L' buff);  		break;  	}  	case '%': {  		pushstr (L' "%");  		break;  	}  	default: {  		CharPtr buff = new char[3];  		buff [0] = '%';  		buff [1] = e [1];  		buff [2] = '\0';  		pushstr (L' buff);  		break;  	}  	}  	n += 2;  	fmt = e + 2;  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaO_pushvfstring,The following statement contains a magic number: for (; ;) {  	CharPtr e = strchr (fmt' '%');  	if (e == null)  		break;  	setsvalue2s (L' L.top' luaS_newlstr (L' fmt' (uint)(e - fmt)));  	incr_top (L);  	switch (e [1]) {  	case 's': {  		object o = argp [parm_index++];  		CharPtr s = o as CharPtr;  		if (s == null)  			s = (string)o;  		if (s == null)  			s = "(null)";  		pushstr (L' s);  		break;  	}  	case 'c': {  		CharPtr buff = new char[2];  		buff [0] = (char)(int)argp [parm_index++];  		buff [1] = '\0';  		pushstr (L' buff);  		break;  	}  	case 'd': {  		setnvalue (L.top' (int)argp [parm_index++]);  		incr_top (L);  		break;  	}  	case 'f': {  		setnvalue (L.top' (l_uacNumber)argp [parm_index++]);  		incr_top (L);  		break;  	}  	case 'p': {  		//CharPtr buff = new char[4*sizeof(void *) + 8]; /* should be enough space for a `%p' */  		CharPtr buff = new char[32];  		sprintf (buff' "0x%08x"' argp [parm_index++].GetHashCode ());  		pushstr (L' buff);  		break;  	}  	case '%': {  		pushstr (L' "%");  		break;  	}  	default: {  		CharPtr buff = new char[3];  		buff [0] = '%';  		buff [1] = e [1];  		buff [2] = '\0';  		pushstr (L' buff);  		break;  	}  	}  	n += 2;  	fmt = e + 2;  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaO_pushvfstring,The following statement contains a magic number: for (; ;) {  	CharPtr e = strchr (fmt' '%');  	if (e == null)  		break;  	setsvalue2s (L' L.top' luaS_newlstr (L' fmt' (uint)(e - fmt)));  	incr_top (L);  	switch (e [1]) {  	case 's': {  		object o = argp [parm_index++];  		CharPtr s = o as CharPtr;  		if (s == null)  			s = (string)o;  		if (s == null)  			s = "(null)";  		pushstr (L' s);  		break;  	}  	case 'c': {  		CharPtr buff = new char[2];  		buff [0] = (char)(int)argp [parm_index++];  		buff [1] = '\0';  		pushstr (L' buff);  		break;  	}  	case 'd': {  		setnvalue (L.top' (int)argp [parm_index++]);  		incr_top (L);  		break;  	}  	case 'f': {  		setnvalue (L.top' (l_uacNumber)argp [parm_index++]);  		incr_top (L);  		break;  	}  	case 'p': {  		//CharPtr buff = new char[4*sizeof(void *) + 8]; /* should be enough space for a `%p' */  		CharPtr buff = new char[32];  		sprintf (buff' "0x%08x"' argp [parm_index++].GetHashCode ());  		pushstr (L' buff);  		break;  	}  	case '%': {  		pushstr (L' "%");  		break;  	}  	default: {  		CharPtr buff = new char[3];  		buff [0] = '%';  		buff [1] = e [1];  		buff [2] = '\0';  		pushstr (L' buff);  		break;  	}  	}  	n += 2;  	fmt = e + 2;  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaO_pushvfstring,The following statement contains a magic number: switch (e [1]) {  case 's': {  	object o = argp [parm_index++];  	CharPtr s = o as CharPtr;  	if (s == null)  		s = (string)o;  	if (s == null)  		s = "(null)";  	pushstr (L' s);  	break;  }  case 'c': {  	CharPtr buff = new char[2];  	buff [0] = (char)(int)argp [parm_index++];  	buff [1] = '\0';  	pushstr (L' buff);  	break;  }  case 'd': {  	setnvalue (L.top' (int)argp [parm_index++]);  	incr_top (L);  	break;  }  case 'f': {  	setnvalue (L.top' (l_uacNumber)argp [parm_index++]);  	incr_top (L);  	break;  }  case 'p': {  	//CharPtr buff = new char[4*sizeof(void *) + 8]; /* should be enough space for a `%p' */  	CharPtr buff = new char[32];  	sprintf (buff' "0x%08x"' argp [parm_index++].GetHashCode ());  	pushstr (L' buff);  	break;  }  case '%': {  	pushstr (L' "%");  	break;  }  default: {  	CharPtr buff = new char[3];  	buff [0] = '%';  	buff [1] = e [1];  	buff [2] = '\0';  	pushstr (L' buff);  	break;  }  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaO_pushvfstring,The following statement contains a magic number: switch (e [1]) {  case 's': {  	object o = argp [parm_index++];  	CharPtr s = o as CharPtr;  	if (s == null)  		s = (string)o;  	if (s == null)  		s = "(null)";  	pushstr (L' s);  	break;  }  case 'c': {  	CharPtr buff = new char[2];  	buff [0] = (char)(int)argp [parm_index++];  	buff [1] = '\0';  	pushstr (L' buff);  	break;  }  case 'd': {  	setnvalue (L.top' (int)argp [parm_index++]);  	incr_top (L);  	break;  }  case 'f': {  	setnvalue (L.top' (l_uacNumber)argp [parm_index++]);  	incr_top (L);  	break;  }  case 'p': {  	//CharPtr buff = new char[4*sizeof(void *) + 8]; /* should be enough space for a `%p' */  	CharPtr buff = new char[32];  	sprintf (buff' "0x%08x"' argp [parm_index++].GetHashCode ());  	pushstr (L' buff);  	break;  }  case '%': {  	pushstr (L' "%");  	break;  }  default: {  	CharPtr buff = new char[3];  	buff [0] = '%';  	buff [1] = e [1];  	buff [2] = '\0';  	pushstr (L' buff);  	break;  }  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaO_pushvfstring,The following statement contains a magic number: switch (e [1]) {  case 's': {  	object o = argp [parm_index++];  	CharPtr s = o as CharPtr;  	if (s == null)  		s = (string)o;  	if (s == null)  		s = "(null)";  	pushstr (L' s);  	break;  }  case 'c': {  	CharPtr buff = new char[2];  	buff [0] = (char)(int)argp [parm_index++];  	buff [1] = '\0';  	pushstr (L' buff);  	break;  }  case 'd': {  	setnvalue (L.top' (int)argp [parm_index++]);  	incr_top (L);  	break;  }  case 'f': {  	setnvalue (L.top' (l_uacNumber)argp [parm_index++]);  	incr_top (L);  	break;  }  case 'p': {  	//CharPtr buff = new char[4*sizeof(void *) + 8]; /* should be enough space for a `%p' */  	CharPtr buff = new char[32];  	sprintf (buff' "0x%08x"' argp [parm_index++].GetHashCode ());  	pushstr (L' buff);  	break;  }  case '%': {  	pushstr (L' "%");  	break;  }  default: {  	CharPtr buff = new char[3];  	buff [0] = '%';  	buff [1] = e [1];  	buff [2] = '\0';  	pushstr (L' buff);  	break;  }  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaO_pushvfstring,The following statement contains a magic number: switch (e [1]) {  case 's': {  	object o = argp [parm_index++];  	CharPtr s = o as CharPtr;  	if (s == null)  		s = (string)o;  	if (s == null)  		s = "(null)";  	pushstr (L' s);  	break;  }  case 'c': {  	CharPtr buff = new char[2];  	buff [0] = (char)(int)argp [parm_index++];  	buff [1] = '\0';  	pushstr (L' buff);  	break;  }  case 'd': {  	setnvalue (L.top' (int)argp [parm_index++]);  	incr_top (L);  	break;  }  case 'f': {  	setnvalue (L.top' (l_uacNumber)argp [parm_index++]);  	incr_top (L);  	break;  }  case 'p': {  	//CharPtr buff = new char[4*sizeof(void *) + 8]; /* should be enough space for a `%p' */  	CharPtr buff = new char[32];  	sprintf (buff' "0x%08x"' argp [parm_index++].GetHashCode ());  	pushstr (L' buff);  	break;  }  case '%': {  	pushstr (L' "%");  	break;  }  default: {  	CharPtr buff = new char[3];  	buff [0] = '%';  	buff [1] = e [1];  	buff [2] = '\0';  	pushstr (L' buff);  	break;  }  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaO_pushvfstring,The following statement contains a magic number: buff [2] = '\0';  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaO_pushvfstring,The following statement contains a magic number: n += 2;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaO_pushvfstring,The following statement contains a magic number: fmt = e + 2;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,getOpMode,The following statement contains a magic number: return (OpMode)(luaP_opmodes [(int)m] & 3);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,getBMode,The following statement contains a magic number: return (OpArgMask)((luaP_opmodes [(int)m] >> 4) & 3);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,getBMode,The following statement contains a magic number: return (OpArgMask)((luaP_opmodes [(int)m] >> 4) & 3);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,getCMode,The following statement contains a magic number: return (OpArgMask)((luaP_opmodes [(int)m] >> 2) & 3);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,getCMode,The following statement contains a magic number: return (OpArgMask)((luaP_opmodes [(int)m] >> 2) & 3);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,testAMode,The following statement contains a magic number: return luaP_opmodes [(int)m] & (1 << 6);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,testTMode,The following statement contains a magic number: return luaP_opmodes [(int)m] & (1 << 7);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,opmode,The following statement contains a magic number: return (lu_byte)(((t) << 7) | ((a) << 6) | (((lu_byte)b) << 4) | (((lu_byte)c) << 2) | ((lu_byte)m));  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,opmode,The following statement contains a magic number: return (lu_byte)(((t) << 7) | ((a) << 6) | (((lu_byte)b) << 4) | (((lu_byte)c) << 2) | ((lu_byte)m));  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,opmode,The following statement contains a magic number: return (lu_byte)(((t) << 7) | ((a) << 6) | (((lu_byte)b) << 4) | (((lu_byte)c) << 2) | ((lu_byte)m));  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,opmode,The following statement contains a magic number: return (lu_byte)(((t) << 7) | ((a) << 6) | (((lu_byte)b) << 4) | (((lu_byte)c) << 2) | ((lu_byte)m));  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,os_pushresult,The following statement contains a magic number: if (i != 0) {  	lua_pushboolean (L' 1);  	return 1;  } else {  	lua_pushnil (L);  	lua_pushfstring (L' "%s: %s"' filename' strerror (en));  	lua_pushinteger (L' en);  	return 3;  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,os_pushresult,The following statement contains a magic number: return 3;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,os_clock,The following statement contains a magic number: lua_pushnumber (L' ((lua_Number)ticks) / (lua_Number)1000);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,setfield,The following statement contains a magic number: lua_setfield (L' -2' key);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,setboolfield,The following statement contains a magic number: lua_setfield (L' -2' key);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,os_date,The following statement contains a magic number: if (strcmp (s' "*t") == 0) {  	lua_createtable (L' 0' 9);  	/* 9 = number of fields */setfield (L' "sec"' stm.Second);  	setfield (L' "min"' stm.Minute);  	setfield (L' "hour"' stm.Hour);  	setfield (L' "day"' stm.Day);  	setfield (L' "month"' stm.Month);  	setfield (L' "year"' stm.Year);  	setfield (L' "wday"' (int)stm.DayOfWeek);  	setfield (L' "yday"' stm.DayOfYear);  	setboolfield (L' "isdst"' stm.IsDaylightSavingTime () ? 1 : 0);  } else {  	luaL_error (L' "strftime not implemented yet");  	// todo: implement this - mjf  	#if false  				CharPtr cc = new char[3]; 			luaL_Buffer b; 			cc[0] = '%'; cc[2] = '\0'; 			luaL_buffinit(L' b); 			for (; s[0] != 0; s.inc()) { 			  if (s[0] != '%' || s[1] == '\0')  /* no conversion specifier? */ 				luaL_addchar(b' s[0]); 			  else { 				uint reslen; 				CharPtr buff = new char[200];  /* should be big enough for any conversion result */ 				s.inc(); 				cc[1] = s[0]; 				reslen = strftime(buff' buff.Length' cc' stm); 				luaL_addlstring(b' buff' reslen); 			  } 			} 			luaL_pushresult(b); #endif  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,os_date,The following statement contains a magic number: lua_createtable (L' 0' 9);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,os_time,The following statement contains a magic number: if (lua_isnoneornil (L' 1))  	/* called without args? */t = DateTime.Now;  /* get current time */else {  	luaL_checktype (L' 1' LUA_TTABLE);  	lua_settop (L' 1);  	/* make sure table is at the top */int sec = getfield (L' "sec"' 0);  	int min = getfield (L' "min"' 0);  	int hour = getfield (L' "hour"' 12);  	int day = getfield (L' "day"' -1);  	int month = getfield (L' "month"' -1) - 1;  	int year = getfield (L' "year"' -1) - 1900;  	int isdst = getboolfield (L' "isdst");  	// todo: implement this - mjf  	t = new DateTime (year' month' day' hour' min' sec);  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,os_time,The following statement contains a magic number: if (lua_isnoneornil (L' 1))  	/* called without args? */t = DateTime.Now;  /* get current time */else {  	luaL_checktype (L' 1' LUA_TTABLE);  	lua_settop (L' 1);  	/* make sure table is at the top */int sec = getfield (L' "sec"' 0);  	int min = getfield (L' "min"' 0);  	int hour = getfield (L' "hour"' 12);  	int day = getfield (L' "day"' -1);  	int month = getfield (L' "month"' -1) - 1;  	int year = getfield (L' "year"' -1) - 1900;  	int isdst = getboolfield (L' "isdst");  	// todo: implement this - mjf  	t = new DateTime (year' month' day' hour' min' sec);  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,open_func,The following statement contains a magic number: f.maxstacksize = 2;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,close_func,The following statement contains a magic number: L.top -= 2;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,funcargs,The following statement contains a magic number: init_exp (f' expkind.VCALL' luaK_codeABC (fs' OpCode.OP_CALL' base_' nparams + 1' 2));  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,forbody,The following statement contains a magic number: adjustlocalvars (ls' 3);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,fornum,The following statement contains a magic number: new_localvarliteral (ls' "(for step)"' 2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,fornum,The following statement contains a magic number: new_localvar (ls' varname' 3);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,forlist,The following statement contains a magic number: adjust_assign (ls' 3' explist1 (ls' e)' e);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,forlist,The following statement contains a magic number: luaK_checkstack (fs' 3);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,forlist,The following statement contains a magic number: forbody (ls' base_' line' nvars - 3' 0);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,f_luaopen,The following statement contains a magic number: sethvalue (L' gt (L)' luaH_new (L' 0' 2));  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,f_luaopen,The following statement contains a magic number: sethvalue (L' registry (L)' luaH_new (L' 0' 2));  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,f_luaopen,The following statement contains a magic number: g.GCthreshold = 4 * g.totalbytes;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,newlstr,The following statement contains a magic number: if ((tb.nuse > (int)tb.size) && (tb.size <= MAX_INT / 2))  	luaS_resize (L' tb.size * 2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,newlstr,The following statement contains a magic number: if ((tb.nuse > (int)tb.size) && (tb.size <= MAX_INT / 2))  	luaS_resize (L' tb.size * 2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,newlstr,The following statement contains a magic number: luaS_resize (L' tb.size * 2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaS_newlstr,The following statement contains a magic number: for (l1 = l; l1 >= step; l1 -= step)  	/* compute hash */h = h ^ ((h << 5) + (h >> 2) + (byte)str [l1 - 1]);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaS_newlstr,The following statement contains a magic number: for (l1 = l; l1 >= step; l1 -= step)  	/* compute hash */h = h ^ ((h << 5) + (h >> 2) + (byte)str [l1 - 1]);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaS_newlstr,The following statement contains a magic number: h = h ^ ((h << 5) + (h >> 2) + (byte)str [l1 - 1]);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaS_newlstr,The following statement contains a magic number: h = h ^ ((h << 5) + (h >> 2) + (byte)str [l1 - 1]);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,matchbracketclass,The following statement contains a magic number: while ((p = p.next ()) < ec) {  	if (p == L_ESC) {  		p = p.next ();  		if (match_class (c' (byte)(p [0])) != 0)  			return sig;  	} else if ((p [1] == '-') && (p + 2 < ec)) {  		p += 2;  		if ((byte)((p [-2])) <= c && (c <= (byte)p [0]))  			return sig;  	} else if ((byte)(p [0]) == c)  		return sig;  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,matchbracketclass,The following statement contains a magic number: while ((p = p.next ()) < ec) {  	if (p == L_ESC) {  		p = p.next ();  		if (match_class (c' (byte)(p [0])) != 0)  			return sig;  	} else if ((p [1] == '-') && (p + 2 < ec)) {  		p += 2;  		if ((byte)((p [-2])) <= c && (c <= (byte)p [0]))  			return sig;  	} else if ((byte)(p [0]) == c)  		return sig;  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,matchbracketclass,The following statement contains a magic number: while ((p = p.next ()) < ec) {  	if (p == L_ESC) {  		p = p.next ();  		if (match_class (c' (byte)(p [0])) != 0)  			return sig;  	} else if ((p [1] == '-') && (p + 2 < ec)) {  		p += 2;  		if ((byte)((p [-2])) <= c && (c <= (byte)p [0]))  			return sig;  	} else if ((byte)(p [0]) == c)  		return sig;  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,matchbracketclass,The following statement contains a magic number: if (p == L_ESC) {  	p = p.next ();  	if (match_class (c' (byte)(p [0])) != 0)  		return sig;  } else if ((p [1] == '-') && (p + 2 < ec)) {  	p += 2;  	if ((byte)((p [-2])) <= c && (c <= (byte)p [0]))  		return sig;  } else if ((byte)(p [0]) == c)  	return sig;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,matchbracketclass,The following statement contains a magic number: if (p == L_ESC) {  	p = p.next ();  	if (match_class (c' (byte)(p [0])) != 0)  		return sig;  } else if ((p [1] == '-') && (p + 2 < ec)) {  	p += 2;  	if ((byte)((p [-2])) <= c && (c <= (byte)p [0]))  		return sig;  } else if ((byte)(p [0]) == c)  	return sig;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,matchbracketclass,The following statement contains a magic number: if (p == L_ESC) {  	p = p.next ();  	if (match_class (c' (byte)(p [0])) != 0)  		return sig;  } else if ((p [1] == '-') && (p + 2 < ec)) {  	p += 2;  	if ((byte)((p [-2])) <= c && (c <= (byte)p [0]))  		return sig;  } else if ((byte)(p [0]) == c)  	return sig;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,matchbracketclass,The following statement contains a magic number: if ((p [1] == '-') && (p + 2 < ec)) {  	p += 2;  	if ((byte)((p [-2])) <= c && (c <= (byte)p [0]))  		return sig;  } else if ((byte)(p [0]) == c)  	return sig;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,matchbracketclass,The following statement contains a magic number: if ((p [1] == '-') && (p + 2 < ec)) {  	p += 2;  	if ((byte)((p [-2])) <= c && (c <= (byte)p [0]))  		return sig;  } else if ((byte)(p [0]) == c)  	return sig;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,matchbracketclass,The following statement contains a magic number: if ((p [1] == '-') && (p + 2 < ec)) {  	p += 2;  	if ((byte)((p [-2])) <= c && (c <= (byte)p [0]))  		return sig;  } else if ((byte)(p [0]) == c)  	return sig;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,matchbracketclass,The following statement contains a magic number: p += 2;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,matchbracketclass,The following statement contains a magic number: if ((byte)((p [-2])) <= c && (c <= (byte)p [0]))  	return sig;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,match,The following statement contains a magic number: switch (p [0]) {  case '(': {  	/* start capture */if (p [1] == ')')  		/* position capture? */return start_capture (ms' s' p + 2' CAP_POSITION);  	else  		return start_capture (ms' s' p + 1' CAP_UNFINISHED);  }  case ')': {  	/* end capture */return end_capture (ms' s' p + 1);  }  case L_ESC: {  	switch (p [1]) {  	case 'b': {  		/* balanced string? */s = matchbalance (ms' s' p + 2);  		if (s == null)  			return null;  		p += 4;  		goto init;  		/* else return match(ms' s' p+4); */}  	case 'f': {  		/* frontier? */CharPtr ep;  		char previous;  		p += 2;  		if (p [0] != '[')  			luaL_error (ms.L' "missing " + LUA_QL ("[") + " after " + LUA_QL ("%%f") + " in pattern");  		ep = classend (ms' p);  		/* points to what is next */previous = (s == ms.src_init) ? '\0' : s [-1];  		if ((matchbracketclass ((byte)(previous)' p' ep - 1) != 0) || (matchbracketclass ((byte)(s [0])' p' ep - 1) == 0))  			return null;  		p = ep;  		goto init;  		/* else return match(ms' s' ep); */}  	default: {  		if (isdigit ((byte)(p [1]))) {  			/* capture results (%0-%9)? */s = match_capture (ms' s' (byte)(p [1]));  			if (s == null)  				return null;  			p += 2;  			goto init;  			/* else return match(ms' s' p+2) */}  		goto dflt;  		/* case default */}  	}  }  case '\0': {  	/* end of pattern */return s;  	/* match succeeded */}  case '$': {  	if (p [1] == '\0')  		/* is the `$' the last char in pattern? */return (s == ms.src_end) ? s : null;  	/* check end of string */else  		goto dflt;  }  default:  	dflt:  	{  		/* it is a pattern item */CharPtr ep = classend (ms' p);  		/* points to what is next */int m = (s < ms.src_end) && (singlematch ((byte)(s [0])' p' ep) != 0) ? 1 : 0;  		switch (ep [0]) {  		case '?': {  			/* optional */CharPtr res;  			if ((m != 0) && ((res = match (ms' s + 1' ep + 1)) != null))  				return res;  			p = ep + 1;  			goto init;  			/* else return match(ms' s' ep+1); */}  		case '*': {  			/* 0 or more repetitions */return max_expand (ms' s' p' ep);  		}  		case '+': {  			/* 1 or more repetitions */return ((m != 0) ? max_expand (ms' s + 1' p' ep) : null);  		}  		case '-': {  			/* 0 or more repetitions (minimum) */return min_expand (ms' s' p' ep);  		}  		default: {  			if (m == 0)  				return null;  			s = s.next ();  			p = ep;  			goto init;  			/* else return match(ms' s+1' ep); */}  		}  	}  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,match,The following statement contains a magic number: switch (p [0]) {  case '(': {  	/* start capture */if (p [1] == ')')  		/* position capture? */return start_capture (ms' s' p + 2' CAP_POSITION);  	else  		return start_capture (ms' s' p + 1' CAP_UNFINISHED);  }  case ')': {  	/* end capture */return end_capture (ms' s' p + 1);  }  case L_ESC: {  	switch (p [1]) {  	case 'b': {  		/* balanced string? */s = matchbalance (ms' s' p + 2);  		if (s == null)  			return null;  		p += 4;  		goto init;  		/* else return match(ms' s' p+4); */}  	case 'f': {  		/* frontier? */CharPtr ep;  		char previous;  		p += 2;  		if (p [0] != '[')  			luaL_error (ms.L' "missing " + LUA_QL ("[") + " after " + LUA_QL ("%%f") + " in pattern");  		ep = classend (ms' p);  		/* points to what is next */previous = (s == ms.src_init) ? '\0' : s [-1];  		if ((matchbracketclass ((byte)(previous)' p' ep - 1) != 0) || (matchbracketclass ((byte)(s [0])' p' ep - 1) == 0))  			return null;  		p = ep;  		goto init;  		/* else return match(ms' s' ep); */}  	default: {  		if (isdigit ((byte)(p [1]))) {  			/* capture results (%0-%9)? */s = match_capture (ms' s' (byte)(p [1]));  			if (s == null)  				return null;  			p += 2;  			goto init;  			/* else return match(ms' s' p+2) */}  		goto dflt;  		/* case default */}  	}  }  case '\0': {  	/* end of pattern */return s;  	/* match succeeded */}  case '$': {  	if (p [1] == '\0')  		/* is the `$' the last char in pattern? */return (s == ms.src_end) ? s : null;  	/* check end of string */else  		goto dflt;  }  default:  	dflt:  	{  		/* it is a pattern item */CharPtr ep = classend (ms' p);  		/* points to what is next */int m = (s < ms.src_end) && (singlematch ((byte)(s [0])' p' ep) != 0) ? 1 : 0;  		switch (ep [0]) {  		case '?': {  			/* optional */CharPtr res;  			if ((m != 0) && ((res = match (ms' s + 1' ep + 1)) != null))  				return res;  			p = ep + 1;  			goto init;  			/* else return match(ms' s' ep+1); */}  		case '*': {  			/* 0 or more repetitions */return max_expand (ms' s' p' ep);  		}  		case '+': {  			/* 1 or more repetitions */return ((m != 0) ? max_expand (ms' s + 1' p' ep) : null);  		}  		case '-': {  			/* 0 or more repetitions (minimum) */return min_expand (ms' s' p' ep);  		}  		default: {  			if (m == 0)  				return null;  			s = s.next ();  			p = ep;  			goto init;  			/* else return match(ms' s+1' ep); */}  		}  	}  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,match,The following statement contains a magic number: switch (p [0]) {  case '(': {  	/* start capture */if (p [1] == ')')  		/* position capture? */return start_capture (ms' s' p + 2' CAP_POSITION);  	else  		return start_capture (ms' s' p + 1' CAP_UNFINISHED);  }  case ')': {  	/* end capture */return end_capture (ms' s' p + 1);  }  case L_ESC: {  	switch (p [1]) {  	case 'b': {  		/* balanced string? */s = matchbalance (ms' s' p + 2);  		if (s == null)  			return null;  		p += 4;  		goto init;  		/* else return match(ms' s' p+4); */}  	case 'f': {  		/* frontier? */CharPtr ep;  		char previous;  		p += 2;  		if (p [0] != '[')  			luaL_error (ms.L' "missing " + LUA_QL ("[") + " after " + LUA_QL ("%%f") + " in pattern");  		ep = classend (ms' p);  		/* points to what is next */previous = (s == ms.src_init) ? '\0' : s [-1];  		if ((matchbracketclass ((byte)(previous)' p' ep - 1) != 0) || (matchbracketclass ((byte)(s [0])' p' ep - 1) == 0))  			return null;  		p = ep;  		goto init;  		/* else return match(ms' s' ep); */}  	default: {  		if (isdigit ((byte)(p [1]))) {  			/* capture results (%0-%9)? */s = match_capture (ms' s' (byte)(p [1]));  			if (s == null)  				return null;  			p += 2;  			goto init;  			/* else return match(ms' s' p+2) */}  		goto dflt;  		/* case default */}  	}  }  case '\0': {  	/* end of pattern */return s;  	/* match succeeded */}  case '$': {  	if (p [1] == '\0')  		/* is the `$' the last char in pattern? */return (s == ms.src_end) ? s : null;  	/* check end of string */else  		goto dflt;  }  default:  	dflt:  	{  		/* it is a pattern item */CharPtr ep = classend (ms' p);  		/* points to what is next */int m = (s < ms.src_end) && (singlematch ((byte)(s [0])' p' ep) != 0) ? 1 : 0;  		switch (ep [0]) {  		case '?': {  			/* optional */CharPtr res;  			if ((m != 0) && ((res = match (ms' s + 1' ep + 1)) != null))  				return res;  			p = ep + 1;  			goto init;  			/* else return match(ms' s' ep+1); */}  		case '*': {  			/* 0 or more repetitions */return max_expand (ms' s' p' ep);  		}  		case '+': {  			/* 1 or more repetitions */return ((m != 0) ? max_expand (ms' s + 1' p' ep) : null);  		}  		case '-': {  			/* 0 or more repetitions (minimum) */return min_expand (ms' s' p' ep);  		}  		default: {  			if (m == 0)  				return null;  			s = s.next ();  			p = ep;  			goto init;  			/* else return match(ms' s+1' ep); */}  		}  	}  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,match,The following statement contains a magic number: switch (p [0]) {  case '(': {  	/* start capture */if (p [1] == ')')  		/* position capture? */return start_capture (ms' s' p + 2' CAP_POSITION);  	else  		return start_capture (ms' s' p + 1' CAP_UNFINISHED);  }  case ')': {  	/* end capture */return end_capture (ms' s' p + 1);  }  case L_ESC: {  	switch (p [1]) {  	case 'b': {  		/* balanced string? */s = matchbalance (ms' s' p + 2);  		if (s == null)  			return null;  		p += 4;  		goto init;  		/* else return match(ms' s' p+4); */}  	case 'f': {  		/* frontier? */CharPtr ep;  		char previous;  		p += 2;  		if (p [0] != '[')  			luaL_error (ms.L' "missing " + LUA_QL ("[") + " after " + LUA_QL ("%%f") + " in pattern");  		ep = classend (ms' p);  		/* points to what is next */previous = (s == ms.src_init) ? '\0' : s [-1];  		if ((matchbracketclass ((byte)(previous)' p' ep - 1) != 0) || (matchbracketclass ((byte)(s [0])' p' ep - 1) == 0))  			return null;  		p = ep;  		goto init;  		/* else return match(ms' s' ep); */}  	default: {  		if (isdigit ((byte)(p [1]))) {  			/* capture results (%0-%9)? */s = match_capture (ms' s' (byte)(p [1]));  			if (s == null)  				return null;  			p += 2;  			goto init;  			/* else return match(ms' s' p+2) */}  		goto dflt;  		/* case default */}  	}  }  case '\0': {  	/* end of pattern */return s;  	/* match succeeded */}  case '$': {  	if (p [1] == '\0')  		/* is the `$' the last char in pattern? */return (s == ms.src_end) ? s : null;  	/* check end of string */else  		goto dflt;  }  default:  	dflt:  	{  		/* it is a pattern item */CharPtr ep = classend (ms' p);  		/* points to what is next */int m = (s < ms.src_end) && (singlematch ((byte)(s [0])' p' ep) != 0) ? 1 : 0;  		switch (ep [0]) {  		case '?': {  			/* optional */CharPtr res;  			if ((m != 0) && ((res = match (ms' s + 1' ep + 1)) != null))  				return res;  			p = ep + 1;  			goto init;  			/* else return match(ms' s' ep+1); */}  		case '*': {  			/* 0 or more repetitions */return max_expand (ms' s' p' ep);  		}  		case '+': {  			/* 1 or more repetitions */return ((m != 0) ? max_expand (ms' s + 1' p' ep) : null);  		}  		case '-': {  			/* 0 or more repetitions (minimum) */return min_expand (ms' s' p' ep);  		}  		default: {  			if (m == 0)  				return null;  			s = s.next ();  			p = ep;  			goto init;  			/* else return match(ms' s+1' ep); */}  		}  	}  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,match,The following statement contains a magic number: switch (p [0]) {  case '(': {  	/* start capture */if (p [1] == ')')  		/* position capture? */return start_capture (ms' s' p + 2' CAP_POSITION);  	else  		return start_capture (ms' s' p + 1' CAP_UNFINISHED);  }  case ')': {  	/* end capture */return end_capture (ms' s' p + 1);  }  case L_ESC: {  	switch (p [1]) {  	case 'b': {  		/* balanced string? */s = matchbalance (ms' s' p + 2);  		if (s == null)  			return null;  		p += 4;  		goto init;  		/* else return match(ms' s' p+4); */}  	case 'f': {  		/* frontier? */CharPtr ep;  		char previous;  		p += 2;  		if (p [0] != '[')  			luaL_error (ms.L' "missing " + LUA_QL ("[") + " after " + LUA_QL ("%%f") + " in pattern");  		ep = classend (ms' p);  		/* points to what is next */previous = (s == ms.src_init) ? '\0' : s [-1];  		if ((matchbracketclass ((byte)(previous)' p' ep - 1) != 0) || (matchbracketclass ((byte)(s [0])' p' ep - 1) == 0))  			return null;  		p = ep;  		goto init;  		/* else return match(ms' s' ep); */}  	default: {  		if (isdigit ((byte)(p [1]))) {  			/* capture results (%0-%9)? */s = match_capture (ms' s' (byte)(p [1]));  			if (s == null)  				return null;  			p += 2;  			goto init;  			/* else return match(ms' s' p+2) */}  		goto dflt;  		/* case default */}  	}  }  case '\0': {  	/* end of pattern */return s;  	/* match succeeded */}  case '$': {  	if (p [1] == '\0')  		/* is the `$' the last char in pattern? */return (s == ms.src_end) ? s : null;  	/* check end of string */else  		goto dflt;  }  default:  	dflt:  	{  		/* it is a pattern item */CharPtr ep = classend (ms' p);  		/* points to what is next */int m = (s < ms.src_end) && (singlematch ((byte)(s [0])' p' ep) != 0) ? 1 : 0;  		switch (ep [0]) {  		case '?': {  			/* optional */CharPtr res;  			if ((m != 0) && ((res = match (ms' s + 1' ep + 1)) != null))  				return res;  			p = ep + 1;  			goto init;  			/* else return match(ms' s' ep+1); */}  		case '*': {  			/* 0 or more repetitions */return max_expand (ms' s' p' ep);  		}  		case '+': {  			/* 1 or more repetitions */return ((m != 0) ? max_expand (ms' s + 1' p' ep) : null);  		}  		case '-': {  			/* 0 or more repetitions (minimum) */return min_expand (ms' s' p' ep);  		}  		default: {  			if (m == 0)  				return null;  			s = s.next ();  			p = ep;  			goto init;  			/* else return match(ms' s+1' ep); */}  		}  	}  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,match,The following statement contains a magic number: if (p [1] == ')')  	/* position capture? */return start_capture (ms' s' p + 2' CAP_POSITION);  else  	return start_capture (ms' s' p + 1' CAP_UNFINISHED);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,match,The following statement contains a magic number: return start_capture (ms' s' p + 2' CAP_POSITION);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,match,The following statement contains a magic number: switch (p [1]) {  case 'b': {  	/* balanced string? */s = matchbalance (ms' s' p + 2);  	if (s == null)  		return null;  	p += 4;  	goto init;  	/* else return match(ms' s' p+4); */}  case 'f': {  	/* frontier? */CharPtr ep;  	char previous;  	p += 2;  	if (p [0] != '[')  		luaL_error (ms.L' "missing " + LUA_QL ("[") + " after " + LUA_QL ("%%f") + " in pattern");  	ep = classend (ms' p);  	/* points to what is next */previous = (s == ms.src_init) ? '\0' : s [-1];  	if ((matchbracketclass ((byte)(previous)' p' ep - 1) != 0) || (matchbracketclass ((byte)(s [0])' p' ep - 1) == 0))  		return null;  	p = ep;  	goto init;  	/* else return match(ms' s' ep); */}  default: {  	if (isdigit ((byte)(p [1]))) {  		/* capture results (%0-%9)? */s = match_capture (ms' s' (byte)(p [1]));  		if (s == null)  			return null;  		p += 2;  		goto init;  		/* else return match(ms' s' p+2) */}  	goto dflt;  	/* case default */}  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,match,The following statement contains a magic number: switch (p [1]) {  case 'b': {  	/* balanced string? */s = matchbalance (ms' s' p + 2);  	if (s == null)  		return null;  	p += 4;  	goto init;  	/* else return match(ms' s' p+4); */}  case 'f': {  	/* frontier? */CharPtr ep;  	char previous;  	p += 2;  	if (p [0] != '[')  		luaL_error (ms.L' "missing " + LUA_QL ("[") + " after " + LUA_QL ("%%f") + " in pattern");  	ep = classend (ms' p);  	/* points to what is next */previous = (s == ms.src_init) ? '\0' : s [-1];  	if ((matchbracketclass ((byte)(previous)' p' ep - 1) != 0) || (matchbracketclass ((byte)(s [0])' p' ep - 1) == 0))  		return null;  	p = ep;  	goto init;  	/* else return match(ms' s' ep); */}  default: {  	if (isdigit ((byte)(p [1]))) {  		/* capture results (%0-%9)? */s = match_capture (ms' s' (byte)(p [1]));  		if (s == null)  			return null;  		p += 2;  		goto init;  		/* else return match(ms' s' p+2) */}  	goto dflt;  	/* case default */}  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,match,The following statement contains a magic number: switch (p [1]) {  case 'b': {  	/* balanced string? */s = matchbalance (ms' s' p + 2);  	if (s == null)  		return null;  	p += 4;  	goto init;  	/* else return match(ms' s' p+4); */}  case 'f': {  	/* frontier? */CharPtr ep;  	char previous;  	p += 2;  	if (p [0] != '[')  		luaL_error (ms.L' "missing " + LUA_QL ("[") + " after " + LUA_QL ("%%f") + " in pattern");  	ep = classend (ms' p);  	/* points to what is next */previous = (s == ms.src_init) ? '\0' : s [-1];  	if ((matchbracketclass ((byte)(previous)' p' ep - 1) != 0) || (matchbracketclass ((byte)(s [0])' p' ep - 1) == 0))  		return null;  	p = ep;  	goto init;  	/* else return match(ms' s' ep); */}  default: {  	if (isdigit ((byte)(p [1]))) {  		/* capture results (%0-%9)? */s = match_capture (ms' s' (byte)(p [1]));  		if (s == null)  			return null;  		p += 2;  		goto init;  		/* else return match(ms' s' p+2) */}  	goto dflt;  	/* case default */}  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,match,The following statement contains a magic number: switch (p [1]) {  case 'b': {  	/* balanced string? */s = matchbalance (ms' s' p + 2);  	if (s == null)  		return null;  	p += 4;  	goto init;  	/* else return match(ms' s' p+4); */}  case 'f': {  	/* frontier? */CharPtr ep;  	char previous;  	p += 2;  	if (p [0] != '[')  		luaL_error (ms.L' "missing " + LUA_QL ("[") + " after " + LUA_QL ("%%f") + " in pattern");  	ep = classend (ms' p);  	/* points to what is next */previous = (s == ms.src_init) ? '\0' : s [-1];  	if ((matchbracketclass ((byte)(previous)' p' ep - 1) != 0) || (matchbracketclass ((byte)(s [0])' p' ep - 1) == 0))  		return null;  	p = ep;  	goto init;  	/* else return match(ms' s' ep); */}  default: {  	if (isdigit ((byte)(p [1]))) {  		/* capture results (%0-%9)? */s = match_capture (ms' s' (byte)(p [1]));  		if (s == null)  			return null;  		p += 2;  		goto init;  		/* else return match(ms' s' p+2) */}  	goto dflt;  	/* case default */}  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,match,The following statement contains a magic number: s = matchbalance (ms' s' p + 2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,match,The following statement contains a magic number: p += 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,match,The following statement contains a magic number: p += 2;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,match,The following statement contains a magic number: if (isdigit ((byte)(p [1]))) {  	/* capture results (%0-%9)? */s = match_capture (ms' s' (byte)(p [1]));  	if (s == null)  		return null;  	p += 2;  	goto init;  	/* else return match(ms' s' p+2) */}  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,match,The following statement contains a magic number: p += 2;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,str_find_aux,The following statement contains a magic number: if ((find != 0) && ((lua_toboolean (L' 4) != 0) || /* explicit request? */strpbrk (p' SPECIALS) == null)) {  	/* or no special characters? *//* do a plain search */CharPtr s2 = lmemfind (s + init' (uint)(l1 - init)' p' (uint)(l2));  	if (s2 != null) {  		lua_pushinteger (L' s2 - s + 1);  		lua_pushinteger (L' (int)(s2 - s + l2));  		return 2;  	}  } else {  	MatchState ms = new MatchState ();  	int anchor = 0;  	if (p [0] == '^') {  		p = p.next ();  		anchor = 1;  	}  	CharPtr s1 = s + init;  	ms.L = L;  	ms.src_init = s;  	ms.src_end = s + l1;  	do {  		CharPtr res;  		ms.level = 0;  		if ((res = match (ms' s1' p)) != null) {  			if (find != 0) {  				lua_pushinteger (L' s1 - s + 1);  				/* start */lua_pushinteger (L' res - s);  				/* end */return push_captures (ms' null' null) + 2;  			} else  				return push_captures (ms' s1' res);  		}  	} while (((s1 = s1.next ()) <= ms.src_end) && (anchor == 0));  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,str_find_aux,The following statement contains a magic number: if ((find != 0) && ((lua_toboolean (L' 4) != 0) || /* explicit request? */strpbrk (p' SPECIALS) == null)) {  	/* or no special characters? *//* do a plain search */CharPtr s2 = lmemfind (s + init' (uint)(l1 - init)' p' (uint)(l2));  	if (s2 != null) {  		lua_pushinteger (L' s2 - s + 1);  		lua_pushinteger (L' (int)(s2 - s + l2));  		return 2;  	}  } else {  	MatchState ms = new MatchState ();  	int anchor = 0;  	if (p [0] == '^') {  		p = p.next ();  		anchor = 1;  	}  	CharPtr s1 = s + init;  	ms.L = L;  	ms.src_init = s;  	ms.src_end = s + l1;  	do {  		CharPtr res;  		ms.level = 0;  		if ((res = match (ms' s1' p)) != null) {  			if (find != 0) {  				lua_pushinteger (L' s1 - s + 1);  				/* start */lua_pushinteger (L' res - s);  				/* end */return push_captures (ms' null' null) + 2;  			} else  				return push_captures (ms' s1' res);  		}  	} while (((s1 = s1.next ()) <= ms.src_end) && (anchor == 0));  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,str_find_aux,The following statement contains a magic number: if ((find != 0) && ((lua_toboolean (L' 4) != 0) || /* explicit request? */strpbrk (p' SPECIALS) == null)) {  	/* or no special characters? *//* do a plain search */CharPtr s2 = lmemfind (s + init' (uint)(l1 - init)' p' (uint)(l2));  	if (s2 != null) {  		lua_pushinteger (L' s2 - s + 1);  		lua_pushinteger (L' (int)(s2 - s + l2));  		return 2;  	}  } else {  	MatchState ms = new MatchState ();  	int anchor = 0;  	if (p [0] == '^') {  		p = p.next ();  		anchor = 1;  	}  	CharPtr s1 = s + init;  	ms.L = L;  	ms.src_init = s;  	ms.src_end = s + l1;  	do {  		CharPtr res;  		ms.level = 0;  		if ((res = match (ms' s1' p)) != null) {  			if (find != 0) {  				lua_pushinteger (L' s1 - s + 1);  				/* start */lua_pushinteger (L' res - s);  				/* end */return push_captures (ms' null' null) + 2;  			} else  				return push_captures (ms' s1' res);  		}  	} while (((s1 = s1.next ()) <= ms.src_end) && (anchor == 0));  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,str_find_aux,The following statement contains a magic number: if (s2 != null) {  	lua_pushinteger (L' s2 - s + 1);  	lua_pushinteger (L' (int)(s2 - s + l2));  	return 2;  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,str_find_aux,The following statement contains a magic number: return 2;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,str_find_aux,The following statement contains a magic number: do {  	CharPtr res;  	ms.level = 0;  	if ((res = match (ms' s1' p)) != null) {  		if (find != 0) {  			lua_pushinteger (L' s1 - s + 1);  			/* start */lua_pushinteger (L' res - s);  			/* end */return push_captures (ms' null' null) + 2;  		} else  			return push_captures (ms' s1' res);  	}  } while (((s1 = s1.next ()) <= ms.src_end) && (anchor == 0));  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,str_find_aux,The following statement contains a magic number: if ((res = match (ms' s1' p)) != null) {  	if (find != 0) {  		lua_pushinteger (L' s1 - s + 1);  		/* start */lua_pushinteger (L' res - s);  		/* end */return push_captures (ms' null' null) + 2;  	} else  		return push_captures (ms' s1' res);  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,str_find_aux,The following statement contains a magic number: if (find != 0) {  	lua_pushinteger (L' s1 - s + 1);  	/* start */lua_pushinteger (L' res - s);  	/* end */return push_captures (ms' null' null) + 2;  } else  	return push_captures (ms' s1' res);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,str_find_aux,The following statement contains a magic number: return push_captures (ms' null' null) + 2;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,gmatch_aux,The following statement contains a magic number: for (src = s + (uint)lua_tointeger (L' lua_upvalueindex (3)); src <= ms.src_end; src = src.next ()) {  	CharPtr e;  	ms.level = 0;  	if ((e = match (ms' src' p)) != null) {  		lua_Integer newstart = e - s;  		if (e == src)  			newstart++;  		/* empty match? go at least one position */lua_pushinteger (L' newstart);  		lua_replace (L' lua_upvalueindex (3));  		return push_captures (ms' src' e);  	}  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,gmatch_aux,The following statement contains a magic number: for (src = s + (uint)lua_tointeger (L' lua_upvalueindex (3)); src <= ms.src_end; src = src.next ()) {  	CharPtr e;  	ms.level = 0;  	if ((e = match (ms' src' p)) != null) {  		lua_Integer newstart = e - s;  		if (e == src)  			newstart++;  		/* empty match? go at least one position */lua_pushinteger (L' newstart);  		lua_replace (L' lua_upvalueindex (3));  		return push_captures (ms' src' e);  	}  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,gmatch_aux,The following statement contains a magic number: src = s + (uint)lua_tointeger (L' lua_upvalueindex (3))
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,gmatch_aux,The following statement contains a magic number: if ((e = match (ms' src' p)) != null) {  	lua_Integer newstart = e - s;  	if (e == src)  		newstart++;  	/* empty match? go at least one position */lua_pushinteger (L' newstart);  	lua_replace (L' lua_upvalueindex (3));  	return push_captures (ms' src' e);  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,gmatch_aux,The following statement contains a magic number: lua_replace (L' lua_upvalueindex (3));  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,gmatch,The following statement contains a magic number: luaL_checkstring (L' 2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,gmatch,The following statement contains a magic number: lua_settop (L' 2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,gmatch,The following statement contains a magic number: lua_pushcclosure (L' gmatch_aux' 3);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,add_value,The following statement contains a magic number: switch (lua_type (L' 3)) {  case LUA_TNUMBER:  case LUA_TSTRING: {  	add_s (ms' b' s' e);  	return;  }  case LUA_TFUNCTION: {  	int n;  	lua_pushvalue (L' 3);  	n = push_captures (ms' s' e);  	lua_call (L' n' 1);  	break;  }  case LUA_TTABLE: {  	push_onecapture (ms' 0' s' e);  	lua_gettable (L' 3);  	break;  }  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,add_value,The following statement contains a magic number: switch (lua_type (L' 3)) {  case LUA_TNUMBER:  case LUA_TSTRING: {  	add_s (ms' b' s' e);  	return;  }  case LUA_TFUNCTION: {  	int n;  	lua_pushvalue (L' 3);  	n = push_captures (ms' s' e);  	lua_call (L' n' 1);  	break;  }  case LUA_TTABLE: {  	push_onecapture (ms' 0' s' e);  	lua_gettable (L' 3);  	break;  }  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,add_value,The following statement contains a magic number: switch (lua_type (L' 3)) {  case LUA_TNUMBER:  case LUA_TSTRING: {  	add_s (ms' b' s' e);  	return;  }  case LUA_TFUNCTION: {  	int n;  	lua_pushvalue (L' 3);  	n = push_captures (ms' s' e);  	lua_call (L' n' 1);  	break;  }  case LUA_TTABLE: {  	push_onecapture (ms' 0' s' e);  	lua_gettable (L' 3);  	break;  }  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,add_value,The following statement contains a magic number: lua_pushvalue (L' 3);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,add_value,The following statement contains a magic number: lua_gettable (L' 3);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,str_gsub,The following statement contains a magic number: luaL_argcheck (L' tr == LUA_TNUMBER || tr == LUA_TSTRING || tr == LUA_TFUNCTION || tr == LUA_TTABLE' 3' "string/function/table expected");  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,str_gsub,The following statement contains a magic number: return 2;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,addquoted,The following statement contains a magic number: while ((l--) != 0) {  	switch (s [0]) {  	case '"':  	case '\\':  	case '\n': {  		luaL_addchar (b' '\\');  		luaL_addchar (b' s [0]);  		break;  	}  	case '\r': {  		luaL_addlstring (b' "\\r"' 2);  		break;  	}  	case '\0': {  		luaL_addlstring (b' "\\000"' 4);  		break;  	}  	default: {  		luaL_addchar (b' s [0]);  		break;  	}  	}  	s = s.next ();  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,addquoted,The following statement contains a magic number: while ((l--) != 0) {  	switch (s [0]) {  	case '"':  	case '\\':  	case '\n': {  		luaL_addchar (b' '\\');  		luaL_addchar (b' s [0]);  		break;  	}  	case '\r': {  		luaL_addlstring (b' "\\r"' 2);  		break;  	}  	case '\0': {  		luaL_addlstring (b' "\\000"' 4);  		break;  	}  	default: {  		luaL_addchar (b' s [0]);  		break;  	}  	}  	s = s.next ();  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,addquoted,The following statement contains a magic number: switch (s [0]) {  case '"':  case '\\':  case '\n': {  	luaL_addchar (b' '\\');  	luaL_addchar (b' s [0]);  	break;  }  case '\r': {  	luaL_addlstring (b' "\\r"' 2);  	break;  }  case '\0': {  	luaL_addlstring (b' "\\000"' 4);  	break;  }  default: {  	luaL_addchar (b' s [0]);  	break;  }  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,addquoted,The following statement contains a magic number: switch (s [0]) {  case '"':  case '\\':  case '\n': {  	luaL_addchar (b' '\\');  	luaL_addchar (b' s [0]);  	break;  }  case '\r': {  	luaL_addlstring (b' "\\r"' 2);  	break;  }  case '\0': {  	luaL_addlstring (b' "\\000"' 4);  	break;  }  default: {  	luaL_addchar (b' s [0]);  	break;  }  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,addquoted,The following statement contains a magic number: luaL_addlstring (b' "\\r"' 2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,addquoted,The following statement contains a magic number: luaL_addlstring (b' "\\000"' 4);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,addintlen,The following statement contains a magic number: form [l + (LUA_INTFRMLEN.Length + 1) - 2] = spec;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,str_format,The following statement contains a magic number: while (strfrmt < strfrmt_end) {  	if (strfrmt [0] != L_ESC) {  		luaL_addchar (b' strfrmt [0]);  		strfrmt = strfrmt.next ();  	} else if (strfrmt [1] == L_ESC) {  		luaL_addchar (b' strfrmt [0]);  		/* %% */strfrmt = strfrmt + 2;  	} else {  		/* format item */strfrmt = strfrmt.next ();  		CharPtr form = new char[MAX_FORMAT];  		/* to store the format (`%...') */CharPtr buff = new char[MAX_ITEM];  		/* to store the formatted item */arg++;  		strfrmt = scanformat (L' strfrmt' form);  		char ch = strfrmt [0];  		strfrmt = strfrmt.next ();  		switch (ch) {  		case 'c': {  			sprintf (buff' form' (int)luaL_checknumber (L' arg));  			break;  		}  		case 'd':  		case 'i': {  			addintlen (form);  			sprintf (buff' form' (LUA_INTFRM_T)luaL_checknumber (L' arg));  			break;  		}  		case 'o':  		case 'u':  		case 'x':  		case 'X': {  			addintlen (form);  			sprintf (buff' form' (UNSIGNED_LUA_INTFRM_T)luaL_checknumber (L' arg));  			break;  		}  		case 'e':  		case 'E':  		case 'f':  		case 'g':  		case 'G': {  			sprintf (buff' form' (double)luaL_checknumber (L' arg));  			break;  		}  		case 'q': {  			addquoted (L' b' arg);  			continue;  			/* skip the 'addsize' at the end */}  		case 's': {  			uint l;  			CharPtr s = luaL_checklstring (L' arg' out l);  			if ((strchr (form' '.') == null) && l >= 100) {  				/* no precision and string is too long to be formatted; 									 keep original string */lua_pushvalue (L' arg);  				luaL_addvalue (b);  				continue;  				/* skip the `addsize' at the end */} else {  				sprintf (buff' form' s);  				break;  			}  		}  		default: {  			/* also treat cases `pnLlh' */return luaL_error (L' "invalid option " + LUA_QL ("%%%c") + " to " + LUA_QL ("format")' strfrmt [-1]);  		}  		}  		luaL_addlstring (b' buff' (uint)strlen (buff));  	}  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,str_format,The following statement contains a magic number: while (strfrmt < strfrmt_end) {  	if (strfrmt [0] != L_ESC) {  		luaL_addchar (b' strfrmt [0]);  		strfrmt = strfrmt.next ();  	} else if (strfrmt [1] == L_ESC) {  		luaL_addchar (b' strfrmt [0]);  		/* %% */strfrmt = strfrmt + 2;  	} else {  		/* format item */strfrmt = strfrmt.next ();  		CharPtr form = new char[MAX_FORMAT];  		/* to store the format (`%...') */CharPtr buff = new char[MAX_ITEM];  		/* to store the formatted item */arg++;  		strfrmt = scanformat (L' strfrmt' form);  		char ch = strfrmt [0];  		strfrmt = strfrmt.next ();  		switch (ch) {  		case 'c': {  			sprintf (buff' form' (int)luaL_checknumber (L' arg));  			break;  		}  		case 'd':  		case 'i': {  			addintlen (form);  			sprintf (buff' form' (LUA_INTFRM_T)luaL_checknumber (L' arg));  			break;  		}  		case 'o':  		case 'u':  		case 'x':  		case 'X': {  			addintlen (form);  			sprintf (buff' form' (UNSIGNED_LUA_INTFRM_T)luaL_checknumber (L' arg));  			break;  		}  		case 'e':  		case 'E':  		case 'f':  		case 'g':  		case 'G': {  			sprintf (buff' form' (double)luaL_checknumber (L' arg));  			break;  		}  		case 'q': {  			addquoted (L' b' arg);  			continue;  			/* skip the 'addsize' at the end */}  		case 's': {  			uint l;  			CharPtr s = luaL_checklstring (L' arg' out l);  			if ((strchr (form' '.') == null) && l >= 100) {  				/* no precision and string is too long to be formatted; 									 keep original string */lua_pushvalue (L' arg);  				luaL_addvalue (b);  				continue;  				/* skip the `addsize' at the end */} else {  				sprintf (buff' form' s);  				break;  			}  		}  		default: {  			/* also treat cases `pnLlh' */return luaL_error (L' "invalid option " + LUA_QL ("%%%c") + " to " + LUA_QL ("format")' strfrmt [-1]);  		}  		}  		luaL_addlstring (b' buff' (uint)strlen (buff));  	}  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,str_format,The following statement contains a magic number: if (strfrmt [0] != L_ESC) {  	luaL_addchar (b' strfrmt [0]);  	strfrmt = strfrmt.next ();  } else if (strfrmt [1] == L_ESC) {  	luaL_addchar (b' strfrmt [0]);  	/* %% */strfrmt = strfrmt + 2;  } else {  	/* format item */strfrmt = strfrmt.next ();  	CharPtr form = new char[MAX_FORMAT];  	/* to store the format (`%...') */CharPtr buff = new char[MAX_ITEM];  	/* to store the formatted item */arg++;  	strfrmt = scanformat (L' strfrmt' form);  	char ch = strfrmt [0];  	strfrmt = strfrmt.next ();  	switch (ch) {  	case 'c': {  		sprintf (buff' form' (int)luaL_checknumber (L' arg));  		break;  	}  	case 'd':  	case 'i': {  		addintlen (form);  		sprintf (buff' form' (LUA_INTFRM_T)luaL_checknumber (L' arg));  		break;  	}  	case 'o':  	case 'u':  	case 'x':  	case 'X': {  		addintlen (form);  		sprintf (buff' form' (UNSIGNED_LUA_INTFRM_T)luaL_checknumber (L' arg));  		break;  	}  	case 'e':  	case 'E':  	case 'f':  	case 'g':  	case 'G': {  		sprintf (buff' form' (double)luaL_checknumber (L' arg));  		break;  	}  	case 'q': {  		addquoted (L' b' arg);  		continue;  		/* skip the 'addsize' at the end */}  	case 's': {  		uint l;  		CharPtr s = luaL_checklstring (L' arg' out l);  		if ((strchr (form' '.') == null) && l >= 100) {  			/* no precision and string is too long to be formatted; 									 keep original string */lua_pushvalue (L' arg);  			luaL_addvalue (b);  			continue;  			/* skip the `addsize' at the end */} else {  			sprintf (buff' form' s);  			break;  		}  	}  	default: {  		/* also treat cases `pnLlh' */return luaL_error (L' "invalid option " + LUA_QL ("%%%c") + " to " + LUA_QL ("format")' strfrmt [-1]);  	}  	}  	luaL_addlstring (b' buff' (uint)strlen (buff));  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,str_format,The following statement contains a magic number: if (strfrmt [0] != L_ESC) {  	luaL_addchar (b' strfrmt [0]);  	strfrmt = strfrmt.next ();  } else if (strfrmt [1] == L_ESC) {  	luaL_addchar (b' strfrmt [0]);  	/* %% */strfrmt = strfrmt + 2;  } else {  	/* format item */strfrmt = strfrmt.next ();  	CharPtr form = new char[MAX_FORMAT];  	/* to store the format (`%...') */CharPtr buff = new char[MAX_ITEM];  	/* to store the formatted item */arg++;  	strfrmt = scanformat (L' strfrmt' form);  	char ch = strfrmt [0];  	strfrmt = strfrmt.next ();  	switch (ch) {  	case 'c': {  		sprintf (buff' form' (int)luaL_checknumber (L' arg));  		break;  	}  	case 'd':  	case 'i': {  		addintlen (form);  		sprintf (buff' form' (LUA_INTFRM_T)luaL_checknumber (L' arg));  		break;  	}  	case 'o':  	case 'u':  	case 'x':  	case 'X': {  		addintlen (form);  		sprintf (buff' form' (UNSIGNED_LUA_INTFRM_T)luaL_checknumber (L' arg));  		break;  	}  	case 'e':  	case 'E':  	case 'f':  	case 'g':  	case 'G': {  		sprintf (buff' form' (double)luaL_checknumber (L' arg));  		break;  	}  	case 'q': {  		addquoted (L' b' arg);  		continue;  		/* skip the 'addsize' at the end */}  	case 's': {  		uint l;  		CharPtr s = luaL_checklstring (L' arg' out l);  		if ((strchr (form' '.') == null) && l >= 100) {  			/* no precision and string is too long to be formatted; 									 keep original string */lua_pushvalue (L' arg);  			luaL_addvalue (b);  			continue;  			/* skip the `addsize' at the end */} else {  			sprintf (buff' form' s);  			break;  		}  	}  	default: {  		/* also treat cases `pnLlh' */return luaL_error (L' "invalid option " + LUA_QL ("%%%c") + " to " + LUA_QL ("format")' strfrmt [-1]);  	}  	}  	luaL_addlstring (b' buff' (uint)strlen (buff));  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,str_format,The following statement contains a magic number: if (strfrmt [1] == L_ESC) {  	luaL_addchar (b' strfrmt [0]);  	/* %% */strfrmt = strfrmt + 2;  } else {  	/* format item */strfrmt = strfrmt.next ();  	CharPtr form = new char[MAX_FORMAT];  	/* to store the format (`%...') */CharPtr buff = new char[MAX_ITEM];  	/* to store the formatted item */arg++;  	strfrmt = scanformat (L' strfrmt' form);  	char ch = strfrmt [0];  	strfrmt = strfrmt.next ();  	switch (ch) {  	case 'c': {  		sprintf (buff' form' (int)luaL_checknumber (L' arg));  		break;  	}  	case 'd':  	case 'i': {  		addintlen (form);  		sprintf (buff' form' (LUA_INTFRM_T)luaL_checknumber (L' arg));  		break;  	}  	case 'o':  	case 'u':  	case 'x':  	case 'X': {  		addintlen (form);  		sprintf (buff' form' (UNSIGNED_LUA_INTFRM_T)luaL_checknumber (L' arg));  		break;  	}  	case 'e':  	case 'E':  	case 'f':  	case 'g':  	case 'G': {  		sprintf (buff' form' (double)luaL_checknumber (L' arg));  		break;  	}  	case 'q': {  		addquoted (L' b' arg);  		continue;  		/* skip the 'addsize' at the end */}  	case 's': {  		uint l;  		CharPtr s = luaL_checklstring (L' arg' out l);  		if ((strchr (form' '.') == null) && l >= 100) {  			/* no precision and string is too long to be formatted; 									 keep original string */lua_pushvalue (L' arg);  			luaL_addvalue (b);  			continue;  			/* skip the `addsize' at the end */} else {  			sprintf (buff' form' s);  			break;  		}  	}  	default: {  		/* also treat cases `pnLlh' */return luaL_error (L' "invalid option " + LUA_QL ("%%%c") + " to " + LUA_QL ("format")' strfrmt [-1]);  	}  	}  	luaL_addlstring (b' buff' (uint)strlen (buff));  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,str_format,The following statement contains a magic number: if (strfrmt [1] == L_ESC) {  	luaL_addchar (b' strfrmt [0]);  	/* %% */strfrmt = strfrmt + 2;  } else {  	/* format item */strfrmt = strfrmt.next ();  	CharPtr form = new char[MAX_FORMAT];  	/* to store the format (`%...') */CharPtr buff = new char[MAX_ITEM];  	/* to store the formatted item */arg++;  	strfrmt = scanformat (L' strfrmt' form);  	char ch = strfrmt [0];  	strfrmt = strfrmt.next ();  	switch (ch) {  	case 'c': {  		sprintf (buff' form' (int)luaL_checknumber (L' arg));  		break;  	}  	case 'd':  	case 'i': {  		addintlen (form);  		sprintf (buff' form' (LUA_INTFRM_T)luaL_checknumber (L' arg));  		break;  	}  	case 'o':  	case 'u':  	case 'x':  	case 'X': {  		addintlen (form);  		sprintf (buff' form' (UNSIGNED_LUA_INTFRM_T)luaL_checknumber (L' arg));  		break;  	}  	case 'e':  	case 'E':  	case 'f':  	case 'g':  	case 'G': {  		sprintf (buff' form' (double)luaL_checknumber (L' arg));  		break;  	}  	case 'q': {  		addquoted (L' b' arg);  		continue;  		/* skip the 'addsize' at the end */}  	case 's': {  		uint l;  		CharPtr s = luaL_checklstring (L' arg' out l);  		if ((strchr (form' '.') == null) && l >= 100) {  			/* no precision and string is too long to be formatted; 									 keep original string */lua_pushvalue (L' arg);  			luaL_addvalue (b);  			continue;  			/* skip the `addsize' at the end */} else {  			sprintf (buff' form' s);  			break;  		}  	}  	default: {  		/* also treat cases `pnLlh' */return luaL_error (L' "invalid option " + LUA_QL ("%%%c") + " to " + LUA_QL ("format")' strfrmt [-1]);  	}  	}  	luaL_addlstring (b' buff' (uint)strlen (buff));  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,str_format,The following statement contains a magic number: strfrmt = strfrmt + 2;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,str_format,The following statement contains a magic number: switch (ch) {  case 'c': {  	sprintf (buff' form' (int)luaL_checknumber (L' arg));  	break;  }  case 'd':  case 'i': {  	addintlen (form);  	sprintf (buff' form' (LUA_INTFRM_T)luaL_checknumber (L' arg));  	break;  }  case 'o':  case 'u':  case 'x':  case 'X': {  	addintlen (form);  	sprintf (buff' form' (UNSIGNED_LUA_INTFRM_T)luaL_checknumber (L' arg));  	break;  }  case 'e':  case 'E':  case 'f':  case 'g':  case 'G': {  	sprintf (buff' form' (double)luaL_checknumber (L' arg));  	break;  }  case 'q': {  	addquoted (L' b' arg);  	continue;  	/* skip the 'addsize' at the end */}  case 's': {  	uint l;  	CharPtr s = luaL_checklstring (L' arg' out l);  	if ((strchr (form' '.') == null) && l >= 100) {  		/* no precision and string is too long to be formatted; 									 keep original string */lua_pushvalue (L' arg);  		luaL_addvalue (b);  		continue;  		/* skip the `addsize' at the end */} else {  		sprintf (buff' form' s);  		break;  	}  }  default: {  	/* also treat cases `pnLlh' */return luaL_error (L' "invalid option " + LUA_QL ("%%%c") + " to " + LUA_QL ("format")' strfrmt [-1]);  }  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,str_format,The following statement contains a magic number: if ((strchr (form' '.') == null) && l >= 100) {  	/* no precision and string is too long to be formatted; 									 keep original string */lua_pushvalue (L' arg);  	luaL_addvalue (b);  	continue;  	/* skip the `addsize' at the end */} else {  	sprintf (buff' form' s);  	break;  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,createmetatable,The following statement contains a magic number: lua_pushvalue (L' -2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,createmetatable,The following statement contains a magic number: lua_setmetatable (L' -2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,createmetatable,The following statement contains a magic number: lua_pushvalue (L' -2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,createmetatable,The following statement contains a magic number: lua_setfield (L' -2' "__index");  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaopen_string,The following statement contains a magic number: lua_setfield (L' -2' "gfind");  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,computesizes,The following statement contains a magic number: for (i = 0' twotoi = 1; twotoi / 2 < narray; i++' twotoi *= 2) {  	if (nums [i] > 0) {  		a += nums [i];  		if (a > twotoi / 2) {  			/* more than half elements present? */n = twotoi;  			/* optimal size (till now) */na = a;  			/* all elements smaller than n will go to array part */}  	}  	if (a == narray)  		break;  	/* all elements already counted */}  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,computesizes,The following statement contains a magic number: for (i = 0' twotoi = 1; twotoi / 2 < narray; i++' twotoi *= 2) {  	if (nums [i] > 0) {  		a += nums [i];  		if (a > twotoi / 2) {  			/* more than half elements present? */n = twotoi;  			/* optimal size (till now) */na = a;  			/* all elements smaller than n will go to array part */}  	}  	if (a == narray)  		break;  	/* all elements already counted */}  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,computesizes,The following statement contains a magic number: for (i = 0' twotoi = 1; twotoi / 2 < narray; i++' twotoi *= 2) {  	if (nums [i] > 0) {  		a += nums [i];  		if (a > twotoi / 2) {  			/* more than half elements present? */n = twotoi;  			/* optimal size (till now) */na = a;  			/* all elements smaller than n will go to array part */}  	}  	if (a == narray)  		break;  	/* all elements already counted */}  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,computesizes,The following statement contains a magic number: twotoi *= 2
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,computesizes,The following statement contains a magic number: if (nums [i] > 0) {  	a += nums [i];  	if (a > twotoi / 2) {  		/* more than half elements present? */n = twotoi;  		/* optimal size (till now) */na = a;  		/* all elements smaller than n will go to array part */}  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,computesizes,The following statement contains a magic number: if (a > twotoi / 2) {  	/* more than half elements present? */n = twotoi;  	/* optimal size (till now) */na = a;  	/* all elements smaller than n will go to array part */}  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,computesizes,The following statement contains a magic number: lua_assert (narray / 2 <= na && na <= narray);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,numusearray,The following statement contains a magic number: for (lg = 0' ttlg = 1; lg <= MAXBITS; lg++' ttlg *= 2) {  	/* for each slice */int lc = 0;  	/* counter */int lim = ttlg;  	if (lim > t.sizearray) {  		lim = t.sizearray;  		/* adjust upper limit */if (i > lim)  			break;  		/* no more elements to count */}  	/* count elements in range (2^(lg-1)' 2^lg] */for (; i <= lim; i++) {  		if (!ttisnil (t.array [i - 1]))  			lc++;  	}  	nums [lg] += lc;  	ause += lc;  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,numusearray,The following statement contains a magic number: ttlg *= 2
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,unbound_search,The following statement contains a magic number: while (!ttisnil (luaH_getnum (t' (int)j))) {  	i = j;  	j *= 2;  	if (j > (uint)MAX_INT) {  		/* overflow? *//* table was built with bad purposes: resort to linear search */i = 1;  		while (!ttisnil (luaH_getnum (t' (int)i)))  			i++;  		return (int)(i - 1);  	}  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,unbound_search,The following statement contains a magic number: j *= 2;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,unbound_search,The following statement contains a magic number: while (j - i > 1) {  	uint m = (i + j) / 2;  	if (ttisnil (luaH_getnum (t' (int)m)))  		j = m;  	else  		i = m;  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaH_getn,The following statement contains a magic number: if (j > 0 && ttisnil (t.array [j - 1])) {  	/* there is a boundary in the array part: (binary) search for it */uint i = 0;  	while (j - i > 1) {  		uint m = (i + j) / 2;  		if (ttisnil (t.array [m - 1]))  			j = m;  		else  			i = m;  	}  	return (int)i;  } /* else must find a boundary in hash part */else if (t.node [0] == dummynode)  	/* hash part is empty? */return (int)j;  /* that is easy... */else  	return unbound_search (t' j);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaH_getn,The following statement contains a magic number: while (j - i > 1) {  	uint m = (i + j) / 2;  	if (ttisnil (t.array [m - 1]))  		j = m;  	else  		i = m;  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,foreachi,The following statement contains a magic number: luaL_checktype (L' 2' LUA_TFUNCTION);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,foreachi,The following statement contains a magic number: for (i = 1; i <= n; i++) {  	lua_pushvalue (L' 2);  	/* function */lua_pushinteger (L' i);  	/* 1st argument */lua_rawgeti (L' 1' i);  	/* 2nd argument */lua_call (L' 2' 1);  	if (!lua_isnil (L' -1))  		return 1;  	lua_pop (L' 1);  	/* remove nil result */}  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,foreachi,The following statement contains a magic number: for (i = 1; i <= n; i++) {  	lua_pushvalue (L' 2);  	/* function */lua_pushinteger (L' i);  	/* 1st argument */lua_rawgeti (L' 1' i);  	/* 2nd argument */lua_call (L' 2' 1);  	if (!lua_isnil (L' -1))  		return 1;  	lua_pop (L' 1);  	/* remove nil result */}  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,foreachi,The following statement contains a magic number: lua_pushvalue (L' 2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,foreachi,The following statement contains a magic number: lua_call (L' 2' 1);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,_foreach,The following statement contains a magic number: luaL_checktype (L' 2' LUA_TFUNCTION);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,_foreach,The following statement contains a magic number: while (lua_next (L' 1) != 0) {  	lua_pushvalue (L' 2);  	/* function */lua_pushvalue (L' -3);  	/* key */lua_pushvalue (L' -3);  	/* value */lua_call (L' 2' 1);  	if (!lua_isnil (L' -1))  		return 1;  	lua_pop (L' 2);  	/* remove value and result */}  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,_foreach,The following statement contains a magic number: while (lua_next (L' 1) != 0) {  	lua_pushvalue (L' 2);  	/* function */lua_pushvalue (L' -3);  	/* key */lua_pushvalue (L' -3);  	/* value */lua_call (L' 2' 1);  	if (!lua_isnil (L' -1))  		return 1;  	lua_pop (L' 2);  	/* remove value and result */}  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,_foreach,The following statement contains a magic number: while (lua_next (L' 1) != 0) {  	lua_pushvalue (L' 2);  	/* function */lua_pushvalue (L' -3);  	/* key */lua_pushvalue (L' -3);  	/* value */lua_call (L' 2' 1);  	if (!lua_isnil (L' -1))  		return 1;  	lua_pop (L' 2);  	/* remove value and result */}  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,_foreach,The following statement contains a magic number: while (lua_next (L' 1) != 0) {  	lua_pushvalue (L' 2);  	/* function */lua_pushvalue (L' -3);  	/* key */lua_pushvalue (L' -3);  	/* value */lua_call (L' 2' 1);  	if (!lua_isnil (L' -1))  		return 1;  	lua_pop (L' 2);  	/* remove value and result */}  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,_foreach,The following statement contains a magic number: while (lua_next (L' 1) != 0) {  	lua_pushvalue (L' 2);  	/* function */lua_pushvalue (L' -3);  	/* key */lua_pushvalue (L' -3);  	/* value */lua_call (L' 2' 1);  	if (!lua_isnil (L' -1))  		return 1;  	lua_pop (L' 2);  	/* remove value and result */}  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,_foreach,The following statement contains a magic number: lua_pushvalue (L' 2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,_foreach,The following statement contains a magic number: lua_pushvalue (L' -3);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,_foreach,The following statement contains a magic number: lua_pushvalue (L' -3);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,_foreach,The following statement contains a magic number: lua_call (L' 2' 1);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,_foreach,The following statement contains a magic number: lua_pop (L' 2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,tinsert,The following statement contains a magic number: switch (lua_gettop (L)) {  case 2: {  	/* called with only 2 arguments */pos = e;  	/* insert new element at the end */break;  }  case 3: {  	int i;  	pos = luaL_checkint (L' 2);  	/* 2nd argument is the position */if (pos > e)  		e = pos;  	/* `grow' array if necessary */for (i = e; i > pos; i--) {  		/* move up elements */lua_rawgeti (L' 1' i - 1);  		lua_rawseti (L' 1' i);  		/* t[i] = t[i-1] */}  	break;  }  default: {  	return luaL_error (L' "wrong number of arguments to " + LUA_QL ("insert"));  }  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,tinsert,The following statement contains a magic number: switch (lua_gettop (L)) {  case 2: {  	/* called with only 2 arguments */pos = e;  	/* insert new element at the end */break;  }  case 3: {  	int i;  	pos = luaL_checkint (L' 2);  	/* 2nd argument is the position */if (pos > e)  		e = pos;  	/* `grow' array if necessary */for (i = e; i > pos; i--) {  		/* move up elements */lua_rawgeti (L' 1' i - 1);  		lua_rawseti (L' 1' i);  		/* t[i] = t[i-1] */}  	break;  }  default: {  	return luaL_error (L' "wrong number of arguments to " + LUA_QL ("insert"));  }  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,tinsert,The following statement contains a magic number: switch (lua_gettop (L)) {  case 2: {  	/* called with only 2 arguments */pos = e;  	/* insert new element at the end */break;  }  case 3: {  	int i;  	pos = luaL_checkint (L' 2);  	/* 2nd argument is the position */if (pos > e)  		e = pos;  	/* `grow' array if necessary */for (i = e; i > pos; i--) {  		/* move up elements */lua_rawgeti (L' 1' i - 1);  		lua_rawseti (L' 1' i);  		/* t[i] = t[i-1] */}  	break;  }  default: {  	return luaL_error (L' "wrong number of arguments to " + LUA_QL ("insert"));  }  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,tinsert,The following statement contains a magic number: pos = luaL_checkint (L' 2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,tconcat,The following statement contains a magic number: i = luaL_optint (L' 3' 1);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,tconcat,The following statement contains a magic number: last = luaL_opt_integer (L' luaL_checkint' 4' luaL_getn (L' 1));  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,sort_comp,The following statement contains a magic number: if (!lua_isnil (L' 2)) {  	/* function? */int res;  	lua_pushvalue (L' 2);  	lua_pushvalue (L' a - 1);  	/* -1 to compensate function */lua_pushvalue (L' b - 2);  	/* -2 to compensate function and `a' */lua_call (L' 2' 1);  	res = lua_toboolean (L' -1);  	lua_pop (L' 1);  	return res;  } else  	/* a < b? */return lua_lessthan (L' a' b);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,sort_comp,The following statement contains a magic number: if (!lua_isnil (L' 2)) {  	/* function? */int res;  	lua_pushvalue (L' 2);  	lua_pushvalue (L' a - 1);  	/* -1 to compensate function */lua_pushvalue (L' b - 2);  	/* -2 to compensate function and `a' */lua_call (L' 2' 1);  	res = lua_toboolean (L' -1);  	lua_pop (L' 1);  	return res;  } else  	/* a < b? */return lua_lessthan (L' a' b);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,sort_comp,The following statement contains a magic number: if (!lua_isnil (L' 2)) {  	/* function? */int res;  	lua_pushvalue (L' 2);  	lua_pushvalue (L' a - 1);  	/* -1 to compensate function */lua_pushvalue (L' b - 2);  	/* -2 to compensate function and `a' */lua_call (L' 2' 1);  	res = lua_toboolean (L' -1);  	lua_pop (L' 1);  	return res;  } else  	/* a < b? */return lua_lessthan (L' a' b);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,sort_comp,The following statement contains a magic number: if (!lua_isnil (L' 2)) {  	/* function? */int res;  	lua_pushvalue (L' 2);  	lua_pushvalue (L' a - 1);  	/* -1 to compensate function */lua_pushvalue (L' b - 2);  	/* -2 to compensate function and `a' */lua_call (L' 2' 1);  	res = lua_toboolean (L' -1);  	lua_pop (L' 1);  	return res;  } else  	/* a < b? */return lua_lessthan (L' a' b);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,sort_comp,The following statement contains a magic number: lua_pushvalue (L' 2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,sort_comp,The following statement contains a magic number: lua_pushvalue (L' b - 2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,sort_comp,The following statement contains a magic number: lua_call (L' 2' 1);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,auxsort_loop1,The following statement contains a magic number: return sort_comp (L' -1' -2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,auxsort_loop2,The following statement contains a magic number: return sort_comp (L' -3' -1);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,auxsort,The following statement contains a magic number: while (l < u) {  	/* for tail recursion */int i' j;  	/* sort elements a[l]' a[(l+u)/2] and a[u] */lua_rawgeti (L' 1' l);  	lua_rawgeti (L' 1' u);  	if (sort_comp (L' -1' -2) != 0)  		/* a[u] < a[l]? */set2 (L' l' u);  	/* swap a[l] - a[u] */else  		lua_pop (L' 2);  	if (u - l == 1)  		break;  	/* only 2 elements */i = (l + u) / 2;  	lua_rawgeti (L' 1' i);  	lua_rawgeti (L' 1' l);  	if (sort_comp (L' -2' -1) != 0)  		/* a[i]<a[l]? */set2 (L' i' l);  	else {  		lua_pop (L' 1);  		/* remove a[l] */lua_rawgeti (L' 1' u);  		if (sort_comp (L' -1' -2) != 0)  			/* a[u]<a[i]? */set2 (L' i' u);  		else  			lua_pop (L' 2);  	}  	if (u - l == 2)  		break;  	/* only 3 elements */lua_rawgeti (L' 1' i);  	/* Pivot */lua_pushvalue (L' -1);  	lua_rawgeti (L' 1' u - 1);  	set2 (L' i' u - 1);  	/* a[l] <= P == a[u-1] <= a[u]' only need to sort from l+1 to u-2 */i = l;  	j = u - 1;  	for (; ;) {  		/* invariant: a[l..i] <= P <= a[j..u] *//* repeat ++i until a[i] >= P */while (auxsort_loop1 (L' ref i) != 0) {  			if (i > u)  				luaL_error (L' "invalid order function for sorting");  			lua_pop (L' 1);  			/* remove a[i] */}  		/* repeat --j until a[j] <= P */while (auxsort_loop2 (L' ref j) != 0) {  			if (j < l)  				luaL_error (L' "invalid order function for sorting");  			lua_pop (L' 1);  			/* remove a[j] */}  		if (j < i) {  			lua_pop (L' 3);  			/* pop pivot' a[i]' a[j] */break;  		}  		set2 (L' i' j);  	}  	lua_rawgeti (L' 1' u - 1);  	lua_rawgeti (L' 1' i);  	set2 (L' u - 1' i);  	/* swap pivot (a[u-1]) with a[i] *//* a[l..i-1] <= a[i] == P <= a[i+1..u] *//* adjust so that smaller half is in [j..i] and larger one in [l..u] */if (i - l < u - i) {  		j = l;  		i = i - 1;  		l = i + 2;  	} else {  		j = i + 1;  		i = u;  		u = j - 2;  	}  	auxsort (L' j' i);  	/* call recursively the smaller one */}  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,auxsort,The following statement contains a magic number: while (l < u) {  	/* for tail recursion */int i' j;  	/* sort elements a[l]' a[(l+u)/2] and a[u] */lua_rawgeti (L' 1' l);  	lua_rawgeti (L' 1' u);  	if (sort_comp (L' -1' -2) != 0)  		/* a[u] < a[l]? */set2 (L' l' u);  	/* swap a[l] - a[u] */else  		lua_pop (L' 2);  	if (u - l == 1)  		break;  	/* only 2 elements */i = (l + u) / 2;  	lua_rawgeti (L' 1' i);  	lua_rawgeti (L' 1' l);  	if (sort_comp (L' -2' -1) != 0)  		/* a[i]<a[l]? */set2 (L' i' l);  	else {  		lua_pop (L' 1);  		/* remove a[l] */lua_rawgeti (L' 1' u);  		if (sort_comp (L' -1' -2) != 0)  			/* a[u]<a[i]? */set2 (L' i' u);  		else  			lua_pop (L' 2);  	}  	if (u - l == 2)  		break;  	/* only 3 elements */lua_rawgeti (L' 1' i);  	/* Pivot */lua_pushvalue (L' -1);  	lua_rawgeti (L' 1' u - 1);  	set2 (L' i' u - 1);  	/* a[l] <= P == a[u-1] <= a[u]' only need to sort from l+1 to u-2 */i = l;  	j = u - 1;  	for (; ;) {  		/* invariant: a[l..i] <= P <= a[j..u] *//* repeat ++i until a[i] >= P */while (auxsort_loop1 (L' ref i) != 0) {  			if (i > u)  				luaL_error (L' "invalid order function for sorting");  			lua_pop (L' 1);  			/* remove a[i] */}  		/* repeat --j until a[j] <= P */while (auxsort_loop2 (L' ref j) != 0) {  			if (j < l)  				luaL_error (L' "invalid order function for sorting");  			lua_pop (L' 1);  			/* remove a[j] */}  		if (j < i) {  			lua_pop (L' 3);  			/* pop pivot' a[i]' a[j] */break;  		}  		set2 (L' i' j);  	}  	lua_rawgeti (L' 1' u - 1);  	lua_rawgeti (L' 1' i);  	set2 (L' u - 1' i);  	/* swap pivot (a[u-1]) with a[i] *//* a[l..i-1] <= a[i] == P <= a[i+1..u] *//* adjust so that smaller half is in [j..i] and larger one in [l..u] */if (i - l < u - i) {  		j = l;  		i = i - 1;  		l = i + 2;  	} else {  		j = i + 1;  		i = u;  		u = j - 2;  	}  	auxsort (L' j' i);  	/* call recursively the smaller one */}  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,auxsort,The following statement contains a magic number: while (l < u) {  	/* for tail recursion */int i' j;  	/* sort elements a[l]' a[(l+u)/2] and a[u] */lua_rawgeti (L' 1' l);  	lua_rawgeti (L' 1' u);  	if (sort_comp (L' -1' -2) != 0)  		/* a[u] < a[l]? */set2 (L' l' u);  	/* swap a[l] - a[u] */else  		lua_pop (L' 2);  	if (u - l == 1)  		break;  	/* only 2 elements */i = (l + u) / 2;  	lua_rawgeti (L' 1' i);  	lua_rawgeti (L' 1' l);  	if (sort_comp (L' -2' -1) != 0)  		/* a[i]<a[l]? */set2 (L' i' l);  	else {  		lua_pop (L' 1);  		/* remove a[l] */lua_rawgeti (L' 1' u);  		if (sort_comp (L' -1' -2) != 0)  			/* a[u]<a[i]? */set2 (L' i' u);  		else  			lua_pop (L' 2);  	}  	if (u - l == 2)  		break;  	/* only 3 elements */lua_rawgeti (L' 1' i);  	/* Pivot */lua_pushvalue (L' -1);  	lua_rawgeti (L' 1' u - 1);  	set2 (L' i' u - 1);  	/* a[l] <= P == a[u-1] <= a[u]' only need to sort from l+1 to u-2 */i = l;  	j = u - 1;  	for (; ;) {  		/* invariant: a[l..i] <= P <= a[j..u] *//* repeat ++i until a[i] >= P */while (auxsort_loop1 (L' ref i) != 0) {  			if (i > u)  				luaL_error (L' "invalid order function for sorting");  			lua_pop (L' 1);  			/* remove a[i] */}  		/* repeat --j until a[j] <= P */while (auxsort_loop2 (L' ref j) != 0) {  			if (j < l)  				luaL_error (L' "invalid order function for sorting");  			lua_pop (L' 1);  			/* remove a[j] */}  		if (j < i) {  			lua_pop (L' 3);  			/* pop pivot' a[i]' a[j] */break;  		}  		set2 (L' i' j);  	}  	lua_rawgeti (L' 1' u - 1);  	lua_rawgeti (L' 1' i);  	set2 (L' u - 1' i);  	/* swap pivot (a[u-1]) with a[i] *//* a[l..i-1] <= a[i] == P <= a[i+1..u] *//* adjust so that smaller half is in [j..i] and larger one in [l..u] */if (i - l < u - i) {  		j = l;  		i = i - 1;  		l = i + 2;  	} else {  		j = i + 1;  		i = u;  		u = j - 2;  	}  	auxsort (L' j' i);  	/* call recursively the smaller one */}  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,auxsort,The following statement contains a magic number: while (l < u) {  	/* for tail recursion */int i' j;  	/* sort elements a[l]' a[(l+u)/2] and a[u] */lua_rawgeti (L' 1' l);  	lua_rawgeti (L' 1' u);  	if (sort_comp (L' -1' -2) != 0)  		/* a[u] < a[l]? */set2 (L' l' u);  	/* swap a[l] - a[u] */else  		lua_pop (L' 2);  	if (u - l == 1)  		break;  	/* only 2 elements */i = (l + u) / 2;  	lua_rawgeti (L' 1' i);  	lua_rawgeti (L' 1' l);  	if (sort_comp (L' -2' -1) != 0)  		/* a[i]<a[l]? */set2 (L' i' l);  	else {  		lua_pop (L' 1);  		/* remove a[l] */lua_rawgeti (L' 1' u);  		if (sort_comp (L' -1' -2) != 0)  			/* a[u]<a[i]? */set2 (L' i' u);  		else  			lua_pop (L' 2);  	}  	if (u - l == 2)  		break;  	/* only 3 elements */lua_rawgeti (L' 1' i);  	/* Pivot */lua_pushvalue (L' -1);  	lua_rawgeti (L' 1' u - 1);  	set2 (L' i' u - 1);  	/* a[l] <= P == a[u-1] <= a[u]' only need to sort from l+1 to u-2 */i = l;  	j = u - 1;  	for (; ;) {  		/* invariant: a[l..i] <= P <= a[j..u] *//* repeat ++i until a[i] >= P */while (auxsort_loop1 (L' ref i) != 0) {  			if (i > u)  				luaL_error (L' "invalid order function for sorting");  			lua_pop (L' 1);  			/* remove a[i] */}  		/* repeat --j until a[j] <= P */while (auxsort_loop2 (L' ref j) != 0) {  			if (j < l)  				luaL_error (L' "invalid order function for sorting");  			lua_pop (L' 1);  			/* remove a[j] */}  		if (j < i) {  			lua_pop (L' 3);  			/* pop pivot' a[i]' a[j] */break;  		}  		set2 (L' i' j);  	}  	lua_rawgeti (L' 1' u - 1);  	lua_rawgeti (L' 1' i);  	set2 (L' u - 1' i);  	/* swap pivot (a[u-1]) with a[i] *//* a[l..i-1] <= a[i] == P <= a[i+1..u] *//* adjust so that smaller half is in [j..i] and larger one in [l..u] */if (i - l < u - i) {  		j = l;  		i = i - 1;  		l = i + 2;  	} else {  		j = i + 1;  		i = u;  		u = j - 2;  	}  	auxsort (L' j' i);  	/* call recursively the smaller one */}  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,auxsort,The following statement contains a magic number: while (l < u) {  	/* for tail recursion */int i' j;  	/* sort elements a[l]' a[(l+u)/2] and a[u] */lua_rawgeti (L' 1' l);  	lua_rawgeti (L' 1' u);  	if (sort_comp (L' -1' -2) != 0)  		/* a[u] < a[l]? */set2 (L' l' u);  	/* swap a[l] - a[u] */else  		lua_pop (L' 2);  	if (u - l == 1)  		break;  	/* only 2 elements */i = (l + u) / 2;  	lua_rawgeti (L' 1' i);  	lua_rawgeti (L' 1' l);  	if (sort_comp (L' -2' -1) != 0)  		/* a[i]<a[l]? */set2 (L' i' l);  	else {  		lua_pop (L' 1);  		/* remove a[l] */lua_rawgeti (L' 1' u);  		if (sort_comp (L' -1' -2) != 0)  			/* a[u]<a[i]? */set2 (L' i' u);  		else  			lua_pop (L' 2);  	}  	if (u - l == 2)  		break;  	/* only 3 elements */lua_rawgeti (L' 1' i);  	/* Pivot */lua_pushvalue (L' -1);  	lua_rawgeti (L' 1' u - 1);  	set2 (L' i' u - 1);  	/* a[l] <= P == a[u-1] <= a[u]' only need to sort from l+1 to u-2 */i = l;  	j = u - 1;  	for (; ;) {  		/* invariant: a[l..i] <= P <= a[j..u] *//* repeat ++i until a[i] >= P */while (auxsort_loop1 (L' ref i) != 0) {  			if (i > u)  				luaL_error (L' "invalid order function for sorting");  			lua_pop (L' 1);  			/* remove a[i] */}  		/* repeat --j until a[j] <= P */while (auxsort_loop2 (L' ref j) != 0) {  			if (j < l)  				luaL_error (L' "invalid order function for sorting");  			lua_pop (L' 1);  			/* remove a[j] */}  		if (j < i) {  			lua_pop (L' 3);  			/* pop pivot' a[i]' a[j] */break;  		}  		set2 (L' i' j);  	}  	lua_rawgeti (L' 1' u - 1);  	lua_rawgeti (L' 1' i);  	set2 (L' u - 1' i);  	/* swap pivot (a[u-1]) with a[i] *//* a[l..i-1] <= a[i] == P <= a[i+1..u] *//* adjust so that smaller half is in [j..i] and larger one in [l..u] */if (i - l < u - i) {  		j = l;  		i = i - 1;  		l = i + 2;  	} else {  		j = i + 1;  		i = u;  		u = j - 2;  	}  	auxsort (L' j' i);  	/* call recursively the smaller one */}  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,auxsort,The following statement contains a magic number: while (l < u) {  	/* for tail recursion */int i' j;  	/* sort elements a[l]' a[(l+u)/2] and a[u] */lua_rawgeti (L' 1' l);  	lua_rawgeti (L' 1' u);  	if (sort_comp (L' -1' -2) != 0)  		/* a[u] < a[l]? */set2 (L' l' u);  	/* swap a[l] - a[u] */else  		lua_pop (L' 2);  	if (u - l == 1)  		break;  	/* only 2 elements */i = (l + u) / 2;  	lua_rawgeti (L' 1' i);  	lua_rawgeti (L' 1' l);  	if (sort_comp (L' -2' -1) != 0)  		/* a[i]<a[l]? */set2 (L' i' l);  	else {  		lua_pop (L' 1);  		/* remove a[l] */lua_rawgeti (L' 1' u);  		if (sort_comp (L' -1' -2) != 0)  			/* a[u]<a[i]? */set2 (L' i' u);  		else  			lua_pop (L' 2);  	}  	if (u - l == 2)  		break;  	/* only 3 elements */lua_rawgeti (L' 1' i);  	/* Pivot */lua_pushvalue (L' -1);  	lua_rawgeti (L' 1' u - 1);  	set2 (L' i' u - 1);  	/* a[l] <= P == a[u-1] <= a[u]' only need to sort from l+1 to u-2 */i = l;  	j = u - 1;  	for (; ;) {  		/* invariant: a[l..i] <= P <= a[j..u] *//* repeat ++i until a[i] >= P */while (auxsort_loop1 (L' ref i) != 0) {  			if (i > u)  				luaL_error (L' "invalid order function for sorting");  			lua_pop (L' 1);  			/* remove a[i] */}  		/* repeat --j until a[j] <= P */while (auxsort_loop2 (L' ref j) != 0) {  			if (j < l)  				luaL_error (L' "invalid order function for sorting");  			lua_pop (L' 1);  			/* remove a[j] */}  		if (j < i) {  			lua_pop (L' 3);  			/* pop pivot' a[i]' a[j] */break;  		}  		set2 (L' i' j);  	}  	lua_rawgeti (L' 1' u - 1);  	lua_rawgeti (L' 1' i);  	set2 (L' u - 1' i);  	/* swap pivot (a[u-1]) with a[i] *//* a[l..i-1] <= a[i] == P <= a[i+1..u] *//* adjust so that smaller half is in [j..i] and larger one in [l..u] */if (i - l < u - i) {  		j = l;  		i = i - 1;  		l = i + 2;  	} else {  		j = i + 1;  		i = u;  		u = j - 2;  	}  	auxsort (L' j' i);  	/* call recursively the smaller one */}  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,auxsort,The following statement contains a magic number: while (l < u) {  	/* for tail recursion */int i' j;  	/* sort elements a[l]' a[(l+u)/2] and a[u] */lua_rawgeti (L' 1' l);  	lua_rawgeti (L' 1' u);  	if (sort_comp (L' -1' -2) != 0)  		/* a[u] < a[l]? */set2 (L' l' u);  	/* swap a[l] - a[u] */else  		lua_pop (L' 2);  	if (u - l == 1)  		break;  	/* only 2 elements */i = (l + u) / 2;  	lua_rawgeti (L' 1' i);  	lua_rawgeti (L' 1' l);  	if (sort_comp (L' -2' -1) != 0)  		/* a[i]<a[l]? */set2 (L' i' l);  	else {  		lua_pop (L' 1);  		/* remove a[l] */lua_rawgeti (L' 1' u);  		if (sort_comp (L' -1' -2) != 0)  			/* a[u]<a[i]? */set2 (L' i' u);  		else  			lua_pop (L' 2);  	}  	if (u - l == 2)  		break;  	/* only 3 elements */lua_rawgeti (L' 1' i);  	/* Pivot */lua_pushvalue (L' -1);  	lua_rawgeti (L' 1' u - 1);  	set2 (L' i' u - 1);  	/* a[l] <= P == a[u-1] <= a[u]' only need to sort from l+1 to u-2 */i = l;  	j = u - 1;  	for (; ;) {  		/* invariant: a[l..i] <= P <= a[j..u] *//* repeat ++i until a[i] >= P */while (auxsort_loop1 (L' ref i) != 0) {  			if (i > u)  				luaL_error (L' "invalid order function for sorting");  			lua_pop (L' 1);  			/* remove a[i] */}  		/* repeat --j until a[j] <= P */while (auxsort_loop2 (L' ref j) != 0) {  			if (j < l)  				luaL_error (L' "invalid order function for sorting");  			lua_pop (L' 1);  			/* remove a[j] */}  		if (j < i) {  			lua_pop (L' 3);  			/* pop pivot' a[i]' a[j] */break;  		}  		set2 (L' i' j);  	}  	lua_rawgeti (L' 1' u - 1);  	lua_rawgeti (L' 1' i);  	set2 (L' u - 1' i);  	/* swap pivot (a[u-1]) with a[i] *//* a[l..i-1] <= a[i] == P <= a[i+1..u] *//* adjust so that smaller half is in [j..i] and larger one in [l..u] */if (i - l < u - i) {  		j = l;  		i = i - 1;  		l = i + 2;  	} else {  		j = i + 1;  		i = u;  		u = j - 2;  	}  	auxsort (L' j' i);  	/* call recursively the smaller one */}  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,auxsort,The following statement contains a magic number: while (l < u) {  	/* for tail recursion */int i' j;  	/* sort elements a[l]' a[(l+u)/2] and a[u] */lua_rawgeti (L' 1' l);  	lua_rawgeti (L' 1' u);  	if (sort_comp (L' -1' -2) != 0)  		/* a[u] < a[l]? */set2 (L' l' u);  	/* swap a[l] - a[u] */else  		lua_pop (L' 2);  	if (u - l == 1)  		break;  	/* only 2 elements */i = (l + u) / 2;  	lua_rawgeti (L' 1' i);  	lua_rawgeti (L' 1' l);  	if (sort_comp (L' -2' -1) != 0)  		/* a[i]<a[l]? */set2 (L' i' l);  	else {  		lua_pop (L' 1);  		/* remove a[l] */lua_rawgeti (L' 1' u);  		if (sort_comp (L' -1' -2) != 0)  			/* a[u]<a[i]? */set2 (L' i' u);  		else  			lua_pop (L' 2);  	}  	if (u - l == 2)  		break;  	/* only 3 elements */lua_rawgeti (L' 1' i);  	/* Pivot */lua_pushvalue (L' -1);  	lua_rawgeti (L' 1' u - 1);  	set2 (L' i' u - 1);  	/* a[l] <= P == a[u-1] <= a[u]' only need to sort from l+1 to u-2 */i = l;  	j = u - 1;  	for (; ;) {  		/* invariant: a[l..i] <= P <= a[j..u] *//* repeat ++i until a[i] >= P */while (auxsort_loop1 (L' ref i) != 0) {  			if (i > u)  				luaL_error (L' "invalid order function for sorting");  			lua_pop (L' 1);  			/* remove a[i] */}  		/* repeat --j until a[j] <= P */while (auxsort_loop2 (L' ref j) != 0) {  			if (j < l)  				luaL_error (L' "invalid order function for sorting");  			lua_pop (L' 1);  			/* remove a[j] */}  		if (j < i) {  			lua_pop (L' 3);  			/* pop pivot' a[i]' a[j] */break;  		}  		set2 (L' i' j);  	}  	lua_rawgeti (L' 1' u - 1);  	lua_rawgeti (L' 1' i);  	set2 (L' u - 1' i);  	/* swap pivot (a[u-1]) with a[i] *//* a[l..i-1] <= a[i] == P <= a[i+1..u] *//* adjust so that smaller half is in [j..i] and larger one in [l..u] */if (i - l < u - i) {  		j = l;  		i = i - 1;  		l = i + 2;  	} else {  		j = i + 1;  		i = u;  		u = j - 2;  	}  	auxsort (L' j' i);  	/* call recursively the smaller one */}  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,auxsort,The following statement contains a magic number: while (l < u) {  	/* for tail recursion */int i' j;  	/* sort elements a[l]' a[(l+u)/2] and a[u] */lua_rawgeti (L' 1' l);  	lua_rawgeti (L' 1' u);  	if (sort_comp (L' -1' -2) != 0)  		/* a[u] < a[l]? */set2 (L' l' u);  	/* swap a[l] - a[u] */else  		lua_pop (L' 2);  	if (u - l == 1)  		break;  	/* only 2 elements */i = (l + u) / 2;  	lua_rawgeti (L' 1' i);  	lua_rawgeti (L' 1' l);  	if (sort_comp (L' -2' -1) != 0)  		/* a[i]<a[l]? */set2 (L' i' l);  	else {  		lua_pop (L' 1);  		/* remove a[l] */lua_rawgeti (L' 1' u);  		if (sort_comp (L' -1' -2) != 0)  			/* a[u]<a[i]? */set2 (L' i' u);  		else  			lua_pop (L' 2);  	}  	if (u - l == 2)  		break;  	/* only 3 elements */lua_rawgeti (L' 1' i);  	/* Pivot */lua_pushvalue (L' -1);  	lua_rawgeti (L' 1' u - 1);  	set2 (L' i' u - 1);  	/* a[l] <= P == a[u-1] <= a[u]' only need to sort from l+1 to u-2 */i = l;  	j = u - 1;  	for (; ;) {  		/* invariant: a[l..i] <= P <= a[j..u] *//* repeat ++i until a[i] >= P */while (auxsort_loop1 (L' ref i) != 0) {  			if (i > u)  				luaL_error (L' "invalid order function for sorting");  			lua_pop (L' 1);  			/* remove a[i] */}  		/* repeat --j until a[j] <= P */while (auxsort_loop2 (L' ref j) != 0) {  			if (j < l)  				luaL_error (L' "invalid order function for sorting");  			lua_pop (L' 1);  			/* remove a[j] */}  		if (j < i) {  			lua_pop (L' 3);  			/* pop pivot' a[i]' a[j] */break;  		}  		set2 (L' i' j);  	}  	lua_rawgeti (L' 1' u - 1);  	lua_rawgeti (L' 1' i);  	set2 (L' u - 1' i);  	/* swap pivot (a[u-1]) with a[i] *//* a[l..i-1] <= a[i] == P <= a[i+1..u] *//* adjust so that smaller half is in [j..i] and larger one in [l..u] */if (i - l < u - i) {  		j = l;  		i = i - 1;  		l = i + 2;  	} else {  		j = i + 1;  		i = u;  		u = j - 2;  	}  	auxsort (L' j' i);  	/* call recursively the smaller one */}  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,auxsort,The following statement contains a magic number: while (l < u) {  	/* for tail recursion */int i' j;  	/* sort elements a[l]' a[(l+u)/2] and a[u] */lua_rawgeti (L' 1' l);  	lua_rawgeti (L' 1' u);  	if (sort_comp (L' -1' -2) != 0)  		/* a[u] < a[l]? */set2 (L' l' u);  	/* swap a[l] - a[u] */else  		lua_pop (L' 2);  	if (u - l == 1)  		break;  	/* only 2 elements */i = (l + u) / 2;  	lua_rawgeti (L' 1' i);  	lua_rawgeti (L' 1' l);  	if (sort_comp (L' -2' -1) != 0)  		/* a[i]<a[l]? */set2 (L' i' l);  	else {  		lua_pop (L' 1);  		/* remove a[l] */lua_rawgeti (L' 1' u);  		if (sort_comp (L' -1' -2) != 0)  			/* a[u]<a[i]? */set2 (L' i' u);  		else  			lua_pop (L' 2);  	}  	if (u - l == 2)  		break;  	/* only 3 elements */lua_rawgeti (L' 1' i);  	/* Pivot */lua_pushvalue (L' -1);  	lua_rawgeti (L' 1' u - 1);  	set2 (L' i' u - 1);  	/* a[l] <= P == a[u-1] <= a[u]' only need to sort from l+1 to u-2 */i = l;  	j = u - 1;  	for (; ;) {  		/* invariant: a[l..i] <= P <= a[j..u] *//* repeat ++i until a[i] >= P */while (auxsort_loop1 (L' ref i) != 0) {  			if (i > u)  				luaL_error (L' "invalid order function for sorting");  			lua_pop (L' 1);  			/* remove a[i] */}  		/* repeat --j until a[j] <= P */while (auxsort_loop2 (L' ref j) != 0) {  			if (j < l)  				luaL_error (L' "invalid order function for sorting");  			lua_pop (L' 1);  			/* remove a[j] */}  		if (j < i) {  			lua_pop (L' 3);  			/* pop pivot' a[i]' a[j] */break;  		}  		set2 (L' i' j);  	}  	lua_rawgeti (L' 1' u - 1);  	lua_rawgeti (L' 1' i);  	set2 (L' u - 1' i);  	/* swap pivot (a[u-1]) with a[i] *//* a[l..i-1] <= a[i] == P <= a[i+1..u] *//* adjust so that smaller half is in [j..i] and larger one in [l..u] */if (i - l < u - i) {  		j = l;  		i = i - 1;  		l = i + 2;  	} else {  		j = i + 1;  		i = u;  		u = j - 2;  	}  	auxsort (L' j' i);  	/* call recursively the smaller one */}  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,auxsort,The following statement contains a magic number: if (sort_comp (L' -1' -2) != 0)  	/* a[u] < a[l]? */set2 (L' l' u);  /* swap a[l] - a[u] */else  	lua_pop (L' 2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,auxsort,The following statement contains a magic number: if (sort_comp (L' -1' -2) != 0)  	/* a[u] < a[l]? */set2 (L' l' u);  /* swap a[l] - a[u] */else  	lua_pop (L' 2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,auxsort,The following statement contains a magic number: lua_pop (L' 2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,auxsort,The following statement contains a magic number: i = (l + u) / 2;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,auxsort,The following statement contains a magic number: if (sort_comp (L' -2' -1) != 0)  	/* a[i]<a[l]? */set2 (L' i' l);  else {  	lua_pop (L' 1);  	/* remove a[l] */lua_rawgeti (L' 1' u);  	if (sort_comp (L' -1' -2) != 0)  		/* a[u]<a[i]? */set2 (L' i' u);  	else  		lua_pop (L' 2);  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,auxsort,The following statement contains a magic number: if (sort_comp (L' -2' -1) != 0)  	/* a[i]<a[l]? */set2 (L' i' l);  else {  	lua_pop (L' 1);  	/* remove a[l] */lua_rawgeti (L' 1' u);  	if (sort_comp (L' -1' -2) != 0)  		/* a[u]<a[i]? */set2 (L' i' u);  	else  		lua_pop (L' 2);  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,auxsort,The following statement contains a magic number: if (sort_comp (L' -2' -1) != 0)  	/* a[i]<a[l]? */set2 (L' i' l);  else {  	lua_pop (L' 1);  	/* remove a[l] */lua_rawgeti (L' 1' u);  	if (sort_comp (L' -1' -2) != 0)  		/* a[u]<a[i]? */set2 (L' i' u);  	else  		lua_pop (L' 2);  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,auxsort,The following statement contains a magic number: if (sort_comp (L' -1' -2) != 0)  	/* a[u]<a[i]? */set2 (L' i' u);  else  	lua_pop (L' 2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,auxsort,The following statement contains a magic number: if (sort_comp (L' -1' -2) != 0)  	/* a[u]<a[i]? */set2 (L' i' u);  else  	lua_pop (L' 2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,auxsort,The following statement contains a magic number: lua_pop (L' 2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,auxsort,The following statement contains a magic number: if (u - l == 2)  	break;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,auxsort,The following statement contains a magic number: for (; ;) {  	/* invariant: a[l..i] <= P <= a[j..u] *//* repeat ++i until a[i] >= P */while (auxsort_loop1 (L' ref i) != 0) {  		if (i > u)  			luaL_error (L' "invalid order function for sorting");  		lua_pop (L' 1);  		/* remove a[i] */}  	/* repeat --j until a[j] <= P */while (auxsort_loop2 (L' ref j) != 0) {  		if (j < l)  			luaL_error (L' "invalid order function for sorting");  		lua_pop (L' 1);  		/* remove a[j] */}  	if (j < i) {  		lua_pop (L' 3);  		/* pop pivot' a[i]' a[j] */break;  	}  	set2 (L' i' j);  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,auxsort,The following statement contains a magic number: if (j < i) {  	lua_pop (L' 3);  	/* pop pivot' a[i]' a[j] */break;  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,auxsort,The following statement contains a magic number: lua_pop (L' 3);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,auxsort,The following statement contains a magic number: if (i - l < u - i) {  	j = l;  	i = i - 1;  	l = i + 2;  } else {  	j = i + 1;  	i = u;  	u = j - 2;  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,auxsort,The following statement contains a magic number: if (i - l < u - i) {  	j = l;  	i = i - 1;  	l = i + 2;  } else {  	j = i + 1;  	i = u;  	u = j - 2;  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,auxsort,The following statement contains a magic number: l = i + 2;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,auxsort,The following statement contains a magic number: u = j - 2;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,sort,The following statement contains a magic number: luaL_checkstack (L' 40' "");  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,sort,The following statement contains a magic number: if (!lua_isnoneornil (L' 2))  	/* is there a 2nd argument? */luaL_checktype (L' 2' LUA_TFUNCTION);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,sort,The following statement contains a magic number: if (!lua_isnoneornil (L' 2))  	/* is there a 2nd argument? */luaL_checktype (L' 2' LUA_TFUNCTION);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,sort,The following statement contains a magic number: luaL_checktype (L' 2' LUA_TFUNCTION);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,sort,The following statement contains a magic number: lua_settop (L' 2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,strtoul,The following statement contains a magic number: try {  	end = new CharPtr (s.chars' s.index);  	// skip over any leading whitespace  	while (end [0] == ' ')  		end = end.next ();  	// ignore any leading 0x  	if ((end [0] == '0') && (end [1] == 'x'))  		end = end.next ().next ();  	else if ((end [0] == '0') && (end [1] == 'X'))  		end = end.next ().next ();  	// do we have a leading + or - sign?  	bool negate = false;  	if (end [0] == '+')  		end = end.next ();  	else if (end [0] == '-') {  		negate = true;  		end = end.next ();  	}  	// loop through all chars  	bool invalid = false;  	bool had_digits = false;  	ulong result = 0;  	while (true) {  		// get this char  		char ch = end [0];  		// which digit is this?  		int this_digit = 0;  		if (isdigit (ch))  			this_digit = ch - '0';  		else if (isalpha (ch))  			this_digit = tolower (ch) - 'a' + 10;  		else  			break;  		// is this digit valid?  		if (this_digit >= base_)  			invalid = true;  		else {  			had_digits = true;  			result = result * (ulong)base_ + (ulong)this_digit;  		}  		end = end.next ();  	}  	// were any of the digits invalid?  	if (invalid || (!had_digits)) {  		end = s;  		return System.UInt64.MaxValue;  	}  	// if the value was a negative then negate it here  	if (negate)  		result = (ulong)-(long)result;  	// ok' we're done  	return (ulong)result;  } catch {  	end = s;  	return 0;  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,strtoul,The following statement contains a magic number: while (true) {  	// get this char  	char ch = end [0];  	// which digit is this?  	int this_digit = 0;  	if (isdigit (ch))  		this_digit = ch - '0';  	else if (isalpha (ch))  		this_digit = tolower (ch) - 'a' + 10;  	else  		break;  	// is this digit valid?  	if (this_digit >= base_)  		invalid = true;  	else {  		had_digits = true;  		result = result * (ulong)base_ + (ulong)this_digit;  	}  	end = end.next ();  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,strtoul,The following statement contains a magic number: if (isdigit (ch))  	this_digit = ch - '0';  else if (isalpha (ch))  	this_digit = tolower (ch) - 'a' + 10;  else  	break;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,strtoul,The following statement contains a magic number: if (isalpha (ch))  	this_digit = tolower (ch) - 'a' + 10;  else  	break;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,strtoul,The following statement contains a magic number: this_digit = tolower (ch) - 'a' + 10;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,isprint,The following statement contains a magic number: return (c >= (byte)' ') && (c <= (byte)127);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,frexp,The following statement contains a magic number: expptr = (int)Math.Log (x' 2) + 1;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,ldexp,The following statement contains a magic number: return x * Math.Pow (2' expptr);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(global_State))  	return 228;  else if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(global_State))  	return 228;  else if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(global_State))  	return 228;  else if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(global_State))  	return 228;  else if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(global_State))  	return 228;  else if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(global_State))  	return 228;  else if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(global_State))  	return 228;  else if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(global_State))  	return 228;  else if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(global_State))  	return 228;  else if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(global_State))  	return 228;  else if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(global_State))  	return 228;  else if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(global_State))  	return 228;  else if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(global_State))  	return 228;  else if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(global_State))  	return 228;  else if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(global_State))  	return 228;  else if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(global_State))  	return 228;  else if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(global_State))  	return 228;  else if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(global_State))  	return 228;  else if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(global_State))  	return 228;  else if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(global_State))  	return 228;  else if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(global_State))  	return 228;  else if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(global_State))  	return 228;  else if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(global_State))  	return 228;  else if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(global_State))  	return 228;  else if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(global_State))  	return 228;  else if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(global_State))  	return 228;  else if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(global_State))  	return 228;  else if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(global_State))  	return 228;  else if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(global_State))  	return 228;  else if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(global_State))  	return 228;  else if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(global_State))  	return 228;  else if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(global_State))  	return 228;  else if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(global_State))  	return 228;  else if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(global_State))  	return 228;  else if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(global_State))  	return 228;  else if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(global_State))  	return 228;  else if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(global_State))  	return 228;  else if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(global_State))  	return 228;  else if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(global_State))  	return 228;  else if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(global_State))  	return 228;  else if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(global_State))  	return 228;  else if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(global_State))  	return 228;  else if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(global_State))  	return 228;  else if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(global_State))  	return 228;  else if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(global_State))  	return 228;  else if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(global_State))  	return 228;  else if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(global_State))  	return 228;  else if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: return 228;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LG))  	return 376;  else if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: return 376;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallInfo))  	return 24;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: return 24;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: return 16;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Table))  	return 32;  else if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: return 32;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Node))  	return 32;  else if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: return 32;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObject))  	return 120;  else if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: return 120;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCObjectRef))  	return 4;  else if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(ArrayRef))  	return 4;  else if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Closure))  	return 0;  // handle this one manually in the code  else if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Proto))  	return 76;  else if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: return 76;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(luaL_Reg))  	return 8;  else if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: return 8;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(luaL_Buffer))  	return 524;  else if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: return 524;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_State))  	return 120;  else if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: return 120;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_Debug))  	return 100;  else if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: return 100;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CallS))  	return 8;  else if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: return 8;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LoadF))  	return 520;  else if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: return 520;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LoadS))  	return 8;  else if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: return 8;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_longjmp))  	return 72;  else if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: return 72;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(SParser))  	return 20;  else if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: return 20;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Token))  	return 16;  else if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: return 16;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LexState))  	return 52;  else if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: return 52;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(FuncState))  	return 572;  else if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: return 572;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(GCheader))  	return 8;  else if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: return 8;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(lua_TValue))  	return 16;  else if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: return 16;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(TString))  	return 16;  else if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: return 16;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LocVar))  	return 12;  else if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: return 12;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(UpVal))  	return 32;  else if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: return 32;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(CClosure))  	return 40;  else if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: return 40;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LClosure))  	return 24;  else if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: return 24;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(TKey))  	return 16;  else if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: return 16;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(ConsControl))  	return 40;  else if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: return 40;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LHS_assign))  	return 32;  else if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: return 32;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(expdesc))  	return 24;  else if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: return 24;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(upvaldesc))  	return 2;  else if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: return 2;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(BlockCnt))  	return 12;  else if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: return 12;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Zio))  	return 20;  else if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: return 20;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Mbuffer))  	return 12;  else if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: return 12;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(LoadState))  	return 16;  else if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: return 16;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(MatchState))  	return 272;  else if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: return 272;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(stringtable))  	return 12;  else if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: return 12;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(FilePtr))  	return 4;  else if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Udata))  	return 24;  else if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: return 24;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Char))  	return 1;  else if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(UInt16))  	return 2;  else if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: return 2;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Int16))  	return 2;  else if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: return 2;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(UInt32))  	return 4;  else if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Int32))  	return 4;  else if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: if (t == typeof(Single))  	return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,GetUnmanagedSize,The following statement contains a magic number: return 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,callTMres,The following statement contains a magic number: setobj2s (L' L.top + 2' p2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,callTMres,The following statement contains a magic number: luaD_checkstack (L' 3);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,callTMres,The following statement contains a magic number: L.top += 3;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,callTMres,The following statement contains a magic number: luaD_call (L' L.top - 3' 1);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,callTM,The following statement contains a magic number: setobj2s (L' L.top + 2' p2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,callTM,The following statement contains a magic number: setobj2s (L' L.top + 3' p3);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,callTM,The following statement contains a magic number: luaD_checkstack (L' 4);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,callTM,The following statement contains a magic number: L.top += 4;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,callTM,The following statement contains a magic number: luaD_call (L' L.top - 4' 0);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaV_concat,The following statement contains a magic number: do {  	StkId top = L.base_ + last + 1;  	int n = 2;  	/* number of elements handled in this pass (at least 2) */if (!(ttisstring (top - 2) || ttisnumber (top - 2)) || (tostring (L' top - 1) == 0)) {  		if (call_binTM (L' top - 2' top - 1' top - 2' TMS.TM_CONCAT) == 0)  			luaG_concaterror (L' top - 2' top - 1);  	} else if (tsvalue (top - 1).len == 0)  		/* second op is empty? */tostring (L' top - 2);  	/* result is first op (as string) */else {  		/* at least two string values; get as many as possible */uint tl = tsvalue (top - 1).len;  		CharPtr buffer;  		int i;  		/* collect total length */for (n = 1; n < total && (tostring (L' top - n - 1) != 0); n++) {  			uint l = tsvalue (top - n - 1).len;  			if (l >= MAX_SIZET - tl)  				luaG_runerror (L' "string length overflow");  			tl += l;  		}  		buffer = luaZ_openspace (L' G (L).buff' tl);  		if (mybuff == null)  			mybuff = buffer;  		tl = 0;  		for (i = n; i > 0; i--) {  			/* concat all strings */uint l = tsvalue (top - i).len;  			memcpy (buffer.chars' (int)tl' svalue (top - i).chars' (int)l);  			tl += l;  		}  		setsvalue2s (L' top - n' luaS_newlstr (L' buffer' tl));  	}  	total -= n - 1;  	/* got `n' strings to create 1 new */last -= n - 1;  } while (total > 1);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaV_concat,The following statement contains a magic number: do {  	StkId top = L.base_ + last + 1;  	int n = 2;  	/* number of elements handled in this pass (at least 2) */if (!(ttisstring (top - 2) || ttisnumber (top - 2)) || (tostring (L' top - 1) == 0)) {  		if (call_binTM (L' top - 2' top - 1' top - 2' TMS.TM_CONCAT) == 0)  			luaG_concaterror (L' top - 2' top - 1);  	} else if (tsvalue (top - 1).len == 0)  		/* second op is empty? */tostring (L' top - 2);  	/* result is first op (as string) */else {  		/* at least two string values; get as many as possible */uint tl = tsvalue (top - 1).len;  		CharPtr buffer;  		int i;  		/* collect total length */for (n = 1; n < total && (tostring (L' top - n - 1) != 0); n++) {  			uint l = tsvalue (top - n - 1).len;  			if (l >= MAX_SIZET - tl)  				luaG_runerror (L' "string length overflow");  			tl += l;  		}  		buffer = luaZ_openspace (L' G (L).buff' tl);  		if (mybuff == null)  			mybuff = buffer;  		tl = 0;  		for (i = n; i > 0; i--) {  			/* concat all strings */uint l = tsvalue (top - i).len;  			memcpy (buffer.chars' (int)tl' svalue (top - i).chars' (int)l);  			tl += l;  		}  		setsvalue2s (L' top - n' luaS_newlstr (L' buffer' tl));  	}  	total -= n - 1;  	/* got `n' strings to create 1 new */last -= n - 1;  } while (total > 1);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaV_concat,The following statement contains a magic number: do {  	StkId top = L.base_ + last + 1;  	int n = 2;  	/* number of elements handled in this pass (at least 2) */if (!(ttisstring (top - 2) || ttisnumber (top - 2)) || (tostring (L' top - 1) == 0)) {  		if (call_binTM (L' top - 2' top - 1' top - 2' TMS.TM_CONCAT) == 0)  			luaG_concaterror (L' top - 2' top - 1);  	} else if (tsvalue (top - 1).len == 0)  		/* second op is empty? */tostring (L' top - 2);  	/* result is first op (as string) */else {  		/* at least two string values; get as many as possible */uint tl = tsvalue (top - 1).len;  		CharPtr buffer;  		int i;  		/* collect total length */for (n = 1; n < total && (tostring (L' top - n - 1) != 0); n++) {  			uint l = tsvalue (top - n - 1).len;  			if (l >= MAX_SIZET - tl)  				luaG_runerror (L' "string length overflow");  			tl += l;  		}  		buffer = luaZ_openspace (L' G (L).buff' tl);  		if (mybuff == null)  			mybuff = buffer;  		tl = 0;  		for (i = n; i > 0; i--) {  			/* concat all strings */uint l = tsvalue (top - i).len;  			memcpy (buffer.chars' (int)tl' svalue (top - i).chars' (int)l);  			tl += l;  		}  		setsvalue2s (L' top - n' luaS_newlstr (L' buffer' tl));  	}  	total -= n - 1;  	/* got `n' strings to create 1 new */last -= n - 1;  } while (total > 1);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaV_concat,The following statement contains a magic number: do {  	StkId top = L.base_ + last + 1;  	int n = 2;  	/* number of elements handled in this pass (at least 2) */if (!(ttisstring (top - 2) || ttisnumber (top - 2)) || (tostring (L' top - 1) == 0)) {  		if (call_binTM (L' top - 2' top - 1' top - 2' TMS.TM_CONCAT) == 0)  			luaG_concaterror (L' top - 2' top - 1);  	} else if (tsvalue (top - 1).len == 0)  		/* second op is empty? */tostring (L' top - 2);  	/* result is first op (as string) */else {  		/* at least two string values; get as many as possible */uint tl = tsvalue (top - 1).len;  		CharPtr buffer;  		int i;  		/* collect total length */for (n = 1; n < total && (tostring (L' top - n - 1) != 0); n++) {  			uint l = tsvalue (top - n - 1).len;  			if (l >= MAX_SIZET - tl)  				luaG_runerror (L' "string length overflow");  			tl += l;  		}  		buffer = luaZ_openspace (L' G (L).buff' tl);  		if (mybuff == null)  			mybuff = buffer;  		tl = 0;  		for (i = n; i > 0; i--) {  			/* concat all strings */uint l = tsvalue (top - i).len;  			memcpy (buffer.chars' (int)tl' svalue (top - i).chars' (int)l);  			tl += l;  		}  		setsvalue2s (L' top - n' luaS_newlstr (L' buffer' tl));  	}  	total -= n - 1;  	/* got `n' strings to create 1 new */last -= n - 1;  } while (total > 1);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaV_concat,The following statement contains a magic number: do {  	StkId top = L.base_ + last + 1;  	int n = 2;  	/* number of elements handled in this pass (at least 2) */if (!(ttisstring (top - 2) || ttisnumber (top - 2)) || (tostring (L' top - 1) == 0)) {  		if (call_binTM (L' top - 2' top - 1' top - 2' TMS.TM_CONCAT) == 0)  			luaG_concaterror (L' top - 2' top - 1);  	} else if (tsvalue (top - 1).len == 0)  		/* second op is empty? */tostring (L' top - 2);  	/* result is first op (as string) */else {  		/* at least two string values; get as many as possible */uint tl = tsvalue (top - 1).len;  		CharPtr buffer;  		int i;  		/* collect total length */for (n = 1; n < total && (tostring (L' top - n - 1) != 0); n++) {  			uint l = tsvalue (top - n - 1).len;  			if (l >= MAX_SIZET - tl)  				luaG_runerror (L' "string length overflow");  			tl += l;  		}  		buffer = luaZ_openspace (L' G (L).buff' tl);  		if (mybuff == null)  			mybuff = buffer;  		tl = 0;  		for (i = n; i > 0; i--) {  			/* concat all strings */uint l = tsvalue (top - i).len;  			memcpy (buffer.chars' (int)tl' svalue (top - i).chars' (int)l);  			tl += l;  		}  		setsvalue2s (L' top - n' luaS_newlstr (L' buffer' tl));  	}  	total -= n - 1;  	/* got `n' strings to create 1 new */last -= n - 1;  } while (total > 1);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaV_concat,The following statement contains a magic number: do {  	StkId top = L.base_ + last + 1;  	int n = 2;  	/* number of elements handled in this pass (at least 2) */if (!(ttisstring (top - 2) || ttisnumber (top - 2)) || (tostring (L' top - 1) == 0)) {  		if (call_binTM (L' top - 2' top - 1' top - 2' TMS.TM_CONCAT) == 0)  			luaG_concaterror (L' top - 2' top - 1);  	} else if (tsvalue (top - 1).len == 0)  		/* second op is empty? */tostring (L' top - 2);  	/* result is first op (as string) */else {  		/* at least two string values; get as many as possible */uint tl = tsvalue (top - 1).len;  		CharPtr buffer;  		int i;  		/* collect total length */for (n = 1; n < total && (tostring (L' top - n - 1) != 0); n++) {  			uint l = tsvalue (top - n - 1).len;  			if (l >= MAX_SIZET - tl)  				luaG_runerror (L' "string length overflow");  			tl += l;  		}  		buffer = luaZ_openspace (L' G (L).buff' tl);  		if (mybuff == null)  			mybuff = buffer;  		tl = 0;  		for (i = n; i > 0; i--) {  			/* concat all strings */uint l = tsvalue (top - i).len;  			memcpy (buffer.chars' (int)tl' svalue (top - i).chars' (int)l);  			tl += l;  		}  		setsvalue2s (L' top - n' luaS_newlstr (L' buffer' tl));  	}  	total -= n - 1;  	/* got `n' strings to create 1 new */last -= n - 1;  } while (total > 1);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaV_concat,The following statement contains a magic number: do {  	StkId top = L.base_ + last + 1;  	int n = 2;  	/* number of elements handled in this pass (at least 2) */if (!(ttisstring (top - 2) || ttisnumber (top - 2)) || (tostring (L' top - 1) == 0)) {  		if (call_binTM (L' top - 2' top - 1' top - 2' TMS.TM_CONCAT) == 0)  			luaG_concaterror (L' top - 2' top - 1);  	} else if (tsvalue (top - 1).len == 0)  		/* second op is empty? */tostring (L' top - 2);  	/* result is first op (as string) */else {  		/* at least two string values; get as many as possible */uint tl = tsvalue (top - 1).len;  		CharPtr buffer;  		int i;  		/* collect total length */for (n = 1; n < total && (tostring (L' top - n - 1) != 0); n++) {  			uint l = tsvalue (top - n - 1).len;  			if (l >= MAX_SIZET - tl)  				luaG_runerror (L' "string length overflow");  			tl += l;  		}  		buffer = luaZ_openspace (L' G (L).buff' tl);  		if (mybuff == null)  			mybuff = buffer;  		tl = 0;  		for (i = n; i > 0; i--) {  			/* concat all strings */uint l = tsvalue (top - i).len;  			memcpy (buffer.chars' (int)tl' svalue (top - i).chars' (int)l);  			tl += l;  		}  		setsvalue2s (L' top - n' luaS_newlstr (L' buffer' tl));  	}  	total -= n - 1;  	/* got `n' strings to create 1 new */last -= n - 1;  } while (total > 1);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaV_concat,The following statement contains a magic number: if (!(ttisstring (top - 2) || ttisnumber (top - 2)) || (tostring (L' top - 1) == 0)) {  	if (call_binTM (L' top - 2' top - 1' top - 2' TMS.TM_CONCAT) == 0)  		luaG_concaterror (L' top - 2' top - 1);  } else if (tsvalue (top - 1).len == 0)  	/* second op is empty? */tostring (L' top - 2);  /* result is first op (as string) */else {  	/* at least two string values; get as many as possible */uint tl = tsvalue (top - 1).len;  	CharPtr buffer;  	int i;  	/* collect total length */for (n = 1; n < total && (tostring (L' top - n - 1) != 0); n++) {  		uint l = tsvalue (top - n - 1).len;  		if (l >= MAX_SIZET - tl)  			luaG_runerror (L' "string length overflow");  		tl += l;  	}  	buffer = luaZ_openspace (L' G (L).buff' tl);  	if (mybuff == null)  		mybuff = buffer;  	tl = 0;  	for (i = n; i > 0; i--) {  		/* concat all strings */uint l = tsvalue (top - i).len;  		memcpy (buffer.chars' (int)tl' svalue (top - i).chars' (int)l);  		tl += l;  	}  	setsvalue2s (L' top - n' luaS_newlstr (L' buffer' tl));  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaV_concat,The following statement contains a magic number: if (!(ttisstring (top - 2) || ttisnumber (top - 2)) || (tostring (L' top - 1) == 0)) {  	if (call_binTM (L' top - 2' top - 1' top - 2' TMS.TM_CONCAT) == 0)  		luaG_concaterror (L' top - 2' top - 1);  } else if (tsvalue (top - 1).len == 0)  	/* second op is empty? */tostring (L' top - 2);  /* result is first op (as string) */else {  	/* at least two string values; get as many as possible */uint tl = tsvalue (top - 1).len;  	CharPtr buffer;  	int i;  	/* collect total length */for (n = 1; n < total && (tostring (L' top - n - 1) != 0); n++) {  		uint l = tsvalue (top - n - 1).len;  		if (l >= MAX_SIZET - tl)  			luaG_runerror (L' "string length overflow");  		tl += l;  	}  	buffer = luaZ_openspace (L' G (L).buff' tl);  	if (mybuff == null)  		mybuff = buffer;  	tl = 0;  	for (i = n; i > 0; i--) {  		/* concat all strings */uint l = tsvalue (top - i).len;  		memcpy (buffer.chars' (int)tl' svalue (top - i).chars' (int)l);  		tl += l;  	}  	setsvalue2s (L' top - n' luaS_newlstr (L' buffer' tl));  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaV_concat,The following statement contains a magic number: if (!(ttisstring (top - 2) || ttisnumber (top - 2)) || (tostring (L' top - 1) == 0)) {  	if (call_binTM (L' top - 2' top - 1' top - 2' TMS.TM_CONCAT) == 0)  		luaG_concaterror (L' top - 2' top - 1);  } else if (tsvalue (top - 1).len == 0)  	/* second op is empty? */tostring (L' top - 2);  /* result is first op (as string) */else {  	/* at least two string values; get as many as possible */uint tl = tsvalue (top - 1).len;  	CharPtr buffer;  	int i;  	/* collect total length */for (n = 1; n < total && (tostring (L' top - n - 1) != 0); n++) {  		uint l = tsvalue (top - n - 1).len;  		if (l >= MAX_SIZET - tl)  			luaG_runerror (L' "string length overflow");  		tl += l;  	}  	buffer = luaZ_openspace (L' G (L).buff' tl);  	if (mybuff == null)  		mybuff = buffer;  	tl = 0;  	for (i = n; i > 0; i--) {  		/* concat all strings */uint l = tsvalue (top - i).len;  		memcpy (buffer.chars' (int)tl' svalue (top - i).chars' (int)l);  		tl += l;  	}  	setsvalue2s (L' top - n' luaS_newlstr (L' buffer' tl));  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaV_concat,The following statement contains a magic number: if (!(ttisstring (top - 2) || ttisnumber (top - 2)) || (tostring (L' top - 1) == 0)) {  	if (call_binTM (L' top - 2' top - 1' top - 2' TMS.TM_CONCAT) == 0)  		luaG_concaterror (L' top - 2' top - 1);  } else if (tsvalue (top - 1).len == 0)  	/* second op is empty? */tostring (L' top - 2);  /* result is first op (as string) */else {  	/* at least two string values; get as many as possible */uint tl = tsvalue (top - 1).len;  	CharPtr buffer;  	int i;  	/* collect total length */for (n = 1; n < total && (tostring (L' top - n - 1) != 0); n++) {  		uint l = tsvalue (top - n - 1).len;  		if (l >= MAX_SIZET - tl)  			luaG_runerror (L' "string length overflow");  		tl += l;  	}  	buffer = luaZ_openspace (L' G (L).buff' tl);  	if (mybuff == null)  		mybuff = buffer;  	tl = 0;  	for (i = n; i > 0; i--) {  		/* concat all strings */uint l = tsvalue (top - i).len;  		memcpy (buffer.chars' (int)tl' svalue (top - i).chars' (int)l);  		tl += l;  	}  	setsvalue2s (L' top - n' luaS_newlstr (L' buffer' tl));  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaV_concat,The following statement contains a magic number: if (!(ttisstring (top - 2) || ttisnumber (top - 2)) || (tostring (L' top - 1) == 0)) {  	if (call_binTM (L' top - 2' top - 1' top - 2' TMS.TM_CONCAT) == 0)  		luaG_concaterror (L' top - 2' top - 1);  } else if (tsvalue (top - 1).len == 0)  	/* second op is empty? */tostring (L' top - 2);  /* result is first op (as string) */else {  	/* at least two string values; get as many as possible */uint tl = tsvalue (top - 1).len;  	CharPtr buffer;  	int i;  	/* collect total length */for (n = 1; n < total && (tostring (L' top - n - 1) != 0); n++) {  		uint l = tsvalue (top - n - 1).len;  		if (l >= MAX_SIZET - tl)  			luaG_runerror (L' "string length overflow");  		tl += l;  	}  	buffer = luaZ_openspace (L' G (L).buff' tl);  	if (mybuff == null)  		mybuff = buffer;  	tl = 0;  	for (i = n; i > 0; i--) {  		/* concat all strings */uint l = tsvalue (top - i).len;  		memcpy (buffer.chars' (int)tl' svalue (top - i).chars' (int)l);  		tl += l;  	}  	setsvalue2s (L' top - n' luaS_newlstr (L' buffer' tl));  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaV_concat,The following statement contains a magic number: if (!(ttisstring (top - 2) || ttisnumber (top - 2)) || (tostring (L' top - 1) == 0)) {  	if (call_binTM (L' top - 2' top - 1' top - 2' TMS.TM_CONCAT) == 0)  		luaG_concaterror (L' top - 2' top - 1);  } else if (tsvalue (top - 1).len == 0)  	/* second op is empty? */tostring (L' top - 2);  /* result is first op (as string) */else {  	/* at least two string values; get as many as possible */uint tl = tsvalue (top - 1).len;  	CharPtr buffer;  	int i;  	/* collect total length */for (n = 1; n < total && (tostring (L' top - n - 1) != 0); n++) {  		uint l = tsvalue (top - n - 1).len;  		if (l >= MAX_SIZET - tl)  			luaG_runerror (L' "string length overflow");  		tl += l;  	}  	buffer = luaZ_openspace (L' G (L).buff' tl);  	if (mybuff == null)  		mybuff = buffer;  	tl = 0;  	for (i = n; i > 0; i--) {  		/* concat all strings */uint l = tsvalue (top - i).len;  		memcpy (buffer.chars' (int)tl' svalue (top - i).chars' (int)l);  		tl += l;  	}  	setsvalue2s (L' top - n' luaS_newlstr (L' buffer' tl));  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaV_concat,The following statement contains a magic number: if (call_binTM (L' top - 2' top - 1' top - 2' TMS.TM_CONCAT) == 0)  	luaG_concaterror (L' top - 2' top - 1);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaV_concat,The following statement contains a magic number: if (call_binTM (L' top - 2' top - 1' top - 2' TMS.TM_CONCAT) == 0)  	luaG_concaterror (L' top - 2' top - 1);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaV_concat,The following statement contains a magic number: if (call_binTM (L' top - 2' top - 1' top - 2' TMS.TM_CONCAT) == 0)  	luaG_concaterror (L' top - 2' top - 1);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaV_concat,The following statement contains a magic number: luaG_concaterror (L' top - 2' top - 1);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaV_concat,The following statement contains a magic number: if (tsvalue (top - 1).len == 0)  	/* second op is empty? */tostring (L' top - 2);  /* result is first op (as string) */else {  	/* at least two string values; get as many as possible */uint tl = tsvalue (top - 1).len;  	CharPtr buffer;  	int i;  	/* collect total length */for (n = 1; n < total && (tostring (L' top - n - 1) != 0); n++) {  		uint l = tsvalue (top - n - 1).len;  		if (l >= MAX_SIZET - tl)  			luaG_runerror (L' "string length overflow");  		tl += l;  	}  	buffer = luaZ_openspace (L' G (L).buff' tl);  	if (mybuff == null)  		mybuff = buffer;  	tl = 0;  	for (i = n; i > 0; i--) {  		/* concat all strings */uint l = tsvalue (top - i).len;  		memcpy (buffer.chars' (int)tl' svalue (top - i).chars' (int)l);  		tl += l;  	}  	setsvalue2s (L' top - n' luaS_newlstr (L' buffer' tl));  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaV_concat,The following statement contains a magic number: tostring (L' top - 2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaV_execute,The following statement contains a magic number: for (; ;) {  	/*const*/Instruction i = InstructionPtr.inc (ref pc) [0];  	StkId ra;  	if (((L.hookmask & (LUA_MASKLINE | LUA_MASKCOUNT)) != 0) && (((--L.hookcount) == 0) || ((L.hookmask & LUA_MASKLINE) != 0))) {  		traceexec (L' pc);  		if (L.status == LUA_YIELD) {  			/* did hook yield? */L.savedpc = new InstructionPtr (pc.codes' pc.pc - 1);  			return;  		}  		base_ = L.base_;  	}  	/* warning!! several calls may realloc the stack and invalidate `ra' */ra = RA (L' base_' i);  	lua_assert (base_ == L.base_ && L.base_ == L.ci.base_);  	lua_assert (base_ <= L.top && ((L.top - L.stack) <= L.stacksize));  	lua_assert (L.top == L.ci.top || (luaG_checkopenop (i) != 0));  	//Dump(pc.pc' i);			  	switch (GET_OPCODE (i)) {  	case OpCode.OP_MOVE: {  		setobjs2s (L' ra' RB (L' base_' i));  		continue;  	}  	case OpCode.OP_LOADK: {  		setobj2s (L' ra' KBx (L' i' k));  		continue;  	}  	case OpCode.OP_LOADBOOL: {  		setbvalue (ra' GETARG_B (i));  		if (GETARG_C (i) != 0)  			InstructionPtr.inc (ref pc);  		/* skip next instruction (if C) */continue;  	}  	case OpCode.OP_LOADNIL: {  		TValue rb = RB (L' base_' i);  		do {  			setnilvalue (StkId.dec (ref rb));  		} while (rb >= ra);  		continue;  	}  	case OpCode.OP_GETUPVAL: {  		int b = GETARG_B (i);  		setobj2s (L' ra' cl.upvals [b].v);  		continue;  	}  	case OpCode.OP_GETGLOBAL: {  		TValue g = new TValue ();  		TValue rb = KBx (L' i' k);  		sethvalue (L' g' cl.env);  		lua_assert (ttisstring (rb));  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaV_gettable (L' g' rb' ra);  		base_ = L.base_;  		//);  		L.savedpc = InstructionPtr.Assign (pc);  		continue;  	}  	case OpCode.OP_GETTABLE: {  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaV_gettable (L' RB (L' base_' i)' RKC (L' base_' i' k)' ra);  		base_ = L.base_;  		//);  		L.savedpc = InstructionPtr.Assign (pc);  		continue;  	}  	case OpCode.OP_SETGLOBAL: {  		TValue g = new TValue ();  		sethvalue (L' g' cl.env);  		lua_assert (ttisstring (KBx (L' i' k)));  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaV_settable (L' g' KBx (L' i' k)' ra);  		base_ = L.base_;  		//);  		L.savedpc = InstructionPtr.Assign (pc);  		continue;  	}  	case OpCode.OP_SETUPVAL: {  		UpVal uv = cl.upvals [GETARG_B (i)];  		setobj (L' uv.v' ra);  		luaC_barrier (L' uv' ra);  		continue;  	}  	case OpCode.OP_SETTABLE: {  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaV_settable (L' ra' RKB (L' base_' i' k)' RKC (L' base_' i' k));  		base_ = L.base_;  		//);  		L.savedpc = InstructionPtr.Assign (pc);  		continue;  	}  	case OpCode.OP_NEWTABLE: {  		int b = GETARG_B (i);  		int c = GETARG_C (i);  		sethvalue (L' ra' luaH_new (L' luaO_fb2int (b)' luaO_fb2int (c)));  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaC_checkGC (L);  		base_ = L.base_;  		//);  		L.savedpc = InstructionPtr.Assign (pc);  		continue;  	}  	case OpCode.OP_SELF: {  		StkId rb = RB (L' base_' i);  		setobjs2s (L' ra + 1' rb);  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaV_gettable (L' rb' RKC (L' base_' i' k)' ra);  		base_ = L.base_;  		//);  		L.savedpc = InstructionPtr.Assign (pc);  		continue;  	}  	case OpCode.OP_ADD: {  		arith_op (L' luai_numadd' TMS.TM_ADD' base_' i' k' ra' pc);  		continue;  	}  	case OpCode.OP_SUB: {  		arith_op (L' luai_numsub' TMS.TM_SUB' base_' i' k' ra' pc);  		continue;  	}  	case OpCode.OP_MUL: {  		arith_op (L' luai_nummul' TMS.TM_MUL' base_' i' k' ra' pc);  		continue;  	}  	case OpCode.OP_DIV: {  		arith_op (L' luai_numdiv' TMS.TM_DIV' base_' i' k' ra' pc);  		continue;  	}  	case OpCode.OP_MOD: {  		arith_op (L' luai_nummod' TMS.TM_MOD' base_' i' k' ra' pc);  		continue;  	}  	case OpCode.OP_POW: {  		arith_op (L' luai_numpow' TMS.TM_POW' base_' i' k' ra' pc);  		continue;  	}  	case OpCode.OP_UNM: {  		TValue rb = RB (L' base_' i);  		if (ttisnumber (rb)) {  			lua_Number nb = nvalue (rb);  			setnvalue (ra' luai_numunm (nb));  		} else {  			//Protect(  			L.savedpc = InstructionPtr.Assign (pc);  			Arith (L' ra' rb' rb' TMS.TM_UNM);  			base_ = L.base_;  			//);  			L.savedpc = InstructionPtr.Assign (pc);  		}  		continue;  	}  	case OpCode.OP_NOT: {  		int res = l_isfalse (RB (L' base_' i)) == 0 ? 0 : 1;  		/* next assignment may change this value */setbvalue (ra' res);  		continue;  	}  	case OpCode.OP_LEN: {  		TValue rb = RB (L' base_' i);  		switch (ttype (rb)) {  		case LUA_TTABLE: {  			setnvalue (ra' (lua_Number)luaH_getn (hvalue (rb)));  			break;  		}  		case LUA_TSTRING: {  			setnvalue (ra' (lua_Number)tsvalue (rb).len);  			break;  		}  		default: {  			/* try metamethod *///Protect(  			L.savedpc = InstructionPtr.Assign (pc);  			if (call_binTM (L' rb' luaO_nilobject' ra' TMS.TM_LEN) == 0)  				luaG_typeerror (L' rb' "get length of");  			base_ = L.base_;  			//)  			break;  		}  		}  		continue;  	}  	case OpCode.OP_CONCAT: {  		int b = GETARG_B (i);  		int c = GETARG_C (i);  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaV_concat (L' c - b + 1' c);  		luaC_checkGC (L);  		base_ = L.base_;  		//);  		setobjs2s (L' RA (L' base_' i)' base_ + b);  		continue;  	}  	case OpCode.OP_JMP: {  		dojump (L' pc' GETARG_sBx (i));  		continue;  	}  	case OpCode.OP_EQ: {  		TValue rb = RKB (L' base_' i' k);  		TValue rc = RKC (L' base_' i' k);  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		if (equalobj (L' rb' rc) == GETARG_A (i))  			dojump (L' pc' GETARG_sBx (pc [0]));  		base_ = L.base_;  		//);  		InstructionPtr.inc (ref pc);  		continue;  	}  	case OpCode.OP_LT: {  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		if (luaV_lessthan (L' RKB (L' base_' i' k)' RKC (L' base_' i' k)) == GETARG_A (i))  			dojump (L' pc' GETARG_sBx (pc [0]));  		base_ = L.base_;  		//);  		InstructionPtr.inc (ref pc);  		continue;  	}  	case OpCode.OP_LE: {  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		if (lessequal (L' RKB (L' base_' i' k)' RKC (L' base_' i' k)) == GETARG_A (i))  			dojump (L' pc' GETARG_sBx (pc [0]));  		base_ = L.base_;  		//);  		InstructionPtr.inc (ref pc);  		continue;  	}  	case OpCode.OP_TEST: {  		if (l_isfalse (ra) != GETARG_C (i))  			dojump (L' pc' GETARG_sBx (pc [0]));  		InstructionPtr.inc (ref pc);  		continue;  	}  	case OpCode.OP_TESTSET: {  		TValue rb = RB (L' base_' i);  		if (l_isfalse (rb) != GETARG_C (i)) {  			setobjs2s (L' ra' rb);  			dojump (L' pc' GETARG_sBx (pc [0]));  		}  		InstructionPtr.inc (ref pc);  		continue;  	}  	case OpCode.OP_CALL: {  		int b = GETARG_B (i);  		int nresults = GETARG_C (i) - 1;  		if (b != 0)  			L.top = ra + b;  		/* else previous instruction set top */L.savedpc = InstructionPtr.Assign (pc);  		switch (luaD_precall (L' ra' nresults)) {  		case PCRLUA: {  			nexeccalls++;  			goto reentry;  			/* restart luaV_execute over new Lua function */}  		case PCRC: {  			/* it was a C function (`precall' called it); adjust results */if (nresults >= 0)  				L.top = L.ci.top;  			base_ = L.base_;  			continue;  		}  		default: {  			return;  			/* yield */}  		}  	}  	case OpCode.OP_TAILCALL: {  		int b = GETARG_B (i);  		if (b != 0)  			L.top = ra + b;  		/* else previous instruction set top */L.savedpc = InstructionPtr.Assign (pc);  		lua_assert (GETARG_C (i) - 1 == LUA_MULTRET);  		switch (luaD_precall (L' ra' LUA_MULTRET)) {  		case PCRLUA: {  			/* tail call: put new frame in place of previous one */CallInfo ci = L.ci - 1;  			/* previous frame */int aux;  			StkId func = ci.func;  			StkId pfunc = (ci + 1).func;  			/* previous function index */if (L.openupval != null)  				luaF_close (L' ci.base_);  			L.base_ = ci.base_ = ci.func + (ci [1].base_ - pfunc);  			for (aux = 0; pfunc + aux < L.top; aux++)  				/* move frame down */setobjs2s (L' func + aux' pfunc + aux);  			ci.top = L.top = func + aux;  			/* correct top */lua_assert (L.top == L.base_ + clvalue (func).l.p.maxstacksize);  			ci.savedpc = InstructionPtr.Assign (L.savedpc);  			ci.tailcalls++;  			/* one more call lost */CallInfo.dec (ref L.ci);  			/* remove new frame */goto reentry;  		}  		case PCRC: {  			/* it was a C function (`precall' called it) */base_ = L.base_;  			continue;  		}  		default: {  			return;  			/* yield */}  		}  	}  	case OpCode.OP_RETURN: {  		int b = GETARG_B (i);  		if (b != 0)  			L.top = ra + b - 1;  		if (L.openupval != null)  			luaF_close (L' base_);  		L.savedpc = InstructionPtr.Assign (pc);  		b = luaD_poscall (L' ra);  		if (--nexeccalls == 0)  			/* was previous function running `here'? */return;  		/* no: return */else {  			/* yes: continue its execution */if (b != 0)  				L.top = L.ci.top;  			lua_assert (isLua (L.ci));  			lua_assert (GET_OPCODE (L.ci.savedpc [-1]) == OpCode.OP_CALL);  			goto reentry;  		}  	}  	case OpCode.OP_FORLOOP: {  		lua_Number step = nvalue (ra + 2);  		lua_Number idx = luai_numadd (nvalue (ra)' step);  		/* increment index */lua_Number limit = nvalue (ra + 1);  		if (luai_numlt (0' step) ? luai_numle (idx' limit) : luai_numle (limit' idx)) {  			dojump (L' pc' GETARG_sBx (i));  			/* jump back */setnvalue (ra' idx);  			/* update internal index... */setnvalue (ra + 3' idx);  			/* ...and external index */}  		continue;  	}  	case OpCode.OP_FORPREP: {  		TValue init = ra;  		TValue plimit = ra + 1;  		TValue pstep = ra + 2;  		L.savedpc = InstructionPtr.Assign (pc);  		/* next steps may throw errors */if (tonumber (ref init' ra) == 0)  			luaG_runerror (L' LUA_QL ("for") + " initial value must be a number");  		else if (tonumber (ref plimit' ra + 1) == 0)  			luaG_runerror (L' LUA_QL ("for") + " limit must be a number");  		else if (tonumber (ref pstep' ra + 2) == 0)  			luaG_runerror (L' LUA_QL ("for") + " step must be a number");  		setnvalue (ra' luai_numsub (nvalue (ra)' nvalue (pstep)));  		dojump (L' pc' GETARG_sBx (i));  		continue;  	}  	case OpCode.OP_TFORLOOP: {  		StkId cb = ra + 3;  		/* call base */setobjs2s (L' cb + 2' ra + 2);  		setobjs2s (L' cb + 1' ra + 1);  		setobjs2s (L' cb' ra);  		L.top = cb + 3;  		/* func. + 2 args (state and index) *///Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaD_call (L' cb' GETARG_C (i));  		base_ = L.base_;  		//);  		L.top = L.ci.top;  		cb = RA (L' base_' i) + 3;  		/* previous call may change the stack */if (!ttisnil (cb)) {  			/* continue loop? */setobjs2s (L' cb - 1' cb);  			/* save control variable */dojump (L' pc' GETARG_sBx (pc [0]));  			/* jump back */}  		InstructionPtr.inc (ref pc);  		continue;  	}  	case OpCode.OP_SETLIST: {  		int n = GETARG_B (i);  		int c = GETARG_C (i);  		int last;  		Table h;  		if (n == 0) {  			n = cast_int (L.top - ra) - 1;  			L.top = L.ci.top;  		}  		if (c == 0) {  			c = cast_int (pc [0]);  			InstructionPtr.inc (ref pc);  		}  		runtime_check (L' ttistable (ra));  		h = hvalue (ra);  		last = ((c - 1) * LFIELDS_PER_FLUSH) + n;  		if (last > h.sizearray)  			/* needs more space? */luaH_resizearray (L' h' last);  		/* pre-alloc it at once */for (; n > 0; n--) {  			TValue val = ra + n;  			setobj2t (L' luaH_setnum (L' h' last--)' val);  			luaC_barriert (L' h' val);  		}  		continue;  	}  	case OpCode.OP_CLOSE: {  		luaF_close (L' ra);  		continue;  	}  	case OpCode.OP_CLOSURE: {  		Proto p;  		Closure ncl;  		int nup' j;  		p = cl.p.p [GETARG_Bx (i)];  		nup = p.nups;  		ncl = luaF_newLclosure (L' nup' cl.env);  		ncl.l.p = p;  		for (j = 0; j < nup; j++' InstructionPtr.inc (ref pc)) {  			if (GET_OPCODE (pc [0]) == OpCode.OP_GETUPVAL)  				ncl.l.upvals [j] = cl.upvals [GETARG_B (pc [0])];  			else {  				lua_assert (GET_OPCODE (pc [0]) == OpCode.OP_MOVE);  				ncl.l.upvals [j] = luaF_findupval (L' base_ + GETARG_B (pc [0]));  			}  		}  		setclvalue (L' ra' ncl);  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaC_checkGC (L);  		base_ = L.base_;  		//);  		continue;  	}  	case OpCode.OP_VARARG: {  		int b = GETARG_B (i) - 1;  		int j;  		CallInfo ci = L.ci;  		int n = cast_int (ci.base_ - ci.func) - cl.p.numparams - 1;  		if (b == LUA_MULTRET) {  			//Protect(  			L.savedpc = InstructionPtr.Assign (pc);  			luaD_checkstack (L' n);  			base_ = L.base_;  			//);  			ra = RA (L' base_' i);  			/* previous call may change the stack */b = n;  			L.top = ra + n;  		}  		for (j = 0; j < b; j++) {  			if (j < n) {  				setobjs2s (L' ra + j' ci.base_ - n + j);  			} else {  				setnilvalue (ra + j);  			}  		}  		continue;  	}  	}  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaV_execute,The following statement contains a magic number: for (; ;) {  	/*const*/Instruction i = InstructionPtr.inc (ref pc) [0];  	StkId ra;  	if (((L.hookmask & (LUA_MASKLINE | LUA_MASKCOUNT)) != 0) && (((--L.hookcount) == 0) || ((L.hookmask & LUA_MASKLINE) != 0))) {  		traceexec (L' pc);  		if (L.status == LUA_YIELD) {  			/* did hook yield? */L.savedpc = new InstructionPtr (pc.codes' pc.pc - 1);  			return;  		}  		base_ = L.base_;  	}  	/* warning!! several calls may realloc the stack and invalidate `ra' */ra = RA (L' base_' i);  	lua_assert (base_ == L.base_ && L.base_ == L.ci.base_);  	lua_assert (base_ <= L.top && ((L.top - L.stack) <= L.stacksize));  	lua_assert (L.top == L.ci.top || (luaG_checkopenop (i) != 0));  	//Dump(pc.pc' i);			  	switch (GET_OPCODE (i)) {  	case OpCode.OP_MOVE: {  		setobjs2s (L' ra' RB (L' base_' i));  		continue;  	}  	case OpCode.OP_LOADK: {  		setobj2s (L' ra' KBx (L' i' k));  		continue;  	}  	case OpCode.OP_LOADBOOL: {  		setbvalue (ra' GETARG_B (i));  		if (GETARG_C (i) != 0)  			InstructionPtr.inc (ref pc);  		/* skip next instruction (if C) */continue;  	}  	case OpCode.OP_LOADNIL: {  		TValue rb = RB (L' base_' i);  		do {  			setnilvalue (StkId.dec (ref rb));  		} while (rb >= ra);  		continue;  	}  	case OpCode.OP_GETUPVAL: {  		int b = GETARG_B (i);  		setobj2s (L' ra' cl.upvals [b].v);  		continue;  	}  	case OpCode.OP_GETGLOBAL: {  		TValue g = new TValue ();  		TValue rb = KBx (L' i' k);  		sethvalue (L' g' cl.env);  		lua_assert (ttisstring (rb));  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaV_gettable (L' g' rb' ra);  		base_ = L.base_;  		//);  		L.savedpc = InstructionPtr.Assign (pc);  		continue;  	}  	case OpCode.OP_GETTABLE: {  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaV_gettable (L' RB (L' base_' i)' RKC (L' base_' i' k)' ra);  		base_ = L.base_;  		//);  		L.savedpc = InstructionPtr.Assign (pc);  		continue;  	}  	case OpCode.OP_SETGLOBAL: {  		TValue g = new TValue ();  		sethvalue (L' g' cl.env);  		lua_assert (ttisstring (KBx (L' i' k)));  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaV_settable (L' g' KBx (L' i' k)' ra);  		base_ = L.base_;  		//);  		L.savedpc = InstructionPtr.Assign (pc);  		continue;  	}  	case OpCode.OP_SETUPVAL: {  		UpVal uv = cl.upvals [GETARG_B (i)];  		setobj (L' uv.v' ra);  		luaC_barrier (L' uv' ra);  		continue;  	}  	case OpCode.OP_SETTABLE: {  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaV_settable (L' ra' RKB (L' base_' i' k)' RKC (L' base_' i' k));  		base_ = L.base_;  		//);  		L.savedpc = InstructionPtr.Assign (pc);  		continue;  	}  	case OpCode.OP_NEWTABLE: {  		int b = GETARG_B (i);  		int c = GETARG_C (i);  		sethvalue (L' ra' luaH_new (L' luaO_fb2int (b)' luaO_fb2int (c)));  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaC_checkGC (L);  		base_ = L.base_;  		//);  		L.savedpc = InstructionPtr.Assign (pc);  		continue;  	}  	case OpCode.OP_SELF: {  		StkId rb = RB (L' base_' i);  		setobjs2s (L' ra + 1' rb);  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaV_gettable (L' rb' RKC (L' base_' i' k)' ra);  		base_ = L.base_;  		//);  		L.savedpc = InstructionPtr.Assign (pc);  		continue;  	}  	case OpCode.OP_ADD: {  		arith_op (L' luai_numadd' TMS.TM_ADD' base_' i' k' ra' pc);  		continue;  	}  	case OpCode.OP_SUB: {  		arith_op (L' luai_numsub' TMS.TM_SUB' base_' i' k' ra' pc);  		continue;  	}  	case OpCode.OP_MUL: {  		arith_op (L' luai_nummul' TMS.TM_MUL' base_' i' k' ra' pc);  		continue;  	}  	case OpCode.OP_DIV: {  		arith_op (L' luai_numdiv' TMS.TM_DIV' base_' i' k' ra' pc);  		continue;  	}  	case OpCode.OP_MOD: {  		arith_op (L' luai_nummod' TMS.TM_MOD' base_' i' k' ra' pc);  		continue;  	}  	case OpCode.OP_POW: {  		arith_op (L' luai_numpow' TMS.TM_POW' base_' i' k' ra' pc);  		continue;  	}  	case OpCode.OP_UNM: {  		TValue rb = RB (L' base_' i);  		if (ttisnumber (rb)) {  			lua_Number nb = nvalue (rb);  			setnvalue (ra' luai_numunm (nb));  		} else {  			//Protect(  			L.savedpc = InstructionPtr.Assign (pc);  			Arith (L' ra' rb' rb' TMS.TM_UNM);  			base_ = L.base_;  			//);  			L.savedpc = InstructionPtr.Assign (pc);  		}  		continue;  	}  	case OpCode.OP_NOT: {  		int res = l_isfalse (RB (L' base_' i)) == 0 ? 0 : 1;  		/* next assignment may change this value */setbvalue (ra' res);  		continue;  	}  	case OpCode.OP_LEN: {  		TValue rb = RB (L' base_' i);  		switch (ttype (rb)) {  		case LUA_TTABLE: {  			setnvalue (ra' (lua_Number)luaH_getn (hvalue (rb)));  			break;  		}  		case LUA_TSTRING: {  			setnvalue (ra' (lua_Number)tsvalue (rb).len);  			break;  		}  		default: {  			/* try metamethod *///Protect(  			L.savedpc = InstructionPtr.Assign (pc);  			if (call_binTM (L' rb' luaO_nilobject' ra' TMS.TM_LEN) == 0)  				luaG_typeerror (L' rb' "get length of");  			base_ = L.base_;  			//)  			break;  		}  		}  		continue;  	}  	case OpCode.OP_CONCAT: {  		int b = GETARG_B (i);  		int c = GETARG_C (i);  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaV_concat (L' c - b + 1' c);  		luaC_checkGC (L);  		base_ = L.base_;  		//);  		setobjs2s (L' RA (L' base_' i)' base_ + b);  		continue;  	}  	case OpCode.OP_JMP: {  		dojump (L' pc' GETARG_sBx (i));  		continue;  	}  	case OpCode.OP_EQ: {  		TValue rb = RKB (L' base_' i' k);  		TValue rc = RKC (L' base_' i' k);  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		if (equalobj (L' rb' rc) == GETARG_A (i))  			dojump (L' pc' GETARG_sBx (pc [0]));  		base_ = L.base_;  		//);  		InstructionPtr.inc (ref pc);  		continue;  	}  	case OpCode.OP_LT: {  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		if (luaV_lessthan (L' RKB (L' base_' i' k)' RKC (L' base_' i' k)) == GETARG_A (i))  			dojump (L' pc' GETARG_sBx (pc [0]));  		base_ = L.base_;  		//);  		InstructionPtr.inc (ref pc);  		continue;  	}  	case OpCode.OP_LE: {  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		if (lessequal (L' RKB (L' base_' i' k)' RKC (L' base_' i' k)) == GETARG_A (i))  			dojump (L' pc' GETARG_sBx (pc [0]));  		base_ = L.base_;  		//);  		InstructionPtr.inc (ref pc);  		continue;  	}  	case OpCode.OP_TEST: {  		if (l_isfalse (ra) != GETARG_C (i))  			dojump (L' pc' GETARG_sBx (pc [0]));  		InstructionPtr.inc (ref pc);  		continue;  	}  	case OpCode.OP_TESTSET: {  		TValue rb = RB (L' base_' i);  		if (l_isfalse (rb) != GETARG_C (i)) {  			setobjs2s (L' ra' rb);  			dojump (L' pc' GETARG_sBx (pc [0]));  		}  		InstructionPtr.inc (ref pc);  		continue;  	}  	case OpCode.OP_CALL: {  		int b = GETARG_B (i);  		int nresults = GETARG_C (i) - 1;  		if (b != 0)  			L.top = ra + b;  		/* else previous instruction set top */L.savedpc = InstructionPtr.Assign (pc);  		switch (luaD_precall (L' ra' nresults)) {  		case PCRLUA: {  			nexeccalls++;  			goto reentry;  			/* restart luaV_execute over new Lua function */}  		case PCRC: {  			/* it was a C function (`precall' called it); adjust results */if (nresults >= 0)  				L.top = L.ci.top;  			base_ = L.base_;  			continue;  		}  		default: {  			return;  			/* yield */}  		}  	}  	case OpCode.OP_TAILCALL: {  		int b = GETARG_B (i);  		if (b != 0)  			L.top = ra + b;  		/* else previous instruction set top */L.savedpc = InstructionPtr.Assign (pc);  		lua_assert (GETARG_C (i) - 1 == LUA_MULTRET);  		switch (luaD_precall (L' ra' LUA_MULTRET)) {  		case PCRLUA: {  			/* tail call: put new frame in place of previous one */CallInfo ci = L.ci - 1;  			/* previous frame */int aux;  			StkId func = ci.func;  			StkId pfunc = (ci + 1).func;  			/* previous function index */if (L.openupval != null)  				luaF_close (L' ci.base_);  			L.base_ = ci.base_ = ci.func + (ci [1].base_ - pfunc);  			for (aux = 0; pfunc + aux < L.top; aux++)  				/* move frame down */setobjs2s (L' func + aux' pfunc + aux);  			ci.top = L.top = func + aux;  			/* correct top */lua_assert (L.top == L.base_ + clvalue (func).l.p.maxstacksize);  			ci.savedpc = InstructionPtr.Assign (L.savedpc);  			ci.tailcalls++;  			/* one more call lost */CallInfo.dec (ref L.ci);  			/* remove new frame */goto reentry;  		}  		case PCRC: {  			/* it was a C function (`precall' called it) */base_ = L.base_;  			continue;  		}  		default: {  			return;  			/* yield */}  		}  	}  	case OpCode.OP_RETURN: {  		int b = GETARG_B (i);  		if (b != 0)  			L.top = ra + b - 1;  		if (L.openupval != null)  			luaF_close (L' base_);  		L.savedpc = InstructionPtr.Assign (pc);  		b = luaD_poscall (L' ra);  		if (--nexeccalls == 0)  			/* was previous function running `here'? */return;  		/* no: return */else {  			/* yes: continue its execution */if (b != 0)  				L.top = L.ci.top;  			lua_assert (isLua (L.ci));  			lua_assert (GET_OPCODE (L.ci.savedpc [-1]) == OpCode.OP_CALL);  			goto reentry;  		}  	}  	case OpCode.OP_FORLOOP: {  		lua_Number step = nvalue (ra + 2);  		lua_Number idx = luai_numadd (nvalue (ra)' step);  		/* increment index */lua_Number limit = nvalue (ra + 1);  		if (luai_numlt (0' step) ? luai_numle (idx' limit) : luai_numle (limit' idx)) {  			dojump (L' pc' GETARG_sBx (i));  			/* jump back */setnvalue (ra' idx);  			/* update internal index... */setnvalue (ra + 3' idx);  			/* ...and external index */}  		continue;  	}  	case OpCode.OP_FORPREP: {  		TValue init = ra;  		TValue plimit = ra + 1;  		TValue pstep = ra + 2;  		L.savedpc = InstructionPtr.Assign (pc);  		/* next steps may throw errors */if (tonumber (ref init' ra) == 0)  			luaG_runerror (L' LUA_QL ("for") + " initial value must be a number");  		else if (tonumber (ref plimit' ra + 1) == 0)  			luaG_runerror (L' LUA_QL ("for") + " limit must be a number");  		else if (tonumber (ref pstep' ra + 2) == 0)  			luaG_runerror (L' LUA_QL ("for") + " step must be a number");  		setnvalue (ra' luai_numsub (nvalue (ra)' nvalue (pstep)));  		dojump (L' pc' GETARG_sBx (i));  		continue;  	}  	case OpCode.OP_TFORLOOP: {  		StkId cb = ra + 3;  		/* call base */setobjs2s (L' cb + 2' ra + 2);  		setobjs2s (L' cb + 1' ra + 1);  		setobjs2s (L' cb' ra);  		L.top = cb + 3;  		/* func. + 2 args (state and index) *///Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaD_call (L' cb' GETARG_C (i));  		base_ = L.base_;  		//);  		L.top = L.ci.top;  		cb = RA (L' base_' i) + 3;  		/* previous call may change the stack */if (!ttisnil (cb)) {  			/* continue loop? */setobjs2s (L' cb - 1' cb);  			/* save control variable */dojump (L' pc' GETARG_sBx (pc [0]));  			/* jump back */}  		InstructionPtr.inc (ref pc);  		continue;  	}  	case OpCode.OP_SETLIST: {  		int n = GETARG_B (i);  		int c = GETARG_C (i);  		int last;  		Table h;  		if (n == 0) {  			n = cast_int (L.top - ra) - 1;  			L.top = L.ci.top;  		}  		if (c == 0) {  			c = cast_int (pc [0]);  			InstructionPtr.inc (ref pc);  		}  		runtime_check (L' ttistable (ra));  		h = hvalue (ra);  		last = ((c - 1) * LFIELDS_PER_FLUSH) + n;  		if (last > h.sizearray)  			/* needs more space? */luaH_resizearray (L' h' last);  		/* pre-alloc it at once */for (; n > 0; n--) {  			TValue val = ra + n;  			setobj2t (L' luaH_setnum (L' h' last--)' val);  			luaC_barriert (L' h' val);  		}  		continue;  	}  	case OpCode.OP_CLOSE: {  		luaF_close (L' ra);  		continue;  	}  	case OpCode.OP_CLOSURE: {  		Proto p;  		Closure ncl;  		int nup' j;  		p = cl.p.p [GETARG_Bx (i)];  		nup = p.nups;  		ncl = luaF_newLclosure (L' nup' cl.env);  		ncl.l.p = p;  		for (j = 0; j < nup; j++' InstructionPtr.inc (ref pc)) {  			if (GET_OPCODE (pc [0]) == OpCode.OP_GETUPVAL)  				ncl.l.upvals [j] = cl.upvals [GETARG_B (pc [0])];  			else {  				lua_assert (GET_OPCODE (pc [0]) == OpCode.OP_MOVE);  				ncl.l.upvals [j] = luaF_findupval (L' base_ + GETARG_B (pc [0]));  			}  		}  		setclvalue (L' ra' ncl);  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaC_checkGC (L);  		base_ = L.base_;  		//);  		continue;  	}  	case OpCode.OP_VARARG: {  		int b = GETARG_B (i) - 1;  		int j;  		CallInfo ci = L.ci;  		int n = cast_int (ci.base_ - ci.func) - cl.p.numparams - 1;  		if (b == LUA_MULTRET) {  			//Protect(  			L.savedpc = InstructionPtr.Assign (pc);  			luaD_checkstack (L' n);  			base_ = L.base_;  			//);  			ra = RA (L' base_' i);  			/* previous call may change the stack */b = n;  			L.top = ra + n;  		}  		for (j = 0; j < b; j++) {  			if (j < n) {  				setobjs2s (L' ra + j' ci.base_ - n + j);  			} else {  				setnilvalue (ra + j);  			}  		}  		continue;  	}  	}  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaV_execute,The following statement contains a magic number: for (; ;) {  	/*const*/Instruction i = InstructionPtr.inc (ref pc) [0];  	StkId ra;  	if (((L.hookmask & (LUA_MASKLINE | LUA_MASKCOUNT)) != 0) && (((--L.hookcount) == 0) || ((L.hookmask & LUA_MASKLINE) != 0))) {  		traceexec (L' pc);  		if (L.status == LUA_YIELD) {  			/* did hook yield? */L.savedpc = new InstructionPtr (pc.codes' pc.pc - 1);  			return;  		}  		base_ = L.base_;  	}  	/* warning!! several calls may realloc the stack and invalidate `ra' */ra = RA (L' base_' i);  	lua_assert (base_ == L.base_ && L.base_ == L.ci.base_);  	lua_assert (base_ <= L.top && ((L.top - L.stack) <= L.stacksize));  	lua_assert (L.top == L.ci.top || (luaG_checkopenop (i) != 0));  	//Dump(pc.pc' i);			  	switch (GET_OPCODE (i)) {  	case OpCode.OP_MOVE: {  		setobjs2s (L' ra' RB (L' base_' i));  		continue;  	}  	case OpCode.OP_LOADK: {  		setobj2s (L' ra' KBx (L' i' k));  		continue;  	}  	case OpCode.OP_LOADBOOL: {  		setbvalue (ra' GETARG_B (i));  		if (GETARG_C (i) != 0)  			InstructionPtr.inc (ref pc);  		/* skip next instruction (if C) */continue;  	}  	case OpCode.OP_LOADNIL: {  		TValue rb = RB (L' base_' i);  		do {  			setnilvalue (StkId.dec (ref rb));  		} while (rb >= ra);  		continue;  	}  	case OpCode.OP_GETUPVAL: {  		int b = GETARG_B (i);  		setobj2s (L' ra' cl.upvals [b].v);  		continue;  	}  	case OpCode.OP_GETGLOBAL: {  		TValue g = new TValue ();  		TValue rb = KBx (L' i' k);  		sethvalue (L' g' cl.env);  		lua_assert (ttisstring (rb));  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaV_gettable (L' g' rb' ra);  		base_ = L.base_;  		//);  		L.savedpc = InstructionPtr.Assign (pc);  		continue;  	}  	case OpCode.OP_GETTABLE: {  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaV_gettable (L' RB (L' base_' i)' RKC (L' base_' i' k)' ra);  		base_ = L.base_;  		//);  		L.savedpc = InstructionPtr.Assign (pc);  		continue;  	}  	case OpCode.OP_SETGLOBAL: {  		TValue g = new TValue ();  		sethvalue (L' g' cl.env);  		lua_assert (ttisstring (KBx (L' i' k)));  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaV_settable (L' g' KBx (L' i' k)' ra);  		base_ = L.base_;  		//);  		L.savedpc = InstructionPtr.Assign (pc);  		continue;  	}  	case OpCode.OP_SETUPVAL: {  		UpVal uv = cl.upvals [GETARG_B (i)];  		setobj (L' uv.v' ra);  		luaC_barrier (L' uv' ra);  		continue;  	}  	case OpCode.OP_SETTABLE: {  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaV_settable (L' ra' RKB (L' base_' i' k)' RKC (L' base_' i' k));  		base_ = L.base_;  		//);  		L.savedpc = InstructionPtr.Assign (pc);  		continue;  	}  	case OpCode.OP_NEWTABLE: {  		int b = GETARG_B (i);  		int c = GETARG_C (i);  		sethvalue (L' ra' luaH_new (L' luaO_fb2int (b)' luaO_fb2int (c)));  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaC_checkGC (L);  		base_ = L.base_;  		//);  		L.savedpc = InstructionPtr.Assign (pc);  		continue;  	}  	case OpCode.OP_SELF: {  		StkId rb = RB (L' base_' i);  		setobjs2s (L' ra + 1' rb);  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaV_gettable (L' rb' RKC (L' base_' i' k)' ra);  		base_ = L.base_;  		//);  		L.savedpc = InstructionPtr.Assign (pc);  		continue;  	}  	case OpCode.OP_ADD: {  		arith_op (L' luai_numadd' TMS.TM_ADD' base_' i' k' ra' pc);  		continue;  	}  	case OpCode.OP_SUB: {  		arith_op (L' luai_numsub' TMS.TM_SUB' base_' i' k' ra' pc);  		continue;  	}  	case OpCode.OP_MUL: {  		arith_op (L' luai_nummul' TMS.TM_MUL' base_' i' k' ra' pc);  		continue;  	}  	case OpCode.OP_DIV: {  		arith_op (L' luai_numdiv' TMS.TM_DIV' base_' i' k' ra' pc);  		continue;  	}  	case OpCode.OP_MOD: {  		arith_op (L' luai_nummod' TMS.TM_MOD' base_' i' k' ra' pc);  		continue;  	}  	case OpCode.OP_POW: {  		arith_op (L' luai_numpow' TMS.TM_POW' base_' i' k' ra' pc);  		continue;  	}  	case OpCode.OP_UNM: {  		TValue rb = RB (L' base_' i);  		if (ttisnumber (rb)) {  			lua_Number nb = nvalue (rb);  			setnvalue (ra' luai_numunm (nb));  		} else {  			//Protect(  			L.savedpc = InstructionPtr.Assign (pc);  			Arith (L' ra' rb' rb' TMS.TM_UNM);  			base_ = L.base_;  			//);  			L.savedpc = InstructionPtr.Assign (pc);  		}  		continue;  	}  	case OpCode.OP_NOT: {  		int res = l_isfalse (RB (L' base_' i)) == 0 ? 0 : 1;  		/* next assignment may change this value */setbvalue (ra' res);  		continue;  	}  	case OpCode.OP_LEN: {  		TValue rb = RB (L' base_' i);  		switch (ttype (rb)) {  		case LUA_TTABLE: {  			setnvalue (ra' (lua_Number)luaH_getn (hvalue (rb)));  			break;  		}  		case LUA_TSTRING: {  			setnvalue (ra' (lua_Number)tsvalue (rb).len);  			break;  		}  		default: {  			/* try metamethod *///Protect(  			L.savedpc = InstructionPtr.Assign (pc);  			if (call_binTM (L' rb' luaO_nilobject' ra' TMS.TM_LEN) == 0)  				luaG_typeerror (L' rb' "get length of");  			base_ = L.base_;  			//)  			break;  		}  		}  		continue;  	}  	case OpCode.OP_CONCAT: {  		int b = GETARG_B (i);  		int c = GETARG_C (i);  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaV_concat (L' c - b + 1' c);  		luaC_checkGC (L);  		base_ = L.base_;  		//);  		setobjs2s (L' RA (L' base_' i)' base_ + b);  		continue;  	}  	case OpCode.OP_JMP: {  		dojump (L' pc' GETARG_sBx (i));  		continue;  	}  	case OpCode.OP_EQ: {  		TValue rb = RKB (L' base_' i' k);  		TValue rc = RKC (L' base_' i' k);  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		if (equalobj (L' rb' rc) == GETARG_A (i))  			dojump (L' pc' GETARG_sBx (pc [0]));  		base_ = L.base_;  		//);  		InstructionPtr.inc (ref pc);  		continue;  	}  	case OpCode.OP_LT: {  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		if (luaV_lessthan (L' RKB (L' base_' i' k)' RKC (L' base_' i' k)) == GETARG_A (i))  			dojump (L' pc' GETARG_sBx (pc [0]));  		base_ = L.base_;  		//);  		InstructionPtr.inc (ref pc);  		continue;  	}  	case OpCode.OP_LE: {  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		if (lessequal (L' RKB (L' base_' i' k)' RKC (L' base_' i' k)) == GETARG_A (i))  			dojump (L' pc' GETARG_sBx (pc [0]));  		base_ = L.base_;  		//);  		InstructionPtr.inc (ref pc);  		continue;  	}  	case OpCode.OP_TEST: {  		if (l_isfalse (ra) != GETARG_C (i))  			dojump (L' pc' GETARG_sBx (pc [0]));  		InstructionPtr.inc (ref pc);  		continue;  	}  	case OpCode.OP_TESTSET: {  		TValue rb = RB (L' base_' i);  		if (l_isfalse (rb) != GETARG_C (i)) {  			setobjs2s (L' ra' rb);  			dojump (L' pc' GETARG_sBx (pc [0]));  		}  		InstructionPtr.inc (ref pc);  		continue;  	}  	case OpCode.OP_CALL: {  		int b = GETARG_B (i);  		int nresults = GETARG_C (i) - 1;  		if (b != 0)  			L.top = ra + b;  		/* else previous instruction set top */L.savedpc = InstructionPtr.Assign (pc);  		switch (luaD_precall (L' ra' nresults)) {  		case PCRLUA: {  			nexeccalls++;  			goto reentry;  			/* restart luaV_execute over new Lua function */}  		case PCRC: {  			/* it was a C function (`precall' called it); adjust results */if (nresults >= 0)  				L.top = L.ci.top;  			base_ = L.base_;  			continue;  		}  		default: {  			return;  			/* yield */}  		}  	}  	case OpCode.OP_TAILCALL: {  		int b = GETARG_B (i);  		if (b != 0)  			L.top = ra + b;  		/* else previous instruction set top */L.savedpc = InstructionPtr.Assign (pc);  		lua_assert (GETARG_C (i) - 1 == LUA_MULTRET);  		switch (luaD_precall (L' ra' LUA_MULTRET)) {  		case PCRLUA: {  			/* tail call: put new frame in place of previous one */CallInfo ci = L.ci - 1;  			/* previous frame */int aux;  			StkId func = ci.func;  			StkId pfunc = (ci + 1).func;  			/* previous function index */if (L.openupval != null)  				luaF_close (L' ci.base_);  			L.base_ = ci.base_ = ci.func + (ci [1].base_ - pfunc);  			for (aux = 0; pfunc + aux < L.top; aux++)  				/* move frame down */setobjs2s (L' func + aux' pfunc + aux);  			ci.top = L.top = func + aux;  			/* correct top */lua_assert (L.top == L.base_ + clvalue (func).l.p.maxstacksize);  			ci.savedpc = InstructionPtr.Assign (L.savedpc);  			ci.tailcalls++;  			/* one more call lost */CallInfo.dec (ref L.ci);  			/* remove new frame */goto reentry;  		}  		case PCRC: {  			/* it was a C function (`precall' called it) */base_ = L.base_;  			continue;  		}  		default: {  			return;  			/* yield */}  		}  	}  	case OpCode.OP_RETURN: {  		int b = GETARG_B (i);  		if (b != 0)  			L.top = ra + b - 1;  		if (L.openupval != null)  			luaF_close (L' base_);  		L.savedpc = InstructionPtr.Assign (pc);  		b = luaD_poscall (L' ra);  		if (--nexeccalls == 0)  			/* was previous function running `here'? */return;  		/* no: return */else {  			/* yes: continue its execution */if (b != 0)  				L.top = L.ci.top;  			lua_assert (isLua (L.ci));  			lua_assert (GET_OPCODE (L.ci.savedpc [-1]) == OpCode.OP_CALL);  			goto reentry;  		}  	}  	case OpCode.OP_FORLOOP: {  		lua_Number step = nvalue (ra + 2);  		lua_Number idx = luai_numadd (nvalue (ra)' step);  		/* increment index */lua_Number limit = nvalue (ra + 1);  		if (luai_numlt (0' step) ? luai_numle (idx' limit) : luai_numle (limit' idx)) {  			dojump (L' pc' GETARG_sBx (i));  			/* jump back */setnvalue (ra' idx);  			/* update internal index... */setnvalue (ra + 3' idx);  			/* ...and external index */}  		continue;  	}  	case OpCode.OP_FORPREP: {  		TValue init = ra;  		TValue plimit = ra + 1;  		TValue pstep = ra + 2;  		L.savedpc = InstructionPtr.Assign (pc);  		/* next steps may throw errors */if (tonumber (ref init' ra) == 0)  			luaG_runerror (L' LUA_QL ("for") + " initial value must be a number");  		else if (tonumber (ref plimit' ra + 1) == 0)  			luaG_runerror (L' LUA_QL ("for") + " limit must be a number");  		else if (tonumber (ref pstep' ra + 2) == 0)  			luaG_runerror (L' LUA_QL ("for") + " step must be a number");  		setnvalue (ra' luai_numsub (nvalue (ra)' nvalue (pstep)));  		dojump (L' pc' GETARG_sBx (i));  		continue;  	}  	case OpCode.OP_TFORLOOP: {  		StkId cb = ra + 3;  		/* call base */setobjs2s (L' cb + 2' ra + 2);  		setobjs2s (L' cb + 1' ra + 1);  		setobjs2s (L' cb' ra);  		L.top = cb + 3;  		/* func. + 2 args (state and index) *///Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaD_call (L' cb' GETARG_C (i));  		base_ = L.base_;  		//);  		L.top = L.ci.top;  		cb = RA (L' base_' i) + 3;  		/* previous call may change the stack */if (!ttisnil (cb)) {  			/* continue loop? */setobjs2s (L' cb - 1' cb);  			/* save control variable */dojump (L' pc' GETARG_sBx (pc [0]));  			/* jump back */}  		InstructionPtr.inc (ref pc);  		continue;  	}  	case OpCode.OP_SETLIST: {  		int n = GETARG_B (i);  		int c = GETARG_C (i);  		int last;  		Table h;  		if (n == 0) {  			n = cast_int (L.top - ra) - 1;  			L.top = L.ci.top;  		}  		if (c == 0) {  			c = cast_int (pc [0]);  			InstructionPtr.inc (ref pc);  		}  		runtime_check (L' ttistable (ra));  		h = hvalue (ra);  		last = ((c - 1) * LFIELDS_PER_FLUSH) + n;  		if (last > h.sizearray)  			/* needs more space? */luaH_resizearray (L' h' last);  		/* pre-alloc it at once */for (; n > 0; n--) {  			TValue val = ra + n;  			setobj2t (L' luaH_setnum (L' h' last--)' val);  			luaC_barriert (L' h' val);  		}  		continue;  	}  	case OpCode.OP_CLOSE: {  		luaF_close (L' ra);  		continue;  	}  	case OpCode.OP_CLOSURE: {  		Proto p;  		Closure ncl;  		int nup' j;  		p = cl.p.p [GETARG_Bx (i)];  		nup = p.nups;  		ncl = luaF_newLclosure (L' nup' cl.env);  		ncl.l.p = p;  		for (j = 0; j < nup; j++' InstructionPtr.inc (ref pc)) {  			if (GET_OPCODE (pc [0]) == OpCode.OP_GETUPVAL)  				ncl.l.upvals [j] = cl.upvals [GETARG_B (pc [0])];  			else {  				lua_assert (GET_OPCODE (pc [0]) == OpCode.OP_MOVE);  				ncl.l.upvals [j] = luaF_findupval (L' base_ + GETARG_B (pc [0]));  			}  		}  		setclvalue (L' ra' ncl);  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaC_checkGC (L);  		base_ = L.base_;  		//);  		continue;  	}  	case OpCode.OP_VARARG: {  		int b = GETARG_B (i) - 1;  		int j;  		CallInfo ci = L.ci;  		int n = cast_int (ci.base_ - ci.func) - cl.p.numparams - 1;  		if (b == LUA_MULTRET) {  			//Protect(  			L.savedpc = InstructionPtr.Assign (pc);  			luaD_checkstack (L' n);  			base_ = L.base_;  			//);  			ra = RA (L' base_' i);  			/* previous call may change the stack */b = n;  			L.top = ra + n;  		}  		for (j = 0; j < b; j++) {  			if (j < n) {  				setobjs2s (L' ra + j' ci.base_ - n + j);  			} else {  				setnilvalue (ra + j);  			}  		}  		continue;  	}  	}  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaV_execute,The following statement contains a magic number: for (; ;) {  	/*const*/Instruction i = InstructionPtr.inc (ref pc) [0];  	StkId ra;  	if (((L.hookmask & (LUA_MASKLINE | LUA_MASKCOUNT)) != 0) && (((--L.hookcount) == 0) || ((L.hookmask & LUA_MASKLINE) != 0))) {  		traceexec (L' pc);  		if (L.status == LUA_YIELD) {  			/* did hook yield? */L.savedpc = new InstructionPtr (pc.codes' pc.pc - 1);  			return;  		}  		base_ = L.base_;  	}  	/* warning!! several calls may realloc the stack and invalidate `ra' */ra = RA (L' base_' i);  	lua_assert (base_ == L.base_ && L.base_ == L.ci.base_);  	lua_assert (base_ <= L.top && ((L.top - L.stack) <= L.stacksize));  	lua_assert (L.top == L.ci.top || (luaG_checkopenop (i) != 0));  	//Dump(pc.pc' i);			  	switch (GET_OPCODE (i)) {  	case OpCode.OP_MOVE: {  		setobjs2s (L' ra' RB (L' base_' i));  		continue;  	}  	case OpCode.OP_LOADK: {  		setobj2s (L' ra' KBx (L' i' k));  		continue;  	}  	case OpCode.OP_LOADBOOL: {  		setbvalue (ra' GETARG_B (i));  		if (GETARG_C (i) != 0)  			InstructionPtr.inc (ref pc);  		/* skip next instruction (if C) */continue;  	}  	case OpCode.OP_LOADNIL: {  		TValue rb = RB (L' base_' i);  		do {  			setnilvalue (StkId.dec (ref rb));  		} while (rb >= ra);  		continue;  	}  	case OpCode.OP_GETUPVAL: {  		int b = GETARG_B (i);  		setobj2s (L' ra' cl.upvals [b].v);  		continue;  	}  	case OpCode.OP_GETGLOBAL: {  		TValue g = new TValue ();  		TValue rb = KBx (L' i' k);  		sethvalue (L' g' cl.env);  		lua_assert (ttisstring (rb));  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaV_gettable (L' g' rb' ra);  		base_ = L.base_;  		//);  		L.savedpc = InstructionPtr.Assign (pc);  		continue;  	}  	case OpCode.OP_GETTABLE: {  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaV_gettable (L' RB (L' base_' i)' RKC (L' base_' i' k)' ra);  		base_ = L.base_;  		//);  		L.savedpc = InstructionPtr.Assign (pc);  		continue;  	}  	case OpCode.OP_SETGLOBAL: {  		TValue g = new TValue ();  		sethvalue (L' g' cl.env);  		lua_assert (ttisstring (KBx (L' i' k)));  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaV_settable (L' g' KBx (L' i' k)' ra);  		base_ = L.base_;  		//);  		L.savedpc = InstructionPtr.Assign (pc);  		continue;  	}  	case OpCode.OP_SETUPVAL: {  		UpVal uv = cl.upvals [GETARG_B (i)];  		setobj (L' uv.v' ra);  		luaC_barrier (L' uv' ra);  		continue;  	}  	case OpCode.OP_SETTABLE: {  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaV_settable (L' ra' RKB (L' base_' i' k)' RKC (L' base_' i' k));  		base_ = L.base_;  		//);  		L.savedpc = InstructionPtr.Assign (pc);  		continue;  	}  	case OpCode.OP_NEWTABLE: {  		int b = GETARG_B (i);  		int c = GETARG_C (i);  		sethvalue (L' ra' luaH_new (L' luaO_fb2int (b)' luaO_fb2int (c)));  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaC_checkGC (L);  		base_ = L.base_;  		//);  		L.savedpc = InstructionPtr.Assign (pc);  		continue;  	}  	case OpCode.OP_SELF: {  		StkId rb = RB (L' base_' i);  		setobjs2s (L' ra + 1' rb);  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaV_gettable (L' rb' RKC (L' base_' i' k)' ra);  		base_ = L.base_;  		//);  		L.savedpc = InstructionPtr.Assign (pc);  		continue;  	}  	case OpCode.OP_ADD: {  		arith_op (L' luai_numadd' TMS.TM_ADD' base_' i' k' ra' pc);  		continue;  	}  	case OpCode.OP_SUB: {  		arith_op (L' luai_numsub' TMS.TM_SUB' base_' i' k' ra' pc);  		continue;  	}  	case OpCode.OP_MUL: {  		arith_op (L' luai_nummul' TMS.TM_MUL' base_' i' k' ra' pc);  		continue;  	}  	case OpCode.OP_DIV: {  		arith_op (L' luai_numdiv' TMS.TM_DIV' base_' i' k' ra' pc);  		continue;  	}  	case OpCode.OP_MOD: {  		arith_op (L' luai_nummod' TMS.TM_MOD' base_' i' k' ra' pc);  		continue;  	}  	case OpCode.OP_POW: {  		arith_op (L' luai_numpow' TMS.TM_POW' base_' i' k' ra' pc);  		continue;  	}  	case OpCode.OP_UNM: {  		TValue rb = RB (L' base_' i);  		if (ttisnumber (rb)) {  			lua_Number nb = nvalue (rb);  			setnvalue (ra' luai_numunm (nb));  		} else {  			//Protect(  			L.savedpc = InstructionPtr.Assign (pc);  			Arith (L' ra' rb' rb' TMS.TM_UNM);  			base_ = L.base_;  			//);  			L.savedpc = InstructionPtr.Assign (pc);  		}  		continue;  	}  	case OpCode.OP_NOT: {  		int res = l_isfalse (RB (L' base_' i)) == 0 ? 0 : 1;  		/* next assignment may change this value */setbvalue (ra' res);  		continue;  	}  	case OpCode.OP_LEN: {  		TValue rb = RB (L' base_' i);  		switch (ttype (rb)) {  		case LUA_TTABLE: {  			setnvalue (ra' (lua_Number)luaH_getn (hvalue (rb)));  			break;  		}  		case LUA_TSTRING: {  			setnvalue (ra' (lua_Number)tsvalue (rb).len);  			break;  		}  		default: {  			/* try metamethod *///Protect(  			L.savedpc = InstructionPtr.Assign (pc);  			if (call_binTM (L' rb' luaO_nilobject' ra' TMS.TM_LEN) == 0)  				luaG_typeerror (L' rb' "get length of");  			base_ = L.base_;  			//)  			break;  		}  		}  		continue;  	}  	case OpCode.OP_CONCAT: {  		int b = GETARG_B (i);  		int c = GETARG_C (i);  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaV_concat (L' c - b + 1' c);  		luaC_checkGC (L);  		base_ = L.base_;  		//);  		setobjs2s (L' RA (L' base_' i)' base_ + b);  		continue;  	}  	case OpCode.OP_JMP: {  		dojump (L' pc' GETARG_sBx (i));  		continue;  	}  	case OpCode.OP_EQ: {  		TValue rb = RKB (L' base_' i' k);  		TValue rc = RKC (L' base_' i' k);  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		if (equalobj (L' rb' rc) == GETARG_A (i))  			dojump (L' pc' GETARG_sBx (pc [0]));  		base_ = L.base_;  		//);  		InstructionPtr.inc (ref pc);  		continue;  	}  	case OpCode.OP_LT: {  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		if (luaV_lessthan (L' RKB (L' base_' i' k)' RKC (L' base_' i' k)) == GETARG_A (i))  			dojump (L' pc' GETARG_sBx (pc [0]));  		base_ = L.base_;  		//);  		InstructionPtr.inc (ref pc);  		continue;  	}  	case OpCode.OP_LE: {  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		if (lessequal (L' RKB (L' base_' i' k)' RKC (L' base_' i' k)) == GETARG_A (i))  			dojump (L' pc' GETARG_sBx (pc [0]));  		base_ = L.base_;  		//);  		InstructionPtr.inc (ref pc);  		continue;  	}  	case OpCode.OP_TEST: {  		if (l_isfalse (ra) != GETARG_C (i))  			dojump (L' pc' GETARG_sBx (pc [0]));  		InstructionPtr.inc (ref pc);  		continue;  	}  	case OpCode.OP_TESTSET: {  		TValue rb = RB (L' base_' i);  		if (l_isfalse (rb) != GETARG_C (i)) {  			setobjs2s (L' ra' rb);  			dojump (L' pc' GETARG_sBx (pc [0]));  		}  		InstructionPtr.inc (ref pc);  		continue;  	}  	case OpCode.OP_CALL: {  		int b = GETARG_B (i);  		int nresults = GETARG_C (i) - 1;  		if (b != 0)  			L.top = ra + b;  		/* else previous instruction set top */L.savedpc = InstructionPtr.Assign (pc);  		switch (luaD_precall (L' ra' nresults)) {  		case PCRLUA: {  			nexeccalls++;  			goto reentry;  			/* restart luaV_execute over new Lua function */}  		case PCRC: {  			/* it was a C function (`precall' called it); adjust results */if (nresults >= 0)  				L.top = L.ci.top;  			base_ = L.base_;  			continue;  		}  		default: {  			return;  			/* yield */}  		}  	}  	case OpCode.OP_TAILCALL: {  		int b = GETARG_B (i);  		if (b != 0)  			L.top = ra + b;  		/* else previous instruction set top */L.savedpc = InstructionPtr.Assign (pc);  		lua_assert (GETARG_C (i) - 1 == LUA_MULTRET);  		switch (luaD_precall (L' ra' LUA_MULTRET)) {  		case PCRLUA: {  			/* tail call: put new frame in place of previous one */CallInfo ci = L.ci - 1;  			/* previous frame */int aux;  			StkId func = ci.func;  			StkId pfunc = (ci + 1).func;  			/* previous function index */if (L.openupval != null)  				luaF_close (L' ci.base_);  			L.base_ = ci.base_ = ci.func + (ci [1].base_ - pfunc);  			for (aux = 0; pfunc + aux < L.top; aux++)  				/* move frame down */setobjs2s (L' func + aux' pfunc + aux);  			ci.top = L.top = func + aux;  			/* correct top */lua_assert (L.top == L.base_ + clvalue (func).l.p.maxstacksize);  			ci.savedpc = InstructionPtr.Assign (L.savedpc);  			ci.tailcalls++;  			/* one more call lost */CallInfo.dec (ref L.ci);  			/* remove new frame */goto reentry;  		}  		case PCRC: {  			/* it was a C function (`precall' called it) */base_ = L.base_;  			continue;  		}  		default: {  			return;  			/* yield */}  		}  	}  	case OpCode.OP_RETURN: {  		int b = GETARG_B (i);  		if (b != 0)  			L.top = ra + b - 1;  		if (L.openupval != null)  			luaF_close (L' base_);  		L.savedpc = InstructionPtr.Assign (pc);  		b = luaD_poscall (L' ra);  		if (--nexeccalls == 0)  			/* was previous function running `here'? */return;  		/* no: return */else {  			/* yes: continue its execution */if (b != 0)  				L.top = L.ci.top;  			lua_assert (isLua (L.ci));  			lua_assert (GET_OPCODE (L.ci.savedpc [-1]) == OpCode.OP_CALL);  			goto reentry;  		}  	}  	case OpCode.OP_FORLOOP: {  		lua_Number step = nvalue (ra + 2);  		lua_Number idx = luai_numadd (nvalue (ra)' step);  		/* increment index */lua_Number limit = nvalue (ra + 1);  		if (luai_numlt (0' step) ? luai_numle (idx' limit) : luai_numle (limit' idx)) {  			dojump (L' pc' GETARG_sBx (i));  			/* jump back */setnvalue (ra' idx);  			/* update internal index... */setnvalue (ra + 3' idx);  			/* ...and external index */}  		continue;  	}  	case OpCode.OP_FORPREP: {  		TValue init = ra;  		TValue plimit = ra + 1;  		TValue pstep = ra + 2;  		L.savedpc = InstructionPtr.Assign (pc);  		/* next steps may throw errors */if (tonumber (ref init' ra) == 0)  			luaG_runerror (L' LUA_QL ("for") + " initial value must be a number");  		else if (tonumber (ref plimit' ra + 1) == 0)  			luaG_runerror (L' LUA_QL ("for") + " limit must be a number");  		else if (tonumber (ref pstep' ra + 2) == 0)  			luaG_runerror (L' LUA_QL ("for") + " step must be a number");  		setnvalue (ra' luai_numsub (nvalue (ra)' nvalue (pstep)));  		dojump (L' pc' GETARG_sBx (i));  		continue;  	}  	case OpCode.OP_TFORLOOP: {  		StkId cb = ra + 3;  		/* call base */setobjs2s (L' cb + 2' ra + 2);  		setobjs2s (L' cb + 1' ra + 1);  		setobjs2s (L' cb' ra);  		L.top = cb + 3;  		/* func. + 2 args (state and index) *///Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaD_call (L' cb' GETARG_C (i));  		base_ = L.base_;  		//);  		L.top = L.ci.top;  		cb = RA (L' base_' i) + 3;  		/* previous call may change the stack */if (!ttisnil (cb)) {  			/* continue loop? */setobjs2s (L' cb - 1' cb);  			/* save control variable */dojump (L' pc' GETARG_sBx (pc [0]));  			/* jump back */}  		InstructionPtr.inc (ref pc);  		continue;  	}  	case OpCode.OP_SETLIST: {  		int n = GETARG_B (i);  		int c = GETARG_C (i);  		int last;  		Table h;  		if (n == 0) {  			n = cast_int (L.top - ra) - 1;  			L.top = L.ci.top;  		}  		if (c == 0) {  			c = cast_int (pc [0]);  			InstructionPtr.inc (ref pc);  		}  		runtime_check (L' ttistable (ra));  		h = hvalue (ra);  		last = ((c - 1) * LFIELDS_PER_FLUSH) + n;  		if (last > h.sizearray)  			/* needs more space? */luaH_resizearray (L' h' last);  		/* pre-alloc it at once */for (; n > 0; n--) {  			TValue val = ra + n;  			setobj2t (L' luaH_setnum (L' h' last--)' val);  			luaC_barriert (L' h' val);  		}  		continue;  	}  	case OpCode.OP_CLOSE: {  		luaF_close (L' ra);  		continue;  	}  	case OpCode.OP_CLOSURE: {  		Proto p;  		Closure ncl;  		int nup' j;  		p = cl.p.p [GETARG_Bx (i)];  		nup = p.nups;  		ncl = luaF_newLclosure (L' nup' cl.env);  		ncl.l.p = p;  		for (j = 0; j < nup; j++' InstructionPtr.inc (ref pc)) {  			if (GET_OPCODE (pc [0]) == OpCode.OP_GETUPVAL)  				ncl.l.upvals [j] = cl.upvals [GETARG_B (pc [0])];  			else {  				lua_assert (GET_OPCODE (pc [0]) == OpCode.OP_MOVE);  				ncl.l.upvals [j] = luaF_findupval (L' base_ + GETARG_B (pc [0]));  			}  		}  		setclvalue (L' ra' ncl);  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaC_checkGC (L);  		base_ = L.base_;  		//);  		continue;  	}  	case OpCode.OP_VARARG: {  		int b = GETARG_B (i) - 1;  		int j;  		CallInfo ci = L.ci;  		int n = cast_int (ci.base_ - ci.func) - cl.p.numparams - 1;  		if (b == LUA_MULTRET) {  			//Protect(  			L.savedpc = InstructionPtr.Assign (pc);  			luaD_checkstack (L' n);  			base_ = L.base_;  			//);  			ra = RA (L' base_' i);  			/* previous call may change the stack */b = n;  			L.top = ra + n;  		}  		for (j = 0; j < b; j++) {  			if (j < n) {  				setobjs2s (L' ra + j' ci.base_ - n + j);  			} else {  				setnilvalue (ra + j);  			}  		}  		continue;  	}  	}  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaV_execute,The following statement contains a magic number: for (; ;) {  	/*const*/Instruction i = InstructionPtr.inc (ref pc) [0];  	StkId ra;  	if (((L.hookmask & (LUA_MASKLINE | LUA_MASKCOUNT)) != 0) && (((--L.hookcount) == 0) || ((L.hookmask & LUA_MASKLINE) != 0))) {  		traceexec (L' pc);  		if (L.status == LUA_YIELD) {  			/* did hook yield? */L.savedpc = new InstructionPtr (pc.codes' pc.pc - 1);  			return;  		}  		base_ = L.base_;  	}  	/* warning!! several calls may realloc the stack and invalidate `ra' */ra = RA (L' base_' i);  	lua_assert (base_ == L.base_ && L.base_ == L.ci.base_);  	lua_assert (base_ <= L.top && ((L.top - L.stack) <= L.stacksize));  	lua_assert (L.top == L.ci.top || (luaG_checkopenop (i) != 0));  	//Dump(pc.pc' i);			  	switch (GET_OPCODE (i)) {  	case OpCode.OP_MOVE: {  		setobjs2s (L' ra' RB (L' base_' i));  		continue;  	}  	case OpCode.OP_LOADK: {  		setobj2s (L' ra' KBx (L' i' k));  		continue;  	}  	case OpCode.OP_LOADBOOL: {  		setbvalue (ra' GETARG_B (i));  		if (GETARG_C (i) != 0)  			InstructionPtr.inc (ref pc);  		/* skip next instruction (if C) */continue;  	}  	case OpCode.OP_LOADNIL: {  		TValue rb = RB (L' base_' i);  		do {  			setnilvalue (StkId.dec (ref rb));  		} while (rb >= ra);  		continue;  	}  	case OpCode.OP_GETUPVAL: {  		int b = GETARG_B (i);  		setobj2s (L' ra' cl.upvals [b].v);  		continue;  	}  	case OpCode.OP_GETGLOBAL: {  		TValue g = new TValue ();  		TValue rb = KBx (L' i' k);  		sethvalue (L' g' cl.env);  		lua_assert (ttisstring (rb));  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaV_gettable (L' g' rb' ra);  		base_ = L.base_;  		//);  		L.savedpc = InstructionPtr.Assign (pc);  		continue;  	}  	case OpCode.OP_GETTABLE: {  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaV_gettable (L' RB (L' base_' i)' RKC (L' base_' i' k)' ra);  		base_ = L.base_;  		//);  		L.savedpc = InstructionPtr.Assign (pc);  		continue;  	}  	case OpCode.OP_SETGLOBAL: {  		TValue g = new TValue ();  		sethvalue (L' g' cl.env);  		lua_assert (ttisstring (KBx (L' i' k)));  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaV_settable (L' g' KBx (L' i' k)' ra);  		base_ = L.base_;  		//);  		L.savedpc = InstructionPtr.Assign (pc);  		continue;  	}  	case OpCode.OP_SETUPVAL: {  		UpVal uv = cl.upvals [GETARG_B (i)];  		setobj (L' uv.v' ra);  		luaC_barrier (L' uv' ra);  		continue;  	}  	case OpCode.OP_SETTABLE: {  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaV_settable (L' ra' RKB (L' base_' i' k)' RKC (L' base_' i' k));  		base_ = L.base_;  		//);  		L.savedpc = InstructionPtr.Assign (pc);  		continue;  	}  	case OpCode.OP_NEWTABLE: {  		int b = GETARG_B (i);  		int c = GETARG_C (i);  		sethvalue (L' ra' luaH_new (L' luaO_fb2int (b)' luaO_fb2int (c)));  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaC_checkGC (L);  		base_ = L.base_;  		//);  		L.savedpc = InstructionPtr.Assign (pc);  		continue;  	}  	case OpCode.OP_SELF: {  		StkId rb = RB (L' base_' i);  		setobjs2s (L' ra + 1' rb);  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaV_gettable (L' rb' RKC (L' base_' i' k)' ra);  		base_ = L.base_;  		//);  		L.savedpc = InstructionPtr.Assign (pc);  		continue;  	}  	case OpCode.OP_ADD: {  		arith_op (L' luai_numadd' TMS.TM_ADD' base_' i' k' ra' pc);  		continue;  	}  	case OpCode.OP_SUB: {  		arith_op (L' luai_numsub' TMS.TM_SUB' base_' i' k' ra' pc);  		continue;  	}  	case OpCode.OP_MUL: {  		arith_op (L' luai_nummul' TMS.TM_MUL' base_' i' k' ra' pc);  		continue;  	}  	case OpCode.OP_DIV: {  		arith_op (L' luai_numdiv' TMS.TM_DIV' base_' i' k' ra' pc);  		continue;  	}  	case OpCode.OP_MOD: {  		arith_op (L' luai_nummod' TMS.TM_MOD' base_' i' k' ra' pc);  		continue;  	}  	case OpCode.OP_POW: {  		arith_op (L' luai_numpow' TMS.TM_POW' base_' i' k' ra' pc);  		continue;  	}  	case OpCode.OP_UNM: {  		TValue rb = RB (L' base_' i);  		if (ttisnumber (rb)) {  			lua_Number nb = nvalue (rb);  			setnvalue (ra' luai_numunm (nb));  		} else {  			//Protect(  			L.savedpc = InstructionPtr.Assign (pc);  			Arith (L' ra' rb' rb' TMS.TM_UNM);  			base_ = L.base_;  			//);  			L.savedpc = InstructionPtr.Assign (pc);  		}  		continue;  	}  	case OpCode.OP_NOT: {  		int res = l_isfalse (RB (L' base_' i)) == 0 ? 0 : 1;  		/* next assignment may change this value */setbvalue (ra' res);  		continue;  	}  	case OpCode.OP_LEN: {  		TValue rb = RB (L' base_' i);  		switch (ttype (rb)) {  		case LUA_TTABLE: {  			setnvalue (ra' (lua_Number)luaH_getn (hvalue (rb)));  			break;  		}  		case LUA_TSTRING: {  			setnvalue (ra' (lua_Number)tsvalue (rb).len);  			break;  		}  		default: {  			/* try metamethod *///Protect(  			L.savedpc = InstructionPtr.Assign (pc);  			if (call_binTM (L' rb' luaO_nilobject' ra' TMS.TM_LEN) == 0)  				luaG_typeerror (L' rb' "get length of");  			base_ = L.base_;  			//)  			break;  		}  		}  		continue;  	}  	case OpCode.OP_CONCAT: {  		int b = GETARG_B (i);  		int c = GETARG_C (i);  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaV_concat (L' c - b + 1' c);  		luaC_checkGC (L);  		base_ = L.base_;  		//);  		setobjs2s (L' RA (L' base_' i)' base_ + b);  		continue;  	}  	case OpCode.OP_JMP: {  		dojump (L' pc' GETARG_sBx (i));  		continue;  	}  	case OpCode.OP_EQ: {  		TValue rb = RKB (L' base_' i' k);  		TValue rc = RKC (L' base_' i' k);  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		if (equalobj (L' rb' rc) == GETARG_A (i))  			dojump (L' pc' GETARG_sBx (pc [0]));  		base_ = L.base_;  		//);  		InstructionPtr.inc (ref pc);  		continue;  	}  	case OpCode.OP_LT: {  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		if (luaV_lessthan (L' RKB (L' base_' i' k)' RKC (L' base_' i' k)) == GETARG_A (i))  			dojump (L' pc' GETARG_sBx (pc [0]));  		base_ = L.base_;  		//);  		InstructionPtr.inc (ref pc);  		continue;  	}  	case OpCode.OP_LE: {  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		if (lessequal (L' RKB (L' base_' i' k)' RKC (L' base_' i' k)) == GETARG_A (i))  			dojump (L' pc' GETARG_sBx (pc [0]));  		base_ = L.base_;  		//);  		InstructionPtr.inc (ref pc);  		continue;  	}  	case OpCode.OP_TEST: {  		if (l_isfalse (ra) != GETARG_C (i))  			dojump (L' pc' GETARG_sBx (pc [0]));  		InstructionPtr.inc (ref pc);  		continue;  	}  	case OpCode.OP_TESTSET: {  		TValue rb = RB (L' base_' i);  		if (l_isfalse (rb) != GETARG_C (i)) {  			setobjs2s (L' ra' rb);  			dojump (L' pc' GETARG_sBx (pc [0]));  		}  		InstructionPtr.inc (ref pc);  		continue;  	}  	case OpCode.OP_CALL: {  		int b = GETARG_B (i);  		int nresults = GETARG_C (i) - 1;  		if (b != 0)  			L.top = ra + b;  		/* else previous instruction set top */L.savedpc = InstructionPtr.Assign (pc);  		switch (luaD_precall (L' ra' nresults)) {  		case PCRLUA: {  			nexeccalls++;  			goto reentry;  			/* restart luaV_execute over new Lua function */}  		case PCRC: {  			/* it was a C function (`precall' called it); adjust results */if (nresults >= 0)  				L.top = L.ci.top;  			base_ = L.base_;  			continue;  		}  		default: {  			return;  			/* yield */}  		}  	}  	case OpCode.OP_TAILCALL: {  		int b = GETARG_B (i);  		if (b != 0)  			L.top = ra + b;  		/* else previous instruction set top */L.savedpc = InstructionPtr.Assign (pc);  		lua_assert (GETARG_C (i) - 1 == LUA_MULTRET);  		switch (luaD_precall (L' ra' LUA_MULTRET)) {  		case PCRLUA: {  			/* tail call: put new frame in place of previous one */CallInfo ci = L.ci - 1;  			/* previous frame */int aux;  			StkId func = ci.func;  			StkId pfunc = (ci + 1).func;  			/* previous function index */if (L.openupval != null)  				luaF_close (L' ci.base_);  			L.base_ = ci.base_ = ci.func + (ci [1].base_ - pfunc);  			for (aux = 0; pfunc + aux < L.top; aux++)  				/* move frame down */setobjs2s (L' func + aux' pfunc + aux);  			ci.top = L.top = func + aux;  			/* correct top */lua_assert (L.top == L.base_ + clvalue (func).l.p.maxstacksize);  			ci.savedpc = InstructionPtr.Assign (L.savedpc);  			ci.tailcalls++;  			/* one more call lost */CallInfo.dec (ref L.ci);  			/* remove new frame */goto reentry;  		}  		case PCRC: {  			/* it was a C function (`precall' called it) */base_ = L.base_;  			continue;  		}  		default: {  			return;  			/* yield */}  		}  	}  	case OpCode.OP_RETURN: {  		int b = GETARG_B (i);  		if (b != 0)  			L.top = ra + b - 1;  		if (L.openupval != null)  			luaF_close (L' base_);  		L.savedpc = InstructionPtr.Assign (pc);  		b = luaD_poscall (L' ra);  		if (--nexeccalls == 0)  			/* was previous function running `here'? */return;  		/* no: return */else {  			/* yes: continue its execution */if (b != 0)  				L.top = L.ci.top;  			lua_assert (isLua (L.ci));  			lua_assert (GET_OPCODE (L.ci.savedpc [-1]) == OpCode.OP_CALL);  			goto reentry;  		}  	}  	case OpCode.OP_FORLOOP: {  		lua_Number step = nvalue (ra + 2);  		lua_Number idx = luai_numadd (nvalue (ra)' step);  		/* increment index */lua_Number limit = nvalue (ra + 1);  		if (luai_numlt (0' step) ? luai_numle (idx' limit) : luai_numle (limit' idx)) {  			dojump (L' pc' GETARG_sBx (i));  			/* jump back */setnvalue (ra' idx);  			/* update internal index... */setnvalue (ra + 3' idx);  			/* ...and external index */}  		continue;  	}  	case OpCode.OP_FORPREP: {  		TValue init = ra;  		TValue plimit = ra + 1;  		TValue pstep = ra + 2;  		L.savedpc = InstructionPtr.Assign (pc);  		/* next steps may throw errors */if (tonumber (ref init' ra) == 0)  			luaG_runerror (L' LUA_QL ("for") + " initial value must be a number");  		else if (tonumber (ref plimit' ra + 1) == 0)  			luaG_runerror (L' LUA_QL ("for") + " limit must be a number");  		else if (tonumber (ref pstep' ra + 2) == 0)  			luaG_runerror (L' LUA_QL ("for") + " step must be a number");  		setnvalue (ra' luai_numsub (nvalue (ra)' nvalue (pstep)));  		dojump (L' pc' GETARG_sBx (i));  		continue;  	}  	case OpCode.OP_TFORLOOP: {  		StkId cb = ra + 3;  		/* call base */setobjs2s (L' cb + 2' ra + 2);  		setobjs2s (L' cb + 1' ra + 1);  		setobjs2s (L' cb' ra);  		L.top = cb + 3;  		/* func. + 2 args (state and index) *///Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaD_call (L' cb' GETARG_C (i));  		base_ = L.base_;  		//);  		L.top = L.ci.top;  		cb = RA (L' base_' i) + 3;  		/* previous call may change the stack */if (!ttisnil (cb)) {  			/* continue loop? */setobjs2s (L' cb - 1' cb);  			/* save control variable */dojump (L' pc' GETARG_sBx (pc [0]));  			/* jump back */}  		InstructionPtr.inc (ref pc);  		continue;  	}  	case OpCode.OP_SETLIST: {  		int n = GETARG_B (i);  		int c = GETARG_C (i);  		int last;  		Table h;  		if (n == 0) {  			n = cast_int (L.top - ra) - 1;  			L.top = L.ci.top;  		}  		if (c == 0) {  			c = cast_int (pc [0]);  			InstructionPtr.inc (ref pc);  		}  		runtime_check (L' ttistable (ra));  		h = hvalue (ra);  		last = ((c - 1) * LFIELDS_PER_FLUSH) + n;  		if (last > h.sizearray)  			/* needs more space? */luaH_resizearray (L' h' last);  		/* pre-alloc it at once */for (; n > 0; n--) {  			TValue val = ra + n;  			setobj2t (L' luaH_setnum (L' h' last--)' val);  			luaC_barriert (L' h' val);  		}  		continue;  	}  	case OpCode.OP_CLOSE: {  		luaF_close (L' ra);  		continue;  	}  	case OpCode.OP_CLOSURE: {  		Proto p;  		Closure ncl;  		int nup' j;  		p = cl.p.p [GETARG_Bx (i)];  		nup = p.nups;  		ncl = luaF_newLclosure (L' nup' cl.env);  		ncl.l.p = p;  		for (j = 0; j < nup; j++' InstructionPtr.inc (ref pc)) {  			if (GET_OPCODE (pc [0]) == OpCode.OP_GETUPVAL)  				ncl.l.upvals [j] = cl.upvals [GETARG_B (pc [0])];  			else {  				lua_assert (GET_OPCODE (pc [0]) == OpCode.OP_MOVE);  				ncl.l.upvals [j] = luaF_findupval (L' base_ + GETARG_B (pc [0]));  			}  		}  		setclvalue (L' ra' ncl);  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaC_checkGC (L);  		base_ = L.base_;  		//);  		continue;  	}  	case OpCode.OP_VARARG: {  		int b = GETARG_B (i) - 1;  		int j;  		CallInfo ci = L.ci;  		int n = cast_int (ci.base_ - ci.func) - cl.p.numparams - 1;  		if (b == LUA_MULTRET) {  			//Protect(  			L.savedpc = InstructionPtr.Assign (pc);  			luaD_checkstack (L' n);  			base_ = L.base_;  			//);  			ra = RA (L' base_' i);  			/* previous call may change the stack */b = n;  			L.top = ra + n;  		}  		for (j = 0; j < b; j++) {  			if (j < n) {  				setobjs2s (L' ra + j' ci.base_ - n + j);  			} else {  				setnilvalue (ra + j);  			}  		}  		continue;  	}  	}  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaV_execute,The following statement contains a magic number: for (; ;) {  	/*const*/Instruction i = InstructionPtr.inc (ref pc) [0];  	StkId ra;  	if (((L.hookmask & (LUA_MASKLINE | LUA_MASKCOUNT)) != 0) && (((--L.hookcount) == 0) || ((L.hookmask & LUA_MASKLINE) != 0))) {  		traceexec (L' pc);  		if (L.status == LUA_YIELD) {  			/* did hook yield? */L.savedpc = new InstructionPtr (pc.codes' pc.pc - 1);  			return;  		}  		base_ = L.base_;  	}  	/* warning!! several calls may realloc the stack and invalidate `ra' */ra = RA (L' base_' i);  	lua_assert (base_ == L.base_ && L.base_ == L.ci.base_);  	lua_assert (base_ <= L.top && ((L.top - L.stack) <= L.stacksize));  	lua_assert (L.top == L.ci.top || (luaG_checkopenop (i) != 0));  	//Dump(pc.pc' i);			  	switch (GET_OPCODE (i)) {  	case OpCode.OP_MOVE: {  		setobjs2s (L' ra' RB (L' base_' i));  		continue;  	}  	case OpCode.OP_LOADK: {  		setobj2s (L' ra' KBx (L' i' k));  		continue;  	}  	case OpCode.OP_LOADBOOL: {  		setbvalue (ra' GETARG_B (i));  		if (GETARG_C (i) != 0)  			InstructionPtr.inc (ref pc);  		/* skip next instruction (if C) */continue;  	}  	case OpCode.OP_LOADNIL: {  		TValue rb = RB (L' base_' i);  		do {  			setnilvalue (StkId.dec (ref rb));  		} while (rb >= ra);  		continue;  	}  	case OpCode.OP_GETUPVAL: {  		int b = GETARG_B (i);  		setobj2s (L' ra' cl.upvals [b].v);  		continue;  	}  	case OpCode.OP_GETGLOBAL: {  		TValue g = new TValue ();  		TValue rb = KBx (L' i' k);  		sethvalue (L' g' cl.env);  		lua_assert (ttisstring (rb));  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaV_gettable (L' g' rb' ra);  		base_ = L.base_;  		//);  		L.savedpc = InstructionPtr.Assign (pc);  		continue;  	}  	case OpCode.OP_GETTABLE: {  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaV_gettable (L' RB (L' base_' i)' RKC (L' base_' i' k)' ra);  		base_ = L.base_;  		//);  		L.savedpc = InstructionPtr.Assign (pc);  		continue;  	}  	case OpCode.OP_SETGLOBAL: {  		TValue g = new TValue ();  		sethvalue (L' g' cl.env);  		lua_assert (ttisstring (KBx (L' i' k)));  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaV_settable (L' g' KBx (L' i' k)' ra);  		base_ = L.base_;  		//);  		L.savedpc = InstructionPtr.Assign (pc);  		continue;  	}  	case OpCode.OP_SETUPVAL: {  		UpVal uv = cl.upvals [GETARG_B (i)];  		setobj (L' uv.v' ra);  		luaC_barrier (L' uv' ra);  		continue;  	}  	case OpCode.OP_SETTABLE: {  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaV_settable (L' ra' RKB (L' base_' i' k)' RKC (L' base_' i' k));  		base_ = L.base_;  		//);  		L.savedpc = InstructionPtr.Assign (pc);  		continue;  	}  	case OpCode.OP_NEWTABLE: {  		int b = GETARG_B (i);  		int c = GETARG_C (i);  		sethvalue (L' ra' luaH_new (L' luaO_fb2int (b)' luaO_fb2int (c)));  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaC_checkGC (L);  		base_ = L.base_;  		//);  		L.savedpc = InstructionPtr.Assign (pc);  		continue;  	}  	case OpCode.OP_SELF: {  		StkId rb = RB (L' base_' i);  		setobjs2s (L' ra + 1' rb);  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaV_gettable (L' rb' RKC (L' base_' i' k)' ra);  		base_ = L.base_;  		//);  		L.savedpc = InstructionPtr.Assign (pc);  		continue;  	}  	case OpCode.OP_ADD: {  		arith_op (L' luai_numadd' TMS.TM_ADD' base_' i' k' ra' pc);  		continue;  	}  	case OpCode.OP_SUB: {  		arith_op (L' luai_numsub' TMS.TM_SUB' base_' i' k' ra' pc);  		continue;  	}  	case OpCode.OP_MUL: {  		arith_op (L' luai_nummul' TMS.TM_MUL' base_' i' k' ra' pc);  		continue;  	}  	case OpCode.OP_DIV: {  		arith_op (L' luai_numdiv' TMS.TM_DIV' base_' i' k' ra' pc);  		continue;  	}  	case OpCode.OP_MOD: {  		arith_op (L' luai_nummod' TMS.TM_MOD' base_' i' k' ra' pc);  		continue;  	}  	case OpCode.OP_POW: {  		arith_op (L' luai_numpow' TMS.TM_POW' base_' i' k' ra' pc);  		continue;  	}  	case OpCode.OP_UNM: {  		TValue rb = RB (L' base_' i);  		if (ttisnumber (rb)) {  			lua_Number nb = nvalue (rb);  			setnvalue (ra' luai_numunm (nb));  		} else {  			//Protect(  			L.savedpc = InstructionPtr.Assign (pc);  			Arith (L' ra' rb' rb' TMS.TM_UNM);  			base_ = L.base_;  			//);  			L.savedpc = InstructionPtr.Assign (pc);  		}  		continue;  	}  	case OpCode.OP_NOT: {  		int res = l_isfalse (RB (L' base_' i)) == 0 ? 0 : 1;  		/* next assignment may change this value */setbvalue (ra' res);  		continue;  	}  	case OpCode.OP_LEN: {  		TValue rb = RB (L' base_' i);  		switch (ttype (rb)) {  		case LUA_TTABLE: {  			setnvalue (ra' (lua_Number)luaH_getn (hvalue (rb)));  			break;  		}  		case LUA_TSTRING: {  			setnvalue (ra' (lua_Number)tsvalue (rb).len);  			break;  		}  		default: {  			/* try metamethod *///Protect(  			L.savedpc = InstructionPtr.Assign (pc);  			if (call_binTM (L' rb' luaO_nilobject' ra' TMS.TM_LEN) == 0)  				luaG_typeerror (L' rb' "get length of");  			base_ = L.base_;  			//)  			break;  		}  		}  		continue;  	}  	case OpCode.OP_CONCAT: {  		int b = GETARG_B (i);  		int c = GETARG_C (i);  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaV_concat (L' c - b + 1' c);  		luaC_checkGC (L);  		base_ = L.base_;  		//);  		setobjs2s (L' RA (L' base_' i)' base_ + b);  		continue;  	}  	case OpCode.OP_JMP: {  		dojump (L' pc' GETARG_sBx (i));  		continue;  	}  	case OpCode.OP_EQ: {  		TValue rb = RKB (L' base_' i' k);  		TValue rc = RKC (L' base_' i' k);  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		if (equalobj (L' rb' rc) == GETARG_A (i))  			dojump (L' pc' GETARG_sBx (pc [0]));  		base_ = L.base_;  		//);  		InstructionPtr.inc (ref pc);  		continue;  	}  	case OpCode.OP_LT: {  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		if (luaV_lessthan (L' RKB (L' base_' i' k)' RKC (L' base_' i' k)) == GETARG_A (i))  			dojump (L' pc' GETARG_sBx (pc [0]));  		base_ = L.base_;  		//);  		InstructionPtr.inc (ref pc);  		continue;  	}  	case OpCode.OP_LE: {  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		if (lessequal (L' RKB (L' base_' i' k)' RKC (L' base_' i' k)) == GETARG_A (i))  			dojump (L' pc' GETARG_sBx (pc [0]));  		base_ = L.base_;  		//);  		InstructionPtr.inc (ref pc);  		continue;  	}  	case OpCode.OP_TEST: {  		if (l_isfalse (ra) != GETARG_C (i))  			dojump (L' pc' GETARG_sBx (pc [0]));  		InstructionPtr.inc (ref pc);  		continue;  	}  	case OpCode.OP_TESTSET: {  		TValue rb = RB (L' base_' i);  		if (l_isfalse (rb) != GETARG_C (i)) {  			setobjs2s (L' ra' rb);  			dojump (L' pc' GETARG_sBx (pc [0]));  		}  		InstructionPtr.inc (ref pc);  		continue;  	}  	case OpCode.OP_CALL: {  		int b = GETARG_B (i);  		int nresults = GETARG_C (i) - 1;  		if (b != 0)  			L.top = ra + b;  		/* else previous instruction set top */L.savedpc = InstructionPtr.Assign (pc);  		switch (luaD_precall (L' ra' nresults)) {  		case PCRLUA: {  			nexeccalls++;  			goto reentry;  			/* restart luaV_execute over new Lua function */}  		case PCRC: {  			/* it was a C function (`precall' called it); adjust results */if (nresults >= 0)  				L.top = L.ci.top;  			base_ = L.base_;  			continue;  		}  		default: {  			return;  			/* yield */}  		}  	}  	case OpCode.OP_TAILCALL: {  		int b = GETARG_B (i);  		if (b != 0)  			L.top = ra + b;  		/* else previous instruction set top */L.savedpc = InstructionPtr.Assign (pc);  		lua_assert (GETARG_C (i) - 1 == LUA_MULTRET);  		switch (luaD_precall (L' ra' LUA_MULTRET)) {  		case PCRLUA: {  			/* tail call: put new frame in place of previous one */CallInfo ci = L.ci - 1;  			/* previous frame */int aux;  			StkId func = ci.func;  			StkId pfunc = (ci + 1).func;  			/* previous function index */if (L.openupval != null)  				luaF_close (L' ci.base_);  			L.base_ = ci.base_ = ci.func + (ci [1].base_ - pfunc);  			for (aux = 0; pfunc + aux < L.top; aux++)  				/* move frame down */setobjs2s (L' func + aux' pfunc + aux);  			ci.top = L.top = func + aux;  			/* correct top */lua_assert (L.top == L.base_ + clvalue (func).l.p.maxstacksize);  			ci.savedpc = InstructionPtr.Assign (L.savedpc);  			ci.tailcalls++;  			/* one more call lost */CallInfo.dec (ref L.ci);  			/* remove new frame */goto reentry;  		}  		case PCRC: {  			/* it was a C function (`precall' called it) */base_ = L.base_;  			continue;  		}  		default: {  			return;  			/* yield */}  		}  	}  	case OpCode.OP_RETURN: {  		int b = GETARG_B (i);  		if (b != 0)  			L.top = ra + b - 1;  		if (L.openupval != null)  			luaF_close (L' base_);  		L.savedpc = InstructionPtr.Assign (pc);  		b = luaD_poscall (L' ra);  		if (--nexeccalls == 0)  			/* was previous function running `here'? */return;  		/* no: return */else {  			/* yes: continue its execution */if (b != 0)  				L.top = L.ci.top;  			lua_assert (isLua (L.ci));  			lua_assert (GET_OPCODE (L.ci.savedpc [-1]) == OpCode.OP_CALL);  			goto reentry;  		}  	}  	case OpCode.OP_FORLOOP: {  		lua_Number step = nvalue (ra + 2);  		lua_Number idx = luai_numadd (nvalue (ra)' step);  		/* increment index */lua_Number limit = nvalue (ra + 1);  		if (luai_numlt (0' step) ? luai_numle (idx' limit) : luai_numle (limit' idx)) {  			dojump (L' pc' GETARG_sBx (i));  			/* jump back */setnvalue (ra' idx);  			/* update internal index... */setnvalue (ra + 3' idx);  			/* ...and external index */}  		continue;  	}  	case OpCode.OP_FORPREP: {  		TValue init = ra;  		TValue plimit = ra + 1;  		TValue pstep = ra + 2;  		L.savedpc = InstructionPtr.Assign (pc);  		/* next steps may throw errors */if (tonumber (ref init' ra) == 0)  			luaG_runerror (L' LUA_QL ("for") + " initial value must be a number");  		else if (tonumber (ref plimit' ra + 1) == 0)  			luaG_runerror (L' LUA_QL ("for") + " limit must be a number");  		else if (tonumber (ref pstep' ra + 2) == 0)  			luaG_runerror (L' LUA_QL ("for") + " step must be a number");  		setnvalue (ra' luai_numsub (nvalue (ra)' nvalue (pstep)));  		dojump (L' pc' GETARG_sBx (i));  		continue;  	}  	case OpCode.OP_TFORLOOP: {  		StkId cb = ra + 3;  		/* call base */setobjs2s (L' cb + 2' ra + 2);  		setobjs2s (L' cb + 1' ra + 1);  		setobjs2s (L' cb' ra);  		L.top = cb + 3;  		/* func. + 2 args (state and index) *///Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaD_call (L' cb' GETARG_C (i));  		base_ = L.base_;  		//);  		L.top = L.ci.top;  		cb = RA (L' base_' i) + 3;  		/* previous call may change the stack */if (!ttisnil (cb)) {  			/* continue loop? */setobjs2s (L' cb - 1' cb);  			/* save control variable */dojump (L' pc' GETARG_sBx (pc [0]));  			/* jump back */}  		InstructionPtr.inc (ref pc);  		continue;  	}  	case OpCode.OP_SETLIST: {  		int n = GETARG_B (i);  		int c = GETARG_C (i);  		int last;  		Table h;  		if (n == 0) {  			n = cast_int (L.top - ra) - 1;  			L.top = L.ci.top;  		}  		if (c == 0) {  			c = cast_int (pc [0]);  			InstructionPtr.inc (ref pc);  		}  		runtime_check (L' ttistable (ra));  		h = hvalue (ra);  		last = ((c - 1) * LFIELDS_PER_FLUSH) + n;  		if (last > h.sizearray)  			/* needs more space? */luaH_resizearray (L' h' last);  		/* pre-alloc it at once */for (; n > 0; n--) {  			TValue val = ra + n;  			setobj2t (L' luaH_setnum (L' h' last--)' val);  			luaC_barriert (L' h' val);  		}  		continue;  	}  	case OpCode.OP_CLOSE: {  		luaF_close (L' ra);  		continue;  	}  	case OpCode.OP_CLOSURE: {  		Proto p;  		Closure ncl;  		int nup' j;  		p = cl.p.p [GETARG_Bx (i)];  		nup = p.nups;  		ncl = luaF_newLclosure (L' nup' cl.env);  		ncl.l.p = p;  		for (j = 0; j < nup; j++' InstructionPtr.inc (ref pc)) {  			if (GET_OPCODE (pc [0]) == OpCode.OP_GETUPVAL)  				ncl.l.upvals [j] = cl.upvals [GETARG_B (pc [0])];  			else {  				lua_assert (GET_OPCODE (pc [0]) == OpCode.OP_MOVE);  				ncl.l.upvals [j] = luaF_findupval (L' base_ + GETARG_B (pc [0]));  			}  		}  		setclvalue (L' ra' ncl);  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaC_checkGC (L);  		base_ = L.base_;  		//);  		continue;  	}  	case OpCode.OP_VARARG: {  		int b = GETARG_B (i) - 1;  		int j;  		CallInfo ci = L.ci;  		int n = cast_int (ci.base_ - ci.func) - cl.p.numparams - 1;  		if (b == LUA_MULTRET) {  			//Protect(  			L.savedpc = InstructionPtr.Assign (pc);  			luaD_checkstack (L' n);  			base_ = L.base_;  			//);  			ra = RA (L' base_' i);  			/* previous call may change the stack */b = n;  			L.top = ra + n;  		}  		for (j = 0; j < b; j++) {  			if (j < n) {  				setobjs2s (L' ra + j' ci.base_ - n + j);  			} else {  				setnilvalue (ra + j);  			}  		}  		continue;  	}  	}  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaV_execute,The following statement contains a magic number: for (; ;) {  	/*const*/Instruction i = InstructionPtr.inc (ref pc) [0];  	StkId ra;  	if (((L.hookmask & (LUA_MASKLINE | LUA_MASKCOUNT)) != 0) && (((--L.hookcount) == 0) || ((L.hookmask & LUA_MASKLINE) != 0))) {  		traceexec (L' pc);  		if (L.status == LUA_YIELD) {  			/* did hook yield? */L.savedpc = new InstructionPtr (pc.codes' pc.pc - 1);  			return;  		}  		base_ = L.base_;  	}  	/* warning!! several calls may realloc the stack and invalidate `ra' */ra = RA (L' base_' i);  	lua_assert (base_ == L.base_ && L.base_ == L.ci.base_);  	lua_assert (base_ <= L.top && ((L.top - L.stack) <= L.stacksize));  	lua_assert (L.top == L.ci.top || (luaG_checkopenop (i) != 0));  	//Dump(pc.pc' i);			  	switch (GET_OPCODE (i)) {  	case OpCode.OP_MOVE: {  		setobjs2s (L' ra' RB (L' base_' i));  		continue;  	}  	case OpCode.OP_LOADK: {  		setobj2s (L' ra' KBx (L' i' k));  		continue;  	}  	case OpCode.OP_LOADBOOL: {  		setbvalue (ra' GETARG_B (i));  		if (GETARG_C (i) != 0)  			InstructionPtr.inc (ref pc);  		/* skip next instruction (if C) */continue;  	}  	case OpCode.OP_LOADNIL: {  		TValue rb = RB (L' base_' i);  		do {  			setnilvalue (StkId.dec (ref rb));  		} while (rb >= ra);  		continue;  	}  	case OpCode.OP_GETUPVAL: {  		int b = GETARG_B (i);  		setobj2s (L' ra' cl.upvals [b].v);  		continue;  	}  	case OpCode.OP_GETGLOBAL: {  		TValue g = new TValue ();  		TValue rb = KBx (L' i' k);  		sethvalue (L' g' cl.env);  		lua_assert (ttisstring (rb));  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaV_gettable (L' g' rb' ra);  		base_ = L.base_;  		//);  		L.savedpc = InstructionPtr.Assign (pc);  		continue;  	}  	case OpCode.OP_GETTABLE: {  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaV_gettable (L' RB (L' base_' i)' RKC (L' base_' i' k)' ra);  		base_ = L.base_;  		//);  		L.savedpc = InstructionPtr.Assign (pc);  		continue;  	}  	case OpCode.OP_SETGLOBAL: {  		TValue g = new TValue ();  		sethvalue (L' g' cl.env);  		lua_assert (ttisstring (KBx (L' i' k)));  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaV_settable (L' g' KBx (L' i' k)' ra);  		base_ = L.base_;  		//);  		L.savedpc = InstructionPtr.Assign (pc);  		continue;  	}  	case OpCode.OP_SETUPVAL: {  		UpVal uv = cl.upvals [GETARG_B (i)];  		setobj (L' uv.v' ra);  		luaC_barrier (L' uv' ra);  		continue;  	}  	case OpCode.OP_SETTABLE: {  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaV_settable (L' ra' RKB (L' base_' i' k)' RKC (L' base_' i' k));  		base_ = L.base_;  		//);  		L.savedpc = InstructionPtr.Assign (pc);  		continue;  	}  	case OpCode.OP_NEWTABLE: {  		int b = GETARG_B (i);  		int c = GETARG_C (i);  		sethvalue (L' ra' luaH_new (L' luaO_fb2int (b)' luaO_fb2int (c)));  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaC_checkGC (L);  		base_ = L.base_;  		//);  		L.savedpc = InstructionPtr.Assign (pc);  		continue;  	}  	case OpCode.OP_SELF: {  		StkId rb = RB (L' base_' i);  		setobjs2s (L' ra + 1' rb);  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaV_gettable (L' rb' RKC (L' base_' i' k)' ra);  		base_ = L.base_;  		//);  		L.savedpc = InstructionPtr.Assign (pc);  		continue;  	}  	case OpCode.OP_ADD: {  		arith_op (L' luai_numadd' TMS.TM_ADD' base_' i' k' ra' pc);  		continue;  	}  	case OpCode.OP_SUB: {  		arith_op (L' luai_numsub' TMS.TM_SUB' base_' i' k' ra' pc);  		continue;  	}  	case OpCode.OP_MUL: {  		arith_op (L' luai_nummul' TMS.TM_MUL' base_' i' k' ra' pc);  		continue;  	}  	case OpCode.OP_DIV: {  		arith_op (L' luai_numdiv' TMS.TM_DIV' base_' i' k' ra' pc);  		continue;  	}  	case OpCode.OP_MOD: {  		arith_op (L' luai_nummod' TMS.TM_MOD' base_' i' k' ra' pc);  		continue;  	}  	case OpCode.OP_POW: {  		arith_op (L' luai_numpow' TMS.TM_POW' base_' i' k' ra' pc);  		continue;  	}  	case OpCode.OP_UNM: {  		TValue rb = RB (L' base_' i);  		if (ttisnumber (rb)) {  			lua_Number nb = nvalue (rb);  			setnvalue (ra' luai_numunm (nb));  		} else {  			//Protect(  			L.savedpc = InstructionPtr.Assign (pc);  			Arith (L' ra' rb' rb' TMS.TM_UNM);  			base_ = L.base_;  			//);  			L.savedpc = InstructionPtr.Assign (pc);  		}  		continue;  	}  	case OpCode.OP_NOT: {  		int res = l_isfalse (RB (L' base_' i)) == 0 ? 0 : 1;  		/* next assignment may change this value */setbvalue (ra' res);  		continue;  	}  	case OpCode.OP_LEN: {  		TValue rb = RB (L' base_' i);  		switch (ttype (rb)) {  		case LUA_TTABLE: {  			setnvalue (ra' (lua_Number)luaH_getn (hvalue (rb)));  			break;  		}  		case LUA_TSTRING: {  			setnvalue (ra' (lua_Number)tsvalue (rb).len);  			break;  		}  		default: {  			/* try metamethod *///Protect(  			L.savedpc = InstructionPtr.Assign (pc);  			if (call_binTM (L' rb' luaO_nilobject' ra' TMS.TM_LEN) == 0)  				luaG_typeerror (L' rb' "get length of");  			base_ = L.base_;  			//)  			break;  		}  		}  		continue;  	}  	case OpCode.OP_CONCAT: {  		int b = GETARG_B (i);  		int c = GETARG_C (i);  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaV_concat (L' c - b + 1' c);  		luaC_checkGC (L);  		base_ = L.base_;  		//);  		setobjs2s (L' RA (L' base_' i)' base_ + b);  		continue;  	}  	case OpCode.OP_JMP: {  		dojump (L' pc' GETARG_sBx (i));  		continue;  	}  	case OpCode.OP_EQ: {  		TValue rb = RKB (L' base_' i' k);  		TValue rc = RKC (L' base_' i' k);  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		if (equalobj (L' rb' rc) == GETARG_A (i))  			dojump (L' pc' GETARG_sBx (pc [0]));  		base_ = L.base_;  		//);  		InstructionPtr.inc (ref pc);  		continue;  	}  	case OpCode.OP_LT: {  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		if (luaV_lessthan (L' RKB (L' base_' i' k)' RKC (L' base_' i' k)) == GETARG_A (i))  			dojump (L' pc' GETARG_sBx (pc [0]));  		base_ = L.base_;  		//);  		InstructionPtr.inc (ref pc);  		continue;  	}  	case OpCode.OP_LE: {  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		if (lessequal (L' RKB (L' base_' i' k)' RKC (L' base_' i' k)) == GETARG_A (i))  			dojump (L' pc' GETARG_sBx (pc [0]));  		base_ = L.base_;  		//);  		InstructionPtr.inc (ref pc);  		continue;  	}  	case OpCode.OP_TEST: {  		if (l_isfalse (ra) != GETARG_C (i))  			dojump (L' pc' GETARG_sBx (pc [0]));  		InstructionPtr.inc (ref pc);  		continue;  	}  	case OpCode.OP_TESTSET: {  		TValue rb = RB (L' base_' i);  		if (l_isfalse (rb) != GETARG_C (i)) {  			setobjs2s (L' ra' rb);  			dojump (L' pc' GETARG_sBx (pc [0]));  		}  		InstructionPtr.inc (ref pc);  		continue;  	}  	case OpCode.OP_CALL: {  		int b = GETARG_B (i);  		int nresults = GETARG_C (i) - 1;  		if (b != 0)  			L.top = ra + b;  		/* else previous instruction set top */L.savedpc = InstructionPtr.Assign (pc);  		switch (luaD_precall (L' ra' nresults)) {  		case PCRLUA: {  			nexeccalls++;  			goto reentry;  			/* restart luaV_execute over new Lua function */}  		case PCRC: {  			/* it was a C function (`precall' called it); adjust results */if (nresults >= 0)  				L.top = L.ci.top;  			base_ = L.base_;  			continue;  		}  		default: {  			return;  			/* yield */}  		}  	}  	case OpCode.OP_TAILCALL: {  		int b = GETARG_B (i);  		if (b != 0)  			L.top = ra + b;  		/* else previous instruction set top */L.savedpc = InstructionPtr.Assign (pc);  		lua_assert (GETARG_C (i) - 1 == LUA_MULTRET);  		switch (luaD_precall (L' ra' LUA_MULTRET)) {  		case PCRLUA: {  			/* tail call: put new frame in place of previous one */CallInfo ci = L.ci - 1;  			/* previous frame */int aux;  			StkId func = ci.func;  			StkId pfunc = (ci + 1).func;  			/* previous function index */if (L.openupval != null)  				luaF_close (L' ci.base_);  			L.base_ = ci.base_ = ci.func + (ci [1].base_ - pfunc);  			for (aux = 0; pfunc + aux < L.top; aux++)  				/* move frame down */setobjs2s (L' func + aux' pfunc + aux);  			ci.top = L.top = func + aux;  			/* correct top */lua_assert (L.top == L.base_ + clvalue (func).l.p.maxstacksize);  			ci.savedpc = InstructionPtr.Assign (L.savedpc);  			ci.tailcalls++;  			/* one more call lost */CallInfo.dec (ref L.ci);  			/* remove new frame */goto reentry;  		}  		case PCRC: {  			/* it was a C function (`precall' called it) */base_ = L.base_;  			continue;  		}  		default: {  			return;  			/* yield */}  		}  	}  	case OpCode.OP_RETURN: {  		int b = GETARG_B (i);  		if (b != 0)  			L.top = ra + b - 1;  		if (L.openupval != null)  			luaF_close (L' base_);  		L.savedpc = InstructionPtr.Assign (pc);  		b = luaD_poscall (L' ra);  		if (--nexeccalls == 0)  			/* was previous function running `here'? */return;  		/* no: return */else {  			/* yes: continue its execution */if (b != 0)  				L.top = L.ci.top;  			lua_assert (isLua (L.ci));  			lua_assert (GET_OPCODE (L.ci.savedpc [-1]) == OpCode.OP_CALL);  			goto reentry;  		}  	}  	case OpCode.OP_FORLOOP: {  		lua_Number step = nvalue (ra + 2);  		lua_Number idx = luai_numadd (nvalue (ra)' step);  		/* increment index */lua_Number limit = nvalue (ra + 1);  		if (luai_numlt (0' step) ? luai_numle (idx' limit) : luai_numle (limit' idx)) {  			dojump (L' pc' GETARG_sBx (i));  			/* jump back */setnvalue (ra' idx);  			/* update internal index... */setnvalue (ra + 3' idx);  			/* ...and external index */}  		continue;  	}  	case OpCode.OP_FORPREP: {  		TValue init = ra;  		TValue plimit = ra + 1;  		TValue pstep = ra + 2;  		L.savedpc = InstructionPtr.Assign (pc);  		/* next steps may throw errors */if (tonumber (ref init' ra) == 0)  			luaG_runerror (L' LUA_QL ("for") + " initial value must be a number");  		else if (tonumber (ref plimit' ra + 1) == 0)  			luaG_runerror (L' LUA_QL ("for") + " limit must be a number");  		else if (tonumber (ref pstep' ra + 2) == 0)  			luaG_runerror (L' LUA_QL ("for") + " step must be a number");  		setnvalue (ra' luai_numsub (nvalue (ra)' nvalue (pstep)));  		dojump (L' pc' GETARG_sBx (i));  		continue;  	}  	case OpCode.OP_TFORLOOP: {  		StkId cb = ra + 3;  		/* call base */setobjs2s (L' cb + 2' ra + 2);  		setobjs2s (L' cb + 1' ra + 1);  		setobjs2s (L' cb' ra);  		L.top = cb + 3;  		/* func. + 2 args (state and index) *///Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaD_call (L' cb' GETARG_C (i));  		base_ = L.base_;  		//);  		L.top = L.ci.top;  		cb = RA (L' base_' i) + 3;  		/* previous call may change the stack */if (!ttisnil (cb)) {  			/* continue loop? */setobjs2s (L' cb - 1' cb);  			/* save control variable */dojump (L' pc' GETARG_sBx (pc [0]));  			/* jump back */}  		InstructionPtr.inc (ref pc);  		continue;  	}  	case OpCode.OP_SETLIST: {  		int n = GETARG_B (i);  		int c = GETARG_C (i);  		int last;  		Table h;  		if (n == 0) {  			n = cast_int (L.top - ra) - 1;  			L.top = L.ci.top;  		}  		if (c == 0) {  			c = cast_int (pc [0]);  			InstructionPtr.inc (ref pc);  		}  		runtime_check (L' ttistable (ra));  		h = hvalue (ra);  		last = ((c - 1) * LFIELDS_PER_FLUSH) + n;  		if (last > h.sizearray)  			/* needs more space? */luaH_resizearray (L' h' last);  		/* pre-alloc it at once */for (; n > 0; n--) {  			TValue val = ra + n;  			setobj2t (L' luaH_setnum (L' h' last--)' val);  			luaC_barriert (L' h' val);  		}  		continue;  	}  	case OpCode.OP_CLOSE: {  		luaF_close (L' ra);  		continue;  	}  	case OpCode.OP_CLOSURE: {  		Proto p;  		Closure ncl;  		int nup' j;  		p = cl.p.p [GETARG_Bx (i)];  		nup = p.nups;  		ncl = luaF_newLclosure (L' nup' cl.env);  		ncl.l.p = p;  		for (j = 0; j < nup; j++' InstructionPtr.inc (ref pc)) {  			if (GET_OPCODE (pc [0]) == OpCode.OP_GETUPVAL)  				ncl.l.upvals [j] = cl.upvals [GETARG_B (pc [0])];  			else {  				lua_assert (GET_OPCODE (pc [0]) == OpCode.OP_MOVE);  				ncl.l.upvals [j] = luaF_findupval (L' base_ + GETARG_B (pc [0]));  			}  		}  		setclvalue (L' ra' ncl);  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaC_checkGC (L);  		base_ = L.base_;  		//);  		continue;  	}  	case OpCode.OP_VARARG: {  		int b = GETARG_B (i) - 1;  		int j;  		CallInfo ci = L.ci;  		int n = cast_int (ci.base_ - ci.func) - cl.p.numparams - 1;  		if (b == LUA_MULTRET) {  			//Protect(  			L.savedpc = InstructionPtr.Assign (pc);  			luaD_checkstack (L' n);  			base_ = L.base_;  			//);  			ra = RA (L' base_' i);  			/* previous call may change the stack */b = n;  			L.top = ra + n;  		}  		for (j = 0; j < b; j++) {  			if (j < n) {  				setobjs2s (L' ra + j' ci.base_ - n + j);  			} else {  				setnilvalue (ra + j);  			}  		}  		continue;  	}  	}  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaV_execute,The following statement contains a magic number: for (; ;) {  	/*const*/Instruction i = InstructionPtr.inc (ref pc) [0];  	StkId ra;  	if (((L.hookmask & (LUA_MASKLINE | LUA_MASKCOUNT)) != 0) && (((--L.hookcount) == 0) || ((L.hookmask & LUA_MASKLINE) != 0))) {  		traceexec (L' pc);  		if (L.status == LUA_YIELD) {  			/* did hook yield? */L.savedpc = new InstructionPtr (pc.codes' pc.pc - 1);  			return;  		}  		base_ = L.base_;  	}  	/* warning!! several calls may realloc the stack and invalidate `ra' */ra = RA (L' base_' i);  	lua_assert (base_ == L.base_ && L.base_ == L.ci.base_);  	lua_assert (base_ <= L.top && ((L.top - L.stack) <= L.stacksize));  	lua_assert (L.top == L.ci.top || (luaG_checkopenop (i) != 0));  	//Dump(pc.pc' i);			  	switch (GET_OPCODE (i)) {  	case OpCode.OP_MOVE: {  		setobjs2s (L' ra' RB (L' base_' i));  		continue;  	}  	case OpCode.OP_LOADK: {  		setobj2s (L' ra' KBx (L' i' k));  		continue;  	}  	case OpCode.OP_LOADBOOL: {  		setbvalue (ra' GETARG_B (i));  		if (GETARG_C (i) != 0)  			InstructionPtr.inc (ref pc);  		/* skip next instruction (if C) */continue;  	}  	case OpCode.OP_LOADNIL: {  		TValue rb = RB (L' base_' i);  		do {  			setnilvalue (StkId.dec (ref rb));  		} while (rb >= ra);  		continue;  	}  	case OpCode.OP_GETUPVAL: {  		int b = GETARG_B (i);  		setobj2s (L' ra' cl.upvals [b].v);  		continue;  	}  	case OpCode.OP_GETGLOBAL: {  		TValue g = new TValue ();  		TValue rb = KBx (L' i' k);  		sethvalue (L' g' cl.env);  		lua_assert (ttisstring (rb));  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaV_gettable (L' g' rb' ra);  		base_ = L.base_;  		//);  		L.savedpc = InstructionPtr.Assign (pc);  		continue;  	}  	case OpCode.OP_GETTABLE: {  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaV_gettable (L' RB (L' base_' i)' RKC (L' base_' i' k)' ra);  		base_ = L.base_;  		//);  		L.savedpc = InstructionPtr.Assign (pc);  		continue;  	}  	case OpCode.OP_SETGLOBAL: {  		TValue g = new TValue ();  		sethvalue (L' g' cl.env);  		lua_assert (ttisstring (KBx (L' i' k)));  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaV_settable (L' g' KBx (L' i' k)' ra);  		base_ = L.base_;  		//);  		L.savedpc = InstructionPtr.Assign (pc);  		continue;  	}  	case OpCode.OP_SETUPVAL: {  		UpVal uv = cl.upvals [GETARG_B (i)];  		setobj (L' uv.v' ra);  		luaC_barrier (L' uv' ra);  		continue;  	}  	case OpCode.OP_SETTABLE: {  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaV_settable (L' ra' RKB (L' base_' i' k)' RKC (L' base_' i' k));  		base_ = L.base_;  		//);  		L.savedpc = InstructionPtr.Assign (pc);  		continue;  	}  	case OpCode.OP_NEWTABLE: {  		int b = GETARG_B (i);  		int c = GETARG_C (i);  		sethvalue (L' ra' luaH_new (L' luaO_fb2int (b)' luaO_fb2int (c)));  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaC_checkGC (L);  		base_ = L.base_;  		//);  		L.savedpc = InstructionPtr.Assign (pc);  		continue;  	}  	case OpCode.OP_SELF: {  		StkId rb = RB (L' base_' i);  		setobjs2s (L' ra + 1' rb);  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaV_gettable (L' rb' RKC (L' base_' i' k)' ra);  		base_ = L.base_;  		//);  		L.savedpc = InstructionPtr.Assign (pc);  		continue;  	}  	case OpCode.OP_ADD: {  		arith_op (L' luai_numadd' TMS.TM_ADD' base_' i' k' ra' pc);  		continue;  	}  	case OpCode.OP_SUB: {  		arith_op (L' luai_numsub' TMS.TM_SUB' base_' i' k' ra' pc);  		continue;  	}  	case OpCode.OP_MUL: {  		arith_op (L' luai_nummul' TMS.TM_MUL' base_' i' k' ra' pc);  		continue;  	}  	case OpCode.OP_DIV: {  		arith_op (L' luai_numdiv' TMS.TM_DIV' base_' i' k' ra' pc);  		continue;  	}  	case OpCode.OP_MOD: {  		arith_op (L' luai_nummod' TMS.TM_MOD' base_' i' k' ra' pc);  		continue;  	}  	case OpCode.OP_POW: {  		arith_op (L' luai_numpow' TMS.TM_POW' base_' i' k' ra' pc);  		continue;  	}  	case OpCode.OP_UNM: {  		TValue rb = RB (L' base_' i);  		if (ttisnumber (rb)) {  			lua_Number nb = nvalue (rb);  			setnvalue (ra' luai_numunm (nb));  		} else {  			//Protect(  			L.savedpc = InstructionPtr.Assign (pc);  			Arith (L' ra' rb' rb' TMS.TM_UNM);  			base_ = L.base_;  			//);  			L.savedpc = InstructionPtr.Assign (pc);  		}  		continue;  	}  	case OpCode.OP_NOT: {  		int res = l_isfalse (RB (L' base_' i)) == 0 ? 0 : 1;  		/* next assignment may change this value */setbvalue (ra' res);  		continue;  	}  	case OpCode.OP_LEN: {  		TValue rb = RB (L' base_' i);  		switch (ttype (rb)) {  		case LUA_TTABLE: {  			setnvalue (ra' (lua_Number)luaH_getn (hvalue (rb)));  			break;  		}  		case LUA_TSTRING: {  			setnvalue (ra' (lua_Number)tsvalue (rb).len);  			break;  		}  		default: {  			/* try metamethod *///Protect(  			L.savedpc = InstructionPtr.Assign (pc);  			if (call_binTM (L' rb' luaO_nilobject' ra' TMS.TM_LEN) == 0)  				luaG_typeerror (L' rb' "get length of");  			base_ = L.base_;  			//)  			break;  		}  		}  		continue;  	}  	case OpCode.OP_CONCAT: {  		int b = GETARG_B (i);  		int c = GETARG_C (i);  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaV_concat (L' c - b + 1' c);  		luaC_checkGC (L);  		base_ = L.base_;  		//);  		setobjs2s (L' RA (L' base_' i)' base_ + b);  		continue;  	}  	case OpCode.OP_JMP: {  		dojump (L' pc' GETARG_sBx (i));  		continue;  	}  	case OpCode.OP_EQ: {  		TValue rb = RKB (L' base_' i' k);  		TValue rc = RKC (L' base_' i' k);  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		if (equalobj (L' rb' rc) == GETARG_A (i))  			dojump (L' pc' GETARG_sBx (pc [0]));  		base_ = L.base_;  		//);  		InstructionPtr.inc (ref pc);  		continue;  	}  	case OpCode.OP_LT: {  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		if (luaV_lessthan (L' RKB (L' base_' i' k)' RKC (L' base_' i' k)) == GETARG_A (i))  			dojump (L' pc' GETARG_sBx (pc [0]));  		base_ = L.base_;  		//);  		InstructionPtr.inc (ref pc);  		continue;  	}  	case OpCode.OP_LE: {  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		if (lessequal (L' RKB (L' base_' i' k)' RKC (L' base_' i' k)) == GETARG_A (i))  			dojump (L' pc' GETARG_sBx (pc [0]));  		base_ = L.base_;  		//);  		InstructionPtr.inc (ref pc);  		continue;  	}  	case OpCode.OP_TEST: {  		if (l_isfalse (ra) != GETARG_C (i))  			dojump (L' pc' GETARG_sBx (pc [0]));  		InstructionPtr.inc (ref pc);  		continue;  	}  	case OpCode.OP_TESTSET: {  		TValue rb = RB (L' base_' i);  		if (l_isfalse (rb) != GETARG_C (i)) {  			setobjs2s (L' ra' rb);  			dojump (L' pc' GETARG_sBx (pc [0]));  		}  		InstructionPtr.inc (ref pc);  		continue;  	}  	case OpCode.OP_CALL: {  		int b = GETARG_B (i);  		int nresults = GETARG_C (i) - 1;  		if (b != 0)  			L.top = ra + b;  		/* else previous instruction set top */L.savedpc = InstructionPtr.Assign (pc);  		switch (luaD_precall (L' ra' nresults)) {  		case PCRLUA: {  			nexeccalls++;  			goto reentry;  			/* restart luaV_execute over new Lua function */}  		case PCRC: {  			/* it was a C function (`precall' called it); adjust results */if (nresults >= 0)  				L.top = L.ci.top;  			base_ = L.base_;  			continue;  		}  		default: {  			return;  			/* yield */}  		}  	}  	case OpCode.OP_TAILCALL: {  		int b = GETARG_B (i);  		if (b != 0)  			L.top = ra + b;  		/* else previous instruction set top */L.savedpc = InstructionPtr.Assign (pc);  		lua_assert (GETARG_C (i) - 1 == LUA_MULTRET);  		switch (luaD_precall (L' ra' LUA_MULTRET)) {  		case PCRLUA: {  			/* tail call: put new frame in place of previous one */CallInfo ci = L.ci - 1;  			/* previous frame */int aux;  			StkId func = ci.func;  			StkId pfunc = (ci + 1).func;  			/* previous function index */if (L.openupval != null)  				luaF_close (L' ci.base_);  			L.base_ = ci.base_ = ci.func + (ci [1].base_ - pfunc);  			for (aux = 0; pfunc + aux < L.top; aux++)  				/* move frame down */setobjs2s (L' func + aux' pfunc + aux);  			ci.top = L.top = func + aux;  			/* correct top */lua_assert (L.top == L.base_ + clvalue (func).l.p.maxstacksize);  			ci.savedpc = InstructionPtr.Assign (L.savedpc);  			ci.tailcalls++;  			/* one more call lost */CallInfo.dec (ref L.ci);  			/* remove new frame */goto reentry;  		}  		case PCRC: {  			/* it was a C function (`precall' called it) */base_ = L.base_;  			continue;  		}  		default: {  			return;  			/* yield */}  		}  	}  	case OpCode.OP_RETURN: {  		int b = GETARG_B (i);  		if (b != 0)  			L.top = ra + b - 1;  		if (L.openupval != null)  			luaF_close (L' base_);  		L.savedpc = InstructionPtr.Assign (pc);  		b = luaD_poscall (L' ra);  		if (--nexeccalls == 0)  			/* was previous function running `here'? */return;  		/* no: return */else {  			/* yes: continue its execution */if (b != 0)  				L.top = L.ci.top;  			lua_assert (isLua (L.ci));  			lua_assert (GET_OPCODE (L.ci.savedpc [-1]) == OpCode.OP_CALL);  			goto reentry;  		}  	}  	case OpCode.OP_FORLOOP: {  		lua_Number step = nvalue (ra + 2);  		lua_Number idx = luai_numadd (nvalue (ra)' step);  		/* increment index */lua_Number limit = nvalue (ra + 1);  		if (luai_numlt (0' step) ? luai_numle (idx' limit) : luai_numle (limit' idx)) {  			dojump (L' pc' GETARG_sBx (i));  			/* jump back */setnvalue (ra' idx);  			/* update internal index... */setnvalue (ra + 3' idx);  			/* ...and external index */}  		continue;  	}  	case OpCode.OP_FORPREP: {  		TValue init = ra;  		TValue plimit = ra + 1;  		TValue pstep = ra + 2;  		L.savedpc = InstructionPtr.Assign (pc);  		/* next steps may throw errors */if (tonumber (ref init' ra) == 0)  			luaG_runerror (L' LUA_QL ("for") + " initial value must be a number");  		else if (tonumber (ref plimit' ra + 1) == 0)  			luaG_runerror (L' LUA_QL ("for") + " limit must be a number");  		else if (tonumber (ref pstep' ra + 2) == 0)  			luaG_runerror (L' LUA_QL ("for") + " step must be a number");  		setnvalue (ra' luai_numsub (nvalue (ra)' nvalue (pstep)));  		dojump (L' pc' GETARG_sBx (i));  		continue;  	}  	case OpCode.OP_TFORLOOP: {  		StkId cb = ra + 3;  		/* call base */setobjs2s (L' cb + 2' ra + 2);  		setobjs2s (L' cb + 1' ra + 1);  		setobjs2s (L' cb' ra);  		L.top = cb + 3;  		/* func. + 2 args (state and index) *///Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaD_call (L' cb' GETARG_C (i));  		base_ = L.base_;  		//);  		L.top = L.ci.top;  		cb = RA (L' base_' i) + 3;  		/* previous call may change the stack */if (!ttisnil (cb)) {  			/* continue loop? */setobjs2s (L' cb - 1' cb);  			/* save control variable */dojump (L' pc' GETARG_sBx (pc [0]));  			/* jump back */}  		InstructionPtr.inc (ref pc);  		continue;  	}  	case OpCode.OP_SETLIST: {  		int n = GETARG_B (i);  		int c = GETARG_C (i);  		int last;  		Table h;  		if (n == 0) {  			n = cast_int (L.top - ra) - 1;  			L.top = L.ci.top;  		}  		if (c == 0) {  			c = cast_int (pc [0]);  			InstructionPtr.inc (ref pc);  		}  		runtime_check (L' ttistable (ra));  		h = hvalue (ra);  		last = ((c - 1) * LFIELDS_PER_FLUSH) + n;  		if (last > h.sizearray)  			/* needs more space? */luaH_resizearray (L' h' last);  		/* pre-alloc it at once */for (; n > 0; n--) {  			TValue val = ra + n;  			setobj2t (L' luaH_setnum (L' h' last--)' val);  			luaC_barriert (L' h' val);  		}  		continue;  	}  	case OpCode.OP_CLOSE: {  		luaF_close (L' ra);  		continue;  	}  	case OpCode.OP_CLOSURE: {  		Proto p;  		Closure ncl;  		int nup' j;  		p = cl.p.p [GETARG_Bx (i)];  		nup = p.nups;  		ncl = luaF_newLclosure (L' nup' cl.env);  		ncl.l.p = p;  		for (j = 0; j < nup; j++' InstructionPtr.inc (ref pc)) {  			if (GET_OPCODE (pc [0]) == OpCode.OP_GETUPVAL)  				ncl.l.upvals [j] = cl.upvals [GETARG_B (pc [0])];  			else {  				lua_assert (GET_OPCODE (pc [0]) == OpCode.OP_MOVE);  				ncl.l.upvals [j] = luaF_findupval (L' base_ + GETARG_B (pc [0]));  			}  		}  		setclvalue (L' ra' ncl);  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaC_checkGC (L);  		base_ = L.base_;  		//);  		continue;  	}  	case OpCode.OP_VARARG: {  		int b = GETARG_B (i) - 1;  		int j;  		CallInfo ci = L.ci;  		int n = cast_int (ci.base_ - ci.func) - cl.p.numparams - 1;  		if (b == LUA_MULTRET) {  			//Protect(  			L.savedpc = InstructionPtr.Assign (pc);  			luaD_checkstack (L' n);  			base_ = L.base_;  			//);  			ra = RA (L' base_' i);  			/* previous call may change the stack */b = n;  			L.top = ra + n;  		}  		for (j = 0; j < b; j++) {  			if (j < n) {  				setobjs2s (L' ra + j' ci.base_ - n + j);  			} else {  				setnilvalue (ra + j);  			}  		}  		continue;  	}  	}  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaV_execute,The following statement contains a magic number: for (; ;) {  	/*const*/Instruction i = InstructionPtr.inc (ref pc) [0];  	StkId ra;  	if (((L.hookmask & (LUA_MASKLINE | LUA_MASKCOUNT)) != 0) && (((--L.hookcount) == 0) || ((L.hookmask & LUA_MASKLINE) != 0))) {  		traceexec (L' pc);  		if (L.status == LUA_YIELD) {  			/* did hook yield? */L.savedpc = new InstructionPtr (pc.codes' pc.pc - 1);  			return;  		}  		base_ = L.base_;  	}  	/* warning!! several calls may realloc the stack and invalidate `ra' */ra = RA (L' base_' i);  	lua_assert (base_ == L.base_ && L.base_ == L.ci.base_);  	lua_assert (base_ <= L.top && ((L.top - L.stack) <= L.stacksize));  	lua_assert (L.top == L.ci.top || (luaG_checkopenop (i) != 0));  	//Dump(pc.pc' i);			  	switch (GET_OPCODE (i)) {  	case OpCode.OP_MOVE: {  		setobjs2s (L' ra' RB (L' base_' i));  		continue;  	}  	case OpCode.OP_LOADK: {  		setobj2s (L' ra' KBx (L' i' k));  		continue;  	}  	case OpCode.OP_LOADBOOL: {  		setbvalue (ra' GETARG_B (i));  		if (GETARG_C (i) != 0)  			InstructionPtr.inc (ref pc);  		/* skip next instruction (if C) */continue;  	}  	case OpCode.OP_LOADNIL: {  		TValue rb = RB (L' base_' i);  		do {  			setnilvalue (StkId.dec (ref rb));  		} while (rb >= ra);  		continue;  	}  	case OpCode.OP_GETUPVAL: {  		int b = GETARG_B (i);  		setobj2s (L' ra' cl.upvals [b].v);  		continue;  	}  	case OpCode.OP_GETGLOBAL: {  		TValue g = new TValue ();  		TValue rb = KBx (L' i' k);  		sethvalue (L' g' cl.env);  		lua_assert (ttisstring (rb));  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaV_gettable (L' g' rb' ra);  		base_ = L.base_;  		//);  		L.savedpc = InstructionPtr.Assign (pc);  		continue;  	}  	case OpCode.OP_GETTABLE: {  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaV_gettable (L' RB (L' base_' i)' RKC (L' base_' i' k)' ra);  		base_ = L.base_;  		//);  		L.savedpc = InstructionPtr.Assign (pc);  		continue;  	}  	case OpCode.OP_SETGLOBAL: {  		TValue g = new TValue ();  		sethvalue (L' g' cl.env);  		lua_assert (ttisstring (KBx (L' i' k)));  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaV_settable (L' g' KBx (L' i' k)' ra);  		base_ = L.base_;  		//);  		L.savedpc = InstructionPtr.Assign (pc);  		continue;  	}  	case OpCode.OP_SETUPVAL: {  		UpVal uv = cl.upvals [GETARG_B (i)];  		setobj (L' uv.v' ra);  		luaC_barrier (L' uv' ra);  		continue;  	}  	case OpCode.OP_SETTABLE: {  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaV_settable (L' ra' RKB (L' base_' i' k)' RKC (L' base_' i' k));  		base_ = L.base_;  		//);  		L.savedpc = InstructionPtr.Assign (pc);  		continue;  	}  	case OpCode.OP_NEWTABLE: {  		int b = GETARG_B (i);  		int c = GETARG_C (i);  		sethvalue (L' ra' luaH_new (L' luaO_fb2int (b)' luaO_fb2int (c)));  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaC_checkGC (L);  		base_ = L.base_;  		//);  		L.savedpc = InstructionPtr.Assign (pc);  		continue;  	}  	case OpCode.OP_SELF: {  		StkId rb = RB (L' base_' i);  		setobjs2s (L' ra + 1' rb);  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaV_gettable (L' rb' RKC (L' base_' i' k)' ra);  		base_ = L.base_;  		//);  		L.savedpc = InstructionPtr.Assign (pc);  		continue;  	}  	case OpCode.OP_ADD: {  		arith_op (L' luai_numadd' TMS.TM_ADD' base_' i' k' ra' pc);  		continue;  	}  	case OpCode.OP_SUB: {  		arith_op (L' luai_numsub' TMS.TM_SUB' base_' i' k' ra' pc);  		continue;  	}  	case OpCode.OP_MUL: {  		arith_op (L' luai_nummul' TMS.TM_MUL' base_' i' k' ra' pc);  		continue;  	}  	case OpCode.OP_DIV: {  		arith_op (L' luai_numdiv' TMS.TM_DIV' base_' i' k' ra' pc);  		continue;  	}  	case OpCode.OP_MOD: {  		arith_op (L' luai_nummod' TMS.TM_MOD' base_' i' k' ra' pc);  		continue;  	}  	case OpCode.OP_POW: {  		arith_op (L' luai_numpow' TMS.TM_POW' base_' i' k' ra' pc);  		continue;  	}  	case OpCode.OP_UNM: {  		TValue rb = RB (L' base_' i);  		if (ttisnumber (rb)) {  			lua_Number nb = nvalue (rb);  			setnvalue (ra' luai_numunm (nb));  		} else {  			//Protect(  			L.savedpc = InstructionPtr.Assign (pc);  			Arith (L' ra' rb' rb' TMS.TM_UNM);  			base_ = L.base_;  			//);  			L.savedpc = InstructionPtr.Assign (pc);  		}  		continue;  	}  	case OpCode.OP_NOT: {  		int res = l_isfalse (RB (L' base_' i)) == 0 ? 0 : 1;  		/* next assignment may change this value */setbvalue (ra' res);  		continue;  	}  	case OpCode.OP_LEN: {  		TValue rb = RB (L' base_' i);  		switch (ttype (rb)) {  		case LUA_TTABLE: {  			setnvalue (ra' (lua_Number)luaH_getn (hvalue (rb)));  			break;  		}  		case LUA_TSTRING: {  			setnvalue (ra' (lua_Number)tsvalue (rb).len);  			break;  		}  		default: {  			/* try metamethod *///Protect(  			L.savedpc = InstructionPtr.Assign (pc);  			if (call_binTM (L' rb' luaO_nilobject' ra' TMS.TM_LEN) == 0)  				luaG_typeerror (L' rb' "get length of");  			base_ = L.base_;  			//)  			break;  		}  		}  		continue;  	}  	case OpCode.OP_CONCAT: {  		int b = GETARG_B (i);  		int c = GETARG_C (i);  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaV_concat (L' c - b + 1' c);  		luaC_checkGC (L);  		base_ = L.base_;  		//);  		setobjs2s (L' RA (L' base_' i)' base_ + b);  		continue;  	}  	case OpCode.OP_JMP: {  		dojump (L' pc' GETARG_sBx (i));  		continue;  	}  	case OpCode.OP_EQ: {  		TValue rb = RKB (L' base_' i' k);  		TValue rc = RKC (L' base_' i' k);  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		if (equalobj (L' rb' rc) == GETARG_A (i))  			dojump (L' pc' GETARG_sBx (pc [0]));  		base_ = L.base_;  		//);  		InstructionPtr.inc (ref pc);  		continue;  	}  	case OpCode.OP_LT: {  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		if (luaV_lessthan (L' RKB (L' base_' i' k)' RKC (L' base_' i' k)) == GETARG_A (i))  			dojump (L' pc' GETARG_sBx (pc [0]));  		base_ = L.base_;  		//);  		InstructionPtr.inc (ref pc);  		continue;  	}  	case OpCode.OP_LE: {  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		if (lessequal (L' RKB (L' base_' i' k)' RKC (L' base_' i' k)) == GETARG_A (i))  			dojump (L' pc' GETARG_sBx (pc [0]));  		base_ = L.base_;  		//);  		InstructionPtr.inc (ref pc);  		continue;  	}  	case OpCode.OP_TEST: {  		if (l_isfalse (ra) != GETARG_C (i))  			dojump (L' pc' GETARG_sBx (pc [0]));  		InstructionPtr.inc (ref pc);  		continue;  	}  	case OpCode.OP_TESTSET: {  		TValue rb = RB (L' base_' i);  		if (l_isfalse (rb) != GETARG_C (i)) {  			setobjs2s (L' ra' rb);  			dojump (L' pc' GETARG_sBx (pc [0]));  		}  		InstructionPtr.inc (ref pc);  		continue;  	}  	case OpCode.OP_CALL: {  		int b = GETARG_B (i);  		int nresults = GETARG_C (i) - 1;  		if (b != 0)  			L.top = ra + b;  		/* else previous instruction set top */L.savedpc = InstructionPtr.Assign (pc);  		switch (luaD_precall (L' ra' nresults)) {  		case PCRLUA: {  			nexeccalls++;  			goto reentry;  			/* restart luaV_execute over new Lua function */}  		case PCRC: {  			/* it was a C function (`precall' called it); adjust results */if (nresults >= 0)  				L.top = L.ci.top;  			base_ = L.base_;  			continue;  		}  		default: {  			return;  			/* yield */}  		}  	}  	case OpCode.OP_TAILCALL: {  		int b = GETARG_B (i);  		if (b != 0)  			L.top = ra + b;  		/* else previous instruction set top */L.savedpc = InstructionPtr.Assign (pc);  		lua_assert (GETARG_C (i) - 1 == LUA_MULTRET);  		switch (luaD_precall (L' ra' LUA_MULTRET)) {  		case PCRLUA: {  			/* tail call: put new frame in place of previous one */CallInfo ci = L.ci - 1;  			/* previous frame */int aux;  			StkId func = ci.func;  			StkId pfunc = (ci + 1).func;  			/* previous function index */if (L.openupval != null)  				luaF_close (L' ci.base_);  			L.base_ = ci.base_ = ci.func + (ci [1].base_ - pfunc);  			for (aux = 0; pfunc + aux < L.top; aux++)  				/* move frame down */setobjs2s (L' func + aux' pfunc + aux);  			ci.top = L.top = func + aux;  			/* correct top */lua_assert (L.top == L.base_ + clvalue (func).l.p.maxstacksize);  			ci.savedpc = InstructionPtr.Assign (L.savedpc);  			ci.tailcalls++;  			/* one more call lost */CallInfo.dec (ref L.ci);  			/* remove new frame */goto reentry;  		}  		case PCRC: {  			/* it was a C function (`precall' called it) */base_ = L.base_;  			continue;  		}  		default: {  			return;  			/* yield */}  		}  	}  	case OpCode.OP_RETURN: {  		int b = GETARG_B (i);  		if (b != 0)  			L.top = ra + b - 1;  		if (L.openupval != null)  			luaF_close (L' base_);  		L.savedpc = InstructionPtr.Assign (pc);  		b = luaD_poscall (L' ra);  		if (--nexeccalls == 0)  			/* was previous function running `here'? */return;  		/* no: return */else {  			/* yes: continue its execution */if (b != 0)  				L.top = L.ci.top;  			lua_assert (isLua (L.ci));  			lua_assert (GET_OPCODE (L.ci.savedpc [-1]) == OpCode.OP_CALL);  			goto reentry;  		}  	}  	case OpCode.OP_FORLOOP: {  		lua_Number step = nvalue (ra + 2);  		lua_Number idx = luai_numadd (nvalue (ra)' step);  		/* increment index */lua_Number limit = nvalue (ra + 1);  		if (luai_numlt (0' step) ? luai_numle (idx' limit) : luai_numle (limit' idx)) {  			dojump (L' pc' GETARG_sBx (i));  			/* jump back */setnvalue (ra' idx);  			/* update internal index... */setnvalue (ra + 3' idx);  			/* ...and external index */}  		continue;  	}  	case OpCode.OP_FORPREP: {  		TValue init = ra;  		TValue plimit = ra + 1;  		TValue pstep = ra + 2;  		L.savedpc = InstructionPtr.Assign (pc);  		/* next steps may throw errors */if (tonumber (ref init' ra) == 0)  			luaG_runerror (L' LUA_QL ("for") + " initial value must be a number");  		else if (tonumber (ref plimit' ra + 1) == 0)  			luaG_runerror (L' LUA_QL ("for") + " limit must be a number");  		else if (tonumber (ref pstep' ra + 2) == 0)  			luaG_runerror (L' LUA_QL ("for") + " step must be a number");  		setnvalue (ra' luai_numsub (nvalue (ra)' nvalue (pstep)));  		dojump (L' pc' GETARG_sBx (i));  		continue;  	}  	case OpCode.OP_TFORLOOP: {  		StkId cb = ra + 3;  		/* call base */setobjs2s (L' cb + 2' ra + 2);  		setobjs2s (L' cb + 1' ra + 1);  		setobjs2s (L' cb' ra);  		L.top = cb + 3;  		/* func. + 2 args (state and index) *///Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaD_call (L' cb' GETARG_C (i));  		base_ = L.base_;  		//);  		L.top = L.ci.top;  		cb = RA (L' base_' i) + 3;  		/* previous call may change the stack */if (!ttisnil (cb)) {  			/* continue loop? */setobjs2s (L' cb - 1' cb);  			/* save control variable */dojump (L' pc' GETARG_sBx (pc [0]));  			/* jump back */}  		InstructionPtr.inc (ref pc);  		continue;  	}  	case OpCode.OP_SETLIST: {  		int n = GETARG_B (i);  		int c = GETARG_C (i);  		int last;  		Table h;  		if (n == 0) {  			n = cast_int (L.top - ra) - 1;  			L.top = L.ci.top;  		}  		if (c == 0) {  			c = cast_int (pc [0]);  			InstructionPtr.inc (ref pc);  		}  		runtime_check (L' ttistable (ra));  		h = hvalue (ra);  		last = ((c - 1) * LFIELDS_PER_FLUSH) + n;  		if (last > h.sizearray)  			/* needs more space? */luaH_resizearray (L' h' last);  		/* pre-alloc it at once */for (; n > 0; n--) {  			TValue val = ra + n;  			setobj2t (L' luaH_setnum (L' h' last--)' val);  			luaC_barriert (L' h' val);  		}  		continue;  	}  	case OpCode.OP_CLOSE: {  		luaF_close (L' ra);  		continue;  	}  	case OpCode.OP_CLOSURE: {  		Proto p;  		Closure ncl;  		int nup' j;  		p = cl.p.p [GETARG_Bx (i)];  		nup = p.nups;  		ncl = luaF_newLclosure (L' nup' cl.env);  		ncl.l.p = p;  		for (j = 0; j < nup; j++' InstructionPtr.inc (ref pc)) {  			if (GET_OPCODE (pc [0]) == OpCode.OP_GETUPVAL)  				ncl.l.upvals [j] = cl.upvals [GETARG_B (pc [0])];  			else {  				lua_assert (GET_OPCODE (pc [0]) == OpCode.OP_MOVE);  				ncl.l.upvals [j] = luaF_findupval (L' base_ + GETARG_B (pc [0]));  			}  		}  		setclvalue (L' ra' ncl);  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaC_checkGC (L);  		base_ = L.base_;  		//);  		continue;  	}  	case OpCode.OP_VARARG: {  		int b = GETARG_B (i) - 1;  		int j;  		CallInfo ci = L.ci;  		int n = cast_int (ci.base_ - ci.func) - cl.p.numparams - 1;  		if (b == LUA_MULTRET) {  			//Protect(  			L.savedpc = InstructionPtr.Assign (pc);  			luaD_checkstack (L' n);  			base_ = L.base_;  			//);  			ra = RA (L' base_' i);  			/* previous call may change the stack */b = n;  			L.top = ra + n;  		}  		for (j = 0; j < b; j++) {  			if (j < n) {  				setobjs2s (L' ra + j' ci.base_ - n + j);  			} else {  				setnilvalue (ra + j);  			}  		}  		continue;  	}  	}  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaV_execute,The following statement contains a magic number: switch (GET_OPCODE (i)) {  case OpCode.OP_MOVE: {  	setobjs2s (L' ra' RB (L' base_' i));  	continue;  }  case OpCode.OP_LOADK: {  	setobj2s (L' ra' KBx (L' i' k));  	continue;  }  case OpCode.OP_LOADBOOL: {  	setbvalue (ra' GETARG_B (i));  	if (GETARG_C (i) != 0)  		InstructionPtr.inc (ref pc);  	/* skip next instruction (if C) */continue;  }  case OpCode.OP_LOADNIL: {  	TValue rb = RB (L' base_' i);  	do {  		setnilvalue (StkId.dec (ref rb));  	} while (rb >= ra);  	continue;  }  case OpCode.OP_GETUPVAL: {  	int b = GETARG_B (i);  	setobj2s (L' ra' cl.upvals [b].v);  	continue;  }  case OpCode.OP_GETGLOBAL: {  	TValue g = new TValue ();  	TValue rb = KBx (L' i' k);  	sethvalue (L' g' cl.env);  	lua_assert (ttisstring (rb));  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaV_gettable (L' g' rb' ra);  	base_ = L.base_;  	//);  	L.savedpc = InstructionPtr.Assign (pc);  	continue;  }  case OpCode.OP_GETTABLE: {  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaV_gettable (L' RB (L' base_' i)' RKC (L' base_' i' k)' ra);  	base_ = L.base_;  	//);  	L.savedpc = InstructionPtr.Assign (pc);  	continue;  }  case OpCode.OP_SETGLOBAL: {  	TValue g = new TValue ();  	sethvalue (L' g' cl.env);  	lua_assert (ttisstring (KBx (L' i' k)));  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaV_settable (L' g' KBx (L' i' k)' ra);  	base_ = L.base_;  	//);  	L.savedpc = InstructionPtr.Assign (pc);  	continue;  }  case OpCode.OP_SETUPVAL: {  	UpVal uv = cl.upvals [GETARG_B (i)];  	setobj (L' uv.v' ra);  	luaC_barrier (L' uv' ra);  	continue;  }  case OpCode.OP_SETTABLE: {  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaV_settable (L' ra' RKB (L' base_' i' k)' RKC (L' base_' i' k));  	base_ = L.base_;  	//);  	L.savedpc = InstructionPtr.Assign (pc);  	continue;  }  case OpCode.OP_NEWTABLE: {  	int b = GETARG_B (i);  	int c = GETARG_C (i);  	sethvalue (L' ra' luaH_new (L' luaO_fb2int (b)' luaO_fb2int (c)));  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaC_checkGC (L);  	base_ = L.base_;  	//);  	L.savedpc = InstructionPtr.Assign (pc);  	continue;  }  case OpCode.OP_SELF: {  	StkId rb = RB (L' base_' i);  	setobjs2s (L' ra + 1' rb);  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaV_gettable (L' rb' RKC (L' base_' i' k)' ra);  	base_ = L.base_;  	//);  	L.savedpc = InstructionPtr.Assign (pc);  	continue;  }  case OpCode.OP_ADD: {  	arith_op (L' luai_numadd' TMS.TM_ADD' base_' i' k' ra' pc);  	continue;  }  case OpCode.OP_SUB: {  	arith_op (L' luai_numsub' TMS.TM_SUB' base_' i' k' ra' pc);  	continue;  }  case OpCode.OP_MUL: {  	arith_op (L' luai_nummul' TMS.TM_MUL' base_' i' k' ra' pc);  	continue;  }  case OpCode.OP_DIV: {  	arith_op (L' luai_numdiv' TMS.TM_DIV' base_' i' k' ra' pc);  	continue;  }  case OpCode.OP_MOD: {  	arith_op (L' luai_nummod' TMS.TM_MOD' base_' i' k' ra' pc);  	continue;  }  case OpCode.OP_POW: {  	arith_op (L' luai_numpow' TMS.TM_POW' base_' i' k' ra' pc);  	continue;  }  case OpCode.OP_UNM: {  	TValue rb = RB (L' base_' i);  	if (ttisnumber (rb)) {  		lua_Number nb = nvalue (rb);  		setnvalue (ra' luai_numunm (nb));  	} else {  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		Arith (L' ra' rb' rb' TMS.TM_UNM);  		base_ = L.base_;  		//);  		L.savedpc = InstructionPtr.Assign (pc);  	}  	continue;  }  case OpCode.OP_NOT: {  	int res = l_isfalse (RB (L' base_' i)) == 0 ? 0 : 1;  	/* next assignment may change this value */setbvalue (ra' res);  	continue;  }  case OpCode.OP_LEN: {  	TValue rb = RB (L' base_' i);  	switch (ttype (rb)) {  	case LUA_TTABLE: {  		setnvalue (ra' (lua_Number)luaH_getn (hvalue (rb)));  		break;  	}  	case LUA_TSTRING: {  		setnvalue (ra' (lua_Number)tsvalue (rb).len);  		break;  	}  	default: {  		/* try metamethod *///Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		if (call_binTM (L' rb' luaO_nilobject' ra' TMS.TM_LEN) == 0)  			luaG_typeerror (L' rb' "get length of");  		base_ = L.base_;  		//)  		break;  	}  	}  	continue;  }  case OpCode.OP_CONCAT: {  	int b = GETARG_B (i);  	int c = GETARG_C (i);  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaV_concat (L' c - b + 1' c);  	luaC_checkGC (L);  	base_ = L.base_;  	//);  	setobjs2s (L' RA (L' base_' i)' base_ + b);  	continue;  }  case OpCode.OP_JMP: {  	dojump (L' pc' GETARG_sBx (i));  	continue;  }  case OpCode.OP_EQ: {  	TValue rb = RKB (L' base_' i' k);  	TValue rc = RKC (L' base_' i' k);  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	if (equalobj (L' rb' rc) == GETARG_A (i))  		dojump (L' pc' GETARG_sBx (pc [0]));  	base_ = L.base_;  	//);  	InstructionPtr.inc (ref pc);  	continue;  }  case OpCode.OP_LT: {  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	if (luaV_lessthan (L' RKB (L' base_' i' k)' RKC (L' base_' i' k)) == GETARG_A (i))  		dojump (L' pc' GETARG_sBx (pc [0]));  	base_ = L.base_;  	//);  	InstructionPtr.inc (ref pc);  	continue;  }  case OpCode.OP_LE: {  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	if (lessequal (L' RKB (L' base_' i' k)' RKC (L' base_' i' k)) == GETARG_A (i))  		dojump (L' pc' GETARG_sBx (pc [0]));  	base_ = L.base_;  	//);  	InstructionPtr.inc (ref pc);  	continue;  }  case OpCode.OP_TEST: {  	if (l_isfalse (ra) != GETARG_C (i))  		dojump (L' pc' GETARG_sBx (pc [0]));  	InstructionPtr.inc (ref pc);  	continue;  }  case OpCode.OP_TESTSET: {  	TValue rb = RB (L' base_' i);  	if (l_isfalse (rb) != GETARG_C (i)) {  		setobjs2s (L' ra' rb);  		dojump (L' pc' GETARG_sBx (pc [0]));  	}  	InstructionPtr.inc (ref pc);  	continue;  }  case OpCode.OP_CALL: {  	int b = GETARG_B (i);  	int nresults = GETARG_C (i) - 1;  	if (b != 0)  		L.top = ra + b;  	/* else previous instruction set top */L.savedpc = InstructionPtr.Assign (pc);  	switch (luaD_precall (L' ra' nresults)) {  	case PCRLUA: {  		nexeccalls++;  		goto reentry;  		/* restart luaV_execute over new Lua function */}  	case PCRC: {  		/* it was a C function (`precall' called it); adjust results */if (nresults >= 0)  			L.top = L.ci.top;  		base_ = L.base_;  		continue;  	}  	default: {  		return;  		/* yield */}  	}  }  case OpCode.OP_TAILCALL: {  	int b = GETARG_B (i);  	if (b != 0)  		L.top = ra + b;  	/* else previous instruction set top */L.savedpc = InstructionPtr.Assign (pc);  	lua_assert (GETARG_C (i) - 1 == LUA_MULTRET);  	switch (luaD_precall (L' ra' LUA_MULTRET)) {  	case PCRLUA: {  		/* tail call: put new frame in place of previous one */CallInfo ci = L.ci - 1;  		/* previous frame */int aux;  		StkId func = ci.func;  		StkId pfunc = (ci + 1).func;  		/* previous function index */if (L.openupval != null)  			luaF_close (L' ci.base_);  		L.base_ = ci.base_ = ci.func + (ci [1].base_ - pfunc);  		for (aux = 0; pfunc + aux < L.top; aux++)  			/* move frame down */setobjs2s (L' func + aux' pfunc + aux);  		ci.top = L.top = func + aux;  		/* correct top */lua_assert (L.top == L.base_ + clvalue (func).l.p.maxstacksize);  		ci.savedpc = InstructionPtr.Assign (L.savedpc);  		ci.tailcalls++;  		/* one more call lost */CallInfo.dec (ref L.ci);  		/* remove new frame */goto reentry;  	}  	case PCRC: {  		/* it was a C function (`precall' called it) */base_ = L.base_;  		continue;  	}  	default: {  		return;  		/* yield */}  	}  }  case OpCode.OP_RETURN: {  	int b = GETARG_B (i);  	if (b != 0)  		L.top = ra + b - 1;  	if (L.openupval != null)  		luaF_close (L' base_);  	L.savedpc = InstructionPtr.Assign (pc);  	b = luaD_poscall (L' ra);  	if (--nexeccalls == 0)  		/* was previous function running `here'? */return;  	/* no: return */else {  		/* yes: continue its execution */if (b != 0)  			L.top = L.ci.top;  		lua_assert (isLua (L.ci));  		lua_assert (GET_OPCODE (L.ci.savedpc [-1]) == OpCode.OP_CALL);  		goto reentry;  	}  }  case OpCode.OP_FORLOOP: {  	lua_Number step = nvalue (ra + 2);  	lua_Number idx = luai_numadd (nvalue (ra)' step);  	/* increment index */lua_Number limit = nvalue (ra + 1);  	if (luai_numlt (0' step) ? luai_numle (idx' limit) : luai_numle (limit' idx)) {  		dojump (L' pc' GETARG_sBx (i));  		/* jump back */setnvalue (ra' idx);  		/* update internal index... */setnvalue (ra + 3' idx);  		/* ...and external index */}  	continue;  }  case OpCode.OP_FORPREP: {  	TValue init = ra;  	TValue plimit = ra + 1;  	TValue pstep = ra + 2;  	L.savedpc = InstructionPtr.Assign (pc);  	/* next steps may throw errors */if (tonumber (ref init' ra) == 0)  		luaG_runerror (L' LUA_QL ("for") + " initial value must be a number");  	else if (tonumber (ref plimit' ra + 1) == 0)  		luaG_runerror (L' LUA_QL ("for") + " limit must be a number");  	else if (tonumber (ref pstep' ra + 2) == 0)  		luaG_runerror (L' LUA_QL ("for") + " step must be a number");  	setnvalue (ra' luai_numsub (nvalue (ra)' nvalue (pstep)));  	dojump (L' pc' GETARG_sBx (i));  	continue;  }  case OpCode.OP_TFORLOOP: {  	StkId cb = ra + 3;  	/* call base */setobjs2s (L' cb + 2' ra + 2);  	setobjs2s (L' cb + 1' ra + 1);  	setobjs2s (L' cb' ra);  	L.top = cb + 3;  	/* func. + 2 args (state and index) *///Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaD_call (L' cb' GETARG_C (i));  	base_ = L.base_;  	//);  	L.top = L.ci.top;  	cb = RA (L' base_' i) + 3;  	/* previous call may change the stack */if (!ttisnil (cb)) {  		/* continue loop? */setobjs2s (L' cb - 1' cb);  		/* save control variable */dojump (L' pc' GETARG_sBx (pc [0]));  		/* jump back */}  	InstructionPtr.inc (ref pc);  	continue;  }  case OpCode.OP_SETLIST: {  	int n = GETARG_B (i);  	int c = GETARG_C (i);  	int last;  	Table h;  	if (n == 0) {  		n = cast_int (L.top - ra) - 1;  		L.top = L.ci.top;  	}  	if (c == 0) {  		c = cast_int (pc [0]);  		InstructionPtr.inc (ref pc);  	}  	runtime_check (L' ttistable (ra));  	h = hvalue (ra);  	last = ((c - 1) * LFIELDS_PER_FLUSH) + n;  	if (last > h.sizearray)  		/* needs more space? */luaH_resizearray (L' h' last);  	/* pre-alloc it at once */for (; n > 0; n--) {  		TValue val = ra + n;  		setobj2t (L' luaH_setnum (L' h' last--)' val);  		luaC_barriert (L' h' val);  	}  	continue;  }  case OpCode.OP_CLOSE: {  	luaF_close (L' ra);  	continue;  }  case OpCode.OP_CLOSURE: {  	Proto p;  	Closure ncl;  	int nup' j;  	p = cl.p.p [GETARG_Bx (i)];  	nup = p.nups;  	ncl = luaF_newLclosure (L' nup' cl.env);  	ncl.l.p = p;  	for (j = 0; j < nup; j++' InstructionPtr.inc (ref pc)) {  		if (GET_OPCODE (pc [0]) == OpCode.OP_GETUPVAL)  			ncl.l.upvals [j] = cl.upvals [GETARG_B (pc [0])];  		else {  			lua_assert (GET_OPCODE (pc [0]) == OpCode.OP_MOVE);  			ncl.l.upvals [j] = luaF_findupval (L' base_ + GETARG_B (pc [0]));  		}  	}  	setclvalue (L' ra' ncl);  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaC_checkGC (L);  	base_ = L.base_;  	//);  	continue;  }  case OpCode.OP_VARARG: {  	int b = GETARG_B (i) - 1;  	int j;  	CallInfo ci = L.ci;  	int n = cast_int (ci.base_ - ci.func) - cl.p.numparams - 1;  	if (b == LUA_MULTRET) {  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaD_checkstack (L' n);  		base_ = L.base_;  		//);  		ra = RA (L' base_' i);  		/* previous call may change the stack */b = n;  		L.top = ra + n;  	}  	for (j = 0; j < b; j++) {  		if (j < n) {  			setobjs2s (L' ra + j' ci.base_ - n + j);  		} else {  			setnilvalue (ra + j);  		}  	}  	continue;  }  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaV_execute,The following statement contains a magic number: switch (GET_OPCODE (i)) {  case OpCode.OP_MOVE: {  	setobjs2s (L' ra' RB (L' base_' i));  	continue;  }  case OpCode.OP_LOADK: {  	setobj2s (L' ra' KBx (L' i' k));  	continue;  }  case OpCode.OP_LOADBOOL: {  	setbvalue (ra' GETARG_B (i));  	if (GETARG_C (i) != 0)  		InstructionPtr.inc (ref pc);  	/* skip next instruction (if C) */continue;  }  case OpCode.OP_LOADNIL: {  	TValue rb = RB (L' base_' i);  	do {  		setnilvalue (StkId.dec (ref rb));  	} while (rb >= ra);  	continue;  }  case OpCode.OP_GETUPVAL: {  	int b = GETARG_B (i);  	setobj2s (L' ra' cl.upvals [b].v);  	continue;  }  case OpCode.OP_GETGLOBAL: {  	TValue g = new TValue ();  	TValue rb = KBx (L' i' k);  	sethvalue (L' g' cl.env);  	lua_assert (ttisstring (rb));  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaV_gettable (L' g' rb' ra);  	base_ = L.base_;  	//);  	L.savedpc = InstructionPtr.Assign (pc);  	continue;  }  case OpCode.OP_GETTABLE: {  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaV_gettable (L' RB (L' base_' i)' RKC (L' base_' i' k)' ra);  	base_ = L.base_;  	//);  	L.savedpc = InstructionPtr.Assign (pc);  	continue;  }  case OpCode.OP_SETGLOBAL: {  	TValue g = new TValue ();  	sethvalue (L' g' cl.env);  	lua_assert (ttisstring (KBx (L' i' k)));  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaV_settable (L' g' KBx (L' i' k)' ra);  	base_ = L.base_;  	//);  	L.savedpc = InstructionPtr.Assign (pc);  	continue;  }  case OpCode.OP_SETUPVAL: {  	UpVal uv = cl.upvals [GETARG_B (i)];  	setobj (L' uv.v' ra);  	luaC_barrier (L' uv' ra);  	continue;  }  case OpCode.OP_SETTABLE: {  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaV_settable (L' ra' RKB (L' base_' i' k)' RKC (L' base_' i' k));  	base_ = L.base_;  	//);  	L.savedpc = InstructionPtr.Assign (pc);  	continue;  }  case OpCode.OP_NEWTABLE: {  	int b = GETARG_B (i);  	int c = GETARG_C (i);  	sethvalue (L' ra' luaH_new (L' luaO_fb2int (b)' luaO_fb2int (c)));  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaC_checkGC (L);  	base_ = L.base_;  	//);  	L.savedpc = InstructionPtr.Assign (pc);  	continue;  }  case OpCode.OP_SELF: {  	StkId rb = RB (L' base_' i);  	setobjs2s (L' ra + 1' rb);  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaV_gettable (L' rb' RKC (L' base_' i' k)' ra);  	base_ = L.base_;  	//);  	L.savedpc = InstructionPtr.Assign (pc);  	continue;  }  case OpCode.OP_ADD: {  	arith_op (L' luai_numadd' TMS.TM_ADD' base_' i' k' ra' pc);  	continue;  }  case OpCode.OP_SUB: {  	arith_op (L' luai_numsub' TMS.TM_SUB' base_' i' k' ra' pc);  	continue;  }  case OpCode.OP_MUL: {  	arith_op (L' luai_nummul' TMS.TM_MUL' base_' i' k' ra' pc);  	continue;  }  case OpCode.OP_DIV: {  	arith_op (L' luai_numdiv' TMS.TM_DIV' base_' i' k' ra' pc);  	continue;  }  case OpCode.OP_MOD: {  	arith_op (L' luai_nummod' TMS.TM_MOD' base_' i' k' ra' pc);  	continue;  }  case OpCode.OP_POW: {  	arith_op (L' luai_numpow' TMS.TM_POW' base_' i' k' ra' pc);  	continue;  }  case OpCode.OP_UNM: {  	TValue rb = RB (L' base_' i);  	if (ttisnumber (rb)) {  		lua_Number nb = nvalue (rb);  		setnvalue (ra' luai_numunm (nb));  	} else {  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		Arith (L' ra' rb' rb' TMS.TM_UNM);  		base_ = L.base_;  		//);  		L.savedpc = InstructionPtr.Assign (pc);  	}  	continue;  }  case OpCode.OP_NOT: {  	int res = l_isfalse (RB (L' base_' i)) == 0 ? 0 : 1;  	/* next assignment may change this value */setbvalue (ra' res);  	continue;  }  case OpCode.OP_LEN: {  	TValue rb = RB (L' base_' i);  	switch (ttype (rb)) {  	case LUA_TTABLE: {  		setnvalue (ra' (lua_Number)luaH_getn (hvalue (rb)));  		break;  	}  	case LUA_TSTRING: {  		setnvalue (ra' (lua_Number)tsvalue (rb).len);  		break;  	}  	default: {  		/* try metamethod *///Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		if (call_binTM (L' rb' luaO_nilobject' ra' TMS.TM_LEN) == 0)  			luaG_typeerror (L' rb' "get length of");  		base_ = L.base_;  		//)  		break;  	}  	}  	continue;  }  case OpCode.OP_CONCAT: {  	int b = GETARG_B (i);  	int c = GETARG_C (i);  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaV_concat (L' c - b + 1' c);  	luaC_checkGC (L);  	base_ = L.base_;  	//);  	setobjs2s (L' RA (L' base_' i)' base_ + b);  	continue;  }  case OpCode.OP_JMP: {  	dojump (L' pc' GETARG_sBx (i));  	continue;  }  case OpCode.OP_EQ: {  	TValue rb = RKB (L' base_' i' k);  	TValue rc = RKC (L' base_' i' k);  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	if (equalobj (L' rb' rc) == GETARG_A (i))  		dojump (L' pc' GETARG_sBx (pc [0]));  	base_ = L.base_;  	//);  	InstructionPtr.inc (ref pc);  	continue;  }  case OpCode.OP_LT: {  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	if (luaV_lessthan (L' RKB (L' base_' i' k)' RKC (L' base_' i' k)) == GETARG_A (i))  		dojump (L' pc' GETARG_sBx (pc [0]));  	base_ = L.base_;  	//);  	InstructionPtr.inc (ref pc);  	continue;  }  case OpCode.OP_LE: {  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	if (lessequal (L' RKB (L' base_' i' k)' RKC (L' base_' i' k)) == GETARG_A (i))  		dojump (L' pc' GETARG_sBx (pc [0]));  	base_ = L.base_;  	//);  	InstructionPtr.inc (ref pc);  	continue;  }  case OpCode.OP_TEST: {  	if (l_isfalse (ra) != GETARG_C (i))  		dojump (L' pc' GETARG_sBx (pc [0]));  	InstructionPtr.inc (ref pc);  	continue;  }  case OpCode.OP_TESTSET: {  	TValue rb = RB (L' base_' i);  	if (l_isfalse (rb) != GETARG_C (i)) {  		setobjs2s (L' ra' rb);  		dojump (L' pc' GETARG_sBx (pc [0]));  	}  	InstructionPtr.inc (ref pc);  	continue;  }  case OpCode.OP_CALL: {  	int b = GETARG_B (i);  	int nresults = GETARG_C (i) - 1;  	if (b != 0)  		L.top = ra + b;  	/* else previous instruction set top */L.savedpc = InstructionPtr.Assign (pc);  	switch (luaD_precall (L' ra' nresults)) {  	case PCRLUA: {  		nexeccalls++;  		goto reentry;  		/* restart luaV_execute over new Lua function */}  	case PCRC: {  		/* it was a C function (`precall' called it); adjust results */if (nresults >= 0)  			L.top = L.ci.top;  		base_ = L.base_;  		continue;  	}  	default: {  		return;  		/* yield */}  	}  }  case OpCode.OP_TAILCALL: {  	int b = GETARG_B (i);  	if (b != 0)  		L.top = ra + b;  	/* else previous instruction set top */L.savedpc = InstructionPtr.Assign (pc);  	lua_assert (GETARG_C (i) - 1 == LUA_MULTRET);  	switch (luaD_precall (L' ra' LUA_MULTRET)) {  	case PCRLUA: {  		/* tail call: put new frame in place of previous one */CallInfo ci = L.ci - 1;  		/* previous frame */int aux;  		StkId func = ci.func;  		StkId pfunc = (ci + 1).func;  		/* previous function index */if (L.openupval != null)  			luaF_close (L' ci.base_);  		L.base_ = ci.base_ = ci.func + (ci [1].base_ - pfunc);  		for (aux = 0; pfunc + aux < L.top; aux++)  			/* move frame down */setobjs2s (L' func + aux' pfunc + aux);  		ci.top = L.top = func + aux;  		/* correct top */lua_assert (L.top == L.base_ + clvalue (func).l.p.maxstacksize);  		ci.savedpc = InstructionPtr.Assign (L.savedpc);  		ci.tailcalls++;  		/* one more call lost */CallInfo.dec (ref L.ci);  		/* remove new frame */goto reentry;  	}  	case PCRC: {  		/* it was a C function (`precall' called it) */base_ = L.base_;  		continue;  	}  	default: {  		return;  		/* yield */}  	}  }  case OpCode.OP_RETURN: {  	int b = GETARG_B (i);  	if (b != 0)  		L.top = ra + b - 1;  	if (L.openupval != null)  		luaF_close (L' base_);  	L.savedpc = InstructionPtr.Assign (pc);  	b = luaD_poscall (L' ra);  	if (--nexeccalls == 0)  		/* was previous function running `here'? */return;  	/* no: return */else {  		/* yes: continue its execution */if (b != 0)  			L.top = L.ci.top;  		lua_assert (isLua (L.ci));  		lua_assert (GET_OPCODE (L.ci.savedpc [-1]) == OpCode.OP_CALL);  		goto reentry;  	}  }  case OpCode.OP_FORLOOP: {  	lua_Number step = nvalue (ra + 2);  	lua_Number idx = luai_numadd (nvalue (ra)' step);  	/* increment index */lua_Number limit = nvalue (ra + 1);  	if (luai_numlt (0' step) ? luai_numle (idx' limit) : luai_numle (limit' idx)) {  		dojump (L' pc' GETARG_sBx (i));  		/* jump back */setnvalue (ra' idx);  		/* update internal index... */setnvalue (ra + 3' idx);  		/* ...and external index */}  	continue;  }  case OpCode.OP_FORPREP: {  	TValue init = ra;  	TValue plimit = ra + 1;  	TValue pstep = ra + 2;  	L.savedpc = InstructionPtr.Assign (pc);  	/* next steps may throw errors */if (tonumber (ref init' ra) == 0)  		luaG_runerror (L' LUA_QL ("for") + " initial value must be a number");  	else if (tonumber (ref plimit' ra + 1) == 0)  		luaG_runerror (L' LUA_QL ("for") + " limit must be a number");  	else if (tonumber (ref pstep' ra + 2) == 0)  		luaG_runerror (L' LUA_QL ("for") + " step must be a number");  	setnvalue (ra' luai_numsub (nvalue (ra)' nvalue (pstep)));  	dojump (L' pc' GETARG_sBx (i));  	continue;  }  case OpCode.OP_TFORLOOP: {  	StkId cb = ra + 3;  	/* call base */setobjs2s (L' cb + 2' ra + 2);  	setobjs2s (L' cb + 1' ra + 1);  	setobjs2s (L' cb' ra);  	L.top = cb + 3;  	/* func. + 2 args (state and index) *///Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaD_call (L' cb' GETARG_C (i));  	base_ = L.base_;  	//);  	L.top = L.ci.top;  	cb = RA (L' base_' i) + 3;  	/* previous call may change the stack */if (!ttisnil (cb)) {  		/* continue loop? */setobjs2s (L' cb - 1' cb);  		/* save control variable */dojump (L' pc' GETARG_sBx (pc [0]));  		/* jump back */}  	InstructionPtr.inc (ref pc);  	continue;  }  case OpCode.OP_SETLIST: {  	int n = GETARG_B (i);  	int c = GETARG_C (i);  	int last;  	Table h;  	if (n == 0) {  		n = cast_int (L.top - ra) - 1;  		L.top = L.ci.top;  	}  	if (c == 0) {  		c = cast_int (pc [0]);  		InstructionPtr.inc (ref pc);  	}  	runtime_check (L' ttistable (ra));  	h = hvalue (ra);  	last = ((c - 1) * LFIELDS_PER_FLUSH) + n;  	if (last > h.sizearray)  		/* needs more space? */luaH_resizearray (L' h' last);  	/* pre-alloc it at once */for (; n > 0; n--) {  		TValue val = ra + n;  		setobj2t (L' luaH_setnum (L' h' last--)' val);  		luaC_barriert (L' h' val);  	}  	continue;  }  case OpCode.OP_CLOSE: {  	luaF_close (L' ra);  	continue;  }  case OpCode.OP_CLOSURE: {  	Proto p;  	Closure ncl;  	int nup' j;  	p = cl.p.p [GETARG_Bx (i)];  	nup = p.nups;  	ncl = luaF_newLclosure (L' nup' cl.env);  	ncl.l.p = p;  	for (j = 0; j < nup; j++' InstructionPtr.inc (ref pc)) {  		if (GET_OPCODE (pc [0]) == OpCode.OP_GETUPVAL)  			ncl.l.upvals [j] = cl.upvals [GETARG_B (pc [0])];  		else {  			lua_assert (GET_OPCODE (pc [0]) == OpCode.OP_MOVE);  			ncl.l.upvals [j] = luaF_findupval (L' base_ + GETARG_B (pc [0]));  		}  	}  	setclvalue (L' ra' ncl);  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaC_checkGC (L);  	base_ = L.base_;  	//);  	continue;  }  case OpCode.OP_VARARG: {  	int b = GETARG_B (i) - 1;  	int j;  	CallInfo ci = L.ci;  	int n = cast_int (ci.base_ - ci.func) - cl.p.numparams - 1;  	if (b == LUA_MULTRET) {  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaD_checkstack (L' n);  		base_ = L.base_;  		//);  		ra = RA (L' base_' i);  		/* previous call may change the stack */b = n;  		L.top = ra + n;  	}  	for (j = 0; j < b; j++) {  		if (j < n) {  			setobjs2s (L' ra + j' ci.base_ - n + j);  		} else {  			setnilvalue (ra + j);  		}  	}  	continue;  }  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaV_execute,The following statement contains a magic number: switch (GET_OPCODE (i)) {  case OpCode.OP_MOVE: {  	setobjs2s (L' ra' RB (L' base_' i));  	continue;  }  case OpCode.OP_LOADK: {  	setobj2s (L' ra' KBx (L' i' k));  	continue;  }  case OpCode.OP_LOADBOOL: {  	setbvalue (ra' GETARG_B (i));  	if (GETARG_C (i) != 0)  		InstructionPtr.inc (ref pc);  	/* skip next instruction (if C) */continue;  }  case OpCode.OP_LOADNIL: {  	TValue rb = RB (L' base_' i);  	do {  		setnilvalue (StkId.dec (ref rb));  	} while (rb >= ra);  	continue;  }  case OpCode.OP_GETUPVAL: {  	int b = GETARG_B (i);  	setobj2s (L' ra' cl.upvals [b].v);  	continue;  }  case OpCode.OP_GETGLOBAL: {  	TValue g = new TValue ();  	TValue rb = KBx (L' i' k);  	sethvalue (L' g' cl.env);  	lua_assert (ttisstring (rb));  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaV_gettable (L' g' rb' ra);  	base_ = L.base_;  	//);  	L.savedpc = InstructionPtr.Assign (pc);  	continue;  }  case OpCode.OP_GETTABLE: {  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaV_gettable (L' RB (L' base_' i)' RKC (L' base_' i' k)' ra);  	base_ = L.base_;  	//);  	L.savedpc = InstructionPtr.Assign (pc);  	continue;  }  case OpCode.OP_SETGLOBAL: {  	TValue g = new TValue ();  	sethvalue (L' g' cl.env);  	lua_assert (ttisstring (KBx (L' i' k)));  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaV_settable (L' g' KBx (L' i' k)' ra);  	base_ = L.base_;  	//);  	L.savedpc = InstructionPtr.Assign (pc);  	continue;  }  case OpCode.OP_SETUPVAL: {  	UpVal uv = cl.upvals [GETARG_B (i)];  	setobj (L' uv.v' ra);  	luaC_barrier (L' uv' ra);  	continue;  }  case OpCode.OP_SETTABLE: {  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaV_settable (L' ra' RKB (L' base_' i' k)' RKC (L' base_' i' k));  	base_ = L.base_;  	//);  	L.savedpc = InstructionPtr.Assign (pc);  	continue;  }  case OpCode.OP_NEWTABLE: {  	int b = GETARG_B (i);  	int c = GETARG_C (i);  	sethvalue (L' ra' luaH_new (L' luaO_fb2int (b)' luaO_fb2int (c)));  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaC_checkGC (L);  	base_ = L.base_;  	//);  	L.savedpc = InstructionPtr.Assign (pc);  	continue;  }  case OpCode.OP_SELF: {  	StkId rb = RB (L' base_' i);  	setobjs2s (L' ra + 1' rb);  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaV_gettable (L' rb' RKC (L' base_' i' k)' ra);  	base_ = L.base_;  	//);  	L.savedpc = InstructionPtr.Assign (pc);  	continue;  }  case OpCode.OP_ADD: {  	arith_op (L' luai_numadd' TMS.TM_ADD' base_' i' k' ra' pc);  	continue;  }  case OpCode.OP_SUB: {  	arith_op (L' luai_numsub' TMS.TM_SUB' base_' i' k' ra' pc);  	continue;  }  case OpCode.OP_MUL: {  	arith_op (L' luai_nummul' TMS.TM_MUL' base_' i' k' ra' pc);  	continue;  }  case OpCode.OP_DIV: {  	arith_op (L' luai_numdiv' TMS.TM_DIV' base_' i' k' ra' pc);  	continue;  }  case OpCode.OP_MOD: {  	arith_op (L' luai_nummod' TMS.TM_MOD' base_' i' k' ra' pc);  	continue;  }  case OpCode.OP_POW: {  	arith_op (L' luai_numpow' TMS.TM_POW' base_' i' k' ra' pc);  	continue;  }  case OpCode.OP_UNM: {  	TValue rb = RB (L' base_' i);  	if (ttisnumber (rb)) {  		lua_Number nb = nvalue (rb);  		setnvalue (ra' luai_numunm (nb));  	} else {  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		Arith (L' ra' rb' rb' TMS.TM_UNM);  		base_ = L.base_;  		//);  		L.savedpc = InstructionPtr.Assign (pc);  	}  	continue;  }  case OpCode.OP_NOT: {  	int res = l_isfalse (RB (L' base_' i)) == 0 ? 0 : 1;  	/* next assignment may change this value */setbvalue (ra' res);  	continue;  }  case OpCode.OP_LEN: {  	TValue rb = RB (L' base_' i);  	switch (ttype (rb)) {  	case LUA_TTABLE: {  		setnvalue (ra' (lua_Number)luaH_getn (hvalue (rb)));  		break;  	}  	case LUA_TSTRING: {  		setnvalue (ra' (lua_Number)tsvalue (rb).len);  		break;  	}  	default: {  		/* try metamethod *///Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		if (call_binTM (L' rb' luaO_nilobject' ra' TMS.TM_LEN) == 0)  			luaG_typeerror (L' rb' "get length of");  		base_ = L.base_;  		//)  		break;  	}  	}  	continue;  }  case OpCode.OP_CONCAT: {  	int b = GETARG_B (i);  	int c = GETARG_C (i);  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaV_concat (L' c - b + 1' c);  	luaC_checkGC (L);  	base_ = L.base_;  	//);  	setobjs2s (L' RA (L' base_' i)' base_ + b);  	continue;  }  case OpCode.OP_JMP: {  	dojump (L' pc' GETARG_sBx (i));  	continue;  }  case OpCode.OP_EQ: {  	TValue rb = RKB (L' base_' i' k);  	TValue rc = RKC (L' base_' i' k);  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	if (equalobj (L' rb' rc) == GETARG_A (i))  		dojump (L' pc' GETARG_sBx (pc [0]));  	base_ = L.base_;  	//);  	InstructionPtr.inc (ref pc);  	continue;  }  case OpCode.OP_LT: {  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	if (luaV_lessthan (L' RKB (L' base_' i' k)' RKC (L' base_' i' k)) == GETARG_A (i))  		dojump (L' pc' GETARG_sBx (pc [0]));  	base_ = L.base_;  	//);  	InstructionPtr.inc (ref pc);  	continue;  }  case OpCode.OP_LE: {  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	if (lessequal (L' RKB (L' base_' i' k)' RKC (L' base_' i' k)) == GETARG_A (i))  		dojump (L' pc' GETARG_sBx (pc [0]));  	base_ = L.base_;  	//);  	InstructionPtr.inc (ref pc);  	continue;  }  case OpCode.OP_TEST: {  	if (l_isfalse (ra) != GETARG_C (i))  		dojump (L' pc' GETARG_sBx (pc [0]));  	InstructionPtr.inc (ref pc);  	continue;  }  case OpCode.OP_TESTSET: {  	TValue rb = RB (L' base_' i);  	if (l_isfalse (rb) != GETARG_C (i)) {  		setobjs2s (L' ra' rb);  		dojump (L' pc' GETARG_sBx (pc [0]));  	}  	InstructionPtr.inc (ref pc);  	continue;  }  case OpCode.OP_CALL: {  	int b = GETARG_B (i);  	int nresults = GETARG_C (i) - 1;  	if (b != 0)  		L.top = ra + b;  	/* else previous instruction set top */L.savedpc = InstructionPtr.Assign (pc);  	switch (luaD_precall (L' ra' nresults)) {  	case PCRLUA: {  		nexeccalls++;  		goto reentry;  		/* restart luaV_execute over new Lua function */}  	case PCRC: {  		/* it was a C function (`precall' called it); adjust results */if (nresults >= 0)  			L.top = L.ci.top;  		base_ = L.base_;  		continue;  	}  	default: {  		return;  		/* yield */}  	}  }  case OpCode.OP_TAILCALL: {  	int b = GETARG_B (i);  	if (b != 0)  		L.top = ra + b;  	/* else previous instruction set top */L.savedpc = InstructionPtr.Assign (pc);  	lua_assert (GETARG_C (i) - 1 == LUA_MULTRET);  	switch (luaD_precall (L' ra' LUA_MULTRET)) {  	case PCRLUA: {  		/* tail call: put new frame in place of previous one */CallInfo ci = L.ci - 1;  		/* previous frame */int aux;  		StkId func = ci.func;  		StkId pfunc = (ci + 1).func;  		/* previous function index */if (L.openupval != null)  			luaF_close (L' ci.base_);  		L.base_ = ci.base_ = ci.func + (ci [1].base_ - pfunc);  		for (aux = 0; pfunc + aux < L.top; aux++)  			/* move frame down */setobjs2s (L' func + aux' pfunc + aux);  		ci.top = L.top = func + aux;  		/* correct top */lua_assert (L.top == L.base_ + clvalue (func).l.p.maxstacksize);  		ci.savedpc = InstructionPtr.Assign (L.savedpc);  		ci.tailcalls++;  		/* one more call lost */CallInfo.dec (ref L.ci);  		/* remove new frame */goto reentry;  	}  	case PCRC: {  		/* it was a C function (`precall' called it) */base_ = L.base_;  		continue;  	}  	default: {  		return;  		/* yield */}  	}  }  case OpCode.OP_RETURN: {  	int b = GETARG_B (i);  	if (b != 0)  		L.top = ra + b - 1;  	if (L.openupval != null)  		luaF_close (L' base_);  	L.savedpc = InstructionPtr.Assign (pc);  	b = luaD_poscall (L' ra);  	if (--nexeccalls == 0)  		/* was previous function running `here'? */return;  	/* no: return */else {  		/* yes: continue its execution */if (b != 0)  			L.top = L.ci.top;  		lua_assert (isLua (L.ci));  		lua_assert (GET_OPCODE (L.ci.savedpc [-1]) == OpCode.OP_CALL);  		goto reentry;  	}  }  case OpCode.OP_FORLOOP: {  	lua_Number step = nvalue (ra + 2);  	lua_Number idx = luai_numadd (nvalue (ra)' step);  	/* increment index */lua_Number limit = nvalue (ra + 1);  	if (luai_numlt (0' step) ? luai_numle (idx' limit) : luai_numle (limit' idx)) {  		dojump (L' pc' GETARG_sBx (i));  		/* jump back */setnvalue (ra' idx);  		/* update internal index... */setnvalue (ra + 3' idx);  		/* ...and external index */}  	continue;  }  case OpCode.OP_FORPREP: {  	TValue init = ra;  	TValue plimit = ra + 1;  	TValue pstep = ra + 2;  	L.savedpc = InstructionPtr.Assign (pc);  	/* next steps may throw errors */if (tonumber (ref init' ra) == 0)  		luaG_runerror (L' LUA_QL ("for") + " initial value must be a number");  	else if (tonumber (ref plimit' ra + 1) == 0)  		luaG_runerror (L' LUA_QL ("for") + " limit must be a number");  	else if (tonumber (ref pstep' ra + 2) == 0)  		luaG_runerror (L' LUA_QL ("for") + " step must be a number");  	setnvalue (ra' luai_numsub (nvalue (ra)' nvalue (pstep)));  	dojump (L' pc' GETARG_sBx (i));  	continue;  }  case OpCode.OP_TFORLOOP: {  	StkId cb = ra + 3;  	/* call base */setobjs2s (L' cb + 2' ra + 2);  	setobjs2s (L' cb + 1' ra + 1);  	setobjs2s (L' cb' ra);  	L.top = cb + 3;  	/* func. + 2 args (state and index) *///Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaD_call (L' cb' GETARG_C (i));  	base_ = L.base_;  	//);  	L.top = L.ci.top;  	cb = RA (L' base_' i) + 3;  	/* previous call may change the stack */if (!ttisnil (cb)) {  		/* continue loop? */setobjs2s (L' cb - 1' cb);  		/* save control variable */dojump (L' pc' GETARG_sBx (pc [0]));  		/* jump back */}  	InstructionPtr.inc (ref pc);  	continue;  }  case OpCode.OP_SETLIST: {  	int n = GETARG_B (i);  	int c = GETARG_C (i);  	int last;  	Table h;  	if (n == 0) {  		n = cast_int (L.top - ra) - 1;  		L.top = L.ci.top;  	}  	if (c == 0) {  		c = cast_int (pc [0]);  		InstructionPtr.inc (ref pc);  	}  	runtime_check (L' ttistable (ra));  	h = hvalue (ra);  	last = ((c - 1) * LFIELDS_PER_FLUSH) + n;  	if (last > h.sizearray)  		/* needs more space? */luaH_resizearray (L' h' last);  	/* pre-alloc it at once */for (; n > 0; n--) {  		TValue val = ra + n;  		setobj2t (L' luaH_setnum (L' h' last--)' val);  		luaC_barriert (L' h' val);  	}  	continue;  }  case OpCode.OP_CLOSE: {  	luaF_close (L' ra);  	continue;  }  case OpCode.OP_CLOSURE: {  	Proto p;  	Closure ncl;  	int nup' j;  	p = cl.p.p [GETARG_Bx (i)];  	nup = p.nups;  	ncl = luaF_newLclosure (L' nup' cl.env);  	ncl.l.p = p;  	for (j = 0; j < nup; j++' InstructionPtr.inc (ref pc)) {  		if (GET_OPCODE (pc [0]) == OpCode.OP_GETUPVAL)  			ncl.l.upvals [j] = cl.upvals [GETARG_B (pc [0])];  		else {  			lua_assert (GET_OPCODE (pc [0]) == OpCode.OP_MOVE);  			ncl.l.upvals [j] = luaF_findupval (L' base_ + GETARG_B (pc [0]));  		}  	}  	setclvalue (L' ra' ncl);  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaC_checkGC (L);  	base_ = L.base_;  	//);  	continue;  }  case OpCode.OP_VARARG: {  	int b = GETARG_B (i) - 1;  	int j;  	CallInfo ci = L.ci;  	int n = cast_int (ci.base_ - ci.func) - cl.p.numparams - 1;  	if (b == LUA_MULTRET) {  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaD_checkstack (L' n);  		base_ = L.base_;  		//);  		ra = RA (L' base_' i);  		/* previous call may change the stack */b = n;  		L.top = ra + n;  	}  	for (j = 0; j < b; j++) {  		if (j < n) {  			setobjs2s (L' ra + j' ci.base_ - n + j);  		} else {  			setnilvalue (ra + j);  		}  	}  	continue;  }  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaV_execute,The following statement contains a magic number: switch (GET_OPCODE (i)) {  case OpCode.OP_MOVE: {  	setobjs2s (L' ra' RB (L' base_' i));  	continue;  }  case OpCode.OP_LOADK: {  	setobj2s (L' ra' KBx (L' i' k));  	continue;  }  case OpCode.OP_LOADBOOL: {  	setbvalue (ra' GETARG_B (i));  	if (GETARG_C (i) != 0)  		InstructionPtr.inc (ref pc);  	/* skip next instruction (if C) */continue;  }  case OpCode.OP_LOADNIL: {  	TValue rb = RB (L' base_' i);  	do {  		setnilvalue (StkId.dec (ref rb));  	} while (rb >= ra);  	continue;  }  case OpCode.OP_GETUPVAL: {  	int b = GETARG_B (i);  	setobj2s (L' ra' cl.upvals [b].v);  	continue;  }  case OpCode.OP_GETGLOBAL: {  	TValue g = new TValue ();  	TValue rb = KBx (L' i' k);  	sethvalue (L' g' cl.env);  	lua_assert (ttisstring (rb));  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaV_gettable (L' g' rb' ra);  	base_ = L.base_;  	//);  	L.savedpc = InstructionPtr.Assign (pc);  	continue;  }  case OpCode.OP_GETTABLE: {  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaV_gettable (L' RB (L' base_' i)' RKC (L' base_' i' k)' ra);  	base_ = L.base_;  	//);  	L.savedpc = InstructionPtr.Assign (pc);  	continue;  }  case OpCode.OP_SETGLOBAL: {  	TValue g = new TValue ();  	sethvalue (L' g' cl.env);  	lua_assert (ttisstring (KBx (L' i' k)));  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaV_settable (L' g' KBx (L' i' k)' ra);  	base_ = L.base_;  	//);  	L.savedpc = InstructionPtr.Assign (pc);  	continue;  }  case OpCode.OP_SETUPVAL: {  	UpVal uv = cl.upvals [GETARG_B (i)];  	setobj (L' uv.v' ra);  	luaC_barrier (L' uv' ra);  	continue;  }  case OpCode.OP_SETTABLE: {  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaV_settable (L' ra' RKB (L' base_' i' k)' RKC (L' base_' i' k));  	base_ = L.base_;  	//);  	L.savedpc = InstructionPtr.Assign (pc);  	continue;  }  case OpCode.OP_NEWTABLE: {  	int b = GETARG_B (i);  	int c = GETARG_C (i);  	sethvalue (L' ra' luaH_new (L' luaO_fb2int (b)' luaO_fb2int (c)));  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaC_checkGC (L);  	base_ = L.base_;  	//);  	L.savedpc = InstructionPtr.Assign (pc);  	continue;  }  case OpCode.OP_SELF: {  	StkId rb = RB (L' base_' i);  	setobjs2s (L' ra + 1' rb);  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaV_gettable (L' rb' RKC (L' base_' i' k)' ra);  	base_ = L.base_;  	//);  	L.savedpc = InstructionPtr.Assign (pc);  	continue;  }  case OpCode.OP_ADD: {  	arith_op (L' luai_numadd' TMS.TM_ADD' base_' i' k' ra' pc);  	continue;  }  case OpCode.OP_SUB: {  	arith_op (L' luai_numsub' TMS.TM_SUB' base_' i' k' ra' pc);  	continue;  }  case OpCode.OP_MUL: {  	arith_op (L' luai_nummul' TMS.TM_MUL' base_' i' k' ra' pc);  	continue;  }  case OpCode.OP_DIV: {  	arith_op (L' luai_numdiv' TMS.TM_DIV' base_' i' k' ra' pc);  	continue;  }  case OpCode.OP_MOD: {  	arith_op (L' luai_nummod' TMS.TM_MOD' base_' i' k' ra' pc);  	continue;  }  case OpCode.OP_POW: {  	arith_op (L' luai_numpow' TMS.TM_POW' base_' i' k' ra' pc);  	continue;  }  case OpCode.OP_UNM: {  	TValue rb = RB (L' base_' i);  	if (ttisnumber (rb)) {  		lua_Number nb = nvalue (rb);  		setnvalue (ra' luai_numunm (nb));  	} else {  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		Arith (L' ra' rb' rb' TMS.TM_UNM);  		base_ = L.base_;  		//);  		L.savedpc = InstructionPtr.Assign (pc);  	}  	continue;  }  case OpCode.OP_NOT: {  	int res = l_isfalse (RB (L' base_' i)) == 0 ? 0 : 1;  	/* next assignment may change this value */setbvalue (ra' res);  	continue;  }  case OpCode.OP_LEN: {  	TValue rb = RB (L' base_' i);  	switch (ttype (rb)) {  	case LUA_TTABLE: {  		setnvalue (ra' (lua_Number)luaH_getn (hvalue (rb)));  		break;  	}  	case LUA_TSTRING: {  		setnvalue (ra' (lua_Number)tsvalue (rb).len);  		break;  	}  	default: {  		/* try metamethod *///Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		if (call_binTM (L' rb' luaO_nilobject' ra' TMS.TM_LEN) == 0)  			luaG_typeerror (L' rb' "get length of");  		base_ = L.base_;  		//)  		break;  	}  	}  	continue;  }  case OpCode.OP_CONCAT: {  	int b = GETARG_B (i);  	int c = GETARG_C (i);  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaV_concat (L' c - b + 1' c);  	luaC_checkGC (L);  	base_ = L.base_;  	//);  	setobjs2s (L' RA (L' base_' i)' base_ + b);  	continue;  }  case OpCode.OP_JMP: {  	dojump (L' pc' GETARG_sBx (i));  	continue;  }  case OpCode.OP_EQ: {  	TValue rb = RKB (L' base_' i' k);  	TValue rc = RKC (L' base_' i' k);  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	if (equalobj (L' rb' rc) == GETARG_A (i))  		dojump (L' pc' GETARG_sBx (pc [0]));  	base_ = L.base_;  	//);  	InstructionPtr.inc (ref pc);  	continue;  }  case OpCode.OP_LT: {  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	if (luaV_lessthan (L' RKB (L' base_' i' k)' RKC (L' base_' i' k)) == GETARG_A (i))  		dojump (L' pc' GETARG_sBx (pc [0]));  	base_ = L.base_;  	//);  	InstructionPtr.inc (ref pc);  	continue;  }  case OpCode.OP_LE: {  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	if (lessequal (L' RKB (L' base_' i' k)' RKC (L' base_' i' k)) == GETARG_A (i))  		dojump (L' pc' GETARG_sBx (pc [0]));  	base_ = L.base_;  	//);  	InstructionPtr.inc (ref pc);  	continue;  }  case OpCode.OP_TEST: {  	if (l_isfalse (ra) != GETARG_C (i))  		dojump (L' pc' GETARG_sBx (pc [0]));  	InstructionPtr.inc (ref pc);  	continue;  }  case OpCode.OP_TESTSET: {  	TValue rb = RB (L' base_' i);  	if (l_isfalse (rb) != GETARG_C (i)) {  		setobjs2s (L' ra' rb);  		dojump (L' pc' GETARG_sBx (pc [0]));  	}  	InstructionPtr.inc (ref pc);  	continue;  }  case OpCode.OP_CALL: {  	int b = GETARG_B (i);  	int nresults = GETARG_C (i) - 1;  	if (b != 0)  		L.top = ra + b;  	/* else previous instruction set top */L.savedpc = InstructionPtr.Assign (pc);  	switch (luaD_precall (L' ra' nresults)) {  	case PCRLUA: {  		nexeccalls++;  		goto reentry;  		/* restart luaV_execute over new Lua function */}  	case PCRC: {  		/* it was a C function (`precall' called it); adjust results */if (nresults >= 0)  			L.top = L.ci.top;  		base_ = L.base_;  		continue;  	}  	default: {  		return;  		/* yield */}  	}  }  case OpCode.OP_TAILCALL: {  	int b = GETARG_B (i);  	if (b != 0)  		L.top = ra + b;  	/* else previous instruction set top */L.savedpc = InstructionPtr.Assign (pc);  	lua_assert (GETARG_C (i) - 1 == LUA_MULTRET);  	switch (luaD_precall (L' ra' LUA_MULTRET)) {  	case PCRLUA: {  		/* tail call: put new frame in place of previous one */CallInfo ci = L.ci - 1;  		/* previous frame */int aux;  		StkId func = ci.func;  		StkId pfunc = (ci + 1).func;  		/* previous function index */if (L.openupval != null)  			luaF_close (L' ci.base_);  		L.base_ = ci.base_ = ci.func + (ci [1].base_ - pfunc);  		for (aux = 0; pfunc + aux < L.top; aux++)  			/* move frame down */setobjs2s (L' func + aux' pfunc + aux);  		ci.top = L.top = func + aux;  		/* correct top */lua_assert (L.top == L.base_ + clvalue (func).l.p.maxstacksize);  		ci.savedpc = InstructionPtr.Assign (L.savedpc);  		ci.tailcalls++;  		/* one more call lost */CallInfo.dec (ref L.ci);  		/* remove new frame */goto reentry;  	}  	case PCRC: {  		/* it was a C function (`precall' called it) */base_ = L.base_;  		continue;  	}  	default: {  		return;  		/* yield */}  	}  }  case OpCode.OP_RETURN: {  	int b = GETARG_B (i);  	if (b != 0)  		L.top = ra + b - 1;  	if (L.openupval != null)  		luaF_close (L' base_);  	L.savedpc = InstructionPtr.Assign (pc);  	b = luaD_poscall (L' ra);  	if (--nexeccalls == 0)  		/* was previous function running `here'? */return;  	/* no: return */else {  		/* yes: continue its execution */if (b != 0)  			L.top = L.ci.top;  		lua_assert (isLua (L.ci));  		lua_assert (GET_OPCODE (L.ci.savedpc [-1]) == OpCode.OP_CALL);  		goto reentry;  	}  }  case OpCode.OP_FORLOOP: {  	lua_Number step = nvalue (ra + 2);  	lua_Number idx = luai_numadd (nvalue (ra)' step);  	/* increment index */lua_Number limit = nvalue (ra + 1);  	if (luai_numlt (0' step) ? luai_numle (idx' limit) : luai_numle (limit' idx)) {  		dojump (L' pc' GETARG_sBx (i));  		/* jump back */setnvalue (ra' idx);  		/* update internal index... */setnvalue (ra + 3' idx);  		/* ...and external index */}  	continue;  }  case OpCode.OP_FORPREP: {  	TValue init = ra;  	TValue plimit = ra + 1;  	TValue pstep = ra + 2;  	L.savedpc = InstructionPtr.Assign (pc);  	/* next steps may throw errors */if (tonumber (ref init' ra) == 0)  		luaG_runerror (L' LUA_QL ("for") + " initial value must be a number");  	else if (tonumber (ref plimit' ra + 1) == 0)  		luaG_runerror (L' LUA_QL ("for") + " limit must be a number");  	else if (tonumber (ref pstep' ra + 2) == 0)  		luaG_runerror (L' LUA_QL ("for") + " step must be a number");  	setnvalue (ra' luai_numsub (nvalue (ra)' nvalue (pstep)));  	dojump (L' pc' GETARG_sBx (i));  	continue;  }  case OpCode.OP_TFORLOOP: {  	StkId cb = ra + 3;  	/* call base */setobjs2s (L' cb + 2' ra + 2);  	setobjs2s (L' cb + 1' ra + 1);  	setobjs2s (L' cb' ra);  	L.top = cb + 3;  	/* func. + 2 args (state and index) *///Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaD_call (L' cb' GETARG_C (i));  	base_ = L.base_;  	//);  	L.top = L.ci.top;  	cb = RA (L' base_' i) + 3;  	/* previous call may change the stack */if (!ttisnil (cb)) {  		/* continue loop? */setobjs2s (L' cb - 1' cb);  		/* save control variable */dojump (L' pc' GETARG_sBx (pc [0]));  		/* jump back */}  	InstructionPtr.inc (ref pc);  	continue;  }  case OpCode.OP_SETLIST: {  	int n = GETARG_B (i);  	int c = GETARG_C (i);  	int last;  	Table h;  	if (n == 0) {  		n = cast_int (L.top - ra) - 1;  		L.top = L.ci.top;  	}  	if (c == 0) {  		c = cast_int (pc [0]);  		InstructionPtr.inc (ref pc);  	}  	runtime_check (L' ttistable (ra));  	h = hvalue (ra);  	last = ((c - 1) * LFIELDS_PER_FLUSH) + n;  	if (last > h.sizearray)  		/* needs more space? */luaH_resizearray (L' h' last);  	/* pre-alloc it at once */for (; n > 0; n--) {  		TValue val = ra + n;  		setobj2t (L' luaH_setnum (L' h' last--)' val);  		luaC_barriert (L' h' val);  	}  	continue;  }  case OpCode.OP_CLOSE: {  	luaF_close (L' ra);  	continue;  }  case OpCode.OP_CLOSURE: {  	Proto p;  	Closure ncl;  	int nup' j;  	p = cl.p.p [GETARG_Bx (i)];  	nup = p.nups;  	ncl = luaF_newLclosure (L' nup' cl.env);  	ncl.l.p = p;  	for (j = 0; j < nup; j++' InstructionPtr.inc (ref pc)) {  		if (GET_OPCODE (pc [0]) == OpCode.OP_GETUPVAL)  			ncl.l.upvals [j] = cl.upvals [GETARG_B (pc [0])];  		else {  			lua_assert (GET_OPCODE (pc [0]) == OpCode.OP_MOVE);  			ncl.l.upvals [j] = luaF_findupval (L' base_ + GETARG_B (pc [0]));  		}  	}  	setclvalue (L' ra' ncl);  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaC_checkGC (L);  	base_ = L.base_;  	//);  	continue;  }  case OpCode.OP_VARARG: {  	int b = GETARG_B (i) - 1;  	int j;  	CallInfo ci = L.ci;  	int n = cast_int (ci.base_ - ci.func) - cl.p.numparams - 1;  	if (b == LUA_MULTRET) {  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaD_checkstack (L' n);  		base_ = L.base_;  		//);  		ra = RA (L' base_' i);  		/* previous call may change the stack */b = n;  		L.top = ra + n;  	}  	for (j = 0; j < b; j++) {  		if (j < n) {  			setobjs2s (L' ra + j' ci.base_ - n + j);  		} else {  			setnilvalue (ra + j);  		}  	}  	continue;  }  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaV_execute,The following statement contains a magic number: switch (GET_OPCODE (i)) {  case OpCode.OP_MOVE: {  	setobjs2s (L' ra' RB (L' base_' i));  	continue;  }  case OpCode.OP_LOADK: {  	setobj2s (L' ra' KBx (L' i' k));  	continue;  }  case OpCode.OP_LOADBOOL: {  	setbvalue (ra' GETARG_B (i));  	if (GETARG_C (i) != 0)  		InstructionPtr.inc (ref pc);  	/* skip next instruction (if C) */continue;  }  case OpCode.OP_LOADNIL: {  	TValue rb = RB (L' base_' i);  	do {  		setnilvalue (StkId.dec (ref rb));  	} while (rb >= ra);  	continue;  }  case OpCode.OP_GETUPVAL: {  	int b = GETARG_B (i);  	setobj2s (L' ra' cl.upvals [b].v);  	continue;  }  case OpCode.OP_GETGLOBAL: {  	TValue g = new TValue ();  	TValue rb = KBx (L' i' k);  	sethvalue (L' g' cl.env);  	lua_assert (ttisstring (rb));  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaV_gettable (L' g' rb' ra);  	base_ = L.base_;  	//);  	L.savedpc = InstructionPtr.Assign (pc);  	continue;  }  case OpCode.OP_GETTABLE: {  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaV_gettable (L' RB (L' base_' i)' RKC (L' base_' i' k)' ra);  	base_ = L.base_;  	//);  	L.savedpc = InstructionPtr.Assign (pc);  	continue;  }  case OpCode.OP_SETGLOBAL: {  	TValue g = new TValue ();  	sethvalue (L' g' cl.env);  	lua_assert (ttisstring (KBx (L' i' k)));  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaV_settable (L' g' KBx (L' i' k)' ra);  	base_ = L.base_;  	//);  	L.savedpc = InstructionPtr.Assign (pc);  	continue;  }  case OpCode.OP_SETUPVAL: {  	UpVal uv = cl.upvals [GETARG_B (i)];  	setobj (L' uv.v' ra);  	luaC_barrier (L' uv' ra);  	continue;  }  case OpCode.OP_SETTABLE: {  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaV_settable (L' ra' RKB (L' base_' i' k)' RKC (L' base_' i' k));  	base_ = L.base_;  	//);  	L.savedpc = InstructionPtr.Assign (pc);  	continue;  }  case OpCode.OP_NEWTABLE: {  	int b = GETARG_B (i);  	int c = GETARG_C (i);  	sethvalue (L' ra' luaH_new (L' luaO_fb2int (b)' luaO_fb2int (c)));  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaC_checkGC (L);  	base_ = L.base_;  	//);  	L.savedpc = InstructionPtr.Assign (pc);  	continue;  }  case OpCode.OP_SELF: {  	StkId rb = RB (L' base_' i);  	setobjs2s (L' ra + 1' rb);  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaV_gettable (L' rb' RKC (L' base_' i' k)' ra);  	base_ = L.base_;  	//);  	L.savedpc = InstructionPtr.Assign (pc);  	continue;  }  case OpCode.OP_ADD: {  	arith_op (L' luai_numadd' TMS.TM_ADD' base_' i' k' ra' pc);  	continue;  }  case OpCode.OP_SUB: {  	arith_op (L' luai_numsub' TMS.TM_SUB' base_' i' k' ra' pc);  	continue;  }  case OpCode.OP_MUL: {  	arith_op (L' luai_nummul' TMS.TM_MUL' base_' i' k' ra' pc);  	continue;  }  case OpCode.OP_DIV: {  	arith_op (L' luai_numdiv' TMS.TM_DIV' base_' i' k' ra' pc);  	continue;  }  case OpCode.OP_MOD: {  	arith_op (L' luai_nummod' TMS.TM_MOD' base_' i' k' ra' pc);  	continue;  }  case OpCode.OP_POW: {  	arith_op (L' luai_numpow' TMS.TM_POW' base_' i' k' ra' pc);  	continue;  }  case OpCode.OP_UNM: {  	TValue rb = RB (L' base_' i);  	if (ttisnumber (rb)) {  		lua_Number nb = nvalue (rb);  		setnvalue (ra' luai_numunm (nb));  	} else {  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		Arith (L' ra' rb' rb' TMS.TM_UNM);  		base_ = L.base_;  		//);  		L.savedpc = InstructionPtr.Assign (pc);  	}  	continue;  }  case OpCode.OP_NOT: {  	int res = l_isfalse (RB (L' base_' i)) == 0 ? 0 : 1;  	/* next assignment may change this value */setbvalue (ra' res);  	continue;  }  case OpCode.OP_LEN: {  	TValue rb = RB (L' base_' i);  	switch (ttype (rb)) {  	case LUA_TTABLE: {  		setnvalue (ra' (lua_Number)luaH_getn (hvalue (rb)));  		break;  	}  	case LUA_TSTRING: {  		setnvalue (ra' (lua_Number)tsvalue (rb).len);  		break;  	}  	default: {  		/* try metamethod *///Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		if (call_binTM (L' rb' luaO_nilobject' ra' TMS.TM_LEN) == 0)  			luaG_typeerror (L' rb' "get length of");  		base_ = L.base_;  		//)  		break;  	}  	}  	continue;  }  case OpCode.OP_CONCAT: {  	int b = GETARG_B (i);  	int c = GETARG_C (i);  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaV_concat (L' c - b + 1' c);  	luaC_checkGC (L);  	base_ = L.base_;  	//);  	setobjs2s (L' RA (L' base_' i)' base_ + b);  	continue;  }  case OpCode.OP_JMP: {  	dojump (L' pc' GETARG_sBx (i));  	continue;  }  case OpCode.OP_EQ: {  	TValue rb = RKB (L' base_' i' k);  	TValue rc = RKC (L' base_' i' k);  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	if (equalobj (L' rb' rc) == GETARG_A (i))  		dojump (L' pc' GETARG_sBx (pc [0]));  	base_ = L.base_;  	//);  	InstructionPtr.inc (ref pc);  	continue;  }  case OpCode.OP_LT: {  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	if (luaV_lessthan (L' RKB (L' base_' i' k)' RKC (L' base_' i' k)) == GETARG_A (i))  		dojump (L' pc' GETARG_sBx (pc [0]));  	base_ = L.base_;  	//);  	InstructionPtr.inc (ref pc);  	continue;  }  case OpCode.OP_LE: {  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	if (lessequal (L' RKB (L' base_' i' k)' RKC (L' base_' i' k)) == GETARG_A (i))  		dojump (L' pc' GETARG_sBx (pc [0]));  	base_ = L.base_;  	//);  	InstructionPtr.inc (ref pc);  	continue;  }  case OpCode.OP_TEST: {  	if (l_isfalse (ra) != GETARG_C (i))  		dojump (L' pc' GETARG_sBx (pc [0]));  	InstructionPtr.inc (ref pc);  	continue;  }  case OpCode.OP_TESTSET: {  	TValue rb = RB (L' base_' i);  	if (l_isfalse (rb) != GETARG_C (i)) {  		setobjs2s (L' ra' rb);  		dojump (L' pc' GETARG_sBx (pc [0]));  	}  	InstructionPtr.inc (ref pc);  	continue;  }  case OpCode.OP_CALL: {  	int b = GETARG_B (i);  	int nresults = GETARG_C (i) - 1;  	if (b != 0)  		L.top = ra + b;  	/* else previous instruction set top */L.savedpc = InstructionPtr.Assign (pc);  	switch (luaD_precall (L' ra' nresults)) {  	case PCRLUA: {  		nexeccalls++;  		goto reentry;  		/* restart luaV_execute over new Lua function */}  	case PCRC: {  		/* it was a C function (`precall' called it); adjust results */if (nresults >= 0)  			L.top = L.ci.top;  		base_ = L.base_;  		continue;  	}  	default: {  		return;  		/* yield */}  	}  }  case OpCode.OP_TAILCALL: {  	int b = GETARG_B (i);  	if (b != 0)  		L.top = ra + b;  	/* else previous instruction set top */L.savedpc = InstructionPtr.Assign (pc);  	lua_assert (GETARG_C (i) - 1 == LUA_MULTRET);  	switch (luaD_precall (L' ra' LUA_MULTRET)) {  	case PCRLUA: {  		/* tail call: put new frame in place of previous one */CallInfo ci = L.ci - 1;  		/* previous frame */int aux;  		StkId func = ci.func;  		StkId pfunc = (ci + 1).func;  		/* previous function index */if (L.openupval != null)  			luaF_close (L' ci.base_);  		L.base_ = ci.base_ = ci.func + (ci [1].base_ - pfunc);  		for (aux = 0; pfunc + aux < L.top; aux++)  			/* move frame down */setobjs2s (L' func + aux' pfunc + aux);  		ci.top = L.top = func + aux;  		/* correct top */lua_assert (L.top == L.base_ + clvalue (func).l.p.maxstacksize);  		ci.savedpc = InstructionPtr.Assign (L.savedpc);  		ci.tailcalls++;  		/* one more call lost */CallInfo.dec (ref L.ci);  		/* remove new frame */goto reentry;  	}  	case PCRC: {  		/* it was a C function (`precall' called it) */base_ = L.base_;  		continue;  	}  	default: {  		return;  		/* yield */}  	}  }  case OpCode.OP_RETURN: {  	int b = GETARG_B (i);  	if (b != 0)  		L.top = ra + b - 1;  	if (L.openupval != null)  		luaF_close (L' base_);  	L.savedpc = InstructionPtr.Assign (pc);  	b = luaD_poscall (L' ra);  	if (--nexeccalls == 0)  		/* was previous function running `here'? */return;  	/* no: return */else {  		/* yes: continue its execution */if (b != 0)  			L.top = L.ci.top;  		lua_assert (isLua (L.ci));  		lua_assert (GET_OPCODE (L.ci.savedpc [-1]) == OpCode.OP_CALL);  		goto reentry;  	}  }  case OpCode.OP_FORLOOP: {  	lua_Number step = nvalue (ra + 2);  	lua_Number idx = luai_numadd (nvalue (ra)' step);  	/* increment index */lua_Number limit = nvalue (ra + 1);  	if (luai_numlt (0' step) ? luai_numle (idx' limit) : luai_numle (limit' idx)) {  		dojump (L' pc' GETARG_sBx (i));  		/* jump back */setnvalue (ra' idx);  		/* update internal index... */setnvalue (ra + 3' idx);  		/* ...and external index */}  	continue;  }  case OpCode.OP_FORPREP: {  	TValue init = ra;  	TValue plimit = ra + 1;  	TValue pstep = ra + 2;  	L.savedpc = InstructionPtr.Assign (pc);  	/* next steps may throw errors */if (tonumber (ref init' ra) == 0)  		luaG_runerror (L' LUA_QL ("for") + " initial value must be a number");  	else if (tonumber (ref plimit' ra + 1) == 0)  		luaG_runerror (L' LUA_QL ("for") + " limit must be a number");  	else if (tonumber (ref pstep' ra + 2) == 0)  		luaG_runerror (L' LUA_QL ("for") + " step must be a number");  	setnvalue (ra' luai_numsub (nvalue (ra)' nvalue (pstep)));  	dojump (L' pc' GETARG_sBx (i));  	continue;  }  case OpCode.OP_TFORLOOP: {  	StkId cb = ra + 3;  	/* call base */setobjs2s (L' cb + 2' ra + 2);  	setobjs2s (L' cb + 1' ra + 1);  	setobjs2s (L' cb' ra);  	L.top = cb + 3;  	/* func. + 2 args (state and index) *///Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaD_call (L' cb' GETARG_C (i));  	base_ = L.base_;  	//);  	L.top = L.ci.top;  	cb = RA (L' base_' i) + 3;  	/* previous call may change the stack */if (!ttisnil (cb)) {  		/* continue loop? */setobjs2s (L' cb - 1' cb);  		/* save control variable */dojump (L' pc' GETARG_sBx (pc [0]));  		/* jump back */}  	InstructionPtr.inc (ref pc);  	continue;  }  case OpCode.OP_SETLIST: {  	int n = GETARG_B (i);  	int c = GETARG_C (i);  	int last;  	Table h;  	if (n == 0) {  		n = cast_int (L.top - ra) - 1;  		L.top = L.ci.top;  	}  	if (c == 0) {  		c = cast_int (pc [0]);  		InstructionPtr.inc (ref pc);  	}  	runtime_check (L' ttistable (ra));  	h = hvalue (ra);  	last = ((c - 1) * LFIELDS_PER_FLUSH) + n;  	if (last > h.sizearray)  		/* needs more space? */luaH_resizearray (L' h' last);  	/* pre-alloc it at once */for (; n > 0; n--) {  		TValue val = ra + n;  		setobj2t (L' luaH_setnum (L' h' last--)' val);  		luaC_barriert (L' h' val);  	}  	continue;  }  case OpCode.OP_CLOSE: {  	luaF_close (L' ra);  	continue;  }  case OpCode.OP_CLOSURE: {  	Proto p;  	Closure ncl;  	int nup' j;  	p = cl.p.p [GETARG_Bx (i)];  	nup = p.nups;  	ncl = luaF_newLclosure (L' nup' cl.env);  	ncl.l.p = p;  	for (j = 0; j < nup; j++' InstructionPtr.inc (ref pc)) {  		if (GET_OPCODE (pc [0]) == OpCode.OP_GETUPVAL)  			ncl.l.upvals [j] = cl.upvals [GETARG_B (pc [0])];  		else {  			lua_assert (GET_OPCODE (pc [0]) == OpCode.OP_MOVE);  			ncl.l.upvals [j] = luaF_findupval (L' base_ + GETARG_B (pc [0]));  		}  	}  	setclvalue (L' ra' ncl);  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaC_checkGC (L);  	base_ = L.base_;  	//);  	continue;  }  case OpCode.OP_VARARG: {  	int b = GETARG_B (i) - 1;  	int j;  	CallInfo ci = L.ci;  	int n = cast_int (ci.base_ - ci.func) - cl.p.numparams - 1;  	if (b == LUA_MULTRET) {  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaD_checkstack (L' n);  		base_ = L.base_;  		//);  		ra = RA (L' base_' i);  		/* previous call may change the stack */b = n;  		L.top = ra + n;  	}  	for (j = 0; j < b; j++) {  		if (j < n) {  			setobjs2s (L' ra + j' ci.base_ - n + j);  		} else {  			setnilvalue (ra + j);  		}  	}  	continue;  }  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaV_execute,The following statement contains a magic number: switch (GET_OPCODE (i)) {  case OpCode.OP_MOVE: {  	setobjs2s (L' ra' RB (L' base_' i));  	continue;  }  case OpCode.OP_LOADK: {  	setobj2s (L' ra' KBx (L' i' k));  	continue;  }  case OpCode.OP_LOADBOOL: {  	setbvalue (ra' GETARG_B (i));  	if (GETARG_C (i) != 0)  		InstructionPtr.inc (ref pc);  	/* skip next instruction (if C) */continue;  }  case OpCode.OP_LOADNIL: {  	TValue rb = RB (L' base_' i);  	do {  		setnilvalue (StkId.dec (ref rb));  	} while (rb >= ra);  	continue;  }  case OpCode.OP_GETUPVAL: {  	int b = GETARG_B (i);  	setobj2s (L' ra' cl.upvals [b].v);  	continue;  }  case OpCode.OP_GETGLOBAL: {  	TValue g = new TValue ();  	TValue rb = KBx (L' i' k);  	sethvalue (L' g' cl.env);  	lua_assert (ttisstring (rb));  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaV_gettable (L' g' rb' ra);  	base_ = L.base_;  	//);  	L.savedpc = InstructionPtr.Assign (pc);  	continue;  }  case OpCode.OP_GETTABLE: {  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaV_gettable (L' RB (L' base_' i)' RKC (L' base_' i' k)' ra);  	base_ = L.base_;  	//);  	L.savedpc = InstructionPtr.Assign (pc);  	continue;  }  case OpCode.OP_SETGLOBAL: {  	TValue g = new TValue ();  	sethvalue (L' g' cl.env);  	lua_assert (ttisstring (KBx (L' i' k)));  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaV_settable (L' g' KBx (L' i' k)' ra);  	base_ = L.base_;  	//);  	L.savedpc = InstructionPtr.Assign (pc);  	continue;  }  case OpCode.OP_SETUPVAL: {  	UpVal uv = cl.upvals [GETARG_B (i)];  	setobj (L' uv.v' ra);  	luaC_barrier (L' uv' ra);  	continue;  }  case OpCode.OP_SETTABLE: {  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaV_settable (L' ra' RKB (L' base_' i' k)' RKC (L' base_' i' k));  	base_ = L.base_;  	//);  	L.savedpc = InstructionPtr.Assign (pc);  	continue;  }  case OpCode.OP_NEWTABLE: {  	int b = GETARG_B (i);  	int c = GETARG_C (i);  	sethvalue (L' ra' luaH_new (L' luaO_fb2int (b)' luaO_fb2int (c)));  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaC_checkGC (L);  	base_ = L.base_;  	//);  	L.savedpc = InstructionPtr.Assign (pc);  	continue;  }  case OpCode.OP_SELF: {  	StkId rb = RB (L' base_' i);  	setobjs2s (L' ra + 1' rb);  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaV_gettable (L' rb' RKC (L' base_' i' k)' ra);  	base_ = L.base_;  	//);  	L.savedpc = InstructionPtr.Assign (pc);  	continue;  }  case OpCode.OP_ADD: {  	arith_op (L' luai_numadd' TMS.TM_ADD' base_' i' k' ra' pc);  	continue;  }  case OpCode.OP_SUB: {  	arith_op (L' luai_numsub' TMS.TM_SUB' base_' i' k' ra' pc);  	continue;  }  case OpCode.OP_MUL: {  	arith_op (L' luai_nummul' TMS.TM_MUL' base_' i' k' ra' pc);  	continue;  }  case OpCode.OP_DIV: {  	arith_op (L' luai_numdiv' TMS.TM_DIV' base_' i' k' ra' pc);  	continue;  }  case OpCode.OP_MOD: {  	arith_op (L' luai_nummod' TMS.TM_MOD' base_' i' k' ra' pc);  	continue;  }  case OpCode.OP_POW: {  	arith_op (L' luai_numpow' TMS.TM_POW' base_' i' k' ra' pc);  	continue;  }  case OpCode.OP_UNM: {  	TValue rb = RB (L' base_' i);  	if (ttisnumber (rb)) {  		lua_Number nb = nvalue (rb);  		setnvalue (ra' luai_numunm (nb));  	} else {  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		Arith (L' ra' rb' rb' TMS.TM_UNM);  		base_ = L.base_;  		//);  		L.savedpc = InstructionPtr.Assign (pc);  	}  	continue;  }  case OpCode.OP_NOT: {  	int res = l_isfalse (RB (L' base_' i)) == 0 ? 0 : 1;  	/* next assignment may change this value */setbvalue (ra' res);  	continue;  }  case OpCode.OP_LEN: {  	TValue rb = RB (L' base_' i);  	switch (ttype (rb)) {  	case LUA_TTABLE: {  		setnvalue (ra' (lua_Number)luaH_getn (hvalue (rb)));  		break;  	}  	case LUA_TSTRING: {  		setnvalue (ra' (lua_Number)tsvalue (rb).len);  		break;  	}  	default: {  		/* try metamethod *///Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		if (call_binTM (L' rb' luaO_nilobject' ra' TMS.TM_LEN) == 0)  			luaG_typeerror (L' rb' "get length of");  		base_ = L.base_;  		//)  		break;  	}  	}  	continue;  }  case OpCode.OP_CONCAT: {  	int b = GETARG_B (i);  	int c = GETARG_C (i);  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaV_concat (L' c - b + 1' c);  	luaC_checkGC (L);  	base_ = L.base_;  	//);  	setobjs2s (L' RA (L' base_' i)' base_ + b);  	continue;  }  case OpCode.OP_JMP: {  	dojump (L' pc' GETARG_sBx (i));  	continue;  }  case OpCode.OP_EQ: {  	TValue rb = RKB (L' base_' i' k);  	TValue rc = RKC (L' base_' i' k);  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	if (equalobj (L' rb' rc) == GETARG_A (i))  		dojump (L' pc' GETARG_sBx (pc [0]));  	base_ = L.base_;  	//);  	InstructionPtr.inc (ref pc);  	continue;  }  case OpCode.OP_LT: {  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	if (luaV_lessthan (L' RKB (L' base_' i' k)' RKC (L' base_' i' k)) == GETARG_A (i))  		dojump (L' pc' GETARG_sBx (pc [0]));  	base_ = L.base_;  	//);  	InstructionPtr.inc (ref pc);  	continue;  }  case OpCode.OP_LE: {  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	if (lessequal (L' RKB (L' base_' i' k)' RKC (L' base_' i' k)) == GETARG_A (i))  		dojump (L' pc' GETARG_sBx (pc [0]));  	base_ = L.base_;  	//);  	InstructionPtr.inc (ref pc);  	continue;  }  case OpCode.OP_TEST: {  	if (l_isfalse (ra) != GETARG_C (i))  		dojump (L' pc' GETARG_sBx (pc [0]));  	InstructionPtr.inc (ref pc);  	continue;  }  case OpCode.OP_TESTSET: {  	TValue rb = RB (L' base_' i);  	if (l_isfalse (rb) != GETARG_C (i)) {  		setobjs2s (L' ra' rb);  		dojump (L' pc' GETARG_sBx (pc [0]));  	}  	InstructionPtr.inc (ref pc);  	continue;  }  case OpCode.OP_CALL: {  	int b = GETARG_B (i);  	int nresults = GETARG_C (i) - 1;  	if (b != 0)  		L.top = ra + b;  	/* else previous instruction set top */L.savedpc = InstructionPtr.Assign (pc);  	switch (luaD_precall (L' ra' nresults)) {  	case PCRLUA: {  		nexeccalls++;  		goto reentry;  		/* restart luaV_execute over new Lua function */}  	case PCRC: {  		/* it was a C function (`precall' called it); adjust results */if (nresults >= 0)  			L.top = L.ci.top;  		base_ = L.base_;  		continue;  	}  	default: {  		return;  		/* yield */}  	}  }  case OpCode.OP_TAILCALL: {  	int b = GETARG_B (i);  	if (b != 0)  		L.top = ra + b;  	/* else previous instruction set top */L.savedpc = InstructionPtr.Assign (pc);  	lua_assert (GETARG_C (i) - 1 == LUA_MULTRET);  	switch (luaD_precall (L' ra' LUA_MULTRET)) {  	case PCRLUA: {  		/* tail call: put new frame in place of previous one */CallInfo ci = L.ci - 1;  		/* previous frame */int aux;  		StkId func = ci.func;  		StkId pfunc = (ci + 1).func;  		/* previous function index */if (L.openupval != null)  			luaF_close (L' ci.base_);  		L.base_ = ci.base_ = ci.func + (ci [1].base_ - pfunc);  		for (aux = 0; pfunc + aux < L.top; aux++)  			/* move frame down */setobjs2s (L' func + aux' pfunc + aux);  		ci.top = L.top = func + aux;  		/* correct top */lua_assert (L.top == L.base_ + clvalue (func).l.p.maxstacksize);  		ci.savedpc = InstructionPtr.Assign (L.savedpc);  		ci.tailcalls++;  		/* one more call lost */CallInfo.dec (ref L.ci);  		/* remove new frame */goto reentry;  	}  	case PCRC: {  		/* it was a C function (`precall' called it) */base_ = L.base_;  		continue;  	}  	default: {  		return;  		/* yield */}  	}  }  case OpCode.OP_RETURN: {  	int b = GETARG_B (i);  	if (b != 0)  		L.top = ra + b - 1;  	if (L.openupval != null)  		luaF_close (L' base_);  	L.savedpc = InstructionPtr.Assign (pc);  	b = luaD_poscall (L' ra);  	if (--nexeccalls == 0)  		/* was previous function running `here'? */return;  	/* no: return */else {  		/* yes: continue its execution */if (b != 0)  			L.top = L.ci.top;  		lua_assert (isLua (L.ci));  		lua_assert (GET_OPCODE (L.ci.savedpc [-1]) == OpCode.OP_CALL);  		goto reentry;  	}  }  case OpCode.OP_FORLOOP: {  	lua_Number step = nvalue (ra + 2);  	lua_Number idx = luai_numadd (nvalue (ra)' step);  	/* increment index */lua_Number limit = nvalue (ra + 1);  	if (luai_numlt (0' step) ? luai_numle (idx' limit) : luai_numle (limit' idx)) {  		dojump (L' pc' GETARG_sBx (i));  		/* jump back */setnvalue (ra' idx);  		/* update internal index... */setnvalue (ra + 3' idx);  		/* ...and external index */}  	continue;  }  case OpCode.OP_FORPREP: {  	TValue init = ra;  	TValue plimit = ra + 1;  	TValue pstep = ra + 2;  	L.savedpc = InstructionPtr.Assign (pc);  	/* next steps may throw errors */if (tonumber (ref init' ra) == 0)  		luaG_runerror (L' LUA_QL ("for") + " initial value must be a number");  	else if (tonumber (ref plimit' ra + 1) == 0)  		luaG_runerror (L' LUA_QL ("for") + " limit must be a number");  	else if (tonumber (ref pstep' ra + 2) == 0)  		luaG_runerror (L' LUA_QL ("for") + " step must be a number");  	setnvalue (ra' luai_numsub (nvalue (ra)' nvalue (pstep)));  	dojump (L' pc' GETARG_sBx (i));  	continue;  }  case OpCode.OP_TFORLOOP: {  	StkId cb = ra + 3;  	/* call base */setobjs2s (L' cb + 2' ra + 2);  	setobjs2s (L' cb + 1' ra + 1);  	setobjs2s (L' cb' ra);  	L.top = cb + 3;  	/* func. + 2 args (state and index) *///Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaD_call (L' cb' GETARG_C (i));  	base_ = L.base_;  	//);  	L.top = L.ci.top;  	cb = RA (L' base_' i) + 3;  	/* previous call may change the stack */if (!ttisnil (cb)) {  		/* continue loop? */setobjs2s (L' cb - 1' cb);  		/* save control variable */dojump (L' pc' GETARG_sBx (pc [0]));  		/* jump back */}  	InstructionPtr.inc (ref pc);  	continue;  }  case OpCode.OP_SETLIST: {  	int n = GETARG_B (i);  	int c = GETARG_C (i);  	int last;  	Table h;  	if (n == 0) {  		n = cast_int (L.top - ra) - 1;  		L.top = L.ci.top;  	}  	if (c == 0) {  		c = cast_int (pc [0]);  		InstructionPtr.inc (ref pc);  	}  	runtime_check (L' ttistable (ra));  	h = hvalue (ra);  	last = ((c - 1) * LFIELDS_PER_FLUSH) + n;  	if (last > h.sizearray)  		/* needs more space? */luaH_resizearray (L' h' last);  	/* pre-alloc it at once */for (; n > 0; n--) {  		TValue val = ra + n;  		setobj2t (L' luaH_setnum (L' h' last--)' val);  		luaC_barriert (L' h' val);  	}  	continue;  }  case OpCode.OP_CLOSE: {  	luaF_close (L' ra);  	continue;  }  case OpCode.OP_CLOSURE: {  	Proto p;  	Closure ncl;  	int nup' j;  	p = cl.p.p [GETARG_Bx (i)];  	nup = p.nups;  	ncl = luaF_newLclosure (L' nup' cl.env);  	ncl.l.p = p;  	for (j = 0; j < nup; j++' InstructionPtr.inc (ref pc)) {  		if (GET_OPCODE (pc [0]) == OpCode.OP_GETUPVAL)  			ncl.l.upvals [j] = cl.upvals [GETARG_B (pc [0])];  		else {  			lua_assert (GET_OPCODE (pc [0]) == OpCode.OP_MOVE);  			ncl.l.upvals [j] = luaF_findupval (L' base_ + GETARG_B (pc [0]));  		}  	}  	setclvalue (L' ra' ncl);  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaC_checkGC (L);  	base_ = L.base_;  	//);  	continue;  }  case OpCode.OP_VARARG: {  	int b = GETARG_B (i) - 1;  	int j;  	CallInfo ci = L.ci;  	int n = cast_int (ci.base_ - ci.func) - cl.p.numparams - 1;  	if (b == LUA_MULTRET) {  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaD_checkstack (L' n);  		base_ = L.base_;  		//);  		ra = RA (L' base_' i);  		/* previous call may change the stack */b = n;  		L.top = ra + n;  	}  	for (j = 0; j < b; j++) {  		if (j < n) {  			setobjs2s (L' ra + j' ci.base_ - n + j);  		} else {  			setnilvalue (ra + j);  		}  	}  	continue;  }  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaV_execute,The following statement contains a magic number: switch (GET_OPCODE (i)) {  case OpCode.OP_MOVE: {  	setobjs2s (L' ra' RB (L' base_' i));  	continue;  }  case OpCode.OP_LOADK: {  	setobj2s (L' ra' KBx (L' i' k));  	continue;  }  case OpCode.OP_LOADBOOL: {  	setbvalue (ra' GETARG_B (i));  	if (GETARG_C (i) != 0)  		InstructionPtr.inc (ref pc);  	/* skip next instruction (if C) */continue;  }  case OpCode.OP_LOADNIL: {  	TValue rb = RB (L' base_' i);  	do {  		setnilvalue (StkId.dec (ref rb));  	} while (rb >= ra);  	continue;  }  case OpCode.OP_GETUPVAL: {  	int b = GETARG_B (i);  	setobj2s (L' ra' cl.upvals [b].v);  	continue;  }  case OpCode.OP_GETGLOBAL: {  	TValue g = new TValue ();  	TValue rb = KBx (L' i' k);  	sethvalue (L' g' cl.env);  	lua_assert (ttisstring (rb));  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaV_gettable (L' g' rb' ra);  	base_ = L.base_;  	//);  	L.savedpc = InstructionPtr.Assign (pc);  	continue;  }  case OpCode.OP_GETTABLE: {  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaV_gettable (L' RB (L' base_' i)' RKC (L' base_' i' k)' ra);  	base_ = L.base_;  	//);  	L.savedpc = InstructionPtr.Assign (pc);  	continue;  }  case OpCode.OP_SETGLOBAL: {  	TValue g = new TValue ();  	sethvalue (L' g' cl.env);  	lua_assert (ttisstring (KBx (L' i' k)));  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaV_settable (L' g' KBx (L' i' k)' ra);  	base_ = L.base_;  	//);  	L.savedpc = InstructionPtr.Assign (pc);  	continue;  }  case OpCode.OP_SETUPVAL: {  	UpVal uv = cl.upvals [GETARG_B (i)];  	setobj (L' uv.v' ra);  	luaC_barrier (L' uv' ra);  	continue;  }  case OpCode.OP_SETTABLE: {  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaV_settable (L' ra' RKB (L' base_' i' k)' RKC (L' base_' i' k));  	base_ = L.base_;  	//);  	L.savedpc = InstructionPtr.Assign (pc);  	continue;  }  case OpCode.OP_NEWTABLE: {  	int b = GETARG_B (i);  	int c = GETARG_C (i);  	sethvalue (L' ra' luaH_new (L' luaO_fb2int (b)' luaO_fb2int (c)));  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaC_checkGC (L);  	base_ = L.base_;  	//);  	L.savedpc = InstructionPtr.Assign (pc);  	continue;  }  case OpCode.OP_SELF: {  	StkId rb = RB (L' base_' i);  	setobjs2s (L' ra + 1' rb);  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaV_gettable (L' rb' RKC (L' base_' i' k)' ra);  	base_ = L.base_;  	//);  	L.savedpc = InstructionPtr.Assign (pc);  	continue;  }  case OpCode.OP_ADD: {  	arith_op (L' luai_numadd' TMS.TM_ADD' base_' i' k' ra' pc);  	continue;  }  case OpCode.OP_SUB: {  	arith_op (L' luai_numsub' TMS.TM_SUB' base_' i' k' ra' pc);  	continue;  }  case OpCode.OP_MUL: {  	arith_op (L' luai_nummul' TMS.TM_MUL' base_' i' k' ra' pc);  	continue;  }  case OpCode.OP_DIV: {  	arith_op (L' luai_numdiv' TMS.TM_DIV' base_' i' k' ra' pc);  	continue;  }  case OpCode.OP_MOD: {  	arith_op (L' luai_nummod' TMS.TM_MOD' base_' i' k' ra' pc);  	continue;  }  case OpCode.OP_POW: {  	arith_op (L' luai_numpow' TMS.TM_POW' base_' i' k' ra' pc);  	continue;  }  case OpCode.OP_UNM: {  	TValue rb = RB (L' base_' i);  	if (ttisnumber (rb)) {  		lua_Number nb = nvalue (rb);  		setnvalue (ra' luai_numunm (nb));  	} else {  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		Arith (L' ra' rb' rb' TMS.TM_UNM);  		base_ = L.base_;  		//);  		L.savedpc = InstructionPtr.Assign (pc);  	}  	continue;  }  case OpCode.OP_NOT: {  	int res = l_isfalse (RB (L' base_' i)) == 0 ? 0 : 1;  	/* next assignment may change this value */setbvalue (ra' res);  	continue;  }  case OpCode.OP_LEN: {  	TValue rb = RB (L' base_' i);  	switch (ttype (rb)) {  	case LUA_TTABLE: {  		setnvalue (ra' (lua_Number)luaH_getn (hvalue (rb)));  		break;  	}  	case LUA_TSTRING: {  		setnvalue (ra' (lua_Number)tsvalue (rb).len);  		break;  	}  	default: {  		/* try metamethod *///Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		if (call_binTM (L' rb' luaO_nilobject' ra' TMS.TM_LEN) == 0)  			luaG_typeerror (L' rb' "get length of");  		base_ = L.base_;  		//)  		break;  	}  	}  	continue;  }  case OpCode.OP_CONCAT: {  	int b = GETARG_B (i);  	int c = GETARG_C (i);  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaV_concat (L' c - b + 1' c);  	luaC_checkGC (L);  	base_ = L.base_;  	//);  	setobjs2s (L' RA (L' base_' i)' base_ + b);  	continue;  }  case OpCode.OP_JMP: {  	dojump (L' pc' GETARG_sBx (i));  	continue;  }  case OpCode.OP_EQ: {  	TValue rb = RKB (L' base_' i' k);  	TValue rc = RKC (L' base_' i' k);  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	if (equalobj (L' rb' rc) == GETARG_A (i))  		dojump (L' pc' GETARG_sBx (pc [0]));  	base_ = L.base_;  	//);  	InstructionPtr.inc (ref pc);  	continue;  }  case OpCode.OP_LT: {  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	if (luaV_lessthan (L' RKB (L' base_' i' k)' RKC (L' base_' i' k)) == GETARG_A (i))  		dojump (L' pc' GETARG_sBx (pc [0]));  	base_ = L.base_;  	//);  	InstructionPtr.inc (ref pc);  	continue;  }  case OpCode.OP_LE: {  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	if (lessequal (L' RKB (L' base_' i' k)' RKC (L' base_' i' k)) == GETARG_A (i))  		dojump (L' pc' GETARG_sBx (pc [0]));  	base_ = L.base_;  	//);  	InstructionPtr.inc (ref pc);  	continue;  }  case OpCode.OP_TEST: {  	if (l_isfalse (ra) != GETARG_C (i))  		dojump (L' pc' GETARG_sBx (pc [0]));  	InstructionPtr.inc (ref pc);  	continue;  }  case OpCode.OP_TESTSET: {  	TValue rb = RB (L' base_' i);  	if (l_isfalse (rb) != GETARG_C (i)) {  		setobjs2s (L' ra' rb);  		dojump (L' pc' GETARG_sBx (pc [0]));  	}  	InstructionPtr.inc (ref pc);  	continue;  }  case OpCode.OP_CALL: {  	int b = GETARG_B (i);  	int nresults = GETARG_C (i) - 1;  	if (b != 0)  		L.top = ra + b;  	/* else previous instruction set top */L.savedpc = InstructionPtr.Assign (pc);  	switch (luaD_precall (L' ra' nresults)) {  	case PCRLUA: {  		nexeccalls++;  		goto reentry;  		/* restart luaV_execute over new Lua function */}  	case PCRC: {  		/* it was a C function (`precall' called it); adjust results */if (nresults >= 0)  			L.top = L.ci.top;  		base_ = L.base_;  		continue;  	}  	default: {  		return;  		/* yield */}  	}  }  case OpCode.OP_TAILCALL: {  	int b = GETARG_B (i);  	if (b != 0)  		L.top = ra + b;  	/* else previous instruction set top */L.savedpc = InstructionPtr.Assign (pc);  	lua_assert (GETARG_C (i) - 1 == LUA_MULTRET);  	switch (luaD_precall (L' ra' LUA_MULTRET)) {  	case PCRLUA: {  		/* tail call: put new frame in place of previous one */CallInfo ci = L.ci - 1;  		/* previous frame */int aux;  		StkId func = ci.func;  		StkId pfunc = (ci + 1).func;  		/* previous function index */if (L.openupval != null)  			luaF_close (L' ci.base_);  		L.base_ = ci.base_ = ci.func + (ci [1].base_ - pfunc);  		for (aux = 0; pfunc + aux < L.top; aux++)  			/* move frame down */setobjs2s (L' func + aux' pfunc + aux);  		ci.top = L.top = func + aux;  		/* correct top */lua_assert (L.top == L.base_ + clvalue (func).l.p.maxstacksize);  		ci.savedpc = InstructionPtr.Assign (L.savedpc);  		ci.tailcalls++;  		/* one more call lost */CallInfo.dec (ref L.ci);  		/* remove new frame */goto reentry;  	}  	case PCRC: {  		/* it was a C function (`precall' called it) */base_ = L.base_;  		continue;  	}  	default: {  		return;  		/* yield */}  	}  }  case OpCode.OP_RETURN: {  	int b = GETARG_B (i);  	if (b != 0)  		L.top = ra + b - 1;  	if (L.openupval != null)  		luaF_close (L' base_);  	L.savedpc = InstructionPtr.Assign (pc);  	b = luaD_poscall (L' ra);  	if (--nexeccalls == 0)  		/* was previous function running `here'? */return;  	/* no: return */else {  		/* yes: continue its execution */if (b != 0)  			L.top = L.ci.top;  		lua_assert (isLua (L.ci));  		lua_assert (GET_OPCODE (L.ci.savedpc [-1]) == OpCode.OP_CALL);  		goto reentry;  	}  }  case OpCode.OP_FORLOOP: {  	lua_Number step = nvalue (ra + 2);  	lua_Number idx = luai_numadd (nvalue (ra)' step);  	/* increment index */lua_Number limit = nvalue (ra + 1);  	if (luai_numlt (0' step) ? luai_numle (idx' limit) : luai_numle (limit' idx)) {  		dojump (L' pc' GETARG_sBx (i));  		/* jump back */setnvalue (ra' idx);  		/* update internal index... */setnvalue (ra + 3' idx);  		/* ...and external index */}  	continue;  }  case OpCode.OP_FORPREP: {  	TValue init = ra;  	TValue plimit = ra + 1;  	TValue pstep = ra + 2;  	L.savedpc = InstructionPtr.Assign (pc);  	/* next steps may throw errors */if (tonumber (ref init' ra) == 0)  		luaG_runerror (L' LUA_QL ("for") + " initial value must be a number");  	else if (tonumber (ref plimit' ra + 1) == 0)  		luaG_runerror (L' LUA_QL ("for") + " limit must be a number");  	else if (tonumber (ref pstep' ra + 2) == 0)  		luaG_runerror (L' LUA_QL ("for") + " step must be a number");  	setnvalue (ra' luai_numsub (nvalue (ra)' nvalue (pstep)));  	dojump (L' pc' GETARG_sBx (i));  	continue;  }  case OpCode.OP_TFORLOOP: {  	StkId cb = ra + 3;  	/* call base */setobjs2s (L' cb + 2' ra + 2);  	setobjs2s (L' cb + 1' ra + 1);  	setobjs2s (L' cb' ra);  	L.top = cb + 3;  	/* func. + 2 args (state and index) *///Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaD_call (L' cb' GETARG_C (i));  	base_ = L.base_;  	//);  	L.top = L.ci.top;  	cb = RA (L' base_' i) + 3;  	/* previous call may change the stack */if (!ttisnil (cb)) {  		/* continue loop? */setobjs2s (L' cb - 1' cb);  		/* save control variable */dojump (L' pc' GETARG_sBx (pc [0]));  		/* jump back */}  	InstructionPtr.inc (ref pc);  	continue;  }  case OpCode.OP_SETLIST: {  	int n = GETARG_B (i);  	int c = GETARG_C (i);  	int last;  	Table h;  	if (n == 0) {  		n = cast_int (L.top - ra) - 1;  		L.top = L.ci.top;  	}  	if (c == 0) {  		c = cast_int (pc [0]);  		InstructionPtr.inc (ref pc);  	}  	runtime_check (L' ttistable (ra));  	h = hvalue (ra);  	last = ((c - 1) * LFIELDS_PER_FLUSH) + n;  	if (last > h.sizearray)  		/* needs more space? */luaH_resizearray (L' h' last);  	/* pre-alloc it at once */for (; n > 0; n--) {  		TValue val = ra + n;  		setobj2t (L' luaH_setnum (L' h' last--)' val);  		luaC_barriert (L' h' val);  	}  	continue;  }  case OpCode.OP_CLOSE: {  	luaF_close (L' ra);  	continue;  }  case OpCode.OP_CLOSURE: {  	Proto p;  	Closure ncl;  	int nup' j;  	p = cl.p.p [GETARG_Bx (i)];  	nup = p.nups;  	ncl = luaF_newLclosure (L' nup' cl.env);  	ncl.l.p = p;  	for (j = 0; j < nup; j++' InstructionPtr.inc (ref pc)) {  		if (GET_OPCODE (pc [0]) == OpCode.OP_GETUPVAL)  			ncl.l.upvals [j] = cl.upvals [GETARG_B (pc [0])];  		else {  			lua_assert (GET_OPCODE (pc [0]) == OpCode.OP_MOVE);  			ncl.l.upvals [j] = luaF_findupval (L' base_ + GETARG_B (pc [0]));  		}  	}  	setclvalue (L' ra' ncl);  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaC_checkGC (L);  	base_ = L.base_;  	//);  	continue;  }  case OpCode.OP_VARARG: {  	int b = GETARG_B (i) - 1;  	int j;  	CallInfo ci = L.ci;  	int n = cast_int (ci.base_ - ci.func) - cl.p.numparams - 1;  	if (b == LUA_MULTRET) {  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaD_checkstack (L' n);  		base_ = L.base_;  		//);  		ra = RA (L' base_' i);  		/* previous call may change the stack */b = n;  		L.top = ra + n;  	}  	for (j = 0; j < b; j++) {  		if (j < n) {  			setobjs2s (L' ra + j' ci.base_ - n + j);  		} else {  			setnilvalue (ra + j);  		}  	}  	continue;  }  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaV_execute,The following statement contains a magic number: switch (GET_OPCODE (i)) {  case OpCode.OP_MOVE: {  	setobjs2s (L' ra' RB (L' base_' i));  	continue;  }  case OpCode.OP_LOADK: {  	setobj2s (L' ra' KBx (L' i' k));  	continue;  }  case OpCode.OP_LOADBOOL: {  	setbvalue (ra' GETARG_B (i));  	if (GETARG_C (i) != 0)  		InstructionPtr.inc (ref pc);  	/* skip next instruction (if C) */continue;  }  case OpCode.OP_LOADNIL: {  	TValue rb = RB (L' base_' i);  	do {  		setnilvalue (StkId.dec (ref rb));  	} while (rb >= ra);  	continue;  }  case OpCode.OP_GETUPVAL: {  	int b = GETARG_B (i);  	setobj2s (L' ra' cl.upvals [b].v);  	continue;  }  case OpCode.OP_GETGLOBAL: {  	TValue g = new TValue ();  	TValue rb = KBx (L' i' k);  	sethvalue (L' g' cl.env);  	lua_assert (ttisstring (rb));  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaV_gettable (L' g' rb' ra);  	base_ = L.base_;  	//);  	L.savedpc = InstructionPtr.Assign (pc);  	continue;  }  case OpCode.OP_GETTABLE: {  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaV_gettable (L' RB (L' base_' i)' RKC (L' base_' i' k)' ra);  	base_ = L.base_;  	//);  	L.savedpc = InstructionPtr.Assign (pc);  	continue;  }  case OpCode.OP_SETGLOBAL: {  	TValue g = new TValue ();  	sethvalue (L' g' cl.env);  	lua_assert (ttisstring (KBx (L' i' k)));  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaV_settable (L' g' KBx (L' i' k)' ra);  	base_ = L.base_;  	//);  	L.savedpc = InstructionPtr.Assign (pc);  	continue;  }  case OpCode.OP_SETUPVAL: {  	UpVal uv = cl.upvals [GETARG_B (i)];  	setobj (L' uv.v' ra);  	luaC_barrier (L' uv' ra);  	continue;  }  case OpCode.OP_SETTABLE: {  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaV_settable (L' ra' RKB (L' base_' i' k)' RKC (L' base_' i' k));  	base_ = L.base_;  	//);  	L.savedpc = InstructionPtr.Assign (pc);  	continue;  }  case OpCode.OP_NEWTABLE: {  	int b = GETARG_B (i);  	int c = GETARG_C (i);  	sethvalue (L' ra' luaH_new (L' luaO_fb2int (b)' luaO_fb2int (c)));  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaC_checkGC (L);  	base_ = L.base_;  	//);  	L.savedpc = InstructionPtr.Assign (pc);  	continue;  }  case OpCode.OP_SELF: {  	StkId rb = RB (L' base_' i);  	setobjs2s (L' ra + 1' rb);  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaV_gettable (L' rb' RKC (L' base_' i' k)' ra);  	base_ = L.base_;  	//);  	L.savedpc = InstructionPtr.Assign (pc);  	continue;  }  case OpCode.OP_ADD: {  	arith_op (L' luai_numadd' TMS.TM_ADD' base_' i' k' ra' pc);  	continue;  }  case OpCode.OP_SUB: {  	arith_op (L' luai_numsub' TMS.TM_SUB' base_' i' k' ra' pc);  	continue;  }  case OpCode.OP_MUL: {  	arith_op (L' luai_nummul' TMS.TM_MUL' base_' i' k' ra' pc);  	continue;  }  case OpCode.OP_DIV: {  	arith_op (L' luai_numdiv' TMS.TM_DIV' base_' i' k' ra' pc);  	continue;  }  case OpCode.OP_MOD: {  	arith_op (L' luai_nummod' TMS.TM_MOD' base_' i' k' ra' pc);  	continue;  }  case OpCode.OP_POW: {  	arith_op (L' luai_numpow' TMS.TM_POW' base_' i' k' ra' pc);  	continue;  }  case OpCode.OP_UNM: {  	TValue rb = RB (L' base_' i);  	if (ttisnumber (rb)) {  		lua_Number nb = nvalue (rb);  		setnvalue (ra' luai_numunm (nb));  	} else {  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		Arith (L' ra' rb' rb' TMS.TM_UNM);  		base_ = L.base_;  		//);  		L.savedpc = InstructionPtr.Assign (pc);  	}  	continue;  }  case OpCode.OP_NOT: {  	int res = l_isfalse (RB (L' base_' i)) == 0 ? 0 : 1;  	/* next assignment may change this value */setbvalue (ra' res);  	continue;  }  case OpCode.OP_LEN: {  	TValue rb = RB (L' base_' i);  	switch (ttype (rb)) {  	case LUA_TTABLE: {  		setnvalue (ra' (lua_Number)luaH_getn (hvalue (rb)));  		break;  	}  	case LUA_TSTRING: {  		setnvalue (ra' (lua_Number)tsvalue (rb).len);  		break;  	}  	default: {  		/* try metamethod *///Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		if (call_binTM (L' rb' luaO_nilobject' ra' TMS.TM_LEN) == 0)  			luaG_typeerror (L' rb' "get length of");  		base_ = L.base_;  		//)  		break;  	}  	}  	continue;  }  case OpCode.OP_CONCAT: {  	int b = GETARG_B (i);  	int c = GETARG_C (i);  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaV_concat (L' c - b + 1' c);  	luaC_checkGC (L);  	base_ = L.base_;  	//);  	setobjs2s (L' RA (L' base_' i)' base_ + b);  	continue;  }  case OpCode.OP_JMP: {  	dojump (L' pc' GETARG_sBx (i));  	continue;  }  case OpCode.OP_EQ: {  	TValue rb = RKB (L' base_' i' k);  	TValue rc = RKC (L' base_' i' k);  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	if (equalobj (L' rb' rc) == GETARG_A (i))  		dojump (L' pc' GETARG_sBx (pc [0]));  	base_ = L.base_;  	//);  	InstructionPtr.inc (ref pc);  	continue;  }  case OpCode.OP_LT: {  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	if (luaV_lessthan (L' RKB (L' base_' i' k)' RKC (L' base_' i' k)) == GETARG_A (i))  		dojump (L' pc' GETARG_sBx (pc [0]));  	base_ = L.base_;  	//);  	InstructionPtr.inc (ref pc);  	continue;  }  case OpCode.OP_LE: {  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	if (lessequal (L' RKB (L' base_' i' k)' RKC (L' base_' i' k)) == GETARG_A (i))  		dojump (L' pc' GETARG_sBx (pc [0]));  	base_ = L.base_;  	//);  	InstructionPtr.inc (ref pc);  	continue;  }  case OpCode.OP_TEST: {  	if (l_isfalse (ra) != GETARG_C (i))  		dojump (L' pc' GETARG_sBx (pc [0]));  	InstructionPtr.inc (ref pc);  	continue;  }  case OpCode.OP_TESTSET: {  	TValue rb = RB (L' base_' i);  	if (l_isfalse (rb) != GETARG_C (i)) {  		setobjs2s (L' ra' rb);  		dojump (L' pc' GETARG_sBx (pc [0]));  	}  	InstructionPtr.inc (ref pc);  	continue;  }  case OpCode.OP_CALL: {  	int b = GETARG_B (i);  	int nresults = GETARG_C (i) - 1;  	if (b != 0)  		L.top = ra + b;  	/* else previous instruction set top */L.savedpc = InstructionPtr.Assign (pc);  	switch (luaD_precall (L' ra' nresults)) {  	case PCRLUA: {  		nexeccalls++;  		goto reentry;  		/* restart luaV_execute over new Lua function */}  	case PCRC: {  		/* it was a C function (`precall' called it); adjust results */if (nresults >= 0)  			L.top = L.ci.top;  		base_ = L.base_;  		continue;  	}  	default: {  		return;  		/* yield */}  	}  }  case OpCode.OP_TAILCALL: {  	int b = GETARG_B (i);  	if (b != 0)  		L.top = ra + b;  	/* else previous instruction set top */L.savedpc = InstructionPtr.Assign (pc);  	lua_assert (GETARG_C (i) - 1 == LUA_MULTRET);  	switch (luaD_precall (L' ra' LUA_MULTRET)) {  	case PCRLUA: {  		/* tail call: put new frame in place of previous one */CallInfo ci = L.ci - 1;  		/* previous frame */int aux;  		StkId func = ci.func;  		StkId pfunc = (ci + 1).func;  		/* previous function index */if (L.openupval != null)  			luaF_close (L' ci.base_);  		L.base_ = ci.base_ = ci.func + (ci [1].base_ - pfunc);  		for (aux = 0; pfunc + aux < L.top; aux++)  			/* move frame down */setobjs2s (L' func + aux' pfunc + aux);  		ci.top = L.top = func + aux;  		/* correct top */lua_assert (L.top == L.base_ + clvalue (func).l.p.maxstacksize);  		ci.savedpc = InstructionPtr.Assign (L.savedpc);  		ci.tailcalls++;  		/* one more call lost */CallInfo.dec (ref L.ci);  		/* remove new frame */goto reentry;  	}  	case PCRC: {  		/* it was a C function (`precall' called it) */base_ = L.base_;  		continue;  	}  	default: {  		return;  		/* yield */}  	}  }  case OpCode.OP_RETURN: {  	int b = GETARG_B (i);  	if (b != 0)  		L.top = ra + b - 1;  	if (L.openupval != null)  		luaF_close (L' base_);  	L.savedpc = InstructionPtr.Assign (pc);  	b = luaD_poscall (L' ra);  	if (--nexeccalls == 0)  		/* was previous function running `here'? */return;  	/* no: return */else {  		/* yes: continue its execution */if (b != 0)  			L.top = L.ci.top;  		lua_assert (isLua (L.ci));  		lua_assert (GET_OPCODE (L.ci.savedpc [-1]) == OpCode.OP_CALL);  		goto reentry;  	}  }  case OpCode.OP_FORLOOP: {  	lua_Number step = nvalue (ra + 2);  	lua_Number idx = luai_numadd (nvalue (ra)' step);  	/* increment index */lua_Number limit = nvalue (ra + 1);  	if (luai_numlt (0' step) ? luai_numle (idx' limit) : luai_numle (limit' idx)) {  		dojump (L' pc' GETARG_sBx (i));  		/* jump back */setnvalue (ra' idx);  		/* update internal index... */setnvalue (ra + 3' idx);  		/* ...and external index */}  	continue;  }  case OpCode.OP_FORPREP: {  	TValue init = ra;  	TValue plimit = ra + 1;  	TValue pstep = ra + 2;  	L.savedpc = InstructionPtr.Assign (pc);  	/* next steps may throw errors */if (tonumber (ref init' ra) == 0)  		luaG_runerror (L' LUA_QL ("for") + " initial value must be a number");  	else if (tonumber (ref plimit' ra + 1) == 0)  		luaG_runerror (L' LUA_QL ("for") + " limit must be a number");  	else if (tonumber (ref pstep' ra + 2) == 0)  		luaG_runerror (L' LUA_QL ("for") + " step must be a number");  	setnvalue (ra' luai_numsub (nvalue (ra)' nvalue (pstep)));  	dojump (L' pc' GETARG_sBx (i));  	continue;  }  case OpCode.OP_TFORLOOP: {  	StkId cb = ra + 3;  	/* call base */setobjs2s (L' cb + 2' ra + 2);  	setobjs2s (L' cb + 1' ra + 1);  	setobjs2s (L' cb' ra);  	L.top = cb + 3;  	/* func. + 2 args (state and index) *///Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaD_call (L' cb' GETARG_C (i));  	base_ = L.base_;  	//);  	L.top = L.ci.top;  	cb = RA (L' base_' i) + 3;  	/* previous call may change the stack */if (!ttisnil (cb)) {  		/* continue loop? */setobjs2s (L' cb - 1' cb);  		/* save control variable */dojump (L' pc' GETARG_sBx (pc [0]));  		/* jump back */}  	InstructionPtr.inc (ref pc);  	continue;  }  case OpCode.OP_SETLIST: {  	int n = GETARG_B (i);  	int c = GETARG_C (i);  	int last;  	Table h;  	if (n == 0) {  		n = cast_int (L.top - ra) - 1;  		L.top = L.ci.top;  	}  	if (c == 0) {  		c = cast_int (pc [0]);  		InstructionPtr.inc (ref pc);  	}  	runtime_check (L' ttistable (ra));  	h = hvalue (ra);  	last = ((c - 1) * LFIELDS_PER_FLUSH) + n;  	if (last > h.sizearray)  		/* needs more space? */luaH_resizearray (L' h' last);  	/* pre-alloc it at once */for (; n > 0; n--) {  		TValue val = ra + n;  		setobj2t (L' luaH_setnum (L' h' last--)' val);  		luaC_barriert (L' h' val);  	}  	continue;  }  case OpCode.OP_CLOSE: {  	luaF_close (L' ra);  	continue;  }  case OpCode.OP_CLOSURE: {  	Proto p;  	Closure ncl;  	int nup' j;  	p = cl.p.p [GETARG_Bx (i)];  	nup = p.nups;  	ncl = luaF_newLclosure (L' nup' cl.env);  	ncl.l.p = p;  	for (j = 0; j < nup; j++' InstructionPtr.inc (ref pc)) {  		if (GET_OPCODE (pc [0]) == OpCode.OP_GETUPVAL)  			ncl.l.upvals [j] = cl.upvals [GETARG_B (pc [0])];  		else {  			lua_assert (GET_OPCODE (pc [0]) == OpCode.OP_MOVE);  			ncl.l.upvals [j] = luaF_findupval (L' base_ + GETARG_B (pc [0]));  		}  	}  	setclvalue (L' ra' ncl);  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaC_checkGC (L);  	base_ = L.base_;  	//);  	continue;  }  case OpCode.OP_VARARG: {  	int b = GETARG_B (i) - 1;  	int j;  	CallInfo ci = L.ci;  	int n = cast_int (ci.base_ - ci.func) - cl.p.numparams - 1;  	if (b == LUA_MULTRET) {  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaD_checkstack (L' n);  		base_ = L.base_;  		//);  		ra = RA (L' base_' i);  		/* previous call may change the stack */b = n;  		L.top = ra + n;  	}  	for (j = 0; j < b; j++) {  		if (j < n) {  			setobjs2s (L' ra + j' ci.base_ - n + j);  		} else {  			setnilvalue (ra + j);  		}  	}  	continue;  }  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaV_execute,The following statement contains a magic number: switch (GET_OPCODE (i)) {  case OpCode.OP_MOVE: {  	setobjs2s (L' ra' RB (L' base_' i));  	continue;  }  case OpCode.OP_LOADK: {  	setobj2s (L' ra' KBx (L' i' k));  	continue;  }  case OpCode.OP_LOADBOOL: {  	setbvalue (ra' GETARG_B (i));  	if (GETARG_C (i) != 0)  		InstructionPtr.inc (ref pc);  	/* skip next instruction (if C) */continue;  }  case OpCode.OP_LOADNIL: {  	TValue rb = RB (L' base_' i);  	do {  		setnilvalue (StkId.dec (ref rb));  	} while (rb >= ra);  	continue;  }  case OpCode.OP_GETUPVAL: {  	int b = GETARG_B (i);  	setobj2s (L' ra' cl.upvals [b].v);  	continue;  }  case OpCode.OP_GETGLOBAL: {  	TValue g = new TValue ();  	TValue rb = KBx (L' i' k);  	sethvalue (L' g' cl.env);  	lua_assert (ttisstring (rb));  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaV_gettable (L' g' rb' ra);  	base_ = L.base_;  	//);  	L.savedpc = InstructionPtr.Assign (pc);  	continue;  }  case OpCode.OP_GETTABLE: {  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaV_gettable (L' RB (L' base_' i)' RKC (L' base_' i' k)' ra);  	base_ = L.base_;  	//);  	L.savedpc = InstructionPtr.Assign (pc);  	continue;  }  case OpCode.OP_SETGLOBAL: {  	TValue g = new TValue ();  	sethvalue (L' g' cl.env);  	lua_assert (ttisstring (KBx (L' i' k)));  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaV_settable (L' g' KBx (L' i' k)' ra);  	base_ = L.base_;  	//);  	L.savedpc = InstructionPtr.Assign (pc);  	continue;  }  case OpCode.OP_SETUPVAL: {  	UpVal uv = cl.upvals [GETARG_B (i)];  	setobj (L' uv.v' ra);  	luaC_barrier (L' uv' ra);  	continue;  }  case OpCode.OP_SETTABLE: {  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaV_settable (L' ra' RKB (L' base_' i' k)' RKC (L' base_' i' k));  	base_ = L.base_;  	//);  	L.savedpc = InstructionPtr.Assign (pc);  	continue;  }  case OpCode.OP_NEWTABLE: {  	int b = GETARG_B (i);  	int c = GETARG_C (i);  	sethvalue (L' ra' luaH_new (L' luaO_fb2int (b)' luaO_fb2int (c)));  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaC_checkGC (L);  	base_ = L.base_;  	//);  	L.savedpc = InstructionPtr.Assign (pc);  	continue;  }  case OpCode.OP_SELF: {  	StkId rb = RB (L' base_' i);  	setobjs2s (L' ra + 1' rb);  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaV_gettable (L' rb' RKC (L' base_' i' k)' ra);  	base_ = L.base_;  	//);  	L.savedpc = InstructionPtr.Assign (pc);  	continue;  }  case OpCode.OP_ADD: {  	arith_op (L' luai_numadd' TMS.TM_ADD' base_' i' k' ra' pc);  	continue;  }  case OpCode.OP_SUB: {  	arith_op (L' luai_numsub' TMS.TM_SUB' base_' i' k' ra' pc);  	continue;  }  case OpCode.OP_MUL: {  	arith_op (L' luai_nummul' TMS.TM_MUL' base_' i' k' ra' pc);  	continue;  }  case OpCode.OP_DIV: {  	arith_op (L' luai_numdiv' TMS.TM_DIV' base_' i' k' ra' pc);  	continue;  }  case OpCode.OP_MOD: {  	arith_op (L' luai_nummod' TMS.TM_MOD' base_' i' k' ra' pc);  	continue;  }  case OpCode.OP_POW: {  	arith_op (L' luai_numpow' TMS.TM_POW' base_' i' k' ra' pc);  	continue;  }  case OpCode.OP_UNM: {  	TValue rb = RB (L' base_' i);  	if (ttisnumber (rb)) {  		lua_Number nb = nvalue (rb);  		setnvalue (ra' luai_numunm (nb));  	} else {  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		Arith (L' ra' rb' rb' TMS.TM_UNM);  		base_ = L.base_;  		//);  		L.savedpc = InstructionPtr.Assign (pc);  	}  	continue;  }  case OpCode.OP_NOT: {  	int res = l_isfalse (RB (L' base_' i)) == 0 ? 0 : 1;  	/* next assignment may change this value */setbvalue (ra' res);  	continue;  }  case OpCode.OP_LEN: {  	TValue rb = RB (L' base_' i);  	switch (ttype (rb)) {  	case LUA_TTABLE: {  		setnvalue (ra' (lua_Number)luaH_getn (hvalue (rb)));  		break;  	}  	case LUA_TSTRING: {  		setnvalue (ra' (lua_Number)tsvalue (rb).len);  		break;  	}  	default: {  		/* try metamethod *///Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		if (call_binTM (L' rb' luaO_nilobject' ra' TMS.TM_LEN) == 0)  			luaG_typeerror (L' rb' "get length of");  		base_ = L.base_;  		//)  		break;  	}  	}  	continue;  }  case OpCode.OP_CONCAT: {  	int b = GETARG_B (i);  	int c = GETARG_C (i);  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaV_concat (L' c - b + 1' c);  	luaC_checkGC (L);  	base_ = L.base_;  	//);  	setobjs2s (L' RA (L' base_' i)' base_ + b);  	continue;  }  case OpCode.OP_JMP: {  	dojump (L' pc' GETARG_sBx (i));  	continue;  }  case OpCode.OP_EQ: {  	TValue rb = RKB (L' base_' i' k);  	TValue rc = RKC (L' base_' i' k);  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	if (equalobj (L' rb' rc) == GETARG_A (i))  		dojump (L' pc' GETARG_sBx (pc [0]));  	base_ = L.base_;  	//);  	InstructionPtr.inc (ref pc);  	continue;  }  case OpCode.OP_LT: {  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	if (luaV_lessthan (L' RKB (L' base_' i' k)' RKC (L' base_' i' k)) == GETARG_A (i))  		dojump (L' pc' GETARG_sBx (pc [0]));  	base_ = L.base_;  	//);  	InstructionPtr.inc (ref pc);  	continue;  }  case OpCode.OP_LE: {  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	if (lessequal (L' RKB (L' base_' i' k)' RKC (L' base_' i' k)) == GETARG_A (i))  		dojump (L' pc' GETARG_sBx (pc [0]));  	base_ = L.base_;  	//);  	InstructionPtr.inc (ref pc);  	continue;  }  case OpCode.OP_TEST: {  	if (l_isfalse (ra) != GETARG_C (i))  		dojump (L' pc' GETARG_sBx (pc [0]));  	InstructionPtr.inc (ref pc);  	continue;  }  case OpCode.OP_TESTSET: {  	TValue rb = RB (L' base_' i);  	if (l_isfalse (rb) != GETARG_C (i)) {  		setobjs2s (L' ra' rb);  		dojump (L' pc' GETARG_sBx (pc [0]));  	}  	InstructionPtr.inc (ref pc);  	continue;  }  case OpCode.OP_CALL: {  	int b = GETARG_B (i);  	int nresults = GETARG_C (i) - 1;  	if (b != 0)  		L.top = ra + b;  	/* else previous instruction set top */L.savedpc = InstructionPtr.Assign (pc);  	switch (luaD_precall (L' ra' nresults)) {  	case PCRLUA: {  		nexeccalls++;  		goto reentry;  		/* restart luaV_execute over new Lua function */}  	case PCRC: {  		/* it was a C function (`precall' called it); adjust results */if (nresults >= 0)  			L.top = L.ci.top;  		base_ = L.base_;  		continue;  	}  	default: {  		return;  		/* yield */}  	}  }  case OpCode.OP_TAILCALL: {  	int b = GETARG_B (i);  	if (b != 0)  		L.top = ra + b;  	/* else previous instruction set top */L.savedpc = InstructionPtr.Assign (pc);  	lua_assert (GETARG_C (i) - 1 == LUA_MULTRET);  	switch (luaD_precall (L' ra' LUA_MULTRET)) {  	case PCRLUA: {  		/* tail call: put new frame in place of previous one */CallInfo ci = L.ci - 1;  		/* previous frame */int aux;  		StkId func = ci.func;  		StkId pfunc = (ci + 1).func;  		/* previous function index */if (L.openupval != null)  			luaF_close (L' ci.base_);  		L.base_ = ci.base_ = ci.func + (ci [1].base_ - pfunc);  		for (aux = 0; pfunc + aux < L.top; aux++)  			/* move frame down */setobjs2s (L' func + aux' pfunc + aux);  		ci.top = L.top = func + aux;  		/* correct top */lua_assert (L.top == L.base_ + clvalue (func).l.p.maxstacksize);  		ci.savedpc = InstructionPtr.Assign (L.savedpc);  		ci.tailcalls++;  		/* one more call lost */CallInfo.dec (ref L.ci);  		/* remove new frame */goto reentry;  	}  	case PCRC: {  		/* it was a C function (`precall' called it) */base_ = L.base_;  		continue;  	}  	default: {  		return;  		/* yield */}  	}  }  case OpCode.OP_RETURN: {  	int b = GETARG_B (i);  	if (b != 0)  		L.top = ra + b - 1;  	if (L.openupval != null)  		luaF_close (L' base_);  	L.savedpc = InstructionPtr.Assign (pc);  	b = luaD_poscall (L' ra);  	if (--nexeccalls == 0)  		/* was previous function running `here'? */return;  	/* no: return */else {  		/* yes: continue its execution */if (b != 0)  			L.top = L.ci.top;  		lua_assert (isLua (L.ci));  		lua_assert (GET_OPCODE (L.ci.savedpc [-1]) == OpCode.OP_CALL);  		goto reentry;  	}  }  case OpCode.OP_FORLOOP: {  	lua_Number step = nvalue (ra + 2);  	lua_Number idx = luai_numadd (nvalue (ra)' step);  	/* increment index */lua_Number limit = nvalue (ra + 1);  	if (luai_numlt (0' step) ? luai_numle (idx' limit) : luai_numle (limit' idx)) {  		dojump (L' pc' GETARG_sBx (i));  		/* jump back */setnvalue (ra' idx);  		/* update internal index... */setnvalue (ra + 3' idx);  		/* ...and external index */}  	continue;  }  case OpCode.OP_FORPREP: {  	TValue init = ra;  	TValue plimit = ra + 1;  	TValue pstep = ra + 2;  	L.savedpc = InstructionPtr.Assign (pc);  	/* next steps may throw errors */if (tonumber (ref init' ra) == 0)  		luaG_runerror (L' LUA_QL ("for") + " initial value must be a number");  	else if (tonumber (ref plimit' ra + 1) == 0)  		luaG_runerror (L' LUA_QL ("for") + " limit must be a number");  	else if (tonumber (ref pstep' ra + 2) == 0)  		luaG_runerror (L' LUA_QL ("for") + " step must be a number");  	setnvalue (ra' luai_numsub (nvalue (ra)' nvalue (pstep)));  	dojump (L' pc' GETARG_sBx (i));  	continue;  }  case OpCode.OP_TFORLOOP: {  	StkId cb = ra + 3;  	/* call base */setobjs2s (L' cb + 2' ra + 2);  	setobjs2s (L' cb + 1' ra + 1);  	setobjs2s (L' cb' ra);  	L.top = cb + 3;  	/* func. + 2 args (state and index) *///Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaD_call (L' cb' GETARG_C (i));  	base_ = L.base_;  	//);  	L.top = L.ci.top;  	cb = RA (L' base_' i) + 3;  	/* previous call may change the stack */if (!ttisnil (cb)) {  		/* continue loop? */setobjs2s (L' cb - 1' cb);  		/* save control variable */dojump (L' pc' GETARG_sBx (pc [0]));  		/* jump back */}  	InstructionPtr.inc (ref pc);  	continue;  }  case OpCode.OP_SETLIST: {  	int n = GETARG_B (i);  	int c = GETARG_C (i);  	int last;  	Table h;  	if (n == 0) {  		n = cast_int (L.top - ra) - 1;  		L.top = L.ci.top;  	}  	if (c == 0) {  		c = cast_int (pc [0]);  		InstructionPtr.inc (ref pc);  	}  	runtime_check (L' ttistable (ra));  	h = hvalue (ra);  	last = ((c - 1) * LFIELDS_PER_FLUSH) + n;  	if (last > h.sizearray)  		/* needs more space? */luaH_resizearray (L' h' last);  	/* pre-alloc it at once */for (; n > 0; n--) {  		TValue val = ra + n;  		setobj2t (L' luaH_setnum (L' h' last--)' val);  		luaC_barriert (L' h' val);  	}  	continue;  }  case OpCode.OP_CLOSE: {  	luaF_close (L' ra);  	continue;  }  case OpCode.OP_CLOSURE: {  	Proto p;  	Closure ncl;  	int nup' j;  	p = cl.p.p [GETARG_Bx (i)];  	nup = p.nups;  	ncl = luaF_newLclosure (L' nup' cl.env);  	ncl.l.p = p;  	for (j = 0; j < nup; j++' InstructionPtr.inc (ref pc)) {  		if (GET_OPCODE (pc [0]) == OpCode.OP_GETUPVAL)  			ncl.l.upvals [j] = cl.upvals [GETARG_B (pc [0])];  		else {  			lua_assert (GET_OPCODE (pc [0]) == OpCode.OP_MOVE);  			ncl.l.upvals [j] = luaF_findupval (L' base_ + GETARG_B (pc [0]));  		}  	}  	setclvalue (L' ra' ncl);  	//Protect(  	L.savedpc = InstructionPtr.Assign (pc);  	luaC_checkGC (L);  	base_ = L.base_;  	//);  	continue;  }  case OpCode.OP_VARARG: {  	int b = GETARG_B (i) - 1;  	int j;  	CallInfo ci = L.ci;  	int n = cast_int (ci.base_ - ci.func) - cl.p.numparams - 1;  	if (b == LUA_MULTRET) {  		//Protect(  		L.savedpc = InstructionPtr.Assign (pc);  		luaD_checkstack (L' n);  		base_ = L.base_;  		//);  		ra = RA (L' base_' i);  		/* previous call may change the stack */b = n;  		L.top = ra + n;  	}  	for (j = 0; j < b; j++) {  		if (j < n) {  			setobjs2s (L' ra + j' ci.base_ - n + j);  		} else {  			setnilvalue (ra + j);  		}  	}  	continue;  }  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaV_execute,The following statement contains a magic number: if (luai_numlt (0' step) ? luai_numle (idx' limit) : luai_numle (limit' idx)) {  	dojump (L' pc' GETARG_sBx (i));  	/* jump back */setnvalue (ra' idx);  	/* update internal index... */setnvalue (ra + 3' idx);  	/* ...and external index */}  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaV_execute,The following statement contains a magic number: setnvalue (ra + 3' idx);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaV_execute,The following statement contains a magic number: if (tonumber (ref init' ra) == 0)  	luaG_runerror (L' LUA_QL ("for") + " initial value must be a number");  else if (tonumber (ref plimit' ra + 1) == 0)  	luaG_runerror (L' LUA_QL ("for") + " limit must be a number");  else if (tonumber (ref pstep' ra + 2) == 0)  	luaG_runerror (L' LUA_QL ("for") + " step must be a number");  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaV_execute,The following statement contains a magic number: if (tonumber (ref plimit' ra + 1) == 0)  	luaG_runerror (L' LUA_QL ("for") + " limit must be a number");  else if (tonumber (ref pstep' ra + 2) == 0)  	luaG_runerror (L' LUA_QL ("for") + " step must be a number");  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaV_execute,The following statement contains a magic number: if (tonumber (ref pstep' ra + 2) == 0)  	luaG_runerror (L' LUA_QL ("for") + " step must be a number");  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaV_execute,The following statement contains a magic number: setobjs2s (L' cb + 2' ra + 2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaV_execute,The following statement contains a magic number: setobjs2s (L' cb + 2' ra + 2);  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaV_execute,The following statement contains a magic number: L.top = cb + 3;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaV_execute,The following statement contains a magic number: cb = RA (L' base_' i) + 3;  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,PrintCode,The following statement contains a magic number: for (pc = 0; pc < n; pc++) {  	Instruction i = f.code [pc];  	OpCode o = GET_OPCODE (i);  	int a = GETARG_A (i);  	int b = GETARG_B (i);  	int c = GETARG_C (i);  	int bx = GETARG_Bx (i);  	int sbx = GETARG_sBx (i);  	int line = getline (f' pc);  	printf ("\t%d\t"' pc + 1);  	if (line > 0)  		printf ("[%d]\t"' line);  	else  		printf ("[-]\t");  	printf ("%-9s\t"' luaP_opnames [(int)o]);  	switch (getOpMode (o)) {  	case OpMode.iABC:  		printf ("%d"' a);  		if (getBMode (o) != OpArgMask.OpArgN)  			printf (" %d"' (ISK (b) != 0) ? (-1 - INDEXK (b)) : b);  		if (getCMode (o) != OpArgMask.OpArgN)  			printf (" %d"' (ISK (c) != 0) ? (-1 - INDEXK (c)) : c);  		break;  	case OpMode.iABx:  		if (getBMode (o) == OpArgMask.OpArgK)  			printf ("%d %d"' a' -1 - bx);  		else  			printf ("%d %d"' a' bx);  		break;  	case OpMode.iAsBx:  		if (o == OpCode.OP_JMP)  			printf ("%d"' sbx);  		else  			printf ("%d %d"' a' sbx);  		break;  	}  	switch (o) {  	case OpCode.OP_LOADK:  		printf ("\t; ");  		PrintConstant (f' bx);  		break;  	case OpCode.OP_GETUPVAL:  	case OpCode.OP_SETUPVAL:  		printf ("\t; %s"' (f.sizeupvalues > 0) ? getstr (f.upvalues [b]) : "-");  		break;  	case OpCode.OP_GETGLOBAL:  	case OpCode.OP_SETGLOBAL:  		printf ("\t; %s"' svalue (f.k [bx]));  		break;  	case OpCode.OP_GETTABLE:  	case OpCode.OP_SELF:  		if (ISK (c) != 0) {  			printf ("\t; ");  			PrintConstant (f' INDEXK (c));  		}  		break;  	case OpCode.OP_SETTABLE:  	case OpCode.OP_ADD:  	case OpCode.OP_SUB:  	case OpCode.OP_MUL:  	case OpCode.OP_DIV:  	case OpCode.OP_POW:  	case OpCode.OP_EQ:  	case OpCode.OP_LT:  	case OpCode.OP_LE:  		if (ISK (b) != 0 || ISK (c) != 0) {  			printf ("\t; ");  			if (ISK (b) != 0)  				PrintConstant (f' INDEXK (b));  			else  				printf ("-");  			printf (" ");  			if (ISK (c) != 0)  				PrintConstant (f' INDEXK (c));  			else  				printf ("-");  		}  		break;  	case OpCode.OP_JMP:  	case OpCode.OP_FORLOOP:  	case OpCode.OP_FORPREP:  		printf ("\t; to %d"' sbx + pc + 2);  		break;  	case OpCode.OP_CLOSURE:  		printf ("\t; %p"' VOID (f.p [bx]));  		break;  	case OpCode.OP_SETLIST:  		if (c == 0)  			printf ("\t; %d"' (int)code [++pc]);  		else  			printf ("\t; %d"' c);  		break;  	default:  		break;  	}  	printf ("\n");  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,PrintCode,The following statement contains a magic number: switch (o) {  case OpCode.OP_LOADK:  	printf ("\t; ");  	PrintConstant (f' bx);  	break;  case OpCode.OP_GETUPVAL:  case OpCode.OP_SETUPVAL:  	printf ("\t; %s"' (f.sizeupvalues > 0) ? getstr (f.upvalues [b]) : "-");  	break;  case OpCode.OP_GETGLOBAL:  case OpCode.OP_SETGLOBAL:  	printf ("\t; %s"' svalue (f.k [bx]));  	break;  case OpCode.OP_GETTABLE:  case OpCode.OP_SELF:  	if (ISK (c) != 0) {  		printf ("\t; ");  		PrintConstant (f' INDEXK (c));  	}  	break;  case OpCode.OP_SETTABLE:  case OpCode.OP_ADD:  case OpCode.OP_SUB:  case OpCode.OP_MUL:  case OpCode.OP_DIV:  case OpCode.OP_POW:  case OpCode.OP_EQ:  case OpCode.OP_LT:  case OpCode.OP_LE:  	if (ISK (b) != 0 || ISK (c) != 0) {  		printf ("\t; ");  		if (ISK (b) != 0)  			PrintConstant (f' INDEXK (b));  		else  			printf ("-");  		printf (" ");  		if (ISK (c) != 0)  			PrintConstant (f' INDEXK (c));  		else  			printf ("-");  	}  	break;  case OpCode.OP_JMP:  case OpCode.OP_FORLOOP:  case OpCode.OP_FORPREP:  	printf ("\t; to %d"' sbx + pc + 2);  	break;  case OpCode.OP_CLOSURE:  	printf ("\t; %p"' VOID (f.p [bx]));  	break;  case OpCode.OP_SETLIST:  	if (c == 0)  		printf ("\t; %d"' (int)code [++pc]);  	else  		printf ("\t; %d"' c);  	break;  default:  	break;  }  
Magic Number,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,PrintCode,The following statement contains a magic number: printf ("\t; to %d"' sbx + pc + 2);  
Magic Number,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,ReplaceMetaCharsMatch,The following statement contains a magic number: if (m.Groups [2].Length == 3)  	return Convert.ToChar (Convert.ToByte (m.Groups [2].Value' 8)).ToString ();  else {  	// convert all other special meta characters  	//TODO: \xhhh hex and possible dec !!  	switch (m.Groups [2].Value) {  	case "0":  		// null  		return "\0";  	case "a":  		// alert (beep)  		return "\a";  	case "b":  		// BS  		return "\b";  	case "f":  		// FF  		return "\f";  	case "v":  		// vertical tab  		return "\v";  	case "r":  		// CR  		return "\r";  	case "n":  		// LF  		return "\n";  	case "t":  		// Tab  		return "\t";  	default:  		// if neither an octal quote nor a special meta character  		// so just remove the backslash  		return m.Groups [2].Value;  	}  }  
Magic Number,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,ReplaceMetaCharsMatch,The following statement contains a magic number: if (m.Groups [2].Length == 3)  	return Convert.ToChar (Convert.ToByte (m.Groups [2].Value' 8)).ToString ();  else {  	// convert all other special meta characters  	//TODO: \xhhh hex and possible dec !!  	switch (m.Groups [2].Value) {  	case "0":  		// null  		return "\0";  	case "a":  		// alert (beep)  		return "\a";  	case "b":  		// BS  		return "\b";  	case "f":  		// FF  		return "\f";  	case "v":  		// vertical tab  		return "\v";  	case "r":  		// CR  		return "\r";  	case "n":  		// LF  		return "\n";  	case "t":  		// Tab  		return "\t";  	default:  		// if neither an octal quote nor a special meta character  		// so just remove the backslash  		return m.Groups [2].Value;  	}  }  
Magic Number,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,ReplaceMetaCharsMatch,The following statement contains a magic number: if (m.Groups [2].Length == 3)  	return Convert.ToChar (Convert.ToByte (m.Groups [2].Value' 8)).ToString ();  else {  	// convert all other special meta characters  	//TODO: \xhhh hex and possible dec !!  	switch (m.Groups [2].Value) {  	case "0":  		// null  		return "\0";  	case "a":  		// alert (beep)  		return "\a";  	case "b":  		// BS  		return "\b";  	case "f":  		// FF  		return "\f";  	case "v":  		// vertical tab  		return "\v";  	case "r":  		// CR  		return "\r";  	case "n":  		// LF  		return "\n";  	case "t":  		// Tab  		return "\t";  	default:  		// if neither an octal quote nor a special meta character  		// so just remove the backslash  		return m.Groups [2].Value;  	}  }  
Magic Number,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,ReplaceMetaCharsMatch,The following statement contains a magic number: if (m.Groups [2].Length == 3)  	return Convert.ToChar (Convert.ToByte (m.Groups [2].Value' 8)).ToString ();  else {  	// convert all other special meta characters  	//TODO: \xhhh hex and possible dec !!  	switch (m.Groups [2].Value) {  	case "0":  		// null  		return "\0";  	case "a":  		// alert (beep)  		return "\a";  	case "b":  		// BS  		return "\b";  	case "f":  		// FF  		return "\f";  	case "v":  		// vertical tab  		return "\v";  	case "r":  		// CR  		return "\r";  	case "n":  		// LF  		return "\n";  	case "t":  		// Tab  		return "\t";  	default:  		// if neither an octal quote nor a special meta character  		// so just remove the backslash  		return m.Groups [2].Value;  	}  }  
Magic Number,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,ReplaceMetaCharsMatch,The following statement contains a magic number: if (m.Groups [2].Length == 3)  	return Convert.ToChar (Convert.ToByte (m.Groups [2].Value' 8)).ToString ();  else {  	// convert all other special meta characters  	//TODO: \xhhh hex and possible dec !!  	switch (m.Groups [2].Value) {  	case "0":  		// null  		return "\0";  	case "a":  		// alert (beep)  		return "\a";  	case "b":  		// BS  		return "\b";  	case "f":  		// FF  		return "\f";  	case "v":  		// vertical tab  		return "\v";  	case "r":  		// CR  		return "\r";  	case "n":  		// LF  		return "\n";  	case "t":  		// Tab  		return "\t";  	default:  		// if neither an octal quote nor a special meta character  		// so just remove the backslash  		return m.Groups [2].Value;  	}  }  
Magic Number,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,ReplaceMetaCharsMatch,The following statement contains a magic number: if (m.Groups [2].Length == 3)  	return Convert.ToChar (Convert.ToByte (m.Groups [2].Value' 8)).ToString ();  else {  	// convert all other special meta characters  	//TODO: \xhhh hex and possible dec !!  	switch (m.Groups [2].Value) {  	case "0":  		// null  		return "\0";  	case "a":  		// alert (beep)  		return "\a";  	case "b":  		// BS  		return "\b";  	case "f":  		// FF  		return "\f";  	case "v":  		// vertical tab  		return "\v";  	case "r":  		// CR  		return "\r";  	case "n":  		// LF  		return "\n";  	case "t":  		// Tab  		return "\t";  	default:  		// if neither an octal quote nor a special meta character  		// so just remove the backslash  		return m.Groups [2].Value;  	}  }  
Magic Number,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,ReplaceMetaCharsMatch,The following statement contains a magic number: return Convert.ToChar (Convert.ToByte (m.Groups [2].Value' 8)).ToString ();  
Magic Number,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,ReplaceMetaCharsMatch,The following statement contains a magic number: return Convert.ToChar (Convert.ToByte (m.Groups [2].Value' 8)).ToString ();  
Magic Number,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,ReplaceMetaCharsMatch,The following statement contains a magic number: switch (m.Groups [2].Value) {  case "0":  	// null  	return "\0";  case "a":  	// alert (beep)  	return "\a";  case "b":  	// BS  	return "\b";  case "f":  	// FF  	return "\f";  case "v":  	// vertical tab  	return "\v";  case "r":  	// CR  	return "\r";  case "n":  	// LF  	return "\n";  case "t":  	// Tab  	return "\t";  default:  	// if neither an octal quote nor a special meta character  	// so just remove the backslash  	return m.Groups [2].Value;  }  
Magic Number,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,ReplaceMetaCharsMatch,The following statement contains a magic number: switch (m.Groups [2].Value) {  case "0":  	// null  	return "\0";  case "a":  	// alert (beep)  	return "\a";  case "b":  	// BS  	return "\b";  case "f":  	// FF  	return "\f";  case "v":  	// vertical tab  	return "\v";  case "r":  	// CR  	return "\r";  case "n":  	// LF  	return "\n";  case "t":  	// Tab  	return "\t";  default:  	// if neither an octal quote nor a special meta character  	// so just remove the backslash  	return m.Groups [2].Value;  }  
Magic Number,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,ReplaceMetaCharsMatch,The following statement contains a magic number: return m.Groups [2].Value;  
Magic Number,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,sprintf,The following statement contains a magic number: while (m.Success) {  	#region parameter index  	paramIx = defaultParamIx;  	if (m.Groups [1] != null && m.Groups [1].Value.Length > 0) {  		string val = m.Groups [1].Value.Substring (0' m.Groups [1].Value.Length - 1);  		paramIx = Convert.ToInt32 (val) - 1;  	}  	;  	#endregion  	#region format flags  	// extract format flags  	flagAlternate = false;  	flagLeft2Right = false;  	flagPositiveSign = false;  	flagPositiveSpace = false;  	flagZeroPadding = false;  	flagGroupThousands = false;  	if (m.Groups [2] != null && m.Groups [2].Value.Length > 0) {  		string flags = m.Groups [2].Value;  		flagAlternate = (flags.IndexOf ('#') >= 0);  		flagLeft2Right = (flags.IndexOf ('-') >= 0);  		flagPositiveSign = (flags.IndexOf ('+') >= 0);  		flagPositiveSpace = (flags.IndexOf (' ') >= 0);  		flagGroupThousands = (flags.IndexOf ('\'') >= 0);  		// positive + indicator overrides a  		// positive space character  		if (flagPositiveSign && flagPositiveSpace)  			flagPositiveSpace = false;  	}  	#endregion  	#region field length  	// extract field length and   	// pading character  	paddingCharacter = ' ';  	fieldLength = int.MinValue;  	if (m.Groups [3] != null && m.Groups [3].Value.Length > 0) {  		fieldLength = Convert.ToInt32 (m.Groups [3].Value);  		flagZeroPadding = (m.Groups [3].Value [0] == '0');  	}  	#endregion  	if (flagZeroPadding)  		paddingCharacter = '0';  	// left2right allignment overrides zero padding  	if (flagLeft2Right && flagZeroPadding) {  		flagZeroPadding = false;  		paddingCharacter = ' ';  	}  	#region field precision  	// extract field precision  	fieldPrecision = int.MinValue;  	if (m.Groups [4] != null && m.Groups [4].Value.Length > 0)  		fieldPrecision = Convert.ToInt32 (m.Groups [4].Value);  	#endregion  	#region short / long indicator  	// extract short / long indicator  	shortLongIndicator = Char.MinValue;  	if (m.Groups [5] != null && m.Groups [5].Value.Length > 0)  		shortLongIndicator = m.Groups [5].Value [0];  	#endregion  	#region format specifier  	// extract format  	formatSpecifier = Char.MinValue;  	if (m.Groups [6] != null && m.Groups [6].Value.Length > 0)  		formatSpecifier = m.Groups [6].Value [0];  	#endregion  	// default precision is 6 digits if none is specified except  	if (fieldPrecision == int.MinValue && formatSpecifier != 's' && formatSpecifier != 'c' && Char.ToUpper (formatSpecifier) != 'X' && formatSpecifier != 'o')  		fieldPrecision = 6;  	#region get next value parameter  	// get next value parameter and convert value parameter depending on short / long indicator  	if (Parameters == null || paramIx >= Parameters.Length)  		o = null;  	else {  		o = Parameters [paramIx];  		if (shortLongIndicator == 'h') {  			if (o is int)  				o = (short)((int)o);  			else if (o is long)  				o = (short)((long)o);  			else if (o is uint)  				o = (ushort)((uint)o);  			else if (o is ulong)  				o = (ushort)((ulong)o);  		} else if (shortLongIndicator == 'l') {  			if (o is short)  				o = (long)((short)o);  			else if (o is int)  				o = (long)((int)o);  			else if (o is ushort)  				o = (ulong)((ushort)o);  			else if (o is uint)  				o = (ulong)((uint)o);  		}  	}  	#endregion  	// convert value parameters to a string depending on the formatSpecifier  	w = String.Empty;  	switch (formatSpecifier) {  	#region % - character  	case '%':  		// % character  		w = "%";  		break;  	#endregion  	#region d - integer  	case 'd':  		// integer  		w = FormatNumber ((flagGroupThousands ? "n" : "d")' flagAlternate' fieldLength' int.MinValue' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region i - integer  	case 'i':  		// integer  		goto case 'd';  	#endregion  	#region o - octal integer  	case 'o':  		// octal integer - no leading zero  		w = FormatOct ("o"' flagAlternate' fieldLength' int.MinValue' flagLeft2Right' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region x - hex integer  	case 'x':  		// hex integer - no leading zero  		w = FormatHex ("x"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region X - hex integer  	case 'X':  		// same as x but with capital hex characters  		w = FormatHex ("X"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region u - unsigned integer  	case 'u':  		// unsigned integer  		w = FormatNumber ((flagGroupThousands ? "n" : "d")' flagAlternate' fieldLength' int.MinValue' flagLeft2Right' false' false' paddingCharacter' ToUnsigned (o));  		defaultParamIx++;  		break;  	#endregion  	#region c - character  	case 'c':  		// character  		if (IsNumericType (o))  			w = Convert.ToChar (o).ToString ();  		else if (o is char)  			w = ((char)o).ToString ();  		else if (o is string && ((string)o).Length > 0)  			w = ((string)o) [0].ToString ();  		defaultParamIx++;  		break;  	#endregion  	#region s - string  	case 's':  		// string  		string t = "{0" + (fieldLength != int.MinValue ? "'" + (flagLeft2Right ? "-" : String.Empty) + fieldLength.ToString () : String.Empty) + ":s}";  		w = o.ToString ();  		if (fieldPrecision >= 0)  			w = w.Substring (0' fieldPrecision);  		if (fieldLength != int.MinValue)  			if (flagLeft2Right)  				w = w.PadRight (fieldLength' paddingCharacter);  			else  				w = w.PadLeft (fieldLength' paddingCharacter);  		defaultParamIx++;  		break;  	#endregion  	#region f - double number  	case 'f':  		// double  		w = FormatNumber ((flagGroupThousands ? "n" : "f")' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region e - exponent number  	case 'e':  		// double / exponent  		w = FormatNumber ("e"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region E - exponent number  	case 'E':  		// double / exponent  		w = FormatNumber ("E"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region g - general number  	case 'g':  		// double / exponent  		w = FormatNumber ("g"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region G - general number  	case 'G':  		// double / exponent  		w = FormatNumber ("G"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region p - pointer  	case 'p':  		// pointer  		if (o is IntPtr)  			#if XBOX || SILVERLIGHT  										w = ( (IntPtr)o ).ToString(); #else  			w = "0x" + ((IntPtr)o).ToString ("x");  		#endif  		defaultParamIx++;  		break;  	#endregion  	#region n - number of processed chars so far  	case 'n':  		// number of characters so far  		w = FormatNumber ("d"' flagAlternate' fieldLength' int.MinValue' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' m.Index);  		break;  	#endregion  	default:  		w = String.Empty;  		defaultParamIx++;  		break;  	}  	// replace format parameter with parameter value  	// and start searching for the next format parameter  	// AFTER the position of the current inserted value  	// to prohibit recursive matches if the value also  	// includes a format specifier  	f.Remove (m.Index' m.Length);  	f.Insert (m.Index' w);  	m = r.Match (f.ToString ()' m.Index + w.Length);  }  
Magic Number,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,sprintf,The following statement contains a magic number: while (m.Success) {  	#region parameter index  	paramIx = defaultParamIx;  	if (m.Groups [1] != null && m.Groups [1].Value.Length > 0) {  		string val = m.Groups [1].Value.Substring (0' m.Groups [1].Value.Length - 1);  		paramIx = Convert.ToInt32 (val) - 1;  	}  	;  	#endregion  	#region format flags  	// extract format flags  	flagAlternate = false;  	flagLeft2Right = false;  	flagPositiveSign = false;  	flagPositiveSpace = false;  	flagZeroPadding = false;  	flagGroupThousands = false;  	if (m.Groups [2] != null && m.Groups [2].Value.Length > 0) {  		string flags = m.Groups [2].Value;  		flagAlternate = (flags.IndexOf ('#') >= 0);  		flagLeft2Right = (flags.IndexOf ('-') >= 0);  		flagPositiveSign = (flags.IndexOf ('+') >= 0);  		flagPositiveSpace = (flags.IndexOf (' ') >= 0);  		flagGroupThousands = (flags.IndexOf ('\'') >= 0);  		// positive + indicator overrides a  		// positive space character  		if (flagPositiveSign && flagPositiveSpace)  			flagPositiveSpace = false;  	}  	#endregion  	#region field length  	// extract field length and   	// pading character  	paddingCharacter = ' ';  	fieldLength = int.MinValue;  	if (m.Groups [3] != null && m.Groups [3].Value.Length > 0) {  		fieldLength = Convert.ToInt32 (m.Groups [3].Value);  		flagZeroPadding = (m.Groups [3].Value [0] == '0');  	}  	#endregion  	if (flagZeroPadding)  		paddingCharacter = '0';  	// left2right allignment overrides zero padding  	if (flagLeft2Right && flagZeroPadding) {  		flagZeroPadding = false;  		paddingCharacter = ' ';  	}  	#region field precision  	// extract field precision  	fieldPrecision = int.MinValue;  	if (m.Groups [4] != null && m.Groups [4].Value.Length > 0)  		fieldPrecision = Convert.ToInt32 (m.Groups [4].Value);  	#endregion  	#region short / long indicator  	// extract short / long indicator  	shortLongIndicator = Char.MinValue;  	if (m.Groups [5] != null && m.Groups [5].Value.Length > 0)  		shortLongIndicator = m.Groups [5].Value [0];  	#endregion  	#region format specifier  	// extract format  	formatSpecifier = Char.MinValue;  	if (m.Groups [6] != null && m.Groups [6].Value.Length > 0)  		formatSpecifier = m.Groups [6].Value [0];  	#endregion  	// default precision is 6 digits if none is specified except  	if (fieldPrecision == int.MinValue && formatSpecifier != 's' && formatSpecifier != 'c' && Char.ToUpper (formatSpecifier) != 'X' && formatSpecifier != 'o')  		fieldPrecision = 6;  	#region get next value parameter  	// get next value parameter and convert value parameter depending on short / long indicator  	if (Parameters == null || paramIx >= Parameters.Length)  		o = null;  	else {  		o = Parameters [paramIx];  		if (shortLongIndicator == 'h') {  			if (o is int)  				o = (short)((int)o);  			else if (o is long)  				o = (short)((long)o);  			else if (o is uint)  				o = (ushort)((uint)o);  			else if (o is ulong)  				o = (ushort)((ulong)o);  		} else if (shortLongIndicator == 'l') {  			if (o is short)  				o = (long)((short)o);  			else if (o is int)  				o = (long)((int)o);  			else if (o is ushort)  				o = (ulong)((ushort)o);  			else if (o is uint)  				o = (ulong)((uint)o);  		}  	}  	#endregion  	// convert value parameters to a string depending on the formatSpecifier  	w = String.Empty;  	switch (formatSpecifier) {  	#region % - character  	case '%':  		// % character  		w = "%";  		break;  	#endregion  	#region d - integer  	case 'd':  		// integer  		w = FormatNumber ((flagGroupThousands ? "n" : "d")' flagAlternate' fieldLength' int.MinValue' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region i - integer  	case 'i':  		// integer  		goto case 'd';  	#endregion  	#region o - octal integer  	case 'o':  		// octal integer - no leading zero  		w = FormatOct ("o"' flagAlternate' fieldLength' int.MinValue' flagLeft2Right' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region x - hex integer  	case 'x':  		// hex integer - no leading zero  		w = FormatHex ("x"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region X - hex integer  	case 'X':  		// same as x but with capital hex characters  		w = FormatHex ("X"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region u - unsigned integer  	case 'u':  		// unsigned integer  		w = FormatNumber ((flagGroupThousands ? "n" : "d")' flagAlternate' fieldLength' int.MinValue' flagLeft2Right' false' false' paddingCharacter' ToUnsigned (o));  		defaultParamIx++;  		break;  	#endregion  	#region c - character  	case 'c':  		// character  		if (IsNumericType (o))  			w = Convert.ToChar (o).ToString ();  		else if (o is char)  			w = ((char)o).ToString ();  		else if (o is string && ((string)o).Length > 0)  			w = ((string)o) [0].ToString ();  		defaultParamIx++;  		break;  	#endregion  	#region s - string  	case 's':  		// string  		string t = "{0" + (fieldLength != int.MinValue ? "'" + (flagLeft2Right ? "-" : String.Empty) + fieldLength.ToString () : String.Empty) + ":s}";  		w = o.ToString ();  		if (fieldPrecision >= 0)  			w = w.Substring (0' fieldPrecision);  		if (fieldLength != int.MinValue)  			if (flagLeft2Right)  				w = w.PadRight (fieldLength' paddingCharacter);  			else  				w = w.PadLeft (fieldLength' paddingCharacter);  		defaultParamIx++;  		break;  	#endregion  	#region f - double number  	case 'f':  		// double  		w = FormatNumber ((flagGroupThousands ? "n" : "f")' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region e - exponent number  	case 'e':  		// double / exponent  		w = FormatNumber ("e"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region E - exponent number  	case 'E':  		// double / exponent  		w = FormatNumber ("E"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region g - general number  	case 'g':  		// double / exponent  		w = FormatNumber ("g"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region G - general number  	case 'G':  		// double / exponent  		w = FormatNumber ("G"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region p - pointer  	case 'p':  		// pointer  		if (o is IntPtr)  			#if XBOX || SILVERLIGHT  										w = ( (IntPtr)o ).ToString(); #else  			w = "0x" + ((IntPtr)o).ToString ("x");  		#endif  		defaultParamIx++;  		break;  	#endregion  	#region n - number of processed chars so far  	case 'n':  		// number of characters so far  		w = FormatNumber ("d"' flagAlternate' fieldLength' int.MinValue' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' m.Index);  		break;  	#endregion  	default:  		w = String.Empty;  		defaultParamIx++;  		break;  	}  	// replace format parameter with parameter value  	// and start searching for the next format parameter  	// AFTER the position of the current inserted value  	// to prohibit recursive matches if the value also  	// includes a format specifier  	f.Remove (m.Index' m.Length);  	f.Insert (m.Index' w);  	m = r.Match (f.ToString ()' m.Index + w.Length);  }  
Magic Number,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,sprintf,The following statement contains a magic number: while (m.Success) {  	#region parameter index  	paramIx = defaultParamIx;  	if (m.Groups [1] != null && m.Groups [1].Value.Length > 0) {  		string val = m.Groups [1].Value.Substring (0' m.Groups [1].Value.Length - 1);  		paramIx = Convert.ToInt32 (val) - 1;  	}  	;  	#endregion  	#region format flags  	// extract format flags  	flagAlternate = false;  	flagLeft2Right = false;  	flagPositiveSign = false;  	flagPositiveSpace = false;  	flagZeroPadding = false;  	flagGroupThousands = false;  	if (m.Groups [2] != null && m.Groups [2].Value.Length > 0) {  		string flags = m.Groups [2].Value;  		flagAlternate = (flags.IndexOf ('#') >= 0);  		flagLeft2Right = (flags.IndexOf ('-') >= 0);  		flagPositiveSign = (flags.IndexOf ('+') >= 0);  		flagPositiveSpace = (flags.IndexOf (' ') >= 0);  		flagGroupThousands = (flags.IndexOf ('\'') >= 0);  		// positive + indicator overrides a  		// positive space character  		if (flagPositiveSign && flagPositiveSpace)  			flagPositiveSpace = false;  	}  	#endregion  	#region field length  	// extract field length and   	// pading character  	paddingCharacter = ' ';  	fieldLength = int.MinValue;  	if (m.Groups [3] != null && m.Groups [3].Value.Length > 0) {  		fieldLength = Convert.ToInt32 (m.Groups [3].Value);  		flagZeroPadding = (m.Groups [3].Value [0] == '0');  	}  	#endregion  	if (flagZeroPadding)  		paddingCharacter = '0';  	// left2right allignment overrides zero padding  	if (flagLeft2Right && flagZeroPadding) {  		flagZeroPadding = false;  		paddingCharacter = ' ';  	}  	#region field precision  	// extract field precision  	fieldPrecision = int.MinValue;  	if (m.Groups [4] != null && m.Groups [4].Value.Length > 0)  		fieldPrecision = Convert.ToInt32 (m.Groups [4].Value);  	#endregion  	#region short / long indicator  	// extract short / long indicator  	shortLongIndicator = Char.MinValue;  	if (m.Groups [5] != null && m.Groups [5].Value.Length > 0)  		shortLongIndicator = m.Groups [5].Value [0];  	#endregion  	#region format specifier  	// extract format  	formatSpecifier = Char.MinValue;  	if (m.Groups [6] != null && m.Groups [6].Value.Length > 0)  		formatSpecifier = m.Groups [6].Value [0];  	#endregion  	// default precision is 6 digits if none is specified except  	if (fieldPrecision == int.MinValue && formatSpecifier != 's' && formatSpecifier != 'c' && Char.ToUpper (formatSpecifier) != 'X' && formatSpecifier != 'o')  		fieldPrecision = 6;  	#region get next value parameter  	// get next value parameter and convert value parameter depending on short / long indicator  	if (Parameters == null || paramIx >= Parameters.Length)  		o = null;  	else {  		o = Parameters [paramIx];  		if (shortLongIndicator == 'h') {  			if (o is int)  				o = (short)((int)o);  			else if (o is long)  				o = (short)((long)o);  			else if (o is uint)  				o = (ushort)((uint)o);  			else if (o is ulong)  				o = (ushort)((ulong)o);  		} else if (shortLongIndicator == 'l') {  			if (o is short)  				o = (long)((short)o);  			else if (o is int)  				o = (long)((int)o);  			else if (o is ushort)  				o = (ulong)((ushort)o);  			else if (o is uint)  				o = (ulong)((uint)o);  		}  	}  	#endregion  	// convert value parameters to a string depending on the formatSpecifier  	w = String.Empty;  	switch (formatSpecifier) {  	#region % - character  	case '%':  		// % character  		w = "%";  		break;  	#endregion  	#region d - integer  	case 'd':  		// integer  		w = FormatNumber ((flagGroupThousands ? "n" : "d")' flagAlternate' fieldLength' int.MinValue' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region i - integer  	case 'i':  		// integer  		goto case 'd';  	#endregion  	#region o - octal integer  	case 'o':  		// octal integer - no leading zero  		w = FormatOct ("o"' flagAlternate' fieldLength' int.MinValue' flagLeft2Right' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region x - hex integer  	case 'x':  		// hex integer - no leading zero  		w = FormatHex ("x"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region X - hex integer  	case 'X':  		// same as x but with capital hex characters  		w = FormatHex ("X"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region u - unsigned integer  	case 'u':  		// unsigned integer  		w = FormatNumber ((flagGroupThousands ? "n" : "d")' flagAlternate' fieldLength' int.MinValue' flagLeft2Right' false' false' paddingCharacter' ToUnsigned (o));  		defaultParamIx++;  		break;  	#endregion  	#region c - character  	case 'c':  		// character  		if (IsNumericType (o))  			w = Convert.ToChar (o).ToString ();  		else if (o is char)  			w = ((char)o).ToString ();  		else if (o is string && ((string)o).Length > 0)  			w = ((string)o) [0].ToString ();  		defaultParamIx++;  		break;  	#endregion  	#region s - string  	case 's':  		// string  		string t = "{0" + (fieldLength != int.MinValue ? "'" + (flagLeft2Right ? "-" : String.Empty) + fieldLength.ToString () : String.Empty) + ":s}";  		w = o.ToString ();  		if (fieldPrecision >= 0)  			w = w.Substring (0' fieldPrecision);  		if (fieldLength != int.MinValue)  			if (flagLeft2Right)  				w = w.PadRight (fieldLength' paddingCharacter);  			else  				w = w.PadLeft (fieldLength' paddingCharacter);  		defaultParamIx++;  		break;  	#endregion  	#region f - double number  	case 'f':  		// double  		w = FormatNumber ((flagGroupThousands ? "n" : "f")' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region e - exponent number  	case 'e':  		// double / exponent  		w = FormatNumber ("e"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region E - exponent number  	case 'E':  		// double / exponent  		w = FormatNumber ("E"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region g - general number  	case 'g':  		// double / exponent  		w = FormatNumber ("g"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region G - general number  	case 'G':  		// double / exponent  		w = FormatNumber ("G"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region p - pointer  	case 'p':  		// pointer  		if (o is IntPtr)  			#if XBOX || SILVERLIGHT  										w = ( (IntPtr)o ).ToString(); #else  			w = "0x" + ((IntPtr)o).ToString ("x");  		#endif  		defaultParamIx++;  		break;  	#endregion  	#region n - number of processed chars so far  	case 'n':  		// number of characters so far  		w = FormatNumber ("d"' flagAlternate' fieldLength' int.MinValue' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' m.Index);  		break;  	#endregion  	default:  		w = String.Empty;  		defaultParamIx++;  		break;  	}  	// replace format parameter with parameter value  	// and start searching for the next format parameter  	// AFTER the position of the current inserted value  	// to prohibit recursive matches if the value also  	// includes a format specifier  	f.Remove (m.Index' m.Length);  	f.Insert (m.Index' w);  	m = r.Match (f.ToString ()' m.Index + w.Length);  }  
Magic Number,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,sprintf,The following statement contains a magic number: while (m.Success) {  	#region parameter index  	paramIx = defaultParamIx;  	if (m.Groups [1] != null && m.Groups [1].Value.Length > 0) {  		string val = m.Groups [1].Value.Substring (0' m.Groups [1].Value.Length - 1);  		paramIx = Convert.ToInt32 (val) - 1;  	}  	;  	#endregion  	#region format flags  	// extract format flags  	flagAlternate = false;  	flagLeft2Right = false;  	flagPositiveSign = false;  	flagPositiveSpace = false;  	flagZeroPadding = false;  	flagGroupThousands = false;  	if (m.Groups [2] != null && m.Groups [2].Value.Length > 0) {  		string flags = m.Groups [2].Value;  		flagAlternate = (flags.IndexOf ('#') >= 0);  		flagLeft2Right = (flags.IndexOf ('-') >= 0);  		flagPositiveSign = (flags.IndexOf ('+') >= 0);  		flagPositiveSpace = (flags.IndexOf (' ') >= 0);  		flagGroupThousands = (flags.IndexOf ('\'') >= 0);  		// positive + indicator overrides a  		// positive space character  		if (flagPositiveSign && flagPositiveSpace)  			flagPositiveSpace = false;  	}  	#endregion  	#region field length  	// extract field length and   	// pading character  	paddingCharacter = ' ';  	fieldLength = int.MinValue;  	if (m.Groups [3] != null && m.Groups [3].Value.Length > 0) {  		fieldLength = Convert.ToInt32 (m.Groups [3].Value);  		flagZeroPadding = (m.Groups [3].Value [0] == '0');  	}  	#endregion  	if (flagZeroPadding)  		paddingCharacter = '0';  	// left2right allignment overrides zero padding  	if (flagLeft2Right && flagZeroPadding) {  		flagZeroPadding = false;  		paddingCharacter = ' ';  	}  	#region field precision  	// extract field precision  	fieldPrecision = int.MinValue;  	if (m.Groups [4] != null && m.Groups [4].Value.Length > 0)  		fieldPrecision = Convert.ToInt32 (m.Groups [4].Value);  	#endregion  	#region short / long indicator  	// extract short / long indicator  	shortLongIndicator = Char.MinValue;  	if (m.Groups [5] != null && m.Groups [5].Value.Length > 0)  		shortLongIndicator = m.Groups [5].Value [0];  	#endregion  	#region format specifier  	// extract format  	formatSpecifier = Char.MinValue;  	if (m.Groups [6] != null && m.Groups [6].Value.Length > 0)  		formatSpecifier = m.Groups [6].Value [0];  	#endregion  	// default precision is 6 digits if none is specified except  	if (fieldPrecision == int.MinValue && formatSpecifier != 's' && formatSpecifier != 'c' && Char.ToUpper (formatSpecifier) != 'X' && formatSpecifier != 'o')  		fieldPrecision = 6;  	#region get next value parameter  	// get next value parameter and convert value parameter depending on short / long indicator  	if (Parameters == null || paramIx >= Parameters.Length)  		o = null;  	else {  		o = Parameters [paramIx];  		if (shortLongIndicator == 'h') {  			if (o is int)  				o = (short)((int)o);  			else if (o is long)  				o = (short)((long)o);  			else if (o is uint)  				o = (ushort)((uint)o);  			else if (o is ulong)  				o = (ushort)((ulong)o);  		} else if (shortLongIndicator == 'l') {  			if (o is short)  				o = (long)((short)o);  			else if (o is int)  				o = (long)((int)o);  			else if (o is ushort)  				o = (ulong)((ushort)o);  			else if (o is uint)  				o = (ulong)((uint)o);  		}  	}  	#endregion  	// convert value parameters to a string depending on the formatSpecifier  	w = String.Empty;  	switch (formatSpecifier) {  	#region % - character  	case '%':  		// % character  		w = "%";  		break;  	#endregion  	#region d - integer  	case 'd':  		// integer  		w = FormatNumber ((flagGroupThousands ? "n" : "d")' flagAlternate' fieldLength' int.MinValue' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region i - integer  	case 'i':  		// integer  		goto case 'd';  	#endregion  	#region o - octal integer  	case 'o':  		// octal integer - no leading zero  		w = FormatOct ("o"' flagAlternate' fieldLength' int.MinValue' flagLeft2Right' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region x - hex integer  	case 'x':  		// hex integer - no leading zero  		w = FormatHex ("x"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region X - hex integer  	case 'X':  		// same as x but with capital hex characters  		w = FormatHex ("X"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region u - unsigned integer  	case 'u':  		// unsigned integer  		w = FormatNumber ((flagGroupThousands ? "n" : "d")' flagAlternate' fieldLength' int.MinValue' flagLeft2Right' false' false' paddingCharacter' ToUnsigned (o));  		defaultParamIx++;  		break;  	#endregion  	#region c - character  	case 'c':  		// character  		if (IsNumericType (o))  			w = Convert.ToChar (o).ToString ();  		else if (o is char)  			w = ((char)o).ToString ();  		else if (o is string && ((string)o).Length > 0)  			w = ((string)o) [0].ToString ();  		defaultParamIx++;  		break;  	#endregion  	#region s - string  	case 's':  		// string  		string t = "{0" + (fieldLength != int.MinValue ? "'" + (flagLeft2Right ? "-" : String.Empty) + fieldLength.ToString () : String.Empty) + ":s}";  		w = o.ToString ();  		if (fieldPrecision >= 0)  			w = w.Substring (0' fieldPrecision);  		if (fieldLength != int.MinValue)  			if (flagLeft2Right)  				w = w.PadRight (fieldLength' paddingCharacter);  			else  				w = w.PadLeft (fieldLength' paddingCharacter);  		defaultParamIx++;  		break;  	#endregion  	#region f - double number  	case 'f':  		// double  		w = FormatNumber ((flagGroupThousands ? "n" : "f")' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region e - exponent number  	case 'e':  		// double / exponent  		w = FormatNumber ("e"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region E - exponent number  	case 'E':  		// double / exponent  		w = FormatNumber ("E"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region g - general number  	case 'g':  		// double / exponent  		w = FormatNumber ("g"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region G - general number  	case 'G':  		// double / exponent  		w = FormatNumber ("G"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region p - pointer  	case 'p':  		// pointer  		if (o is IntPtr)  			#if XBOX || SILVERLIGHT  										w = ( (IntPtr)o ).ToString(); #else  			w = "0x" + ((IntPtr)o).ToString ("x");  		#endif  		defaultParamIx++;  		break;  	#endregion  	#region n - number of processed chars so far  	case 'n':  		// number of characters so far  		w = FormatNumber ("d"' flagAlternate' fieldLength' int.MinValue' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' m.Index);  		break;  	#endregion  	default:  		w = String.Empty;  		defaultParamIx++;  		break;  	}  	// replace format parameter with parameter value  	// and start searching for the next format parameter  	// AFTER the position of the current inserted value  	// to prohibit recursive matches if the value also  	// includes a format specifier  	f.Remove (m.Index' m.Length);  	f.Insert (m.Index' w);  	m = r.Match (f.ToString ()' m.Index + w.Length);  }  
Magic Number,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,sprintf,The following statement contains a magic number: while (m.Success) {  	#region parameter index  	paramIx = defaultParamIx;  	if (m.Groups [1] != null && m.Groups [1].Value.Length > 0) {  		string val = m.Groups [1].Value.Substring (0' m.Groups [1].Value.Length - 1);  		paramIx = Convert.ToInt32 (val) - 1;  	}  	;  	#endregion  	#region format flags  	// extract format flags  	flagAlternate = false;  	flagLeft2Right = false;  	flagPositiveSign = false;  	flagPositiveSpace = false;  	flagZeroPadding = false;  	flagGroupThousands = false;  	if (m.Groups [2] != null && m.Groups [2].Value.Length > 0) {  		string flags = m.Groups [2].Value;  		flagAlternate = (flags.IndexOf ('#') >= 0);  		flagLeft2Right = (flags.IndexOf ('-') >= 0);  		flagPositiveSign = (flags.IndexOf ('+') >= 0);  		flagPositiveSpace = (flags.IndexOf (' ') >= 0);  		flagGroupThousands = (flags.IndexOf ('\'') >= 0);  		// positive + indicator overrides a  		// positive space character  		if (flagPositiveSign && flagPositiveSpace)  			flagPositiveSpace = false;  	}  	#endregion  	#region field length  	// extract field length and   	// pading character  	paddingCharacter = ' ';  	fieldLength = int.MinValue;  	if (m.Groups [3] != null && m.Groups [3].Value.Length > 0) {  		fieldLength = Convert.ToInt32 (m.Groups [3].Value);  		flagZeroPadding = (m.Groups [3].Value [0] == '0');  	}  	#endregion  	if (flagZeroPadding)  		paddingCharacter = '0';  	// left2right allignment overrides zero padding  	if (flagLeft2Right && flagZeroPadding) {  		flagZeroPadding = false;  		paddingCharacter = ' ';  	}  	#region field precision  	// extract field precision  	fieldPrecision = int.MinValue;  	if (m.Groups [4] != null && m.Groups [4].Value.Length > 0)  		fieldPrecision = Convert.ToInt32 (m.Groups [4].Value);  	#endregion  	#region short / long indicator  	// extract short / long indicator  	shortLongIndicator = Char.MinValue;  	if (m.Groups [5] != null && m.Groups [5].Value.Length > 0)  		shortLongIndicator = m.Groups [5].Value [0];  	#endregion  	#region format specifier  	// extract format  	formatSpecifier = Char.MinValue;  	if (m.Groups [6] != null && m.Groups [6].Value.Length > 0)  		formatSpecifier = m.Groups [6].Value [0];  	#endregion  	// default precision is 6 digits if none is specified except  	if (fieldPrecision == int.MinValue && formatSpecifier != 's' && formatSpecifier != 'c' && Char.ToUpper (formatSpecifier) != 'X' && formatSpecifier != 'o')  		fieldPrecision = 6;  	#region get next value parameter  	// get next value parameter and convert value parameter depending on short / long indicator  	if (Parameters == null || paramIx >= Parameters.Length)  		o = null;  	else {  		o = Parameters [paramIx];  		if (shortLongIndicator == 'h') {  			if (o is int)  				o = (short)((int)o);  			else if (o is long)  				o = (short)((long)o);  			else if (o is uint)  				o = (ushort)((uint)o);  			else if (o is ulong)  				o = (ushort)((ulong)o);  		} else if (shortLongIndicator == 'l') {  			if (o is short)  				o = (long)((short)o);  			else if (o is int)  				o = (long)((int)o);  			else if (o is ushort)  				o = (ulong)((ushort)o);  			else if (o is uint)  				o = (ulong)((uint)o);  		}  	}  	#endregion  	// convert value parameters to a string depending on the formatSpecifier  	w = String.Empty;  	switch (formatSpecifier) {  	#region % - character  	case '%':  		// % character  		w = "%";  		break;  	#endregion  	#region d - integer  	case 'd':  		// integer  		w = FormatNumber ((flagGroupThousands ? "n" : "d")' flagAlternate' fieldLength' int.MinValue' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region i - integer  	case 'i':  		// integer  		goto case 'd';  	#endregion  	#region o - octal integer  	case 'o':  		// octal integer - no leading zero  		w = FormatOct ("o"' flagAlternate' fieldLength' int.MinValue' flagLeft2Right' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region x - hex integer  	case 'x':  		// hex integer - no leading zero  		w = FormatHex ("x"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region X - hex integer  	case 'X':  		// same as x but with capital hex characters  		w = FormatHex ("X"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region u - unsigned integer  	case 'u':  		// unsigned integer  		w = FormatNumber ((flagGroupThousands ? "n" : "d")' flagAlternate' fieldLength' int.MinValue' flagLeft2Right' false' false' paddingCharacter' ToUnsigned (o));  		defaultParamIx++;  		break;  	#endregion  	#region c - character  	case 'c':  		// character  		if (IsNumericType (o))  			w = Convert.ToChar (o).ToString ();  		else if (o is char)  			w = ((char)o).ToString ();  		else if (o is string && ((string)o).Length > 0)  			w = ((string)o) [0].ToString ();  		defaultParamIx++;  		break;  	#endregion  	#region s - string  	case 's':  		// string  		string t = "{0" + (fieldLength != int.MinValue ? "'" + (flagLeft2Right ? "-" : String.Empty) + fieldLength.ToString () : String.Empty) + ":s}";  		w = o.ToString ();  		if (fieldPrecision >= 0)  			w = w.Substring (0' fieldPrecision);  		if (fieldLength != int.MinValue)  			if (flagLeft2Right)  				w = w.PadRight (fieldLength' paddingCharacter);  			else  				w = w.PadLeft (fieldLength' paddingCharacter);  		defaultParamIx++;  		break;  	#endregion  	#region f - double number  	case 'f':  		// double  		w = FormatNumber ((flagGroupThousands ? "n" : "f")' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region e - exponent number  	case 'e':  		// double / exponent  		w = FormatNumber ("e"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region E - exponent number  	case 'E':  		// double / exponent  		w = FormatNumber ("E"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region g - general number  	case 'g':  		// double / exponent  		w = FormatNumber ("g"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region G - general number  	case 'G':  		// double / exponent  		w = FormatNumber ("G"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region p - pointer  	case 'p':  		// pointer  		if (o is IntPtr)  			#if XBOX || SILVERLIGHT  										w = ( (IntPtr)o ).ToString(); #else  			w = "0x" + ((IntPtr)o).ToString ("x");  		#endif  		defaultParamIx++;  		break;  	#endregion  	#region n - number of processed chars so far  	case 'n':  		// number of characters so far  		w = FormatNumber ("d"' flagAlternate' fieldLength' int.MinValue' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' m.Index);  		break;  	#endregion  	default:  		w = String.Empty;  		defaultParamIx++;  		break;  	}  	// replace format parameter with parameter value  	// and start searching for the next format parameter  	// AFTER the position of the current inserted value  	// to prohibit recursive matches if the value also  	// includes a format specifier  	f.Remove (m.Index' m.Length);  	f.Insert (m.Index' w);  	m = r.Match (f.ToString ()' m.Index + w.Length);  }  
Magic Number,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,sprintf,The following statement contains a magic number: while (m.Success) {  	#region parameter index  	paramIx = defaultParamIx;  	if (m.Groups [1] != null && m.Groups [1].Value.Length > 0) {  		string val = m.Groups [1].Value.Substring (0' m.Groups [1].Value.Length - 1);  		paramIx = Convert.ToInt32 (val) - 1;  	}  	;  	#endregion  	#region format flags  	// extract format flags  	flagAlternate = false;  	flagLeft2Right = false;  	flagPositiveSign = false;  	flagPositiveSpace = false;  	flagZeroPadding = false;  	flagGroupThousands = false;  	if (m.Groups [2] != null && m.Groups [2].Value.Length > 0) {  		string flags = m.Groups [2].Value;  		flagAlternate = (flags.IndexOf ('#') >= 0);  		flagLeft2Right = (flags.IndexOf ('-') >= 0);  		flagPositiveSign = (flags.IndexOf ('+') >= 0);  		flagPositiveSpace = (flags.IndexOf (' ') >= 0);  		flagGroupThousands = (flags.IndexOf ('\'') >= 0);  		// positive + indicator overrides a  		// positive space character  		if (flagPositiveSign && flagPositiveSpace)  			flagPositiveSpace = false;  	}  	#endregion  	#region field length  	// extract field length and   	// pading character  	paddingCharacter = ' ';  	fieldLength = int.MinValue;  	if (m.Groups [3] != null && m.Groups [3].Value.Length > 0) {  		fieldLength = Convert.ToInt32 (m.Groups [3].Value);  		flagZeroPadding = (m.Groups [3].Value [0] == '0');  	}  	#endregion  	if (flagZeroPadding)  		paddingCharacter = '0';  	// left2right allignment overrides zero padding  	if (flagLeft2Right && flagZeroPadding) {  		flagZeroPadding = false;  		paddingCharacter = ' ';  	}  	#region field precision  	// extract field precision  	fieldPrecision = int.MinValue;  	if (m.Groups [4] != null && m.Groups [4].Value.Length > 0)  		fieldPrecision = Convert.ToInt32 (m.Groups [4].Value);  	#endregion  	#region short / long indicator  	// extract short / long indicator  	shortLongIndicator = Char.MinValue;  	if (m.Groups [5] != null && m.Groups [5].Value.Length > 0)  		shortLongIndicator = m.Groups [5].Value [0];  	#endregion  	#region format specifier  	// extract format  	formatSpecifier = Char.MinValue;  	if (m.Groups [6] != null && m.Groups [6].Value.Length > 0)  		formatSpecifier = m.Groups [6].Value [0];  	#endregion  	// default precision is 6 digits if none is specified except  	if (fieldPrecision == int.MinValue && formatSpecifier != 's' && formatSpecifier != 'c' && Char.ToUpper (formatSpecifier) != 'X' && formatSpecifier != 'o')  		fieldPrecision = 6;  	#region get next value parameter  	// get next value parameter and convert value parameter depending on short / long indicator  	if (Parameters == null || paramIx >= Parameters.Length)  		o = null;  	else {  		o = Parameters [paramIx];  		if (shortLongIndicator == 'h') {  			if (o is int)  				o = (short)((int)o);  			else if (o is long)  				o = (short)((long)o);  			else if (o is uint)  				o = (ushort)((uint)o);  			else if (o is ulong)  				o = (ushort)((ulong)o);  		} else if (shortLongIndicator == 'l') {  			if (o is short)  				o = (long)((short)o);  			else if (o is int)  				o = (long)((int)o);  			else if (o is ushort)  				o = (ulong)((ushort)o);  			else if (o is uint)  				o = (ulong)((uint)o);  		}  	}  	#endregion  	// convert value parameters to a string depending on the formatSpecifier  	w = String.Empty;  	switch (formatSpecifier) {  	#region % - character  	case '%':  		// % character  		w = "%";  		break;  	#endregion  	#region d - integer  	case 'd':  		// integer  		w = FormatNumber ((flagGroupThousands ? "n" : "d")' flagAlternate' fieldLength' int.MinValue' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region i - integer  	case 'i':  		// integer  		goto case 'd';  	#endregion  	#region o - octal integer  	case 'o':  		// octal integer - no leading zero  		w = FormatOct ("o"' flagAlternate' fieldLength' int.MinValue' flagLeft2Right' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region x - hex integer  	case 'x':  		// hex integer - no leading zero  		w = FormatHex ("x"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region X - hex integer  	case 'X':  		// same as x but with capital hex characters  		w = FormatHex ("X"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region u - unsigned integer  	case 'u':  		// unsigned integer  		w = FormatNumber ((flagGroupThousands ? "n" : "d")' flagAlternate' fieldLength' int.MinValue' flagLeft2Right' false' false' paddingCharacter' ToUnsigned (o));  		defaultParamIx++;  		break;  	#endregion  	#region c - character  	case 'c':  		// character  		if (IsNumericType (o))  			w = Convert.ToChar (o).ToString ();  		else if (o is char)  			w = ((char)o).ToString ();  		else if (o is string && ((string)o).Length > 0)  			w = ((string)o) [0].ToString ();  		defaultParamIx++;  		break;  	#endregion  	#region s - string  	case 's':  		// string  		string t = "{0" + (fieldLength != int.MinValue ? "'" + (flagLeft2Right ? "-" : String.Empty) + fieldLength.ToString () : String.Empty) + ":s}";  		w = o.ToString ();  		if (fieldPrecision >= 0)  			w = w.Substring (0' fieldPrecision);  		if (fieldLength != int.MinValue)  			if (flagLeft2Right)  				w = w.PadRight (fieldLength' paddingCharacter);  			else  				w = w.PadLeft (fieldLength' paddingCharacter);  		defaultParamIx++;  		break;  	#endregion  	#region f - double number  	case 'f':  		// double  		w = FormatNumber ((flagGroupThousands ? "n" : "f")' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region e - exponent number  	case 'e':  		// double / exponent  		w = FormatNumber ("e"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region E - exponent number  	case 'E':  		// double / exponent  		w = FormatNumber ("E"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region g - general number  	case 'g':  		// double / exponent  		w = FormatNumber ("g"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region G - general number  	case 'G':  		// double / exponent  		w = FormatNumber ("G"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region p - pointer  	case 'p':  		// pointer  		if (o is IntPtr)  			#if XBOX || SILVERLIGHT  										w = ( (IntPtr)o ).ToString(); #else  			w = "0x" + ((IntPtr)o).ToString ("x");  		#endif  		defaultParamIx++;  		break;  	#endregion  	#region n - number of processed chars so far  	case 'n':  		// number of characters so far  		w = FormatNumber ("d"' flagAlternate' fieldLength' int.MinValue' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' m.Index);  		break;  	#endregion  	default:  		w = String.Empty;  		defaultParamIx++;  		break;  	}  	// replace format parameter with parameter value  	// and start searching for the next format parameter  	// AFTER the position of the current inserted value  	// to prohibit recursive matches if the value also  	// includes a format specifier  	f.Remove (m.Index' m.Length);  	f.Insert (m.Index' w);  	m = r.Match (f.ToString ()' m.Index + w.Length);  }  
Magic Number,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,sprintf,The following statement contains a magic number: while (m.Success) {  	#region parameter index  	paramIx = defaultParamIx;  	if (m.Groups [1] != null && m.Groups [1].Value.Length > 0) {  		string val = m.Groups [1].Value.Substring (0' m.Groups [1].Value.Length - 1);  		paramIx = Convert.ToInt32 (val) - 1;  	}  	;  	#endregion  	#region format flags  	// extract format flags  	flagAlternate = false;  	flagLeft2Right = false;  	flagPositiveSign = false;  	flagPositiveSpace = false;  	flagZeroPadding = false;  	flagGroupThousands = false;  	if (m.Groups [2] != null && m.Groups [2].Value.Length > 0) {  		string flags = m.Groups [2].Value;  		flagAlternate = (flags.IndexOf ('#') >= 0);  		flagLeft2Right = (flags.IndexOf ('-') >= 0);  		flagPositiveSign = (flags.IndexOf ('+') >= 0);  		flagPositiveSpace = (flags.IndexOf (' ') >= 0);  		flagGroupThousands = (flags.IndexOf ('\'') >= 0);  		// positive + indicator overrides a  		// positive space character  		if (flagPositiveSign && flagPositiveSpace)  			flagPositiveSpace = false;  	}  	#endregion  	#region field length  	// extract field length and   	// pading character  	paddingCharacter = ' ';  	fieldLength = int.MinValue;  	if (m.Groups [3] != null && m.Groups [3].Value.Length > 0) {  		fieldLength = Convert.ToInt32 (m.Groups [3].Value);  		flagZeroPadding = (m.Groups [3].Value [0] == '0');  	}  	#endregion  	if (flagZeroPadding)  		paddingCharacter = '0';  	// left2right allignment overrides zero padding  	if (flagLeft2Right && flagZeroPadding) {  		flagZeroPadding = false;  		paddingCharacter = ' ';  	}  	#region field precision  	// extract field precision  	fieldPrecision = int.MinValue;  	if (m.Groups [4] != null && m.Groups [4].Value.Length > 0)  		fieldPrecision = Convert.ToInt32 (m.Groups [4].Value);  	#endregion  	#region short / long indicator  	// extract short / long indicator  	shortLongIndicator = Char.MinValue;  	if (m.Groups [5] != null && m.Groups [5].Value.Length > 0)  		shortLongIndicator = m.Groups [5].Value [0];  	#endregion  	#region format specifier  	// extract format  	formatSpecifier = Char.MinValue;  	if (m.Groups [6] != null && m.Groups [6].Value.Length > 0)  		formatSpecifier = m.Groups [6].Value [0];  	#endregion  	// default precision is 6 digits if none is specified except  	if (fieldPrecision == int.MinValue && formatSpecifier != 's' && formatSpecifier != 'c' && Char.ToUpper (formatSpecifier) != 'X' && formatSpecifier != 'o')  		fieldPrecision = 6;  	#region get next value parameter  	// get next value parameter and convert value parameter depending on short / long indicator  	if (Parameters == null || paramIx >= Parameters.Length)  		o = null;  	else {  		o = Parameters [paramIx];  		if (shortLongIndicator == 'h') {  			if (o is int)  				o = (short)((int)o);  			else if (o is long)  				o = (short)((long)o);  			else if (o is uint)  				o = (ushort)((uint)o);  			else if (o is ulong)  				o = (ushort)((ulong)o);  		} else if (shortLongIndicator == 'l') {  			if (o is short)  				o = (long)((short)o);  			else if (o is int)  				o = (long)((int)o);  			else if (o is ushort)  				o = (ulong)((ushort)o);  			else if (o is uint)  				o = (ulong)((uint)o);  		}  	}  	#endregion  	// convert value parameters to a string depending on the formatSpecifier  	w = String.Empty;  	switch (formatSpecifier) {  	#region % - character  	case '%':  		// % character  		w = "%";  		break;  	#endregion  	#region d - integer  	case 'd':  		// integer  		w = FormatNumber ((flagGroupThousands ? "n" : "d")' flagAlternate' fieldLength' int.MinValue' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region i - integer  	case 'i':  		// integer  		goto case 'd';  	#endregion  	#region o - octal integer  	case 'o':  		// octal integer - no leading zero  		w = FormatOct ("o"' flagAlternate' fieldLength' int.MinValue' flagLeft2Right' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region x - hex integer  	case 'x':  		// hex integer - no leading zero  		w = FormatHex ("x"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region X - hex integer  	case 'X':  		// same as x but with capital hex characters  		w = FormatHex ("X"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region u - unsigned integer  	case 'u':  		// unsigned integer  		w = FormatNumber ((flagGroupThousands ? "n" : "d")' flagAlternate' fieldLength' int.MinValue' flagLeft2Right' false' false' paddingCharacter' ToUnsigned (o));  		defaultParamIx++;  		break;  	#endregion  	#region c - character  	case 'c':  		// character  		if (IsNumericType (o))  			w = Convert.ToChar (o).ToString ();  		else if (o is char)  			w = ((char)o).ToString ();  		else if (o is string && ((string)o).Length > 0)  			w = ((string)o) [0].ToString ();  		defaultParamIx++;  		break;  	#endregion  	#region s - string  	case 's':  		// string  		string t = "{0" + (fieldLength != int.MinValue ? "'" + (flagLeft2Right ? "-" : String.Empty) + fieldLength.ToString () : String.Empty) + ":s}";  		w = o.ToString ();  		if (fieldPrecision >= 0)  			w = w.Substring (0' fieldPrecision);  		if (fieldLength != int.MinValue)  			if (flagLeft2Right)  				w = w.PadRight (fieldLength' paddingCharacter);  			else  				w = w.PadLeft (fieldLength' paddingCharacter);  		defaultParamIx++;  		break;  	#endregion  	#region f - double number  	case 'f':  		// double  		w = FormatNumber ((flagGroupThousands ? "n" : "f")' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region e - exponent number  	case 'e':  		// double / exponent  		w = FormatNumber ("e"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region E - exponent number  	case 'E':  		// double / exponent  		w = FormatNumber ("E"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region g - general number  	case 'g':  		// double / exponent  		w = FormatNumber ("g"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region G - general number  	case 'G':  		// double / exponent  		w = FormatNumber ("G"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region p - pointer  	case 'p':  		// pointer  		if (o is IntPtr)  			#if XBOX || SILVERLIGHT  										w = ( (IntPtr)o ).ToString(); #else  			w = "0x" + ((IntPtr)o).ToString ("x");  		#endif  		defaultParamIx++;  		break;  	#endregion  	#region n - number of processed chars so far  	case 'n':  		// number of characters so far  		w = FormatNumber ("d"' flagAlternate' fieldLength' int.MinValue' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' m.Index);  		break;  	#endregion  	default:  		w = String.Empty;  		defaultParamIx++;  		break;  	}  	// replace format parameter with parameter value  	// and start searching for the next format parameter  	// AFTER the position of the current inserted value  	// to prohibit recursive matches if the value also  	// includes a format specifier  	f.Remove (m.Index' m.Length);  	f.Insert (m.Index' w);  	m = r.Match (f.ToString ()' m.Index + w.Length);  }  
Magic Number,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,sprintf,The following statement contains a magic number: while (m.Success) {  	#region parameter index  	paramIx = defaultParamIx;  	if (m.Groups [1] != null && m.Groups [1].Value.Length > 0) {  		string val = m.Groups [1].Value.Substring (0' m.Groups [1].Value.Length - 1);  		paramIx = Convert.ToInt32 (val) - 1;  	}  	;  	#endregion  	#region format flags  	// extract format flags  	flagAlternate = false;  	flagLeft2Right = false;  	flagPositiveSign = false;  	flagPositiveSpace = false;  	flagZeroPadding = false;  	flagGroupThousands = false;  	if (m.Groups [2] != null && m.Groups [2].Value.Length > 0) {  		string flags = m.Groups [2].Value;  		flagAlternate = (flags.IndexOf ('#') >= 0);  		flagLeft2Right = (flags.IndexOf ('-') >= 0);  		flagPositiveSign = (flags.IndexOf ('+') >= 0);  		flagPositiveSpace = (flags.IndexOf (' ') >= 0);  		flagGroupThousands = (flags.IndexOf ('\'') >= 0);  		// positive + indicator overrides a  		// positive space character  		if (flagPositiveSign && flagPositiveSpace)  			flagPositiveSpace = false;  	}  	#endregion  	#region field length  	// extract field length and   	// pading character  	paddingCharacter = ' ';  	fieldLength = int.MinValue;  	if (m.Groups [3] != null && m.Groups [3].Value.Length > 0) {  		fieldLength = Convert.ToInt32 (m.Groups [3].Value);  		flagZeroPadding = (m.Groups [3].Value [0] == '0');  	}  	#endregion  	if (flagZeroPadding)  		paddingCharacter = '0';  	// left2right allignment overrides zero padding  	if (flagLeft2Right && flagZeroPadding) {  		flagZeroPadding = false;  		paddingCharacter = ' ';  	}  	#region field precision  	// extract field precision  	fieldPrecision = int.MinValue;  	if (m.Groups [4] != null && m.Groups [4].Value.Length > 0)  		fieldPrecision = Convert.ToInt32 (m.Groups [4].Value);  	#endregion  	#region short / long indicator  	// extract short / long indicator  	shortLongIndicator = Char.MinValue;  	if (m.Groups [5] != null && m.Groups [5].Value.Length > 0)  		shortLongIndicator = m.Groups [5].Value [0];  	#endregion  	#region format specifier  	// extract format  	formatSpecifier = Char.MinValue;  	if (m.Groups [6] != null && m.Groups [6].Value.Length > 0)  		formatSpecifier = m.Groups [6].Value [0];  	#endregion  	// default precision is 6 digits if none is specified except  	if (fieldPrecision == int.MinValue && formatSpecifier != 's' && formatSpecifier != 'c' && Char.ToUpper (formatSpecifier) != 'X' && formatSpecifier != 'o')  		fieldPrecision = 6;  	#region get next value parameter  	// get next value parameter and convert value parameter depending on short / long indicator  	if (Parameters == null || paramIx >= Parameters.Length)  		o = null;  	else {  		o = Parameters [paramIx];  		if (shortLongIndicator == 'h') {  			if (o is int)  				o = (short)((int)o);  			else if (o is long)  				o = (short)((long)o);  			else if (o is uint)  				o = (ushort)((uint)o);  			else if (o is ulong)  				o = (ushort)((ulong)o);  		} else if (shortLongIndicator == 'l') {  			if (o is short)  				o = (long)((short)o);  			else if (o is int)  				o = (long)((int)o);  			else if (o is ushort)  				o = (ulong)((ushort)o);  			else if (o is uint)  				o = (ulong)((uint)o);  		}  	}  	#endregion  	// convert value parameters to a string depending on the formatSpecifier  	w = String.Empty;  	switch (formatSpecifier) {  	#region % - character  	case '%':  		// % character  		w = "%";  		break;  	#endregion  	#region d - integer  	case 'd':  		// integer  		w = FormatNumber ((flagGroupThousands ? "n" : "d")' flagAlternate' fieldLength' int.MinValue' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region i - integer  	case 'i':  		// integer  		goto case 'd';  	#endregion  	#region o - octal integer  	case 'o':  		// octal integer - no leading zero  		w = FormatOct ("o"' flagAlternate' fieldLength' int.MinValue' flagLeft2Right' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region x - hex integer  	case 'x':  		// hex integer - no leading zero  		w = FormatHex ("x"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region X - hex integer  	case 'X':  		// same as x but with capital hex characters  		w = FormatHex ("X"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region u - unsigned integer  	case 'u':  		// unsigned integer  		w = FormatNumber ((flagGroupThousands ? "n" : "d")' flagAlternate' fieldLength' int.MinValue' flagLeft2Right' false' false' paddingCharacter' ToUnsigned (o));  		defaultParamIx++;  		break;  	#endregion  	#region c - character  	case 'c':  		// character  		if (IsNumericType (o))  			w = Convert.ToChar (o).ToString ();  		else if (o is char)  			w = ((char)o).ToString ();  		else if (o is string && ((string)o).Length > 0)  			w = ((string)o) [0].ToString ();  		defaultParamIx++;  		break;  	#endregion  	#region s - string  	case 's':  		// string  		string t = "{0" + (fieldLength != int.MinValue ? "'" + (flagLeft2Right ? "-" : String.Empty) + fieldLength.ToString () : String.Empty) + ":s}";  		w = o.ToString ();  		if (fieldPrecision >= 0)  			w = w.Substring (0' fieldPrecision);  		if (fieldLength != int.MinValue)  			if (flagLeft2Right)  				w = w.PadRight (fieldLength' paddingCharacter);  			else  				w = w.PadLeft (fieldLength' paddingCharacter);  		defaultParamIx++;  		break;  	#endregion  	#region f - double number  	case 'f':  		// double  		w = FormatNumber ((flagGroupThousands ? "n" : "f")' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region e - exponent number  	case 'e':  		// double / exponent  		w = FormatNumber ("e"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region E - exponent number  	case 'E':  		// double / exponent  		w = FormatNumber ("E"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region g - general number  	case 'g':  		// double / exponent  		w = FormatNumber ("g"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region G - general number  	case 'G':  		// double / exponent  		w = FormatNumber ("G"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region p - pointer  	case 'p':  		// pointer  		if (o is IntPtr)  			#if XBOX || SILVERLIGHT  										w = ( (IntPtr)o ).ToString(); #else  			w = "0x" + ((IntPtr)o).ToString ("x");  		#endif  		defaultParamIx++;  		break;  	#endregion  	#region n - number of processed chars so far  	case 'n':  		// number of characters so far  		w = FormatNumber ("d"' flagAlternate' fieldLength' int.MinValue' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' m.Index);  		break;  	#endregion  	default:  		w = String.Empty;  		defaultParamIx++;  		break;  	}  	// replace format parameter with parameter value  	// and start searching for the next format parameter  	// AFTER the position of the current inserted value  	// to prohibit recursive matches if the value also  	// includes a format specifier  	f.Remove (m.Index' m.Length);  	f.Insert (m.Index' w);  	m = r.Match (f.ToString ()' m.Index + w.Length);  }  
Magic Number,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,sprintf,The following statement contains a magic number: while (m.Success) {  	#region parameter index  	paramIx = defaultParamIx;  	if (m.Groups [1] != null && m.Groups [1].Value.Length > 0) {  		string val = m.Groups [1].Value.Substring (0' m.Groups [1].Value.Length - 1);  		paramIx = Convert.ToInt32 (val) - 1;  	}  	;  	#endregion  	#region format flags  	// extract format flags  	flagAlternate = false;  	flagLeft2Right = false;  	flagPositiveSign = false;  	flagPositiveSpace = false;  	flagZeroPadding = false;  	flagGroupThousands = false;  	if (m.Groups [2] != null && m.Groups [2].Value.Length > 0) {  		string flags = m.Groups [2].Value;  		flagAlternate = (flags.IndexOf ('#') >= 0);  		flagLeft2Right = (flags.IndexOf ('-') >= 0);  		flagPositiveSign = (flags.IndexOf ('+') >= 0);  		flagPositiveSpace = (flags.IndexOf (' ') >= 0);  		flagGroupThousands = (flags.IndexOf ('\'') >= 0);  		// positive + indicator overrides a  		// positive space character  		if (flagPositiveSign && flagPositiveSpace)  			flagPositiveSpace = false;  	}  	#endregion  	#region field length  	// extract field length and   	// pading character  	paddingCharacter = ' ';  	fieldLength = int.MinValue;  	if (m.Groups [3] != null && m.Groups [3].Value.Length > 0) {  		fieldLength = Convert.ToInt32 (m.Groups [3].Value);  		flagZeroPadding = (m.Groups [3].Value [0] == '0');  	}  	#endregion  	if (flagZeroPadding)  		paddingCharacter = '0';  	// left2right allignment overrides zero padding  	if (flagLeft2Right && flagZeroPadding) {  		flagZeroPadding = false;  		paddingCharacter = ' ';  	}  	#region field precision  	// extract field precision  	fieldPrecision = int.MinValue;  	if (m.Groups [4] != null && m.Groups [4].Value.Length > 0)  		fieldPrecision = Convert.ToInt32 (m.Groups [4].Value);  	#endregion  	#region short / long indicator  	// extract short / long indicator  	shortLongIndicator = Char.MinValue;  	if (m.Groups [5] != null && m.Groups [5].Value.Length > 0)  		shortLongIndicator = m.Groups [5].Value [0];  	#endregion  	#region format specifier  	// extract format  	formatSpecifier = Char.MinValue;  	if (m.Groups [6] != null && m.Groups [6].Value.Length > 0)  		formatSpecifier = m.Groups [6].Value [0];  	#endregion  	// default precision is 6 digits if none is specified except  	if (fieldPrecision == int.MinValue && formatSpecifier != 's' && formatSpecifier != 'c' && Char.ToUpper (formatSpecifier) != 'X' && formatSpecifier != 'o')  		fieldPrecision = 6;  	#region get next value parameter  	// get next value parameter and convert value parameter depending on short / long indicator  	if (Parameters == null || paramIx >= Parameters.Length)  		o = null;  	else {  		o = Parameters [paramIx];  		if (shortLongIndicator == 'h') {  			if (o is int)  				o = (short)((int)o);  			else if (o is long)  				o = (short)((long)o);  			else if (o is uint)  				o = (ushort)((uint)o);  			else if (o is ulong)  				o = (ushort)((ulong)o);  		} else if (shortLongIndicator == 'l') {  			if (o is short)  				o = (long)((short)o);  			else if (o is int)  				o = (long)((int)o);  			else if (o is ushort)  				o = (ulong)((ushort)o);  			else if (o is uint)  				o = (ulong)((uint)o);  		}  	}  	#endregion  	// convert value parameters to a string depending on the formatSpecifier  	w = String.Empty;  	switch (formatSpecifier) {  	#region % - character  	case '%':  		// % character  		w = "%";  		break;  	#endregion  	#region d - integer  	case 'd':  		// integer  		w = FormatNumber ((flagGroupThousands ? "n" : "d")' flagAlternate' fieldLength' int.MinValue' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region i - integer  	case 'i':  		// integer  		goto case 'd';  	#endregion  	#region o - octal integer  	case 'o':  		// octal integer - no leading zero  		w = FormatOct ("o"' flagAlternate' fieldLength' int.MinValue' flagLeft2Right' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region x - hex integer  	case 'x':  		// hex integer - no leading zero  		w = FormatHex ("x"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region X - hex integer  	case 'X':  		// same as x but with capital hex characters  		w = FormatHex ("X"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region u - unsigned integer  	case 'u':  		// unsigned integer  		w = FormatNumber ((flagGroupThousands ? "n" : "d")' flagAlternate' fieldLength' int.MinValue' flagLeft2Right' false' false' paddingCharacter' ToUnsigned (o));  		defaultParamIx++;  		break;  	#endregion  	#region c - character  	case 'c':  		// character  		if (IsNumericType (o))  			w = Convert.ToChar (o).ToString ();  		else if (o is char)  			w = ((char)o).ToString ();  		else if (o is string && ((string)o).Length > 0)  			w = ((string)o) [0].ToString ();  		defaultParamIx++;  		break;  	#endregion  	#region s - string  	case 's':  		// string  		string t = "{0" + (fieldLength != int.MinValue ? "'" + (flagLeft2Right ? "-" : String.Empty) + fieldLength.ToString () : String.Empty) + ":s}";  		w = o.ToString ();  		if (fieldPrecision >= 0)  			w = w.Substring (0' fieldPrecision);  		if (fieldLength != int.MinValue)  			if (flagLeft2Right)  				w = w.PadRight (fieldLength' paddingCharacter);  			else  				w = w.PadLeft (fieldLength' paddingCharacter);  		defaultParamIx++;  		break;  	#endregion  	#region f - double number  	case 'f':  		// double  		w = FormatNumber ((flagGroupThousands ? "n" : "f")' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region e - exponent number  	case 'e':  		// double / exponent  		w = FormatNumber ("e"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region E - exponent number  	case 'E':  		// double / exponent  		w = FormatNumber ("E"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region g - general number  	case 'g':  		// double / exponent  		w = FormatNumber ("g"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region G - general number  	case 'G':  		// double / exponent  		w = FormatNumber ("G"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region p - pointer  	case 'p':  		// pointer  		if (o is IntPtr)  			#if XBOX || SILVERLIGHT  										w = ( (IntPtr)o ).ToString(); #else  			w = "0x" + ((IntPtr)o).ToString ("x");  		#endif  		defaultParamIx++;  		break;  	#endregion  	#region n - number of processed chars so far  	case 'n':  		// number of characters so far  		w = FormatNumber ("d"' flagAlternate' fieldLength' int.MinValue' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' m.Index);  		break;  	#endregion  	default:  		w = String.Empty;  		defaultParamIx++;  		break;  	}  	// replace format parameter with parameter value  	// and start searching for the next format parameter  	// AFTER the position of the current inserted value  	// to prohibit recursive matches if the value also  	// includes a format specifier  	f.Remove (m.Index' m.Length);  	f.Insert (m.Index' w);  	m = r.Match (f.ToString ()' m.Index + w.Length);  }  
Magic Number,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,sprintf,The following statement contains a magic number: while (m.Success) {  	#region parameter index  	paramIx = defaultParamIx;  	if (m.Groups [1] != null && m.Groups [1].Value.Length > 0) {  		string val = m.Groups [1].Value.Substring (0' m.Groups [1].Value.Length - 1);  		paramIx = Convert.ToInt32 (val) - 1;  	}  	;  	#endregion  	#region format flags  	// extract format flags  	flagAlternate = false;  	flagLeft2Right = false;  	flagPositiveSign = false;  	flagPositiveSpace = false;  	flagZeroPadding = false;  	flagGroupThousands = false;  	if (m.Groups [2] != null && m.Groups [2].Value.Length > 0) {  		string flags = m.Groups [2].Value;  		flagAlternate = (flags.IndexOf ('#') >= 0);  		flagLeft2Right = (flags.IndexOf ('-') >= 0);  		flagPositiveSign = (flags.IndexOf ('+') >= 0);  		flagPositiveSpace = (flags.IndexOf (' ') >= 0);  		flagGroupThousands = (flags.IndexOf ('\'') >= 0);  		// positive + indicator overrides a  		// positive space character  		if (flagPositiveSign && flagPositiveSpace)  			flagPositiveSpace = false;  	}  	#endregion  	#region field length  	// extract field length and   	// pading character  	paddingCharacter = ' ';  	fieldLength = int.MinValue;  	if (m.Groups [3] != null && m.Groups [3].Value.Length > 0) {  		fieldLength = Convert.ToInt32 (m.Groups [3].Value);  		flagZeroPadding = (m.Groups [3].Value [0] == '0');  	}  	#endregion  	if (flagZeroPadding)  		paddingCharacter = '0';  	// left2right allignment overrides zero padding  	if (flagLeft2Right && flagZeroPadding) {  		flagZeroPadding = false;  		paddingCharacter = ' ';  	}  	#region field precision  	// extract field precision  	fieldPrecision = int.MinValue;  	if (m.Groups [4] != null && m.Groups [4].Value.Length > 0)  		fieldPrecision = Convert.ToInt32 (m.Groups [4].Value);  	#endregion  	#region short / long indicator  	// extract short / long indicator  	shortLongIndicator = Char.MinValue;  	if (m.Groups [5] != null && m.Groups [5].Value.Length > 0)  		shortLongIndicator = m.Groups [5].Value [0];  	#endregion  	#region format specifier  	// extract format  	formatSpecifier = Char.MinValue;  	if (m.Groups [6] != null && m.Groups [6].Value.Length > 0)  		formatSpecifier = m.Groups [6].Value [0];  	#endregion  	// default precision is 6 digits if none is specified except  	if (fieldPrecision == int.MinValue && formatSpecifier != 's' && formatSpecifier != 'c' && Char.ToUpper (formatSpecifier) != 'X' && formatSpecifier != 'o')  		fieldPrecision = 6;  	#region get next value parameter  	// get next value parameter and convert value parameter depending on short / long indicator  	if (Parameters == null || paramIx >= Parameters.Length)  		o = null;  	else {  		o = Parameters [paramIx];  		if (shortLongIndicator == 'h') {  			if (o is int)  				o = (short)((int)o);  			else if (o is long)  				o = (short)((long)o);  			else if (o is uint)  				o = (ushort)((uint)o);  			else if (o is ulong)  				o = (ushort)((ulong)o);  		} else if (shortLongIndicator == 'l') {  			if (o is short)  				o = (long)((short)o);  			else if (o is int)  				o = (long)((int)o);  			else if (o is ushort)  				o = (ulong)((ushort)o);  			else if (o is uint)  				o = (ulong)((uint)o);  		}  	}  	#endregion  	// convert value parameters to a string depending on the formatSpecifier  	w = String.Empty;  	switch (formatSpecifier) {  	#region % - character  	case '%':  		// % character  		w = "%";  		break;  	#endregion  	#region d - integer  	case 'd':  		// integer  		w = FormatNumber ((flagGroupThousands ? "n" : "d")' flagAlternate' fieldLength' int.MinValue' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region i - integer  	case 'i':  		// integer  		goto case 'd';  	#endregion  	#region o - octal integer  	case 'o':  		// octal integer - no leading zero  		w = FormatOct ("o"' flagAlternate' fieldLength' int.MinValue' flagLeft2Right' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region x - hex integer  	case 'x':  		// hex integer - no leading zero  		w = FormatHex ("x"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region X - hex integer  	case 'X':  		// same as x but with capital hex characters  		w = FormatHex ("X"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region u - unsigned integer  	case 'u':  		// unsigned integer  		w = FormatNumber ((flagGroupThousands ? "n" : "d")' flagAlternate' fieldLength' int.MinValue' flagLeft2Right' false' false' paddingCharacter' ToUnsigned (o));  		defaultParamIx++;  		break;  	#endregion  	#region c - character  	case 'c':  		// character  		if (IsNumericType (o))  			w = Convert.ToChar (o).ToString ();  		else if (o is char)  			w = ((char)o).ToString ();  		else if (o is string && ((string)o).Length > 0)  			w = ((string)o) [0].ToString ();  		defaultParamIx++;  		break;  	#endregion  	#region s - string  	case 's':  		// string  		string t = "{0" + (fieldLength != int.MinValue ? "'" + (flagLeft2Right ? "-" : String.Empty) + fieldLength.ToString () : String.Empty) + ":s}";  		w = o.ToString ();  		if (fieldPrecision >= 0)  			w = w.Substring (0' fieldPrecision);  		if (fieldLength != int.MinValue)  			if (flagLeft2Right)  				w = w.PadRight (fieldLength' paddingCharacter);  			else  				w = w.PadLeft (fieldLength' paddingCharacter);  		defaultParamIx++;  		break;  	#endregion  	#region f - double number  	case 'f':  		// double  		w = FormatNumber ((flagGroupThousands ? "n" : "f")' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region e - exponent number  	case 'e':  		// double / exponent  		w = FormatNumber ("e"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region E - exponent number  	case 'E':  		// double / exponent  		w = FormatNumber ("E"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region g - general number  	case 'g':  		// double / exponent  		w = FormatNumber ("g"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region G - general number  	case 'G':  		// double / exponent  		w = FormatNumber ("G"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region p - pointer  	case 'p':  		// pointer  		if (o is IntPtr)  			#if XBOX || SILVERLIGHT  										w = ( (IntPtr)o ).ToString(); #else  			w = "0x" + ((IntPtr)o).ToString ("x");  		#endif  		defaultParamIx++;  		break;  	#endregion  	#region n - number of processed chars so far  	case 'n':  		// number of characters so far  		w = FormatNumber ("d"' flagAlternate' fieldLength' int.MinValue' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' m.Index);  		break;  	#endregion  	default:  		w = String.Empty;  		defaultParamIx++;  		break;  	}  	// replace format parameter with parameter value  	// and start searching for the next format parameter  	// AFTER the position of the current inserted value  	// to prohibit recursive matches if the value also  	// includes a format specifier  	f.Remove (m.Index' m.Length);  	f.Insert (m.Index' w);  	m = r.Match (f.ToString ()' m.Index + w.Length);  }  
Magic Number,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,sprintf,The following statement contains a magic number: while (m.Success) {  	#region parameter index  	paramIx = defaultParamIx;  	if (m.Groups [1] != null && m.Groups [1].Value.Length > 0) {  		string val = m.Groups [1].Value.Substring (0' m.Groups [1].Value.Length - 1);  		paramIx = Convert.ToInt32 (val) - 1;  	}  	;  	#endregion  	#region format flags  	// extract format flags  	flagAlternate = false;  	flagLeft2Right = false;  	flagPositiveSign = false;  	flagPositiveSpace = false;  	flagZeroPadding = false;  	flagGroupThousands = false;  	if (m.Groups [2] != null && m.Groups [2].Value.Length > 0) {  		string flags = m.Groups [2].Value;  		flagAlternate = (flags.IndexOf ('#') >= 0);  		flagLeft2Right = (flags.IndexOf ('-') >= 0);  		flagPositiveSign = (flags.IndexOf ('+') >= 0);  		flagPositiveSpace = (flags.IndexOf (' ') >= 0);  		flagGroupThousands = (flags.IndexOf ('\'') >= 0);  		// positive + indicator overrides a  		// positive space character  		if (flagPositiveSign && flagPositiveSpace)  			flagPositiveSpace = false;  	}  	#endregion  	#region field length  	// extract field length and   	// pading character  	paddingCharacter = ' ';  	fieldLength = int.MinValue;  	if (m.Groups [3] != null && m.Groups [3].Value.Length > 0) {  		fieldLength = Convert.ToInt32 (m.Groups [3].Value);  		flagZeroPadding = (m.Groups [3].Value [0] == '0');  	}  	#endregion  	if (flagZeroPadding)  		paddingCharacter = '0';  	// left2right allignment overrides zero padding  	if (flagLeft2Right && flagZeroPadding) {  		flagZeroPadding = false;  		paddingCharacter = ' ';  	}  	#region field precision  	// extract field precision  	fieldPrecision = int.MinValue;  	if (m.Groups [4] != null && m.Groups [4].Value.Length > 0)  		fieldPrecision = Convert.ToInt32 (m.Groups [4].Value);  	#endregion  	#region short / long indicator  	// extract short / long indicator  	shortLongIndicator = Char.MinValue;  	if (m.Groups [5] != null && m.Groups [5].Value.Length > 0)  		shortLongIndicator = m.Groups [5].Value [0];  	#endregion  	#region format specifier  	// extract format  	formatSpecifier = Char.MinValue;  	if (m.Groups [6] != null && m.Groups [6].Value.Length > 0)  		formatSpecifier = m.Groups [6].Value [0];  	#endregion  	// default precision is 6 digits if none is specified except  	if (fieldPrecision == int.MinValue && formatSpecifier != 's' && formatSpecifier != 'c' && Char.ToUpper (formatSpecifier) != 'X' && formatSpecifier != 'o')  		fieldPrecision = 6;  	#region get next value parameter  	// get next value parameter and convert value parameter depending on short / long indicator  	if (Parameters == null || paramIx >= Parameters.Length)  		o = null;  	else {  		o = Parameters [paramIx];  		if (shortLongIndicator == 'h') {  			if (o is int)  				o = (short)((int)o);  			else if (o is long)  				o = (short)((long)o);  			else if (o is uint)  				o = (ushort)((uint)o);  			else if (o is ulong)  				o = (ushort)((ulong)o);  		} else if (shortLongIndicator == 'l') {  			if (o is short)  				o = (long)((short)o);  			else if (o is int)  				o = (long)((int)o);  			else if (o is ushort)  				o = (ulong)((ushort)o);  			else if (o is uint)  				o = (ulong)((uint)o);  		}  	}  	#endregion  	// convert value parameters to a string depending on the formatSpecifier  	w = String.Empty;  	switch (formatSpecifier) {  	#region % - character  	case '%':  		// % character  		w = "%";  		break;  	#endregion  	#region d - integer  	case 'd':  		// integer  		w = FormatNumber ((flagGroupThousands ? "n" : "d")' flagAlternate' fieldLength' int.MinValue' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region i - integer  	case 'i':  		// integer  		goto case 'd';  	#endregion  	#region o - octal integer  	case 'o':  		// octal integer - no leading zero  		w = FormatOct ("o"' flagAlternate' fieldLength' int.MinValue' flagLeft2Right' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region x - hex integer  	case 'x':  		// hex integer - no leading zero  		w = FormatHex ("x"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region X - hex integer  	case 'X':  		// same as x but with capital hex characters  		w = FormatHex ("X"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region u - unsigned integer  	case 'u':  		// unsigned integer  		w = FormatNumber ((flagGroupThousands ? "n" : "d")' flagAlternate' fieldLength' int.MinValue' flagLeft2Right' false' false' paddingCharacter' ToUnsigned (o));  		defaultParamIx++;  		break;  	#endregion  	#region c - character  	case 'c':  		// character  		if (IsNumericType (o))  			w = Convert.ToChar (o).ToString ();  		else if (o is char)  			w = ((char)o).ToString ();  		else if (o is string && ((string)o).Length > 0)  			w = ((string)o) [0].ToString ();  		defaultParamIx++;  		break;  	#endregion  	#region s - string  	case 's':  		// string  		string t = "{0" + (fieldLength != int.MinValue ? "'" + (flagLeft2Right ? "-" : String.Empty) + fieldLength.ToString () : String.Empty) + ":s}";  		w = o.ToString ();  		if (fieldPrecision >= 0)  			w = w.Substring (0' fieldPrecision);  		if (fieldLength != int.MinValue)  			if (flagLeft2Right)  				w = w.PadRight (fieldLength' paddingCharacter);  			else  				w = w.PadLeft (fieldLength' paddingCharacter);  		defaultParamIx++;  		break;  	#endregion  	#region f - double number  	case 'f':  		// double  		w = FormatNumber ((flagGroupThousands ? "n" : "f")' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region e - exponent number  	case 'e':  		// double / exponent  		w = FormatNumber ("e"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region E - exponent number  	case 'E':  		// double / exponent  		w = FormatNumber ("E"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region g - general number  	case 'g':  		// double / exponent  		w = FormatNumber ("g"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region G - general number  	case 'G':  		// double / exponent  		w = FormatNumber ("G"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region p - pointer  	case 'p':  		// pointer  		if (o is IntPtr)  			#if XBOX || SILVERLIGHT  										w = ( (IntPtr)o ).ToString(); #else  			w = "0x" + ((IntPtr)o).ToString ("x");  		#endif  		defaultParamIx++;  		break;  	#endregion  	#region n - number of processed chars so far  	case 'n':  		// number of characters so far  		w = FormatNumber ("d"' flagAlternate' fieldLength' int.MinValue' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' m.Index);  		break;  	#endregion  	default:  		w = String.Empty;  		defaultParamIx++;  		break;  	}  	// replace format parameter with parameter value  	// and start searching for the next format parameter  	// AFTER the position of the current inserted value  	// to prohibit recursive matches if the value also  	// includes a format specifier  	f.Remove (m.Index' m.Length);  	f.Insert (m.Index' w);  	m = r.Match (f.ToString ()' m.Index + w.Length);  }  
Magic Number,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,sprintf,The following statement contains a magic number: while (m.Success) {  	#region parameter index  	paramIx = defaultParamIx;  	if (m.Groups [1] != null && m.Groups [1].Value.Length > 0) {  		string val = m.Groups [1].Value.Substring (0' m.Groups [1].Value.Length - 1);  		paramIx = Convert.ToInt32 (val) - 1;  	}  	;  	#endregion  	#region format flags  	// extract format flags  	flagAlternate = false;  	flagLeft2Right = false;  	flagPositiveSign = false;  	flagPositiveSpace = false;  	flagZeroPadding = false;  	flagGroupThousands = false;  	if (m.Groups [2] != null && m.Groups [2].Value.Length > 0) {  		string flags = m.Groups [2].Value;  		flagAlternate = (flags.IndexOf ('#') >= 0);  		flagLeft2Right = (flags.IndexOf ('-') >= 0);  		flagPositiveSign = (flags.IndexOf ('+') >= 0);  		flagPositiveSpace = (flags.IndexOf (' ') >= 0);  		flagGroupThousands = (flags.IndexOf ('\'') >= 0);  		// positive + indicator overrides a  		// positive space character  		if (flagPositiveSign && flagPositiveSpace)  			flagPositiveSpace = false;  	}  	#endregion  	#region field length  	// extract field length and   	// pading character  	paddingCharacter = ' ';  	fieldLength = int.MinValue;  	if (m.Groups [3] != null && m.Groups [3].Value.Length > 0) {  		fieldLength = Convert.ToInt32 (m.Groups [3].Value);  		flagZeroPadding = (m.Groups [3].Value [0] == '0');  	}  	#endregion  	if (flagZeroPadding)  		paddingCharacter = '0';  	// left2right allignment overrides zero padding  	if (flagLeft2Right && flagZeroPadding) {  		flagZeroPadding = false;  		paddingCharacter = ' ';  	}  	#region field precision  	// extract field precision  	fieldPrecision = int.MinValue;  	if (m.Groups [4] != null && m.Groups [4].Value.Length > 0)  		fieldPrecision = Convert.ToInt32 (m.Groups [4].Value);  	#endregion  	#region short / long indicator  	// extract short / long indicator  	shortLongIndicator = Char.MinValue;  	if (m.Groups [5] != null && m.Groups [5].Value.Length > 0)  		shortLongIndicator = m.Groups [5].Value [0];  	#endregion  	#region format specifier  	// extract format  	formatSpecifier = Char.MinValue;  	if (m.Groups [6] != null && m.Groups [6].Value.Length > 0)  		formatSpecifier = m.Groups [6].Value [0];  	#endregion  	// default precision is 6 digits if none is specified except  	if (fieldPrecision == int.MinValue && formatSpecifier != 's' && formatSpecifier != 'c' && Char.ToUpper (formatSpecifier) != 'X' && formatSpecifier != 'o')  		fieldPrecision = 6;  	#region get next value parameter  	// get next value parameter and convert value parameter depending on short / long indicator  	if (Parameters == null || paramIx >= Parameters.Length)  		o = null;  	else {  		o = Parameters [paramIx];  		if (shortLongIndicator == 'h') {  			if (o is int)  				o = (short)((int)o);  			else if (o is long)  				o = (short)((long)o);  			else if (o is uint)  				o = (ushort)((uint)o);  			else if (o is ulong)  				o = (ushort)((ulong)o);  		} else if (shortLongIndicator == 'l') {  			if (o is short)  				o = (long)((short)o);  			else if (o is int)  				o = (long)((int)o);  			else if (o is ushort)  				o = (ulong)((ushort)o);  			else if (o is uint)  				o = (ulong)((uint)o);  		}  	}  	#endregion  	// convert value parameters to a string depending on the formatSpecifier  	w = String.Empty;  	switch (formatSpecifier) {  	#region % - character  	case '%':  		// % character  		w = "%";  		break;  	#endregion  	#region d - integer  	case 'd':  		// integer  		w = FormatNumber ((flagGroupThousands ? "n" : "d")' flagAlternate' fieldLength' int.MinValue' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region i - integer  	case 'i':  		// integer  		goto case 'd';  	#endregion  	#region o - octal integer  	case 'o':  		// octal integer - no leading zero  		w = FormatOct ("o"' flagAlternate' fieldLength' int.MinValue' flagLeft2Right' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region x - hex integer  	case 'x':  		// hex integer - no leading zero  		w = FormatHex ("x"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region X - hex integer  	case 'X':  		// same as x but with capital hex characters  		w = FormatHex ("X"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region u - unsigned integer  	case 'u':  		// unsigned integer  		w = FormatNumber ((flagGroupThousands ? "n" : "d")' flagAlternate' fieldLength' int.MinValue' flagLeft2Right' false' false' paddingCharacter' ToUnsigned (o));  		defaultParamIx++;  		break;  	#endregion  	#region c - character  	case 'c':  		// character  		if (IsNumericType (o))  			w = Convert.ToChar (o).ToString ();  		else if (o is char)  			w = ((char)o).ToString ();  		else if (o is string && ((string)o).Length > 0)  			w = ((string)o) [0].ToString ();  		defaultParamIx++;  		break;  	#endregion  	#region s - string  	case 's':  		// string  		string t = "{0" + (fieldLength != int.MinValue ? "'" + (flagLeft2Right ? "-" : String.Empty) + fieldLength.ToString () : String.Empty) + ":s}";  		w = o.ToString ();  		if (fieldPrecision >= 0)  			w = w.Substring (0' fieldPrecision);  		if (fieldLength != int.MinValue)  			if (flagLeft2Right)  				w = w.PadRight (fieldLength' paddingCharacter);  			else  				w = w.PadLeft (fieldLength' paddingCharacter);  		defaultParamIx++;  		break;  	#endregion  	#region f - double number  	case 'f':  		// double  		w = FormatNumber ((flagGroupThousands ? "n" : "f")' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region e - exponent number  	case 'e':  		// double / exponent  		w = FormatNumber ("e"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region E - exponent number  	case 'E':  		// double / exponent  		w = FormatNumber ("E"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region g - general number  	case 'g':  		// double / exponent  		w = FormatNumber ("g"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region G - general number  	case 'G':  		// double / exponent  		w = FormatNumber ("G"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region p - pointer  	case 'p':  		// pointer  		if (o is IntPtr)  			#if XBOX || SILVERLIGHT  										w = ( (IntPtr)o ).ToString(); #else  			w = "0x" + ((IntPtr)o).ToString ("x");  		#endif  		defaultParamIx++;  		break;  	#endregion  	#region n - number of processed chars so far  	case 'n':  		// number of characters so far  		w = FormatNumber ("d"' flagAlternate' fieldLength' int.MinValue' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' m.Index);  		break;  	#endregion  	default:  		w = String.Empty;  		defaultParamIx++;  		break;  	}  	// replace format parameter with parameter value  	// and start searching for the next format parameter  	// AFTER the position of the current inserted value  	// to prohibit recursive matches if the value also  	// includes a format specifier  	f.Remove (m.Index' m.Length);  	f.Insert (m.Index' w);  	m = r.Match (f.ToString ()' m.Index + w.Length);  }  
Magic Number,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,sprintf,The following statement contains a magic number: while (m.Success) {  	#region parameter index  	paramIx = defaultParamIx;  	if (m.Groups [1] != null && m.Groups [1].Value.Length > 0) {  		string val = m.Groups [1].Value.Substring (0' m.Groups [1].Value.Length - 1);  		paramIx = Convert.ToInt32 (val) - 1;  	}  	;  	#endregion  	#region format flags  	// extract format flags  	flagAlternate = false;  	flagLeft2Right = false;  	flagPositiveSign = false;  	flagPositiveSpace = false;  	flagZeroPadding = false;  	flagGroupThousands = false;  	if (m.Groups [2] != null && m.Groups [2].Value.Length > 0) {  		string flags = m.Groups [2].Value;  		flagAlternate = (flags.IndexOf ('#') >= 0);  		flagLeft2Right = (flags.IndexOf ('-') >= 0);  		flagPositiveSign = (flags.IndexOf ('+') >= 0);  		flagPositiveSpace = (flags.IndexOf (' ') >= 0);  		flagGroupThousands = (flags.IndexOf ('\'') >= 0);  		// positive + indicator overrides a  		// positive space character  		if (flagPositiveSign && flagPositiveSpace)  			flagPositiveSpace = false;  	}  	#endregion  	#region field length  	// extract field length and   	// pading character  	paddingCharacter = ' ';  	fieldLength = int.MinValue;  	if (m.Groups [3] != null && m.Groups [3].Value.Length > 0) {  		fieldLength = Convert.ToInt32 (m.Groups [3].Value);  		flagZeroPadding = (m.Groups [3].Value [0] == '0');  	}  	#endregion  	if (flagZeroPadding)  		paddingCharacter = '0';  	// left2right allignment overrides zero padding  	if (flagLeft2Right && flagZeroPadding) {  		flagZeroPadding = false;  		paddingCharacter = ' ';  	}  	#region field precision  	// extract field precision  	fieldPrecision = int.MinValue;  	if (m.Groups [4] != null && m.Groups [4].Value.Length > 0)  		fieldPrecision = Convert.ToInt32 (m.Groups [4].Value);  	#endregion  	#region short / long indicator  	// extract short / long indicator  	shortLongIndicator = Char.MinValue;  	if (m.Groups [5] != null && m.Groups [5].Value.Length > 0)  		shortLongIndicator = m.Groups [5].Value [0];  	#endregion  	#region format specifier  	// extract format  	formatSpecifier = Char.MinValue;  	if (m.Groups [6] != null && m.Groups [6].Value.Length > 0)  		formatSpecifier = m.Groups [6].Value [0];  	#endregion  	// default precision is 6 digits if none is specified except  	if (fieldPrecision == int.MinValue && formatSpecifier != 's' && formatSpecifier != 'c' && Char.ToUpper (formatSpecifier) != 'X' && formatSpecifier != 'o')  		fieldPrecision = 6;  	#region get next value parameter  	// get next value parameter and convert value parameter depending on short / long indicator  	if (Parameters == null || paramIx >= Parameters.Length)  		o = null;  	else {  		o = Parameters [paramIx];  		if (shortLongIndicator == 'h') {  			if (o is int)  				o = (short)((int)o);  			else if (o is long)  				o = (short)((long)o);  			else if (o is uint)  				o = (ushort)((uint)o);  			else if (o is ulong)  				o = (ushort)((ulong)o);  		} else if (shortLongIndicator == 'l') {  			if (o is short)  				o = (long)((short)o);  			else if (o is int)  				o = (long)((int)o);  			else if (o is ushort)  				o = (ulong)((ushort)o);  			else if (o is uint)  				o = (ulong)((uint)o);  		}  	}  	#endregion  	// convert value parameters to a string depending on the formatSpecifier  	w = String.Empty;  	switch (formatSpecifier) {  	#region % - character  	case '%':  		// % character  		w = "%";  		break;  	#endregion  	#region d - integer  	case 'd':  		// integer  		w = FormatNumber ((flagGroupThousands ? "n" : "d")' flagAlternate' fieldLength' int.MinValue' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region i - integer  	case 'i':  		// integer  		goto case 'd';  	#endregion  	#region o - octal integer  	case 'o':  		// octal integer - no leading zero  		w = FormatOct ("o"' flagAlternate' fieldLength' int.MinValue' flagLeft2Right' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region x - hex integer  	case 'x':  		// hex integer - no leading zero  		w = FormatHex ("x"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region X - hex integer  	case 'X':  		// same as x but with capital hex characters  		w = FormatHex ("X"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region u - unsigned integer  	case 'u':  		// unsigned integer  		w = FormatNumber ((flagGroupThousands ? "n" : "d")' flagAlternate' fieldLength' int.MinValue' flagLeft2Right' false' false' paddingCharacter' ToUnsigned (o));  		defaultParamIx++;  		break;  	#endregion  	#region c - character  	case 'c':  		// character  		if (IsNumericType (o))  			w = Convert.ToChar (o).ToString ();  		else if (o is char)  			w = ((char)o).ToString ();  		else if (o is string && ((string)o).Length > 0)  			w = ((string)o) [0].ToString ();  		defaultParamIx++;  		break;  	#endregion  	#region s - string  	case 's':  		// string  		string t = "{0" + (fieldLength != int.MinValue ? "'" + (flagLeft2Right ? "-" : String.Empty) + fieldLength.ToString () : String.Empty) + ":s}";  		w = o.ToString ();  		if (fieldPrecision >= 0)  			w = w.Substring (0' fieldPrecision);  		if (fieldLength != int.MinValue)  			if (flagLeft2Right)  				w = w.PadRight (fieldLength' paddingCharacter);  			else  				w = w.PadLeft (fieldLength' paddingCharacter);  		defaultParamIx++;  		break;  	#endregion  	#region f - double number  	case 'f':  		// double  		w = FormatNumber ((flagGroupThousands ? "n" : "f")' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region e - exponent number  	case 'e':  		// double / exponent  		w = FormatNumber ("e"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region E - exponent number  	case 'E':  		// double / exponent  		w = FormatNumber ("E"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region g - general number  	case 'g':  		// double / exponent  		w = FormatNumber ("g"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region G - general number  	case 'G':  		// double / exponent  		w = FormatNumber ("G"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region p - pointer  	case 'p':  		// pointer  		if (o is IntPtr)  			#if XBOX || SILVERLIGHT  										w = ( (IntPtr)o ).ToString(); #else  			w = "0x" + ((IntPtr)o).ToString ("x");  		#endif  		defaultParamIx++;  		break;  	#endregion  	#region n - number of processed chars so far  	case 'n':  		// number of characters so far  		w = FormatNumber ("d"' flagAlternate' fieldLength' int.MinValue' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' m.Index);  		break;  	#endregion  	default:  		w = String.Empty;  		defaultParamIx++;  		break;  	}  	// replace format parameter with parameter value  	// and start searching for the next format parameter  	// AFTER the position of the current inserted value  	// to prohibit recursive matches if the value also  	// includes a format specifier  	f.Remove (m.Index' m.Length);  	f.Insert (m.Index' w);  	m = r.Match (f.ToString ()' m.Index + w.Length);  }  
Magic Number,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,sprintf,The following statement contains a magic number: while (m.Success) {  	#region parameter index  	paramIx = defaultParamIx;  	if (m.Groups [1] != null && m.Groups [1].Value.Length > 0) {  		string val = m.Groups [1].Value.Substring (0' m.Groups [1].Value.Length - 1);  		paramIx = Convert.ToInt32 (val) - 1;  	}  	;  	#endregion  	#region format flags  	// extract format flags  	flagAlternate = false;  	flagLeft2Right = false;  	flagPositiveSign = false;  	flagPositiveSpace = false;  	flagZeroPadding = false;  	flagGroupThousands = false;  	if (m.Groups [2] != null && m.Groups [2].Value.Length > 0) {  		string flags = m.Groups [2].Value;  		flagAlternate = (flags.IndexOf ('#') >= 0);  		flagLeft2Right = (flags.IndexOf ('-') >= 0);  		flagPositiveSign = (flags.IndexOf ('+') >= 0);  		flagPositiveSpace = (flags.IndexOf (' ') >= 0);  		flagGroupThousands = (flags.IndexOf ('\'') >= 0);  		// positive + indicator overrides a  		// positive space character  		if (flagPositiveSign && flagPositiveSpace)  			flagPositiveSpace = false;  	}  	#endregion  	#region field length  	// extract field length and   	// pading character  	paddingCharacter = ' ';  	fieldLength = int.MinValue;  	if (m.Groups [3] != null && m.Groups [3].Value.Length > 0) {  		fieldLength = Convert.ToInt32 (m.Groups [3].Value);  		flagZeroPadding = (m.Groups [3].Value [0] == '0');  	}  	#endregion  	if (flagZeroPadding)  		paddingCharacter = '0';  	// left2right allignment overrides zero padding  	if (flagLeft2Right && flagZeroPadding) {  		flagZeroPadding = false;  		paddingCharacter = ' ';  	}  	#region field precision  	// extract field precision  	fieldPrecision = int.MinValue;  	if (m.Groups [4] != null && m.Groups [4].Value.Length > 0)  		fieldPrecision = Convert.ToInt32 (m.Groups [4].Value);  	#endregion  	#region short / long indicator  	// extract short / long indicator  	shortLongIndicator = Char.MinValue;  	if (m.Groups [5] != null && m.Groups [5].Value.Length > 0)  		shortLongIndicator = m.Groups [5].Value [0];  	#endregion  	#region format specifier  	// extract format  	formatSpecifier = Char.MinValue;  	if (m.Groups [6] != null && m.Groups [6].Value.Length > 0)  		formatSpecifier = m.Groups [6].Value [0];  	#endregion  	// default precision is 6 digits if none is specified except  	if (fieldPrecision == int.MinValue && formatSpecifier != 's' && formatSpecifier != 'c' && Char.ToUpper (formatSpecifier) != 'X' && formatSpecifier != 'o')  		fieldPrecision = 6;  	#region get next value parameter  	// get next value parameter and convert value parameter depending on short / long indicator  	if (Parameters == null || paramIx >= Parameters.Length)  		o = null;  	else {  		o = Parameters [paramIx];  		if (shortLongIndicator == 'h') {  			if (o is int)  				o = (short)((int)o);  			else if (o is long)  				o = (short)((long)o);  			else if (o is uint)  				o = (ushort)((uint)o);  			else if (o is ulong)  				o = (ushort)((ulong)o);  		} else if (shortLongIndicator == 'l') {  			if (o is short)  				o = (long)((short)o);  			else if (o is int)  				o = (long)((int)o);  			else if (o is ushort)  				o = (ulong)((ushort)o);  			else if (o is uint)  				o = (ulong)((uint)o);  		}  	}  	#endregion  	// convert value parameters to a string depending on the formatSpecifier  	w = String.Empty;  	switch (formatSpecifier) {  	#region % - character  	case '%':  		// % character  		w = "%";  		break;  	#endregion  	#region d - integer  	case 'd':  		// integer  		w = FormatNumber ((flagGroupThousands ? "n" : "d")' flagAlternate' fieldLength' int.MinValue' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region i - integer  	case 'i':  		// integer  		goto case 'd';  	#endregion  	#region o - octal integer  	case 'o':  		// octal integer - no leading zero  		w = FormatOct ("o"' flagAlternate' fieldLength' int.MinValue' flagLeft2Right' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region x - hex integer  	case 'x':  		// hex integer - no leading zero  		w = FormatHex ("x"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region X - hex integer  	case 'X':  		// same as x but with capital hex characters  		w = FormatHex ("X"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region u - unsigned integer  	case 'u':  		// unsigned integer  		w = FormatNumber ((flagGroupThousands ? "n" : "d")' flagAlternate' fieldLength' int.MinValue' flagLeft2Right' false' false' paddingCharacter' ToUnsigned (o));  		defaultParamIx++;  		break;  	#endregion  	#region c - character  	case 'c':  		// character  		if (IsNumericType (o))  			w = Convert.ToChar (o).ToString ();  		else if (o is char)  			w = ((char)o).ToString ();  		else if (o is string && ((string)o).Length > 0)  			w = ((string)o) [0].ToString ();  		defaultParamIx++;  		break;  	#endregion  	#region s - string  	case 's':  		// string  		string t = "{0" + (fieldLength != int.MinValue ? "'" + (flagLeft2Right ? "-" : String.Empty) + fieldLength.ToString () : String.Empty) + ":s}";  		w = o.ToString ();  		if (fieldPrecision >= 0)  			w = w.Substring (0' fieldPrecision);  		if (fieldLength != int.MinValue)  			if (flagLeft2Right)  				w = w.PadRight (fieldLength' paddingCharacter);  			else  				w = w.PadLeft (fieldLength' paddingCharacter);  		defaultParamIx++;  		break;  	#endregion  	#region f - double number  	case 'f':  		// double  		w = FormatNumber ((flagGroupThousands ? "n" : "f")' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region e - exponent number  	case 'e':  		// double / exponent  		w = FormatNumber ("e"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region E - exponent number  	case 'E':  		// double / exponent  		w = FormatNumber ("E"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region g - general number  	case 'g':  		// double / exponent  		w = FormatNumber ("g"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region G - general number  	case 'G':  		// double / exponent  		w = FormatNumber ("G"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region p - pointer  	case 'p':  		// pointer  		if (o is IntPtr)  			#if XBOX || SILVERLIGHT  										w = ( (IntPtr)o ).ToString(); #else  			w = "0x" + ((IntPtr)o).ToString ("x");  		#endif  		defaultParamIx++;  		break;  	#endregion  	#region n - number of processed chars so far  	case 'n':  		// number of characters so far  		w = FormatNumber ("d"' flagAlternate' fieldLength' int.MinValue' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' m.Index);  		break;  	#endregion  	default:  		w = String.Empty;  		defaultParamIx++;  		break;  	}  	// replace format parameter with parameter value  	// and start searching for the next format parameter  	// AFTER the position of the current inserted value  	// to prohibit recursive matches if the value also  	// includes a format specifier  	f.Remove (m.Index' m.Length);  	f.Insert (m.Index' w);  	m = r.Match (f.ToString ()' m.Index + w.Length);  }  
Magic Number,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,sprintf,The following statement contains a magic number: while (m.Success) {  	#region parameter index  	paramIx = defaultParamIx;  	if (m.Groups [1] != null && m.Groups [1].Value.Length > 0) {  		string val = m.Groups [1].Value.Substring (0' m.Groups [1].Value.Length - 1);  		paramIx = Convert.ToInt32 (val) - 1;  	}  	;  	#endregion  	#region format flags  	// extract format flags  	flagAlternate = false;  	flagLeft2Right = false;  	flagPositiveSign = false;  	flagPositiveSpace = false;  	flagZeroPadding = false;  	flagGroupThousands = false;  	if (m.Groups [2] != null && m.Groups [2].Value.Length > 0) {  		string flags = m.Groups [2].Value;  		flagAlternate = (flags.IndexOf ('#') >= 0);  		flagLeft2Right = (flags.IndexOf ('-') >= 0);  		flagPositiveSign = (flags.IndexOf ('+') >= 0);  		flagPositiveSpace = (flags.IndexOf (' ') >= 0);  		flagGroupThousands = (flags.IndexOf ('\'') >= 0);  		// positive + indicator overrides a  		// positive space character  		if (flagPositiveSign && flagPositiveSpace)  			flagPositiveSpace = false;  	}  	#endregion  	#region field length  	// extract field length and   	// pading character  	paddingCharacter = ' ';  	fieldLength = int.MinValue;  	if (m.Groups [3] != null && m.Groups [3].Value.Length > 0) {  		fieldLength = Convert.ToInt32 (m.Groups [3].Value);  		flagZeroPadding = (m.Groups [3].Value [0] == '0');  	}  	#endregion  	if (flagZeroPadding)  		paddingCharacter = '0';  	// left2right allignment overrides zero padding  	if (flagLeft2Right && flagZeroPadding) {  		flagZeroPadding = false;  		paddingCharacter = ' ';  	}  	#region field precision  	// extract field precision  	fieldPrecision = int.MinValue;  	if (m.Groups [4] != null && m.Groups [4].Value.Length > 0)  		fieldPrecision = Convert.ToInt32 (m.Groups [4].Value);  	#endregion  	#region short / long indicator  	// extract short / long indicator  	shortLongIndicator = Char.MinValue;  	if (m.Groups [5] != null && m.Groups [5].Value.Length > 0)  		shortLongIndicator = m.Groups [5].Value [0];  	#endregion  	#region format specifier  	// extract format  	formatSpecifier = Char.MinValue;  	if (m.Groups [6] != null && m.Groups [6].Value.Length > 0)  		formatSpecifier = m.Groups [6].Value [0];  	#endregion  	// default precision is 6 digits if none is specified except  	if (fieldPrecision == int.MinValue && formatSpecifier != 's' && formatSpecifier != 'c' && Char.ToUpper (formatSpecifier) != 'X' && formatSpecifier != 'o')  		fieldPrecision = 6;  	#region get next value parameter  	// get next value parameter and convert value parameter depending on short / long indicator  	if (Parameters == null || paramIx >= Parameters.Length)  		o = null;  	else {  		o = Parameters [paramIx];  		if (shortLongIndicator == 'h') {  			if (o is int)  				o = (short)((int)o);  			else if (o is long)  				o = (short)((long)o);  			else if (o is uint)  				o = (ushort)((uint)o);  			else if (o is ulong)  				o = (ushort)((ulong)o);  		} else if (shortLongIndicator == 'l') {  			if (o is short)  				o = (long)((short)o);  			else if (o is int)  				o = (long)((int)o);  			else if (o is ushort)  				o = (ulong)((ushort)o);  			else if (o is uint)  				o = (ulong)((uint)o);  		}  	}  	#endregion  	// convert value parameters to a string depending on the formatSpecifier  	w = String.Empty;  	switch (formatSpecifier) {  	#region % - character  	case '%':  		// % character  		w = "%";  		break;  	#endregion  	#region d - integer  	case 'd':  		// integer  		w = FormatNumber ((flagGroupThousands ? "n" : "d")' flagAlternate' fieldLength' int.MinValue' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region i - integer  	case 'i':  		// integer  		goto case 'd';  	#endregion  	#region o - octal integer  	case 'o':  		// octal integer - no leading zero  		w = FormatOct ("o"' flagAlternate' fieldLength' int.MinValue' flagLeft2Right' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region x - hex integer  	case 'x':  		// hex integer - no leading zero  		w = FormatHex ("x"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region X - hex integer  	case 'X':  		// same as x but with capital hex characters  		w = FormatHex ("X"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region u - unsigned integer  	case 'u':  		// unsigned integer  		w = FormatNumber ((flagGroupThousands ? "n" : "d")' flagAlternate' fieldLength' int.MinValue' flagLeft2Right' false' false' paddingCharacter' ToUnsigned (o));  		defaultParamIx++;  		break;  	#endregion  	#region c - character  	case 'c':  		// character  		if (IsNumericType (o))  			w = Convert.ToChar (o).ToString ();  		else if (o is char)  			w = ((char)o).ToString ();  		else if (o is string && ((string)o).Length > 0)  			w = ((string)o) [0].ToString ();  		defaultParamIx++;  		break;  	#endregion  	#region s - string  	case 's':  		// string  		string t = "{0" + (fieldLength != int.MinValue ? "'" + (flagLeft2Right ? "-" : String.Empty) + fieldLength.ToString () : String.Empty) + ":s}";  		w = o.ToString ();  		if (fieldPrecision >= 0)  			w = w.Substring (0' fieldPrecision);  		if (fieldLength != int.MinValue)  			if (flagLeft2Right)  				w = w.PadRight (fieldLength' paddingCharacter);  			else  				w = w.PadLeft (fieldLength' paddingCharacter);  		defaultParamIx++;  		break;  	#endregion  	#region f - double number  	case 'f':  		// double  		w = FormatNumber ((flagGroupThousands ? "n" : "f")' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region e - exponent number  	case 'e':  		// double / exponent  		w = FormatNumber ("e"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region E - exponent number  	case 'E':  		// double / exponent  		w = FormatNumber ("E"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region g - general number  	case 'g':  		// double / exponent  		w = FormatNumber ("g"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region G - general number  	case 'G':  		// double / exponent  		w = FormatNumber ("G"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region p - pointer  	case 'p':  		// pointer  		if (o is IntPtr)  			#if XBOX || SILVERLIGHT  										w = ( (IntPtr)o ).ToString(); #else  			w = "0x" + ((IntPtr)o).ToString ("x");  		#endif  		defaultParamIx++;  		break;  	#endregion  	#region n - number of processed chars so far  	case 'n':  		// number of characters so far  		w = FormatNumber ("d"' flagAlternate' fieldLength' int.MinValue' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' m.Index);  		break;  	#endregion  	default:  		w = String.Empty;  		defaultParamIx++;  		break;  	}  	// replace format parameter with parameter value  	// and start searching for the next format parameter  	// AFTER the position of the current inserted value  	// to prohibit recursive matches if the value also  	// includes a format specifier  	f.Remove (m.Index' m.Length);  	f.Insert (m.Index' w);  	m = r.Match (f.ToString ()' m.Index + w.Length);  }  
Magic Number,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,sprintf,The following statement contains a magic number: while (m.Success) {  	#region parameter index  	paramIx = defaultParamIx;  	if (m.Groups [1] != null && m.Groups [1].Value.Length > 0) {  		string val = m.Groups [1].Value.Substring (0' m.Groups [1].Value.Length - 1);  		paramIx = Convert.ToInt32 (val) - 1;  	}  	;  	#endregion  	#region format flags  	// extract format flags  	flagAlternate = false;  	flagLeft2Right = false;  	flagPositiveSign = false;  	flagPositiveSpace = false;  	flagZeroPadding = false;  	flagGroupThousands = false;  	if (m.Groups [2] != null && m.Groups [2].Value.Length > 0) {  		string flags = m.Groups [2].Value;  		flagAlternate = (flags.IndexOf ('#') >= 0);  		flagLeft2Right = (flags.IndexOf ('-') >= 0);  		flagPositiveSign = (flags.IndexOf ('+') >= 0);  		flagPositiveSpace = (flags.IndexOf (' ') >= 0);  		flagGroupThousands = (flags.IndexOf ('\'') >= 0);  		// positive + indicator overrides a  		// positive space character  		if (flagPositiveSign && flagPositiveSpace)  			flagPositiveSpace = false;  	}  	#endregion  	#region field length  	// extract field length and   	// pading character  	paddingCharacter = ' ';  	fieldLength = int.MinValue;  	if (m.Groups [3] != null && m.Groups [3].Value.Length > 0) {  		fieldLength = Convert.ToInt32 (m.Groups [3].Value);  		flagZeroPadding = (m.Groups [3].Value [0] == '0');  	}  	#endregion  	if (flagZeroPadding)  		paddingCharacter = '0';  	// left2right allignment overrides zero padding  	if (flagLeft2Right && flagZeroPadding) {  		flagZeroPadding = false;  		paddingCharacter = ' ';  	}  	#region field precision  	// extract field precision  	fieldPrecision = int.MinValue;  	if (m.Groups [4] != null && m.Groups [4].Value.Length > 0)  		fieldPrecision = Convert.ToInt32 (m.Groups [4].Value);  	#endregion  	#region short / long indicator  	// extract short / long indicator  	shortLongIndicator = Char.MinValue;  	if (m.Groups [5] != null && m.Groups [5].Value.Length > 0)  		shortLongIndicator = m.Groups [5].Value [0];  	#endregion  	#region format specifier  	// extract format  	formatSpecifier = Char.MinValue;  	if (m.Groups [6] != null && m.Groups [6].Value.Length > 0)  		formatSpecifier = m.Groups [6].Value [0];  	#endregion  	// default precision is 6 digits if none is specified except  	if (fieldPrecision == int.MinValue && formatSpecifier != 's' && formatSpecifier != 'c' && Char.ToUpper (formatSpecifier) != 'X' && formatSpecifier != 'o')  		fieldPrecision = 6;  	#region get next value parameter  	// get next value parameter and convert value parameter depending on short / long indicator  	if (Parameters == null || paramIx >= Parameters.Length)  		o = null;  	else {  		o = Parameters [paramIx];  		if (shortLongIndicator == 'h') {  			if (o is int)  				o = (short)((int)o);  			else if (o is long)  				o = (short)((long)o);  			else if (o is uint)  				o = (ushort)((uint)o);  			else if (o is ulong)  				o = (ushort)((ulong)o);  		} else if (shortLongIndicator == 'l') {  			if (o is short)  				o = (long)((short)o);  			else if (o is int)  				o = (long)((int)o);  			else if (o is ushort)  				o = (ulong)((ushort)o);  			else if (o is uint)  				o = (ulong)((uint)o);  		}  	}  	#endregion  	// convert value parameters to a string depending on the formatSpecifier  	w = String.Empty;  	switch (formatSpecifier) {  	#region % - character  	case '%':  		// % character  		w = "%";  		break;  	#endregion  	#region d - integer  	case 'd':  		// integer  		w = FormatNumber ((flagGroupThousands ? "n" : "d")' flagAlternate' fieldLength' int.MinValue' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region i - integer  	case 'i':  		// integer  		goto case 'd';  	#endregion  	#region o - octal integer  	case 'o':  		// octal integer - no leading zero  		w = FormatOct ("o"' flagAlternate' fieldLength' int.MinValue' flagLeft2Right' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region x - hex integer  	case 'x':  		// hex integer - no leading zero  		w = FormatHex ("x"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region X - hex integer  	case 'X':  		// same as x but with capital hex characters  		w = FormatHex ("X"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region u - unsigned integer  	case 'u':  		// unsigned integer  		w = FormatNumber ((flagGroupThousands ? "n" : "d")' flagAlternate' fieldLength' int.MinValue' flagLeft2Right' false' false' paddingCharacter' ToUnsigned (o));  		defaultParamIx++;  		break;  	#endregion  	#region c - character  	case 'c':  		// character  		if (IsNumericType (o))  			w = Convert.ToChar (o).ToString ();  		else if (o is char)  			w = ((char)o).ToString ();  		else if (o is string && ((string)o).Length > 0)  			w = ((string)o) [0].ToString ();  		defaultParamIx++;  		break;  	#endregion  	#region s - string  	case 's':  		// string  		string t = "{0" + (fieldLength != int.MinValue ? "'" + (flagLeft2Right ? "-" : String.Empty) + fieldLength.ToString () : String.Empty) + ":s}";  		w = o.ToString ();  		if (fieldPrecision >= 0)  			w = w.Substring (0' fieldPrecision);  		if (fieldLength != int.MinValue)  			if (flagLeft2Right)  				w = w.PadRight (fieldLength' paddingCharacter);  			else  				w = w.PadLeft (fieldLength' paddingCharacter);  		defaultParamIx++;  		break;  	#endregion  	#region f - double number  	case 'f':  		// double  		w = FormatNumber ((flagGroupThousands ? "n" : "f")' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region e - exponent number  	case 'e':  		// double / exponent  		w = FormatNumber ("e"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region E - exponent number  	case 'E':  		// double / exponent  		w = FormatNumber ("E"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region g - general number  	case 'g':  		// double / exponent  		w = FormatNumber ("g"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region G - general number  	case 'G':  		// double / exponent  		w = FormatNumber ("G"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region p - pointer  	case 'p':  		// pointer  		if (o is IntPtr)  			#if XBOX || SILVERLIGHT  										w = ( (IntPtr)o ).ToString(); #else  			w = "0x" + ((IntPtr)o).ToString ("x");  		#endif  		defaultParamIx++;  		break;  	#endregion  	#region n - number of processed chars so far  	case 'n':  		// number of characters so far  		w = FormatNumber ("d"' flagAlternate' fieldLength' int.MinValue' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' m.Index);  		break;  	#endregion  	default:  		w = String.Empty;  		defaultParamIx++;  		break;  	}  	// replace format parameter with parameter value  	// and start searching for the next format parameter  	// AFTER the position of the current inserted value  	// to prohibit recursive matches if the value also  	// includes a format specifier  	f.Remove (m.Index' m.Length);  	f.Insert (m.Index' w);  	m = r.Match (f.ToString ()' m.Index + w.Length);  }  
Magic Number,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,sprintf,The following statement contains a magic number: while (m.Success) {  	#region parameter index  	paramIx = defaultParamIx;  	if (m.Groups [1] != null && m.Groups [1].Value.Length > 0) {  		string val = m.Groups [1].Value.Substring (0' m.Groups [1].Value.Length - 1);  		paramIx = Convert.ToInt32 (val) - 1;  	}  	;  	#endregion  	#region format flags  	// extract format flags  	flagAlternate = false;  	flagLeft2Right = false;  	flagPositiveSign = false;  	flagPositiveSpace = false;  	flagZeroPadding = false;  	flagGroupThousands = false;  	if (m.Groups [2] != null && m.Groups [2].Value.Length > 0) {  		string flags = m.Groups [2].Value;  		flagAlternate = (flags.IndexOf ('#') >= 0);  		flagLeft2Right = (flags.IndexOf ('-') >= 0);  		flagPositiveSign = (flags.IndexOf ('+') >= 0);  		flagPositiveSpace = (flags.IndexOf (' ') >= 0);  		flagGroupThousands = (flags.IndexOf ('\'') >= 0);  		// positive + indicator overrides a  		// positive space character  		if (flagPositiveSign && flagPositiveSpace)  			flagPositiveSpace = false;  	}  	#endregion  	#region field length  	// extract field length and   	// pading character  	paddingCharacter = ' ';  	fieldLength = int.MinValue;  	if (m.Groups [3] != null && m.Groups [3].Value.Length > 0) {  		fieldLength = Convert.ToInt32 (m.Groups [3].Value);  		flagZeroPadding = (m.Groups [3].Value [0] == '0');  	}  	#endregion  	if (flagZeroPadding)  		paddingCharacter = '0';  	// left2right allignment overrides zero padding  	if (flagLeft2Right && flagZeroPadding) {  		flagZeroPadding = false;  		paddingCharacter = ' ';  	}  	#region field precision  	// extract field precision  	fieldPrecision = int.MinValue;  	if (m.Groups [4] != null && m.Groups [4].Value.Length > 0)  		fieldPrecision = Convert.ToInt32 (m.Groups [4].Value);  	#endregion  	#region short / long indicator  	// extract short / long indicator  	shortLongIndicator = Char.MinValue;  	if (m.Groups [5] != null && m.Groups [5].Value.Length > 0)  		shortLongIndicator = m.Groups [5].Value [0];  	#endregion  	#region format specifier  	// extract format  	formatSpecifier = Char.MinValue;  	if (m.Groups [6] != null && m.Groups [6].Value.Length > 0)  		formatSpecifier = m.Groups [6].Value [0];  	#endregion  	// default precision is 6 digits if none is specified except  	if (fieldPrecision == int.MinValue && formatSpecifier != 's' && formatSpecifier != 'c' && Char.ToUpper (formatSpecifier) != 'X' && formatSpecifier != 'o')  		fieldPrecision = 6;  	#region get next value parameter  	// get next value parameter and convert value parameter depending on short / long indicator  	if (Parameters == null || paramIx >= Parameters.Length)  		o = null;  	else {  		o = Parameters [paramIx];  		if (shortLongIndicator == 'h') {  			if (o is int)  				o = (short)((int)o);  			else if (o is long)  				o = (short)((long)o);  			else if (o is uint)  				o = (ushort)((uint)o);  			else if (o is ulong)  				o = (ushort)((ulong)o);  		} else if (shortLongIndicator == 'l') {  			if (o is short)  				o = (long)((short)o);  			else if (o is int)  				o = (long)((int)o);  			else if (o is ushort)  				o = (ulong)((ushort)o);  			else if (o is uint)  				o = (ulong)((uint)o);  		}  	}  	#endregion  	// convert value parameters to a string depending on the formatSpecifier  	w = String.Empty;  	switch (formatSpecifier) {  	#region % - character  	case '%':  		// % character  		w = "%";  		break;  	#endregion  	#region d - integer  	case 'd':  		// integer  		w = FormatNumber ((flagGroupThousands ? "n" : "d")' flagAlternate' fieldLength' int.MinValue' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region i - integer  	case 'i':  		// integer  		goto case 'd';  	#endregion  	#region o - octal integer  	case 'o':  		// octal integer - no leading zero  		w = FormatOct ("o"' flagAlternate' fieldLength' int.MinValue' flagLeft2Right' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region x - hex integer  	case 'x':  		// hex integer - no leading zero  		w = FormatHex ("x"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region X - hex integer  	case 'X':  		// same as x but with capital hex characters  		w = FormatHex ("X"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region u - unsigned integer  	case 'u':  		// unsigned integer  		w = FormatNumber ((flagGroupThousands ? "n" : "d")' flagAlternate' fieldLength' int.MinValue' flagLeft2Right' false' false' paddingCharacter' ToUnsigned (o));  		defaultParamIx++;  		break;  	#endregion  	#region c - character  	case 'c':  		// character  		if (IsNumericType (o))  			w = Convert.ToChar (o).ToString ();  		else if (o is char)  			w = ((char)o).ToString ();  		else if (o is string && ((string)o).Length > 0)  			w = ((string)o) [0].ToString ();  		defaultParamIx++;  		break;  	#endregion  	#region s - string  	case 's':  		// string  		string t = "{0" + (fieldLength != int.MinValue ? "'" + (flagLeft2Right ? "-" : String.Empty) + fieldLength.ToString () : String.Empty) + ":s}";  		w = o.ToString ();  		if (fieldPrecision >= 0)  			w = w.Substring (0' fieldPrecision);  		if (fieldLength != int.MinValue)  			if (flagLeft2Right)  				w = w.PadRight (fieldLength' paddingCharacter);  			else  				w = w.PadLeft (fieldLength' paddingCharacter);  		defaultParamIx++;  		break;  	#endregion  	#region f - double number  	case 'f':  		// double  		w = FormatNumber ((flagGroupThousands ? "n" : "f")' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region e - exponent number  	case 'e':  		// double / exponent  		w = FormatNumber ("e"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region E - exponent number  	case 'E':  		// double / exponent  		w = FormatNumber ("E"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region g - general number  	case 'g':  		// double / exponent  		w = FormatNumber ("g"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region G - general number  	case 'G':  		// double / exponent  		w = FormatNumber ("G"' flagAlternate' fieldLength' fieldPrecision' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' o);  		defaultParamIx++;  		break;  	#endregion  	#region p - pointer  	case 'p':  		// pointer  		if (o is IntPtr)  			#if XBOX || SILVERLIGHT  										w = ( (IntPtr)o ).ToString(); #else  			w = "0x" + ((IntPtr)o).ToString ("x");  		#endif  		defaultParamIx++;  		break;  	#endregion  	#region n - number of processed chars so far  	case 'n':  		// number of characters so far  		w = FormatNumber ("d"' flagAlternate' fieldLength' int.MinValue' flagLeft2Right' flagPositiveSign' flagPositiveSpace' paddingCharacter' m.Index);  		break;  	#endregion  	default:  		w = String.Empty;  		defaultParamIx++;  		break;  	}  	// replace format parameter with parameter value  	// and start searching for the next format parameter  	// AFTER the position of the current inserted value  	// to prohibit recursive matches if the value also  	// includes a format specifier  	f.Remove (m.Index' m.Length);  	f.Insert (m.Index' w);  	m = r.Match (f.ToString ()' m.Index + w.Length);  }  
Magic Number,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,sprintf,The following statement contains a magic number: if (m.Groups [2] != null && m.Groups [2].Value.Length > 0) {  	string flags = m.Groups [2].Value;  	flagAlternate = (flags.IndexOf ('#') >= 0);  	flagLeft2Right = (flags.IndexOf ('-') >= 0);  	flagPositiveSign = (flags.IndexOf ('+') >= 0);  	flagPositiveSpace = (flags.IndexOf (' ') >= 0);  	flagGroupThousands = (flags.IndexOf ('\'') >= 0);  	// positive + indicator overrides a  	// positive space character  	if (flagPositiveSign && flagPositiveSpace)  		flagPositiveSpace = false;  }  
Magic Number,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,sprintf,The following statement contains a magic number: if (m.Groups [2] != null && m.Groups [2].Value.Length > 0) {  	string flags = m.Groups [2].Value;  	flagAlternate = (flags.IndexOf ('#') >= 0);  	flagLeft2Right = (flags.IndexOf ('-') >= 0);  	flagPositiveSign = (flags.IndexOf ('+') >= 0);  	flagPositiveSpace = (flags.IndexOf (' ') >= 0);  	flagGroupThousands = (flags.IndexOf ('\'') >= 0);  	// positive + indicator overrides a  	// positive space character  	if (flagPositiveSign && flagPositiveSpace)  		flagPositiveSpace = false;  }  
Magic Number,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,sprintf,The following statement contains a magic number: if (m.Groups [2] != null && m.Groups [2].Value.Length > 0) {  	string flags = m.Groups [2].Value;  	flagAlternate = (flags.IndexOf ('#') >= 0);  	flagLeft2Right = (flags.IndexOf ('-') >= 0);  	flagPositiveSign = (flags.IndexOf ('+') >= 0);  	flagPositiveSpace = (flags.IndexOf (' ') >= 0);  	flagGroupThousands = (flags.IndexOf ('\'') >= 0);  	// positive + indicator overrides a  	// positive space character  	if (flagPositiveSign && flagPositiveSpace)  		flagPositiveSpace = false;  }  
Magic Number,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,sprintf,The following statement contains a magic number: if (m.Groups [3] != null && m.Groups [3].Value.Length > 0) {  	fieldLength = Convert.ToInt32 (m.Groups [3].Value);  	flagZeroPadding = (m.Groups [3].Value [0] == '0');  }  
Magic Number,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,sprintf,The following statement contains a magic number: if (m.Groups [3] != null && m.Groups [3].Value.Length > 0) {  	fieldLength = Convert.ToInt32 (m.Groups [3].Value);  	flagZeroPadding = (m.Groups [3].Value [0] == '0');  }  
Magic Number,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,sprintf,The following statement contains a magic number: if (m.Groups [3] != null && m.Groups [3].Value.Length > 0) {  	fieldLength = Convert.ToInt32 (m.Groups [3].Value);  	flagZeroPadding = (m.Groups [3].Value [0] == '0');  }  
Magic Number,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,sprintf,The following statement contains a magic number: if (m.Groups [3] != null && m.Groups [3].Value.Length > 0) {  	fieldLength = Convert.ToInt32 (m.Groups [3].Value);  	flagZeroPadding = (m.Groups [3].Value [0] == '0');  }  
Magic Number,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,sprintf,The following statement contains a magic number: fieldLength = Convert.ToInt32 (m.Groups [3].Value);  
Magic Number,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,sprintf,The following statement contains a magic number: flagZeroPadding = (m.Groups [3].Value [0] == '0');  
Magic Number,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,sprintf,The following statement contains a magic number: if (m.Groups [4] != null && m.Groups [4].Value.Length > 0)  	fieldPrecision = Convert.ToInt32 (m.Groups [4].Value);  
Magic Number,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,sprintf,The following statement contains a magic number: if (m.Groups [4] != null && m.Groups [4].Value.Length > 0)  	fieldPrecision = Convert.ToInt32 (m.Groups [4].Value);  
Magic Number,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,sprintf,The following statement contains a magic number: if (m.Groups [4] != null && m.Groups [4].Value.Length > 0)  	fieldPrecision = Convert.ToInt32 (m.Groups [4].Value);  
Magic Number,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,sprintf,The following statement contains a magic number: fieldPrecision = Convert.ToInt32 (m.Groups [4].Value);  
Magic Number,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,sprintf,The following statement contains a magic number: if (m.Groups [5] != null && m.Groups [5].Value.Length > 0)  	shortLongIndicator = m.Groups [5].Value [0];  
Magic Number,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,sprintf,The following statement contains a magic number: if (m.Groups [5] != null && m.Groups [5].Value.Length > 0)  	shortLongIndicator = m.Groups [5].Value [0];  
Magic Number,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,sprintf,The following statement contains a magic number: if (m.Groups [5] != null && m.Groups [5].Value.Length > 0)  	shortLongIndicator = m.Groups [5].Value [0];  
Magic Number,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,sprintf,The following statement contains a magic number: shortLongIndicator = m.Groups [5].Value [0];  
Magic Number,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,sprintf,The following statement contains a magic number: if (m.Groups [6] != null && m.Groups [6].Value.Length > 0)  	formatSpecifier = m.Groups [6].Value [0];  
Magic Number,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,sprintf,The following statement contains a magic number: if (m.Groups [6] != null && m.Groups [6].Value.Length > 0)  	formatSpecifier = m.Groups [6].Value [0];  
Magic Number,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,sprintf,The following statement contains a magic number: if (m.Groups [6] != null && m.Groups [6].Value.Length > 0)  	formatSpecifier = m.Groups [6].Value [0];  
Magic Number,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,sprintf,The following statement contains a magic number: formatSpecifier = m.Groups [6].Value [0];  
Magic Number,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,sprintf,The following statement contains a magic number: if (fieldPrecision == int.MinValue && formatSpecifier != 's' && formatSpecifier != 'c' && Char.ToUpper (formatSpecifier) != 'X' && formatSpecifier != 'o')  	fieldPrecision = 6;  
Magic Number,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,sprintf,The following statement contains a magic number: fieldPrecision = 6;  
Magic Number,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,FormatOct,The following statement contains a magic number: if (IsNumericType (Value)) {  	w = Convert.ToString (UnboxToLong (Value' true)' 8);  	if (Left2Right || Padding == ' ') {  		if (Alternate && w != "0")  			w = "0" + w;  		w = String.Format (lengthFormat' w);  	} else {  		if (FieldLength != int.MinValue)  			w = w.PadLeft (FieldLength - (Alternate && w != "0" ? 1 : 0)' Padding);  		if (Alternate && w != "0")  			w = "0" + w;  	}  }  
Magic Number,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,FormatOct,The following statement contains a magic number: w = Convert.ToString (UnboxToLong (Value' true)' 8);  
Magic Number,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,FormatHex,The following statement contains a magic number: if (IsNumericType (Value)) {  	w = String.Format (numberFormat' Value);  	if (Left2Right || Padding == ' ') {  		if (Alternate)  			w = (NativeFormat == "x" ? "0x" : "0X") + w;  		w = String.Format (lengthFormat' w);  	} else {  		if (FieldLength != int.MinValue)  			w = w.PadLeft (FieldLength - (Alternate ? 2 : 0)' Padding);  		if (Alternate)  			w = (NativeFormat == "x" ? "0x" : "0X") + w;  	}  }  
Magic Number,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,FormatHex,The following statement contains a magic number: if (Left2Right || Padding == ' ') {  	if (Alternate)  		w = (NativeFormat == "x" ? "0x" : "0X") + w;  	w = String.Format (lengthFormat' w);  } else {  	if (FieldLength != int.MinValue)  		w = w.PadLeft (FieldLength - (Alternate ? 2 : 0)' Padding);  	if (Alternate)  		w = (NativeFormat == "x" ? "0x" : "0X") + w;  }  
Magic Number,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,FormatHex,The following statement contains a magic number: if (FieldLength != int.MinValue)  	w = w.PadLeft (FieldLength - (Alternate ? 2 : 0)' Padding);  
Magic Number,AT.MIN,Tools,F:\newReposMay17\gerich-home_kopilua\src\printf\Tools.cs,FormatHex,The following statement contains a magic number: w = w.PadLeft (FieldLength - (Alternate ? 2 : 0)' Padding);  
Missing Default,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,checkArgMode,The following switch statement is missing a default case: switch (mode) {  case OpArgMask.OpArgN:  	if (r != 0)  		return 0;  	break;  case OpArgMask.OpArgU:  	break;  case OpArgMask.OpArgR:  	checkreg (pt' r);  	break;  case OpArgMask.OpArgK:  	if (!((ISK (r) != 0) ? INDEXK (r) < pt.sizek : r < pt.maxstacksize))  		return 0;  	break;  }  
Missing Default,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,symbexec,The following switch statement is missing a default case: switch (getOpMode (op)) {  case OpMode.iABC: {  	b = GETARG_B (i);  	c = GETARG_C (i);  	if (checkArgMode (pt' b' getBMode (op)) == 0)  		return 0;  	if (checkArgMode (pt' c' getCMode (op)) == 0)  		return 0;  	break;  }  case OpMode.iABx: {  	b = GETARG_Bx (i);  	if (getBMode (op) == OpArgMask.OpArgK)  		if (!(b < pt.sizek))  			return 0;  	break;  }  case OpMode.iAsBx: {  	b = GETARG_sBx (i);  	if (getBMode (op) == OpArgMask.OpArgR) {  		dest = pc + 1 + b;  		if (!((0 <= dest && dest < pt.sizecode)))  			return 0;  		if (dest > 0) {  			int j;  			/* check that it does not jump to a setlist count; this 					   is tricky' because the count from a previous setlist may 					   have the same value of an invalid setlist; so' we must 					   go all the way back to the first of them (if any) */for (j = 0; j < dest; j++) {  				Instruction d = pt.code [dest - 1 - j];  				if (!(GET_OPCODE (d) == OpCode.OP_SETLIST && GETARG_C (d) == 0))  					break;  			}  			/* if 'j' is even' previous value is not a setlist (even if 					   it looks like one) */if ((j & 1) != 0)  				return 0;  		}  	}  	break;  }  }  
Missing Default,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,luaD_seterrorobj,The following switch statement is missing a default case: switch (errcode) {  case LUA_ERRMEM: {  	setsvalue2s (L' oldtop' luaS_newliteral (L' MEMERRMSG));  	break;  }  case LUA_ERRERR: {  	setsvalue2s (L' oldtop' luaS_newliteral (L' "error in error handling"));  	break;  }  case LUA_ERRSYNTAX:  case LUA_ERRRUN: {  	setobjs2s (L' oldtop' L.top - 1);  	/* error message on current top */break;  }  }  
Missing Default,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,add_value,The following switch statement is missing a default case: switch (lua_type (L' 3)) {  case LUA_TNUMBER:  case LUA_TSTRING: {  	add_s (ms' b' s' e);  	return;  }  case LUA_TFUNCTION: {  	int n;  	lua_pushvalue (L' 3);  	n = push_captures (ms' s' e);  	lua_call (L' n' 1);  	break;  }  case LUA_TTABLE: {  	push_onecapture (ms' 0' s' e);  	lua_gettable (L' 3);  	break;  }  }  
Missing Default,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,parse_scanf,The following switch statement is missing a default case: switch (fmt [index++]) {  case 's': {  	argp [parm_index++] = str;  	break;  }  case 'c': {  	argp [parm_index++] = Convert.ToChar (str' Culture ("en-US"));  	break;  }  case 'd': {  	argp [parm_index++] = Convert.ToInt32 (str' Culture ("en-US"));  	break;  }  case 'l': {  	argp [parm_index++] = Convert.ToDouble (str' Culture ("en-US"));  	break;  }  case 'f': {  	argp [parm_index++] = Convert.ToDouble (str' Culture ("en-US"));  	break;  }  //case 'p':  //    {  //        result += "(pointer)";  //        break;  //    }  }  
Missing Default,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,fopen,The following switch statement is missing a default case: switch (mode [i]) {  case 'r':  	fileaccess = fileaccess | FileAccess.Read;  	if (!File.Exists (str))  		return null;  	break;  case 'w':  	filemode = FileMode.Create;  	fileaccess = fileaccess | FileAccess.Write;  	break;  }  
Missing Default,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,Dump,The following switch statement is missing a default case: switch (GET_OPCODE (i)) {  case OpCode.OP_CLOSE:  	Console.Write ("{0}"' A);  	break;  case OpCode.OP_MOVE:  case OpCode.OP_LOADNIL:  case OpCode.OP_GETUPVAL:  case OpCode.OP_SETUPVAL:  case OpCode.OP_UNM:  case OpCode.OP_NOT:  case OpCode.OP_RETURN:  	Console.Write ("{0}' {1}"' A' B);  	break;  case OpCode.OP_LOADBOOL:  case OpCode.OP_GETTABLE:  case OpCode.OP_SETTABLE:  case OpCode.OP_NEWTABLE:  case OpCode.OP_SELF:  case OpCode.OP_ADD:  case OpCode.OP_SUB:  case OpCode.OP_MUL:  case OpCode.OP_DIV:  case OpCode.OP_POW:  case OpCode.OP_CONCAT:  case OpCode.OP_EQ:  case OpCode.OP_LT:  case OpCode.OP_LE:  case OpCode.OP_TEST:  case OpCode.OP_CALL:  case OpCode.OP_TAILCALL:  	Console.Write ("{0}' {1}' {2}"' A' B' C);  	break;  case OpCode.OP_LOADK:  	Console.Write ("{0}' {1}"' A' Bx);  	break;  case OpCode.OP_GETGLOBAL:  case OpCode.OP_SETGLOBAL:  case OpCode.OP_SETLIST:  case OpCode.OP_CLOSURE:  	Console.Write ("{0}' {1}"' A' Bx);  	break;  case OpCode.OP_TFORLOOP:  	Console.Write ("{0}' {1}"' A' C);  	break;  case OpCode.OP_JMP:  case OpCode.OP_FORLOOP:  case OpCode.OP_FORPREP:  	Console.Write ("{0}' {1}"' A' sBx);  	break;  }  
Missing Default,KopiLua,Lua,F:\newReposMay17\gerich-home_kopilua\src\lapi.cs,PrintCode,The following switch statement is missing a default case: switch (getOpMode (o)) {  case OpMode.iABC:  	printf ("%d"' a);  	if (getBMode (o) != OpArgMask.OpArgN)  		printf (" %d"' (ISK (b) != 0) ? (-1 - INDEXK (b)) : b);  	if (getCMode (o) != OpArgMask.OpArgN)  		printf (" %d"' (ISK (c) != 0) ? (-1 - INDEXK (c)) : c);  	break;  case OpMode.iABx:  	if (getBMode (o) == OpArgMask.OpArgK)  		printf ("%d %d"' a' -1 - bx);  	else  		printf ("%d %d"' a' bx);  	break;  case OpMode.iAsBx:  	if (o == OpCode.OP_JMP)  		printf ("%d"' sbx);  	else  		printf ("%d %d"' a' sbx);  	break;  }  
