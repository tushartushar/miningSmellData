Implementation smell,Namespace,Class,File,Method,Description
Magic Number,ConsoleControlAPI,ProcessInterface,C:\repos\dwmkerr_consolecontrol\source\ConsoleControlAPI\ProcessInterface.cs,outputWorker_DoWork,The following statement contains a magic number: while (outputWorker.CancellationPending == false)              {                  //  Any lines to read?                  int count;                  var buffer = new char[1024];                  do                  {                      var builder = new StringBuilder();                      count = outputReader.Read(buffer' 0' 1024);                      builder.Append(buffer' 0' count);                      outputWorker.ReportProgress(0' builder.ToString());                  } while (count > 0);                    System.Threading.Thread.Sleep(200);              }
Magic Number,ConsoleControlAPI,ProcessInterface,C:\repos\dwmkerr_consolecontrol\source\ConsoleControlAPI\ProcessInterface.cs,outputWorker_DoWork,The following statement contains a magic number: while (outputWorker.CancellationPending == false)              {                  //  Any lines to read?                  int count;                  var buffer = new char[1024];                  do                  {                      var builder = new StringBuilder();                      count = outputReader.Read(buffer' 0' 1024);                      builder.Append(buffer' 0' count);                      outputWorker.ReportProgress(0' builder.ToString());                  } while (count > 0);                    System.Threading.Thread.Sleep(200);              }
Magic Number,ConsoleControlAPI,ProcessInterface,C:\repos\dwmkerr_consolecontrol\source\ConsoleControlAPI\ProcessInterface.cs,outputWorker_DoWork,The following statement contains a magic number: while (outputWorker.CancellationPending == false)              {                  //  Any lines to read?                  int count;                  var buffer = new char[1024];                  do                  {                      var builder = new StringBuilder();                      count = outputReader.Read(buffer' 0' 1024);                      builder.Append(buffer' 0' count);                      outputWorker.ReportProgress(0' builder.ToString());                  } while (count > 0);                    System.Threading.Thread.Sleep(200);              }
Magic Number,ConsoleControlAPI,ProcessInterface,C:\repos\dwmkerr_consolecontrol\source\ConsoleControlAPI\ProcessInterface.cs,errorWorker_DoWork,The following statement contains a magic number: while (errorWorker.CancellationPending == false)              {                  //  Any lines to read?                  int count;                  var buffer = new char[1024];                  do                  {                      var builder = new StringBuilder();                      count = errorReader.Read(buffer' 0' 1024);                      builder.Append(buffer' 0' count);                      errorWorker.ReportProgress(0' builder.ToString());                  } while (count > 0);                    System.Threading.Thread.Sleep(200);              }
Magic Number,ConsoleControlAPI,ProcessInterface,C:\repos\dwmkerr_consolecontrol\source\ConsoleControlAPI\ProcessInterface.cs,errorWorker_DoWork,The following statement contains a magic number: while (errorWorker.CancellationPending == false)              {                  //  Any lines to read?                  int count;                  var buffer = new char[1024];                  do                  {                      var builder = new StringBuilder();                      count = errorReader.Read(buffer' 0' 1024);                      builder.Append(buffer' 0' count);                      errorWorker.ReportProgress(0' builder.ToString());                  } while (count > 0);                    System.Threading.Thread.Sleep(200);              }
Magic Number,ConsoleControlAPI,ProcessInterface,C:\repos\dwmkerr_consolecontrol\source\ConsoleControlAPI\ProcessInterface.cs,errorWorker_DoWork,The following statement contains a magic number: while (errorWorker.CancellationPending == false)              {                  //  Any lines to read?                  int count;                  var buffer = new char[1024];                  do                  {                      var builder = new StringBuilder();                      count = errorReader.Read(buffer' 0' 1024);                      builder.Append(buffer' 0' count);                      errorWorker.ReportProgress(0' builder.ToString());                  } while (count > 0);                    System.Threading.Thread.Sleep(200);              }
