Implementation smell,Namespace,Class,File,Method,Description
Complex Method,SharpProxy,StreamExtensions,C:\repos\in2bits_SharpProxy\SharpProxy.Net\StreamExtensions.cs,CopyHttpMessageToAsync,Cyclomatic complexity of the method is 8
Long Parameter List,SharpProxy,ProxySslRequest,C:\repos\in2bits_SharpProxy\SharpProxy.Net\ProxySslRequest.cs,LocalCertificateSelector,The method has 5 parameters.
Long Parameter List,IPHelper,Helper,C:\repos\in2bits_SharpProxy\SharpProxy.Net\IPHelper\Helper.cs,FormatMessageW,The method has 7 parameters.
Long Parameter List,IPHelper,Win32Funcs,C:\repos\in2bits_SharpProxy\SharpProxy.Net\IPHelper\Win32Funcs.cs,GetAdaptersAddresses,The method has 5 parameters.
Long Parameter List,IPHelper,Win32Funcs,C:\repos\in2bits_SharpProxy\SharpProxy.Net\IPHelper\Win32Funcs.cs,AddIPAddress,The method has 5 parameters.
Long Parameter List,IPHelper,Win32Funcs,C:\repos\in2bits_SharpProxy\SharpProxy.Net\IPHelper\Win32Funcs.cs,GetExtendedTcpTable,The method has 6 parameters.
Long Parameter List,IPHelper,Win32Funcs,C:\repos\in2bits_SharpProxy\SharpProxy.Net\IPHelper\Win32Funcs.cs,GetExtendedUdpTable,The method has 6 parameters.
Long Statement,SharpProxy,HeadersExtensions,C:\repos\in2bits_SharpProxy\SharpProxy.Net\HeadersExtensions.cs,ContainsIgnoreCase,The length of the statement  "	return headers.Contains (new KeyValuePair<string' string> (searchKey' searchValue)' IgnoreCaseKeyValuePairComparer.Instance); " is 125.
Long Statement,SharpProxy,ProxySslRequest,C:\repos\in2bits_SharpProxy\SharpProxy.Net\ProxySslRequest.cs,For,The length of the statement  "	var clientSsslStream = new SslStream (wrapperRequest.ClientStream' true' RemoteCertificateValidator' sslRequest.LocalCertificateSelector); " is 138.
Long Statement,IPHelper,TcpRow,C:\repos\in2bits_SharpProxy\SharpProxy.Net\IPHelper\TcpRow.cs,ToString,The length of the statement  "	string returnData = "ProcessId : " + ProcessId + " " + "Local Address : " + _localEndPoint + " " + "Remote Address : " + _remoteEndPoint + " " + "State : " + State; " is 164.
Long Statement,LogProxy.MakeCertWrapper,CertificateProvider,C:\repos\in2bits_SharpProxy\SharpProxy.Net\LogProxy.MakeCertWrapper\CertificateProvider.cs,FindCertificateByName,The length of the statement  "	X509Certificate2Collection certificate2Collection = x509Store.Certificates.Find (X509FindType.FindBySubjectDistinguishedName' name.ToString ()' validOnly: false); " is 162.
Empty Catch Block,IPHelper,UdpRow,C:\repos\in2bits_SharpProxy\SharpProxy.Net\IPHelper\UdpRow.cs,UdpRow,The method has an empty catch block.
Magic Number,SharpProxy,HarRequestInspector,C:\repos\in2bits_SharpProxy\SharpProxy.Net\HarRequestInspector.cs,OnPrologueReceived,The following statement contains a magic number: foreach (var pair in prologue.Headers) {  	if (pair.Key.ToLowerInvariant () == "cookie") {  		//http://www.nczonline.net/blog/2009/05/05/http-cookies-explained/  		var text = pair.Value;  		var parts = text.Split (new char[] {  			':'  		}' 2' StringSplitOptions.None);  		if (parts.Length == 1)  			continue;  		text = parts [1];  		var cookieStrings = text.Split (new string[] {  			"; "  		}' StringSplitOptions.RemoveEmptyEntries);  		foreach (var cookieString in cookieStrings) {  			var cookieParts = cookieString.Split (new char[] {  				' '  			}' StringSplitOptions.RemoveEmptyEntries);  			parts = cookieParts [0].Split (new char[] {  				'='  			}' 2' StringSplitOptions.None);  			if (parts.Length < 2)  				break;  			var cookie = new CookieInfo () {  				Name = parts [0]'  				Value = parts [1]  			};  			_entry.Request.Cookies.Add (cookie);  		}  		//TODO: Parse Cookies  	}  	_entry.Request.Headers.Add (new NameValuePairInfo () {  		Name = pair.Key'  		Value = pair.Value  	});  }  
Magic Number,SharpProxy,HarRequestInspector,C:\repos\in2bits_SharpProxy\SharpProxy.Net\HarRequestInspector.cs,OnPrologueReceived,The following statement contains a magic number: foreach (var pair in prologue.Headers) {  	if (pair.Key.ToLowerInvariant () == "cookie") {  		//http://www.nczonline.net/blog/2009/05/05/http-cookies-explained/  		var text = pair.Value;  		var parts = text.Split (new char[] {  			':'  		}' 2' StringSplitOptions.None);  		if (parts.Length == 1)  			continue;  		text = parts [1];  		var cookieStrings = text.Split (new string[] {  			"; "  		}' StringSplitOptions.RemoveEmptyEntries);  		foreach (var cookieString in cookieStrings) {  			var cookieParts = cookieString.Split (new char[] {  				' '  			}' StringSplitOptions.RemoveEmptyEntries);  			parts = cookieParts [0].Split (new char[] {  				'='  			}' 2' StringSplitOptions.None);  			if (parts.Length < 2)  				break;  			var cookie = new CookieInfo () {  				Name = parts [0]'  				Value = parts [1]  			};  			_entry.Request.Cookies.Add (cookie);  		}  		//TODO: Parse Cookies  	}  	_entry.Request.Headers.Add (new NameValuePairInfo () {  		Name = pair.Key'  		Value = pair.Value  	});  }  
Magic Number,SharpProxy,HarRequestInspector,C:\repos\in2bits_SharpProxy\SharpProxy.Net\HarRequestInspector.cs,OnPrologueReceived,The following statement contains a magic number: foreach (var pair in prologue.Headers) {  	if (pair.Key.ToLowerInvariant () == "cookie") {  		//http://www.nczonline.net/blog/2009/05/05/http-cookies-explained/  		var text = pair.Value;  		var parts = text.Split (new char[] {  			':'  		}' 2' StringSplitOptions.None);  		if (parts.Length == 1)  			continue;  		text = parts [1];  		var cookieStrings = text.Split (new string[] {  			"; "  		}' StringSplitOptions.RemoveEmptyEntries);  		foreach (var cookieString in cookieStrings) {  			var cookieParts = cookieString.Split (new char[] {  				' '  			}' StringSplitOptions.RemoveEmptyEntries);  			parts = cookieParts [0].Split (new char[] {  				'='  			}' 2' StringSplitOptions.None);  			if (parts.Length < 2)  				break;  			var cookie = new CookieInfo () {  				Name = parts [0]'  				Value = parts [1]  			};  			_entry.Request.Cookies.Add (cookie);  		}  		//TODO: Parse Cookies  	}  	_entry.Request.Headers.Add (new NameValuePairInfo () {  		Name = pair.Key'  		Value = pair.Value  	});  }  
Magic Number,SharpProxy,HarRequestInspector,C:\repos\in2bits_SharpProxy\SharpProxy.Net\HarRequestInspector.cs,OnPrologueReceived,The following statement contains a magic number: if (pair.Key.ToLowerInvariant () == "cookie") {  	//http://www.nczonline.net/blog/2009/05/05/http-cookies-explained/  	var text = pair.Value;  	var parts = text.Split (new char[] {  		':'  	}' 2' StringSplitOptions.None);  	if (parts.Length == 1)  		continue;  	text = parts [1];  	var cookieStrings = text.Split (new string[] {  		"; "  	}' StringSplitOptions.RemoveEmptyEntries);  	foreach (var cookieString in cookieStrings) {  		var cookieParts = cookieString.Split (new char[] {  			' '  		}' StringSplitOptions.RemoveEmptyEntries);  		parts = cookieParts [0].Split (new char[] {  			'='  		}' 2' StringSplitOptions.None);  		if (parts.Length < 2)  			break;  		var cookie = new CookieInfo () {  			Name = parts [0]'  			Value = parts [1]  		};  		_entry.Request.Cookies.Add (cookie);  	}  	//TODO: Parse Cookies  }  
Magic Number,SharpProxy,HarRequestInspector,C:\repos\in2bits_SharpProxy\SharpProxy.Net\HarRequestInspector.cs,OnPrologueReceived,The following statement contains a magic number: if (pair.Key.ToLowerInvariant () == "cookie") {  	//http://www.nczonline.net/blog/2009/05/05/http-cookies-explained/  	var text = pair.Value;  	var parts = text.Split (new char[] {  		':'  	}' 2' StringSplitOptions.None);  	if (parts.Length == 1)  		continue;  	text = parts [1];  	var cookieStrings = text.Split (new string[] {  		"; "  	}' StringSplitOptions.RemoveEmptyEntries);  	foreach (var cookieString in cookieStrings) {  		var cookieParts = cookieString.Split (new char[] {  			' '  		}' StringSplitOptions.RemoveEmptyEntries);  		parts = cookieParts [0].Split (new char[] {  			'='  		}' 2' StringSplitOptions.None);  		if (parts.Length < 2)  			break;  		var cookie = new CookieInfo () {  			Name = parts [0]'  			Value = parts [1]  		};  		_entry.Request.Cookies.Add (cookie);  	}  	//TODO: Parse Cookies  }  
Magic Number,SharpProxy,HarRequestInspector,C:\repos\in2bits_SharpProxy\SharpProxy.Net\HarRequestInspector.cs,OnPrologueReceived,The following statement contains a magic number: if (pair.Key.ToLowerInvariant () == "cookie") {  	//http://www.nczonline.net/blog/2009/05/05/http-cookies-explained/  	var text = pair.Value;  	var parts = text.Split (new char[] {  		':'  	}' 2' StringSplitOptions.None);  	if (parts.Length == 1)  		continue;  	text = parts [1];  	var cookieStrings = text.Split (new string[] {  		"; "  	}' StringSplitOptions.RemoveEmptyEntries);  	foreach (var cookieString in cookieStrings) {  		var cookieParts = cookieString.Split (new char[] {  			' '  		}' StringSplitOptions.RemoveEmptyEntries);  		parts = cookieParts [0].Split (new char[] {  			'='  		}' 2' StringSplitOptions.None);  		if (parts.Length < 2)  			break;  		var cookie = new CookieInfo () {  			Name = parts [0]'  			Value = parts [1]  		};  		_entry.Request.Cookies.Add (cookie);  	}  	//TODO: Parse Cookies  }  
Magic Number,SharpProxy,HarRequestInspector,C:\repos\in2bits_SharpProxy\SharpProxy.Net\HarRequestInspector.cs,OnPrologueReceived,The following statement contains a magic number: foreach (var cookieString in cookieStrings) {  	var cookieParts = cookieString.Split (new char[] {  		' '  	}' StringSplitOptions.RemoveEmptyEntries);  	parts = cookieParts [0].Split (new char[] {  		'='  	}' 2' StringSplitOptions.None);  	if (parts.Length < 2)  		break;  	var cookie = new CookieInfo () {  		Name = parts [0]'  		Value = parts [1]  	};  	_entry.Request.Cookies.Add (cookie);  }  
Magic Number,SharpProxy,HarRequestInspector,C:\repos\in2bits_SharpProxy\SharpProxy.Net\HarRequestInspector.cs,OnPrologueReceived,The following statement contains a magic number: foreach (var cookieString in cookieStrings) {  	var cookieParts = cookieString.Split (new char[] {  		' '  	}' StringSplitOptions.RemoveEmptyEntries);  	parts = cookieParts [0].Split (new char[] {  		'='  	}' 2' StringSplitOptions.None);  	if (parts.Length < 2)  		break;  	var cookie = new CookieInfo () {  		Name = parts [0]'  		Value = parts [1]  	};  	_entry.Request.Cookies.Add (cookie);  }  
Magic Number,SharpProxy,HarRequestInspector,C:\repos\in2bits_SharpProxy\SharpProxy.Net\HarRequestInspector.cs,OnPrologueReceived,The following statement contains a magic number: parts = cookieParts [0].Split (new char[] {  	'='  }' 2' StringSplitOptions.None);  
Magic Number,SharpProxy,HarRequestInspector,C:\repos\in2bits_SharpProxy\SharpProxy.Net\HarRequestInspector.cs,OnPrologueReceived,The following statement contains a magic number: if (parts.Length < 2)  	break;  
Magic Number,SharpProxy,HarResponseInspector,C:\repos\in2bits_SharpProxy\SharpProxy.Net\HarResponseInspector.cs,OnPrologueReceived,The following statement contains a magic number: foreach (var pair in prologue.Headers) {  	if (pair.Key.ToLowerInvariant () == "cookie") {  		//http://www.nczonline.net/blog/2009/05/05/http-cookies-explained/  		var text = pair.Value;  		var parts = text.Split (new char[] {  			':'  		}' 2' StringSplitOptions.None);  		if (parts.Length == 1)  			continue;  		text = parts [1];  		var cookieStrings = text.Split (new string[] {  			"; "  		}' StringSplitOptions.RemoveEmptyEntries);  		foreach (var cookieString in cookieStrings) {  			var cookieParts = cookieString.Split (new char[] {  				' '  			}' StringSplitOptions.RemoveEmptyEntries);  			parts = cookieParts [0].Split (new char[] {  				'='  			}' 2' StringSplitOptions.None);  			if (parts.Length < 2)  				break;  			var cookie = new CookieInfo () {  				Name = parts [0]'  				Value = parts [1]  			};  			_entry.Response.Cookies.Add (cookie);  		}  		//TODO: Parse Cookies  	}  	_entry.Response.Headers.Add (new NameValuePairInfo () {  		Name = pair.Key'  		Value = pair.Value  	});  }  
Magic Number,SharpProxy,HarResponseInspector,C:\repos\in2bits_SharpProxy\SharpProxy.Net\HarResponseInspector.cs,OnPrologueReceived,The following statement contains a magic number: foreach (var pair in prologue.Headers) {  	if (pair.Key.ToLowerInvariant () == "cookie") {  		//http://www.nczonline.net/blog/2009/05/05/http-cookies-explained/  		var text = pair.Value;  		var parts = text.Split (new char[] {  			':'  		}' 2' StringSplitOptions.None);  		if (parts.Length == 1)  			continue;  		text = parts [1];  		var cookieStrings = text.Split (new string[] {  			"; "  		}' StringSplitOptions.RemoveEmptyEntries);  		foreach (var cookieString in cookieStrings) {  			var cookieParts = cookieString.Split (new char[] {  				' '  			}' StringSplitOptions.RemoveEmptyEntries);  			parts = cookieParts [0].Split (new char[] {  				'='  			}' 2' StringSplitOptions.None);  			if (parts.Length < 2)  				break;  			var cookie = new CookieInfo () {  				Name = parts [0]'  				Value = parts [1]  			};  			_entry.Response.Cookies.Add (cookie);  		}  		//TODO: Parse Cookies  	}  	_entry.Response.Headers.Add (new NameValuePairInfo () {  		Name = pair.Key'  		Value = pair.Value  	});  }  
Magic Number,SharpProxy,HarResponseInspector,C:\repos\in2bits_SharpProxy\SharpProxy.Net\HarResponseInspector.cs,OnPrologueReceived,The following statement contains a magic number: foreach (var pair in prologue.Headers) {  	if (pair.Key.ToLowerInvariant () == "cookie") {  		//http://www.nczonline.net/blog/2009/05/05/http-cookies-explained/  		var text = pair.Value;  		var parts = text.Split (new char[] {  			':'  		}' 2' StringSplitOptions.None);  		if (parts.Length == 1)  			continue;  		text = parts [1];  		var cookieStrings = text.Split (new string[] {  			"; "  		}' StringSplitOptions.RemoveEmptyEntries);  		foreach (var cookieString in cookieStrings) {  			var cookieParts = cookieString.Split (new char[] {  				' '  			}' StringSplitOptions.RemoveEmptyEntries);  			parts = cookieParts [0].Split (new char[] {  				'='  			}' 2' StringSplitOptions.None);  			if (parts.Length < 2)  				break;  			var cookie = new CookieInfo () {  				Name = parts [0]'  				Value = parts [1]  			};  			_entry.Response.Cookies.Add (cookie);  		}  		//TODO: Parse Cookies  	}  	_entry.Response.Headers.Add (new NameValuePairInfo () {  		Name = pair.Key'  		Value = pair.Value  	});  }  
Magic Number,SharpProxy,HarResponseInspector,C:\repos\in2bits_SharpProxy\SharpProxy.Net\HarResponseInspector.cs,OnPrologueReceived,The following statement contains a magic number: if (pair.Key.ToLowerInvariant () == "cookie") {  	//http://www.nczonline.net/blog/2009/05/05/http-cookies-explained/  	var text = pair.Value;  	var parts = text.Split (new char[] {  		':'  	}' 2' StringSplitOptions.None);  	if (parts.Length == 1)  		continue;  	text = parts [1];  	var cookieStrings = text.Split (new string[] {  		"; "  	}' StringSplitOptions.RemoveEmptyEntries);  	foreach (var cookieString in cookieStrings) {  		var cookieParts = cookieString.Split (new char[] {  			' '  		}' StringSplitOptions.RemoveEmptyEntries);  		parts = cookieParts [0].Split (new char[] {  			'='  		}' 2' StringSplitOptions.None);  		if (parts.Length < 2)  			break;  		var cookie = new CookieInfo () {  			Name = parts [0]'  			Value = parts [1]  		};  		_entry.Response.Cookies.Add (cookie);  	}  	//TODO: Parse Cookies  }  
Magic Number,SharpProxy,HarResponseInspector,C:\repos\in2bits_SharpProxy\SharpProxy.Net\HarResponseInspector.cs,OnPrologueReceived,The following statement contains a magic number: if (pair.Key.ToLowerInvariant () == "cookie") {  	//http://www.nczonline.net/blog/2009/05/05/http-cookies-explained/  	var text = pair.Value;  	var parts = text.Split (new char[] {  		':'  	}' 2' StringSplitOptions.None);  	if (parts.Length == 1)  		continue;  	text = parts [1];  	var cookieStrings = text.Split (new string[] {  		"; "  	}' StringSplitOptions.RemoveEmptyEntries);  	foreach (var cookieString in cookieStrings) {  		var cookieParts = cookieString.Split (new char[] {  			' '  		}' StringSplitOptions.RemoveEmptyEntries);  		parts = cookieParts [0].Split (new char[] {  			'='  		}' 2' StringSplitOptions.None);  		if (parts.Length < 2)  			break;  		var cookie = new CookieInfo () {  			Name = parts [0]'  			Value = parts [1]  		};  		_entry.Response.Cookies.Add (cookie);  	}  	//TODO: Parse Cookies  }  
Magic Number,SharpProxy,HarResponseInspector,C:\repos\in2bits_SharpProxy\SharpProxy.Net\HarResponseInspector.cs,OnPrologueReceived,The following statement contains a magic number: if (pair.Key.ToLowerInvariant () == "cookie") {  	//http://www.nczonline.net/blog/2009/05/05/http-cookies-explained/  	var text = pair.Value;  	var parts = text.Split (new char[] {  		':'  	}' 2' StringSplitOptions.None);  	if (parts.Length == 1)  		continue;  	text = parts [1];  	var cookieStrings = text.Split (new string[] {  		"; "  	}' StringSplitOptions.RemoveEmptyEntries);  	foreach (var cookieString in cookieStrings) {  		var cookieParts = cookieString.Split (new char[] {  			' '  		}' StringSplitOptions.RemoveEmptyEntries);  		parts = cookieParts [0].Split (new char[] {  			'='  		}' 2' StringSplitOptions.None);  		if (parts.Length < 2)  			break;  		var cookie = new CookieInfo () {  			Name = parts [0]'  			Value = parts [1]  		};  		_entry.Response.Cookies.Add (cookie);  	}  	//TODO: Parse Cookies  }  
Magic Number,SharpProxy,HarResponseInspector,C:\repos\in2bits_SharpProxy\SharpProxy.Net\HarResponseInspector.cs,OnPrologueReceived,The following statement contains a magic number: foreach (var cookieString in cookieStrings) {  	var cookieParts = cookieString.Split (new char[] {  		' '  	}' StringSplitOptions.RemoveEmptyEntries);  	parts = cookieParts [0].Split (new char[] {  		'='  	}' 2' StringSplitOptions.None);  	if (parts.Length < 2)  		break;  	var cookie = new CookieInfo () {  		Name = parts [0]'  		Value = parts [1]  	};  	_entry.Response.Cookies.Add (cookie);  }  
Magic Number,SharpProxy,HarResponseInspector,C:\repos\in2bits_SharpProxy\SharpProxy.Net\HarResponseInspector.cs,OnPrologueReceived,The following statement contains a magic number: foreach (var cookieString in cookieStrings) {  	var cookieParts = cookieString.Split (new char[] {  		' '  	}' StringSplitOptions.RemoveEmptyEntries);  	parts = cookieParts [0].Split (new char[] {  		'='  	}' 2' StringSplitOptions.None);  	if (parts.Length < 2)  		break;  	var cookie = new CookieInfo () {  		Name = parts [0]'  		Value = parts [1]  	};  	_entry.Response.Cookies.Add (cookie);  }  
Magic Number,SharpProxy,HarResponseInspector,C:\repos\in2bits_SharpProxy\SharpProxy.Net\HarResponseInspector.cs,OnPrologueReceived,The following statement contains a magic number: parts = cookieParts [0].Split (new char[] {  	'='  }' 2' StringSplitOptions.None);  
Magic Number,SharpProxy,HarResponseInspector,C:\repos\in2bits_SharpProxy\SharpProxy.Net\HarResponseInspector.cs,OnPrologueReceived,The following statement contains a magic number: if (parts.Length < 2)  	break;  
Magic Number,SharpProxy,HttpPrologue,C:\repos\in2bits_SharpProxy\SharpProxy.Net\HttpPrologue.cs,ReadHeaders,The following statement contains a magic number: while (line.Trim () != "") {  	var parts = line.Split (new[] {  		':'  	}' 2);  	if (parts.Length != 2)  		throw new Exception ("Invalid HttpHeader");  	var name = parts [0].Trim ();  	var value = parts [1].Trim ();  	headers.Add (new KeyValuePair<string' string> (name' value));  	line = stream.ReadLine ();  }  
Magic Number,SharpProxy,HttpPrologue,C:\repos\in2bits_SharpProxy\SharpProxy.Net\HttpPrologue.cs,ReadHeaders,The following statement contains a magic number: while (line.Trim () != "") {  	var parts = line.Split (new[] {  		':'  	}' 2);  	if (parts.Length != 2)  		throw new Exception ("Invalid HttpHeader");  	var name = parts [0].Trim ();  	var value = parts [1].Trim ();  	headers.Add (new KeyValuePair<string' string> (name' value));  	line = stream.ReadLine ();  }  
Magic Number,SharpProxy,HttpPrologue,C:\repos\in2bits_SharpProxy\SharpProxy.Net\HttpPrologue.cs,ReadHeaders,The following statement contains a magic number: if (parts.Length != 2)  	throw new Exception ("Invalid HttpHeader");  
Magic Number,SharpProxy,HttpRequestPrologue,C:\repos\in2bits_SharpProxy\SharpProxy.Net\HttpRequestPrologue.cs,ReadFirstLine,The following statement contains a magic number: if (parts.Length != 3)  	throw new Exception ("Invalid HttpRequest");  
Magic Number,SharpProxy,HttpRequestPrologue,C:\repos\in2bits_SharpProxy\SharpProxy.Net\HttpRequestPrologue.cs,ReadFirstLine,The following statement contains a magic number: Version = parts [2];  
Magic Number,SharpProxy,HttpResponsePrologue,C:\repos\in2bits_SharpProxy\SharpProxy.Net\HttpResponsePrologue.cs,ReadFirstLine,The following statement contains a magic number: if (parts.Length < 2)  	throw new Exception ("Invalid HttpRequest");  
Magic Number,SharpProxy,HttpResponsePrologue,C:\repos\in2bits_SharpProxy\SharpProxy.Net\HttpResponsePrologue.cs,ReadFirstLine,The following statement contains a magic number: if (parts.Length == 3)  	StatusDescription = parts [2];  
Magic Number,SharpProxy,HttpResponsePrologue,C:\repos\in2bits_SharpProxy\SharpProxy.Net\HttpResponsePrologue.cs,ReadFirstLine,The following statement contains a magic number: if (parts.Length == 3)  	StatusDescription = parts [2];  
Magic Number,SharpProxy,HttpResponsePrologue,C:\repos\in2bits_SharpProxy\SharpProxy.Net\HttpResponsePrologue.cs,ReadFirstLine,The following statement contains a magic number: StatusDescription = parts [2];  
Magic Number,SharpProxy,ProxyListener,C:\repos\in2bits_SharpProxy\SharpProxy.Net\ProxyListener.cs,Start,The following statement contains a magic number: _proxySocket.Listen (25);  
Magic Number,SharpProxy,StreamExtensions,C:\repos\in2bits_SharpProxy\SharpProxy.Net\StreamExtensions.cs,GetChunkLength,The following statement contains a magic number: try {  	chunkHeader = source.ReadLine ();  	var parts = chunkHeader.Split (new char[] {  		':'  	}' 2' StringSplitOptions.None);  	var sizeString = parts [0].Trim ();  	var chunkSize = int.Parse (sizeString' NumberStyles.AllowHexSpecifier);  	return chunkSize;  }  catch (Exception ex) {  	Debug.WriteLine ("CopyAllToAsync error: " + ex.Message);  	return -1;  }  
Magic Number,IPHelper,UdpRow,C:\repos\in2bits_SharpProxy\SharpProxy.Net\IPHelper\UdpRow.cs,UdpRow,The following statement contains a magic number: try {  	_processId = udpRow.owningPid;  	int localPort = (udpRow.localPort1 << 8) + (udpRow.localPort2) + (udpRow.localPort3 << 24) + (udpRow.localPort4 << 16);  	long localAddress = udpRow.localAddr;  	_localEndPoint = new IPEndPoint (localAddress' localPort);  }  catch {  }  
Magic Number,IPHelper,UdpRow,C:\repos\in2bits_SharpProxy\SharpProxy.Net\IPHelper\UdpRow.cs,UdpRow,The following statement contains a magic number: try {  	_processId = udpRow.owningPid;  	int localPort = (udpRow.localPort1 << 8) + (udpRow.localPort2) + (udpRow.localPort3 << 24) + (udpRow.localPort4 << 16);  	long localAddress = udpRow.localAddr;  	_localEndPoint = new IPEndPoint (localAddress' localPort);  }  catch {  }  
Magic Number,IPHelper,UdpRow,C:\repos\in2bits_SharpProxy\SharpProxy.Net\IPHelper\UdpRow.cs,UdpRow,The following statement contains a magic number: try {  	_processId = udpRow.owningPid;  	int localPort = (udpRow.localPort1 << 8) + (udpRow.localPort2) + (udpRow.localPort3 << 24) + (udpRow.localPort4 << 16);  	long localAddress = udpRow.localAddr;  	_localEndPoint = new IPEndPoint (localAddress' localPort);  }  catch {  }  
Magic Number,LogProxy.MakeCertWrapper,CertificateProvider,C:\repos\in2bits_SharpProxy\SharpProxy.Net\LogProxy.MakeCertWrapper\CertificateProvider.cs,GetCertificateForHost,The following statement contains a magic number: if ((certificate = FindCertificateByName (storeName' storeLocation' hostCertName)) == null) {  	lock (syncLock) {  		if ((certificate = FindCertificateByName (storeName' storeLocation' hostCertName)) == null) {  			//this.Log(MessageLevel.Info' "Creating host certificate for " + host);  			CreateCertificateForHost (hostCertName);  			if ((certificate = FindCertificateByName (storeName' storeLocation' hostCertName)) == null) {  				Thread.Sleep (1000);  				if ((certificate = FindCertificateByName (storeName' storeLocation' hostCertName)) == null) {  					throw new InvalidOperationException ("Could not find certificate after it was created");  				}  			}  		}  	}  }  
Magic Number,LogProxy.MakeCertWrapper,CertificateProvider,C:\repos\in2bits_SharpProxy\SharpProxy.Net\LogProxy.MakeCertWrapper\CertificateProvider.cs,GetCertificateForHost,The following statement contains a magic number: lock (syncLock) {  	if ((certificate = FindCertificateByName (storeName' storeLocation' hostCertName)) == null) {  		//this.Log(MessageLevel.Info' "Creating host certificate for " + host);  		CreateCertificateForHost (hostCertName);  		if ((certificate = FindCertificateByName (storeName' storeLocation' hostCertName)) == null) {  			Thread.Sleep (1000);  			if ((certificate = FindCertificateByName (storeName' storeLocation' hostCertName)) == null) {  				throw new InvalidOperationException ("Could not find certificate after it was created");  			}  		}  	}  }  
Magic Number,LogProxy.MakeCertWrapper,CertificateProvider,C:\repos\in2bits_SharpProxy\SharpProxy.Net\LogProxy.MakeCertWrapper\CertificateProvider.cs,GetCertificateForHost,The following statement contains a magic number: if ((certificate = FindCertificateByName (storeName' storeLocation' hostCertName)) == null) {  	//this.Log(MessageLevel.Info' "Creating host certificate for " + host);  	CreateCertificateForHost (hostCertName);  	if ((certificate = FindCertificateByName (storeName' storeLocation' hostCertName)) == null) {  		Thread.Sleep (1000);  		if ((certificate = FindCertificateByName (storeName' storeLocation' hostCertName)) == null) {  			throw new InvalidOperationException ("Could not find certificate after it was created");  		}  	}  }  
Magic Number,LogProxy.MakeCertWrapper,CertificateProvider,C:\repos\in2bits_SharpProxy\SharpProxy.Net\LogProxy.MakeCertWrapper\CertificateProvider.cs,GetCertificateForHost,The following statement contains a magic number: if ((certificate = FindCertificateByName (storeName' storeLocation' hostCertName)) == null) {  	Thread.Sleep (1000);  	if ((certificate = FindCertificateByName (storeName' storeLocation' hostCertName)) == null) {  		throw new InvalidOperationException ("Could not find certificate after it was created");  	}  }  
Magic Number,LogProxy.MakeCertWrapper,CertificateProvider,C:\repos\in2bits_SharpProxy\SharpProxy.Net\LogProxy.MakeCertWrapper\CertificateProvider.cs,GetCertificateForHost,The following statement contains a magic number: Thread.Sleep (1000);  
