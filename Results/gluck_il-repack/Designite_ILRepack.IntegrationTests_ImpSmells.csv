Implementation smell,Namespace,Class,File,Method,Description
Long Statement,ILRepack.IntegrationTests.NuGet,Package,D:\research\architectureSmells\repos\gluck_il-repack\ILRepack.IntegrationTests\NuGet\Package.cs,WithArtifact,The length of the statement  "            return WithMatcher(file => String.Equals(file' artifact.Replace('/'' Path.DirectorySeparatorChar)' StringComparison.InvariantCultureIgnoreCase)); " is 145.
Long Statement,ILRepack.IntegrationTests.NuGet,RepackNuGetTests,D:\research\architectureSmells\repos\gluck_il-repack\ILRepack.IntegrationTests\NuGet\RepackNuGetTests.cs,VerifiesMergesBclFine,The length of the statement  "                .WithExtraArgs(@"/targetplatform:v4'C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.0"); " is 121.
Long Statement,ILRepack.IntegrationTests.NuGet,RepackNuGetTests,D:\research\architectureSmells\repos\gluck_il-repack\ILRepack.IntegrationTests\NuGet\RepackNuGetTests.cs,RepackPlatform,The length of the statement  "            TestHelpers.DoRepackForCmd(new []{"/out:"+Tmp("test.dll")' "/lib:"+tempDirectory}.Concat(platform.Args).Concat(list.Select(Tmp).OrderBy(x => x))); " is 146.
Long Statement,ILRepack.IntegrationTests.NuGet,TestHelpers,D:\research\architectureSmells\repos\gluck_il-repack\ILRepack.IntegrationTests\NuGet\TestHelpers.cs,ReloadAndCheckReferences,The length of the statement  "            var outputFile = AssemblyDefinition.ReadAssembly(repackOptions.OutputFile' new ReaderParameters(ReadingMode.Immediate)); " is 120.
Long Statement,ILRepack.IntegrationTests.NuGet,TestHelpers,D:\research\architectureSmells\repos\gluck_il-repack\ILRepack.IntegrationTests\NuGet\TestHelpers.cs,ReloadAndCheckReferences,The length of the statement  "            var mergedFiles = repackOptions.ResolveFiles().Select(f => AssemblyDefinition.ReadAssembly(f' new ReaderParameters(ReadingMode.Deferred))); " is 139.
Long Statement,ILRepack.IntegrationTests.NuGet,TestHelpers,D:\research\architectureSmells\repos\gluck_il-repack\ILRepack.IntegrationTests\NuGet\TestHelpers.cs,ReloadAndCheckReferences,The length of the statement  "            foreach (var a in outputFile.MainModule.AssemblyReferences.Where(x => mergedFiles.Any(y => repackOptions.KeepOtherVersionReferences ? x.FullName == y.FullName : x.Name == y.Name.Name))) " is 185.
Magic Number,ILRepack.IntegrationTests.Helpers,ObservableProcess,D:\research\architectureSmells\repos\gluck_il-repack\ILRepack.IntegrationTests\Helpers\ObservableProcess.cs,ObservableProcess,The following statement contains a magic number: Observable.Start(() =>              {                  int exitCode;                  try                  {                      process.WaitForExit(60 * 1000);                  }                  finally                  {                      // recreate flush logic from System.Diagnostics.Process                      WaitUntilEndOfFile("output");                      WaitUntilEndOfFile("error");                        exitCode = process.ExitCode;                      process.OutputDataReceived -= OnReceived;                      process.ErrorDataReceived -= OnReceived;                      process.Close();                  }                    output.OnCompleted();                    if (exitCode != 0 && throwOnNonZeroExitCode)                  {                      var error = string.Join("\n"' output.ToArray().First());                      exit.OnError(new Exception(error));                  }                  else                  {                      exit.OnNext(exitCode);                      exit.OnCompleted();                  }              }' Scheduler.Default);
Magic Number,ILRepack.IntegrationTests.Helpers,ObservableProcess,D:\research\architectureSmells\repos\gluck_il-repack\ILRepack.IntegrationTests\Helpers\ObservableProcess.cs,ObservableProcess,The following statement contains a magic number: Observable.Start(() =>              {                  int exitCode;                  try                  {                      process.WaitForExit(60 * 1000);                  }                  finally                  {                      // recreate flush logic from System.Diagnostics.Process                      WaitUntilEndOfFile("output");                      WaitUntilEndOfFile("error");                        exitCode = process.ExitCode;                      process.OutputDataReceived -= OnReceived;                      process.ErrorDataReceived -= OnReceived;                      process.Close();                  }                    output.OnCompleted();                    if (exitCode != 0 && throwOnNonZeroExitCode)                  {                      var error = string.Join("\n"' output.ToArray().First());                      exit.OnError(new Exception(error));                  }                  else                  {                      exit.OnNext(exitCode);                      exit.OnCompleted();                  }              }' Scheduler.Default);
Magic Number,ILRepack.IntegrationTests.Helpers,ObservableProcess,D:\research\architectureSmells\repos\gluck_il-repack\ILRepack.IntegrationTests\Helpers\ObservableProcess.cs,ReparseAsciiDataAsUtf8,The following statement contains a magic number: var bytes = new byte[input.Length * 2];
Magic Number,ILRepack.IntegrationTests.Helpers,ObservableProcess,D:\research\architectureSmells\repos\gluck_il-repack\ILRepack.IntegrationTests\Helpers\ObservableProcess.cs,ReparseAsciiDataAsUtf8,The following statement contains a magic number: var msb = (byte)(c & 0xFF00 >> 16);
Magic Number,ILRepack.IntegrationTests.NuGet,NuGetHelpers,D:\research\architectureSmells\repos\gluck_il-repack\ILRepack.IntegrationTests\NuGet\NuGetHelpers.cs,CreateDownloadObservable,The following statement contains a magic number: return Observable.Create<byte[]>(o => {                  var result = new ReplaySubject<byte[]>();                  var inner = Observable.Using(() => new WebClient()' wc => {                      var obs = Observable                          .FromEventPattern<                              DownloadDataCompletedEventHandler'                              DownloadDataCompletedEventArgs>(                                  h => wc.DownloadDataCompleted += h'                                  h => wc.DownloadDataCompleted -= h)                          .Take(1);                      wc.DownloadDataAsync(uri);                      return obs;                  }).Subscribe(ep => {                      if (ep.EventArgs.Cancelled) {                          result.OnCompleted();                      } else {                          if (ep.EventArgs.Error != null) {                              result.OnError(ep.EventArgs.Error);                          } else {                              result.OnNext(ep.EventArgs.Result);                              result.OnCompleted();                          }                      }                  }' ex => {                      result.OnError(ex);                  });                  return new CompositeDisposable(inner' result.Subscribe(o));              }).Retry(5);
Magic Number,ILRepack.IntegrationTests.Peverify,PeverifyHelper,D:\research\architectureSmells\repos\gluck_il-repack\ILRepack.IntegrationTests\Peverify\PeverifyHelper.cs,FindVerifier,The following statement contains a magic number: parts == null || parts.Length != 3
Magic Number,ILRepack.IntegrationTests.Peverify,PeverifyHelper,D:\research\architectureSmells\repos\gluck_il-repack\ILRepack.IntegrationTests\Peverify\PeverifyHelper.cs,ToErrorCodes,The following statement contains a magic number: return output.SelectMany(e =>              {                  var i = e.IndexOf("[HRESULT 0x");                  if (i != -1)                      return Observable.Return(e.Substring(i + 11' 8).ToLowerInvariant());                  i = e.IndexOf("[MD](0x");                  if (i != -1)                      return Observable.Return(e.Substring(i + 7' 8).ToLowerInvariant());                  i = e.IndexOf("(Error: 0x");                  if (i != -1)                      return Observable.Return(e.Substring(i + 10' 8).ToLowerInvariant());                    return Observable.Empty<string>();              }              ).Distinct();
Magic Number,ILRepack.IntegrationTests.Peverify,PeverifyHelper,D:\research\architectureSmells\repos\gluck_il-repack\ILRepack.IntegrationTests\Peverify\PeverifyHelper.cs,ToErrorCodes,The following statement contains a magic number: return output.SelectMany(e =>              {                  var i = e.IndexOf("[HRESULT 0x");                  if (i != -1)                      return Observable.Return(e.Substring(i + 11' 8).ToLowerInvariant());                  i = e.IndexOf("[MD](0x");                  if (i != -1)                      return Observable.Return(e.Substring(i + 7' 8).ToLowerInvariant());                  i = e.IndexOf("(Error: 0x");                  if (i != -1)                      return Observable.Return(e.Substring(i + 10' 8).ToLowerInvariant());                    return Observable.Empty<string>();              }              ).Distinct();
Magic Number,ILRepack.IntegrationTests.Peverify,PeverifyHelper,D:\research\architectureSmells\repos\gluck_il-repack\ILRepack.IntegrationTests\Peverify\PeverifyHelper.cs,ToErrorCodes,The following statement contains a magic number: return output.SelectMany(e =>              {                  var i = e.IndexOf("[HRESULT 0x");                  if (i != -1)                      return Observable.Return(e.Substring(i + 11' 8).ToLowerInvariant());                  i = e.IndexOf("[MD](0x");                  if (i != -1)                      return Observable.Return(e.Substring(i + 7' 8).ToLowerInvariant());                  i = e.IndexOf("(Error: 0x");                  if (i != -1)                      return Observable.Return(e.Substring(i + 10' 8).ToLowerInvariant());                    return Observable.Empty<string>();              }              ).Distinct();
Magic Number,ILRepack.IntegrationTests.Peverify,PeverifyHelper,D:\research\architectureSmells\repos\gluck_il-repack\ILRepack.IntegrationTests\Peverify\PeverifyHelper.cs,ToErrorCodes,The following statement contains a magic number: return output.SelectMany(e =>              {                  var i = e.IndexOf("[HRESULT 0x");                  if (i != -1)                      return Observable.Return(e.Substring(i + 11' 8).ToLowerInvariant());                  i = e.IndexOf("[MD](0x");                  if (i != -1)                      return Observable.Return(e.Substring(i + 7' 8).ToLowerInvariant());                  i = e.IndexOf("(Error: 0x");                  if (i != -1)                      return Observable.Return(e.Substring(i + 10' 8).ToLowerInvariant());                    return Observable.Empty<string>();              }              ).Distinct();
Magic Number,ILRepack.IntegrationTests.Peverify,PeverifyHelper,D:\research\architectureSmells\repos\gluck_il-repack\ILRepack.IntegrationTests\Peverify\PeverifyHelper.cs,ToErrorCodes,The following statement contains a magic number: return output.SelectMany(e =>              {                  var i = e.IndexOf("[HRESULT 0x");                  if (i != -1)                      return Observable.Return(e.Substring(i + 11' 8).ToLowerInvariant());                  i = e.IndexOf("[MD](0x");                  if (i != -1)                      return Observable.Return(e.Substring(i + 7' 8).ToLowerInvariant());                  i = e.IndexOf("(Error: 0x");                  if (i != -1)                      return Observable.Return(e.Substring(i + 10' 8).ToLowerInvariant());                    return Observable.Empty<string>();              }              ).Distinct();
Magic Number,ILRepack.IntegrationTests.Peverify,PeverifyHelper,D:\research\architectureSmells\repos\gluck_il-repack\ILRepack.IntegrationTests\Peverify\PeverifyHelper.cs,ToErrorCodes,The following statement contains a magic number: return output.SelectMany(e =>              {                  var i = e.IndexOf("[HRESULT 0x");                  if (i != -1)                      return Observable.Return(e.Substring(i + 11' 8).ToLowerInvariant());                  i = e.IndexOf("[MD](0x");                  if (i != -1)                      return Observable.Return(e.Substring(i + 7' 8).ToLowerInvariant());                  i = e.IndexOf("(Error: 0x");                  if (i != -1)                      return Observable.Return(e.Substring(i + 10' 8).ToLowerInvariant());                    return Observable.Empty<string>();              }              ).Distinct();
