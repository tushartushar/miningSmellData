Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Lucene.Net.Classification.Utils,DatasetSplitter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Classification\Utils\DatasetSplitter.cs,Split,Cyclomatic complexity of the method is 12
Long Parameter List,Lucene.Net.Classification,IClassifier,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Classification\IClassifier.cs,Train,The method has 5 parameters.
Long Parameter List,Lucene.Net.Classification,IClassifier,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Classification\IClassifier.cs,Train,The method has 5 parameters.
Long Parameter List,Lucene.Net.Classification,KNearestNeighborClassifier,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Classification\KNearestNeighborClassifier.cs,Train,The method has 5 parameters.
Long Parameter List,Lucene.Net.Classification,KNearestNeighborClassifier,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Classification\KNearestNeighborClassifier.cs,Train,The method has 5 parameters.
Long Parameter List,Lucene.Net.Classification,SimpleNaiveBayesClassifier,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Classification\SimpleNaiveBayesClassifier.cs,Train,The method has 5 parameters.
Long Parameter List,Lucene.Net.Classification,SimpleNaiveBayesClassifier,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Classification\SimpleNaiveBayesClassifier.cs,Train,The method has 5 parameters.
Long Parameter List,Lucene.Net.Classification.Utils,DatasetSplitter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Classification\Utils\DatasetSplitter.cs,Split,The method has 6 parameters.
Long Statement,Lucene.Net.Classification,SimpleNaiveBayesClassifier,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Classification\SimpleNaiveBayesClassifier.cs,CountDocsWithClass,The length of the statement  "		q.Add (new BooleanClause (new WildcardQuery (new Term (_classFieldName' WildcardQuery.WILDCARD_STRING.ToString ()))' Occur.MUST)); " is 130.
Long Statement,Lucene.Net.Classification.Utils,DatasetSplitter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Classification\Utils\DatasetSplitter.cs,Split,The length of the statement  "	IndexWriter testWriter = new IndexWriter (testIndex' new IndexWriterConfig (Util.LuceneVersion.LUCENE_CURRENT' analyzer)); " is 122.
Long Statement,Lucene.Net.Classification.Utils,DatasetSplitter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Classification\Utils\DatasetSplitter.cs,Split,The length of the statement  "	IndexWriter cvWriter = new IndexWriter (crossValidationIndex' new IndexWriterConfig (Util.LuceneVersion.LUCENE_CURRENT' analyzer)); " is 131.
Long Statement,Lucene.Net.Classification.Utils,DatasetSplitter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Classification\Utils\DatasetSplitter.cs,Split,The length of the statement  "	IndexWriter trainingWriter = new IndexWriter (trainingIndex' new IndexWriterConfig (Util.LuceneVersion.LUCENE_CURRENT' analyzer)); " is 130.
Magic Number,Lucene.Net.Classification.Utils,DatasetSplitter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Classification\Utils\DatasetSplitter.cs,Split,The following statement contains a magic number: try {  	int size = originalIndex.MaxDoc;  	IndexSearcher indexSearcher = new IndexSearcher (originalIndex);  	TopDocs topDocs = indexSearcher.Search (new MatchAllDocsQuery ()' Int32.MaxValue);  	// set the type to be indexed' stored' with term vectors  	FieldType ft = new FieldType (TextField.TYPE_STORED);  	ft.StoreTermVectors = true;  	ft.StoreTermVectorOffsets = true;  	ft.StoreTermVectorPositions = true;  	int b = 0;  	// iterate over existing documents  	foreach (ScoreDoc scoreDoc in topDocs.ScoreDocs) {  		// create a new document for indexing  		Document doc = new Document ();  		if (fieldNames != null && fieldNames.Length > 0) {  			foreach (string fieldName in fieldNames) {  				doc.Add (new Field (fieldName' originalIndex.Document (scoreDoc.Doc).GetField (fieldName).ToString ()' ft));  			}  		} else {  			foreach (IIndexableField storableField in originalIndex.Document (scoreDoc.Doc).Fields) {  				if (storableField.GetReaderValue () != null) {  					doc.Add (new Field (storableField.Name' storableField.GetReaderValue ()' ft));  				} else if (storableField.GetBinaryValue () != null) {  					doc.Add (new Field (storableField.Name' storableField.GetBinaryValue ()' ft));  				} else if (storableField.GetStringValue () != null) {  					doc.Add (new Field (storableField.Name' storableField.GetStringValue ()' ft));  				} else if (storableField.GetNumericValue () != null) {  					doc.Add (new Field (storableField.Name' storableField.GetNumericValue ().ToString ()' ft));  				}  			}  		}  		// add it to one of the IDXs  		if (b % 2 == 0 && testWriter.MaxDoc < size * _testRatio) {  			testWriter.AddDocument (doc);  		} else if (cvWriter.MaxDoc < size * _crossValidationRatio) {  			cvWriter.AddDocument (doc);  		} else {  			trainingWriter.AddDocument (doc);  		}  		b++;  	}  } catch (Exception e) {  	throw new IOException ("Exceptio in DatasetSplitter"' e);  } finally {  	testWriter.Commit ();  	cvWriter.Commit ();  	trainingWriter.Commit ();  	// close IWs  	testWriter.Dispose ();  	cvWriter.Dispose ();  	trainingWriter.Dispose ();  }  
Magic Number,Lucene.Net.Classification.Utils,DatasetSplitter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Classification\Utils\DatasetSplitter.cs,Split,The following statement contains a magic number: foreach (ScoreDoc scoreDoc in topDocs.ScoreDocs) {  	// create a new document for indexing  	Document doc = new Document ();  	if (fieldNames != null && fieldNames.Length > 0) {  		foreach (string fieldName in fieldNames) {  			doc.Add (new Field (fieldName' originalIndex.Document (scoreDoc.Doc).GetField (fieldName).ToString ()' ft));  		}  	} else {  		foreach (IIndexableField storableField in originalIndex.Document (scoreDoc.Doc).Fields) {  			if (storableField.GetReaderValue () != null) {  				doc.Add (new Field (storableField.Name' storableField.GetReaderValue ()' ft));  			} else if (storableField.GetBinaryValue () != null) {  				doc.Add (new Field (storableField.Name' storableField.GetBinaryValue ()' ft));  			} else if (storableField.GetStringValue () != null) {  				doc.Add (new Field (storableField.Name' storableField.GetStringValue ()' ft));  			} else if (storableField.GetNumericValue () != null) {  				doc.Add (new Field (storableField.Name' storableField.GetNumericValue ().ToString ()' ft));  			}  		}  	}  	// add it to one of the IDXs  	if (b % 2 == 0 && testWriter.MaxDoc < size * _testRatio) {  		testWriter.AddDocument (doc);  	} else if (cvWriter.MaxDoc < size * _crossValidationRatio) {  		cvWriter.AddDocument (doc);  	} else {  		trainingWriter.AddDocument (doc);  	}  	b++;  }  
Magic Number,Lucene.Net.Classification.Utils,DatasetSplitter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Classification\Utils\DatasetSplitter.cs,Split,The following statement contains a magic number: if (b % 2 == 0 && testWriter.MaxDoc < size * _testRatio) {  	testWriter.AddDocument (doc);  } else if (cvWriter.MaxDoc < size * _crossValidationRatio) {  	cvWriter.AddDocument (doc);  } else {  	trainingWriter.AddDocument (doc);  }  
