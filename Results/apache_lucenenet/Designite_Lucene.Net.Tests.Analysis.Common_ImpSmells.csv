Implementation smell,Namespace,Class,File,Method,Description
Long Method,Lucene.Net.Analysis.CharFilters,HTMLStripCharFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\HTMLStripCharFilterTest.cs,TestMalformedHTML,The method has 116 lines of code.
Long Method,Lucene.Net.Analysis.CharFilters,TestMappingCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestMappingCharFilter.cs,TestRandomMaps2,The method has 186 lines of code.
Long Method,Lucene.Net.Analysis.Core,TestAllAnalyzersHaveFactories,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestAllAnalyzersHaveFactories.cs,Test,The method has 108 lines of code.
Long Method,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The method has 2746 lines of code.
Long Method,Lucene.Net.Analysis.El,TestGreekStemmer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\El\TestGreekStemmer.cs,TestVerbs,The method has 152 lines of code.
Long Method,Lucene.Net.Analysis.Synonym,TestSynonymMapFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymMapFilter.cs,SlowSynMatcher,The method has 135 lines of code.
Long Method,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_ReadCII,The method has 191 lines of code.
Long Method,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_Read_CII_Exception,The method has 141 lines of code.
Long Method,Lucene.Net.Analysis.Util,TestCharArrayMap_,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArrayMap.cs,TestModifyOnUnmodifiable,The method has 160 lines of code.
Long Method,Lucene.Net.Analysis.Util,TestCharArraySet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArraySet.cs,TestModifyOnUnmodifiable,The method has 130 lines of code.
Complex Method,Lucene.Net.Analysis.CharFilters,TestMappingCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestMappingCharFilter.cs,TestRandomMaps2,Cyclomatic complexity of the method is 32
Complex Method,Lucene.Net.Analysis.Core,TestAllAnalyzersHaveFactories,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestAllAnalyzersHaveFactories.cs,Test,Cyclomatic complexity of the method is 10
Complex Method,Lucene.Net.Analysis.Core,TestRandomChains,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestRandomChains.cs,BeforeClass,Cyclomatic complexity of the method is 8
Complex Method,Lucene.Net.Analysis.Core,TestStopFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestStopFilter.cs,TestStopPositons,Cyclomatic complexity of the method is 8
Complex Method,Lucene.Net.Analysis.Miscellaneous,TestStemmerOverrideFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestStemmerOverrideFilter.cs,TestRandomRealisticWhiteSpace,Cyclomatic complexity of the method is 8
Complex Method,Lucene.Net.Analysis.Sinks,TestTeeSinkTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Sinks\TestTeeSinkTokenFilter.cs,Performance,Cyclomatic complexity of the method is 11
Complex Method,Lucene.Net.Analysis.Synonym,TestSynonymMapFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymMapFilter.cs,Verify,Cyclomatic complexity of the method is 10
Complex Method,Lucene.Net.Analysis.Synonym,TestSynonymMapFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymMapFilter.cs,SlowSynMatcher,Cyclomatic complexity of the method is 24
Complex Method,Lucene.Net.Analysis.Synonym,TestSynonymMapFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymMapFilter.cs,TestRandom,Cyclomatic complexity of the method is 8
Complex Method,Lucene.Net.Analysis.Util,TestRollingCharBuffer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestRollingCharBuffer.cs,Test,Cyclomatic complexity of the method is 15
Long Parameter List,Lucene.Net.Analysis.Miscellaneous,TestCapitalizationFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestCapitalizationFilter.cs,AssertCapitalizesTo,The method has 9 parameters. Parameters: tokenizer' expected' onlyFirstWord' keep' forceFirstLetter' okPrefix' minWordLength' maxWordCount' maxTokenLength
Long Parameter List,Lucene.Net.Analysis.Miscellaneous,TestCapitalizationFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestCapitalizationFilter.cs,AssertCapitalizesTo,The method has 9 parameters. Parameters: input' expected' onlyFirstWord' keep' forceFirstLetter' okPrefix' minWordLength' maxWordCount' maxTokenLength
Long Parameter List,Lucene.Net.Analysis.Miscellaneous,TestCapitalizationFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestCapitalizationFilter.cs,AssertCapitalizesToKeyword,The method has 9 parameters. Parameters: input' expected' onlyFirstWord' keep' forceFirstLetter' okPrefix' minWordLength' maxWordCount' maxTokenLength
Long Parameter List,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestNGrams,The method has 5 parameters. Parameters: minGram' maxGram' s' nonTokenChars' edgesOnly
Long Parameter List,Lucene.Net.Analysis.NGram,NGramTokenizerAnonymousInnerClassHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,NGramTokenizerAnonymousInnerClassHelper,The method has 6 parameters. Parameters: TEST_VERSION_CURRENT' java' minGram' maxGram' edgesOnly' nonTokenChars
Long Parameter List,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestPatterns,The method has 7 parameters. Parameters: input' regexes' tokens' startOffsets' endOffsets' positions' preserveOriginal
Long Parameter List,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,checkOutput,The method has 5 parameters. Parameters: input' pattern' replacement' expectedOutput' expectedIndexMatchedOutput
Long Parameter List,Lucene.Net.Analysis.Payloads,DelimitedPayloadTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Payloads\DelimitedPayloadTokenFilterTest.cs,AssertTermEquals,The method has 5 parameters. Parameters: expected' stream' termAtt' payAtt' expectPay
Long Parameter List,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,shingleFilterTest,The method has 6 parameters. Parameters: maxSize' tokensToShingle' tokensToCompare' positionIncrements' types' outputUnigrams
Long Parameter List,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,shingleFilterTest,The method has 7 parameters. Parameters: minSize' maxSize' tokensToShingle' tokensToCompare' positionIncrements' types' outputUnigrams
Long Parameter List,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,shingleFilterTest,The method has 8 parameters. Parameters: minSize' maxSize' tokensToShingle' tokensToCompare' positionIncrements' types' outputUnigrams' outputUnigramsIfNoShingles
Long Parameter List,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,shingleFilterTest,The method has 8 parameters. Parameters: tokenSeparator' minSize' maxSize' tokensToShingle' tokensToCompare' positionIncrements' types' outputUnigrams
Long Parameter List,Lucene.Net.Analysis.Synonym,TestSlowSynonymFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSlowSynonymFilter.cs,AssertTokenizesTo,The method has 6 parameters. Parameters: dict' input' expected' startOffsets' endOffsets' posIncs
Long Identifier,Lucene.Net.Analysis.Core,TestAllAnalyzersHaveFactories,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestAllAnalyzersHaveFactories.cs,,The length of the parameter deprecatedDuplicatedComponents is 30.
Long Identifier,Lucene.Net.Analysis.Position,PositionFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Position\PositionFilterTest.cs,,The length of the parameter TEST_TOKEN_POSITION_INCREMENTS is 30.
Long Identifier,Lucene.Net.Analysis.Position,PositionFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Position\PositionFilterTest.cs,,The length of the parameter TEST_TOKEN_NON_ZERO_POSITION_INCREMENTS is 39.
Long Identifier,Lucene.Net.Analysis.Position,PositionFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Position\PositionFilterTest.cs,,The length of the parameter SIX_GRAM_NO_POSITIONS_INCREMENTS is 32.
Long Identifier,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,,The length of the parameter UNIGRAM_ONLY_POSITION_INCREMENTS is 32.
Long Identifier,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,,The length of the parameter BI_GRAM_POSITION_INCREMENTS_WITH_HOLES is 38.
Long Identifier,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,,The length of the parameter BI_GRAM_TOKENS_WITHOUT_UNIGRAMS is 31.
Long Identifier,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,,The length of the parameter BI_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS is 44.
Long Identifier,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,,The length of the parameter BI_GRAM_TYPES_WITHOUT_UNIGRAMS is 30.
Long Identifier,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,,The length of the parameter BI_GRAM_TOKENS_WITH_HOLES_WITHOUT_UNIGRAMS is 42.
Long Identifier,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,,The length of the parameter BI_GRAM_POSITION_INCREMENTS_WITH_HOLES_WITHOUT_UNIGRAMS is 55.
Long Identifier,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,,The length of the parameter TRI_GRAM_TOKENS_WITHOUT_UNIGRAMS is 32.
Long Identifier,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,,The length of the parameter TRI_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS is 45.
Long Identifier,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,,The length of the parameter TRI_GRAM_TYPES_WITHOUT_UNIGRAMS is 31.
Long Identifier,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,,The length of the parameter FOUR_GRAM_TOKENS_WITHOUT_UNIGRAMS is 33.
Long Identifier,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,,The length of the parameter FOUR_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS is 46.
Long Identifier,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,,The length of the parameter FOUR_GRAM_TYPES_WITHOUT_UNIGRAMS is 32.
Long Identifier,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,,The length of the parameter TRI_GRAM_POSITION_INCREMENTS_MIN_TRI_GRAM is 41.
Long Identifier,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,,The length of the parameter TRI_GRAM_TOKENS_WITHOUT_UNIGRAMS_MIN_TRI_GRAM is 45.
Long Identifier,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,,The length of the parameter TRI_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS_MIN_TRI_GRAM is 58.
Long Identifier,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,,The length of the parameter TRI_GRAM_TYPES_WITHOUT_UNIGRAMS_MIN_TRI_GRAM is 44.
Long Identifier,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,,The length of the parameter FOUR_GRAM_POSITION_INCREMENTS_MIN_TRI_GRAM is 42.
Long Identifier,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,,The length of the parameter FOUR_GRAM_TOKENS_WITHOUT_UNIGRAMS_MIN_TRI_GRAM is 46.
Long Identifier,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,,The length of the parameter FOUR_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS_MIN_TRI_GRAM is 59.
Long Identifier,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,,The length of the parameter FOUR_GRAM_TYPES_WITHOUT_UNIGRAMS_MIN_TRI_GRAM is 45.
Long Identifier,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,,The length of the parameter FOUR_GRAM_TOKENS_MIN_FOUR_GRAM is 30.
Long Identifier,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,,The length of the parameter FOUR_GRAM_POSITION_INCREMENTS_MIN_FOUR_GRAM is 43.
Long Identifier,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,,The length of the parameter FOUR_GRAM_TOKENS_WITHOUT_UNIGRAMS_MIN_FOUR_GRAM is 47.
Long Identifier,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,,The length of the parameter FOUR_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS_MIN_FOUR_GRAM is 60.
Long Identifier,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,,The length of the parameter FOUR_GRAM_TYPES_WITHOUT_UNIGRAMS_MIN_FOUR_GRAM is 46.
Long Identifier,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,,The length of the parameter BI_GRAM_POSITION_INCREMENTS_NO_SEPARATOR is 40.
Long Identifier,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,,The length of the parameter BI_GRAM_TOKENS_WITHOUT_UNIGRAMS_NO_SEPARATOR is 44.
Long Identifier,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,,The length of the parameter BI_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS_NO_SEPARATOR is 57.
Long Identifier,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,,The length of the parameter BI_GRAM_TYPES_WITHOUT_UNIGRAMS_NO_SEPARATOR is 43.
Long Identifier,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,,The length of the parameter TRI_GRAM_POSITION_INCREMENTS_NO_SEPARATOR is 41.
Long Identifier,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,,The length of the parameter TRI_GRAM_TOKENS_WITHOUT_UNIGRAMS_NO_SEPARATOR is 45.
Long Identifier,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,,The length of the parameter TRI_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS_NO_SEPARATOR is 58.
Long Identifier,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,,The length of the parameter TRI_GRAM_TYPES_WITHOUT_UNIGRAMS_NO_SEPARATOR is 44.
Long Identifier,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,,The length of the parameter BI_GRAM_POSITION_INCREMENTS_ALT_SEPARATOR is 41.
Long Identifier,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,,The length of the parameter BI_GRAM_TOKENS_WITHOUT_UNIGRAMS_ALT_SEPARATOR is 45.
Long Identifier,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,,The length of the parameter BI_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS_ALT_SEPARATOR is 58.
Long Identifier,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,,The length of the parameter BI_GRAM_TYPES_WITHOUT_UNIGRAMS_ALT_SEPARATOR is 44.
Long Identifier,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,,The length of the parameter TRI_GRAM_POSITION_INCREMENTS_ALT_SEPARATOR is 42.
Long Identifier,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,,The length of the parameter TRI_GRAM_TOKENS_WITHOUT_UNIGRAMS_ALT_SEPARATOR is 46.
Long Identifier,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,,The length of the parameter TRI_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS_ALT_SEPARATOR is 59.
Long Identifier,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,,The length of the parameter TRI_GRAM_TYPES_WITHOUT_UNIGRAMS_ALT_SEPARATOR is 45.
Long Identifier,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,,The length of the parameter TRI_GRAM_TOKENS_NULL_SEPARATOR is 30.
Long Identifier,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,,The length of the parameter TRI_GRAM_POSITION_INCREMENTS_NULL_SEPARATOR is 43.
Long Identifier,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,,The length of the parameter TEST_TOKEN_POS_INCR_EQUAL_TO_N is 30.
Long Identifier,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,,The length of the parameter TRI_GRAM_TOKENS_POS_INCR_EQUAL_TO_N is 35.
Long Identifier,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,,The length of the parameter TRI_GRAM_POSITION_INCREMENTS_POS_INCR_EQUAL_TO_N is 48.
Long Identifier,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,,The length of the parameter TRI_GRAM_TYPES_POS_INCR_EQUAL_TO_N is 34.
Long Identifier,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,,The length of the parameter TRI_GRAM_TOKENS_POS_INCR_EQUAL_TO_N_WITHOUT_UNIGRAMS is 52.
Long Identifier,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,,The length of the parameter TRI_GRAM_POSITION_INCREMENTS_POS_INCR_EQUAL_TO_N_WITHOUT_UNIGRAMS is 65.
Long Identifier,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,,The length of the parameter TRI_GRAM_TYPES_POS_INCR_EQUAL_TO_N_WITHOUT_UNIGRAMS is 51.
Long Identifier,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,,The length of the parameter TEST_TOKEN_POS_INCR_GREATER_THAN_N is 34.
Long Identifier,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,,The length of the parameter TRI_GRAM_TOKENS_POS_INCR_GREATER_THAN_N is 39.
Long Identifier,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,,The length of the parameter TRI_GRAM_POSITION_INCREMENTS_POS_INCR_GREATER_THAN_N is 52.
Long Identifier,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,,The length of the parameter TRI_GRAM_TYPES_POS_INCR_GREATER_THAN_N is 38.
Long Identifier,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,,The length of the parameter TRI_GRAM_TOKENS_POS_INCR_GREATER_THAN_N_WITHOUT_UNIGRAMS is 56.
Long Identifier,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,,The length of the parameter TRI_GRAM_POSITION_INCREMENTS_POS_INCR_GREATER_THAN_N_WITHOUT_UNIGRAMS is 69.
Long Identifier,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,,The length of the parameter TRI_GRAM_TYPES_POS_INCR_GREATER_THAN_N_WITHOUT_UNIGRAMS is 55.
Long Identifier,Lucene.Net.Analysis.Util,TestCharArraySet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArraySet.cs,TestUnionWithObject,The length of the parameter mixedExistingNonExistingValuesAsObject is 38.
Long Identifier,Lucene.Net.Analysis.Util,TestCharArraySet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArraySet.cs,TestUnionWithCharArray,The length of the parameter mixedExistingNonExistingValues is 30.
Long Identifier,Lucene.Net.Analysis.Util,TestCharArraySet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArraySet.cs,TestUnionWithString,The length of the parameter mixedExistingNonExistingValues is 30.
Long Identifier,Lucene.Net.Analysis.Util,TestCharArraySet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArraySet.cs,TestUnionWithCharSequence,The length of the parameter mixedExistingNonExistingValues is 30.
Long Statement,Lucene.Net.Analysis.Br,TestBrazilianStemmer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Br\TestBrazilianStemmer.cs,TestStemExclusionTable,The length of the statement  "            BrazilianAnalyzer a = new BrazilianAnalyzer(TEST_VERSION_CURRENT' CharArraySet.EMPTY_SET' new CharArraySet(TEST_VERSION_CURRENT' AsSet("quintessência")' false)); " is 161.
Long Statement,Lucene.Net.Analysis.Br,TestBrazilianStemmer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Br\TestBrazilianStemmer.cs,TestWithKeywordAttribute,The length of the statement  "            BrazilianStemFilter filter = new BrazilianStemFilter(new SetKeywordMarkerFilter(new LowerCaseTokenizer(TEST_VERSION_CURRENT' new StringReader("Brasília Brasilia"))' set)); " is 171.
Long Statement,Lucene.Net.Analysis.Ca,TestCatalanAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Ca\TestCatalanAnalyzer.cs,TestContractions,The length of the statement  "            AssertAnalyzesTo(a' "Diccionari de l'Institut d'Estudis Catalans"' new string[] { "diccion"' "inst"' "estud"' "catalan" }); " is 123.
Long Statement,Lucene.Net.Analysis.CharFilters,HTMLStripCharFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\HTMLStripCharFilterTest.cs,TestHTML,The length of the statement  "            assertTrue("Entity not properly escaped"' str.IndexOf("&lt;"' StringComparison.Ordinal) == -1); //there is one > in the text " is 124.
Long Statement,Lucene.Net.Analysis.CharFilters,HTMLStripCharFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\HTMLStripCharFilterTest.cs,TestHTML,The length of the statement  "            assertTrue("Forrest should have been stripped out"' str.IndexOf("forrest"' StringComparison.Ordinal) == -1 && str.IndexOf("Forrest"' StringComparison.Ordinal) == -1); " is 166.
Long Statement,Lucene.Net.Analysis.CharFilters,HTMLStripCharFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\HTMLStripCharFilterTest.cs,TestHTML,The length of the statement  "            assertTrue("File should start with 'Welcome to Solr' after trimming"' str.Trim().StartsWith("Welcome to Solr"' StringComparison.Ordinal)); " is 138.
Long Statement,Lucene.Net.Analysis.CharFilters,HTMLStripCharFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\HTMLStripCharFilterTest.cs,TestHTML,The length of the statement  "            assertTrue("File should start with 'Foundation.' after trimming"' str.Trim().EndsWith("Foundation."' StringComparison.Ordinal)); " is 128.
Long Statement,Lucene.Net.Analysis.CharFilters,HTMLStripCharFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\HTMLStripCharFilterTest.cs,TestReserved,The length of the statement  "            assertTrue("Escaped tag not preserved: " + result.IndexOf("reserved"' StringComparison.Ordinal)' result.IndexOf("reserved"' StringComparison.Ordinal) == 9); " is 156.
Long Statement,Lucene.Net.Analysis.CharFilters,HTMLStripCharFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\HTMLStripCharFilterTest.cs,TestReserved,The length of the statement  "            assertTrue("Escaped tag not preserved: " + result.IndexOf("reserved"' 15' StringComparison.Ordinal)' result.IndexOf("reserved"' 15' StringComparison.Ordinal) == 38); " is 165.
Long Statement,Lucene.Net.Analysis.CharFilters,HTMLStripCharFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\HTMLStripCharFilterTest.cs,TestReserved,The length of the statement  "            assertTrue("Escaped tag not preserved: " + result.IndexOf("reserved"' 41' StringComparison.Ordinal)' result.IndexOf("reserved"' 41' StringComparison.Ordinal) == 54); " is 165.
Long Statement,Lucene.Net.Analysis.CharFilters,HTMLStripCharFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\HTMLStripCharFilterTest.cs,TestMalformedHTML,The length of the statement  "                "<a href=http://dmoz.org/cgi-bin/add.cgi?where=/arts/\" class=lu style=\"font-size: 9px\" target=dmoz>Submit a Site</a>"' " is 121.
Long Statement,Lucene.Net.Analysis.CharFilters,HTMLStripCharFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\HTMLStripCharFilterTest.cs,TestMalformedHTML,The length of the statement  "                "<a href=javascript:ioSwitch('p8'''http://www.csmonitor.com/') title=expand id=e8 class=expanded rel=http://www.csmonitor.com/>Christian Science"' " is 146.
Long Statement,Lucene.Net.Analysis.CharFilters,HTMLStripCharFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\HTMLStripCharFilterTest.cs,TestMalformedHTML,The length of the statement  "                "<link rel=\"alternate\" type=\"application/rss+xml\" title=\"San Francisco \" 2008 RSS Feed\" href=\"http://2008.sf.wordcamp.org/feed/\" />"' " is 142.
Long Statement,Lucene.Net.Analysis.CharFilters,HTMLStripCharFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\HTMLStripCharFilterTest.cs,TestMalformedHTML,The length of the statement  "                "<a href=\" http://www.surgery4was.happyhost.org/video-of-arthroscopic-knee-surgery symptoms.html' heat congestive heart failure <a href=\" http://www.symptoms1bad.happyhost.org/canine"' " is 186.
Long Statement,Lucene.Net.Analysis.CharFilters,HTMLStripCharFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\HTMLStripCharFilterTest.cs,TestMalformedHTML,The length of the statement  "                "<a href=\" http://www.surgery4was.happyhost.org/video-of-arthroscopic-knee-surgery symptoms.html' heat congestive heart failure <a href=\" http://www.symptoms1bad.happyhost.org/canine"' " is 186.
Long Statement,Lucene.Net.Analysis.CharFilters,HTMLStripCharFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\HTMLStripCharFilterTest.cs,TestMalformedHTML,The length of the statement  "                "<link title=\"^\\\" 21Sta's Blog\" rel=\"search\"  type=\"application/opensearchdescription+xml\"  href=\"http://21sta.com/blog/inc/opensearch.php\" />"' " is 154.
Long Statement,Lucene.Net.Analysis.CharFilters,HTMLStripCharFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\HTMLStripCharFilterTest.cs,TestMalformedHTML,The length of the statement  "                "<a href='/modern-furniture'   ' id='21txt' class='offtab'   onMouseout=\"this.className='offtab';  return true;\" onMouseover=\"this.className='ontab';  return true;\">"' " is 171.
Long Statement,Lucene.Net.Analysis.CharFilters,HTMLStripCharFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\HTMLStripCharFilterTest.cs,TestMalformedHTML,The length of the statement  "                "<a href='http://alievi.wordpress.com/category/01-todos-posts/' style='font-size: 275%; padding: 1px; margin: 1px;' title='01 - Todos Post's (83)'>"' " is 149.
Long Statement,Lucene.Net.Analysis.CharFilters,HTMLStripCharFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\HTMLStripCharFilterTest.cs,TestMalformedHTML,The length of the statement  "                "The <a href=<a href=\"http://www.advancedmd.com>medical\">http://www.advancedmd.com>medical</a> practice software</a>"' " is 120.
Long Statement,Lucene.Net.Analysis.CharFilters,HTMLStripCharFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\HTMLStripCharFilterTest.cs,TestMalformedHTML,The length of the statement  "                "<a href=\"node/21426\" class=\"clipTitle2\" title=\"Levi.com/BMX 2008 Clip of the Week 29 \"Morgan Wade Leftover Clips\"\">Levi.com/BMX 2008 Clip of the Week 29..."' " is 166.
Long Statement,Lucene.Net.Analysis.CharFilters,HTMLStripCharFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\HTMLStripCharFilterTest.cs,TestMalformedHTML,The length of the statement  "                "<a href=#\" ondragstart=\"return false\" onclick=\"window.external.AddFavorite('http://www.amazingtextures.com'' 'Amazing Textures');return false\" onmouseover=\"window.status='Add to Favorites';return true\">Add to Favorites"' " is 228.
Long Statement,Lucene.Net.Analysis.CharFilters,HTMLStripCharFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\HTMLStripCharFilterTest.cs,TestMalformedHTML,The length of the statement  "                "<li class=\"farsi\"><a title=\"A'13?\" alt=\"A'13?\" href=\"http://www.america.gov/persian\" alt=\"\" name=\"A'13?\"A'13? title=\"A'13?\">A'13?</a></li>"' " is 155.
Long Statement,Lucene.Net.Analysis.CharFilters,HTMLStripCharFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\HTMLStripCharFilterTest.cs,TestMalformedHTML,The length of the statement  "                "<a rel=\"nofollow\" href=\"http://anissanina31.skyrock.com/1895039493-Hi-tout-le-monde.html\" title=\" Hi' tout le monde !>#</a>"' " is 131.
Long Statement,Lucene.Net.Analysis.CharFilters,HTMLStripCharFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\HTMLStripCharFilterTest.cs,TestMalformedHTML,The length of the statement  "                "<a href=\"http://annunciharleydavidsonusate.myblog.it/\" title=\"Annunci Moto e Accessori Harley Davidson\" target=\"_blank\"><img src=\"http://annunciharleydavidsonusate.myblog.it/images/Antipixel.gif\" /></a>"' " is 213.
Long Statement,Lucene.Net.Analysis.CharFilters,HTMLStripCharFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\HTMLStripCharFilterTest.cs,TestMalformedHTML,The length of the statement  "                "<a href=\"video/addvideo&v=120838887181\" onClick=\"return confirm('Are you sure you want  add this video to your profile? If it exists some video in your profile will be overlapped by this video!!')\" \" onmouseover=\"this.className='border2'\" onmouseout=\"this.className=''\">"' " is 282.
Long Statement,Lucene.Net.Analysis.CharFilters,HTMLStripCharFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\HTMLStripCharFilterTest.cs,TestMalformedHTML,The length of the statement  "                "<input type=\"image\" src=\"http://apologyindex.com/ThemeFiles/83401-72905/images/btn_search.gif\"value=\"Search\" name=\"Search\" alt=\"Search\" class=\"searchimage\" onclick=\"incom ='&sc=' + document.getElementById('sel').value ; var dt ='&dt=' + document.getElementById('dt').value; var searchKeyword = document.getElementById('q').value ; searchKeyword = searchKeyword.replace(/\\s/g'''); if (searchKeyword.length < 3){alert('Nothing to search. Search keyword should contain atleast 3 chars.'); return false; } var al='&al=' +  document.getElementById('advancedlink').style.display ;  document.location.href='http://apologyindex.com/search.aspx?q=' + document.getElementById('q').value + incom + dt + al;\" />"' " is 717.
Long Statement,Lucene.Net.Analysis.CharFilters,HTMLStripCharFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\HTMLStripCharFilterTest.cs,TestMalformedHTML,The length of the statement  "                "<input type=\"image\" src=\"images/afbe.gif\" width=\"22\" height=\"22\"  hspace=\"4\" title=\"Add to Favorite\" alt=\"Add to Favorite\"onClick=\" if(window.sidebar){ window.sidebar.addPanel(document.title'location.href'''); }else if(window.external){ window.external.AddFavorite(location.href'document.title); }else if(window.opera&&window.print) { return true; }\">"' " is 370.
Long Statement,Lucene.Net.Analysis.CharFilters,HTMLStripCharFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\HTMLStripCharFilterTest.cs,TestMalformedHTML,The length of the statement  "                "<area shape=\"rect\" coords=\"12'153'115'305\" href=\"http://statenislandtalk.com/v-web/gallery/Osmundsen-family\"Art's Norwegian Roots in Rogaland\">"' " is 153.
Long Statement,Lucene.Net.Analysis.CharFilters,HTMLStripCharFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\HTMLStripCharFilterTest.cs,TestMalformedHTML,The length of the statement  "                "<a href=\"javascript:calendar_window=window.open('/calendar.aspx?formname=frmCalendar.txtDate'''calendar_window'''width=154'height=188');calendar_window.focus()\">"' " is 166.
Long Statement,Lucene.Net.Analysis.CharFilters,HTMLStripCharFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\HTMLStripCharFilterTest.cs,TestMalformedHTML,The length of the statement  "                "<a href=http://www.azimprimerie.fr/flash/backup/lewes-zip-code/savage-model-110-manual.html title=savage model 110 manual rel=dofollow>"' " is 138.
Long Statement,Lucene.Net.Analysis.CharFilters,HTMLStripCharFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\HTMLStripCharFilterTest.cs,TestMalformedHTML,The length of the statement  "                "<A href='newslink.php?news_link=http%3A%2F%2Fwww.worldnetdaily.com%2Findex.php%3Ffa%3DPAGE.view%26pageId%3D85729&news_title=Florida QB makes 'John 3:16' hottest Google search Tebow inscribed Bible reference on eye black for championship game' TARGET=_blank>"' " is 260.
Long Statement,Lucene.Net.Analysis.CharFilters,HTMLStripCharFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\HTMLStripCharFilterTest.cs,TestMalformedHTML,The length of the statement  "                "<a class=\"comment-link\" href=\"https://www.blogger.com/comment.g?blogID=19402125&postID=114070605958684588\"location.href=https://www.blogger.com/comment.g?blogID=19402125&postID=114070605958684588;>"' " is 204.
Long Statement,Lucene.Net.Analysis.CharFilters,HTMLStripCharFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\HTMLStripCharFilterTest.cs,TestMalformedHTML,The length of the statement  "                "<a href=\"http://bhaa.ie/calendar/event.php?eid=20081203150127531\"\">BHAA Eircom 2 &amp; 5 miles CC combined start</a>"' " is 122.
Long Statement,Lucene.Net.Analysis.CharFilters,HTMLStripCharFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\HTMLStripCharFilterTest.cs,TestMalformedHTML,The length of the statement  "                "<a href=\"http://people.tribe.net/wolfmana\" onClick='setClick(\"Application[tribe].Person[bb7df210-9dc0-478c-917f-436b896bcb79]\")'\" title=\"Mana\">"' " is 153.
Long Statement,Lucene.Net.Analysis.CharFilters,HTMLStripCharFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\HTMLStripCharFilterTest.cs,TestMalformedHTML,The length of the statement  "                "<a  href=\"http://blog.edu-cyberpg.com/ct.ashx?id=6143c528-080c-4bb2-b765-5ec56c8256d3&url=http%3a%2f%2fwww.gsa.ac.uk%2fmackintoshsketchbook%2f\"\" eudora=\"autourl\">"' " is 170.
Long Statement,Lucene.Net.Analysis.CharFilters,HTMLStripCharFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\HTMLStripCharFilterTest.cs,TestMalformedHTML,The length of the statement  "                "<![if supportMisalignedColumns]>\n<tr height=0 style='display:none'>\n<td width=64 style='width:48pt'></td>\n</tr>\n<![endif]>"' " is 129.
Long Statement,Lucene.Net.Analysis.CharFilters,HTMLStripCharFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\HTMLStripCharFilterTest.cs,TestBufferOverflow,The length of the statement  "            TextReader reader = new HTMLStripCharFilter(new StreamReader(new MemoryStream(testBuilder.ToString().GetBytes(Encoding.UTF8)))); " is 128.
Long Statement,Lucene.Net.Analysis.CharFilters,HTMLStripCharFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\HTMLStripCharFilterTest.cs,AppendChars,The length of the statement  "                testBuilder.Append('a').Append(' '); //tack on enough to go beyond the mark readahead limit' since <?> makes HTMLStripCharFilter think it is a processing instruction " is 165.
Long Statement,Lucene.Net.Analysis.CharFilters,HTMLStripCharFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\HTMLStripCharFilterTest.cs,AssertHTMLStripsTo,The length of the statement  "                    throw; // LUCENENET: CA2200: Rethrow to preserve stack details (https://docs.microsoft.com/en-us/visualstudio/code-quality/ca2200-rethrow-to-preserve-stack-details) " is 164.
Long Statement,Lucene.Net.Analysis.CharFilters,TestHTMLStripCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestHTMLStripCharFilterFactory.cs,TestNothingChanged,The length of the statement  "            AssertTokenStreamContents(ts' new string[] { "this"' "is"' "only"' "a"' "test." }' new int[] { 0' 5' 8' 13' 15 }' new int[] { 4' 7' 12' 14' 20 }); " is 146.
Long Statement,Lucene.Net.Analysis.CharFilters,TestHTMLStripCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestHTMLStripCharFilterFactory.cs,TestNoEscapedTags,The length of the statement  "            AssertTokenStreamContents(ts' new string[] { "this"' "is"' "only"' "a"' "test." }' new int[] { 3' 12' 18' 27' 32 }' new int[] { 11' 14' 26' 28' 41 }); " is 150.
Long Statement,Lucene.Net.Analysis.CharFilters,TestHTMLStripCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestHTMLStripCharFilterFactory.cs,TestEscapedTags,The length of the statement  "            AssertTokenStreamContents(ts' new string[] { "<u>this</u>"' "is"' "only"' "a"' "<I>test</I>." }' new int[] { 0' 12' 18' 27' 29 }' new int[] { 11' 14' 26' 28' 41 }); " is 164.
Long Statement,Lucene.Net.Analysis.CharFilters,TestHTMLStripCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestHTMLStripCharFilterFactory.cs,TestSeparatorOnlyEscapedTags,The length of the statement  "            AssertTokenStreamContents(ts' new string[] { "this"' "is"' "only"' "a"' "test." }' new int[] { 3' 12' 18' 27' 32 }' new int[] { 11' 14' 26' 28' 41 }); " is 150.
Long Statement,Lucene.Net.Analysis.CharFilters,TestHTMLStripCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestHTMLStripCharFilterFactory.cs,TestEmptyEscapedTags,The length of the statement  "            AssertTokenStreamContents(ts' new string[] { "this"' "is"' "only"' "a"' "test." }' new int[] { 3' 12' 18' 27' 32 }' new int[] { 11' 14' 26' 28' 41 }); " is 150.
Long Statement,Lucene.Net.Analysis.CharFilters,TestHTMLStripCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestHTMLStripCharFilterFactory.cs,TestSingleEscapedTag,The length of the statement  "            AssertTokenStreamContents(ts' new string[] { "this"' "is"' "<b>only</b>"' "a"' "test." }' new int[] { 3' 12' 15' 27' 32 }' new int[] { 11' 14' 26' 28' 41 }); " is 157.
Long Statement,Lucene.Net.Analysis.CharFilters,TestMappingCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestMappingCharFilter.cs,TestTokenStream,The length of the statement  "            AssertTokenStreamContents(ts' new string[] { "i"' "i"' "jj"' "kkk"' "llll"' "cc"' "b"' "a" }' new int[] { 0' 2' 4' 6' 8' 11' 16' 20 }' new int[] { 1' 3' 5' 7' 10' 15' 19' 22 }' testString.Length); " is 196.
Long Statement,Lucene.Net.Analysis.CharFilters,TestMappingCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestMappingCharFilter.cs,TestChained,The length of the statement  "            AssertTokenStreamContents(ts' new string[] { "a"' "llllllll"' "i" }' new int[] { 0' 5' 8 }' new int[] { 4' 7' 9 }' testString.Length); " is 134.
Long Statement,Lucene.Net.Analysis.CharFilters,TestMappingCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestMappingCharFilter.cs,TestRandomMaps2,The length of the statement  "                            Debug.Assert(inputOffsets.Count == output.Length' "inputOffsets.size()=" + inputOffsets.Count + " vs output.length()=" + output.Length); " is 136.
Long Statement,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestJa1,The length of the statement  "            AssertAnalyzesTo(analyzer' "一二三四五六七八九十"' new string[] { "一二"' "二三"' "三四"' "四五"' "五六"' "六七"' "七八"' "八九"' "九十" }' new int[] { 0' 1' 2' 3' 4' 5' 6' 7' 8 }' new int[] { 2' 3' 4' 5' 6' 7' 8' 9' 10 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1 }); " is 361.
Long Statement,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestJa2,The length of the statement  "            AssertAnalyzesTo(analyzer' "一 二三四 五六七八九 十"' new string[] { "一"' "二三"' "三四"' "五六"' "六七"' "七八"' "八九"' "十" }' new int[] { 0' 2' 3' 6' 7' 8' 9' 12 }' new int[] { 1' 4' 5' 8' 9' 10' 11' 13 }' new string[] { "<SINGLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1 }); " is 338.
Long Statement,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestC,The length of the statement  "            AssertAnalyzesTo(analyzer' "abc defgh ijklmn opqrstu vwxy z"' new string[] { "abc"' "defgh"' "ijklmn"' "opqrstu"' "vwxy"' "z" }' new int[] { 0' 4' 10' 17' 25' 30 }' new int[] { 3' 9' 16' 24' 29' 31 }' new string[] { "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>" }' new int[] { 1' 1' 1' 1' 1' 1 }); " is 334.
Long Statement,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestFinalOffset,The length of the statement  "            AssertAnalyzesTo(analyzer' "あい"' new string[] { "あい" }' new int[] { 0 }' new int[] { 2 }' new string[] { "<DOUBLE>" }' new int[] { 1 }); " is 136.
Long Statement,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestFinalOffset,The length of the statement  "            AssertAnalyzesTo(analyzer' "あい   "' new string[] { "あい" }' new int[] { 0 }' new int[] { 2 }' new string[] { "<DOUBLE>" }' new int[] { 1 }); " is 139.
Long Statement,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestFinalOffset,The length of the statement  "            AssertAnalyzesTo(analyzer' "test"' new string[] { "test" }' new int[] { 0 }' new int[] { 4 }' new string[] { "<ALPHANUM>" }' new int[] { 1 }); " is 142.
Long Statement,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestFinalOffset,The length of the statement  "            AssertAnalyzesTo(analyzer' "test   "' new string[] { "test" }' new int[] { 0 }' new int[] { 4 }' new string[] { "<ALPHANUM>" }' new int[] { 1 }); " is 145.
Long Statement,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestFinalOffset,The length of the statement  "            AssertAnalyzesTo(analyzer' "あいtest"' new string[] { "あい"' "test" }' new int[] { 0' 2 }' new int[] { 2' 6 }' new string[] { "<DOUBLE>"' "<ALPHANUM>" }' new int[] { 1' 1 }); " is 171.
Long Statement,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestFinalOffset,The length of the statement  "            AssertAnalyzesTo(analyzer' "testあい    "' new string[] { "test"' "あい" }' new int[] { 0' 4 }' new int[] { 4' 6 }' new string[] { "<ALPHANUM>"' "<DOUBLE>" }' new int[] { 1' 1 }); " is 175.
Long Statement,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestMix,The length of the statement  "            AssertAnalyzesTo(analyzer' "あいうえおabcかきくけこ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "abc"' "かき"' "きく"' "くけ"' "けこ" }' new int[] { 0' 1' 2' 3' 5' 8' 9' 10' 11 }' new int[] { 2' 3' 4' 5' 8' 10' 11' 12' 13 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1 }); " is 372.
Long Statement,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestMix2,The length of the statement  "            AssertAnalyzesTo(analyzer' "あいうえおabんcかきくけ こ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "ab"' "ん"' "c"' "かき"' "きく"' "くけ"' "こ" }' new int[] { 0' 1' 2' 3' 5' 7' 8' 9' 10' 11' 14 }' new int[] { 2' 3' 4' 5' 7' 8' 9' 11' 12' 13' 15 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<SINGLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 }); " is 427.
Long Statement,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestNonIdeographic,The length of the statement  "            AssertAnalyzesTo(analyzer' "一 روبرت موير"' new string[] { "一"' "روبرت"' "موير" }' new int[] { 0' 2' 8 }' new int[] { 1' 7' 12 }' new string[] { "<SINGLE>"' "<ALPHANUM>"' "<ALPHANUM>" }' new int[] { 1' 1' 1 }); " is 209.
Long Statement,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestNonIdeographicNonLetter,The length of the statement  "            AssertAnalyzesTo(analyzer' "一 رُوبرت موير"' new string[] { "一"' "رُوبرت"' "موير" }' new int[] { 0' 2' 9 }' new int[] { 1' 8' 13 }' new string[] { "<SINGLE>"' "<ALPHANUM>"' "<ALPHANUM>" }' new int[] { 1' 1' 1 }); " is 211.
Long Statement,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestSurrogates,The length of the statement  "            AssertAnalyzesTo(analyzer' "𩬅艱鍟䇹愯瀛"' new string[] { "𩬅艱"' "艱鍟"' "鍟䇹"' "䇹愯"' "愯瀛" }' new int[] { 0' 2' 3' 4' 5 }' new int[] { 3' 4' 5' 6' 7 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>" }' new int[] { 1' 1' 1' 1' 1 }); " is 250.
Long Statement,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestReusableTokenStream,The length of the statement  "            AssertAnalyzesTo(analyzer' "あいうえおabcかきくけこ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "abc"' "かき"' "きく"' "くけ"' "けこ" }' new int[] { 0' 1' 2' 3' 5' 8' 9' 10' 11 }' new int[] { 2' 3' 4' 5' 8' 10' 11' 12' 13 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1 }); " is 372.
Long Statement,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestReusableTokenStream,The length of the statement  "            AssertAnalyzesTo(analyzer' "あいうえおabんcかきくけ こ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "ab"' "ん"' "c"' "かき"' "きく"' "くけ"' "こ" }' new int[] { 0' 1' 2' 3' 5' 7' 8' 9' 10' 11' 14 }' new int[] { 2' 3' 4' 5' 7' 8' 9' 11' 12' 13' 15 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<SINGLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 }); " is 427.
Long Statement,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestSingleChar,The length of the statement  "            AssertAnalyzesTo(analyzer' "一"' new string[] { "一" }' new int[] { 0 }' new int[] { 1 }' new string[] { "<SINGLE>" }' new int[] { 1 }); " is 134.
Long Statement,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestTokenStream,The length of the statement  "            AssertAnalyzesTo(analyzer' "一丁丂"' new string[] { "一丁"' "丁丂" }' new int[] { 0' 1 }' new int[] { 2' 3 }' new string[] { "<DOUBLE>"' "<DOUBLE>" }' new int[] { 1' 1 }); " is 164.
Long Statement,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestSingleChar2,The length of the statement  "            AssertAnalyzesTo(analyzer' "一"' new string[] { "一" }' new int[] { 0 }' new int[] { 1 }' new string[] { "<SINGLE>" }' new int[] { 1 }); " is 134.
Long Statement,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestHuge,The length of the statement  "            AssertAnalyzesTo(analyzer' "多くの学生が試験に落ちた" + "多くの学生が試験に落ちた" + "多くの学生が試験に落ちた" + "多くの学生が試験に落ちた" + "多くの学生が試験に落ちた" + "多くの学生が試験に落ちた" + "多くの学生が試験に落ちた" + "多くの学生が試験に落ちた" + "多くの学生が試験に落ちた" + "多くの学生が試験に落ちた" + "多くの学生が試験に落ちた"' new string[] { "多く"' "くの"' "の学"' "学生"' "生が"' "が試"' "試験"' "験に"' "に落"' "落ち"' "ちた"' "た多"' "多く"' "くの"' "の学"' "学生"' "生が"' "が試"' "試験"' "験に"' "に落"' "落ち"' "ちた"' "た多"' "多く"' "くの"' "の学"' "学生"' "生が"' "が試"' "試験"' "験に"' "に落"' "落ち"' "ちた"' "た多"' "多く"' "くの"' "の学"' "学生"' "生が"' "が試"' "試験"' "験に"' "に落"' "落ち"' "ちた"' "た多"' "多く"' "くの"' "の学"' "学生"' "生が"' "が試"' "試験"' "験に"' "に落"' "落ち"' "ちた"' "た多"' "多く"' "くの"' "の学"' "学生"' "生が"' "が試"' "試験"' "験に"' "に落"' "落ち"' "ちた"' "た多"' "多く"' "くの"' "の学"' "学生"' "生が"' "が試"' "試験"' "験に"' "に落"' "落ち"' "ちた"' "た多"' "多く"' "くの"' "の学"' "学生"' "生が"' "が試"' "試験"' "験に"' "に落"' "落ち"' "ちた"' "た多"' "多く"' "くの"' "の学"' "学生"' "生が"' "が試"' "試験"' "験に"' "に落"' "落ち"' "ちた"' "た多"' "多く"' "くの"' "の学"' "学生"' "生が"' "が試"' "試験"' "験に"' "に落"' "落ち"' "ちた"' "た多"' "多く"' "くの"' "の学"' "学生"' "生が"' "が試"' "試験"' "験に"' "に落"' "落ち"' "ちた" }); " is 1016.
Long Statement,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestHanOnly,The length of the statement  "            AssertAnalyzesTo(a' "多くの学生が試験に落ちた。"' new string[] { "多"' "く"' "の"' "学生"' "が"' "試験"' "に"' "落"' "ち"' "た" }' new int[] { 0' 1' 2' 3' 5' 6' 8' 9' 10' 11 }' new int[] { 1' 2' 3' 5' 6' 8' 9' 10' 11' 12 }' new string[] { "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<DOUBLE>"' "<HIRAGANA>"' "<DOUBLE>"' "<HIRAGANA>"' "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 }); " is 448.
Long Statement,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestAllScripts,The length of the statement  "            AssertAnalyzesTo(a' "多くの学生が試験に落ちた。"' new string[] { "多く"' "くの"' "の学"' "学生"' "生が"' "が試"' "試験"' "験に"' "に落"' "落ち"' "ちた" }); " is 120.
Long Statement,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsAllScripts,The length of the statement  "            AssertAnalyzesTo(unibiAnalyzer' "多くの学生が試験に落ちた。"' new string[] { "多"' "多く"' "く"' "くの"' "の"' "の学"' "学"' "学生"' "生"' "生が"' "が"' "が試"' "試"' "試験"' "験"' "験に"' "に"' "に落"' "落"' "落ち"' "ち"' "ちた"' "た" }' new int[] { 0' 0' 1' 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11 }' new int[] { 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11' 11' 12' 12 }' new string[] { "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1 }' new int[] { 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1 }); " is 826.
Long Statement,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsHanOnly,The length of the statement  "            AssertAnalyzesTo(a' "多くの学生が試験に落ちた。"' new string[] { "多"' "く"' "の"' "学"' "学生"' "生"' "が"' "試"' "試験"' "験"' "に"' "落"' "ち"' "た" }' new int[] { 0' 1' 2' 3' 3' 4' 5' 6' 6' 7' 8' 9' 10' 11 }' new int[] { 1' 2' 3' 4' 5' 5' 6' 7' 8' 8' 9' 10' 11' 12 }' new string[] { "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<HIRAGANA>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<HIRAGANA>"' "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 1' 1' 1 }' new int[] { 1' 1' 1' 1' 2' 1' 1' 1' 2' 1' 1' 1' 1' 1 }); " is 564.
Long Statement,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsHuge,The length of the statement  "            AssertAnalyzesTo(unibiAnalyzer' "多くの学生が試験に落ちた" + "多くの学生が試験に落ちた" + "多くの学生が試験に落ちた" + "多くの学生が試験に落ちた" + "多くの学生が試験に落ちた" + "多くの学生が試験に落ちた" + "多くの学生が試験に落ちた" + "多くの学生が試験に落ちた" + "多くの学生が試験に落ちた" + "多くの学生が試験に落ちた" + "多くの学生が試験に落ちた"' new string[] { "多"' "多く"' "く"' "くの"' "の"' "の学"' "学"' "学生"' "生"' "生が"' "が"' "が試"' "試"' "試験"' "験"' "験に"' "に"' "に落"' "落"' "落ち"' "ち"' "ちた"' "た"' "た多"' "多"' "多く"' "く"' "くの"' "の"' "の学"' "学"' "学生"' "生"' "生が"' "が"' "が試"' "試"' "試験"' "験"' "験に"' "に"' "に落"' "落"' "落ち"' "ち"' "ちた"' "た"' "た多"' "多"' "多く"' "く"' "くの"' "の"' "の学"' "学"' "学生"' "生"' "生が"' "が"' "が試"' "試"' "試験"' "験"' "験に"' "に"' "に落"' "落"' "落ち"' "ち"' "ちた"' "た"' "た多"' "多"' "多く"' "く"' "くの"' "の"' "の学"' "学"' "学生"' "生"' "生が"' "が"' "が試"' "試"' "試験"' "験"' "験に"' "に"' "に落"' "落"' "落ち"' "ち"' "ちた"' "た"' "た多"' "多"' "多く"' "く"' "くの"' "の"' "の学"' "学"' "学生"' "生"' "生が"' "が"' "が試"' "試"' "試験"' "験"' "験に"' "に"' "に落"' "落"' "落ち"' "ち"' "ちた"' "た"' "た多"' "多"' "多く"' "く"' "くの"' "の"' "の学"' "学"' "学生"' "生"' "生が"' "が"' "が試"' "試"' "試験"' "験"' "験に"' "に"' "に落"' "落"' "落ち"' "ち"' "ちた"' "た"' "た多"' "多"' "多く"' "く"' "くの"' "の"' "の学"' "学"' "学生"' "生"' "生が"' "が"' "が試"' "試"' "試験"' "験"' "験に"' "に"' "に落"' "落"' "落ち"' "ち"' "ちた"' "た"' "た多"' "多"' "多く"' "く"' "くの"' "の"' "の学"' "学"' "学生"' "生"' "生が"' "が"' "が試"' "試"' "試験"' "験"' "験に"' "に"' "に落"' "落"' "落ち"' "ち"' "ちた"' "た"' "た多"' "多"' "多く"' "く"' "くの"' "の"' "の学"' "学"' "学生"' "生"' "生が"' "が"' "が試"' "試"' "試験"' "験"' "験に"' "に"' "に落"' "落"' "落ち"' "ち"' "ちた"' "た"' "た多"' "多"' "多く"' "く"' "くの"' "の"' "の学"' "学"' "学生"' "生"' "生が"' "が"' "が試"' "試"' "試験"' "験"' "験に"' "に"' "に落"' "落"' "落ち"' "ち"' "ちた"' "た"' "た多"' "多"' "多く"' "く"' "くの"' "の"' "の学"' "学"' "学生"' "生"' "生が"' "が"' "が試"' "試"' "試験"' "験"' "験に"' "に"' "に落"' "落"' "落ち"' "ち"' "ちた"' "た" }); " is 1681.
Long Statement,Lucene.Net.Analysis.Cjk,TestCJKBigramFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilterFactory.cs,TestHanOnlyUnigrams,The length of the statement  "            AssertTokenStreamContents(stream' new string[] { "多"' "く"' "の"' "学"' "学生"' "生"' "が"' "試"' "試験"' "験"' "に"' "落"' "ち"' "た" }); " is 123.
Long Statement,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestJa1,The length of the statement  "            TestToken[] out_tokens = new TestToken[] { newToken("\u4e00\u4e8c"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e8c\u4e09"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e09\u56db"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u56db\u4e94"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e94\u516d"' 4' 6' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u516d\u4e03"' 5' 7' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e03\u516b"' 6' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u516b\u4e5d"' 7' 9' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e5d\u5341"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE) }; " is 621.
Long Statement,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestJa2,The length of the statement  "            TestToken[] out_tokens = new TestToken[] { newToken("\u4e00"' 0' 1' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e8c\u4e09"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e09\u56db"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e94\u516d"' 6' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u516d\u4e03"' 7' 9' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e03\u516b"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u516b\u4e5d"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u5341"' 12' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE) }; " is 548.
Long Statement,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestC,The length of the statement  "            TestToken[] out_tokens = new TestToken[] { newToken("abc"' 0' 3' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("defgh"' 4' 9' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("ijklmn"' 10' 16' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("opqrstu"' 17' 24' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("vwxy"' 25' 29' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("z"' 30' 31' CJKTokenizer.SINGLE_TOKEN_TYPE) }; " is 390.
Long Statement,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestMix,The length of the statement  "            TestToken[] out_tokens = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("abc"' 5' 8' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3051\u3053"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE) }; " is 617.
Long Statement,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestMix2,The length of the statement  "            TestToken[] out_tokens = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ab"' 5' 7' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u3093"' 7' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("c"' 8' 9' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3053"' 14' 15' CJKTokenizer.DOUBLE_TOKEN_TYPE) }; " is 722.
Long Statement,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestFullWidth,The length of the statement  "            TestToken[] out_tokens = new TestToken[] { newToken("test"' 0' 4' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("1234"' 5' 9' CJKTokenizer.SINGLE_TOKEN_TYPE) }; " is 156.
Long Statement,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestNonIdeographic,The length of the statement  "            TestToken[] out_tokens = new TestToken[] { newToken("\u4e00"' 0' 1' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("رو"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("وب"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("بر"' 4' 6' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("رت"' 5' 7' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("مو"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("وي"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ير"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE) }; " is 484.
Long Statement,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestNonIdeographicNonLetter,The length of the statement  "            TestToken[] out_tokens = new TestToken[] { newToken("\u4e00"' 0' 1' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ر"' 2' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("وب"' 4' 6' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("بر"' 5' 7' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("رت"' 6' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("مو"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("وي"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ير"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE) }; " is 484.
Long Statement,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestReusableTokenStream,The length of the statement  "            TestToken[] out_tokens = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("abc"' 5' 8' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3051\u3053"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE) }; " is 617.
Long Statement,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestReusableTokenStream,The length of the statement  "            TestToken[] out_tokens2 = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ab"' 5' 7' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u3093"' 7' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("c"' 8' 9' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3053"' 14' 15' CJKTokenizer.DOUBLE_TOKEN_TYPE) }; " is 723.
Long Statement,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestFinalOffset,The length of the statement  "            checkCJKToken("あいtest"' new TestToken[] { newToken("あい"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("test"' 2' 6' CJKTokenizer.SINGLE_TOKEN_TYPE) }); " is 154.
Long Statement,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestFinalOffset,The length of the statement  "            checkCJKToken("testあい    "' new TestToken[] { newToken("test"' 0' 4' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("あい"' 4' 6' CJKTokenizer.DOUBLE_TOKEN_TYPE) }); " is 158.
Long Statement,Lucene.Net.Analysis.Cn,TestChineseTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cn\TestChineseTokenizer.cs,TestReusableTokenStream,The length of the statement  "            AssertAnalyzesTo(a' "中华人民共和国"' new string[] { "中"' "华"' "人"' "民"' "共"' "和"' "国" }' new int[] { 0' 1' 2' 3' 4' 5' 6 }' new int[] { 1' 2' 3' 4' 5' 6' 7 }); " is 153.
Long Statement,Lucene.Net.Analysis.CommonGrams,CommonGramsFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Commongrams\CommonGramsFilterTest.cs,TestCommonGramsFilter,The length of the statement  "            AssertAnalyzesTo(a' "quick brown the"' new string[] { "quick"' "brown"' "brown_the"' "the" }' new int[] { 1' 1' 0' 1 }); " is 120.
Long Statement,Lucene.Net.Analysis.CommonGrams,CommonGramsFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Commongrams\CommonGramsFilterTest.cs,TestCommonGramsFilter,The length of the statement  "            AssertAnalyzesTo(a' "quick the fox"' new string[] { "quick"' "quick_the"' "the"' "the_fox"' "fox" }' new int[] { 1' 0' 1' 0' 1 }); " is 130.
Long Statement,Lucene.Net.Analysis.CommonGrams,CommonGramsFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Commongrams\CommonGramsFilterTest.cs,TestCommonGramsFilter,The length of the statement  "            AssertAnalyzesTo(a' "fox of the"' new string[] { "fox"' "fox_of"' "of"' "of_the"' "the" }' new int[] { 1' 0' 1' 0' 1 }); " is 120.
Long Statement,Lucene.Net.Analysis.CommonGrams,CommonGramsFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Commongrams\CommonGramsFilterTest.cs,TestCommonGramsFilter,The length of the statement  "            AssertAnalyzesTo(a' "the quick brown"' new string[] { "the"' "the_quick"' "quick"' "brown" }' new int[] { 1' 0' 1' 1 }); " is 120.
Long Statement,Lucene.Net.Analysis.CommonGrams,CommonGramsFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Commongrams\CommonGramsFilterTest.cs,TestCommonGramsFilter,The length of the statement  "            AssertAnalyzesTo(a' "the fox of"' new string[] { "the"' "the_fox"' "fox"' "fox_of"' "of" }' new int[] { 1' 0' 1' 0' 1 }); " is 121.
Long Statement,Lucene.Net.Analysis.CommonGrams,CommonGramsFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Commongrams\CommonGramsFilterTest.cs,TestCommonGramsFilter,The length of the statement  "            AssertAnalyzesTo(a' "of the fox"' new string[] { "of"' "of_the"' "the"' "the_fox"' "fox" }' new int[] { 1' 0' 1' 0' 1 }); " is 121.
Long Statement,Lucene.Net.Analysis.CommonGrams,CommonGramsFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Commongrams\CommonGramsFilterTest.cs,TestCaseSensitive,The length of the statement  "            AssertTokenStreamContents(cgf' new string[] { "How"' "The"' "The_s"' "s"' "s_a"' "a"' "a_brown"' "brown"' "brown_s"' "s"' "s_cow"' "cow"' "cow_d"' "d"' "d_like"' "like"' "A"' "B"' "thing?" }); " is 192.
Long Statement,Lucene.Net.Analysis.CommonGrams,AnalyzerAnonymousInnerClassHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Commongrams\CommonGramsFilterTest.cs,CreateComponents,The length of the statement  "                return new TokenStreamComponents(tokenizer' new CommonGramsQueryFilter(new CommonGramsFilter(TEST_VERSION_CURRENT' tokenizer' commonWords))); " is 141.
Long Statement,Lucene.Net.Analysis.CommonGrams,TestCommonGramsFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Commongrams\TestCommonGramsFilterFactory.cs,TestInform,The length of the statement  "            IResourceLoader loader = new ClasspathResourceLoader(typeof(TestAnalyzers)); // LUCENENET: Need to set to a type that is in the same path as the files " is 150.
Long Statement,Lucene.Net.Analysis.CommonGrams,TestCommonGramsFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Commongrams\TestCommonGramsFilterFactory.cs,TestInform,The length of the statement  "            CommonGramsFilterFactory factory = (CommonGramsFilterFactory)TokenFilterFactory("CommonGrams"' TEST_VERSION_CURRENT' loader' "words"' "stop-1.txt"' "ignoreCase"' "true"); " is 170.
Long Statement,Lucene.Net.Analysis.CommonGrams,TestCommonGramsFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Commongrams\TestCommonGramsFilterFactory.cs,TestInform,The length of the statement  "            factory = (CommonGramsFilterFactory)TokenFilterFactory("CommonGrams"' TEST_VERSION_CURRENT' loader' "words"' "stop-1.txt' stop-2.txt"' "ignoreCase"' "true"); " is 157.
Long Statement,Lucene.Net.Analysis.CommonGrams,TestCommonGramsFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Commongrams\TestCommonGramsFilterFactory.cs,TestInform,The length of the statement  "            factory = (CommonGramsFilterFactory)TokenFilterFactory("CommonGrams"' TEST_VERSION_CURRENT' loader' "words"' "stop-snowball.txt"' "format"' "snowball"' "ignoreCase"' "true"); " is 174.
Long Statement,Lucene.Net.Analysis.CommonGrams,TestCommonGramsQueryFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Commongrams\TestCommonGramsQueryFilterFactory.cs,TestInform,The length of the statement  "            IResourceLoader loader = new ClasspathResourceLoader(typeof(TestAnalyzers)); // LUCENENET: Need to set to a type that is in the same path as the files " is 150.
Long Statement,Lucene.Net.Analysis.CommonGrams,TestCommonGramsQueryFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Commongrams\TestCommonGramsQueryFilterFactory.cs,TestInform,The length of the statement  "            CommonGramsQueryFilterFactory factory = (CommonGramsQueryFilterFactory)TokenFilterFactory("CommonGramsQuery"' TEST_VERSION_CURRENT' loader' "words"' "stop-1.txt"' "ignoreCase"' "true"); " is 185.
Long Statement,Lucene.Net.Analysis.CommonGrams,TestCommonGramsQueryFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Commongrams\TestCommonGramsQueryFilterFactory.cs,TestInform,The length of the statement  "            factory = (CommonGramsQueryFilterFactory)TokenFilterFactory("CommonGramsQuery"' TEST_VERSION_CURRENT' loader' "words"' "stop-1.txt' stop-2.txt"' "ignoreCase"' "true"); " is 167.
Long Statement,Lucene.Net.Analysis.CommonGrams,TestCommonGramsQueryFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Commongrams\TestCommonGramsQueryFilterFactory.cs,TestInform,The length of the statement  "            factory = (CommonGramsQueryFilterFactory)TokenFilterFactory("CommonGramsQuery"' TEST_VERSION_CURRENT' loader' "words"' "stop-snowball.txt"' "format"' "snowball"' "ignoreCase"' "true"); " is 184.
Long Statement,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestHyphenationCompoundWordsDA,The length of the statement  "                HyphenationCompoundWordTokenFilter tf = new HyphenationCompoundWordTokenFilter(TEST_VERSION_CURRENT' new MockTokenizer(new StringReader("min veninde som er lidt af en læsehest")' MockTokenizer.WHITESPACE' false)' hyphenator' dict' CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE' CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE' CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE' false); " is 397.
Long Statement,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestHyphenationCompoundWordsDA,The length of the statement  "                AssertTokenStreamContents(tf' new string[] { "min"' "veninde"' "som"' "er"' "lidt"' "af"' "en"' "læsehest"' "læse"' "hest" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 0' 0 }); " is 170.
Long Statement,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestHyphenationCompoundWordsDELongestMatch,The length of the statement  "                HyphenationCompoundWordTokenFilter tf = new HyphenationCompoundWordTokenFilter(TEST_VERSION_CURRENT' new MockTokenizer(new StringReader("basketballkurv")' MockTokenizer.WHITESPACE' false)' hyphenator' dict' CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE' CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE' 40' true); " is 322.
Long Statement,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestHyphenationCompoundWordsDELongestMatch,The length of the statement  "                AssertTokenStreamContents(tf' new string[] { "basketballkurv"' "basketball"' "ball"' "kurv" }' new int[] { 1' 0' 0' 0 }); " is 121.
Long Statement,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestHyphenationOnly,The length of the statement  "                HyphenationCompoundWordTokenFilter tf = new HyphenationCompoundWordTokenFilter(TEST_VERSION_CURRENT' new MockTokenizer(new StringReader("basketballkurv")' MockTokenizer.WHITESPACE' false)' hyphenator' CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE' 2' 4); " is 258.
Long Statement,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestHyphenationOnly,The length of the statement  "                tf = new HyphenationCompoundWordTokenFilter(TEST_VERSION_CURRENT' new MockTokenizer(new StringReader("basketballkurv")' MockTokenizer.WHITESPACE' false)' hyphenator' CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE' 4' 6); " is 223.
Long Statement,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestHyphenationOnly,The length of the statement  "                tf = new HyphenationCompoundWordTokenFilter(TEST_VERSION_CURRENT' new MockTokenizer(new StringReader("basketballkurv")' MockTokenizer.WHITESPACE' false)' hyphenator' CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE' 4' 10); " is 224.
Long Statement,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestHyphenationOnly,The length of the statement  "                AssertTokenStreamContents(tf' new string[] { "basketballkurv"' "basket"' "basketbal"' "basketball"' "sket"' "sketbal"' "sketball"' "ball"' "ballkurv"' "lkurv"' "kurv" }); " is 170.
Long Statement,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The length of the statement  "            CharArraySet dict = makeDictionary("Bil"' "Dörr"' "Motor"' "Tak"' "Borr"' "Slag"' "Hammar"' "Pelar"' "Glas"' "Ögon"' "Fodral"' "Bas"' "Fiol"' "Makare"' "Gesäll"' "Sko"' "Vind"' "Rute"' "Torkare"' "Blad"); " is 204.
Long Statement,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The length of the statement  "            DictionaryCompoundWordTokenFilter tf = new DictionaryCompoundWordTokenFilter(TEST_VERSION_CURRENT' new MockTokenizer(new StringReader("Bildörr Bilmotor Biltak Slagborr Hammarborr Pelarborr Glasögonfodral Basfiolsfodral Basfiolsfodralmakaregesäll Skomakare Vindrutetorkare Vindrutetorkarblad abba")' MockTokenizer.WHITESPACE' false)' dict); " is 339.
Long Statement,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The length of the statement  "            AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 }); " is 1054.
Long Statement,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSELongestMatch,The length of the statement  "            CharArraySet dict = makeDictionary("Bil"' "Dörr"' "Motor"' "Tak"' "Borr"' "Slag"' "Hammar"' "Pelar"' "Glas"' "Ögon"' "Fodral"' "Bas"' "Fiols"' "Makare"' "Gesäll"' "Sko"' "Vind"' "Rute"' "Torkare"' "Blad"' "Fiolsfodral"); " is 220.
Long Statement,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSELongestMatch,The length of the statement  "            DictionaryCompoundWordTokenFilter tf = new DictionaryCompoundWordTokenFilter(TEST_VERSION_CURRENT' new MockTokenizer(new StringReader("Basfiolsfodralmakaregesäll")' MockTokenizer.WHITESPACE' false)' dict' CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE' CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE' CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE' true); " is 370.
Long Statement,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSELongestMatch,The length of the statement  "            AssertTokenStreamContents(tf' new string[] { "Basfiolsfodralmakaregesäll"' "Bas"' "fiolsfodral"' "fodral"' "makare"' "gesäll" }' new int[] { 0' 0' 0' 0' 0' 0 }' new int[] { 26' 26' 26' 26' 26' 26 }' new int[] { 1' 0' 0' 0' 0' 0 }); " is 231.
Long Statement,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestTokenEndingWithWordComponentOfMinimumLength,The length of the statement  "            DictionaryCompoundWordTokenFilter tf = new DictionaryCompoundWordTokenFilter(TEST_VERSION_CURRENT' new WhitespaceTokenizer(TEST_VERSION_CURRENT' new StringReader("abcdef") " is 171.
Long Statement,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestTokenEndingWithWordComponentOfMinimumLength,The length of the statement  "               )' dict' CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE' CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE' CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE' false); " is 175.
Long Statement,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestTokenEndingWithWordComponentOfMinimumLength,The length of the statement  "            AssertTokenStreamContents(tf' new string[] { "abcdef"' "ab"' "cd"' "ef" }' new int[] { 0' 0' 0' 0 }' new int[] { 6' 6' 6' 6 }' new int[] { 1' 0' 0' 0 }); " is 153.
Long Statement,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestWordComponentWithLessThanMinimumLength,The length of the statement  "            DictionaryCompoundWordTokenFilter tf = new DictionaryCompoundWordTokenFilter(TEST_VERSION_CURRENT' new WhitespaceTokenizer(TEST_VERSION_CURRENT' new StringReader("abcdefg") " is 172.
Long Statement,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestWordComponentWithLessThanMinimumLength,The length of the statement  "               )' dict' CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE' CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE' CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE' false); " is 175.
Long Statement,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestWordComponentWithLessThanMinimumLength,The length of the statement  "            AssertTokenStreamContents(tf' new string[] { "abcdefg"' "abc"' "efg" }' new int[] { 0' 0' 0 }' new int[] { 7' 7' 7 }' new int[] { 1' 0' 0 }); " is 141.
Long Statement,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestReset,The length of the statement  "            Tokenizer wsTokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT' new StringReader("Rindfleischüberwachungsgesetz")); " is 121.
Long Statement,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestReset,The length of the statement  "            DictionaryCompoundWordTokenFilter tf = new DictionaryCompoundWordTokenFilter(TEST_VERSION_CURRENT' wsTokenizer' dict' CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE' CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE' CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE' false); " is 284.
Long Statement,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestRetainMockAttribute,The length of the statement  "            stream = new DictionaryCompoundWordTokenFilter(TEST_VERSION_CURRENT' stream' dict' CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE' CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE' CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE' false); " is 249.
Long Statement,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestInvalidOffsets,The length of the statement  "            AssertAnalyzesTo(analyzer' "banküberfall"' new string[] { "bankueberfall"' "fall" }' new int[] { 0' 0 }' new int[] { 12' 12 }); " is 127.
Long Statement,Lucene.Net.Analysis.Compound,AnalyzerAnonymousInnerClassHelper2,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,CreateComponents,The length of the statement  "                return new TokenStreamComponents(tokenizer' new DictionaryCompoundWordTokenFilter(TEST_VERSION_CURRENT' tokenizer' dict)); " is 122.
Long Statement,Lucene.Net.Analysis.Compound,AnalyzerAnonymousInnerClassHelper4,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,CreateComponents,The length of the statement  "                return new TokenStreamComponents(tokenizer' new DictionaryCompoundWordTokenFilter(TEST_VERSION_CURRENT' tokenizer' dict)); " is 122.
Long Statement,Lucene.Net.Analysis.Compound,TestHyphenationCompoundWordTokenFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestHyphenationCompoundWordTokenFilterFactory.cs,TestHyphenationWithDictionary,The length of the statement  "            stream = TokenFilterFactory("HyphenationCompoundWord"' "hyphenator"' "da_UTF8.xml"' "dictionary"' "da_compoundDictionary.txt").Create(stream); " is 142.
Long Statement,Lucene.Net.Analysis.Compound,TestHyphenationCompoundWordTokenFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestHyphenationCompoundWordTokenFilterFactory.cs,TestHyphenationWithDictionary,The length of the statement  "            AssertTokenStreamContents(stream' new string[] { "min"' "veninde"' "som"' "er"' "lidt"' "af"' "en"' "læsehest"' "læse"' "hest" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 0' 0 }); " is 174.
Long Statement,Lucene.Net.Analysis.Compound,TestHyphenationCompoundWordTokenFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestHyphenationCompoundWordTokenFilterFactory.cs,TestHyphenationOnly,The length of the statement  "            stream = TokenFilterFactory("HyphenationCompoundWord"' "hyphenator"' "da_UTF8.xml"' "minSubwordSize"' "2"' "maxSubwordSize"' "4").Create(stream); " is 145.
Long Statement,Lucene.Net.Analysis.Core,TestAllAnalyzersHaveFactories,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestAllAnalyzersHaveFactories.cs,Test,The length of the statement  "                        return !typeInfo.IsAbstract && typeInfo.IsPublic && !typeInfo.IsInterface && typeInfo.IsClass && (typeInfo.GetCustomAttribute<ObsoleteAttribute>() == null) " is 155.
Long Statement,Lucene.Net.Analysis.Core,TestAllAnalyzersHaveFactories,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestAllAnalyzersHaveFactories.cs,Test,The length of the statement  "                            && !testComponents.Contains(c) && !crazyComponents.Contains(c) && !oddlyNamedComponents.Contains(c) && !deprecatedDuplicatedComponents.Contains(c) " is 146.
Long Statement,Lucene.Net.Analysis.Core,TestAllAnalyzersHaveFactories,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestAllAnalyzersHaveFactories.cs,Test,The length of the statement  "                            && (typeInfo.IsSubclassOf(typeof(Tokenizer)) || typeInfo.IsSubclassOf(typeof(TokenFilter)) || typeInfo.IsSubclassOf(typeof(CharFilter))); " is 137.
Long Statement,Lucene.Net.Analysis.Core,TestAllAnalyzersHaveFactories,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestAllAnalyzersHaveFactories.cs,Test,The length of the statement  "                            throw; // LUCENENET: CA2200: Rethrow to preserve stack details (https://docs.microsoft.com/en-us/visualstudio/code-quality/ca2200-rethrow-to-preserve-stack-details) " is 164.
Long Statement,Lucene.Net.Analysis.Core,TestAllAnalyzersHaveFactories,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestAllAnalyzersHaveFactories.cs,Test,The length of the statement  "                    string simpleName = clazzName.Substring(0' clazzName.Length - (clazzName.EndsWith("TokenFilter"' StringComparison.Ordinal) ? 11 : 6)); " is 134.
Long Statement,Lucene.Net.Analysis.Core,TestAllAnalyzersHaveFactories,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestAllAnalyzersHaveFactories.cs,Test,The length of the statement  "                            throw; // LUCENENET: CA2200: Rethrow to preserve stack details (https://docs.microsoft.com/en-us/visualstudio/code-quality/ca2200-rethrow-to-preserve-stack-details) " is 164.
Long Statement,Lucene.Net.Analysis.Core,TestAllAnalyzersHaveFactories,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestAllAnalyzersHaveFactories.cs,Test,The length of the statement  "                            throw; // LUCENENET: CA2200: Rethrow to preserve stack details (https://docs.microsoft.com/en-us/visualstudio/code-quality/ca2200-rethrow-to-preserve-stack-details) " is 164.
Long Statement,Lucene.Net.Analysis.Core,TestAnalyzers,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestAnalyzers.cs,TestLowerCaseFilter,The length of the statement  "            AssertAnalyzesTo(a' "\ud801\udc16\ud801\udc16\ud801\udc16\ud801\udc16"' new string[] { "\ud801\udc3e\ud801\udc3e\ud801\udc3e\ud801\udc3e" }); " is 141.
Long Statement,Lucene.Net.Analysis.Core,TestAnalyzers,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestAnalyzers.cs,TestUpperCaseFilter,The length of the statement  "            AssertAnalyzesTo(a' "\ud801\udc3e\ud801\udc3e\ud801\udc3e\ud801\udc3e"' new string[] { "\ud801\udc16\ud801\udc16\ud801\udc16\ud801\udc16" }); " is 141.
Long Statement,Lucene.Net.Analysis.Core,TestAnalyzers,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestAnalyzers.cs,TestLowerCaseFilterLowSurrogateLeftover,The length of the statement  "            WhitespaceTokenizer tokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT' new StringReader("BogustermBogusterm\udc16")); " is 124.
Long Statement,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The length of the statement  "            CharArraySet protWords = new CharArraySet(TEST_VERSION_CURRENT' new HashSet<string>(Arrays.AsList("rrdpafa"' "pupmmlu"' "xlq"' "dyy"' "zqrxrrck"' "o"' "hsrlfvcha"))' false); " is 173.
Long Statement,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The length of the statement  "            byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 }; " is 533.
Long Statement,Lucene.Net.Analysis.Core,AnalyzerAnonymousInnerClassHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,CreateComponents,The length of the statement  "                Tokenizer t = new MockTokenizer(new TestRandomChains.CheckThatYouDidntReadAnythingReaderWrapper(reader)' MockTokenFilter.ENGLISH_STOPSET' false' -65); " is 150.
Long Statement,Lucene.Net.Analysis.Core,TestClassicAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestClassicAnalyzer.cs,TestComplianceNumericFile,The length of the statement  "            AssertAnalyzesTo(a' "78academyawards/rules/rule02.html"' new string[] { "78academyawards/rules/rule02.html" }' new string[] { "<NUM>" }); " is 137.
Long Statement,Lucene.Net.Analysis.Core,TestClassicAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestClassicAnalyzer.cs,TestComplianceNumericWithUnderscores,The length of the statement  "            AssertAnalyzesTo(a' "2006-03-11t082958z_01_ban130523_rtridst_0_ozabs"' new string[] { "2006-03-11t082958z_01_ban130523_rtridst_0_ozabs" }' new string[] { "<NUM>" }); " is 165.
Long Statement,Lucene.Net.Analysis.Core,TestClassicAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestClassicAnalyzer.cs,TestComplianceManyTokens,The length of the statement  "            AssertAnalyzesTo(a' "/money.cnn.com/magazines/fortune/fortune_archive/2007/03/19/8402357/index.htm " + "safari-0-sheikh-zayed-grand-mosque.jpg"' new string[] { "money.cnn.com"' "magazines"' "fortune"' "fortune"' "archive/2007/03/19/8402357"' "index.htm"' "safari-0-sheikh"' "zayed"' "grand"' "mosque.jpg" }' new string[] { "<HOST>"' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' "<NUM>"' "<HOST>"' "<NUM>"' "<ALPHANUM>"' "<ALPHANUM>"' "<HOST>" }); " is 443.
Long Statement,Lucene.Net.Analysis.Core,TestClassicAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestClassicAnalyzer.cs,TestWickedLongTerm,The length of the statement  "                using (IndexWriter writer = new IndexWriter(dir' new IndexWriterConfig(TEST_VERSION_CURRENT' new ClassicAnalyzer(TEST_VERSION_CURRENT)))) " is 137.
Long Statement,Lucene.Net.Analysis.Core,TestClassicAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestClassicAnalyzer.cs,TestWickedLongTerm,The length of the statement  "                    DocsAndPositionsEnum tps = MultiFields.GetTermPositionsEnum(reader' MultiFields.GetLiveDocs(reader)' "content"' new BytesRef("another")); " is 137.
Long Statement,Lucene.Net.Analysis.Core,TestKeywordAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestKeywordAnalyzer.cs,SetUp,The length of the statement  "            IndexWriter writer = new IndexWriter(directory' new IndexWriterConfig(TEST_VERSION_CURRENT' new SimpleAnalyzer(TEST_VERSION_CURRENT))); " is 135.
Long Statement,Lucene.Net.Analysis.Core,TestRandomChains,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestRandomChains.cs,BeforeClass,The length of the statement  "                        && (typeInfo.IsSubclassOf(typeof(Tokenizer)) || typeInfo.IsSubclassOf(typeof(TokenFilter)) || typeInfo.IsSubclassOf(typeof(CharFilter))); " is 137.
Long Statement,Lucene.Net.Analysis.Core,TestRandomChains,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestRandomChains.cs,BeforeClass,The length of the statement  "                    if (ctor.GetCustomAttribute<ObsoleteAttribute>() != null || (brokenConstructors.ContainsKey(ctor) && brokenConstructors[ctor] == ALWAYS)) " is 137.
Long Statement,Lucene.Net.Analysis.Core,TestRandomChains,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestRandomChains.cs,NewFilterArgs,The length of the statement  "                    args[i] = new CommonGramsFilter(TEST_VERSION_CURRENT' stream' NewRandomArg<CharArraySet>(random' typeof(CharArraySet))); " is 120.
Long Statement,Lucene.Net.Analysis.Core,TestRandomChains,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestRandomChains.cs,TestRandomChains_,The length of the statement  "                    throw; // LUCENENET: CA2200: Rethrow to preserve stack details (https://docs.microsoft.com/en-us/visualstudio/code-quality/ca2200-rethrow-to-preserve-stack-details) " is 164.
Long Statement,Lucene.Net.Analysis.Core,TestRandomChains,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestRandomChains.cs,TestRandomChainsWithLargeStrings,The length of the statement  "                    throw; // LUCENENET: CA2200: Rethrow to preserve stack details (https://docs.microsoft.com/en-us/visualstudio/code-quality/ca2200-rethrow-to-preserve-stack-details) " is 164.
Long Statement,Lucene.Net.Analysis.Core,DictionaryArgProducer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestRandomChains.cs,Create,The length of the statement  "                            throw; // LUCENENET: CA2200: Rethrow to preserve stack details (https://docs.microsoft.com/en-us/visualstudio/code-quality/ca2200-rethrow-to-preserve-stack-details) " is 164.
Long Statement,Lucene.Net.Analysis.Core,HyphenationTreeArgProducer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestRandomChains.cs,Create,The length of the statement  "                    throw; // LUCENENET: CA2200: Rethrow to preserve stack details (https://docs.microsoft.com/en-us/visualstudio/code-quality/ca2200-rethrow-to-preserve-stack-details) " is 164.
Long Statement,Lucene.Net.Analysis.Core,SnowballProgramArgProducer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestRandomChains.cs,Create,The length of the statement  "                    throw; // LUCENENET: CA2200: Rethrow to preserve stack details (https://docs.microsoft.com/en-us/visualstudio/code-quality/ca2200-rethrow-to-preserve-stack-details) " is 164.
Long Statement,Lucene.Net.Analysis.Core,StemmerOverrideMapArgProducer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestRandomChains.cs,Create,The length of the statement  "                    throw; // LUCENENET: CA2200: Rethrow to preserve stack details (https://docs.microsoft.com/en-us/visualstudio/code-quality/ca2200-rethrow-to-preserve-stack-details) " is 164.
Long Statement,Lucene.Net.Analysis.Core,SynonymMapArgProducer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestRandomChains.cs,Create,The length of the statement  "                    throw; // LUCENENET: CA2200: Rethrow to preserve stack details (https://docs.microsoft.com/en-us/visualstudio/code-quality/ca2200-rethrow-to-preserve-stack-details) " is 164.
Long Statement,Lucene.Net.Analysis.Core,MockRandomAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestRandomChains.cs,CreateComponent,The length of the statement  "                        throw; // LUCENENET: CA2200: Rethrow to preserve stack details (https://docs.microsoft.com/en-us/visualstudio/code-quality/ca2200-rethrow-to-preserve-stack-details) " is 164.
Long Statement,Lucene.Net.Analysis.Core,TestStandardAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestStandardAnalyzer.cs,TestArmenian,The length of the statement  "            BaseTokenStreamTestCase.AssertAnalyzesTo(a' "Վիքիպեդիայի 13 միլիոն հոդվածները (4'600` հայերեն վիքիպեդիայում) գրվել են կամավորների կողմից ու համարյա բոլոր հոդվածները կարող է խմբագրել ցանկաց մարդ ով կարող է բացել Վիքիպեդիայի կայքը։"' new string[] { "Վիքիպեդիայի"' "13"' "միլիոն"' "հոդվածները"' "4'600"' "հայերեն"' "վիքիպեդիայում"' "գրվել"' "են"' "կամավորների"' "կողմից"' "ու"' "համարյա"' "բոլոր"' "հոդվածները"' "կարող"' "է"' "խմբագրել"' "ցանկաց"' "մարդ"' "ով"' "կարող"' "է"' "բացել"' "Վիքիպեդիայի"' "կայքը" }); " is 508.
Long Statement,Lucene.Net.Analysis.Core,TestStandardAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestStandardAnalyzer.cs,TestAmharic,The length of the statement  "            BaseTokenStreamTestCase.AssertAnalyzesTo(a' "ዊኪፔድያ የባለ ብዙ ቋንቋ የተሟላ ትክክለኛና ነጻ መዝገበ ዕውቀት (ኢንሳይክሎፒዲያ) ነው። ማንኛውም"' new string[] { "ዊኪፔድያ"' "የባለ"' "ብዙ"' "ቋንቋ"' "የተሟላ"' "ትክክለኛና"' "ነጻ"' "መዝገበ"' "ዕውቀት"' "ኢንሳይክሎፒዲያ"' "ነው"' "ማንኛውም" }); " is 225.
Long Statement,Lucene.Net.Analysis.Core,TestStandardAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestStandardAnalyzer.cs,TestArabic,The length of the statement  "            BaseTokenStreamTestCase.AssertAnalyzesTo(a' "الفيلم الوثائقي الأول عن ويكيبيديا يسمى \"الحقيقة بالأرقام: قصة ويكيبيديا\" (بالإنجليزية: Truth in Numbers: The Wikipedia Story)، سيتم إطلاقه في 2008."' new string[] { "الفيلم"' "الوثائقي"' "الأول"' "عن"' "ويكيبيديا"' "يسمى"' "الحقيقة"' "بالأرقام"' "قصة"' "ويكيبيديا"' "بالإنجليزية"' "Truth"' "in"' "Numbers"' "The"' "Wikipedia"' "Story"' "سيتم"' "إطلاقه"' "في"' "2008" }); " is 418.
Long Statement,Lucene.Net.Analysis.Core,TestStandardAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestStandardAnalyzer.cs,TestAramaic,The length of the statement  "            BaseTokenStreamTestCase.AssertAnalyzesTo(a' "ܘܝܩܝܦܕܝܐ (ܐܢܓܠܝܐ: Wikipedia) ܗܘ ܐܝܢܣܩܠܘܦܕܝܐ ܚܐܪܬܐ ܕܐܢܛܪܢܛ ܒܠܫܢ̈ܐ ܣܓܝܐ̈ܐ܂ ܫܡܗ ܐܬܐ ܡܢ ܡ̈ܠܬܐ ܕ\"ܘܝܩܝ\" ܘ\"ܐܝܢܣܩܠܘܦܕܝܐ\"܀"' new string[] { "ܘܝܩܝܦܕܝܐ"' "ܐܢܓܠܝܐ"' "Wikipedia"' "ܗܘ"' "ܐܝܢܣܩܠܘܦܕܝܐ"' "ܚܐܪܬܐ"' "ܕܐܢܛܪܢܛ"' "ܒܠܫܢ̈ܐ"' "ܣܓܝܐ̈ܐ"' "ܫܡܗ"' "ܐܬܐ"' "ܡܢ"' "ܡ̈ܠܬܐ"' "ܕ"' "ܘܝܩܝ"' "ܘ"' "ܐܝܢܣܩܠܘܦܕܝܐ" }); " is 340.
Long Statement,Lucene.Net.Analysis.Core,TestStandardAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestStandardAnalyzer.cs,TestBengali,The length of the statement  "            BaseTokenStreamTestCase.AssertAnalyzesTo(a' "এই বিশ্বকোষ পরিচালনা করে উইকিমিডিয়া ফাউন্ডেশন (একটি অলাভজনক সংস্থা)। উইকিপিডিয়ার শুরু ১৫ জানুয়ারি' ২০০১ সালে। এখন পর্যন্ত ২০০টিরও বেশী ভাষায় উইকিপিডিয়া রয়েছে।"' new string[] { "এই"' "বিশ্বকোষ"' "পরিচালনা"' "করে"' "উইকিমিডিয়া"' "ফাউন্ডেশন"' "একটি"' "অলাভজনক"' "সংস্থা"' "উইকিপিডিয়ার"' "শুরু"' "১৫"' "জানুয়ারি"' "২০০১"' "সালে"' "এখন"' "পর্যন্ত"' "২০০টিরও"' "বেশী"' "ভাষায়"' "উইকিপিডিয়া"' "রয়েছে" }); " is 454.
Long Statement,Lucene.Net.Analysis.Core,TestStandardAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestStandardAnalyzer.cs,TestFarsi,The length of the statement  "            BaseTokenStreamTestCase.AssertAnalyzesTo(a' "ویکی پدیای انگلیسی در تاریخ ۲۵ دی ۱۳۷۹ به صورت مکملی برای دانشنامهٔ تخصصی نوپدیا نوشته شد."' new string[] { "ویکی"' "پدیای"' "انگلیسی"' "در"' "تاریخ"' "۲۵"' "دی"' "۱۳۷۹"' "به"' "صورت"' "مکملی"' "برای"' "دانشنامهٔ"' "تخصصی"' "نوپدیا"' "نوشته"' "شد" }); " is 296.
Long Statement,Lucene.Net.Analysis.Core,TestStandardAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestStandardAnalyzer.cs,TestGreek,The length of the statement  "            BaseTokenStreamTestCase.AssertAnalyzesTo(a' "Γράφεται σε συνεργασία από εθελοντές με το λογισμικό wiki' κάτι που σημαίνει ότι άρθρα μπορεί να προστεθούν ή να αλλάξουν από τον καθένα."' new string[] { "Γράφεται"' "σε"' "συνεργασία"' "από"' "εθελοντές"' "με"' "το"' "λογισμικό"' "wiki"' "κάτι"' "που"' "σημαίνει"' "ότι"' "άρθρα"' "μπορεί"' "να"' "προστεθούν"' "ή"' "να"' "αλλάξουν"' "από"' "τον"' "καθένα" }); " is 407.
Long Statement,Lucene.Net.Analysis.Core,TestStandardAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestStandardAnalyzer.cs,TestThai,The length of the statement  "            BaseTokenStreamTestCase.AssertAnalyzesTo(a' "การที่ได้ต้องแสดงว่างานดี. แล้วเธอจะไปไหน? ๑๒๓๔"' new string[] { "การที่ได้ต้องแสดงว่างานดี"' "แล้วเธอจะไปไหน"' "๑๒๓๔" }); " is 167.
Long Statement,Lucene.Net.Analysis.Core,TestStandardAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestStandardAnalyzer.cs,TestLao,The length of the statement  "            BaseTokenStreamTestCase.AssertAnalyzesTo(a' "ສາທາລະນະລັດ ປະຊາທິປະໄຕ ປະຊາຊົນລາວ"' new string[] { "ສາທາລະນະລັດ"' "ປະຊາທິປະໄຕ"' "ປະຊາຊົນລາວ" }); " is 141.
Long Statement,Lucene.Net.Analysis.Core,TestStandardAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestStandardAnalyzer.cs,TestTibetan,The length of the statement  "            BaseTokenStreamTestCase.AssertAnalyzesTo(a' "སྣོན་མཛོད་དང་ལས་འདིས་བོད་ཡིག་མི་ཉམས་གོང་འཕེལ་དུ་གཏོང་བར་ཧ་ཅང་དགེ་མཚན་མཆིས་སོ། །"' new string[] { "སྣོན"' "མཛོད"' "དང"' "ལས"' "འདིས"' "བོད"' "ཡིག"' "མི"' "ཉམས"' "གོང"' "འཕེལ"' "དུ"' "གཏོང"' "བར"' "ཧ"' "ཅང"' "དགེ"' "མཚན"' "མཆིས"' "སོ" }); " is 281.
Long Statement,Lucene.Net.Analysis.Core,TestStandardAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestStandardAnalyzer.cs,TestChinese,The length of the statement  "            BaseTokenStreamTestCase.AssertAnalyzesTo(a' "我是中国人。 １２３４ Ｔｅｓｔｓ "' new string[] { "我"' "是"' "中"' "国"' "人"' "１２３４"' "Ｔｅｓｔｓ" }); " is 125.
Long Statement,Lucene.Net.Analysis.Core,TestStandardAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestStandardAnalyzer.cs,TestVariousTextSA,The length of the statement  "            BaseTokenStreamTestCase.AssertAnalyzesTo(a' "C embedded developers wanted"' new string[] { "C"' "embedded"' "developers"' "wanted" }); " is 134.
Long Statement,Lucene.Net.Analysis.Core,TestStandardAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestStandardAnalyzer.cs,TestOffsets,The length of the statement  "            BaseTokenStreamTestCase.AssertAnalyzesTo(a' "David has 5000 bones"' new string[] { "David"' "has"' "5000"' "bones" }' new int[] { 0' 6' 10' 15 }' new int[] { 5' 9' 14' 20 }); " is 174.
Long Statement,Lucene.Net.Analysis.Core,TestStandardAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestStandardAnalyzer.cs,TestTypes,The length of the statement  "            BaseTokenStreamTestCase.AssertAnalyzesTo(a' "David has 5000 bones"' new string[] { "David"' "has"' "5000"' "bones" }' new string[] { "<ALPHANUM>"' "<ALPHANUM>"' "<NUM>"' "<ALPHANUM>" }); " is 186.
Long Statement,Lucene.Net.Analysis.Core,TestStandardAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestStandardAnalyzer.cs,TestSupplementary,The length of the statement  "            BaseTokenStreamTestCase.AssertAnalyzesTo(a' "𩬅艱鍟䇹愯瀛"' new string[] { "𩬅"' "艱"' "鍟"' "䇹"' "愯"' "瀛" }' new string[] { "<IDEOGRAPHIC>"' "<IDEOGRAPHIC>"' "<IDEOGRAPHIC>"' "<IDEOGRAPHIC>"' "<IDEOGRAPHIC>"' "<IDEOGRAPHIC>" }); " is 222.
Long Statement,Lucene.Net.Analysis.Core,TestStandardAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestStandardAnalyzer.cs,TestJapanese,The length of the statement  "            BaseTokenStreamTestCase.AssertAnalyzesTo(a' "仮名遣い カタカナ"' new string[] { "仮"' "名"' "遣"' "い"' "カタカナ" }' new string[] { "<IDEOGRAPHIC>"' "<IDEOGRAPHIC>"' "<IDEOGRAPHIC>"' "<HIRAGANA>"' "<KATAKANA>" }); " is 198.
Long Statement,Lucene.Net.Analysis.Core,TestStandardAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestStandardAnalyzer.cs,TestVersion36,The length of the statement  "            AssertAnalyzesTo(a' "this is just a t\u08E6st lucene@apache.org"' new string[] { "this"' "is"' "just"' "a"' "t"' "st"' "lucene"' "apache.org" }); // new combining mark in 6.1 " is 174.
Long Statement,Lucene.Net.Analysis.Core,TestStandardAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestStandardAnalyzer.cs,TestVersion40,The length of the statement  "            AssertAnalyzesTo(a' "this is just a t\u061Cst lucene@apache.org"' new string[] { "this"' "is"' "just"' "a"' "t"' "st"' "lucene"' "apache.org" }); " is 145.
Long Statement,Lucene.Net.Analysis.Core,TestStopFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestStopFilter.cs,TestExactCase,The length of the statement  "            TokenStream stream = new StopFilter(TEST_VERSION_CURRENT' new MockTokenizer(reader' MockTokenizer.WHITESPACE' false)' stopWords); " is 129.
Long Statement,Lucene.Net.Analysis.Core,TestStopFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestStopFilter.cs,TestStopFilt,The length of the statement  "            TokenStream stream = new StopFilter(TEST_VERSION_CURRENT' new MockTokenizer(reader' MockTokenizer.WHITESPACE' false)' stopSet); " is 127.
Long Statement,Lucene.Net.Analysis.Core,TestStopFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestStopFilter.cs,TestStopPositons,The length of the statement  "            StopFilter stpf = new StopFilter(Version.LUCENE_40' new MockTokenizer(reader' MockTokenizer.WHITESPACE' false)' stopSet); " is 121.
Long Statement,Lucene.Net.Analysis.Core,TestStopFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestStopFilter.cs,TestStopPositons,The length of the statement  "            StopFilter stpf0 = new StopFilter(TEST_VERSION_CURRENT' new MockTokenizer(reader' MockTokenizer.WHITESPACE' false)' stopSet0); // first part of the set " is 151.
Long Statement,Lucene.Net.Analysis.Core,TestStopFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestStopFilter.cs,TestEndStopword,The length of the statement  "            StopFilter stpf = new StopFilter(TEST_VERSION_CURRENT' new MockTokenizer(new StringReader("test of")' MockTokenizer.WHITESPACE' false)' stopSet); " is 145.
Long Statement,Lucene.Net.Analysis.Core,TestStopFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestStopFilter.cs,TestEndStopword,The length of the statement  "            AssertTokenStreamContents(stpf' new string[] { "test" }' new int[] { 0 }' new int[] { 4 }' null' new int[] { 1 }' null' 7' 1' null' true' null); " is 144.
Long Statement,Lucene.Net.Analysis.Core,TestStopFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestStopFilter.cs,DoTestStopPositons,The length of the statement  "                assertEquals("all but first token must have position increment of 3"' enableIcrements ? (i == 0 ? 1 : 3) : 1' posIncrAtt.PositionIncrement); " is 140.
Long Statement,Lucene.Net.Analysis.Core,TestStopFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestStopFilter.cs,TestFirstPosInc,The length of the statement  "            AssertAnalyzesTo(analyzer' "the quick brown fox"' new string[] { "hte"' "quick"' "brown"' "fox" }' new int[] { 1' 1' 1' 1 }); " is 125.
Long Statement,Lucene.Net.Analysis.Core,TestStopFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestStopFilterFactory.cs,TestInform,The length of the statement  "            factory = (StopFilterFactory)TokenFilterFactory("Stop"' "words"' "stop-snowball.txt"' "format"' "snowball"' "ignoreCase"' "true"); " is 130.
Long Statement,Lucene.Net.Analysis.Core,TestTypeTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestTypeTokenFilter.cs,TestStopPositons,The length of the statement  "            TypeTokenFilter typeTokenFilter = new TypeTokenFilter(TEST_VERSION_CURRENT' new StandardTokenizer(TEST_VERSION_CURRENT' reader)' stopSet); " is 138.
Long Statement,Lucene.Net.Analysis.Core,TestTypeTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestTypeTokenFilter.cs,TestPositons,The length of the statement  "                assertEquals("if position increment is enabled the positionIncrementAttribute value should be 3' otherwise 1"' posIncrAtt.PositionIncrement' enablePositionIncrements ? 3 : 1); " is 175.
Long Statement,Lucene.Net.Analysis.Core,TestTypeTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestTypeTokenFilter.cs,TestTypeFilterWhitelist,The length of the statement  "            TokenStream stream = new TypeTokenFilter(TEST_VERSION_CURRENT' new StandardTokenizer(TEST_VERSION_CURRENT' reader)' stopTypes' true); " is 133.
Long Statement,Lucene.Net.Analysis.Core,TestTypeTokenFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestTypeTokenFilterFactory.cs,TestInform,The length of the statement  "            TypeTokenFilterFactory factory = (TypeTokenFilterFactory)TokenFilterFactory("Type"' "types"' "stoptypes-1.txt"' "enablePositionIncrements"' "true"); " is 148.
Long Statement,Lucene.Net.Analysis.Core,TestTypeTokenFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestTypeTokenFilterFactory.cs,TestInform,The length of the statement  "            factory = (TypeTokenFilterFactory)TokenFilterFactory("Type"' "types"' "stoptypes-1.txt' stoptypes-2.txt"' "enablePositionIncrements"' "false"' "useWhitelist"' "true"); " is 167.
Long Statement,Lucene.Net.Analysis.Core,TestTypeTokenFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestTypeTokenFilterFactory.cs,TestCreationWithBlackList,The length of the statement  "            TokenFilterFactory factory = TokenFilterFactory("Type"' "types"' "stoptypes-1.txt' stoptypes-2.txt"' "enablePositionIncrements"' "true"); " is 137.
Long Statement,Lucene.Net.Analysis.Core,TestTypeTokenFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestTypeTokenFilterFactory.cs,TestCreationWithWhiteList,The length of the statement  "            TokenFilterFactory factory = TokenFilterFactory("Type"' "types"' "stoptypes-1.txt' stoptypes-2.txt"' "enablePositionIncrements"' "true"' "useWhitelist"' "true"); " is 161.
Long Statement,Lucene.Net.Analysis.Core,TestUAX29URLEmailAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailAnalyzer.cs,TestArmenian,The length of the statement  "            BaseTokenStreamTestCase.AssertAnalyzesTo(a' "Վիքիպեդիայի 13 միլիոն հոդվածները (4'600` հայերեն վիքիպեդիայում) գրվել են կամավորների կողմից ու համարյա բոլոր հոդվածները կարող է խմբագրել ցանկաց մարդ ով կարող է բացել Վիքիպեդիայի կայքը։"' new string[] { "վիքիպեդիայի"' "13"' "միլիոն"' "հոդվածները"' "4'600"' "հայերեն"' "վիքիպեդիայում"' "գրվել"' "են"' "կամավորների"' "կողմից"' "ու"' "համարյա"' "բոլոր"' "հոդվածները"' "կարող"' "է"' "խմբագրել"' "ցանկաց"' "մարդ"' "ով"' "կարող"' "է"' "բացել"' "վիքիպեդիայի"' "կայքը" }); " is 508.
Long Statement,Lucene.Net.Analysis.Core,TestUAX29URLEmailAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailAnalyzer.cs,TestAmharic,The length of the statement  "            BaseTokenStreamTestCase.AssertAnalyzesTo(a' "ዊኪፔድያ የባለ ብዙ ቋንቋ የተሟላ ትክክለኛና ነጻ መዝገበ ዕውቀት (ኢንሳይክሎፒዲያ) ነው። ማንኛውም"' new string[] { "ዊኪፔድያ"' "የባለ"' "ብዙ"' "ቋንቋ"' "የተሟላ"' "ትክክለኛና"' "ነጻ"' "መዝገበ"' "ዕውቀት"' "ኢንሳይክሎፒዲያ"' "ነው"' "ማንኛውም" }); " is 225.
Long Statement,Lucene.Net.Analysis.Core,TestUAX29URLEmailAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailAnalyzer.cs,TestArabic,The length of the statement  "            BaseTokenStreamTestCase.AssertAnalyzesTo(a' "الفيلم الوثائقي الأول عن ويكيبيديا يسمى \"الحقيقة بالأرقام: قصة ويكيبيديا\" (بالإنجليزية: Truth in Numbers: The Wikipedia Story)، سيتم إطلاقه في 2008."' new string[] { "الفيلم"' "الوثائقي"' "الأول"' "عن"' "ويكيبيديا"' "يسمى"' "الحقيقة"' "بالأرقام"' "قصة"' "ويكيبيديا"' "بالإنجليزية"' "truth"' "numbers"' "wikipedia"' "story"' "سيتم"' "إطلاقه"' "في"' "2008" }); " is 405.
Long Statement,Lucene.Net.Analysis.Core,TestUAX29URLEmailAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailAnalyzer.cs,TestAramaic,The length of the statement  "            BaseTokenStreamTestCase.AssertAnalyzesTo(a' "ܘܝܩܝܦܕܝܐ (ܐܢܓܠܝܐ: Wikipedia) ܗܘ ܐܝܢܣܩܠܘܦܕܝܐ ܚܐܪܬܐ ܕܐܢܛܪܢܛ ܒܠܫܢ̈ܐ ܣܓܝܐ̈ܐ܂ ܫܡܗ ܐܬܐ ܡܢ ܡ̈ܠܬܐ ܕ\"ܘܝܩܝ\" ܘ\"ܐܝܢܣܩܠܘܦܕܝܐ\"܀"' new string[] { "ܘܝܩܝܦܕܝܐ"' "ܐܢܓܠܝܐ"' "wikipedia"' "ܗܘ"' "ܐܝܢܣܩܠܘܦܕܝܐ"' "ܚܐܪܬܐ"' "ܕܐܢܛܪܢܛ"' "ܒܠܫܢ̈ܐ"' "ܣܓܝܐ̈ܐ"' "ܫܡܗ"' "ܐܬܐ"' "ܡܢ"' "ܡ̈ܠܬܐ"' "ܕ"' "ܘܝܩܝ"' "ܘ"' "ܐܝܢܣܩܠܘܦܕܝܐ" }); " is 340.
Long Statement,Lucene.Net.Analysis.Core,TestUAX29URLEmailAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailAnalyzer.cs,TestBengali,The length of the statement  "            BaseTokenStreamTestCase.AssertAnalyzesTo(a' "এই বিশ্বকোষ পরিচালনা করে উইকিমিডিয়া ফাউন্ডেশন (একটি অলাভজনক সংস্থা)। উইকিপিডিয়ার শুরু ১৫ জানুয়ারি' ২০০১ সালে। এখন পর্যন্ত ২০০টিরও বেশী ভাষায় উইকিপিডিয়া রয়েছে।"' new string[] { "এই"' "বিশ্বকোষ"' "পরিচালনা"' "করে"' "উইকিমিডিয়া"' "ফাউন্ডেশন"' "একটি"' "অলাভজনক"' "সংস্থা"' "উইকিপিডিয়ার"' "শুরু"' "১৫"' "জানুয়ারি"' "২০০১"' "সালে"' "এখন"' "পর্যন্ত"' "২০০টিরও"' "বেশী"' "ভাষায়"' "উইকিপিডিয়া"' "রয়েছে" }); " is 454.
Long Statement,Lucene.Net.Analysis.Core,TestUAX29URLEmailAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailAnalyzer.cs,TestFarsi,The length of the statement  "            BaseTokenStreamTestCase.AssertAnalyzesTo(a' "ویکی پدیای انگلیسی در تاریخ ۲۵ دی ۱۳۷۹ به صورت مکملی برای دانشنامهٔ تخصصی نوپدیا نوشته شد."' new string[] { "ویکی"' "پدیای"' "انگلیسی"' "در"' "تاریخ"' "۲۵"' "دی"' "۱۳۷۹"' "به"' "صورت"' "مکملی"' "برای"' "دانشنامهٔ"' "تخصصی"' "نوپدیا"' "نوشته"' "شد" }); " is 296.
Long Statement,Lucene.Net.Analysis.Core,TestUAX29URLEmailAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailAnalyzer.cs,TestGreek,The length of the statement  "            BaseTokenStreamTestCase.AssertAnalyzesTo(a' "Γράφεται σε συνεργασία από εθελοντές με το λογισμικό wiki' κάτι που σημαίνει ότι άρθρα μπορεί να προστεθούν ή να αλλάξουν από τον καθένα."' new string[] { "γράφεται"' "σε"' "συνεργασία"' "από"' "εθελοντές"' "με"' "το"' "λογισμικό"' "wiki"' "κάτι"' "που"' "σημαίνει"' "ότι"' "άρθρα"' "μπορεί"' "να"' "προστεθούν"' "ή"' "να"' "αλλάξουν"' "από"' "τον"' "καθένα" }); " is 407.
Long Statement,Lucene.Net.Analysis.Core,TestUAX29URLEmailAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailAnalyzer.cs,TestThai,The length of the statement  "            BaseTokenStreamTestCase.AssertAnalyzesTo(a' "การที่ได้ต้องแสดงว่างานดี. แล้วเธอจะไปไหน? ๑๒๓๔"' new string[] { "การที่ได้ต้องแสดงว่างานดี"' "แล้วเธอจะไปไหน"' "๑๒๓๔" }); " is 167.
Long Statement,Lucene.Net.Analysis.Core,TestUAX29URLEmailAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailAnalyzer.cs,TestLao,The length of the statement  "            BaseTokenStreamTestCase.AssertAnalyzesTo(a' "ສາທາລະນະລັດ ປະຊາທິປະໄຕ ປະຊາຊົນລາວ"' new string[] { "ສາທາລະນະລັດ"' "ປະຊາທິປະໄຕ"' "ປະຊາຊົນລາວ" }); " is 141.
Long Statement,Lucene.Net.Analysis.Core,TestUAX29URLEmailAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailAnalyzer.cs,TestTibetan,The length of the statement  "            BaseTokenStreamTestCase.AssertAnalyzesTo(a' "སྣོན་མཛོད་དང་ལས་འདིས་བོད་ཡིག་མི་ཉམས་གོང་འཕེལ་དུ་གཏོང་བར་ཧ་ཅང་དགེ་མཚན་མཆིས་སོ། །"' new string[] { "སྣོན"' "མཛོད"' "དང"' "ལས"' "འདིས"' "བོད"' "ཡིག"' "མི"' "ཉམས"' "གོང"' "འཕེལ"' "དུ"' "གཏོང"' "བར"' "ཧ"' "ཅང"' "དགེ"' "མཚན"' "མཆིས"' "སོ" }); " is 281.
Long Statement,Lucene.Net.Analysis.Core,TestUAX29URLEmailAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailAnalyzer.cs,TestChinese,The length of the statement  "            BaseTokenStreamTestCase.AssertAnalyzesTo(a' "我是中国人。 １２３４ Ｔｅｓｔｓ "' new string[] { "我"' "是"' "中"' "国"' "人"' "１２３４"' "ｔｅｓｔｓ" }); " is 125.
Long Statement,Lucene.Net.Analysis.Core,TestUAX29URLEmailAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailAnalyzer.cs,TestVariousTextSA,The length of the statement  "            BaseTokenStreamTestCase.AssertAnalyzesTo(a' "C embedded developers wanted"' new string[] { "c"' "embedded"' "developers"' "wanted" }); " is 134.
Long Statement,Lucene.Net.Analysis.Core,TestUAX29URLEmailAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailAnalyzer.cs,TestOffsets,The length of the statement  "            BaseTokenStreamTestCase.AssertAnalyzesTo(a' "David has 5000 bones"' new string[] { "david"' "has"' "5000"' "bones" }' new int[] { 0' 6' 10' 15 }' new int[] { 5' 9' 14' 20 }); " is 174.
Long Statement,Lucene.Net.Analysis.Core,TestUAX29URLEmailAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailAnalyzer.cs,TestTypes,The length of the statement  "            BaseTokenStreamTestCase.AssertAnalyzesTo(a' "david has 5000 bones"' new string[] { "david"' "has"' "5000"' "bones" }' new string[] { "<ALPHANUM>"' "<ALPHANUM>"' "<NUM>"' "<ALPHANUM>" }); " is 186.
Long Statement,Lucene.Net.Analysis.Core,TestUAX29URLEmailAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailAnalyzer.cs,TestSupplementary,The length of the statement  "            BaseTokenStreamTestCase.AssertAnalyzesTo(a' "𩬅艱鍟䇹愯瀛"' new string[] { "𩬅"' "艱"' "鍟"' "䇹"' "愯"' "瀛" }' new string[] { "<IDEOGRAPHIC>"' "<IDEOGRAPHIC>"' "<IDEOGRAPHIC>"' "<IDEOGRAPHIC>"' "<IDEOGRAPHIC>"' "<IDEOGRAPHIC>" }); " is 222.
Long Statement,Lucene.Net.Analysis.Core,TestUAX29URLEmailAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailAnalyzer.cs,TestJapanese,The length of the statement  "            BaseTokenStreamTestCase.AssertAnalyzesTo(a' "仮名遣い カタカナ"' new string[] { "仮"' "名"' "遣"' "い"' "カタカナ" }' new string[] { "<IDEOGRAPHIC>"' "<IDEOGRAPHIC>"' "<IDEOGRAPHIC>"' "<HIRAGANA>"' "<KATAKANA>" }); " is 198.
Long Statement,Lucene.Net.Analysis.Core,TestUAX29URLEmailAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailAnalyzer.cs,TestBasicEmails,The length of the statement  "            BaseTokenStreamTestCase.AssertAnalyzesTo(a' "one test@example.com two three [A@example.CO.UK] \"ArakaBanassaMassanaBakarA\" <info@Info.info>"' new string[] { "one"' "test@example.com"' "two"' "three"' "a@example.co.uk"' "arakabanassamassanabakara"' "info@info.info" }' new string[] { "<ALPHANUM>"' "<EMAIL>"' "<ALPHANUM>"' "<ALPHANUM>"' "<EMAIL>"' "<ALPHANUM>"' "<EMAIL>" }); " is 375.
Long Statement,Lucene.Net.Analysis.Core,TestUAX29URLEmailAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailAnalyzer.cs,TestMailtoSchemeEmails,The length of the statement  "            BaseTokenStreamTestCase.AssertAnalyzesTo(a' "MAILTO:Test@Example.ORG"' new string[] { "mailto"' "test@example.org" }' new string[] { "<ALPHANUM>"' "<EMAIL>" }); " is 160.
Long Statement,Lucene.Net.Analysis.Core,TestUAX29URLEmailAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailAnalyzer.cs,TestMailtoSchemeEmails,The length of the statement  "            BaseTokenStreamTestCase.AssertAnalyzesTo(a' "mailto:personA@example.com'personB@example.com?cc=personC@example.com" + "&subject=Subjectivity&body=Corpusivity%20or%20something%20like%20that"' new string[] { "mailto"' "persona@example.com"' "'personb@example.com"' "?cc=personc@example.com"' "subject"' "subjectivity"' "body"' "corpusivity"' "20or"' "20something"' "20like"' "20that" }' new string[] { "<ALPHANUM>"' "<EMAIL>"' "<EMAIL>"' "<EMAIL>"' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>" }); // TODO: Hex decoding + re-tokenization -  TODO: split field keys/values " is 634.
Long Statement,Lucene.Net.Analysis.Core,TestUAX29URLEmailAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailAnalyzer.cs,TestBasicURLs,The length of the statement  "            BaseTokenStreamTestCase.AssertAnalyzesTo(a' "a <HTTPs://example.net/omg/isnt/that/NICE?no=its&n%30t#mntl-E>b-D ftp://www.example.com/ABC.txt file:///C:/path/to/a/FILE.txt C"' new string[] { "https://example.net/omg/isnt/that/nice?no=its&n%30t#mntl-e"' "b"' "d"' "ftp://www.example.com/abc.txt"' "file:///c:/path/to/a/file.txt"' "c" }' new string[] { "<URL>"' "<ALPHANUM>"' "<ALPHANUM>"' "<URL>"' "<URL>"' "<ALPHANUM>" }); " is 421.
Long Statement,Lucene.Net.Analysis.Core,TestUAX29URLEmailAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailAnalyzer.cs,TestNoSchemeURLs,The length of the statement  "            BaseTokenStreamTestCase.AssertAnalyzesTo(a' "index-h.php"' new string[] { "index"' "h.php" }' new string[] { "<ALPHANUM>"' "<ALPHANUM>" }); " is 139.
Long Statement,Lucene.Net.Analysis.Core,TestUAX29URLEmailAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailAnalyzer.cs,TestNoSchemeURLs,The length of the statement  "            BaseTokenStreamTestCase.AssertAnalyzesTo(a' "index2.php"' new string[] { "index2"' "php" }' new string[] { "<ALPHANUM>"' "<ALPHANUM>" }); " is 137.
Long Statement,Lucene.Net.Analysis.Core,TestUAX29URLEmailAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailAnalyzer.cs,TestNoSchemeURLs,The length of the statement  "            BaseTokenStreamTestCase.AssertAnalyzesTo(a' "index2.ph９'"' new string[] { "index2"' "ph９" }' new string[] { "<ALPHANUM>"' "<ALPHANUM>" }); " is 138.
Long Statement,Lucene.Net.Analysis.Core,TestUAX29URLEmailAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailAnalyzer.cs,TestNoSchemeURLs,The length of the statement  "            BaseTokenStreamTestCase.AssertAnalyzesTo(a' "example.com'example.ph'index.php'index2.php'example2.ph"' new string[] { "example.com"' "example.ph"' "index.php"' "index2"' "php"' "example2.ph" }' new string[] { "<URL>"' "<URL>"' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' "<URL>" }); " is 280.
Long Statement,Lucene.Net.Analysis.Core,TestUAX29URLEmailAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailAnalyzer.cs,TestNoSchemeURLs,The length of the statement  "            BaseTokenStreamTestCase.AssertAnalyzesTo(a' "example.com:8080 example.com/path/here example.com?query=something example.com#fragment"' new string[] { "example.com:8080"' "example.com/path/here"' "example.com?query=something"' "example.com#fragment" }' new string[] { "<URL>"' "<URL>"' "<URL>"' "<URL>" }); " is 305.
Long Statement,Lucene.Net.Analysis.Core,TestUAX29URLEmailAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailAnalyzer.cs,TestNoSchemeURLs,The length of the statement  "            BaseTokenStreamTestCase.AssertAnalyzesTo(a' "example.com:8080/path/here?query=something#fragment"' new string[] { "example.com:8080/path/here?query=something#fragment" }' new string[] { "<URL>" }); " is 197.
Long Statement,Lucene.Net.Analysis.Core,TestUAX29URLEmailAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailAnalyzer.cs,TestNoSchemeURLs,The length of the statement  "            BaseTokenStreamTestCase.AssertAnalyzesTo(a' "example.com:8080/path/here?query=something"' new string[] { "example.com:8080/path/here?query=something" }' new string[] { "<URL>" }); " is 179.
Long Statement,Lucene.Net.Analysis.Core,TestUAX29URLEmailAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailAnalyzer.cs,TestNoSchemeURLs,The length of the statement  "            BaseTokenStreamTestCase.AssertAnalyzesTo(a' "example.com:8080/path/here#fragment"' new string[] { "example.com:8080/path/here#fragment" }' new string[] { "<URL>" }); " is 165.
Long Statement,Lucene.Net.Analysis.Core,TestUAX29URLEmailAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailAnalyzer.cs,TestNoSchemeURLs,The length of the statement  "            BaseTokenStreamTestCase.AssertAnalyzesTo(a' "example.com:8080/path/here"' new string[] { "example.com:8080/path/here" }' new string[] { "<URL>" }); " is 147.
Long Statement,Lucene.Net.Analysis.Core,TestUAX29URLEmailAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailAnalyzer.cs,TestNoSchemeURLs,The length of the statement  "            BaseTokenStreamTestCase.AssertAnalyzesTo(a' "example.com:8080?query=something#fragment"' new string[] { "example.com:8080?query=something#fragment" }' new string[] { "<URL>" }); " is 177.
Long Statement,Lucene.Net.Analysis.Core,TestUAX29URLEmailAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailAnalyzer.cs,TestNoSchemeURLs,The length of the statement  "            BaseTokenStreamTestCase.AssertAnalyzesTo(a' "example.com:8080?query=something"' new string[] { "example.com:8080?query=something" }' new string[] { "<URL>" }); " is 159.
Long Statement,Lucene.Net.Analysis.Core,TestUAX29URLEmailAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailAnalyzer.cs,TestNoSchemeURLs,The length of the statement  "            BaseTokenStreamTestCase.AssertAnalyzesTo(a' "example.com:8080#fragment"' new string[] { "example.com:8080#fragment" }' new string[] { "<URL>" }); " is 145.
Long Statement,Lucene.Net.Analysis.Core,TestUAX29URLEmailAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailAnalyzer.cs,TestNoSchemeURLs,The length of the statement  "            BaseTokenStreamTestCase.AssertAnalyzesTo(a' "example.com/path/here?query=something#fragment"' new string[] { "example.com/path/here?query=something#fragment" }' new string[] { "<URL>" }); " is 187.
Long Statement,Lucene.Net.Analysis.Core,TestUAX29URLEmailAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailAnalyzer.cs,TestNoSchemeURLs,The length of the statement  "            BaseTokenStreamTestCase.AssertAnalyzesTo(a' "example.com/path/here?query=something"' new string[] { "example.com/path/here?query=something" }' new string[] { "<URL>" }); " is 169.
Long Statement,Lucene.Net.Analysis.Core,TestUAX29URLEmailAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailAnalyzer.cs,TestNoSchemeURLs,The length of the statement  "            BaseTokenStreamTestCase.AssertAnalyzesTo(a' "example.com/path/here#fragment"' new string[] { "example.com/path/here#fragment" }' new string[] { "<URL>" }); " is 155.
Long Statement,Lucene.Net.Analysis.Core,TestUAX29URLEmailAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailAnalyzer.cs,TestNoSchemeURLs,The length of the statement  "            BaseTokenStreamTestCase.AssertAnalyzesTo(a' "example.com?query=something#fragment"' new string[] { "example.com?query=something#fragment" }' new string[] { "<URL>" }); " is 167.
Long Statement,Lucene.Net.Analysis.Core,TestUAX29URLEmailTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailTokenizer.cs,TestArmenian,The length of the statement  "            BaseTokenStreamTestCase.AssertAnalyzesTo(a' "Վիքիպեդիայի 13 միլիոն հոդվածները (4'600` հայերեն վիքիպեդիայում) գրվել են կամավորների կողմից ու համարյա բոլոր հոդվածները կարող է խմբագրել ցանկաց մարդ ով կարող է բացել Վիքիպեդիայի կայքը։"' new string[] { "Վիքիպեդիայի"' "13"' "միլիոն"' "հոդվածները"' "4'600"' "հայերեն"' "վիքիպեդիայում"' "գրվել"' "են"' "կամավորների"' "կողմից"' "ու"' "համարյա"' "բոլոր"' "հոդվածները"' "կարող"' "է"' "խմբագրել"' "ցանկաց"' "մարդ"' "ով"' "կարող"' "է"' "բացել"' "Վիքիպեդիայի"' "կայքը" }); " is 508.
Long Statement,Lucene.Net.Analysis.Core,TestUAX29URLEmailTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailTokenizer.cs,TestAmharic,The length of the statement  "            BaseTokenStreamTestCase.AssertAnalyzesTo(a' "ዊኪፔድያ የባለ ብዙ ቋንቋ የተሟላ ትክክለኛና ነጻ መዝገበ ዕውቀት (ኢንሳይክሎፒዲያ) ነው። ማንኛውም"' new string[] { "ዊኪፔድያ"' "የባለ"' "ብዙ"' "ቋንቋ"' "የተሟላ"' "ትክክለኛና"' "ነጻ"' "መዝገበ"' "ዕውቀት"' "ኢንሳይክሎፒዲያ"' "ነው"' "ማንኛውም" }); " is 225.
Long Statement,Lucene.Net.Analysis.Core,TestUAX29URLEmailTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailTokenizer.cs,TestArabic,The length of the statement  "            BaseTokenStreamTestCase.AssertAnalyzesTo(a' "الفيلم الوثائقي الأول عن ويكيبيديا يسمى \"الحقيقة بالأرقام: قصة ويكيبيديا\" (بالإنجليزية: Truth in Numbers: The Wikipedia Story)، سيتم إطلاقه في 2008."' new string[] { "الفيلم"' "الوثائقي"' "الأول"' "عن"' "ويكيبيديا"' "يسمى"' "الحقيقة"' "بالأرقام"' "قصة"' "ويكيبيديا"' "بالإنجليزية"' "Truth"' "in"' "Numbers"' "The"' "Wikipedia"' "Story"' "سيتم"' "إطلاقه"' "في"' "2008" }); " is 418.
Long Statement,Lucene.Net.Analysis.Core,TestUAX29URLEmailTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailTokenizer.cs,TestAramaic,The length of the statement  "            BaseTokenStreamTestCase.AssertAnalyzesTo(a' "ܘܝܩܝܦܕܝܐ (ܐܢܓܠܝܐ: Wikipedia) ܗܘ ܐܝܢܣܩܠܘܦܕܝܐ ܚܐܪܬܐ ܕܐܢܛܪܢܛ ܒܠܫܢ̈ܐ ܣܓܝܐ̈ܐ܂ ܫܡܗ ܐܬܐ ܡܢ ܡ̈ܠܬܐ ܕ\"ܘܝܩܝ\" ܘ\"ܐܝܢܣܩܠܘܦܕܝܐ\"܀"' new string[] { "ܘܝܩܝܦܕܝܐ"' "ܐܢܓܠܝܐ"' "Wikipedia"' "ܗܘ"' "ܐܝܢܣܩܠܘܦܕܝܐ"' "ܚܐܪܬܐ"' "ܕܐܢܛܪܢܛ"' "ܒܠܫܢ̈ܐ"' "ܣܓܝܐ̈ܐ"' "ܫܡܗ"' "ܐܬܐ"' "ܡܢ"' "ܡ̈ܠܬܐ"' "ܕ"' "ܘܝܩܝ"' "ܘ"' "ܐܝܢܣܩܠܘܦܕܝܐ" }); " is 340.
Long Statement,Lucene.Net.Analysis.Core,TestUAX29URLEmailTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailTokenizer.cs,TestBengali,The length of the statement  "            BaseTokenStreamTestCase.AssertAnalyzesTo(a' "এই বিশ্বকোষ পরিচালনা করে উইকিমিডিয়া ফাউন্ডেশন (একটি অলাভজনক সংস্থা)। উইকিপিডিয়ার শুরু ১৫ জানুয়ারি' ২০০১ সালে। এখন পর্যন্ত ২০০টিরও বেশী ভাষায় উইকিপিডিয়া রয়েছে।"' new string[] { "এই"' "বিশ্বকোষ"' "পরিচালনা"' "করে"' "উইকিমিডিয়া"' "ফাউন্ডেশন"' "একটি"' "অলাভজনক"' "সংস্থা"' "উইকিপিডিয়ার"' "শুরু"' "১৫"' "জানুয়ারি"' "২০০১"' "সালে"' "এখন"' "পর্যন্ত"' "২০০টিরও"' "বেশী"' "ভাষায়"' "উইকিপিডিয়া"' "রয়েছে" }); " is 454.
Long Statement,Lucene.Net.Analysis.Core,TestUAX29URLEmailTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailTokenizer.cs,TestFarsi,The length of the statement  "            BaseTokenStreamTestCase.AssertAnalyzesTo(a' "ویکی پدیای انگلیسی در تاریخ ۲۵ دی ۱۳۷۹ به صورت مکملی برای دانشنامهٔ تخصصی نوپدیا نوشته شد."' new string[] { "ویکی"' "پدیای"' "انگلیسی"' "در"' "تاریخ"' "۲۵"' "دی"' "۱۳۷۹"' "به"' "صورت"' "مکملی"' "برای"' "دانشنامهٔ"' "تخصصی"' "نوپدیا"' "نوشته"' "شد" }); " is 296.
Long Statement,Lucene.Net.Analysis.Core,TestUAX29URLEmailTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailTokenizer.cs,TestGreek,The length of the statement  "            BaseTokenStreamTestCase.AssertAnalyzesTo(a' "Γράφεται σε συνεργασία από εθελοντές με το λογισμικό wiki' κάτι που σημαίνει ότι άρθρα μπορεί να προστεθούν ή να αλλάξουν από τον καθένα."' new string[] { "Γράφεται"' "σε"' "συνεργασία"' "από"' "εθελοντές"' "με"' "το"' "λογισμικό"' "wiki"' "κάτι"' "που"' "σημαίνει"' "ότι"' "άρθρα"' "μπορεί"' "να"' "προστεθούν"' "ή"' "να"' "αλλάξουν"' "από"' "τον"' "καθένα" }); " is 407.
Long Statement,Lucene.Net.Analysis.Core,TestUAX29URLEmailTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailTokenizer.cs,TestThai,The length of the statement  "            BaseTokenStreamTestCase.AssertAnalyzesTo(a' "การที่ได้ต้องแสดงว่างานดี. แล้วเธอจะไปไหน? ๑๒๓๔"' new string[] { "การที่ได้ต้องแสดงว่างานดี"' "แล้วเธอจะไปไหน"' "๑๒๓๔" }); " is 167.
Long Statement,Lucene.Net.Analysis.Core,TestUAX29URLEmailTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailTokenizer.cs,TestLao,The length of the statement  "            BaseTokenStreamTestCase.AssertAnalyzesTo(a' "ສາທາລະນະລັດ ປະຊາທິປະໄຕ ປະຊາຊົນລາວ"' new string[] { "ສາທາລະນະລັດ"' "ປະຊາທິປະໄຕ"' "ປະຊາຊົນລາວ" }); " is 141.
Long Statement,Lucene.Net.Analysis.Core,TestUAX29URLEmailTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailTokenizer.cs,TestTibetan,The length of the statement  "            BaseTokenStreamTestCase.AssertAnalyzesTo(a' "སྣོན་མཛོད་དང་ལས་འདིས་བོད་ཡིག་མི་ཉམས་གོང་འཕེལ་དུ་གཏོང་བར་ཧ་ཅང་དགེ་མཚན་མཆིས་སོ། །"' new string[] { "སྣོན"' "མཛོད"' "དང"' "ལས"' "འདིས"' "བོད"' "ཡིག"' "མི"' "ཉམས"' "གོང"' "འཕེལ"' "དུ"' "གཏོང"' "བར"' "ཧ"' "ཅང"' "དགེ"' "མཚན"' "མཆིས"' "སོ" }); " is 281.
Long Statement,Lucene.Net.Analysis.Core,TestUAX29URLEmailTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailTokenizer.cs,TestChinese,The length of the statement  "            BaseTokenStreamTestCase.AssertAnalyzesTo(a' "我是中国人。 １２３４ Ｔｅｓｔｓ "' new string[] { "我"' "是"' "中"' "国"' "人"' "１２３４"' "Ｔｅｓｔｓ" }); " is 125.
Long Statement,Lucene.Net.Analysis.Core,TestUAX29URLEmailTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailTokenizer.cs,TestVariousTextSA,The length of the statement  "            BaseTokenStreamTestCase.AssertAnalyzesTo(a' "C embedded developers wanted"' new string[] { "C"' "embedded"' "developers"' "wanted" }); " is 134.
Long Statement,Lucene.Net.Analysis.Core,TestUAX29URLEmailTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailTokenizer.cs,TestOffsets,The length of the statement  "            BaseTokenStreamTestCase.AssertAnalyzesTo(a' "David has 5000 bones"' new string[] { "David"' "has"' "5000"' "bones" }' new int[] { 0' 6' 10' 15 }' new int[] { 5' 9' 14' 20 }); " is 174.
Long Statement,Lucene.Net.Analysis.Core,TestUAX29URLEmailTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailTokenizer.cs,TestTypes,The length of the statement  "            BaseTokenStreamTestCase.AssertAnalyzesTo(a' "David has 5000 bones"' new string[] { "David"' "has"' "5000"' "bones" }' new string[] { "<ALPHANUM>"' "<ALPHANUM>"' "<NUM>"' "<ALPHANUM>" }); " is 186.
Long Statement,Lucene.Net.Analysis.Core,TestUAX29URLEmailTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailTokenizer.cs,TestWikiURLs,The length of the statement  "                bufferedReader = new StreamReader(this.GetType().getResourceAsStream("LuceneResourcesWikiPageURLs.txt")' Encoding.UTF8); " is 120.
Long Statement,Lucene.Net.Analysis.Core,TestUAX29URLEmailTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailTokenizer.cs,TestEmails,The length of the statement  "                reader = new System.IO.StreamReader(this.GetType().getResourceAsStream("random.text.with.email.addresses.txt")' Encoding.UTF8); " is 127.
Long Statement,Lucene.Net.Analysis.Core,TestUAX29URLEmailTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailTokenizer.cs,TestEmails,The length of the statement  "                bufferedReader = new System.IO.StreamReader(this.GetType().getResourceAsStream("email.addresses.from.random.text.with.email.addresses.txt")' Encoding.UTF8); " is 156.
Long Statement,Lucene.Net.Analysis.Core,TestUAX29URLEmailTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailTokenizer.cs,TestMailtoSchemeEmails,The length of the statement  "            BaseTokenStreamTestCase.AssertAnalyzesTo(a' "mailto:test@example.org"' new string[] { "mailto"' "test@example.org" }' new string[] { "<ALPHANUM>"' "<EMAIL>" }); " is 160.
Long Statement,Lucene.Net.Analysis.Core,TestUAX29URLEmailTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailTokenizer.cs,TestMailtoSchemeEmails,The length of the statement  "            BaseTokenStreamTestCase.AssertAnalyzesTo(a' "mailto:personA@example.com'personB@example.com?cc=personC@example.com" + "&subject=Subjectivity&body=Corpusivity%20or%20something%20like%20that"' new string[] { "mailto"' "personA@example.com"' "'personB@example.com"' "?cc=personC@example.com"' "subject"' "Subjectivity"' "body"' "Corpusivity"' "20or"' "20something"' "20like"' "20that" }' new string[] { "<ALPHANUM>"' "<EMAIL>"' "<EMAIL>"' "<EMAIL>"' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>" }); // TODO: Hex decoding + re-tokenization -  TODO: split field keys/values " is 634.
Long Statement,Lucene.Net.Analysis.Core,TestUAX29URLEmailTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailTokenizer.cs,TestURLs,The length of the statement  "                bufferedReader = new System.IO.StreamReader(this.GetType().getResourceAsStream("urls.from.random.text.with.urls.txt")' Encoding.UTF8); " is 134.
Long Statement,Lucene.Net.Analysis.Core,TestUAX29URLEmailTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailTokenizer.cs,TestSupplementary,The length of the statement  "            BaseTokenStreamTestCase.AssertAnalyzesTo(a' "𩬅艱鍟䇹愯瀛"' new string[] { "𩬅"' "艱"' "鍟"' "䇹"' "愯"' "瀛" }' new string[] { "<IDEOGRAPHIC>"' "<IDEOGRAPHIC>"' "<IDEOGRAPHIC>"' "<IDEOGRAPHIC>"' "<IDEOGRAPHIC>"' "<IDEOGRAPHIC>" }); " is 222.
Long Statement,Lucene.Net.Analysis.Core,TestUAX29URLEmailTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailTokenizer.cs,TestJapanese,The length of the statement  "            BaseTokenStreamTestCase.AssertAnalyzesTo(a' "仮名遣い カタカナ"' new string[] { "仮"' "名"' "遣"' "い"' "カタカナ" }' new string[] { "<IDEOGRAPHIC>"' "<IDEOGRAPHIC>"' "<IDEOGRAPHIC>"' "<HIRAGANA>"' "<KATAKANA>" }); " is 198.
Long Statement,Lucene.Net.Analysis.Core,TestUAX29URLEmailTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailTokenizer.cs,TestVersion36,The length of the statement  "            AssertAnalyzesTo(a' "this is just a t\u08E6st lucene@apache.org"' new string[] { "this"' "is"' "just"' "a"' "t"' "st"' "lucene@apache.org" }); // new combining mark in 6.1 " is 171.
Long Statement,Lucene.Net.Analysis.Core,TestUAX29URLEmailTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailTokenizer.cs,TestVersion40,The length of the statement  "            AssertAnalyzesTo(a' "this is just a t\u061Cst lucene@apache.org"' new string[] { "this"' "is"' "just"' "a"' "t"' "st"' "lucene@apache.org" }); " is 142.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0001 × 0308 ÷ 0001 ÷  #  ÷ [0.2] <START OF HEADING> (Other) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3] " is 149.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0001 × 0308 ÷ 000D ÷  #  ÷ [0.2] <START OF HEADING> (Other) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3] " is 148.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0001 × 0308 ÷ 000A ÷  #  ÷ [0.2] <START OF HEADING> (Other) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3] " is 142.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0001 × 0308 ÷ 000B ÷  #  ÷ [0.2] <START OF HEADING> (Other) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3] " is 148.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0001 × 0308 ÷ 3031 ÷  #  ÷ [0.2] <START OF HEADING> (Other) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3] " is 159.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0001 × 0308 ÷ 0041 ÷  #  ÷ [0.2] <START OF HEADING> (Other) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3] " is 155.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0001 × 0308 ÷ 003A ÷  #  ÷ [0.2] <START OF HEADING> (Other) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 140.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0001 × 0308 ÷ 002C ÷  #  ÷ [0.2] <START OF HEADING> (Other) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 137.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0001 × 0308 ÷ 002E ÷  #  ÷ [0.2] <START OF HEADING> (Other) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3] " is 144.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0001 × 0308 ÷ 0030 ÷  #  ÷ [0.2] <START OF HEADING> (Other) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3] " is 143.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0001 × 0308 ÷ 005F ÷  #  ÷ [0.2] <START OF HEADING> (Other) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3] " is 146.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0001 ÷ 1F1E6 ÷  #  ÷ [0.2] <START OF HEADING> (Other) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [0.3] " is 132.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0001 × 0308 ÷ 1F1E6 ÷  #  ÷ [0.2] <START OF HEADING> (Other) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [0.3] " is 179.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0001 × 0308 ÷ 05D0 ÷  #  ÷ [0.2] <START OF HEADING> (Other) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3] " is 157.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0001 × 0308 ÷ 0022 ÷  #  ÷ [0.2] <START OF HEADING> (Other) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3] " is 152.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0001 × 0308 ÷ 0027 ÷  #  ÷ [0.2] <START OF HEADING> (Other) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 148.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0001 × 0308 × 00AD ÷  #  ÷ [0.2] <START OF HEADING> (Other) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3] " is 144.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0001 × 0308 × 0300 ÷  #  ÷ [0.2] <START OF HEADING> (Other) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3] " is 155.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0001 ÷ 0061 × 2060 ÷  #  ÷ [0.2] <START OF HEADING> (Other) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 145.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0001 × 0308 ÷ 0061 × 2060 ÷  #  ÷ [0.2] <START OF HEADING> (Other) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 192.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0001 ÷ 0061 ÷ 003A ÷  #  ÷ [0.2] <START OF HEADING> (Other) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 141.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0001 × 0308 ÷ 0061 ÷ 003A ÷  #  ÷ [0.2] <START OF HEADING> (Other) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 188.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0001 ÷ 0061 ÷ 0027 ÷  #  ÷ [0.2] <START OF HEADING> (Other) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 149.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0001 × 0308 ÷ 0061 ÷ 0027 ÷  #  ÷ [0.2] <START OF HEADING> (Other) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 196.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0001 ÷ 0061 ÷ 0027 × 2060 ÷  #  ÷ [0.2] <START OF HEADING> (Other) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 188.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0001 × 0308 ÷ 0061 ÷ 0027 × 2060 ÷  #  ÷ [0.2] <START OF HEADING> (Other) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 235.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0001 ÷ 0061 ÷ 002C ÷  #  ÷ [0.2] <START OF HEADING> (Other) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 138.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0001 × 0308 ÷ 0061 ÷ 002C ÷  #  ÷ [0.2] <START OF HEADING> (Other) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 185.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0001 ÷ 0031 ÷ 003A ÷  #  ÷ [0.2] <START OF HEADING> (Other) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 130.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0001 × 0308 ÷ 0031 ÷ 003A ÷  #  ÷ [0.2] <START OF HEADING> (Other) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 177.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0001 ÷ 0031 ÷ 0027 ÷  #  ÷ [0.2] <START OF HEADING> (Other) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 138.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0001 × 0308 ÷ 0031 ÷ 0027 ÷  #  ÷ [0.2] <START OF HEADING> (Other) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 185.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0001 ÷ 0031 ÷ 002C ÷  #  ÷ [0.2] <START OF HEADING> (Other) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 127.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0001 × 0308 ÷ 0031 ÷ 002C ÷  #  ÷ [0.2] <START OF HEADING> (Other) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 174.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0001 ÷ 0031 ÷ 002E × 2060 ÷  #  ÷ [0.2] <START OF HEADING> (Other) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 173.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0001 × 0308 ÷ 0031 ÷ 002E × 2060 ÷  #  ÷ [0.2] <START OF HEADING> (Other) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 220.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000D ÷ 0308 ÷ 0001 ÷  #  ÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3] " is 150.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000D ÷ 0308 ÷ 000D ÷  #  ÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3] " is 149.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000D ÷ 0308 ÷ 000A ÷  #  ÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3] " is 143.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000D ÷ 0308 ÷ 000B ÷  #  ÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3] " is 149.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000D ÷ 0308 ÷ 3031 ÷  #  ÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3] " is 160.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000D ÷ 0308 ÷ 0041 ÷  #  ÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3] " is 156.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000D ÷ 0308 ÷ 003A ÷  #  ÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 141.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000D ÷ 0308 ÷ 002C ÷  #  ÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 138.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000D ÷ 0308 ÷ 002E ÷  #  ÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3] " is 145.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000D ÷ 0308 ÷ 0030 ÷  #  ÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3] " is 144.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000D ÷ 0308 ÷ 005F ÷  #  ÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3] " is 147.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000D ÷ 1F1E6 ÷  #  ÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [0.3] " is 131.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000D ÷ 0308 ÷ 1F1E6 ÷  #  ÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [0.3] " is 180.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000D ÷ 0308 ÷ 05D0 ÷  #  ÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3] " is 158.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000D ÷ 0308 ÷ 0022 ÷  #  ÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3] " is 153.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000D ÷ 0308 ÷ 0027 ÷  #  ÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 149.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000D ÷ 0308 × 00AD ÷  #  ÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3] " is 145.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000D ÷ 0308 × 0300 ÷  #  ÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3] " is 156.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000D ÷ 0061 × 2060 ÷  #  ÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 144.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000D ÷ 0308 ÷ 0061 × 2060 ÷  #  ÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 193.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000D ÷ 0061 ÷ 003A ÷  #  ÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 140.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000D ÷ 0308 ÷ 0061 ÷ 003A ÷  #  ÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 189.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000D ÷ 0061 ÷ 0027 ÷  #  ÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 148.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000D ÷ 0308 ÷ 0061 ÷ 0027 ÷  #  ÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 197.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000D ÷ 0061 ÷ 0027 × 2060 ÷  #  ÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 187.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000D ÷ 0308 ÷ 0061 ÷ 0027 × 2060 ÷  #  ÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 236.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000D ÷ 0061 ÷ 002C ÷  #  ÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 137.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000D ÷ 0308 ÷ 0061 ÷ 002C ÷  #  ÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 186.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000D ÷ 0031 ÷ 003A ÷  #  ÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 129.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000D ÷ 0308 ÷ 0031 ÷ 003A ÷  #  ÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 178.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000D ÷ 0031 ÷ 0027 ÷  #  ÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 137.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000D ÷ 0308 ÷ 0031 ÷ 0027 ÷  #  ÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 186.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000D ÷ 0031 ÷ 002C ÷  #  ÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 126.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000D ÷ 0308 ÷ 0031 ÷ 002C ÷  #  ÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 175.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000D ÷ 0031 ÷ 002E × 2060 ÷  #  ÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 172.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000D ÷ 0308 ÷ 0031 ÷ 002E × 2060 ÷  #  ÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 221.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000A ÷ 0308 ÷ 0001 ÷  #  ÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3] " is 144.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000A ÷ 0308 ÷ 000D ÷  #  ÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3] " is 143.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000A ÷ 0308 ÷ 000A ÷  #  ÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3] " is 137.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000A ÷ 0308 ÷ 000B ÷  #  ÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3] " is 143.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000A ÷ 0308 ÷ 3031 ÷  #  ÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3] " is 154.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000A ÷ 0308 ÷ 0041 ÷  #  ÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3] " is 150.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000A ÷ 0308 ÷ 003A ÷  #  ÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 135.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000A ÷ 0308 ÷ 002C ÷  #  ÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 132.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000A ÷ 0308 ÷ 002E ÷  #  ÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3] " is 139.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000A ÷ 0308 ÷ 0030 ÷  #  ÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3] " is 138.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000A ÷ 0308 ÷ 005F ÷  #  ÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3] " is 141.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000A ÷ 1F1E6 ÷  #  ÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [0.3] " is 125.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000A ÷ 0308 ÷ 1F1E6 ÷  #  ÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [0.3] " is 174.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000A ÷ 0308 ÷ 05D0 ÷  #  ÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3] " is 152.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000A ÷ 0308 ÷ 0022 ÷  #  ÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3] " is 147.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000A ÷ 0308 ÷ 0027 ÷  #  ÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 143.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000A ÷ 0308 × 00AD ÷  #  ÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3] " is 139.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000A ÷ 0308 × 0300 ÷  #  ÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3] " is 150.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000A ÷ 0061 × 2060 ÷  #  ÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 138.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000A ÷ 0308 ÷ 0061 × 2060 ÷  #  ÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 187.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000A ÷ 0061 ÷ 003A ÷  #  ÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 134.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000A ÷ 0308 ÷ 0061 ÷ 003A ÷  #  ÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 183.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000A ÷ 0061 ÷ 0027 ÷  #  ÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 142.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000A ÷ 0308 ÷ 0061 ÷ 0027 ÷  #  ÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 191.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000A ÷ 0061 ÷ 0027 × 2060 ÷  #  ÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 181.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000A ÷ 0308 ÷ 0061 ÷ 0027 × 2060 ÷  #  ÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 230.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000A ÷ 0061 ÷ 002C ÷  #  ÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 131.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000A ÷ 0308 ÷ 0061 ÷ 002C ÷  #  ÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 180.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000A ÷ 0031 ÷ 003A ÷  #  ÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 123.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000A ÷ 0308 ÷ 0031 ÷ 003A ÷  #  ÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 172.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000A ÷ 0031 ÷ 0027 ÷  #  ÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 131.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000A ÷ 0308 ÷ 0031 ÷ 0027 ÷  #  ÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 180.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000A ÷ 0031 ÷ 002C ÷  #  ÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 120.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000A ÷ 0308 ÷ 0031 ÷ 002C ÷  #  ÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 169.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000A ÷ 0031 ÷ 002E × 2060 ÷  #  ÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 166.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000A ÷ 0308 ÷ 0031 ÷ 002E × 2060 ÷  #  ÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 215.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000B ÷ 0308 ÷ 0001 ÷  #  ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3] " is 150.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000B ÷ 0308 ÷ 000D ÷  #  ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3] " is 149.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000B ÷ 0308 ÷ 000A ÷  #  ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3] " is 143.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000B ÷ 0308 ÷ 000B ÷  #  ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3] " is 149.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000B ÷ 0308 ÷ 3031 ÷  #  ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3] " is 160.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000B ÷ 0308 ÷ 0041 ÷  #  ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3] " is 156.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000B ÷ 0308 ÷ 003A ÷  #  ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 141.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000B ÷ 0308 ÷ 002C ÷  #  ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 138.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000B ÷ 0308 ÷ 002E ÷  #  ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3] " is 145.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000B ÷ 0308 ÷ 0030 ÷  #  ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3] " is 144.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000B ÷ 0308 ÷ 005F ÷  #  ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3] " is 147.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000B ÷ 1F1E6 ÷  #  ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [0.3] " is 131.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000B ÷ 0308 ÷ 1F1E6 ÷  #  ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [0.3] " is 180.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000B ÷ 0308 ÷ 05D0 ÷  #  ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3] " is 158.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000B ÷ 0308 ÷ 0022 ÷  #  ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3] " is 153.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000B ÷ 0308 ÷ 0027 ÷  #  ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 149.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000B ÷ 0308 × 00AD ÷  #  ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3] " is 145.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000B ÷ 0308 × 0300 ÷  #  ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3] " is 156.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000B ÷ 0061 × 2060 ÷  #  ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 144.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000B ÷ 0308 ÷ 0061 × 2060 ÷  #  ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 193.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000B ÷ 0061 ÷ 003A ÷  #  ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 140.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000B ÷ 0308 ÷ 0061 ÷ 003A ÷  #  ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 189.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000B ÷ 0061 ÷ 0027 ÷  #  ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 148.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000B ÷ 0308 ÷ 0061 ÷ 0027 ÷  #  ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 197.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000B ÷ 0061 ÷ 0027 × 2060 ÷  #  ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 187.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000B ÷ 0308 ÷ 0061 ÷ 0027 × 2060 ÷  #  ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 236.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000B ÷ 0061 ÷ 002C ÷  #  ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 137.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000B ÷ 0308 ÷ 0061 ÷ 002C ÷  #  ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 186.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000B ÷ 0031 ÷ 003A ÷  #  ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 129.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000B ÷ 0308 ÷ 0031 ÷ 003A ÷  #  ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 178.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000B ÷ 0031 ÷ 0027 ÷  #  ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 137.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000B ÷ 0308 ÷ 0031 ÷ 0027 ÷  #  ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 186.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000B ÷ 0031 ÷ 002C ÷  #  ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 126.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000B ÷ 0308 ÷ 0031 ÷ 002C ÷  #  ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 175.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000B ÷ 0031 ÷ 002E × 2060 ÷  #  ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 172.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 000B ÷ 0308 ÷ 0031 ÷ 002E × 2060 ÷  #  ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 221.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 3031 × 0308 ÷ 0001 ÷  #  ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3] " is 159.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 3031 × 0308 ÷ 000D ÷  #  ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3] " is 158.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 3031 × 0308 ÷ 000A ÷  #  ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3] " is 152.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 3031 × 0308 ÷ 000B ÷  #  ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3] " is 158.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 3031 × 3031 ÷  #  ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [13.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3] " is 121.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 3031 × 0308 × 3031 ÷  #  ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) × [13.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3] " is 168.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 3031 × 0308 ÷ 0041 ÷  #  ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3] " is 165.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 3031 × 0308 ÷ 003A ÷  #  ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 150.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 3031 × 0308 ÷ 002C ÷  #  ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 147.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 3031 × 0308 ÷ 002E ÷  #  ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3] " is 154.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 3031 × 0308 ÷ 0030 ÷  #  ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3] " is 153.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 3031 × 0308 × 005F ÷  #  ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) × [13.1] LOW LINE (ExtendNumLet) ÷ [0.3] " is 155.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 3031 ÷ 1F1E6 ÷  #  ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [0.3] " is 142.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 3031 × 0308 ÷ 1F1E6 ÷  #  ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [0.3] " is 189.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 3031 ÷ 05D0 ÷  #  ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) ÷ [999.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3] " is 120.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 3031 × 0308 ÷ 05D0 ÷  #  ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3] " is 167.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 3031 × 0308 ÷ 0022 ÷  #  ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3] " is 162.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 3031 × 0308 ÷ 0027 ÷  #  ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 158.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 3031 × 0308 × 00AD ÷  #  ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3] " is 154.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 3031 × 0308 × 0300 ÷  #  ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3] " is 165.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 3031 ÷ 0061 × 2060 ÷  #  ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 155.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 3031 × 0308 ÷ 0061 × 2060 ÷  #  ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 202.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 3031 ÷ 0061 ÷ 003A ÷  #  ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 151.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 3031 × 0308 ÷ 0061 ÷ 003A ÷  #  ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 198.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 3031 ÷ 0061 ÷ 0027 ÷  #  ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 159.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 3031 × 0308 ÷ 0061 ÷ 0027 ÷  #  ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 206.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 3031 ÷ 0061 ÷ 0027 × 2060 ÷  #  ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 198.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 3031 × 0308 ÷ 0061 ÷ 0027 × 2060 ÷  #  ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 245.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 3031 ÷ 0061 ÷ 002C ÷  #  ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 148.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 3031 × 0308 ÷ 0061 ÷ 002C ÷  #  ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 195.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 3031 ÷ 0031 ÷ 003A ÷  #  ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 140.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 3031 × 0308 ÷ 0031 ÷ 003A ÷  #  ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 187.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 3031 ÷ 0031 ÷ 0027 ÷  #  ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 148.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 3031 × 0308 ÷ 0031 ÷ 0027 ÷  #  ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 195.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 3031 ÷ 0031 ÷ 002C ÷  #  ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 137.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 3031 × 0308 ÷ 0031 ÷ 002C ÷  #  ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 184.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 3031 ÷ 0031 ÷ 002E × 2060 ÷  #  ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 183.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 3031 × 0308 ÷ 0031 ÷ 002E × 2060 ÷  #  ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 230.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0041 × 0308 ÷ 0001 ÷  #  ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3] " is 155.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0041 × 0308 ÷ 000D ÷  #  ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3] " is 154.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0041 × 0308 ÷ 000A ÷  #  ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3] " is 148.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0041 × 0308 ÷ 000B ÷  #  ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3] " is 154.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0041 × 0308 ÷ 3031 ÷  #  ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3] " is 165.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0041 × 0308 × 0041 ÷  #  ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [5.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3] " is 159.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0041 × 0308 ÷ 003A ÷  #  ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 146.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0041 × 0308 ÷ 002C ÷  #  ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 143.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0041 × 0308 ÷ 002E ÷  #  ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3] " is 150.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0041 × 0308 × 0030 ÷  #  ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [9.0] DIGIT ZERO (Numeric) ÷ [0.3] " is 147.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0041 × 0308 × 005F ÷  #  ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [13.1] LOW LINE (ExtendNumLet) ÷ [0.3] " is 151.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0041 ÷ 1F1E6 ÷  #  ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [0.3] " is 138.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0041 × 0308 ÷ 1F1E6 ÷  #  ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [0.3] " is 185.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0041 × 0308 × 05D0 ÷  #  ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [5.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3] " is 161.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0041 × 0308 ÷ 0022 ÷  #  ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3] " is 158.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0041 × 0308 ÷ 0027 ÷  #  ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 154.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0041 × 0308 × 00AD ÷  #  ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3] " is 150.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0041 × 0308 × 0300 ÷  #  ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3] " is 161.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0041 × 0061 × 2060 ÷  #  ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [5.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 149.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0041 × 0308 × 0061 × 2060 ÷  #  ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [5.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 196.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0041 × 0061 ÷ 003A ÷  #  ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [5.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 145.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0041 × 0308 × 0061 ÷ 003A ÷  #  ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [5.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 192.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0041 × 0061 ÷ 0027 ÷  #  ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [5.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 153.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0041 × 0308 × 0061 ÷ 0027 ÷  #  ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [5.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 200.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0041 × 0061 ÷ 0027 × 2060 ÷  #  ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [5.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 192.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0041 × 0308 × 0061 ÷ 0027 × 2060 ÷  #  ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [5.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 239.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0041 × 0061 ÷ 002C ÷  #  ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [5.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 142.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0041 × 0308 × 0061 ÷ 002C ÷  #  ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [5.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 189.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0041 × 0031 ÷ 003A ÷  #  ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [9.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 134.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0041 × 0308 × 0031 ÷ 003A ÷  #  ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [9.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 181.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0041 × 0031 ÷ 0027 ÷  #  ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [9.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 142.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0041 × 0308 × 0031 ÷ 0027 ÷  #  ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [9.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 189.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0041 × 0031 ÷ 002C ÷  #  ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [9.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 131.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0041 × 0308 × 0031 ÷ 002C ÷  #  ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [9.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 178.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0041 × 0031 ÷ 002E × 2060 ÷  #  ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [9.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 177.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0041 × 0308 × 0031 ÷ 002E × 2060 ÷  #  ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [9.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 224.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 003A × 0308 ÷ 0001 ÷  #  ÷ [0.2] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3] " is 140.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 003A × 0308 ÷ 000D ÷  #  ÷ [0.2] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3] " is 139.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 003A × 0308 ÷ 000A ÷  #  ÷ [0.2] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3] " is 133.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 003A × 0308 ÷ 000B ÷  #  ÷ [0.2] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3] " is 139.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 003A × 0308 ÷ 3031 ÷  #  ÷ [0.2] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3] " is 150.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 003A × 0308 ÷ 0041 ÷  #  ÷ [0.2] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3] " is 146.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 003A × 0308 ÷ 003A ÷  #  ÷ [0.2] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 131.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 003A × 0308 ÷ 002C ÷  #  ÷ [0.2] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 128.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 003A × 0308 ÷ 002E ÷  #  ÷ [0.2] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3] " is 135.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 003A × 0308 ÷ 0030 ÷  #  ÷ [0.2] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3] " is 134.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 003A × 0308 ÷ 005F ÷  #  ÷ [0.2] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3] " is 137.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 003A ÷ 1F1E6 ÷  #  ÷ [0.2] COLON (MidLetter) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [0.3] " is 123.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 003A × 0308 ÷ 1F1E6 ÷  #  ÷ [0.2] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [0.3] " is 170.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 003A × 0308 ÷ 05D0 ÷  #  ÷ [0.2] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3] " is 148.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 003A × 0308 ÷ 0022 ÷  #  ÷ [0.2] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3] " is 143.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 003A × 0308 ÷ 0027 ÷  #  ÷ [0.2] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 139.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 003A × 0308 × 00AD ÷  #  ÷ [0.2] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3] " is 135.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 003A × 0308 × 0300 ÷  #  ÷ [0.2] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3] " is 146.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 003A ÷ 0061 × 2060 ÷  #  ÷ [0.2] COLON (MidLetter) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 136.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 003A × 0308 ÷ 0061 × 2060 ÷  #  ÷ [0.2] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 183.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 003A ÷ 0061 ÷ 003A ÷  #  ÷ [0.2] COLON (MidLetter) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 132.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 003A × 0308 ÷ 0061 ÷ 003A ÷  #  ÷ [0.2] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 179.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 003A ÷ 0061 ÷ 0027 ÷  #  ÷ [0.2] COLON (MidLetter) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 140.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 003A × 0308 ÷ 0061 ÷ 0027 ÷  #  ÷ [0.2] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 187.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 003A ÷ 0061 ÷ 0027 × 2060 ÷  #  ÷ [0.2] COLON (MidLetter) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 179.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 003A × 0308 ÷ 0061 ÷ 0027 × 2060 ÷  #  ÷ [0.2] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 226.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 003A ÷ 0061 ÷ 002C ÷  #  ÷ [0.2] COLON (MidLetter) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 129.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 003A × 0308 ÷ 0061 ÷ 002C ÷  #  ÷ [0.2] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 176.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 003A ÷ 0031 ÷ 003A ÷  #  ÷ [0.2] COLON (MidLetter) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 121.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 003A × 0308 ÷ 0031 ÷ 003A ÷  #  ÷ [0.2] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 168.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 003A ÷ 0031 ÷ 0027 ÷  #  ÷ [0.2] COLON (MidLetter) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 129.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 003A × 0308 ÷ 0031 ÷ 0027 ÷  #  ÷ [0.2] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 176.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 003A × 0308 ÷ 0031 ÷ 002C ÷  #  ÷ [0.2] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 165.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 003A ÷ 0031 ÷ 002E × 2060 ÷  #  ÷ [0.2] COLON (MidLetter) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 164.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 003A × 0308 ÷ 0031 ÷ 002E × 2060 ÷  #  ÷ [0.2] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 211.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 002C × 0308 ÷ 0001 ÷  #  ÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3] " is 137.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 002C × 0308 ÷ 000D ÷  #  ÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3] " is 136.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 002C × 0308 ÷ 000A ÷  #  ÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3] " is 130.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 002C × 0308 ÷ 000B ÷  #  ÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3] " is 136.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 002C × 0308 ÷ 3031 ÷  #  ÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3] " is 147.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 002C × 0308 ÷ 0041 ÷  #  ÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3] " is 143.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 002C × 0308 ÷ 003A ÷  #  ÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 128.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 002C × 0308 ÷ 002C ÷  #  ÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 125.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 002C × 0308 ÷ 002E ÷  #  ÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3] " is 132.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 002C × 0308 ÷ 0030 ÷  #  ÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3] " is 131.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 002C × 0308 ÷ 005F ÷  #  ÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3] " is 134.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 002C ÷ 1F1E6 ÷  #  ÷ [0.2] COMMA (MidNum) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [0.3] " is 120.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 002C × 0308 ÷ 1F1E6 ÷  #  ÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [0.3] " is 167.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 002C × 0308 ÷ 05D0 ÷  #  ÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3] " is 145.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 002C × 0308 ÷ 0022 ÷  #  ÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3] " is 140.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 002C × 0308 ÷ 0027 ÷  #  ÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 136.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 002C × 0308 × 00AD ÷  #  ÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3] " is 132.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 002C × 0308 × 0300 ÷  #  ÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3] " is 143.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 002C ÷ 0061 × 2060 ÷  #  ÷ [0.2] COMMA (MidNum) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 133.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 002C × 0308 ÷ 0061 × 2060 ÷  #  ÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 180.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 002C ÷ 0061 ÷ 003A ÷  #  ÷ [0.2] COMMA (MidNum) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 129.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 002C × 0308 ÷ 0061 ÷ 003A ÷  #  ÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 176.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 002C ÷ 0061 ÷ 0027 ÷  #  ÷ [0.2] COMMA (MidNum) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 137.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 002C × 0308 ÷ 0061 ÷ 0027 ÷  #  ÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 184.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 002C ÷ 0061 ÷ 0027 × 2060 ÷  #  ÷ [0.2] COMMA (MidNum) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 176.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 002C × 0308 ÷ 0061 ÷ 0027 × 2060 ÷  #  ÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 223.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 002C ÷ 0061 ÷ 002C ÷  #  ÷ [0.2] COMMA (MidNum) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 126.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 002C × 0308 ÷ 0061 ÷ 002C ÷  #  ÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 173.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 002C × 0308 ÷ 0031 ÷ 003A ÷  #  ÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 165.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 002C ÷ 0031 ÷ 0027 ÷  #  ÷ [0.2] COMMA (MidNum) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 126.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 002C × 0308 ÷ 0031 ÷ 0027 ÷  #  ÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 173.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 002C × 0308 ÷ 0031 ÷ 002C ÷  #  ÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 162.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 002C ÷ 0031 ÷ 002E × 2060 ÷  #  ÷ [0.2] COMMA (MidNum) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 161.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 002C × 0308 ÷ 0031 ÷ 002E × 2060 ÷  #  ÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 208.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 002E × 0308 ÷ 0001 ÷  #  ÷ [0.2] FULL STOP (MidNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3] " is 144.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 002E × 0308 ÷ 000D ÷  #  ÷ [0.2] FULL STOP (MidNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3] " is 143.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 002E × 0308 ÷ 000A ÷  #  ÷ [0.2] FULL STOP (MidNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3] " is 137.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 002E × 0308 ÷ 000B ÷  #  ÷ [0.2] FULL STOP (MidNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3] " is 143.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 002E × 0308 ÷ 3031 ÷  #  ÷ [0.2] FULL STOP (MidNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3] " is 154.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 002E × 0308 ÷ 0041 ÷  #  ÷ [0.2] FULL STOP (MidNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3] " is 150.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 002E × 0308 ÷ 003A ÷  #  ÷ [0.2] FULL STOP (MidNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 135.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 002E × 0308 ÷ 002C ÷  #  ÷ [0.2] FULL STOP (MidNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 132.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 002E × 0308 ÷ 002E ÷  #  ÷ [0.2] FULL STOP (MidNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3] " is 139.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 002E × 0308 ÷ 0030 ÷  #  ÷ [0.2] FULL STOP (MidNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3] " is 138.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 002E × 0308 ÷ 005F ÷  #  ÷ [0.2] FULL STOP (MidNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3] " is 141.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 002E ÷ 1F1E6 ÷  #  ÷ [0.2] FULL STOP (MidNumLet) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [0.3] " is 127.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 002E × 0308 ÷ 1F1E6 ÷  #  ÷ [0.2] FULL STOP (MidNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [0.3] " is 174.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 002E × 0308 ÷ 05D0 ÷  #  ÷ [0.2] FULL STOP (MidNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3] " is 152.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 002E × 0308 ÷ 0022 ÷  #  ÷ [0.2] FULL STOP (MidNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3] " is 147.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 002E × 0308 ÷ 0027 ÷  #  ÷ [0.2] FULL STOP (MidNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 143.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 002E × 0308 × 00AD ÷  #  ÷ [0.2] FULL STOP (MidNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3] " is 139.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 002E × 0308 × 0300 ÷  #  ÷ [0.2] FULL STOP (MidNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3] " is 150.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 002E ÷ 0061 × 2060 ÷  #  ÷ [0.2] FULL STOP (MidNumLet) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 140.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 002E × 0308 ÷ 0061 × 2060 ÷  #  ÷ [0.2] FULL STOP (MidNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 187.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 002E ÷ 0061 ÷ 003A ÷  #  ÷ [0.2] FULL STOP (MidNumLet) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 136.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 002E × 0308 ÷ 0061 ÷ 003A ÷  #  ÷ [0.2] FULL STOP (MidNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 183.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 002E ÷ 0061 ÷ 0027 ÷  #  ÷ [0.2] FULL STOP (MidNumLet) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 144.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 002E × 0308 ÷ 0061 ÷ 0027 ÷  #  ÷ [0.2] FULL STOP (MidNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 191.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 002E ÷ 0061 ÷ 0027 × 2060 ÷  #  ÷ [0.2] FULL STOP (MidNumLet) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 183.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 002E × 0308 ÷ 0061 ÷ 0027 × 2060 ÷  #  ÷ [0.2] FULL STOP (MidNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 230.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 002E ÷ 0061 ÷ 002C ÷  #  ÷ [0.2] FULL STOP (MidNumLet) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 133.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 002E × 0308 ÷ 0061 ÷ 002C ÷  #  ÷ [0.2] FULL STOP (MidNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 180.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 002E ÷ 0031 ÷ 003A ÷  #  ÷ [0.2] FULL STOP (MidNumLet) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 125.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 002E × 0308 ÷ 0031 ÷ 003A ÷  #  ÷ [0.2] FULL STOP (MidNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 172.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 002E ÷ 0031 ÷ 0027 ÷  #  ÷ [0.2] FULL STOP (MidNumLet) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 133.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 002E × 0308 ÷ 0031 ÷ 0027 ÷  #  ÷ [0.2] FULL STOP (MidNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 180.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 002E ÷ 0031 ÷ 002C ÷  #  ÷ [0.2] FULL STOP (MidNumLet) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 122.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 002E × 0308 ÷ 0031 ÷ 002C ÷  #  ÷ [0.2] FULL STOP (MidNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 169.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 002E ÷ 0031 ÷ 002E × 2060 ÷  #  ÷ [0.2] FULL STOP (MidNumLet) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 168.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 002E × 0308 ÷ 0031 ÷ 002E × 2060 ÷  #  ÷ [0.2] FULL STOP (MidNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 215.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0030 × 0308 ÷ 0001 ÷  #  ÷ [0.2] DIGIT ZERO (Numeric) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3] " is 143.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0030 × 0308 ÷ 000D ÷  #  ÷ [0.2] DIGIT ZERO (Numeric) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3] " is 142.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0030 × 0308 ÷ 000A ÷  #  ÷ [0.2] DIGIT ZERO (Numeric) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3] " is 136.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0030 × 0308 ÷ 000B ÷  #  ÷ [0.2] DIGIT ZERO (Numeric) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3] " is 142.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0030 × 0308 ÷ 3031 ÷  #  ÷ [0.2] DIGIT ZERO (Numeric) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3] " is 153.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0030 × 0308 × 0041 ÷  #  ÷ [0.2] DIGIT ZERO (Numeric) × [4.0] COMBINING DIAERESIS (Extend_FE) × [10.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3] " is 148.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0030 × 0308 ÷ 003A ÷  #  ÷ [0.2] DIGIT ZERO (Numeric) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 134.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0030 × 0308 ÷ 002C ÷  #  ÷ [0.2] DIGIT ZERO (Numeric) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 131.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0030 × 0308 ÷ 002E ÷  #  ÷ [0.2] DIGIT ZERO (Numeric) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3] " is 138.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0030 × 0308 × 0030 ÷  #  ÷ [0.2] DIGIT ZERO (Numeric) × [4.0] COMBINING DIAERESIS (Extend_FE) × [8.0] DIGIT ZERO (Numeric) ÷ [0.3] " is 135.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0030 × 0308 × 005F ÷  #  ÷ [0.2] DIGIT ZERO (Numeric) × [4.0] COMBINING DIAERESIS (Extend_FE) × [13.1] LOW LINE (ExtendNumLet) ÷ [0.3] " is 139.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0030 ÷ 1F1E6 ÷  #  ÷ [0.2] DIGIT ZERO (Numeric) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [0.3] " is 126.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0030 × 0308 ÷ 1F1E6 ÷  #  ÷ [0.2] DIGIT ZERO (Numeric) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [0.3] " is 173.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0030 × 0308 × 05D0 ÷  #  ÷ [0.2] DIGIT ZERO (Numeric) × [4.0] COMBINING DIAERESIS (Extend_FE) × [10.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3] " is 150.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0030 × 0308 ÷ 0022 ÷  #  ÷ [0.2] DIGIT ZERO (Numeric) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3] " is 146.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0030 × 0308 ÷ 0027 ÷  #  ÷ [0.2] DIGIT ZERO (Numeric) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 142.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0030 × 0308 × 00AD ÷  #  ÷ [0.2] DIGIT ZERO (Numeric) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3] " is 138.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0030 × 0308 × 0300 ÷  #  ÷ [0.2] DIGIT ZERO (Numeric) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3] " is 149.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0030 × 0061 × 2060 ÷  #  ÷ [0.2] DIGIT ZERO (Numeric) × [10.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 138.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0030 × 0308 × 0061 × 2060 ÷  #  ÷ [0.2] DIGIT ZERO (Numeric) × [4.0] COMBINING DIAERESIS (Extend_FE) × [10.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 185.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0030 × 0061 ÷ 003A ÷  #  ÷ [0.2] DIGIT ZERO (Numeric) × [10.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 134.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0030 × 0308 × 0061 ÷ 003A ÷  #  ÷ [0.2] DIGIT ZERO (Numeric) × [4.0] COMBINING DIAERESIS (Extend_FE) × [10.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 181.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0030 × 0061 ÷ 0027 ÷  #  ÷ [0.2] DIGIT ZERO (Numeric) × [10.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 142.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0030 × 0308 × 0061 ÷ 0027 ÷  #  ÷ [0.2] DIGIT ZERO (Numeric) × [4.0] COMBINING DIAERESIS (Extend_FE) × [10.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 189.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0030 × 0061 ÷ 0027 × 2060 ÷  #  ÷ [0.2] DIGIT ZERO (Numeric) × [10.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 181.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0030 × 0308 × 0061 ÷ 0027 × 2060 ÷  #  ÷ [0.2] DIGIT ZERO (Numeric) × [4.0] COMBINING DIAERESIS (Extend_FE) × [10.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 228.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0030 × 0061 ÷ 002C ÷  #  ÷ [0.2] DIGIT ZERO (Numeric) × [10.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 131.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0030 × 0308 × 0061 ÷ 002C ÷  #  ÷ [0.2] DIGIT ZERO (Numeric) × [4.0] COMBINING DIAERESIS (Extend_FE) × [10.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 178.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0030 × 0031 ÷ 003A ÷  #  ÷ [0.2] DIGIT ZERO (Numeric) × [8.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 122.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0030 × 0308 × 0031 ÷ 003A ÷  #  ÷ [0.2] DIGIT ZERO (Numeric) × [4.0] COMBINING DIAERESIS (Extend_FE) × [8.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 169.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0030 × 0031 ÷ 0027 ÷  #  ÷ [0.2] DIGIT ZERO (Numeric) × [8.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 130.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0030 × 0308 × 0031 ÷ 0027 ÷  #  ÷ [0.2] DIGIT ZERO (Numeric) × [4.0] COMBINING DIAERESIS (Extend_FE) × [8.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 177.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0030 × 0308 × 0031 ÷ 002C ÷  #  ÷ [0.2] DIGIT ZERO (Numeric) × [4.0] COMBINING DIAERESIS (Extend_FE) × [8.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 166.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0030 × 0031 ÷ 002E × 2060 ÷  #  ÷ [0.2] DIGIT ZERO (Numeric) × [8.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 165.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0030 × 0308 × 0031 ÷ 002E × 2060 ÷  #  ÷ [0.2] DIGIT ZERO (Numeric) × [4.0] COMBINING DIAERESIS (Extend_FE) × [8.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 212.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 005F × 0308 ÷ 0001 ÷  #  ÷ [0.2] LOW LINE (ExtendNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3] " is 146.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 005F × 0308 ÷ 000D ÷  #  ÷ [0.2] LOW LINE (ExtendNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3] " is 145.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 005F × 0308 ÷ 000A ÷  #  ÷ [0.2] LOW LINE (ExtendNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3] " is 139.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 005F × 0308 ÷ 000B ÷  #  ÷ [0.2] LOW LINE (ExtendNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3] " is 145.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 005F × 0308 × 3031 ÷  #  ÷ [0.2] LOW LINE (ExtendNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) × [13.2] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3] " is 155.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 005F × 0308 × 0041 ÷  #  ÷ [0.2] LOW LINE (ExtendNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) × [13.2] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3] " is 151.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 005F × 0308 ÷ 003A ÷  #  ÷ [0.2] LOW LINE (ExtendNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 137.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 005F × 0308 ÷ 002C ÷  #  ÷ [0.2] LOW LINE (ExtendNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 134.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 005F × 0308 ÷ 002E ÷  #  ÷ [0.2] LOW LINE (ExtendNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3] " is 141.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 005F × 0308 × 0030 ÷  #  ÷ [0.2] LOW LINE (ExtendNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) × [13.2] DIGIT ZERO (Numeric) ÷ [0.3] " is 139.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 005F × 0308 × 005F ÷  #  ÷ [0.2] LOW LINE (ExtendNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) × [13.1] LOW LINE (ExtendNumLet) ÷ [0.3] " is 142.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 005F ÷ 1F1E6 ÷  #  ÷ [0.2] LOW LINE (ExtendNumLet) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [0.3] " is 129.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 005F × 0308 ÷ 1F1E6 ÷  #  ÷ [0.2] LOW LINE (ExtendNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [0.3] " is 176.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 005F × 0308 × 05D0 ÷  #  ÷ [0.2] LOW LINE (ExtendNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) × [13.2] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3] " is 153.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 005F × 0308 ÷ 0022 ÷  #  ÷ [0.2] LOW LINE (ExtendNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3] " is 149.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 005F × 0308 ÷ 0027 ÷  #  ÷ [0.2] LOW LINE (ExtendNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 145.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 005F × 0308 × 00AD ÷  #  ÷ [0.2] LOW LINE (ExtendNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3] " is 141.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 005F × 0308 × 0300 ÷  #  ÷ [0.2] LOW LINE (ExtendNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3] " is 152.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 005F × 0061 × 2060 ÷  #  ÷ [0.2] LOW LINE (ExtendNumLet) × [13.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 141.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 005F × 0308 × 0061 × 2060 ÷  #  ÷ [0.2] LOW LINE (ExtendNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) × [13.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 188.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 005F × 0061 ÷ 003A ÷  #  ÷ [0.2] LOW LINE (ExtendNumLet) × [13.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 137.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 005F × 0308 × 0061 ÷ 003A ÷  #  ÷ [0.2] LOW LINE (ExtendNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) × [13.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 184.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 005F × 0061 ÷ 0027 ÷  #  ÷ [0.2] LOW LINE (ExtendNumLet) × [13.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 145.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 005F × 0308 × 0061 ÷ 0027 ÷  #  ÷ [0.2] LOW LINE (ExtendNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) × [13.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 192.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 005F × 0061 ÷ 0027 × 2060 ÷  #  ÷ [0.2] LOW LINE (ExtendNumLet) × [13.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 184.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 005F × 0308 × 0061 ÷ 0027 × 2060 ÷  #  ÷ [0.2] LOW LINE (ExtendNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) × [13.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 231.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 005F × 0061 ÷ 002C ÷  #  ÷ [0.2] LOW LINE (ExtendNumLet) × [13.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 134.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 005F × 0308 × 0061 ÷ 002C ÷  #  ÷ [0.2] LOW LINE (ExtendNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) × [13.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 181.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 005F × 0031 ÷ 003A ÷  #  ÷ [0.2] LOW LINE (ExtendNumLet) × [13.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 126.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 005F × 0308 × 0031 ÷ 003A ÷  #  ÷ [0.2] LOW LINE (ExtendNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) × [13.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 173.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 005F × 0031 ÷ 0027 ÷  #  ÷ [0.2] LOW LINE (ExtendNumLet) × [13.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 134.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 005F × 0308 × 0031 ÷ 0027 ÷  #  ÷ [0.2] LOW LINE (ExtendNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) × [13.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 181.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 005F × 0031 ÷ 002C ÷  #  ÷ [0.2] LOW LINE (ExtendNumLet) × [13.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 123.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 005F × 0308 × 0031 ÷ 002C ÷  #  ÷ [0.2] LOW LINE (ExtendNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) × [13.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 170.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 005F × 0031 ÷ 002E × 2060 ÷  #  ÷ [0.2] LOW LINE (ExtendNumLet) × [13.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 169.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 005F × 0308 × 0031 ÷ 002E × 2060 ÷  #  ÷ [0.2] LOW LINE (ExtendNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) × [13.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 216.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 1F1E6 ÷ 0001 ÷  #  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3] " is 132.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 1F1E6 × 0308 ÷ 0001 ÷  #  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3] " is 179.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 1F1E6 ÷ 000D ÷  #  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3] " is 131.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 1F1E6 × 0308 ÷ 000D ÷  #  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3] " is 178.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 1F1E6 ÷ 000A ÷  #  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3] " is 125.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 1F1E6 × 0308 ÷ 000A ÷  #  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3] " is 172.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 1F1E6 ÷ 000B ÷  #  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3] " is 131.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 1F1E6 × 0308 ÷ 000B ÷  #  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3] " is 178.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 1F1E6 ÷ 3031 ÷  #  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3] " is 142.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 1F1E6 × 0308 ÷ 3031 ÷  #  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3] " is 189.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 1F1E6 ÷ 0041 ÷  #  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [999.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3] " is 138.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 1F1E6 × 0308 ÷ 0041 ÷  #  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3] " is 185.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 1F1E6 ÷ 003A ÷  #  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 123.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 1F1E6 × 0308 ÷ 003A ÷  #  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 170.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 1F1E6 ÷ 002C ÷  #  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 120.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 1F1E6 × 0308 ÷ 002C ÷  #  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 167.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 1F1E6 ÷ 002E ÷  #  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3] " is 127.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 1F1E6 × 0308 ÷ 002E ÷  #  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3] " is 174.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 1F1E6 ÷ 0030 ÷  #  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3] " is 126.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 1F1E6 × 0308 ÷ 0030 ÷  #  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3] " is 173.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 1F1E6 ÷ 005F ÷  #  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3] " is 129.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 1F1E6 × 0308 ÷ 005F ÷  #  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3] " is 176.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 1F1E6 × 1F1E6 ÷  #  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) × [13.3] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [0.3] " is 161.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 1F1E6 × 0308 × 1F1E6 ÷  #  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) × [4.0] COMBINING DIAERESIS (Extend_FE) × [13.3] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [0.3] " is 208.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 1F1E6 ÷ 05D0 ÷  #  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [999.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3] " is 140.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 1F1E6 × 0308 ÷ 05D0 ÷  #  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3] " is 187.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 1F1E6 ÷ 0022 ÷  #  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3] " is 135.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 1F1E6 × 0308 ÷ 0022 ÷  #  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3] " is 182.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 1F1E6 ÷ 0027 ÷  #  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 131.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 1F1E6 × 0308 ÷ 0027 ÷  #  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 178.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 1F1E6 × 00AD ÷  #  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3] " is 127.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 1F1E6 × 0308 × 00AD ÷  #  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3] " is 174.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 1F1E6 × 0300 ÷  #  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3] " is 138.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 1F1E6 × 0308 × 0300 ÷  #  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3] " is 185.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 1F1E6 ÷ 0061 × 2060 ÷  #  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 175.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 1F1E6 × 0308 ÷ 0061 × 2060 ÷  #  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 222.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 1F1E6 ÷ 0061 ÷ 003A ÷  #  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 171.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 1F1E6 × 0308 ÷ 0061 ÷ 003A ÷  #  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 218.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 1F1E6 ÷ 0061 ÷ 0027 ÷  #  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 179.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 1F1E6 × 0308 ÷ 0061 ÷ 0027 ÷  #  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 226.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 1F1E6 ÷ 0061 ÷ 0027 × 2060 ÷  #  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 218.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 1F1E6 × 0308 ÷ 0061 ÷ 0027 × 2060 ÷  #  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 265.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 1F1E6 ÷ 0061 ÷ 002C ÷  #  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 168.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 1F1E6 × 0308 ÷ 0061 ÷ 002C ÷  #  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 215.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 1F1E6 ÷ 0031 ÷ 003A ÷  #  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 160.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 1F1E6 × 0308 ÷ 0031 ÷ 003A ÷  #  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 207.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 1F1E6 ÷ 0031 ÷ 0027 ÷  #  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 168.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 1F1E6 × 0308 ÷ 0031 ÷ 0027 ÷  #  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 215.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 1F1E6 ÷ 0031 ÷ 002C ÷  #  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 157.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 1F1E6 × 0308 ÷ 0031 ÷ 002C ÷  #  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 204.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 1F1E6 ÷ 0031 ÷ 002E × 2060 ÷  #  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 203.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 1F1E6 × 0308 ÷ 0031 ÷ 002E × 2060 ÷  #  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 250.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 05D0 × 0308 ÷ 0001 ÷  #  ÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3] " is 157.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 05D0 × 0308 ÷ 000D ÷  #  ÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3] " is 156.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 05D0 × 0308 ÷ 000A ÷  #  ÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3] " is 150.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 05D0 × 0308 ÷ 000B ÷  #  ÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3] " is 156.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 05D0 ÷ 3031 ÷  #  ÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3] " is 120.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 05D0 × 0308 ÷ 3031 ÷  #  ÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3] " is 167.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 05D0 × 0308 × 0041 ÷  #  ÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [5.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3] " is 161.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 05D0 × 0308 ÷ 003A ÷  #  ÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 148.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 05D0 × 0308 ÷ 002C ÷  #  ÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 145.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 05D0 × 0308 ÷ 002E ÷  #  ÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3] " is 152.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 05D0 × 0308 × 0030 ÷  #  ÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [9.0] DIGIT ZERO (Numeric) ÷ [0.3] " is 149.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 05D0 × 0308 × 005F ÷  #  ÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [13.1] LOW LINE (ExtendNumLet) ÷ [0.3] " is 153.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 05D0 ÷ 1F1E6 ÷  #  ÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [0.3] " is 140.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 05D0 × 0308 ÷ 1F1E6 ÷  #  ÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [0.3] " is 187.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 05D0 × 0308 × 05D0 ÷  #  ÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [5.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3] " is 163.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 05D0 × 0308 ÷ 0022 ÷  #  ÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3] " is 160.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 05D0 × 0308 × 0027 ÷  #  ÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [7.1] APOSTROPHE (Single_Quote) ÷ [0.3] " is 154.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 05D0 × 0308 × 00AD ÷  #  ÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3] " is 152.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 05D0 × 0308 × 0300 ÷  #  ÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3] " is 163.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 05D0 × 0061 × 2060 ÷  #  ÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [5.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 151.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 05D0 × 0308 × 0061 × 2060 ÷  #  ÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [5.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 198.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 05D0 × 0061 ÷ 003A ÷  #  ÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [5.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 147.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 05D0 × 0308 × 0061 ÷ 003A ÷  #  ÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [5.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 194.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 05D0 × 0061 ÷ 0027 ÷  #  ÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [5.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 155.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 05D0 × 0308 × 0061 ÷ 0027 ÷  #  ÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [5.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 202.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 05D0 × 0061 ÷ 0027 × 2060 ÷  #  ÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [5.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 194.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 05D0 × 0308 × 0061 ÷ 0027 × 2060 ÷  #  ÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [5.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 241.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 05D0 × 0061 ÷ 002C ÷  #  ÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [5.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 144.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 05D0 × 0308 × 0061 ÷ 002C ÷  #  ÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [5.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 191.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 05D0 × 0031 ÷ 003A ÷  #  ÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [9.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 136.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 05D0 × 0308 × 0031 ÷ 003A ÷  #  ÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [9.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 183.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 05D0 × 0031 ÷ 0027 ÷  #  ÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [9.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 144.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 05D0 × 0308 × 0031 ÷ 0027 ÷  #  ÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [9.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 191.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 05D0 × 0031 ÷ 002C ÷  #  ÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [9.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 133.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 05D0 × 0308 × 0031 ÷ 002C ÷  #  ÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [9.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 180.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 05D0 × 0031 ÷ 002E × 2060 ÷  #  ÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [9.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 179.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 05D0 × 0308 × 0031 ÷ 002E × 2060 ÷  #  ÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [9.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 226.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0022 × 0308 ÷ 0001 ÷  #  ÷ [0.2] QUOTATION MARK (Double_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3] " is 152.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0022 × 0308 ÷ 000D ÷  #  ÷ [0.2] QUOTATION MARK (Double_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3] " is 151.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0022 × 0308 ÷ 000A ÷  #  ÷ [0.2] QUOTATION MARK (Double_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3] " is 145.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0022 × 0308 ÷ 000B ÷  #  ÷ [0.2] QUOTATION MARK (Double_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3] " is 151.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0022 × 0308 ÷ 3031 ÷  #  ÷ [0.2] QUOTATION MARK (Double_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3] " is 162.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0022 × 0308 ÷ 0041 ÷  #  ÷ [0.2] QUOTATION MARK (Double_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3] " is 158.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0022 × 0308 ÷ 003A ÷  #  ÷ [0.2] QUOTATION MARK (Double_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 143.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0022 × 0308 ÷ 002C ÷  #  ÷ [0.2] QUOTATION MARK (Double_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 140.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0022 × 0308 ÷ 002E ÷  #  ÷ [0.2] QUOTATION MARK (Double_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3] " is 147.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0022 × 0308 ÷ 0030 ÷  #  ÷ [0.2] QUOTATION MARK (Double_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3] " is 146.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0022 × 0308 ÷ 005F ÷  #  ÷ [0.2] QUOTATION MARK (Double_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3] " is 149.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0022 ÷ 1F1E6 ÷  #  ÷ [0.2] QUOTATION MARK (Double_Quote) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [0.3] " is 135.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0022 × 0308 ÷ 1F1E6 ÷  #  ÷ [0.2] QUOTATION MARK (Double_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [0.3] " is 182.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0022 × 0308 ÷ 05D0 ÷  #  ÷ [0.2] QUOTATION MARK (Double_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3] " is 160.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0022 × 0308 ÷ 0022 ÷  #  ÷ [0.2] QUOTATION MARK (Double_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3] " is 155.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0022 × 0308 ÷ 0027 ÷  #  ÷ [0.2] QUOTATION MARK (Double_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 151.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0022 × 0308 × 00AD ÷  #  ÷ [0.2] QUOTATION MARK (Double_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3] " is 147.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0022 × 0308 × 0300 ÷  #  ÷ [0.2] QUOTATION MARK (Double_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3] " is 158.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0022 ÷ 0061 × 2060 ÷  #  ÷ [0.2] QUOTATION MARK (Double_Quote) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 148.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0022 × 0308 ÷ 0061 × 2060 ÷  #  ÷ [0.2] QUOTATION MARK (Double_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 195.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0022 ÷ 0061 ÷ 003A ÷  #  ÷ [0.2] QUOTATION MARK (Double_Quote) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 144.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0022 × 0308 ÷ 0061 ÷ 003A ÷  #  ÷ [0.2] QUOTATION MARK (Double_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 191.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0022 ÷ 0061 ÷ 0027 ÷  #  ÷ [0.2] QUOTATION MARK (Double_Quote) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 152.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0022 × 0308 ÷ 0061 ÷ 0027 ÷  #  ÷ [0.2] QUOTATION MARK (Double_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 199.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0022 ÷ 0061 ÷ 0027 × 2060 ÷  #  ÷ [0.2] QUOTATION MARK (Double_Quote) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 191.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0022 × 0308 ÷ 0061 ÷ 0027 × 2060 ÷  #  ÷ [0.2] QUOTATION MARK (Double_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 238.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0022 ÷ 0061 ÷ 002C ÷  #  ÷ [0.2] QUOTATION MARK (Double_Quote) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 141.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0022 × 0308 ÷ 0061 ÷ 002C ÷  #  ÷ [0.2] QUOTATION MARK (Double_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 188.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0022 ÷ 0031 ÷ 003A ÷  #  ÷ [0.2] QUOTATION MARK (Double_Quote) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 133.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0022 × 0308 ÷ 0031 ÷ 003A ÷  #  ÷ [0.2] QUOTATION MARK (Double_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 180.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0022 ÷ 0031 ÷ 0027 ÷  #  ÷ [0.2] QUOTATION MARK (Double_Quote) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 141.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0022 × 0308 ÷ 0031 ÷ 0027 ÷  #  ÷ [0.2] QUOTATION MARK (Double_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 188.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0022 ÷ 0031 ÷ 002C ÷  #  ÷ [0.2] QUOTATION MARK (Double_Quote) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 130.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0022 × 0308 ÷ 0031 ÷ 002C ÷  #  ÷ [0.2] QUOTATION MARK (Double_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 177.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0022 ÷ 0031 ÷ 002E × 2060 ÷  #  ÷ [0.2] QUOTATION MARK (Double_Quote) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 176.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0022 × 0308 ÷ 0031 ÷ 002E × 2060 ÷  #  ÷ [0.2] QUOTATION MARK (Double_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 223.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0027 × 0308 ÷ 0001 ÷  #  ÷ [0.2] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3] " is 148.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0027 × 0308 ÷ 000D ÷  #  ÷ [0.2] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3] " is 147.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0027 × 0308 ÷ 000A ÷  #  ÷ [0.2] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3] " is 141.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0027 × 0308 ÷ 000B ÷  #  ÷ [0.2] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3] " is 147.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0027 × 0308 ÷ 3031 ÷  #  ÷ [0.2] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3] " is 158.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0027 × 0308 ÷ 0041 ÷  #  ÷ [0.2] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3] " is 154.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0027 × 0308 ÷ 003A ÷  #  ÷ [0.2] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 139.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0027 × 0308 ÷ 002C ÷  #  ÷ [0.2] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 136.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0027 × 0308 ÷ 002E ÷  #  ÷ [0.2] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3] " is 143.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0027 × 0308 ÷ 0030 ÷  #  ÷ [0.2] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3] " is 142.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0027 × 0308 ÷ 005F ÷  #  ÷ [0.2] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3] " is 145.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0027 ÷ 1F1E6 ÷  #  ÷ [0.2] APOSTROPHE (Single_Quote) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [0.3] " is 131.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0027 × 0308 ÷ 1F1E6 ÷  #  ÷ [0.2] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [0.3] " is 178.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0027 × 0308 ÷ 05D0 ÷  #  ÷ [0.2] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3] " is 156.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0027 × 0308 ÷ 0022 ÷  #  ÷ [0.2] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3] " is 151.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0027 × 0308 ÷ 0027 ÷  #  ÷ [0.2] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 147.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0027 × 0308 × 00AD ÷  #  ÷ [0.2] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3] " is 143.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0027 × 0308 × 0300 ÷  #  ÷ [0.2] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3] " is 154.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0027 ÷ 0061 × 2060 ÷  #  ÷ [0.2] APOSTROPHE (Single_Quote) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 144.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0027 × 0308 ÷ 0061 × 2060 ÷  #  ÷ [0.2] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 191.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0027 ÷ 0061 ÷ 003A ÷  #  ÷ [0.2] APOSTROPHE (Single_Quote) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 140.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0027 × 0308 ÷ 0061 ÷ 003A ÷  #  ÷ [0.2] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 187.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0027 ÷ 0061 ÷ 0027 ÷  #  ÷ [0.2] APOSTROPHE (Single_Quote) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 148.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0027 × 0308 ÷ 0061 ÷ 0027 ÷  #  ÷ [0.2] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 195.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0027 ÷ 0061 ÷ 0027 × 2060 ÷  #  ÷ [0.2] APOSTROPHE (Single_Quote) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 187.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0027 × 0308 ÷ 0061 ÷ 0027 × 2060 ÷  #  ÷ [0.2] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 234.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0027 ÷ 0061 ÷ 002C ÷  #  ÷ [0.2] APOSTROPHE (Single_Quote) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 137.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0027 × 0308 ÷ 0061 ÷ 002C ÷  #  ÷ [0.2] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 184.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0027 ÷ 0031 ÷ 003A ÷  #  ÷ [0.2] APOSTROPHE (Single_Quote) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 129.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0027 × 0308 ÷ 0031 ÷ 003A ÷  #  ÷ [0.2] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 176.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0027 ÷ 0031 ÷ 0027 ÷  #  ÷ [0.2] APOSTROPHE (Single_Quote) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 137.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0027 × 0308 ÷ 0031 ÷ 0027 ÷  #  ÷ [0.2] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 184.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0027 ÷ 0031 ÷ 002C ÷  #  ÷ [0.2] APOSTROPHE (Single_Quote) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 126.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0027 × 0308 ÷ 0031 ÷ 002C ÷  #  ÷ [0.2] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 173.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0027 ÷ 0031 ÷ 002E × 2060 ÷  #  ÷ [0.2] APOSTROPHE (Single_Quote) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 172.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0027 × 0308 ÷ 0031 ÷ 002E × 2060 ÷  #  ÷ [0.2] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 219.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 00AD × 0308 ÷ 0001 ÷  #  ÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3] " is 146.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 00AD × 0308 ÷ 000D ÷  #  ÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3] " is 145.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 00AD × 0308 ÷ 000A ÷  #  ÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3] " is 139.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 00AD × 0308 ÷ 000B ÷  #  ÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3] " is 145.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 00AD × 0308 ÷ 3031 ÷  #  ÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3] " is 156.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 00AD × 0308 ÷ 0041 ÷  #  ÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3] " is 152.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 00AD × 0308 ÷ 003A ÷  #  ÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 137.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 00AD × 0308 ÷ 002C ÷  #  ÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 134.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 00AD × 0308 ÷ 002E ÷  #  ÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3] " is 141.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 00AD × 0308 ÷ 0030 ÷  #  ÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3] " is 140.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 00AD × 0308 ÷ 005F ÷  #  ÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3] " is 143.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 00AD ÷ 1F1E6 ÷  #  ÷ [0.2] SOFT HYPHEN (Format_FE) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [0.3] " is 129.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 00AD × 0308 ÷ 1F1E6 ÷  #  ÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [0.3] " is 176.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 00AD × 0308 ÷ 05D0 ÷  #  ÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3] " is 154.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 00AD × 0308 ÷ 0022 ÷  #  ÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3] " is 149.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 00AD × 0308 ÷ 0027 ÷  #  ÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 145.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 00AD × 0308 × 00AD ÷  #  ÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3] " is 141.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 00AD × 0308 × 0300 ÷  #  ÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3] " is 152.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 00AD ÷ 0061 × 2060 ÷  #  ÷ [0.2] SOFT HYPHEN (Format_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 142.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 00AD × 0308 ÷ 0061 × 2060 ÷  #  ÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 189.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 00AD ÷ 0061 ÷ 003A ÷  #  ÷ [0.2] SOFT HYPHEN (Format_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 138.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 00AD × 0308 ÷ 0061 ÷ 003A ÷  #  ÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 185.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 00AD ÷ 0061 ÷ 0027 ÷  #  ÷ [0.2] SOFT HYPHEN (Format_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 146.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 00AD × 0308 ÷ 0061 ÷ 0027 ÷  #  ÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 193.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 00AD ÷ 0061 ÷ 0027 × 2060 ÷  #  ÷ [0.2] SOFT HYPHEN (Format_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 185.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 00AD × 0308 ÷ 0061 ÷ 0027 × 2060 ÷  #  ÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 232.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 00AD ÷ 0061 ÷ 002C ÷  #  ÷ [0.2] SOFT HYPHEN (Format_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 135.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 00AD × 0308 ÷ 0061 ÷ 002C ÷  #  ÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 182.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 00AD ÷ 0031 ÷ 003A ÷  #  ÷ [0.2] SOFT HYPHEN (Format_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 127.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 00AD × 0308 ÷ 0031 ÷ 003A ÷  #  ÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 174.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 00AD ÷ 0031 ÷ 0027 ÷  #  ÷ [0.2] SOFT HYPHEN (Format_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 135.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 00AD × 0308 ÷ 0031 ÷ 0027 ÷  #  ÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 182.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 00AD ÷ 0031 ÷ 002C ÷  #  ÷ [0.2] SOFT HYPHEN (Format_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 124.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 00AD × 0308 ÷ 0031 ÷ 002C ÷  #  ÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 171.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 00AD ÷ 0031 ÷ 002E × 2060 ÷  #  ÷ [0.2] SOFT HYPHEN (Format_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 170.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 00AD × 0308 ÷ 0031 ÷ 002E × 2060 ÷  #  ÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 217.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0300 × 0308 ÷ 0001 ÷  #  ÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3] " is 157.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0300 × 0308 ÷ 000D ÷  #  ÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3] " is 156.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0300 × 0308 ÷ 000A ÷  #  ÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3] " is 150.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0300 × 0308 ÷ 000B ÷  #  ÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3] " is 156.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0300 ÷ 3031 ÷  #  ÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3] " is 120.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0300 × 0308 ÷ 3031 ÷  #  ÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3] " is 167.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0300 × 0308 ÷ 0041 ÷  #  ÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3] " is 163.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0300 × 0308 ÷ 003A ÷  #  ÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 148.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0300 × 0308 ÷ 002C ÷  #  ÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 145.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0300 × 0308 ÷ 002E ÷  #  ÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3] " is 152.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0300 × 0308 ÷ 0030 ÷  #  ÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3] " is 151.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0300 × 0308 ÷ 005F ÷  #  ÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3] " is 154.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0300 ÷ 1F1E6 ÷  #  ÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [0.3] " is 140.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0300 × 0308 ÷ 1F1E6 ÷  #  ÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [0.3] " is 187.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0300 × 0308 ÷ 05D0 ÷  #  ÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3] " is 165.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0300 × 0308 ÷ 0022 ÷  #  ÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3] " is 160.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0300 × 0308 ÷ 0027 ÷  #  ÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 156.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0300 × 0308 × 00AD ÷  #  ÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3] " is 152.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0300 × 0308 × 0300 ÷  #  ÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3] " is 163.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0300 ÷ 0061 × 2060 ÷  #  ÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 153.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0300 × 0308 ÷ 0061 × 2060 ÷  #  ÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 200.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0300 ÷ 0061 ÷ 003A ÷  #  ÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 149.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0300 × 0308 ÷ 0061 ÷ 003A ÷  #  ÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 196.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0300 ÷ 0061 ÷ 0027 ÷  #  ÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 157.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0300 × 0308 ÷ 0061 ÷ 0027 ÷  #  ÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 204.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0300 ÷ 0061 ÷ 0027 × 2060 ÷  #  ÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 196.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0300 × 0308 ÷ 0061 ÷ 0027 × 2060 ÷  #  ÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 243.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0300 ÷ 0061 ÷ 002C ÷  #  ÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 146.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0300 × 0308 ÷ 0061 ÷ 002C ÷  #  ÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 193.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0300 ÷ 0031 ÷ 003A ÷  #  ÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 138.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0300 × 0308 ÷ 0031 ÷ 003A ÷  #  ÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 185.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0300 ÷ 0031 ÷ 0027 ÷  #  ÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 146.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0300 × 0308 ÷ 0031 ÷ 0027 ÷  #  ÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 193.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0300 ÷ 0031 ÷ 002C ÷  #  ÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 135.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0300 × 0308 ÷ 0031 ÷ 002C ÷  #  ÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 182.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0300 ÷ 0031 ÷ 002E × 2060 ÷  #  ÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 181.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0300 × 0308 ÷ 0031 ÷ 002E × 2060 ÷  #  ÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 228.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 2060 ÷ 0001 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3] " is 145.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 2060 × 0308 ÷ 0001 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3] " is 192.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 2060 ÷ 000D ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3] " is 144.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 2060 × 0308 ÷ 000D ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3] " is 191.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 2060 ÷ 000A ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3] " is 138.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 2060 × 0308 ÷ 000A ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3] " is 185.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 2060 ÷ 000B ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3] " is 144.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 2060 × 0308 ÷ 000B ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3] " is 191.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 2060 ÷ 3031 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3] " is 155.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 2060 × 0308 ÷ 3031 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3] " is 202.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 2060 × 0041 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [5.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3] " is 149.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 2060 × 0308 × 0041 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [5.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3] " is 196.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 2060 ÷ 003A ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 136.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 2060 × 0308 ÷ 003A ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 183.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 2060 ÷ 002C ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 133.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 2060 × 0308 ÷ 002C ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 180.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 2060 ÷ 002E ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3] " is 140.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 2060 × 0308 ÷ 002E ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3] " is 187.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 2060 × 0030 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [9.0] DIGIT ZERO (Numeric) ÷ [0.3] " is 137.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 2060 × 0308 × 0030 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [9.0] DIGIT ZERO (Numeric) ÷ [0.3] " is 184.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 2060 × 005F ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [13.1] LOW LINE (ExtendNumLet) ÷ [0.3] " is 141.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 2060 × 0308 × 005F ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [13.1] LOW LINE (ExtendNumLet) ÷ [0.3] " is 188.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 2060 ÷ 1F1E6 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [0.3] " is 175.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 2060 × 0308 ÷ 1F1E6 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [0.3] " is 222.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 2060 × 05D0 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [5.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3] " is 151.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 2060 × 0308 × 05D0 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [5.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3] " is 198.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 2060 ÷ 0022 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3] " is 148.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 2060 × 0308 ÷ 0022 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3] " is 195.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 2060 ÷ 0027 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 144.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 2060 × 0308 ÷ 0027 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 191.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 2060 × 00AD ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3] " is 140.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 2060 × 0308 × 00AD ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3] " is 187.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 2060 × 0300 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3] " is 151.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 2060 × 0308 × 0300 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3] " is 198.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 2060 × 0061 × 2060 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [5.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 186.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 2060 × 0308 × 0061 × 2060 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [5.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 233.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 2060 × 0061 ÷ 003A ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [5.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 182.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 2060 × 0308 × 0061 ÷ 003A ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [5.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 229.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 2060 × 0061 ÷ 0027 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [5.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 190.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 2060 × 0308 × 0061 ÷ 0027 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [5.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 237.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 2060 × 0061 ÷ 0027 × 2060 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [5.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 229.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 2060 × 0308 × 0061 ÷ 0027 × 2060 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [5.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 276.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 2060 × 0061 ÷ 002C ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [5.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 179.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 2060 × 0308 × 0061 ÷ 002C ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [5.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 226.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 2060 × 0031 ÷ 003A ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [9.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 171.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 2060 × 0308 × 0031 ÷ 003A ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [9.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 218.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 2060 × 0031 ÷ 0027 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [9.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 179.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 2060 × 0308 × 0031 ÷ 0027 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [9.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 226.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 2060 × 0031 ÷ 002C ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [9.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 168.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 2060 × 0308 × 0031 ÷ 002C ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [9.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 215.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 2060 × 0031 ÷ 002E × 2060 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [9.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 214.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 2060 × 0308 × 0031 ÷ 002E × 2060 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [9.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 261.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 003A ÷ 0001 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3] " is 141.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 003A × 0308 ÷ 0001 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3] " is 188.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 003A ÷ 000D ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3] " is 140.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 003A × 0308 ÷ 000D ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3] " is 187.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 003A ÷ 000A ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3] " is 134.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 003A × 0308 ÷ 000A ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3] " is 181.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 003A ÷ 000B ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3] " is 140.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 003A × 0308 ÷ 000B ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3] " is 187.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 003A ÷ 3031 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3] " is 151.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 003A × 0308 ÷ 3031 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3] " is 198.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 003A × 0041 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] COLON (MidLetter) × [7.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3] " is 143.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 003A × 0308 × 0041 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [7.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3] " is 190.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 003A ÷ 003A ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 132.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 003A × 0308 ÷ 003A ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 179.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 003A ÷ 002C ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 129.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 003A × 0308 ÷ 002C ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 176.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 003A ÷ 002E ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3] " is 136.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 003A × 0308 ÷ 002E ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3] " is 183.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 003A ÷ 0030 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3] " is 135.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 003A × 0308 ÷ 0030 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3] " is 182.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 003A ÷ 005F ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3] " is 138.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 003A × 0308 ÷ 005F ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3] " is 185.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 003A ÷ 1F1E6 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [0.3] " is 171.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 003A × 0308 ÷ 1F1E6 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [0.3] " is 218.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 003A × 05D0 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] COLON (MidLetter) × [7.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3] " is 145.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 003A × 0308 × 05D0 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [7.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3] " is 192.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 003A ÷ 0022 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3] " is 144.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 003A × 0308 ÷ 0022 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3] " is 191.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 003A ÷ 0027 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 140.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 003A × 0308 ÷ 0027 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 187.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 003A × 00AD ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3] " is 136.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 003A × 0308 × 00AD ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3] " is 183.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 003A × 0300 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3] " is 147.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 003A × 0308 × 0300 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3] " is 194.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 003A × 0061 × 2060 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] COLON (MidLetter) × [7.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 180.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 003A × 0308 × 0061 × 2060 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [7.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 227.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 003A × 0061 ÷ 003A ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] COLON (MidLetter) × [7.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 176.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 003A × 0308 × 0061 ÷ 003A ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [7.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 223.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 003A × 0061 ÷ 0027 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] COLON (MidLetter) × [7.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 184.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 003A × 0308 × 0061 ÷ 0027 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [7.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 231.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 003A × 0061 ÷ 0027 × 2060 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] COLON (MidLetter) × [7.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 223.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 003A × 0308 × 0061 ÷ 0027 × 2060 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [7.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 270.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 003A × 0061 ÷ 002C ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] COLON (MidLetter) × [7.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 173.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 003A × 0308 × 0061 ÷ 002C ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [7.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 220.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 003A ÷ 0031 ÷ 003A ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 169.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 003A × 0308 ÷ 0031 ÷ 003A ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 216.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 003A ÷ 0031 ÷ 0027 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 177.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 003A × 0308 ÷ 0031 ÷ 0027 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 224.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 003A ÷ 0031 ÷ 002C ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 166.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 003A × 0308 ÷ 0031 ÷ 002C ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 213.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 003A ÷ 0031 ÷ 002E × 2060 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 212.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 003A × 0308 ÷ 0031 ÷ 002E × 2060 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 259.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 ÷ 0001 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3] " is 149.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 × 0308 ÷ 0001 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3] " is 196.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 ÷ 000D ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3] " is 148.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 × 0308 ÷ 000D ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3] " is 195.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 ÷ 000A ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3] " is 142.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 × 0308 ÷ 000A ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3] " is 189.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 ÷ 000B ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3] " is 148.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 × 0308 ÷ 000B ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3] " is 195.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 ÷ 3031 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3] " is 159.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 × 0308 ÷ 3031 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3] " is 206.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 0027 × 0041 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] APOSTROPHE (Single_Quote) × [7.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3] " is 151.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 0027 × 0308 × 0041 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) × [7.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3] " is 198.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 ÷ 003A ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 140.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 × 0308 ÷ 003A ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 187.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 ÷ 002C ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 137.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 × 0308 ÷ 002C ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 184.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 ÷ 002E ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3] " is 144.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 × 0308 ÷ 002E ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3] " is 191.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 ÷ 0030 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3] " is 143.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 × 0308 ÷ 0030 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3] " is 190.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 ÷ 005F ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3] " is 146.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 × 0308 ÷ 005F ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3] " is 193.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 ÷ 1F1E6 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [0.3] " is 179.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 × 0308 ÷ 1F1E6 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [0.3] " is 226.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 0027 × 05D0 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] APOSTROPHE (Single_Quote) × [7.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3] " is 153.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 0027 × 0308 × 05D0 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) × [7.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3] " is 200.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 ÷ 0022 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3] " is 152.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 × 0308 ÷ 0022 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3] " is 199.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 ÷ 0027 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 148.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 × 0308 ÷ 0027 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 195.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 × 00AD ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3] " is 144.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 × 0308 × 00AD ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3] " is 191.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 × 0300 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3] " is 155.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 × 0308 × 0300 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3] " is 202.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 0027 × 0061 × 2060 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] APOSTROPHE (Single_Quote) × [7.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 188.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 0027 × 0308 × 0061 × 2060 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) × [7.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 235.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 0027 × 0061 ÷ 003A ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] APOSTROPHE (Single_Quote) × [7.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 184.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 0027 × 0308 × 0061 ÷ 003A ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) × [7.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 231.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 0027 × 0061 ÷ 0027 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] APOSTROPHE (Single_Quote) × [7.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 192.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 0027 × 0308 × 0061 ÷ 0027 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) × [7.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 239.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 0027 × 0061 ÷ 0027 × 2060 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] APOSTROPHE (Single_Quote) × [7.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 231.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 0027 × 0308 × 0061 ÷ 0027 × 2060 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) × [7.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 278.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 0027 × 0061 ÷ 002C ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] APOSTROPHE (Single_Quote) × [7.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 181.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 0027 × 0308 × 0061 ÷ 002C ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) × [7.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 228.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 ÷ 0031 ÷ 003A ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 177.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 × 0308 ÷ 0031 ÷ 003A ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 224.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 ÷ 0031 ÷ 0027 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 185.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 × 0308 ÷ 0031 ÷ 0027 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 232.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 ÷ 0031 ÷ 002C ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 174.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 × 0308 ÷ 0031 ÷ 002C ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 221.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 ÷ 0031 ÷ 002E × 2060 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 220.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 × 0308 ÷ 0031 ÷ 002E × 2060 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 267.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 × 2060 ÷ 0001 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3] " is 188.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 × 2060 × 0308 ÷ 0001 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3] " is 235.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 × 2060 ÷ 000D ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3] " is 187.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 × 2060 × 0308 ÷ 000D ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3] " is 234.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 × 2060 ÷ 000A ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3] " is 181.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 × 2060 × 0308 ÷ 000A ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3] " is 228.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 × 2060 ÷ 000B ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3] " is 187.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 × 2060 × 0308 ÷ 000B ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3] " is 234.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 × 2060 ÷ 3031 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3] " is 198.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 × 2060 × 0308 ÷ 3031 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3] " is 245.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 0027 × 2060 × 0041 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [7.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3] " is 190.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 0027 × 2060 × 0308 × 0041 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [7.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3] " is 237.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 × 2060 ÷ 003A ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 179.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 × 2060 × 0308 ÷ 003A ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 226.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 × 2060 ÷ 002C ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 176.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 × 2060 × 0308 ÷ 002C ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 223.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 × 2060 ÷ 002E ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3] " is 183.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 × 2060 × 0308 ÷ 002E ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3] " is 230.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 × 2060 ÷ 0030 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3] " is 182.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 × 2060 × 0308 ÷ 0030 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3] " is 229.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 × 2060 ÷ 005F ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3] " is 185.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 × 2060 × 0308 ÷ 005F ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3] " is 232.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 × 2060 ÷ 1F1E6 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [0.3] " is 218.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 × 2060 × 0308 ÷ 1F1E6 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [0.3] " is 265.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 0027 × 2060 × 05D0 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [7.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3] " is 192.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 0027 × 2060 × 0308 × 05D0 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [7.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3] " is 239.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 × 2060 ÷ 0022 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3] " is 191.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 × 2060 × 0308 ÷ 0022 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3] " is 238.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 × 2060 ÷ 0027 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 187.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 × 2060 × 0308 ÷ 0027 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 234.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 × 2060 × 00AD ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3] " is 183.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 × 2060 × 0308 × 00AD ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3] " is 230.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 × 2060 × 0300 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3] " is 194.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 × 2060 × 0308 × 0300 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3] " is 241.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 0027 × 2060 × 0061 × 2060 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [7.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 227.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 0027 × 2060 × 0308 × 0061 × 2060 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [7.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 274.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            AssertAnalyzesTo(analyzer' "\u0061\u0027\u2060\u0308\u0061\u2060"' new string[] { "\u0061\u0027\u2060\u0308\u0061\u2060" }); " is 124.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 0027 × 2060 × 0061 ÷ 003A ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [7.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 223.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 0027 × 2060 × 0308 × 0061 ÷ 003A ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [7.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 270.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 0027 × 2060 × 0061 ÷ 0027 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [7.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 231.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 0027 × 2060 × 0308 × 0061 ÷ 0027 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [7.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 278.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 0027 × 2060 × 0061 ÷ 0027 × 2060 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [7.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 270.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 0027 × 2060 × 0308 × 0061 ÷ 0027 × 2060 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [7.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 317.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            AssertAnalyzesTo(analyzer' "\u0061\u0027\u2060\u0308\u0061\u0027\u2060"' new string[] { "\u0061\u0027\u2060\u0308\u0061" }); " is 124.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 0027 × 2060 × 0061 ÷ 002C ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [7.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 220.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 0027 × 2060 × 0308 × 0061 ÷ 002C ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [7.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 267.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 × 2060 ÷ 0031 ÷ 003A ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 216.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 × 2060 × 0308 ÷ 0031 ÷ 003A ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 263.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 × 2060 ÷ 0031 ÷ 0027 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 224.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 × 2060 × 0308 ÷ 0031 ÷ 0027 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 271.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 × 2060 ÷ 0031 ÷ 002C ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 213.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 × 2060 × 0308 ÷ 0031 ÷ 002C ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 260.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 × 2060 ÷ 0031 ÷ 002E × 2060 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 259.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0027 × 2060 × 0308 ÷ 0031 ÷ 002E × 2060 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 306.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 002C ÷ 0001 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3] " is 138.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 002C × 0308 ÷ 0001 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3] " is 185.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 002C ÷ 000D ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3] " is 137.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 002C × 0308 ÷ 000D ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3] " is 184.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 002C ÷ 000A ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3] " is 131.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 002C × 0308 ÷ 000A ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3] " is 178.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 002C ÷ 000B ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3] " is 137.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 002C × 0308 ÷ 000B ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3] " is 184.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 002C ÷ 3031 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3] " is 148.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 002C × 0308 ÷ 3031 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3] " is 195.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 002C ÷ 0041 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3] " is 144.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 002C × 0308 ÷ 0041 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3] " is 191.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 002C ÷ 003A ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 129.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 002C × 0308 ÷ 003A ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 176.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 002C ÷ 002C ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 126.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 002C × 0308 ÷ 002C ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 173.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 002C ÷ 002E ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3] " is 133.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 002C × 0308 ÷ 002E ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3] " is 180.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 002C ÷ 0030 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3] " is 132.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 002C × 0308 ÷ 0030 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3] " is 179.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 002C ÷ 005F ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3] " is 135.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 002C × 0308 ÷ 005F ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3] " is 182.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 002C ÷ 1F1E6 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [0.3] " is 168.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 002C × 0308 ÷ 1F1E6 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [0.3] " is 215.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 002C ÷ 05D0 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3] " is 146.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 002C × 0308 ÷ 05D0 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3] " is 193.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 002C ÷ 0022 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3] " is 141.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 002C × 0308 ÷ 0022 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3] " is 188.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 002C ÷ 0027 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 137.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 002C × 0308 ÷ 0027 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 184.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 002C × 00AD ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3] " is 133.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 002C × 0308 × 00AD ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3] " is 180.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 002C × 0300 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3] " is 144.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 002C × 0308 × 0300 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3] " is 191.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 002C ÷ 0061 × 2060 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 181.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 002C × 0308 ÷ 0061 × 2060 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 228.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 002C ÷ 0061 ÷ 003A ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 177.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 002C × 0308 ÷ 0061 ÷ 003A ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 224.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 002C ÷ 0061 ÷ 0027 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 185.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 002C × 0308 ÷ 0061 ÷ 0027 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 232.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 002C ÷ 0061 ÷ 0027 × 2060 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 224.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 002C × 0308 ÷ 0061 ÷ 0027 × 2060 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 271.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 002C ÷ 0061 ÷ 002C ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 174.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 002C × 0308 ÷ 0061 ÷ 002C ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 221.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 002C ÷ 0031 ÷ 003A ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 166.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 002C × 0308 ÷ 0031 ÷ 003A ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 213.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 002C ÷ 0031 ÷ 0027 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 174.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 002C × 0308 ÷ 0031 ÷ 0027 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 221.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 002C ÷ 0031 ÷ 002C ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 163.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 002C × 0308 ÷ 0031 ÷ 002C ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 210.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 002C ÷ 0031 ÷ 002E × 2060 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 209.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 002C × 0308 ÷ 0031 ÷ 002E × 2060 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 256.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 003A ÷ 0001 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3] " is 130.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 003A × 0308 ÷ 0001 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3] " is 177.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 003A ÷ 000D ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3] " is 129.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 003A × 0308 ÷ 000D ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3] " is 176.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 003A ÷ 000A ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3] " is 123.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 003A × 0308 ÷ 000A ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3] " is 170.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 003A ÷ 000B ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3] " is 129.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 003A × 0308 ÷ 000B ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3] " is 176.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 003A ÷ 3031 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3] " is 140.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 003A × 0308 ÷ 3031 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3] " is 187.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 003A ÷ 0041 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3] " is 136.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 003A × 0308 ÷ 0041 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3] " is 183.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 003A ÷ 003A ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 121.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 003A × 0308 ÷ 003A ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 168.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 003A × 0308 ÷ 002C ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 165.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 003A ÷ 002E ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3] " is 125.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 003A × 0308 ÷ 002E ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3] " is 172.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 003A ÷ 0030 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3] " is 124.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 003A × 0308 ÷ 0030 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3] " is 171.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 003A ÷ 005F ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3] " is 127.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 003A × 0308 ÷ 005F ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3] " is 174.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 003A ÷ 1F1E6 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [0.3] " is 160.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 003A × 0308 ÷ 1F1E6 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [0.3] " is 207.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 003A ÷ 05D0 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3] " is 138.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 003A × 0308 ÷ 05D0 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3] " is 185.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 003A ÷ 0022 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3] " is 133.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 003A × 0308 ÷ 0022 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3] " is 180.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 003A ÷ 0027 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 129.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 003A × 0308 ÷ 0027 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 176.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 003A × 00AD ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3] " is 125.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 003A × 0308 × 00AD ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3] " is 172.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 003A × 0300 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3] " is 136.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 003A × 0308 × 0300 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3] " is 183.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 003A ÷ 0061 × 2060 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 173.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 003A × 0308 ÷ 0061 × 2060 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 220.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 003A ÷ 0061 ÷ 003A ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 169.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 003A × 0308 ÷ 0061 ÷ 003A ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 216.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 003A ÷ 0061 ÷ 0027 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 177.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 003A × 0308 ÷ 0061 ÷ 0027 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 224.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 003A ÷ 0061 ÷ 0027 × 2060 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 216.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 003A × 0308 ÷ 0061 ÷ 0027 × 2060 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 263.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 003A ÷ 0061 ÷ 002C ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 166.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 003A × 0308 ÷ 0061 ÷ 002C ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 213.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 003A ÷ 0031 ÷ 003A ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 158.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 003A × 0308 ÷ 0031 ÷ 003A ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 205.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 003A ÷ 0031 ÷ 0027 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 166.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 003A × 0308 ÷ 0031 ÷ 0027 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 213.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 003A ÷ 0031 ÷ 002C ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 155.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 003A × 0308 ÷ 0031 ÷ 002C ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 202.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 003A ÷ 0031 ÷ 002E × 2060 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 201.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 003A × 0308 ÷ 0031 ÷ 002E × 2060 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 248.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 0027 ÷ 0001 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3] " is 138.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 0027 × 0308 ÷ 0001 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3] " is 185.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 0027 ÷ 000D ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3] " is 137.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 0027 × 0308 ÷ 000D ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3] " is 184.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 0027 ÷ 000A ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3] " is 131.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 0027 × 0308 ÷ 000A ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3] " is 178.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 0027 ÷ 000B ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3] " is 137.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 0027 × 0308 ÷ 000B ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3] " is 184.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 0027 ÷ 3031 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3] " is 148.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 0027 × 0308 ÷ 3031 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3] " is 195.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 0027 ÷ 0041 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3] " is 144.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 0027 × 0308 ÷ 0041 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3] " is 191.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 0027 ÷ 003A ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 129.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 0027 × 0308 ÷ 003A ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 176.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 0027 ÷ 002C ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 126.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 0027 × 0308 ÷ 002C ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 173.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 0027 ÷ 002E ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3] " is 133.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 0027 × 0308 ÷ 002E ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3] " is 180.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 × 0027 × 0030 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) × [12.0] APOSTROPHE (Single_Quote) × [11.0] DIGIT ZERO (Numeric) ÷ [0.3] " is 130.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 × 0027 × 0308 × 0030 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) × [12.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) × [11.0] DIGIT ZERO (Numeric) ÷ [0.3] " is 177.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 0027 ÷ 005F ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3] " is 135.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 0027 × 0308 ÷ 005F ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3] " is 182.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 0027 ÷ 1F1E6 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [0.3] " is 168.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 0027 × 0308 ÷ 1F1E6 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [0.3] " is 215.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 0027 ÷ 05D0 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3] " is 146.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 0027 × 0308 ÷ 05D0 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3] " is 193.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 0027 ÷ 0022 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3] " is 141.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 0027 × 0308 ÷ 0022 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3] " is 188.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 0027 ÷ 0027 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 137.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 0027 × 0308 ÷ 0027 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 184.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 0027 × 00AD ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3] " is 133.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 0027 × 0308 × 00AD ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3] " is 180.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 0027 × 0300 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3] " is 144.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 0027 × 0308 × 0300 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3] " is 191.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 0027 ÷ 0061 × 2060 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 181.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 0027 × 0308 ÷ 0061 × 2060 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 228.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 0027 ÷ 0061 ÷ 003A ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 177.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 0027 × 0308 ÷ 0061 ÷ 003A ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 224.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 0027 ÷ 0061 ÷ 0027 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 185.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 0027 × 0308 ÷ 0061 ÷ 0027 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 232.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 0027 ÷ 0061 ÷ 0027 × 2060 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 224.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 0027 × 0308 ÷ 0061 ÷ 0027 × 2060 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 271.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 0027 ÷ 0061 ÷ 002C ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 174.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 0027 × 0308 ÷ 0061 ÷ 002C ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 221.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 × 0027 × 0031 ÷ 003A ÷  #  ÷ [0.2] DIGIT ONE (Numeric) × [12.0] APOSTROPHE (Single_Quote) × [11.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 164.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 × 0027 × 0308 × 0031 ÷ 003A ÷  #  ÷ [0.2] DIGIT ONE (Numeric) × [12.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) × [11.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 211.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 × 0027 × 0031 ÷ 0027 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) × [12.0] APOSTROPHE (Single_Quote) × [11.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 172.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 × 0027 × 0308 × 0031 ÷ 0027 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) × [12.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) × [11.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 219.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 × 0027 × 0031 ÷ 002C ÷  #  ÷ [0.2] DIGIT ONE (Numeric) × [12.0] APOSTROPHE (Single_Quote) × [11.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 161.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 × 0027 × 0308 × 0031 ÷ 002C ÷  #  ÷ [0.2] DIGIT ONE (Numeric) × [12.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) × [11.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 208.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 × 0027 × 0031 ÷ 002E × 2060 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) × [12.0] APOSTROPHE (Single_Quote) × [11.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 207.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 × 0027 × 0308 × 0031 ÷ 002E × 2060 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) × [12.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) × [11.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 254.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002C ÷ 0001 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3] " is 127.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002C × 0308 ÷ 0001 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3] " is 174.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002C ÷ 000D ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3] " is 126.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002C × 0308 ÷ 000D ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3] " is 173.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002C ÷ 000A ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3] " is 120.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002C × 0308 ÷ 000A ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3] " is 167.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002C ÷ 000B ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3] " is 126.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002C × 0308 ÷ 000B ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3] " is 173.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002C ÷ 3031 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3] " is 137.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002C × 0308 ÷ 3031 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3] " is 184.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002C ÷ 0041 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [999.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3] " is 133.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002C × 0308 ÷ 0041 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3] " is 180.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002C × 0308 ÷ 003A ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 165.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002C × 0308 ÷ 002C ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 162.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002C ÷ 002E ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3] " is 122.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002C × 0308 ÷ 002E ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3] " is 169.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 × 002C × 0308 × 0030 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) × [12.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) × [11.0] DIGIT ZERO (Numeric) ÷ [0.3] " is 166.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002C ÷ 005F ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3] " is 124.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002C × 0308 ÷ 005F ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3] " is 171.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002C ÷ 1F1E6 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [0.3] " is 157.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002C × 0308 ÷ 1F1E6 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [0.3] " is 204.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002C ÷ 05D0 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [999.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3] " is 135.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002C × 0308 ÷ 05D0 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3] " is 182.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002C ÷ 0022 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3] " is 130.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002C × 0308 ÷ 0022 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3] " is 177.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002C ÷ 0027 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 126.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002C × 0308 ÷ 0027 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 173.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002C × 00AD ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3] " is 122.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002C × 0308 × 00AD ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3] " is 169.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002C × 0300 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3] " is 133.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002C × 0308 × 0300 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3] " is 180.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002C ÷ 0061 × 2060 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 170.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002C × 0308 ÷ 0061 × 2060 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 217.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002C ÷ 0061 ÷ 003A ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 166.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002C × 0308 ÷ 0061 ÷ 003A ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 213.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002C ÷ 0061 ÷ 0027 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 174.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002C × 0308 ÷ 0061 ÷ 0027 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 221.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002C ÷ 0061 ÷ 0027 × 2060 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 213.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002C × 0308 ÷ 0061 ÷ 0027 × 2060 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 260.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002C ÷ 0061 ÷ 002C ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 163.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002C × 0308 ÷ 0061 ÷ 002C ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 210.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 × 002C × 0031 ÷ 003A ÷  #  ÷ [0.2] DIGIT ONE (Numeric) × [12.0] COMMA (MidNum) × [11.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 153.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 × 002C × 0308 × 0031 ÷ 003A ÷  #  ÷ [0.2] DIGIT ONE (Numeric) × [12.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) × [11.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 200.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 × 002C × 0031 ÷ 0027 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) × [12.0] COMMA (MidNum) × [11.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 161.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 × 002C × 0308 × 0031 ÷ 0027 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) × [12.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) × [11.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 208.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 × 002C × 0031 ÷ 002C ÷  #  ÷ [0.2] DIGIT ONE (Numeric) × [12.0] COMMA (MidNum) × [11.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 150.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 × 002C × 0308 × 0031 ÷ 002C ÷  #  ÷ [0.2] DIGIT ONE (Numeric) × [12.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) × [11.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 197.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 × 002C × 0031 ÷ 002E × 2060 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) × [12.0] COMMA (MidNum) × [11.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 196.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 × 002C × 0308 × 0031 ÷ 002E × 2060 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) × [12.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) × [11.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 243.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002E × 2060 ÷ 0001 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3] " is 173.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002E × 2060 × 0308 ÷ 0001 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3] " is 220.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002E × 2060 ÷ 000D ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3] " is 172.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002E × 2060 × 0308 ÷ 000D ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3] " is 219.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002E × 2060 ÷ 000A ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3] " is 166.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002E × 2060 × 0308 ÷ 000A ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3] " is 213.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002E × 2060 ÷ 000B ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3] " is 172.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002E × 2060 × 0308 ÷ 000B ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3] " is 219.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002E × 2060 ÷ 3031 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3] " is 183.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002E × 2060 × 0308 ÷ 3031 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3] " is 230.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002E × 2060 ÷ 0041 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3] " is 179.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002E × 2060 × 0308 ÷ 0041 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3] " is 226.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002E × 2060 ÷ 003A ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 164.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002E × 2060 × 0308 ÷ 003A ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 211.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002E × 2060 ÷ 002C ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 161.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002E × 2060 × 0308 ÷ 002C ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 208.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002E × 2060 ÷ 002E ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3] " is 168.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002E × 2060 × 0308 ÷ 002E ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3] " is 215.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 × 002E × 2060 × 0030 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) × [12.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) × [11.0] DIGIT ZERO (Numeric) ÷ [0.3] " is 165.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 × 002E × 2060 × 0308 × 0030 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) × [12.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [11.0] DIGIT ZERO (Numeric) ÷ [0.3] " is 212.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002E × 2060 ÷ 005F ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3] " is 170.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002E × 2060 × 0308 ÷ 005F ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3] " is 217.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002E × 2060 ÷ 1F1E6 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [0.3] " is 203.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002E × 2060 × 0308 ÷ 1F1E6 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [0.3] " is 250.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002E × 2060 ÷ 05D0 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3] " is 181.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002E × 2060 × 0308 ÷ 05D0 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3] " is 228.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002E × 2060 ÷ 0022 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3] " is 176.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002E × 2060 × 0308 ÷ 0022 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3] " is 223.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002E × 2060 ÷ 0027 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 172.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002E × 2060 × 0308 ÷ 0027 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 219.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002E × 2060 × 00AD ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3] " is 168.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002E × 2060 × 0308 × 00AD ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3] " is 215.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002E × 2060 × 0300 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3] " is 179.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002E × 2060 × 0308 × 0300 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3] " is 226.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002E × 2060 ÷ 0061 × 2060 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 216.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002E × 2060 × 0308 ÷ 0061 × 2060 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 263.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002E × 2060 ÷ 0061 ÷ 003A ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 212.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002E × 2060 × 0308 ÷ 0061 ÷ 003A ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 259.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002E × 2060 ÷ 0061 ÷ 0027 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 220.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002E × 2060 × 0308 ÷ 0061 ÷ 0027 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 267.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002E × 2060 ÷ 0061 ÷ 0027 × 2060 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 259.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002E × 2060 × 0308 ÷ 0061 ÷ 0027 × 2060 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 306.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002E × 2060 ÷ 0061 ÷ 002C ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 209.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 ÷ 002E × 2060 × 0308 ÷ 0061 ÷ 002C ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 256.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 × 002E × 2060 × 0031 ÷ 003A ÷  #  ÷ [0.2] DIGIT ONE (Numeric) × [12.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) × [11.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 199.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 × 002E × 2060 × 0308 × 0031 ÷ 003A ÷  #  ÷ [0.2] DIGIT ONE (Numeric) × [12.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [11.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3] " is 246.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 × 002E × 2060 × 0031 ÷ 0027 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) × [12.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) × [11.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 207.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 × 002E × 2060 × 0308 × 0031 ÷ 0027 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) × [12.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [11.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3] " is 254.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 × 002E × 2060 × 0031 ÷ 002C ÷  #  ÷ [0.2] DIGIT ONE (Numeric) × [12.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) × [11.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 196.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 × 002E × 2060 × 0308 × 0031 ÷ 002C ÷  #  ÷ [0.2] DIGIT ONE (Numeric) × [12.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [11.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3] " is 243.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 × 002E × 2060 × 0031 ÷ 002E × 2060 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) × [12.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) × [11.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 242.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0031 × 002E × 2060 × 0308 × 0031 ÷ 002E × 2060 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) × [12.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [11.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 289.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            AssertAnalyzesTo(analyzer' "\u0031\u002E\u2060\u0308\u0031\u002E\u2060"' new string[] { "\u0031\u002E\u2060\u0308\u0031" }); " is 124.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0063 × 0061 × 006E × 0027 × 0074 ÷  #  ÷ [0.2] LATIN SMALL LETTER C (ALetter) × [5.0] LATIN SMALL LETTER A (ALetter) × [5.0] LATIN SMALL LETTER N (ALetter) × [6.0] APOSTROPHE (Single_Quote) × [7.0] LATIN SMALL LETTER T (ALetter) ÷ [0.3] " is 241.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0063 × 0061 × 006E × 2019 × 0074 ÷  #  ÷ [0.2] LATIN SMALL LETTER C (ALetter) × [5.0] LATIN SMALL LETTER A (ALetter) × [5.0] LATIN SMALL LETTER N (ALetter) × [6.0] RIGHT SINGLE QUOTATION MARK (MidNumLet) × [7.0] LATIN SMALL LETTER T (ALetter) ÷ [0.3] " is 255.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 × 0062 × 00AD × 0062 × 0079 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [5.0] LATIN SMALL LETTER B (ALetter) × [4.0] SOFT HYPHEN (Format_FE) × [5.0] LATIN SMALL LETTER B (ALetter) × [5.0] LATIN SMALL LETTER Y (ALetter) ÷ [0.3] " is 239.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 0024 ÷ 002D ÷ 0033 × 0034 × 002C × 0035 × 0036 × 0037 × 002E × 0031 × 0034 ÷ 0025 ÷ 0062 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] DOLLAR SIGN (Other) ÷ [999.0] HYPHEN-MINUS (Other) ÷ [999.0] DIGIT THREE (Numeric) × [8.0] DIGIT FOUR (Numeric) × [12.0] COMMA (MidNum) × [11.0] DIGIT FIVE (Numeric) × [8.0] DIGIT SIX (Numeric) × [8.0] DIGIT SEVEN (Numeric) × [12.0] FULL STOP (MidNumLet) × [11.0] DIGIT ONE (Numeric) × [8.0] DIGIT FOUR (Numeric) ÷ [999.0] PERCENT SIGN (Other) ÷ [999.0] LATIN SMALL LETTER B (ALetter) ÷ [0.3] " is 548.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            AssertAnalyzesTo(analyzer' "\u0061\u0024\u002D\u0033\u0034\u002C\u0035\u0036\u0037\u002E\u0031\u0034\u0025\u0062"' new string[] { "\u0061"' "\u0033\u0034\u002C\u0035\u0036\u0037\u002E\u0031\u0034"' "\u0062" }); " is 210.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 2060 ÷ 0063 × 2060 × 0061 × 2060 × 006E × 2060 × 0027 × 2060 × 0074 × 2060 × 2060 ÷  #  ÷ [0.2] WORD JOINER (Format_FE) ÷ [999.0] LATIN SMALL LETTER C (ALetter) × [4.0] WORD JOINER (Format_FE) × [5.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [5.0] LATIN SMALL LETTER N (ALetter) × [4.0] WORD JOINER (Format_FE) × [6.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [7.0] LATIN SMALL LETTER T (ALetter) × [4.0] WORD JOINER (Format_FE) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 516.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            AssertAnalyzesTo(analyzer' "\u2060\u0063\u2060\u0061\u2060\u006E\u2060\u0027\u2060\u0074\u2060\u2060"' new string[] { "\u0063\u2060\u0061\u2060\u006E\u2060\u0027\u2060\u0074\u2060\u2060" }); " is 190.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 2060 ÷ 0063 × 2060 × 0061 × 2060 × 006E × 2060 × 2019 × 2060 × 0074 × 2060 × 2060 ÷  #  ÷ [0.2] WORD JOINER (Format_FE) ÷ [999.0] LATIN SMALL LETTER C (ALetter) × [4.0] WORD JOINER (Format_FE) × [5.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [5.0] LATIN SMALL LETTER N (ALetter) × [4.0] WORD JOINER (Format_FE) × [6.0] RIGHT SINGLE QUOTATION MARK (MidNumLet) × [4.0] WORD JOINER (Format_FE) × [7.0] LATIN SMALL LETTER T (ALetter) × [4.0] WORD JOINER (Format_FE) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 530.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            AssertAnalyzesTo(analyzer' "\u2060\u0063\u2060\u0061\u2060\u006E\u2060\u2019\u2060\u0074\u2060\u2060"' new string[] { "\u0063\u2060\u0061\u2060\u006E\u2060\u2019\u2060\u0074\u2060\u2060" }); " is 190.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 2060 ÷ 0061 × 2060 × 0062 × 2060 × 00AD × 2060 × 0062 × 2060 × 0079 × 2060 × 2060 ÷  #  ÷ [0.2] WORD JOINER (Format_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [5.0] LATIN SMALL LETTER B (ALetter) × [4.0] WORD JOINER (Format_FE) × [4.0] SOFT HYPHEN (Format_FE) × [4.0] WORD JOINER (Format_FE) × [5.0] LATIN SMALL LETTER B (ALetter) × [4.0] WORD JOINER (Format_FE) × [5.0] LATIN SMALL LETTER Y (ALetter) × [4.0] WORD JOINER (Format_FE) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 514.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            AssertAnalyzesTo(analyzer' "\u2060\u0061\u2060\u0062\u2060\u00AD\u2060\u0062\u2060\u0079\u2060\u2060"' new string[] { "\u0061\u2060\u0062\u2060\u00AD\u2060\u0062\u2060\u0079\u2060\u2060" }); " is 190.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 2060 ÷ 0061 × 2060 ÷ 0024 × 2060 ÷ 002D × 2060 ÷ 0033 × 2060 × 0034 × 2060 × 002C × 2060 × 0035 × 2060 × 0036 × 2060 × 0037 × 2060 × 002E × 2060 × 0031 × 2060 × 0034 × 2060 ÷ 0025 × 2060 ÷ 0062 × 2060 × 2060 ÷  #  ÷ [0.2] WORD JOINER (Format_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] DOLLAR SIGN (Other) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] HYPHEN-MINUS (Other) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] DIGIT THREE (Numeric) × [4.0] WORD JOINER (Format_FE) × [8.0] DIGIT FOUR (Numeric) × [4.0] WORD JOINER (Format_FE) × [12.0] COMMA (MidNum) × [4.0] WORD JOINER (Format_FE) × [11.0] DIGIT FIVE (Numeric) × [4.0] WORD JOINER (Format_FE) × [8.0] DIGIT SIX (Numeric) × [4.0] WORD JOINER (Format_FE) × [8.0] DIGIT SEVEN (Numeric) × [4.0] WORD JOINER (Format_FE) × [12.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) × [11.0] DIGIT ONE (Numeric) × [4.0] WORD JOINER (Format_FE) × [8.0] DIGIT FOUR (Numeric) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] PERCENT SIGN (Other) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] LATIN SMALL LETTER B (ALetter) × [4.0] WORD JOINER (Format_FE) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 1174.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            AssertAnalyzesTo(analyzer' "\u2060\u0061\u2060\u0024\u2060\u002D\u2060\u0033\u2060\u0034\u2060\u002C\u2060\u0035\u2060\u0036\u2060\u0037\u2060\u002E\u2060\u0031\u2060\u0034\u2060\u0025\u2060\u0062\u2060\u2060"' new string[] { "\u0061\u2060"' "\u0033\u2060\u0034\u2060\u002C\u2060\u0035\u2060\u0036\u2060\u0037\u2060\u002E\u2060\u0031\u2060\u0034\u2060"' "\u0062\u2060\u2060" }); " is 378.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 2060 ÷ 0033 × 2060 × 0061 × 2060 × 2060 ÷  #  ÷ [0.2] WORD JOINER (Format_FE) ÷ [999.0] DIGIT THREE (Numeric) × [4.0] WORD JOINER (Format_FE) × [10.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [4.0] WORD JOINER (Format_FE) ÷ [0.3] " is 258.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0061 ÷ 1F1E6 ÷ 0062 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [999.0] LATIN SMALL LETTER B (ALetter) ÷ [0.3] " is 184.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 1F1F7 × 1F1FA ÷  #  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER R (Regional_Indicator) × [13.3] REGIONAL INDICATOR SYMBOL LETTER U (Regional_Indicator) ÷ [0.3] " is 161.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 1F1F7 × 1F1FA × 1F1F8 ÷  #  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER R (Regional_Indicator) × [13.3] REGIONAL INDICATOR SYMBOL LETTER U (Regional_Indicator) × [13.3] REGIONAL INDICATOR SYMBOL LETTER S (Regional_Indicator) ÷ [0.3] " is 234.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 1F1F7 × 1F1FA × 1F1F8 × 1F1EA ÷  #  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER R (Regional_Indicator) × [13.3] REGIONAL INDICATOR SYMBOL LETTER U (Regional_Indicator) × [13.3] REGIONAL INDICATOR SYMBOL LETTER S (Regional_Indicator) × [13.3] REGIONAL INDICATOR SYMBOL LETTER E (Regional_Indicator) ÷ [0.3] " is 307.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 1F1F7 × 1F1FA ÷ 200B ÷ 1F1F8 × 1F1EA ÷  #  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER R (Regional_Indicator) × [13.3] REGIONAL INDICATOR SYMBOL LETTER U (Regional_Indicator) ÷ [999.0] ZERO WIDTH SPACE (Other) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER S (Regional_Indicator) × [13.3] REGIONAL INDICATOR SYMBOL LETTER E (Regional_Indicator) ÷ [0.3] " is 350.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 1F1E6 × 1F1E7 × 1F1E8 ÷  #  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) × [13.3] REGIONAL INDICATOR SYMBOL LETTER B (Regional_Indicator) × [13.3] REGIONAL INDICATOR SYMBOL LETTER C (Regional_Indicator) ÷ [0.3] " is 234.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 1F1E6 × 200D × 1F1E7 × 1F1E8 ÷  #  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) × [4.0] ZERO WIDTH JOINER (Extend_FE) × [13.3] REGIONAL INDICATOR SYMBOL LETTER B (Regional_Indicator) × [13.3] REGIONAL INDICATOR SYMBOL LETTER C (Regional_Indicator) ÷ [0.3] " is 279.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 1F1E6 × 1F1E7 × 200D × 1F1E8 ÷  #  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) × [13.3] REGIONAL INDICATOR SYMBOL LETTER B (Regional_Indicator) × [4.0] ZERO WIDTH JOINER (Extend_FE) × [13.3] REGIONAL INDICATOR SYMBOL LETTER C (Regional_Indicator) ÷ [0.3] " is 279.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0020 × 200D ÷ 0646 ÷  #  ÷ [0.2] SPACE (Other) × [4.0] ZERO WIDTH JOINER (Extend_FE) ÷ [999.0] ARABIC LETTER NOON (ALetter) ÷ [0.3] " is 136.
Long Statement,Lucene.Net.Analysis.Core,WordBreakTestUnicode_6_3_0,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\WordBreakTestUnicode_6_3_0.cs,Test,The length of the statement  "            // ÷ 0646 × 200D ÷ 0020 ÷  #  ÷ [0.2] ARABIC LETTER NOON (ALetter) × [4.0] ZERO WIDTH JOINER (Extend_FE) ÷ [999.0] SPACE (Other) ÷ [0.3] " is 136.
Long Statement,Lucene.Net.Analysis.Cz,TestCzechAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cz\TestCzechAnalyzer.cs,TestStopWordLegacy,The length of the statement  "            AssertAnalyzesTo(new CzechAnalyzer(LuceneVersion.LUCENE_30)' "Pokud mluvime o volnem"' new string[] { "mluvime"' "volnem" }); " is 125.
Long Statement,Lucene.Net.Analysis.Cz,TestCzechStemmer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cz\TestCzechStemmer.cs,TestWithKeywordAttribute,The length of the statement  "            CzechStemFilter filter = new CzechStemFilter(new SetKeywordMarkerFilter(new MockTokenizer(new StringReader("hole desek")' MockTokenizer.WHITESPACE' false)' set)); " is 162.
Long Statement,Lucene.Net.Analysis.De,TestGermanAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\De\TestGermanAnalyzer.cs,TestWithKeywordAttribute,The length of the statement  "            GermanStemFilter filter = new GermanStemFilter(new SetKeywordMarkerFilter(new LowerCaseTokenizer(TEST_VERSION_CURRENT' new StringReader("Fischen Trinken"))' set)); " is 163.
Long Statement,Lucene.Net.Analysis.De,TestGermanAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\De\TestGermanAnalyzer.cs,TestStemExclusionTable,The length of the statement  "            GermanAnalyzer a = new GermanAnalyzer(TEST_VERSION_CURRENT' CharArraySet.EMPTY_SET' new CharArraySet(TEST_VERSION_CURRENT' AsSet("tischen")' false)); " is 149.
Long Statement,Lucene.Net.Analysis.El,GreekAnalyzerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\El\GreekAnalyzerTest.cs,TestAnalyzer,The length of the statement  "            AssertAnalyzesTo(a' "Μία εξαιρετικά καλή και πλούσια σειρά χαρακτήρων της Ελληνικής γλώσσας"' new string[] { "μια"' "εξαιρετ"' "καλ"' "πλουσ"' "σειρ"' "χαρακτηρ"' "ελληνικ"' "γλωσσ" }); " is 185.
Long Statement,Lucene.Net.Analysis.El,GreekAnalyzerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\El\GreekAnalyzerTest.cs,TestAnalyzer,The length of the statement  "            AssertAnalyzesTo(a' "ΠΡΟΫΠΟΘΕΣΕΙΣ  Άψογος' ο μεστός και οι άλλοι"' new string[] { "προυποθεσ"' "αψογ"' "μεστ"' "αλλ" }); " is 120.
Long Statement,Lucene.Net.Analysis.El,GreekAnalyzerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\El\GreekAnalyzerTest.cs,TestAnalyzerBWCompat,The length of the statement  "            AssertAnalyzesTo(a' "Μία εξαιρετικά καλή και πλούσια σειρά χαρακτήρων της Ελληνικής γλώσσας"' new string[] { "μια"' "εξαιρετικα"' "καλη"' "πλουσια"' "σειρα"' "χαρακτηρων"' "ελληνικησ"' "γλωσσασ" }); " is 198.
Long Statement,Lucene.Net.Analysis.El,GreekAnalyzerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\El\GreekAnalyzerTest.cs,TestAnalyzerBWCompat,The length of the statement  "            AssertAnalyzesTo(a' "ΠΡΟΫΠΟΘΕΣΕΙΣ  Άψογος' ο μεστός και οι άλλοι"' new string[] { "προυποθεσεισ"' "αψογοσ"' "μεστοσ"' "αλλοι" }); " is 129.
Long Statement,Lucene.Net.Analysis.El,GreekAnalyzerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\El\GreekAnalyzerTest.cs,TestReusableTokenStream,The length of the statement  "            AssertAnalyzesTo(a' "Μία εξαιρετικά καλή και πλούσια σειρά χαρακτήρων της Ελληνικής γλώσσας"' new string[] { "μια"' "εξαιρετ"' "καλ"' "πλουσ"' "σειρ"' "χαρακτηρ"' "ελληνικ"' "γλωσσ" }); " is 185.
Long Statement,Lucene.Net.Analysis.El,GreekAnalyzerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\El\GreekAnalyzerTest.cs,TestReusableTokenStream,The length of the statement  "            AssertAnalyzesTo(a' "ΠΡΟΫΠΟΘΕΣΕΙΣ  Άψογος' ο μεστός και οι άλλοι"' new string[] { "προυποθεσ"' "αψογ"' "μεστ"' "αλλ" }); " is 120.
Long Statement,Lucene.Net.Analysis.Fa,TestPersianAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Fa\TestPersianAnalyzer.cs,TestCustomStopwords,The length of the statement  "            PersianAnalyzer a = new PersianAnalyzer(TEST_VERSION_CURRENT' new CharArraySet(TEST_VERSION_CURRENT' AsSet("the"' "and"' "a")' false)); " is 135.
Long Statement,Lucene.Net.Analysis.Fr,TestFrenchAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Fr\TestFrenchAnalyzer.cs,TestAnalyzer,The length of the statement  "            AssertAnalyzesTo(fa' "lances chismes habitable chiste éléments captifs"' new string[] { "lanc"' "chism"' "habitabl"' "chist"' "element"' "captif" }); " is 149.
Long Statement,Lucene.Net.Analysis.Fr,TestFrenchAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Fr\TestFrenchAnalyzer.cs,TestAnalyzer,The length of the statement  "            AssertAnalyzesTo(fa' "C3PO aujourd'hui oeuf ïâöûàä anticonstitutionnellement Java++ "' new string[] { "c3po"' "aujourd'hui"' "oeuf"' "ïaöuaä"' "anticonstitutionel"' "java" }); " is 175.
Long Statement,Lucene.Net.Analysis.Fr,TestFrenchAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Fr\TestFrenchAnalyzer.cs,TestAnalyzer,The length of the statement  "            AssertAnalyzesTo(fa' "33Bis 1940-1945 1940:1945 (---i+++)*"' new string[] { "33bi"' "1940"' "1945"' "1940"' "1945"' "i" }); " is 123.
Long Statement,Lucene.Net.Analysis.Fr,TestFrenchAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Fr\TestFrenchAnalyzer.cs,TestAnalyzer30,The length of the statement  "            AssertAnalyzesTo(fa' "lances chismes habitable chiste éléments captifs"' new string[] { "lanc"' "chism"' "habit"' "chist"' "élément"' "captif" }); " is 146.
Long Statement,Lucene.Net.Analysis.Fr,TestFrenchAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Fr\TestFrenchAnalyzer.cs,TestAnalyzer30,The length of the statement  "            AssertAnalyzesTo(fa' "C3PO aujourd'hui oeuf ïâöûàä anticonstitutionnellement Java++ "' new string[] { "c3po"' "aujourd'hui"' "oeuf"' "ïâöûàä"' "anticonstitutionnel"' "jav" }); " is 175.
Long Statement,Lucene.Net.Analysis.Fr,TestFrenchAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Fr\TestFrenchAnalyzer.cs,TestAnalyzer30,The length of the statement  "            AssertAnalyzesTo(fa' "33Bis 1940-1945 1940:1945 (---i+++)*"' new string[] { "33bis"' "1940-1945"' "1940"' "1945"' "i" }); " is 121.
Long Statement,Lucene.Net.Analysis.Fr,TestFrenchAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Fr\TestFrenchAnalyzer.cs,TestReusableTokenStream,The length of the statement  "            AssertAnalyzesTo(fa' "lances chismes habitable chiste éléments captifs"' new string[] { "lanc"' "chism"' "habitabl"' "chist"' "element"' "captif" }); " is 149.
Long Statement,Lucene.Net.Analysis.Hunspell,TestDictionary,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Hunspell\TestDictionary.cs,TestInvalidData,The length of the statement  "                        assertTrue(expected.Message.StartsWith("The affix file contains a rule with less than four elements"' StringComparison.Ordinal)); " is 129.
Long Statement,Lucene.Net.Analysis.Hunspell,TestDictionary,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Hunspell\TestDictionary.cs,TestResourceCleanup,The length of the statement  "            CloseCheckInputStream affixStream = new CloseCheckInputStream(this' this.GetType().getResourceAsStream("compressed.aff")); " is 122.
Long Statement,Lucene.Net.Analysis.Hunspell,TestDictionary,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Hunspell\TestDictionary.cs,TestResourceCleanup,The length of the statement  "            CloseCheckInputStream dictStream = new CloseCheckInputStream(this' this.GetType().getResourceAsStream("compressed.dic")); " is 121.
Long Statement,Lucene.Net.Analysis.Hunspell,TestDictionary,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Hunspell\TestDictionary.cs,TestSetWithCrazyWhitespaceAndBOMs,The length of the statement  "            assertEquals("UTF-8"' Dictionary.GetDictionaryEncoding(new MemoryStream("\uFEFFSET\tUTF-8\n".GetBytes(Encoding.UTF8)))); " is 120.
Long Statement,Lucene.Net.Analysis.Hunspell,TestDictionary,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Hunspell\TestDictionary.cs,TestSetWithCrazyWhitespaceAndBOMs,The length of the statement  "            assertEquals("UTF-8"' Dictionary.GetDictionaryEncoding(new MemoryStream("\uFEFFSET\tUTF-8\r\n".GetBytes(Encoding.UTF8)))); " is 122.
Long Statement,Lucene.Net.Analysis.Miscellaneous,PatternAnalyzerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\PatternAnalyzerTest.cs,TestNonWordPattern,The length of the statement  "            Check(a' "The quick brown Fox'the abcd1234 (56.78) dc."' new string[] { "The"' "quick"' "brown"' "Fox"' "the"' "abcd"' "dc" }); " is 127.
Long Statement,Lucene.Net.Analysis.Miscellaneous,PatternAnalyzerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\PatternAnalyzerTest.cs,TestNonWordPattern,The length of the statement  "            PatternAnalyzer b = new PatternAnalyzer(TEST_VERSION_CURRENT' PatternAnalyzer.NON_WORD_PATTERN' true' StopAnalyzer.ENGLISH_STOP_WORDS_SET); " is 139.
Long Statement,Lucene.Net.Analysis.Miscellaneous,PatternAnalyzerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\PatternAnalyzerTest.cs,TestWhitespacePattern,The length of the statement  "            Check(a' "The quick brown Fox'the abcd1234 (56.78) dc."' new string[] { "The"' "quick"' "brown"' "Fox'the"' "abcd1234"' "(56.78)"' "dc." }); " is 140.
Long Statement,Lucene.Net.Analysis.Miscellaneous,PatternAnalyzerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\PatternAnalyzerTest.cs,TestWhitespacePattern,The length of the statement  "            PatternAnalyzer b = new PatternAnalyzer(TEST_VERSION_CURRENT' PatternAnalyzer.WHITESPACE_PATTERN' true' StopAnalyzer.ENGLISH_STOP_WORDS_SET); " is 141.
Long Statement,Lucene.Net.Analysis.Miscellaneous,PatternAnalyzerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\PatternAnalyzerTest.cs,TestWhitespacePattern,The length of the statement  "            Check(b' "The quick brown Fox'the abcd1234 (56.78) dc."' new string[] { "quick"' "brown"' "fox'the"' "abcd1234"' "(56.78)"' "dc." }); " is 133.
Long Statement,Lucene.Net.Analysis.Miscellaneous,PatternAnalyzerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\PatternAnalyzerTest.cs,TestCustomPattern,The length of the statement  "            Check(a' "Here'Are'some'Comma'separated'words'"' new string[] { "Here"' "Are"' "some"' "Comma"' "separated"' "words" }); " is 120.
Long Statement,Lucene.Net.Analysis.Miscellaneous,PatternAnalyzerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\PatternAnalyzerTest.cs,TestCustomPattern,The length of the statement  "            PatternAnalyzer b = new PatternAnalyzer(TEST_VERSION_CURRENT' new Regex("'"' RegexOptions.Compiled)' true' StopAnalyzer.ENGLISH_STOP_WORDS_SET); " is 144.
Long Statement,Lucene.Net.Analysis.Miscellaneous,PatternAnalyzerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\PatternAnalyzerTest.cs,TestRandomStrings,The length of the statement  "            Analyzer a = new PatternAnalyzer(TEST_VERSION_CURRENT' new Regex("'"' RegexOptions.Compiled)' true' StopAnalyzer.ENGLISH_STOP_WORDS_SET); " is 137.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestASCIIFoldingFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestASCIIFoldingFilter.cs,testLatin1Accents,The length of the statement  "            TokenStream stream = new MockTokenizer(new StringReader("Des mot clés À LA CHAÎNE À Á Â Ã Ä Å Æ Ç È É Ê Ë Ì Í Î Ï Ĳ Ð Ñ" + " Ò Ó Ô Õ Ö Ø Œ Þ Ù Ú Û Ü Ý Ÿ à á â ã ä å æ ç è é ê ë ì í î ï ĳ" + " ð ñ ò ó ô õ ö ø œ ß þ ù ú û ü ý ÿ ﬁ ﬂ")' MockTokenizer.WHITESPACE' false); " is 266.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestASCIIFoldingFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestASCIIFoldingFilter.cs,testAllFoldings,The length of the statement  "            string[] foldings = new string[] { "À" + "Á" + "Â" + "Ã" + "Ä" + "Å" + "Ā" + "Ă" + "Ą" + "Ə" + "Ǎ" + "Ǟ" + "Ǡ" + "Ǻ" + "Ȁ" + "Ȃ" + "Ȧ" + "Ⱥ" + "ᴀ" + "Ḁ" + "Ạ" + "Ả" + "Ấ" + "Ầ" + "Ẩ" + "Ẫ" + "Ậ" + "Ắ" + "Ằ" + "Ẳ" + "Ẵ" + "Ặ" + "Ⓐ" + "Ａ"' "A"' "à" + "á" + "â" + "ã" + "ä" + "å" + "ā" + "ă" + "ą" + "ǎ" + "ǟ" + "ǡ" + "ǻ" + "ȁ" + "ȃ" + "ȧ" + "ɐ" + "ə" + "ɚ" + "ᶏ" + "ḁ" + "ᶕ" + "ẚ" + "ạ" + "ả" + "ấ" + "ầ" + "ẩ" + "ẫ" + "ậ" + "ắ" + "ằ" + "ẳ" + "ẵ" + "ặ" + "ₐ" + "ₔ" + "ⓐ" + "ⱥ" + "Ɐ" + "ａ"' "a"' "Ꜳ"' "AA"' "Æ" + "Ǣ" + "Ǽ" + "ᴁ"' "AE"' "Ꜵ"' "AO"' "Ꜷ"' "AU"' "Ꜹ" + "Ꜻ"' "AV"' "Ꜽ"' "AY"' "⒜"' "(a)"' "ꜳ"' "aa"' "æ" + "ǣ" + "ǽ" + "ᴂ"' "ae"' "ꜵ"' "ao"' "ꜷ"' "au"' "ꜹ" + "ꜻ"' "av"' "ꜽ"' "ay"' "Ɓ" + "Ƃ" + "Ƀ" + "ʙ" + "ᴃ" + "Ḃ" + "Ḅ" + "Ḇ" + "Ⓑ" + "Ｂ"' "B"' "ƀ" + "ƃ" + "ɓ" + "ᵬ" + "ᶀ" + "ḃ" + "ḅ" + "ḇ" + "ⓑ" + "ｂ"' "b"' "⒝"' "(b)"' "Ç" + "Ć" + "Ĉ" + "Ċ" + "Č" + "Ƈ" + "Ȼ" + "ʗ" + "ᴄ" + "Ḉ" + "Ⓒ" + "Ｃ"' "C"' "ç" + "ć" + "ĉ" + "ċ" + "č" + "ƈ" + "ȼ" + "ɕ" + "ḉ" + "ↄ" + "ⓒ" + "Ꜿ" + "ꜿ" + "ｃ"' "c"' "⒞"' "(c)"' "Ð" + "Ď" + "Đ" + "Ɖ" + "Ɗ" + "Ƌ" + "ᴅ" + "ᴆ" + "Ḋ" + "Ḍ" + "Ḏ" + "Ḑ" + "Ḓ" + "Ⓓ" + "Ꝺ" + "Ｄ"' "D"' "ð" + "ď" + "đ" + "ƌ" + "ȡ" + "ɖ" + "ɗ" + "ᵭ" + "ᶁ" + "ᶑ" + "ḋ" + "ḍ" + "ḏ" + "ḑ" + "ḓ" + "ⓓ" + "ꝺ" + "ｄ"' "d"' "Ǆ" + "Ǳ"' "DZ"' "ǅ" + "ǲ"' "Dz"' "⒟"' "(d)"' "ȸ"' "db"' "ǆ" + "ǳ" + "ʣ" + "ʥ"' "dz"' "È" + "É" + "Ê" + "Ë" + "Ē" + "Ĕ" + "Ė" + "Ę" + "Ě" + "Ǝ" + "Ɛ" + "Ȅ" + "Ȇ" + "Ȩ" + "Ɇ" + "ᴇ" + "Ḕ" + "Ḗ" + "Ḙ" + "Ḛ" + "Ḝ" + "Ẹ" + "Ẻ" + "Ẽ" + "Ế" + "Ề" + "Ể" + "Ễ" + "Ệ" + "Ⓔ" + "ⱻ" + "Ｅ"' "E"' "è" + "é" + "ê" + "ë" + "ē" + "ĕ" + "ė" + "ę" + "ě" + "ǝ" + "ȅ" + "ȇ" + "ȩ" + "ɇ" + "ɘ" + "ɛ" + "ɜ" + "ɝ" + "ɞ" + "ʚ" + "ᴈ" + "ᶒ" + "ᶓ" + "ᶔ" + "ḕ" + "ḗ" + "ḙ" + "ḛ" + "ḝ" + "ẹ" + "ẻ" + "ẽ" + "ế" + "ề" + "ể" + "ễ" + "ệ" + "ₑ" + "ⓔ" + "ⱸ" + "ｅ"' "e"' "⒠"' "(e)"' "Ƒ" + "Ḟ" + "Ⓕ" + "ꜰ" + "Ꝼ" + "ꟻ" + "Ｆ"' "F"' "ƒ" + "ᵮ" + "ᶂ" + "ḟ" + "ẛ" + "ⓕ" + "ꝼ" + "ｆ"' "f"' "⒡"' "(f)"' "ﬀ"' "ff"' "ﬃ"' "ffi"' "ﬄ"' "ffl"' "ﬁ"' "fi"' "ﬂ"' "fl"' "Ĝ" + "Ğ" + "Ġ" + "Ģ" + "Ɠ" + "Ǥ" + "ǥ" + "Ǧ" + "ǧ" + "Ǵ" + "ɢ" + "ʛ" + "Ḡ" + "Ⓖ" + "Ᵹ" + "Ꝿ" + "Ｇ"' "G"' "ĝ" + "ğ" + "ġ" + "ģ" + "ǵ" + "ɠ" + "ɡ" + "ᵷ" + "ᵹ" + "ᶃ" + "ḡ" + "ⓖ" + "ꝿ" + "ｇ"' "g"' "⒢"' "(g)"' "Ĥ" + "Ħ" + "Ȟ" + "ʜ" + "Ḣ" + "Ḥ" + "Ḧ" + "Ḩ" + "Ḫ" + "Ⓗ" + "Ⱨ" + "Ⱶ" + "Ｈ"' "H"' "ĥ" + "ħ" + "ȟ" + "ɥ" + "ɦ" + "ʮ" + "ʯ" + "ḣ" + "ḥ" + "ḧ" + "ḩ" + "ḫ" + "ẖ" + "ⓗ" + "ⱨ" + "ⱶ" + "ｈ"' "h"' "Ƕ"' "HV"' "⒣"' "(h)"' "ƕ"' "hv"' "Ì" + "Í" + "Î" + "Ï" + "Ĩ" + "Ī" + "Ĭ" + "Į" + "İ" + "Ɩ" + "Ɨ" + "Ǐ" + "Ȉ" + "Ȋ" + "ɪ" + "ᵻ" + "Ḭ" + "Ḯ" + "Ỉ" + "Ị" + "Ⓘ" + "ꟾ" + "Ｉ"' "I"' "ì" + "í" + "î" + "ï" + "ĩ" + "ī" + "ĭ" + "į" + "ı" + "ǐ" + "ȉ" + "ȋ" + "ɨ" + "ᴉ" + "ᵢ" + "ᵼ" + "ᶖ" + "ḭ" + "ḯ" + "ỉ" + "ị" + "ⁱ" + "ⓘ" + "ｉ"' "i"' "Ĳ"' "IJ"' "⒤"' "(i)"' "ĳ"' "ij"' "Ĵ" + "Ɉ" + "ᴊ" + "Ⓙ" + "Ｊ"' "J"' "ĵ" + "ǰ" + "ȷ" + "ɉ" + "ɟ" + "ʄ" + "ʝ" + "ⓙ" + "ⱼ" + "ｊ"' "j"' "⒥"' "(j)"' "Ķ" + "Ƙ" + "Ǩ" + "ᴋ" + "Ḱ" + "Ḳ" + "Ḵ" + "Ⓚ" + "Ⱪ" + "Ꝁ" + "Ꝃ" + "Ꝅ" + "Ｋ"' "K"' "ķ" + "ƙ" + "ǩ" + "ʞ" + "ᶄ" + "ḱ" + "ḳ" + "ḵ" + "ⓚ" + "ⱪ" + "ꝁ" + "ꝃ" + "ꝅ" + "ｋ"' "k"' "⒦"' "(k)"' "Ĺ" + "Ļ" + "Ľ" + "Ŀ" + "Ł" + "Ƚ" + "ʟ" + "ᴌ" + "Ḷ" + "Ḹ" + "Ḻ" + "Ḽ" + "Ⓛ" + "Ⱡ" + "Ɫ" + "Ꝇ" + "Ꝉ" + "Ꞁ" + "Ｌ"' "L"' "ĺ" + "ļ" + "ľ" + "ŀ" + "ł" + "ƚ" + "ȴ" + "ɫ" + "ɬ" + "ɭ" + "ᶅ" + "ḷ" + "ḹ" + "ḻ" + "ḽ" + "ⓛ" + "ⱡ" + "ꝇ" + "ꝉ" + "ꞁ" + "ｌ"' "l"' "Ǉ"' "LJ"' "Ỻ"' "LL"' "ǈ"' "Lj"' "⒧"' "(l)"' "ǉ"' "lj"' "ỻ"' "ll"' "ʪ"' "ls"' "ʫ"' "lz"' "Ɯ" + "ᴍ" + "Ḿ" + "Ṁ" + "Ṃ" + "Ⓜ" + "Ɱ" + "ꟽ" + "ꟿ" + "Ｍ"' "M"' "ɯ" + "ɰ" + "ɱ" + "ᵯ" + "ᶆ" + "ḿ" + "ṁ" + "ṃ" + "ⓜ" + "ｍ"' "m"' "⒨"' "(m)"' "Ñ" + "Ń" + "Ņ" + "Ň" + "Ŋ" + "Ɲ" + "Ǹ" + "Ƞ" + "ɴ" + "ᴎ" + "Ṅ" + "Ṇ" + "Ṉ" + "Ṋ" + "Ⓝ" + "Ｎ"' "N"' "ñ" + "ń" + "ņ" + "ň" + "ŉ" + "ŋ" + "ƞ" + "ǹ" + "ȵ" + "ɲ" + "ɳ" + "ᵰ" + "ᶇ" + "ṅ" + "ṇ" + "ṉ" + "ṋ" + "ⁿ" + "ⓝ" + "ｎ"' "n"' "Ǌ"' "NJ"' "ǋ"' "Nj"' "⒩"' "(n)"' "ǌ"' "nj"' "Ò" + "Ó" + "Ô" + "Õ" + "Ö" + "Ø" + "Ō" + "Ŏ" + "Ő" + "Ɔ" + "Ɵ" + "Ơ" + "Ǒ" + "Ǫ" + "Ǭ" + "Ǿ" + "Ȍ" + "Ȏ" + "Ȫ" + "Ȭ" + "Ȯ" + "Ȱ" + "ᴏ" + "ᴐ" + "Ṍ" + "Ṏ" + "Ṑ" + "Ṓ" + "Ọ" + "Ỏ" + "Ố" + "Ồ" + "Ổ" + "Ỗ" + "Ộ" + "Ớ" + "Ờ" + "Ở" + "Ỡ" + "Ợ" + "Ⓞ" + "Ꝋ" + "Ꝍ" + "Ｏ"' "O"' "ò" + "ó" + "ô" + "õ" + "ö" + "ø" + "ō" + "ŏ" + "ő" + "ơ" + "ǒ" + "ǫ" + "ǭ" + "ǿ" + "ȍ" + "ȏ" + "ȫ" + "ȭ" + "ȯ" + "ȱ" + "ɔ" + "ɵ" + "ᴖ" + "ᴗ" + "ᶗ" + "ṍ" + "ṏ" + "ṑ" + "ṓ" + "ọ" + "ỏ" + "ố" + "ồ" + "ổ" + "ỗ" + "ộ" + "ớ" + "ờ" + "ở" + "ỡ" + "ợ" + "ₒ" + "ⓞ" + "ⱺ" + "ꝋ" + "ꝍ" + "ｏ"' "o"' "Œ" + "ɶ"' "OE"' "Ꝏ"' "OO"' "Ȣ" + "ᴕ"' "OU"' "⒪"' "(o)"' "œ" + "ᴔ"' "oe"' "ꝏ"' "oo"' "ȣ"' "ou"' "Ƥ" + "ᴘ" + "Ṕ" + "Ṗ" + "Ⓟ" + "Ᵽ" + "Ꝑ" + "Ꝓ" + "Ꝕ" + "Ｐ"' "P"' "ƥ" + "ᵱ" + "ᵽ" + "ᶈ" + "ṕ" + "ṗ" + "ⓟ" + "ꝑ" + "ꝓ" + "ꝕ" + "ꟼ" + "ｐ"' "p"' "⒫"' "(p)"' "Ɋ" + "Ⓠ" + "Ꝗ" + "Ꝙ" + "Ｑ"' "Q"' "ĸ" + "ɋ" + "ʠ" + "ⓠ" + "ꝗ" + "ꝙ" + "ｑ"' "q"' "⒬"' "(q)"' "ȹ"' "qp"' "Ŕ" + "Ŗ" + "Ř" + "Ȑ" + "Ȓ" + "Ɍ" + "ʀ" + "ʁ" + "ᴙ" + "ᴚ" + "Ṙ" + "Ṛ" + "Ṝ" + "Ṟ" + "Ⓡ" + "Ɽ" + "Ꝛ" + "Ꞃ" + "Ｒ"' "R"' "ŕ" + "ŗ" + "ř" + "ȑ" + "ȓ" + "ɍ" + "ɼ" + "ɽ" + "ɾ" + "ɿ" + "ᵣ" + "ᵲ" + "ᵳ" + "ᶉ" + "ṙ" + "ṛ" + "ṝ" + "ṟ" + "ⓡ" + "ꝛ" + "ꞃ" + "ｒ"' "r"' "⒭"' "(r)"' "Ś" + "Ŝ" + "Ş" + "Š" + "Ș" + "Ṡ" + "Ṣ" + "Ṥ" + "Ṧ" + "Ṩ" + "Ⓢ" + "ꜱ" + "ꞅ" + "Ｓ"' "S"' "ś" + "ŝ" + "ş" + "š" + "ſ" + "ș" + "ȿ" + "ʂ" + "ᵴ" + "ᶊ" + "ṡ" + "ṣ" + "ṥ" + "ṧ" + "ṩ" + "ẜ" + "ẝ" + "ⓢ" + "Ꞅ" + "ｓ"' "s"' "ẞ"' "SS"' "⒮"' "(s)"' "ß"' "ss"' "ﬆ"' "st"' "Ţ" + "Ť" + "Ŧ" + "Ƭ" + "Ʈ" + "Ț" + "Ⱦ" + "ᴛ" + "Ṫ" + "Ṭ" + "Ṯ" + "Ṱ" + "Ⓣ" + "Ꞇ" + "Ｔ"' "T"' "ţ" + "ť" + "ŧ" + "ƫ" + "ƭ" + "ț" + "ȶ" + "ʇ" + "ʈ" + "ᵵ" + "ṫ" + "ṭ" + "ṯ" + "ṱ" + "ẗ" + "ⓣ" + "ⱦ" + "ｔ"' "t"' "Þ" + "Ꝧ"' "TH"' "Ꜩ"' "TZ"' "⒯"' "(t)"' "ʨ"' "tc"' "þ" + "ᵺ" + "ꝧ"' "th"' "ʦ"' "ts"' "ꜩ"' "tz"' "Ù" + "Ú" + "Û" + "Ü" + "Ũ" + "Ū" + "Ŭ" + "Ů" + "Ű" + "Ų" + "Ư" + "Ǔ" + "Ǖ" + "Ǘ" + "Ǚ" + "Ǜ" + "Ȕ" + "Ȗ" + "Ʉ" + "ᴜ" + "ᵾ" + "Ṳ" + "Ṵ" + "Ṷ" + "Ṹ" + "Ṻ" + "Ụ" + "Ủ" + "Ứ" + "Ừ" + "Ử" + "Ữ" + "Ự" + "Ⓤ" + "Ｕ"' "U"' "ù" + "ú" + "û" + "ü" + "ũ" + "ū" + "ŭ" + "ů" + "ű" + "ų" + "ư" + "ǔ" + "ǖ" + "ǘ" + "ǚ" + "ǜ" + "ȕ" + "ȗ" + "ʉ" + "ᵤ" + "ᶙ" + "ṳ" + "ṵ" + "ṷ" + "ṹ" + "ṻ" + "ụ" + "ủ" + "ứ" + "ừ" + "ử" + "ữ" + "ự" + "ⓤ" + "ｕ"' "u"' "⒰"' "(u)"' "ᵫ"' "ue"' "Ʋ" + "Ʌ" + "ᴠ" + "Ṽ" + "Ṿ" + "Ỽ" + "Ⓥ" + "Ꝟ" + "Ꝩ" + "Ｖ"' "V"' "ʋ" + "ʌ" + "ᵥ" + "ᶌ" + "ṽ" + "ṿ" + "ⓥ" + "ⱱ" + "ⱴ" + "ꝟ" + "ｖ"' "v"' "Ꝡ"' "VY"' "⒱"' "(v)"' "ꝡ"' "vy"' "Ŵ" + "Ƿ" + "ᴡ" + "Ẁ" + "Ẃ" + "Ẅ" + "Ẇ" + "Ẉ" + "Ⓦ" + "Ⱳ" + "Ｗ"' "W"' "ŵ" + "ƿ" + "ʍ" + "ẁ" + "ẃ" + "ẅ" + "ẇ" + "ẉ" + "ẘ" + "ⓦ" + "ⱳ" + "ｗ"' "w"' "⒲"' "(w)"' "Ẋ" + "Ẍ" + "Ⓧ" + "Ｘ"' "X"' "ᶍ" + "ẋ" + "ẍ" + "ₓ" + "ⓧ" + "ｘ"' "x"' "⒳"' "(x)"' "Ý" + "Ŷ" + "Ÿ" + "Ƴ" + "Ȳ" + "Ɏ" + "ʏ" + "Ẏ" + "Ỳ" + "Ỵ" + "Ỷ" + "Ỹ" + "Ỿ" + "Ⓨ" + "Ｙ"' "Y"' "ý" + "ÿ" + "ŷ" + "ƴ" + "ȳ" + "ɏ" + "ʎ" + "ẏ" + "ẙ" + "ỳ" + "ỵ" + "ỷ" + "ỹ" + "ỿ" + "ⓨ" + "ｙ"' "y"' "⒴"' "(y)"' "Ź" + "Ż" + "Ž" + "Ƶ" + "Ȝ" + "Ȥ" + "ᴢ" + "Ẑ" + "Ẓ" + "Ẕ" + "Ⓩ" + "Ⱬ" + "Ꝣ" + "Ｚ"' "Z"' "ź" + "ż" + "ž" + "ƶ" + "ȝ" + "ȥ" + "ɀ" + "ʐ" + "ʑ" + "ᵶ" + "ᶎ" + "ẑ" + "ẓ" + "ẕ" + "ⓩ" + "ⱬ" + "ꝣ" + "ｚ"' "z"' "⒵"' "(z)"' "⁰" + "₀" + "⓪" + "⓿" + "０"' "0"' "¹" + "₁" + "①" + "⓵" + "❶" + "➀" + "➊" + "１"' "1"' "⒈"' "1."' "⑴"' "(1)"' "²" + "₂" + "②" + "⓶" + "❷" + "➁" + "➋" + "２"' "2"' "⒉"' "2."' "⑵"' "(2)"' "³" + "₃" + "③" + "⓷" + "❸" + "➂" + "➌" + "３"' "3"' "⒊"' "3."' "⑶"' "(3)"' "⁴" + "₄" + "④" + "⓸" + "❹" + "➃" + "➍" + "４"' "4"' "⒋"' "4."' "⑷"' "(4)"' "⁵" + "₅" + "⑤" + "⓹" + "❺" + "➄" + "➎" + "５"' "5"' "⒌"' "5."' "⑸"' "(5)"' "⁶" + "₆" + "⑥" + "⓺" + "❻" + "➅" + "➏" + "６"' "6"' "⒍"' "6."' "⑹"' "(6)"' "⁷" + "₇" + "⑦" + "⓻" + "❼" + "➆" + "➐" + "７"' "7"' "⒎"' "7."' "⑺"' "(7)"' "⁸" + "₈" + "⑧" + "⓼" + "❽" + "➇" + "➑" + "８"' "8"' "⒏"' "8."' "⑻"' "(8)"' "⁹" + "₉" + "⑨" + "⓽" + "❾" + "➈" + "➒" + "９"' "9"' "⒐"' "9."' "⑼"' "(9)"' "⑩" + "⓾" + "❿" + "➉" + "➓"' "10"' "⒑"' "10."' "⑽"' "(10)"' "⑪" + "⓫"' "11"' "⒒"' "11."' "⑾"' "(11)"' "⑫" + "⓬"' "12"' "⒓"' "12."' "⑿"' "(12)"' "⑬" + "⓭"' "13"' "⒔"' "13."' "⒀"' "(13)"' "⑭" + "⓮"' "14"' "⒕"' "14."' "⒁"' "(14)"' "⑮" + "⓯"' "15"' "⒖"' "15."' "⒂"' "(15)"' "⑯" + "⓰"' "16"' "⒗"' "16."' "⒃"' "(16)"' "⑰" + "⓱"' "17"' "⒘"' "17."' "⒄"' "(17)"' "⑱" + "⓲"' "18"' "⒙"' "18."' "⒅"' "(18)"' "⑲" + "⓳"' "19"' "⒚"' "19."' "⒆"' "(19)"' "⑳" + "⓴"' "20"' "⒛"' "20."' "⒇"' "(20)"' "«" + "»" + "“" + "”" + "„" + "″" + "‶" + "❝" + "❞" + "❮" + "❯" + "＂"' "\""' "‘" + "’" + "‚" + "‛" + "′" + "‵" + "‹" + "›" + "❛" + "❜" + "＇"' "'"' "‐" + "‑" + "‒" + "–" + "—" + "⁻" + "₋" + "－"' "-"' "⁅" + "❲" + "［"' "["' "⁆" + "❳" + "］"' "]"' "⁽" + "₍" + "❨" + "❪" + "（"' "("' "⸨"' "(("' "⁾" + "₎" + "❩" + "❫" + "）"' ")"' "⸩"' "))"' "❬" + "❰" + "＜"' "<"' "❭" + "❱" + "＞"' ">"' "❴" + "｛"' "{"' "❵" + "｝"' "}"' "⁺" + "₊" + "＋"' "+"' "⁼" + "₌" + "＝"' "="' "！"' "!"' "‼"' "!!"' "⁉"' "!?"' "＃"' "#"' "＄"' "$"' "⁒" + "％"' "%"' "＆"' "&"' "⁎" + "＊"' "*"' "，"' "'"' "．"' "."' "⁄" + "／"' "/"' "："' ":"' "⁏" + "；"' ";"' "？"' "?"' "⁇"' "??"' "⁈"' "?!"' "＠"' "@"' "＼"' "\\"' "‸" + "＾"' "^"' "＿"' "_"' "⁓" + "～"' "~" }; " is 8613.
Long Statement,Lucene.Net.Analysis.Miscellaneous,AnalyzerAnonymousInnerClassHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestASCIIFoldingFilter.cs,CreateComponents,The length of the statement  "                TokenStream stream = new KeepWordFilter(TEST_VERSION_CURRENT' tokenizer' new CharArraySet(TEST_VERSION_CURRENT' words' true)); " is 126.
Long Statement,Lucene.Net.Analysis.Miscellaneous,AnalyzerAnonymousInnerClassHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestASCIIFoldingFilter.cs,CreateComponents,The length of the statement  "                return new TokenStreamComponents(tokenizer' new WordDelimiterFilter(TEST_VERSION_CURRENT' tokenizer' flags' protWords)); " is 120.
Long Statement,Lucene.Net.Analysis.Miscellaneous,AnalyzerAnonymousInnerClassHelper2,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestASCIIFoldingFilter.cs,CreateComponents,The length of the statement  "                return new TokenStreamComponents(tokenizer' new Lucene47WordDelimiterFilter(new LargePosIncTokenFilter(outerInstance' tokenizer)' flags' protWords)); " is 149.
Long Statement,Lucene.Net.Analysis.Miscellaneous,AnalyzerAnonymousInnerClassHelper2,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestASCIIFoldingFilter.cs,CreateComponents,The length of the statement  "                return new TokenStreamComponents(tokenizer' new WordDelimiterFilter(TEST_VERSION_CURRENT' new LargePosIncTokenFilter(outerInstance' tokenizer)' flags' protWords)); " is 163.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestCapitalizationFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestCapitalizationFilter.cs,TestCapitalization,The length of the statement  "            AssertCapitalizesTo("kiTTEN"' new string[] { "Kitten" }' true' keep' true' null' 0' CapitalizationFilter.DEFAULT_MAX_WORD_COUNT' CapitalizationFilter.DEFAULT_MAX_TOKEN_LENGTH); " is 176.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestCapitalizationFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestCapitalizationFilter.cs,TestCapitalization,The length of the statement  "            AssertCapitalizesTo("and"' new string[] { "And" }' true' keep' true' null' 0' CapitalizationFilter.DEFAULT_MAX_WORD_COUNT' CapitalizationFilter.DEFAULT_MAX_TOKEN_LENGTH); " is 170.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestCapitalizationFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestCapitalizationFilter.cs,TestCapitalization,The length of the statement  "            AssertCapitalizesTo("AnD"' new string[] { "And" }' true' keep' true' null' 0' CapitalizationFilter.DEFAULT_MAX_WORD_COUNT' CapitalizationFilter.DEFAULT_MAX_TOKEN_LENGTH); " is 170.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestCapitalizationFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestCapitalizationFilter.cs,TestCapitalization,The length of the statement  "            AssertCapitalizesTo("AnD"' new string[] { "And" }' true' keep' false' null' 0' CapitalizationFilter.DEFAULT_MAX_WORD_COUNT' CapitalizationFilter.DEFAULT_MAX_TOKEN_LENGTH); " is 171.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestCapitalizationFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestCapitalizationFilter.cs,TestCapitalization,The length of the statement  "            AssertCapitalizesTo("big"' new string[] { "Big" }' true' keep' true' null' 0' CapitalizationFilter.DEFAULT_MAX_WORD_COUNT' CapitalizationFilter.DEFAULT_MAX_TOKEN_LENGTH); " is 170.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestCapitalizationFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestCapitalizationFilter.cs,TestCapitalization,The length of the statement  "            AssertCapitalizesTo("BIG"' new string[] { "BIG" }' true' keep' true' null' 0' CapitalizationFilter.DEFAULT_MAX_WORD_COUNT' CapitalizationFilter.DEFAULT_MAX_TOKEN_LENGTH); " is 170.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestCapitalizationFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestCapitalizationFilter.cs,TestCapitalization,The length of the statement  "            AssertCapitalizesToKeyword("Hello thEre my Name is Ryan"' "Hello there my name is ryan"' true' keep' true' null' 0' CapitalizationFilter.DEFAULT_MAX_WORD_COUNT' CapitalizationFilter.DEFAULT_MAX_TOKEN_LENGTH); " is 208.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestCapitalizationFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestCapitalizationFilter.cs,TestCapitalization,The length of the statement  "            AssertCapitalizesTo("Hello thEre my Name is Ryan"' new string[] { "Hello"' "There"' "My"' "Name"' "Is"' "Ryan" }' false' keep' true' null' 0' CapitalizationFilter.DEFAULT_MAX_WORD_COUNT' CapitalizationFilter.DEFAULT_MAX_TOKEN_LENGTH); " is 234.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestCapitalizationFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestCapitalizationFilter.cs,TestCapitalization,The length of the statement  "            AssertCapitalizesTo("Hello thEre my Name is Ryan"' new string[] { "Hello"' "There"' "my"' "Name"' "is"' "Ryan" }' false' keep' true' null' 3' CapitalizationFilter.DEFAULT_MAX_WORD_COUNT' CapitalizationFilter.DEFAULT_MAX_TOKEN_LENGTH); " is 234.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestCapitalizationFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestCapitalizationFilter.cs,TestCapitalization,The length of the statement  "            AssertCapitalizesTo("McKinley"' new string[] { "Mckinley" }' true' keep' true' null' 0' CapitalizationFilter.DEFAULT_MAX_WORD_COUNT' CapitalizationFilter.DEFAULT_MAX_TOKEN_LENGTH); " is 180.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestCapitalizationFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestCapitalizationFilter.cs,TestCapitalization,The length of the statement  "            AssertCapitalizesTo("McKinley"' new string[] { "McKinley" }' true' keep' true' okPrefix' 0' CapitalizationFilter.DEFAULT_MAX_WORD_COUNT' CapitalizationFilter.DEFAULT_MAX_TOKEN_LENGTH); " is 184.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestCapitalizationFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestCapitalizationFilter.cs,TestCapitalization,The length of the statement  "            AssertCapitalizesTo("1st 2nd third"' new string[] { "1st"' "2nd"' "Third" }' false' keep' false' null' 0' CapitalizationFilter.DEFAULT_MAX_WORD_COUNT' CapitalizationFilter.DEFAULT_MAX_TOKEN_LENGTH); " is 198.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestCapitalizationFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestCapitalizationFilter.cs,TestCapitalization,The length of the statement  "            AssertCapitalizesToKeyword("the The the"' "The The the"' false' keep' true' null' 0' CapitalizationFilter.DEFAULT_MAX_WORD_COUNT' CapitalizationFilter.DEFAULT_MAX_TOKEN_LENGTH); " is 177.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestCapitalizationFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestCapitalizationFilter.cs,AssertCapitalizesTo,The length of the statement  "            CapitalizationFilter filter = new CapitalizationFilter(tokenizer' onlyFirstWord' keep' forceFirstLetter' okPrefix' minWordLength' maxWordCount' maxTokenLength' " is 159.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestCapitalizationFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestCapitalizationFilter.cs,AssertCapitalizesTo,The length of the statement  "            AssertCapitalizesTo(new MockTokenizer(new StringReader(input)' MockTokenizer.WHITESPACE' false)' expected' onlyFirstWord' keep' forceFirstLetter' okPrefix' minWordLength' maxWordCount' maxTokenLength); " is 201.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestCapitalizationFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestCapitalizationFilter.cs,AssertCapitalizesToKeyword,The length of the statement  "            AssertCapitalizesTo(new MockTokenizer(new StringReader(input)' MockTokenizer.KEYWORD' false)' new string[] { expected }' onlyFirstWord' keep' forceFirstLetter' okPrefix' minWordLength' maxWordCount' maxTokenLength); " is 215.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestCapitalizationFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestCapitalizationFilter.cs,TestIllegalArguments,The length of the statement  "                new CapitalizationFilter(new MockTokenizer(new StringReader("accept only valid arguments")' MockTokenizer.WHITESPACE' false)' true' null' true' null' -1' CapitalizationFilter.DEFAULT_MAX_WORD_COUNT' CapitalizationFilter.DEFAULT_MAX_TOKEN_LENGTH); " is 246.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestCapitalizationFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestCapitalizationFilter.cs,TestIllegalArguments1,The length of the statement  "                new CapitalizationFilter(new MockTokenizer(new StringReader("accept only valid arguments")' MockTokenizer.WHITESPACE' false)' true' null' true' null' 0' -10' CapitalizationFilter.DEFAULT_MAX_TOKEN_LENGTH); " is 205.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestCapitalizationFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestCapitalizationFilter.cs,TestIllegalArguments2,The length of the statement  "                new CapitalizationFilter(new MockTokenizer(new StringReader("accept only valid arguments")' MockTokenizer.WHITESPACE' false)' true' null' true' null' 0' CapitalizationFilter.DEFAULT_MAX_WORD_COUNT' -50); " is 203.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestCapitalizationFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestCapitalizationFilterFactory.cs,TestCapitalization2,The length of the statement  "            stream = TokenFilterFactory("Capitalization"' "keep"' "and the it BIG"' "onlyFirstWord"' "true"' "forceFirstLetter"' "true").Create(stream); " is 140.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestCapitalizationFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestCapitalizationFilterFactory.cs,TestCapitalization3,The length of the statement  "            stream = TokenFilterFactory("Capitalization"' "keep"' "and the it BIG"' "onlyFirstWord"' "true"' "forceFirstLetter"' "true").Create(stream); " is 140.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestCapitalizationFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestCapitalizationFilterFactory.cs,TestCapitalization4,The length of the statement  "            stream = TokenFilterFactory("Capitalization"' "keep"' "and the it BIG"' "onlyFirstWord"' "true"' "forceFirstLetter"' "false").Create(stream); " is 141.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestCapitalizationFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestCapitalizationFilterFactory.cs,TestCapitalization5,The length of the statement  "            stream = TokenFilterFactory("Capitalization"' "keep"' "and the it BIG"' "onlyFirstWord"' "true"' "forceFirstLetter"' "true").Create(stream); " is 140.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestCapitalizationFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestCapitalizationFilterFactory.cs,TestCapitalization6,The length of the statement  "            stream = TokenFilterFactory("Capitalization"' "keep"' "and the it BIG"' "onlyFirstWord"' "true"' "forceFirstLetter"' "true").Create(stream); " is 140.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestCapitalizationFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestCapitalizationFilterFactory.cs,TestCapitalization7,The length of the statement  "            stream = TokenFilterFactory("Capitalization"' "keep"' "and the it BIG"' "onlyFirstWord"' "true"' "forceFirstLetter"' "true").Create(stream); " is 140.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestCapitalizationFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestCapitalizationFilterFactory.cs,TestCapitalization8,The length of the statement  "            stream = TokenFilterFactory("Capitalization"' "keep"' "and the it BIG"' "onlyFirstWord"' "false"' "forceFirstLetter"' "true"'  " is 125.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestCapitalizationFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestCapitalizationFilterFactory.cs,TestCapitalization9,The length of the statement  "            stream = TokenFilterFactory("Capitalization"' "keep"' "and the it BIG"' "onlyFirstWord"' "false"' "minWordLength"' "3"' "forceFirstLetter"' "true").Create(stream); " is 163.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestCapitalizationFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestCapitalizationFilterFactory.cs,TestCapitalization10,The length of the statement  "            stream = TokenFilterFactory("Capitalization"' "keep"' "and the it BIG"' "onlyFirstWord"' "false"' "minWordLength"' "3"' "forceFirstLetter"' "true").Create(stream); " is 163.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestCapitalizationFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestCapitalizationFilterFactory.cs,TestCapitalization11,The length of the statement  "            stream = TokenFilterFactory("Capitalization"' "keep"' "and the it BIG"' "onlyFirstWord"' "false"' "minWordLength"' "3"' "okPrefix"' "McK"' "forceFirstLetter"' "true").Create(stream); " is 182.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestCapitalizationFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestCapitalizationFilterFactory.cs,TestCapitalization12,The length of the statement  "            stream = TokenFilterFactory("Capitalization"' "keep"' "and the it BIG"' "onlyFirstWord"' "false"' "minWordLength"' "3"' "okPrefix"' "McK"' "forceFirstLetter"' "false").Create(stream); " is 183.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestCapitalizationFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestCapitalizationFilterFactory.cs,TestCapitalization13,The length of the statement  "            stream = TokenFilterFactory("Capitalization"' "keep"' "and the it BIG"' "onlyFirstWord"' "false"' "minWordLength"' "3"' "okPrefix"' "McK"' "forceFirstLetter"' "true").Create(stream); " is 182.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestCapitalizationFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestCapitalizationFilterFactory.cs,TestKeepIgnoreCase,The length of the statement  "            stream = TokenFilterFactory("Capitalization"' "keep"' "kitten"' "keepIgnoreCase"' "true"' "onlyFirstWord"' "true"' "forceFirstLetter"' "true").Create(stream); " is 158.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestCapitalizationFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestCapitalizationFilterFactory.cs,TestKeepIgnoreCase2,The length of the statement  "            stream = TokenFilterFactory("Capitalization"' "keep"' "kitten"' "keepIgnoreCase"' "true"' "onlyFirstWord"' "true"' "forceFirstLetter"' "false").Create(stream); " is 159.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestCapitalizationFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestCapitalizationFilterFactory.cs,TestKeepIgnoreCase3,The length of the statement  "            stream = TokenFilterFactory("Capitalization"' "keepIgnoreCase"' "true"' "onlyFirstWord"' "true"' "forceFirstLetter"' "false").Create(stream); " is 141.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestCapitalizationFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestCapitalizationFilterFactory.cs,TestInvalidArguments,The length of the statement  "                    TokenFilterFactory("Capitalization"' "keep"' "and the it BIG"' "onlyFirstWord"' "false"' arg' "-3"' "okPrefix"' "McK"' "forceFirstLetter"' "true").Create(stream); " is 162.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestCapitalizationFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestCapitalizationFilterFactory.cs,TestInvalidArguments,The length of the statement  "                    assertTrue(expected.Message.Contains(arg + " must be greater than or equal to zero") || expected.Message.Contains(arg + " must be greater than zero")); " is 151.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestCodepointCountFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestCodepointCountFilter.cs,TestFilterWithPosIncr,The length of the statement  "            TokenStream stream = new MockTokenizer(new StringReader("short toolong evenmuchlongertext a ab toolong foo")' MockTokenizer.WHITESPACE' false); " is 143.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestCodepointCountFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestCodepointCountFilter.cs,TestIllegalArguments,The length of the statement  "                new CodepointCountFilter(TEST_VERSION_CURRENT' new MockTokenizer(new StringReader("accept only valid arguments")' MockTokenizer.WHITESPACE' false)' 4' 1); " is 154.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestCodepointCountFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestCodepointCountFilterFactory.cs,TestInvalidArguments,The length of the statement  "                TokenFilterFactory("CodepointCount"' CodepointCountFilterFactory.MIN_KEY' "5"' CodepointCountFilterFactory.MAX_KEY' "4").Create(stream); " is 136.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestHyphenatedWordsFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestHyphenatedWordsFilter.cs,TestOffsets,The length of the statement  "            AssertTokenStreamContents(ts' new string[] { "abcdef"' "geh"' "12345678-" }' new int[] { 0' 9' 13 }' new int[] { 8' 12' 24 }); " is 126.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestKeepFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestKeepFilterFactory.cs,TestInform,The length of the statement  "            KeepWordFilterFactory factory = (KeepWordFilterFactory)TokenFilterFactory("KeepWord"' "words"' "keep-1.txt"' "ignoreCase"' "true"); " is 131.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestKeepFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestKeepFilterFactory.cs,TestInform,The length of the statement  "            factory = (KeepWordFilterFactory)TokenFilterFactory("KeepWord"' "words"' "keep-1.txt' keep-2.txt"' "ignoreCase"' "true"); " is 121.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestKeepWordFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestKeepWordFilter.cs,TestStopAndGo,The length of the statement  "            stream = new KeepWordFilter(LuceneVersion.LUCENE_43' false' stream' new CharArraySet(TEST_VERSION_CURRENT' words' true)); " is 121.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestKeepWordFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestKeepWordFilter.cs,TestStopAndGo,The length of the statement  "            stream = new KeepWordFilter(LuceneVersion.LUCENE_43' false' stream' new CharArraySet(TEST_VERSION_CURRENT' words' false)); " is 122.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestKeywordMarkerFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestKeywordMarkerFilter.cs,TestSetFilterIncrementToken,The length of the statement  "            AssertTokenStreamContents(new LowerCaseFilterMock(new SetKeywordMarkerFilter(new MockTokenizer(new StringReader("The quIck browN LuceneFox Jumps")' MockTokenizer.WHITESPACE' false)' set))' output); " is 197.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestKeywordMarkerFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestKeywordMarkerFilter.cs,TestSetFilterIncrementToken,The length of the statement  "            AssertTokenStreamContents(new LowerCaseFilterMock(new SetKeywordMarkerFilter(new MockTokenizer(new StringReader("The quIck browN LuceneFox Jumps")' MockTokenizer.WHITESPACE' false)' mixedCaseSet))' output); " is 206.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestKeywordMarkerFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestKeywordMarkerFilter.cs,TestSetFilterIncrementToken,The length of the statement  "            AssertTokenStreamContents(new LowerCaseFilterMock(new SetKeywordMarkerFilter(new MockTokenizer(new StringReader("The quIck browN LuceneFox Jumps")' MockTokenizer.WHITESPACE' false)' set2))' output); " is 198.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestKeywordMarkerFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestKeywordMarkerFilter.cs,TestPatternFilterIncrementToken,The length of the statement  "            AssertTokenStreamContents(new LowerCaseFilterMock(new PatternKeywordMarkerFilter(new MockTokenizer(new StringReader("The quIck browN LuceneFox Jumps")' MockTokenizer.WHITESPACE' false)' new Regex("[a-zA-Z]+[fF]ox"' RegexOptions.Compiled)))' output); " is 249.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestKeywordMarkerFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestKeywordMarkerFilter.cs,TestPatternFilterIncrementToken,The length of the statement  "            AssertTokenStreamContents(new LowerCaseFilterMock(new PatternKeywordMarkerFilter(new MockTokenizer(new StringReader("The quIck browN LuceneFox Jumps")' MockTokenizer.WHITESPACE' false)' new Regex("[a-zA-Z]+[f]ox"' RegexOptions.Compiled)))' output); " is 248.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestKeywordMarkerFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestKeywordMarkerFilter.cs,TestComposition,The length of the statement  "            TokenStream ts = new LowerCaseFilterMock(new SetKeywordMarkerFilter(new SetKeywordMarkerFilter(new MockTokenizer(new StringReader("Dogs Trees Birds Houses")' MockTokenizer.WHITESPACE' false)' new CharArraySet(TEST_VERSION_CURRENT' AsSet("Birds"' "Houses")' false))' new CharArraySet(TEST_VERSION_CURRENT' AsSet("Dogs"' "Trees")' false))); " is 338.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestKeywordMarkerFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestKeywordMarkerFilter.cs,TestComposition,The length of the statement  "            ts = new LowerCaseFilterMock(new PatternKeywordMarkerFilter(new PatternKeywordMarkerFilter(new MockTokenizer(new StringReader("Dogs Trees Birds Houses")' MockTokenizer.WHITESPACE' false)' new Regex("Birds|Houses"' RegexOptions.Compiled))' new Regex("Dogs|Trees"' RegexOptions.Compiled))); " is 288.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestKeywordMarkerFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestKeywordMarkerFilter.cs,TestComposition,The length of the statement  "            ts = new LowerCaseFilterMock(new SetKeywordMarkerFilter(new PatternKeywordMarkerFilter(new MockTokenizer(new StringReader("Dogs Trees Birds Houses")' MockTokenizer.WHITESPACE' false)' new Regex("Birds|Houses"' RegexOptions.Compiled))' new CharArraySet(TEST_VERSION_CURRENT' AsSet("Dogs"' "Trees")' false))); " is 307.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestKeywordMarkerFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestKeywordMarkerFilterFactory.cs,TestKeywords,The length of the statement  "            stream = TokenFilterFactory("KeywordMarker"' TEST_VERSION_CURRENT' new StringMockResourceLoader("cats")' "protected"' "protwords.txt").Create(stream); " is 150.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestKeywordMarkerFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestKeywordMarkerFilterFactory.cs,TestKeywordsMixed,The length of the statement  "            stream = TokenFilterFactory("KeywordMarker"' TEST_VERSION_CURRENT' new StringMockResourceLoader("cats")' "protected"' "protwords.txt"' "pattern"' "birds|Dogs").Create(stream); " is 175.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestKeywordMarkerFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestKeywordMarkerFilterFactory.cs,TestKeywordsCaseInsensitive,The length of the statement  "            stream = TokenFilterFactory("KeywordMarker"' TEST_VERSION_CURRENT' new StringMockResourceLoader("cats")' "protected"' "protwords.txt"' "ignoreCase"' "true").Create(stream); " is 172.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestKeywordMarkerFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestKeywordMarkerFilterFactory.cs,TestKeywordsCaseInsensitiveMixed,The length of the statement  "            stream = TokenFilterFactory("KeywordMarker"' TEST_VERSION_CURRENT' new StringMockResourceLoader("cats")' "protected"' "protwords.txt"' "pattern"' "birds"' "ignoreCase"' "true").Create(stream); " is 192.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestKeywordRepeatFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestKeywordRepeatFilter.cs,TestBasic,The length of the statement  "            TokenStream ts = new RemoveDuplicatesTokenFilter(new SnowballFilter(new KeywordRepeatFilter(new MockTokenizer(new StringReader("the birds are flying")' MockTokenizer.WHITESPACE' false))' "English")); " is 199.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestKeywordRepeatFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestKeywordRepeatFilter.cs,TestBasic,The length of the statement  "            AssertTokenStreamContents(ts' new string[] { "the"' "birds"' "bird"' "are"' "flying"' "fli" }' new int[] { 1' 1' 0' 1' 1' 0 }); " is 127.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestKeywordRepeatFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestKeywordRepeatFilter.cs,TestComposition,The length of the statement  "            TokenStream ts = new RemoveDuplicatesTokenFilter(new SnowballFilter(new KeywordRepeatFilter(new KeywordRepeatFilter(new MockTokenizer(new StringReader("the birds are flying")' MockTokenizer.WHITESPACE' false)))' "English")); " is 224.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestKeywordRepeatFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestKeywordRepeatFilter.cs,TestComposition,The length of the statement  "            AssertTokenStreamContents(ts' new string[] { "the"' "birds"' "bird"' "are"' "flying"' "fli" }' new int[] { 1' 1' 0' 1' 1' 0 }); " is 127.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestLengthFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLengthFilter.cs,TestFilterNoPosIncr,The length of the statement  "            TokenStream stream = new MockTokenizer(new StringReader("short toolong evenmuchlongertext a ab toolong foo")' MockTokenizer.WHITESPACE' false); " is 143.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestLengthFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLengthFilter.cs,TestFilterWithPosIncr,The length of the statement  "            TokenStream stream = new MockTokenizer(new StringReader("short toolong evenmuchlongertext a ab toolong foo")' MockTokenizer.WHITESPACE' false); " is 143.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestLengthFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLengthFilter.cs,TestIllegalArguments,The length of the statement  "            Assert.Throws<ArgumentOutOfRangeException>(() => new LengthFilter(TEST_VERSION_CURRENT' new MockTokenizer(new StringReader("accept only valid arguments"))' -4' -1)); " is 165.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestLengthFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLengthFilterFactory.cs,Test,The length of the statement  "                new ClasspathResourceLoader(this.GetType())' "min"' "4"' "max"' "10"' "enablePositionIncrements"' "false").Create(stream); " is 122.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestLengthFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLengthFilterFactory.cs,TestPositionIncrements,The length of the statement  "            stream = TokenFilterFactory("Length"' LengthFilterFactory.MIN_KEY' "4"' LengthFilterFactory.MAX_KEY' "10").Create(stream); " is 122.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestLengthFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLengthFilterFactory.cs,TestBogusArguments,The length of the statement  "                TokenFilterFactory("Length"' LengthFilterFactory.MIN_KEY' "4"' LengthFilterFactory.MAX_KEY' "5"' "bogusArg"' "bogusValue"); " is 123.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestLimitTokenCountAnalyzer_,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLimitTokenCountAnalyzer.cs,TestLimitTokenCountAnalyzer,The length of the statement  "                // dont use assertAnalyzesTo here' as the end offset is not the end of the string (unless consumeAll is true' in which case its correct)! " is 137.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestLimitTokenCountAnalyzer_,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLimitTokenCountAnalyzer.cs,TestLimitTokenCountAnalyzer,The length of the statement  "                AssertTokenStreamContents(a.GetTokenStream("dummy"' "1  2     3  4  5")' new string[] { "1"' "2" }' new int[] { 0' 3 }' new int[] { 1' 4 }' consumeAll ? (int?)16 : null); " is 170.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestLimitTokenCountAnalyzer_,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLimitTokenCountAnalyzer.cs,TestLimitTokenCountAnalyzer,The length of the statement  "                AssertTokenStreamContents(a.GetTokenStream("dummy"' "1 2 3 4 5")' new string[] { "1"' "2" }' new int[] { 0' 2 }' new int[] { 1' 3 }' consumeAll ? (int?)9 : null); " is 162.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestLimitTokenCountAnalyzer_,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLimitTokenCountAnalyzer.cs,TestLimitTokenCountAnalyzer,The length of the statement  "                AssertTokenStreamContents(a.GetTokenStream("dummy"' "1  ")' new string[] { "1" }' new int[] { 0 }' new int[] { 1 }' (consumeAll ? (int?)3 : null)); " is 147.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestLimitTokenCountAnalyzer_,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLimitTokenCountAnalyzer.cs,TestLimitTokenCountAnalyzer,The length of the statement  "                AssertTokenStreamContents(a.GetTokenStream("dummy"' "1  2  ")' new string[] { "1"' "2" }' new int[] { 0' 3 }' new int[] { 1' 4 }' consumeAll ? (int?)6 : null); " is 159.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestLimitTokenCountFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLimitTokenCountFilter.cs,TestIllegalArguments,The length of the statement  "            Assert.Throws<ArgumentOutOfRangeException>(() => new LimitTokenCountFilter(new MockTokenizer(new StringReader("A1 B2 C3 D4 E5 F6")' MockTokenizer.WHITESPACE' false)' -1)); " is 171.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestLimitTokenCountFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLimitTokenCountFilterFactory.cs,Test,The length of the statement  "                stream = TokenFilterFactory("LimitTokenCount"' LimitTokenCountFilterFactory.MAX_TOKEN_COUNT_KEY' "3"' LimitTokenCountFilterFactory.CONSUME_ALL_TOKENS_KEY' Convert.ToString(consumeAll)).Create(stream); " is 200.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestLimitTokenCountFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLimitTokenCountFilterFactory.cs,TestRequired,The length of the statement  "                assertTrue("exception doesn't mention param: " + e.Message' 0 < e.Message.IndexOf(LimitTokenCountFilterFactory.MAX_TOKEN_COUNT_KEY' StringComparison.Ordinal)); " is 159.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestLimitTokenPositionFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLimitTokenPositionFilter.cs,TestMaxPosition2,The length of the statement  "                // don't use assertAnalyzesTo here' as the end offset is not the end of the string (unless consumeAll is true' in which case its correct)! " is 138.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestLimitTokenPositionFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLimitTokenPositionFilter.cs,TestMaxPosition2,The length of the statement  "                AssertTokenStreamContents(a.GetTokenStream("dummy"' "1  2     3  4  5")' new string[] { "1"' "2" }' new int[] { 0' 3 }' new int[] { 1' 4 }' consumeAll ? 16 : (int?)null); " is 170.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestLimitTokenPositionFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLimitTokenPositionFilter.cs,TestMaxPosition2,The length of the statement  "                AssertTokenStreamContents(a.GetTokenStream("dummy"' new StringReader("1 2 3 4 5"))' new string[] { "1"' "2" }' new int[] { 0' 2 }' new int[] { 1' 3 }' consumeAll ? 9 : (int?)null); " is 180.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestLimitTokenPositionFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLimitTokenPositionFilter.cs,TestMaxPosition2,The length of the statement  "                AssertTokenStreamContents(a.GetTokenStream("dummy"' "1  ")' new string[] { "1" }' new int[] { 0 }' new int[] { 1 }' consumeAll ? 3 : (int?)null); " is 145.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestLimitTokenPositionFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLimitTokenPositionFilter.cs,TestMaxPosition2,The length of the statement  "                AssertTokenStreamContents(a.GetTokenStream("dummy"' "1  2  ")' new string[] { "1"' "2" }' new int[] { 0' 3 }' new int[] { 1' 4 }' consumeAll ? 6 : (int?)null); " is 159.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestLimitTokenPositionFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLimitTokenPositionFilter.cs,TestMaxPosition3WithSynomyms,The length of the statement  "                MockTokenizer tokenizer = new MockTokenizer(new StringReader("one two three four five")' MockTokenizer.WHITESPACE' false); " is 122.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestLimitTokenPositionFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLimitTokenPositionFilter.cs,TestMaxPosition3WithSynomyms,The length of the statement  "                // "only"' the 4th word of multi-word synonym "and indubitably single only" is not emitted' since its position is greater than 3. " is 129.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestLimitTokenPositionFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLimitTokenPositionFilter.cs,TestMaxPosition3WithSynomyms,The length of the statement  "                AssertTokenStreamContents(stream' new string[] { "one"' "first"' "alpha"' "beguine"' "and"' "two"' "indubitably"' "dopple"' "three"' "single"' "ganger" }' new int[] { 1' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0 }); " is 202.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestLimitTokenPositionFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLimitTokenPositionFilter.cs,TestIllegalArguments,The length of the statement  "            Assert.Throws<ArgumentException>(() => new LimitTokenPositionFilter(new MockTokenizer(new StringReader("one two three four five"))' 0)); " is 136.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestLimitTokenPositionFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLimitTokenPositionFilterFactory.cs,TestMaxPosition1,The length of the statement  "                stream = TokenFilterFactory("LimitTokenPosition"' LimitTokenPositionFilterFactory.MAX_TOKEN_POSITION_KEY' "1"' LimitTokenPositionFilterFactory.CONSUME_ALL_TOKENS_KEY' Convert.ToString(consumeAll)).Create(stream); " is 212.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestLimitTokenPositionFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLimitTokenPositionFilterFactory.cs,TestMissingParam,The length of the statement  "                assertTrue("exception doesn't mention param: " + e.Message' 0 < e.Message.IndexOf(LimitTokenPositionFilterFactory.MAX_TOKEN_POSITION_KEY' StringComparison.Ordinal)); " is 165.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestLimitTokenPositionFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLimitTokenPositionFilterFactory.cs,TestMaxPosition1WithShingles,The length of the statement  "                stream = TokenFilterFactory("Shingle"' "minShingleSize"' "2"' "maxShingleSize"' "3"' "outputUnigrams"' "true").Create(stream); " is 126.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestLimitTokenPositionFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLimitTokenPositionFilterFactory.cs,TestMaxPosition1WithShingles,The length of the statement  "                stream = TokenFilterFactory("LimitTokenPosition"' LimitTokenPositionFilterFactory.MAX_TOKEN_POSITION_KEY' "1"' LimitTokenPositionFilterFactory.CONSUME_ALL_TOKENS_KEY' Convert.ToString(consumeAll)).Create(stream); " is 212.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestOffsets,The length of the statement  "            TokenFilter wdf = new Lucene47WordDelimiterFilter(new SingleTokenTokenStream(new Token("foo-bar"' 5' 12))' WordDelimiterIterator.DEFAULT_WORD_DELIM_TABLE' flags' null); " is 168.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestOffsets,The length of the statement  "            AssertTokenStreamContents(wdf' new string[] { "foo"' "bar"' "foobar" }' new int[] { 5' 9' 5 }' new int[] { 8' 12' 12 }' null' null' null' null' false); " is 151.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestOffsets,The length of the statement  "            wdf = new Lucene47WordDelimiterFilter(new SingleTokenTokenStream(new Token("foo-bar"' 5' 6))' WordDelimiterIterator.DEFAULT_WORD_DELIM_TABLE' flags' null); " is 155.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestOffsets,The length of the statement  "            AssertTokenStreamContents(wdf' new string[] { "foo"' "bar"' "foobar" }' new int[] { 5' 5' 5 }' new int[] { 6' 6' 6 }' null' null' null' null' false); " is 149.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestOffsetChange,The length of the statement  "            TokenFilter wdf = new Lucene47WordDelimiterFilter(new SingleTokenTokenStream(new Token("übelkeit)"' 7' 16))' WordDelimiterIterator.DEFAULT_WORD_DELIM_TABLE' flags' null); " is 170.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestOffsetChange2,The length of the statement  "            TokenFilter wdf = new Lucene47WordDelimiterFilter(new SingleTokenTokenStream(new Token("(übelkeit"' 7' 17))' WordDelimiterIterator.DEFAULT_WORD_DELIM_TABLE' flags' null); " is 170.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestOffsetChange3,The length of the statement  "            TokenFilter wdf = new Lucene47WordDelimiterFilter(new SingleTokenTokenStream(new Token("(übelkeit"' 7' 16))' WordDelimiterIterator.DEFAULT_WORD_DELIM_TABLE' flags' null); " is 170.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestOffsetChange4,The length of the statement  "            TokenFilter wdf = new Lucene47WordDelimiterFilter(new SingleTokenTokenStream(new Token("(foo'bar)"' 7' 16))' WordDelimiterIterator.DEFAULT_WORD_DELIM_TABLE' flags' null); " is 170.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestOffsetChange4,The length of the statement  "            AssertTokenStreamContents(wdf' new string[] { "foo"' "bar"' "foobar" }' new int[] { 8' 12' 8 }' new int[] { 11' 15' 15 }' null' null' null' null' false); " is 153.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,DoSplit,The length of the statement  "            TokenFilter wdf = new Lucene47WordDelimiterFilter(tokenizer' WordDelimiterIterator.DEFAULT_WORD_DELIM_TABLE' flags' null); " is 122.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestPositionIncrements,The length of the statement  "            AssertAnalyzesTo(a' "LUCENE / SOLR"' new string[] { "LUCENE"' "SOLR" }' new int[] { 0' 9 }' new int[] { 6' 13 }' null' new int[] { 1' 1 }' null' false); " is 152.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestPositionIncrements,The length of the statement  "            AssertAnalyzesTo(a' "LUCENE / solR"' new string[] { "LUCENE"' "sol"' "R"' "solR" }' new int[] { 0' 9' 12' 9 }' new int[] { 6' 12' 13' 13 }' null' new int[] { 1' 1' 1' 0 }' null' false); " is 185.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestPositionIncrements,The length of the statement  "            AssertAnalyzesTo(a' "LUCENE / NUTCH SOLR"' new string[] { "LUCENE"' "NUTCH"' "SOLR" }' new int[] { 0' 9' 15 }' new int[] { 6' 14' 19 }' null' new int[] { 1' 1' 1 }' null' false); " is 178.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestPositionIncrements,The length of the statement  "            AssertAnalyzesTo(a2' "LUCENE largegap SOLR"' new string[] { "LUCENE"' "largegap"' "SOLR" }' new int[] { 0' 7' 16 }' new int[] { 6' 15' 20 }' null' new int[] { 1' 10' 1 }' null' false); " is 184.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestPositionIncrements,The length of the statement  "            AssertAnalyzesTo(a2' "LUCENE / SOLR"' new string[] { "LUCENE"' "SOLR" }' new int[] { 0' 9 }' new int[] { 6' 13 }' null' new int[] { 1' 11 }' null' false); " is 154.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestPositionIncrements,The length of the statement  "            AssertAnalyzesTo(a2' "LUCENE / solR"' new string[] { "LUCENE"' "sol"' "R"' "solR" }' new int[] { 0' 9' 12' 9 }' new int[] { 6' 12' 13' 13 }' null' new int[] { 1' 11' 1' 0 }' null' false); " is 187.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestPositionIncrements,The length of the statement  "            AssertAnalyzesTo(a2' "LUCENE / NUTCH SOLR"' new string[] { "LUCENE"' "NUTCH"' "SOLR" }' new int[] { 0' 9' 15 }' new int[] { 6' 14' 19 }' null' new int[] { 1' 11' 1 }' null' false); " is 180.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestPositionIncrements,The length of the statement  "            AssertAnalyzesTo(a3' "lucene.solr"' new string[] { "lucene"' "solr"' "lucenesolr" }' new int[] { 0' 7' 0 }' new int[] { 6' 11' 11 }' null' new int[] { 1' 1' 0 }' null' false); " is 175.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestPositionIncrements,The length of the statement  "            AssertAnalyzesTo(a3' "the lucene.solr"' new string[] { "lucene"' "solr"' "lucenesolr" }' new int[] { 4' 11' 4 }' new int[] { 10' 15' 15 }' null' new int[] { 2' 1' 0 }' null' false); " is 181.
Long Statement,Lucene.Net.Analysis.Miscellaneous,LargePosIncTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,IncrementToken,The length of the statement  "                    if (termAtt.ToString().Equals("largegap"' StringComparison.Ordinal) || termAtt.ToString().Equals("/"' StringComparison.Ordinal)) " is 128.
Long Statement,Lucene.Net.Analysis.Miscellaneous,LargePosIncTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,IncrementToken,The length of the statement  "                    if (termAtt.ToString().Equals("largegap"' StringComparison.Ordinal) || termAtt.ToString().Equals("/"' StringComparison.Ordinal)) " is 128.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestPerFieldAnalyzerWrapper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestPerFieldAnalyzerWrapper.cs,TestPerField,The length of the statement  "            PerFieldAnalyzerWrapper analyzer = new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT)' analyzerPerField); " is 127.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestPerFieldAnalyzerWrapper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestPerFieldAnalyzerWrapper.cs,TestLUCENENET615,The length of the statement  "            var pf = new PerFieldAnalyzerWrapper(english' new Lucene.Net.Support.HashMap<string' Analyzer>() { { "foo"' whitespace } }); " is 124.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestPerFieldAnalyzerWrapper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestPerFieldAnalyzerWrapper.cs,TestLUCENENET615,The length of the statement  "            Assert.DoesNotThrow(() => pf.GetTokenStream(null' "test")' "GetTokenStream should not throw NullReferenceException with a null key"); " is 133.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestPrefixAndSuffixAwareTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestPrefixAndSuffixAwareTokenFilter.cs,Test,The length of the statement  "            PrefixAndSuffixAwareTokenFilter ts = new PrefixAndSuffixAwareTokenFilter(new SingleTokenTokenStream(CreateToken("^"' 0' 0))' new MockTokenizer(new StringReader("hello world")' MockTokenizer.WHITESPACE' false)' new SingleTokenTokenStream(CreateToken("$"' 0' 0))); " is 262.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestPrefixAndSuffixAwareTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestPrefixAndSuffixAwareTokenFilter.cs,Test,The length of the statement  "            AssertTokenStreamContents(ts' new string[] { "^"' "hello"' "world"' "$" }' new int[] { 0' 0' 6' 11 }' new int[] { 0' 5' 11' 11 }); " is 130.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestPrefixAwareTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestPrefixAwareTokenFilter.cs,Test,The length of the statement  "            ts = new PrefixAwareTokenFilter(new SingleTokenTokenStream(CreateToken("a"' 0' 1))' new SingleTokenTokenStream(CreateToken("b"' 0' 1))); " is 136.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestPrefixAwareTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestPrefixAwareTokenFilter.cs,Test,The length of the statement  "            ts = new PrefixAwareTokenFilter(new SingleTokenTokenStream(CreateToken("^"' 0' 0))' new MockTokenizer(new StringReader("hello world")' MockTokenizer.WHITESPACE' false)); " is 169.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestPrefixAwareTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestPrefixAwareTokenFilter.cs,Test,The length of the statement  "            AssertTokenStreamContents(ts' new string[] { "^"' "hello"' "world"' "$" }' new int[] { 0' 0' 6' 11 }' new int[] { 0' 5' 11' 11 }); " is 130.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestRemoveDuplicatesTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestRemoveDuplicatesTokenFilter.cs,TestNoDups,The length of the statement  "            TestDups("A B B C D E"' Tok(1' "A"' 0' 4)' Tok(1' "B"' 5' 10)' Tok(1' "B"' 11' 15)' Tok(1' "C"' 16' 20)' Tok(0' "D"' 16' 20)' Tok(1' "E"' 21' 25)); " is 147.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestRemoveDuplicatesTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestRemoveDuplicatesTokenFilter.cs,TestSimpleDups,The length of the statement  "            TestDups("A B C D E"' Tok(1' "A"' 0' 4)' Tok(1' "B"' 5' 10)' Tok(0' "B"' 11' 15)' Tok(1' "C"' 16' 20)' Tok(0' "D"' 16' 20)' Tok(1' "E"' 21' 25)); " is 145.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestRemoveDuplicatesTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestRemoveDuplicatesTokenFilter.cs,TestComplexDups,The length of the statement  "            TestDups("A B C D E F G H I J K"' Tok(1' "A")' Tok(1' "B")' Tok(0' "B")' Tok(1' "C")' Tok(1' "D")' Tok(0' "D")' Tok(0' "D")' Tok(1' "E")' Tok(1' "F")' Tok(0' "F")' Tok(1' "G")' Tok(0' "H")' Tok(0' "H")' Tok(1' "I")' Tok(1' "J")' Tok(0' "K")' Tok(0' "J")); " is 255.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestRemoveDuplicatesTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestRemoveDuplicatesTokenFilter.cs,Add,The length of the statement  "            b.Add(new CharsRef(Regex.Replace(input' " +"' "\u0000"))' new CharsRef(Regex.Replace(output' " +"' "\u0000"))' keepOrig); " is 121.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestRemoveDuplicatesTokenFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestRemoveDuplicatesTokenFilterFactory.cs,TestSimpleDups,The length of the statement  "            TestDups("A B C D E"' Tok(1' "A"' 0' 4)' Tok(1' "B"' 5' 10)' Tok(0' "B"' 11' 15)' Tok(1' "C"' 16' 20)' Tok(0' "D"' 16' 20)' Tok(1' "E"' 21' 25)); " is 145.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestStemmerOverrideFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestStemmerOverrideFilterFactory.cs,TestKeywords,The length of the statement  "            stream = TokenFilterFactory("StemmerOverride"' TEST_VERSION_CURRENT' new StringMockResourceLoader("dogs\tcat")' "dictionary"' "stemdict.txt").Create(stream); " is 157.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestStemmerOverrideFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestStemmerOverrideFilterFactory.cs,TestKeywordsCaseInsensitive,The length of the statement  "            stream = TokenFilterFactory("StemmerOverride"' TEST_VERSION_CURRENT' new StringMockResourceLoader("dogs\tcat")' "dictionary"' "stemdict.txt"' "ignoreCase"' "true").Create(stream); " is 179.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestTrimFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestTrimFilter.cs,TestTrim,The length of the statement  "            TokenStream ts = new IterTokenStream(new Token(a' 0' a.Length' 1' 5)' new Token(b' 0' b.Length' 6' 10)' new Token(ccc' 0' ccc.Length' 11' 15)' new Token(whitespace' 0' whitespace.Length' 16' 20)' new Token(empty' 0' empty.Length' 21' 21)); " is 239.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestTrimFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestTrimFilter.cs,TestTrim,The length of the statement  "            ts = new IterTokenStream(new Token(a' 0' a.Length' 0' 2)' new Token(b' 0' b.Length' 0' 2)' new Token(ccc' 0' ccc.Length' 0' 3)' new Token(whitespace' 0' whitespace.Length' 0' 3)); " is 179.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestTrimFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestTrimFilter.cs,TestTrim,The length of the statement  "            AssertTokenStreamContents(ts' new string[] { "a"' "b"' "c"' "" }' new int[] { 1' 0' 1' 3 }' new int[] { 2' 1' 2' 3 }' null' new int[] { 1' 1' 1' 1 }' null' null' false); " is 169.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestTruncateTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestTruncateTokenFilter.cs,TestTruncating,The length of the statement  "            TokenStream stream = new MockTokenizer(new StringReader("abcdefg 1234567 ABCDEFG abcde abc 12345 123")' MockTokenizer.WHITESPACE' false); " is 137.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestTruncateTokenFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestTruncateTokenFilterFactory.cs,TestNonPositivePrefixLengthArgument,The length of the statement  "                assertTrue(expected.Message.Contains(TruncateTokenFilterFactory.PREFIX_LENGTH_KEY + " parameter must be a positive number: -5")); " is 129.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestOffsets,The length of the statement  "            WordDelimiterFilter wdf = new WordDelimiterFilter(TEST_VERSION_CURRENT' new SingleTokenTokenStream(new Token("foo-bar"' 5' 12))' WordDelimiterIterator.DEFAULT_WORD_DELIM_TABLE' flags' null); " is 190.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestOffsets,The length of the statement  "            AssertTokenStreamContents(wdf' new string[] { "foo"' "foobar"' "bar" }' new int[] { 5' 5' 9 }' new int[] { 8' 12' 12 }); " is 120.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestOffsets,The length of the statement  "            wdf = new WordDelimiterFilter(TEST_VERSION_CURRENT' new SingleTokenTokenStream(new Token("foo-bar"' 5' 6))' WordDelimiterIterator.DEFAULT_WORD_DELIM_TABLE' flags' null); " is 169.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestOffsetChange,The length of the statement  "            WordDelimiterFilter wdf = new WordDelimiterFilter(TEST_VERSION_CURRENT' new SingleTokenTokenStream(new Token("übelkeit)"' 7' 16))' WordDelimiterIterator.DEFAULT_WORD_DELIM_TABLE' flags' null); " is 192.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestOffsetChange2,The length of the statement  "            WordDelimiterFilter wdf = new WordDelimiterFilter(TEST_VERSION_CURRENT' new SingleTokenTokenStream(new Token("(übelkeit"' 7' 17))' WordDelimiterIterator.DEFAULT_WORD_DELIM_TABLE' flags' null); " is 192.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestOffsetChange3,The length of the statement  "            WordDelimiterFilter wdf = new WordDelimiterFilter(TEST_VERSION_CURRENT' new SingleTokenTokenStream(new Token("(übelkeit"' 7' 16))' WordDelimiterIterator.DEFAULT_WORD_DELIM_TABLE' flags' null); " is 192.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestOffsetChange4,The length of the statement  "            WordDelimiterFilter wdf = new WordDelimiterFilter(TEST_VERSION_CURRENT' new SingleTokenTokenStream(new Token("(foo'bar)"' 7' 16))' WordDelimiterIterator.DEFAULT_WORD_DELIM_TABLE' flags' null); " is 192.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestOffsetChange4,The length of the statement  "            AssertTokenStreamContents(wdf' new string[] { "foo"' "foobar"' "bar" }' new int[] { 8' 8' 12 }' new int[] { 11' 15' 15 }); " is 122.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,doSplit,The length of the statement  "            WordDelimiterFilter wdf = new WordDelimiterFilter(TEST_VERSION_CURRENT' new MockTokenizer(new StringReader(input)' MockTokenizer.KEYWORD' false)' WordDelimiterIterator.DEFAULT_WORD_DELIM_TABLE' flags' null); " is 207.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,doSplitPossessive,The length of the statement  "            WordDelimiterFilter wdf = new WordDelimiterFilter(TEST_VERSION_CURRENT' new MockTokenizer(new StringReader(input)' MockTokenizer.KEYWORD' false)' flags' null); " is 159.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestPositionIncrements,The length of the statement  "            AssertAnalyzesTo(a' "LUCENE / SOLR"' new string[] { "LUCENE"' "SOLR" }' new int[] { 0' 9 }' new int[] { 6' 13 }' new int[] { 1' 1 }); " is 133.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestPositionIncrements,The length of the statement  "            AssertAnalyzesTo(a' "LUCENE / solR"' new string[] { "LUCENE"' "sol"' "solR"' "R" }' new int[] { 0' 9' 9' 12 }' new int[] { 6' 12' 13' 13 }' new int[] { 1' 1' 0' 1 }); " is 166.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestPositionIncrements,The length of the statement  "            AssertAnalyzesTo(a' "LUCENE / NUTCH SOLR"' new string[] { "LUCENE"' "NUTCH"' "SOLR" }' new int[] { 0' 9' 15 }' new int[] { 6' 14' 19 }' new int[] { 1' 1' 1 }); " is 159.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestPositionIncrements,The length of the statement  "            AssertAnalyzesTo(a2' "LUCENE largegap SOLR"' new string[] { "LUCENE"' "largegap"' "SOLR" }' new int[] { 0' 7' 16 }' new int[] { 6' 15' 20 }' new int[] { 1' 10' 1 }); " is 165.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestPositionIncrements,The length of the statement  "            AssertAnalyzesTo(a2' "LUCENE / SOLR"' new string[] { "LUCENE"' "SOLR" }' new int[] { 0' 9 }' new int[] { 6' 13 }' new int[] { 1' 11 }); " is 135.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestPositionIncrements,The length of the statement  "            AssertAnalyzesTo(a2' "LUCENE / solR"' new string[] { "LUCENE"' "sol"' "solR"' "R" }' new int[] { 0' 9' 9' 12 }' new int[] { 6' 12' 13' 13 }' new int[] { 1' 11' 0' 1 }); " is 168.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestPositionIncrements,The length of the statement  "            AssertAnalyzesTo(a2' "LUCENE / NUTCH SOLR"' new string[] { "LUCENE"' "NUTCH"' "SOLR" }' new int[] { 0' 9' 15 }' new int[] { 6' 14' 19 }' new int[] { 1' 11' 1 }); " is 161.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestPositionIncrements,The length of the statement  "            AssertAnalyzesTo(a3' "lucene.solr"' new string[] { "lucene"' "lucenesolr"' "solr" }' new int[] { 0' 0' 7 }' new int[] { 6' 11' 11 }' new int[] { 1' 0' 1 }); " is 156.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestPositionIncrements,The length of the statement  "            AssertAnalyzesTo(a3' "the lucene.solr"' new string[] { "lucene"' "lucenesolr"' "solr" }' new int[] { 4' 4' 11 }' new int[] { 10' 15' 15 }' new int[] { 2' 0' 1 }); " is 162.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestLotsOfConcatenating,The length of the statement  "            AssertAnalyzesTo(a' "abc-def-123-456"' new string[] { "abc"' "abcdef"' "abcdef123456"' "def"' "123"' "123456"' "456" }' new int[] { 0' 0' 0' 4' 8' 8' 12 }' new int[] { 3' 7' 15' 7' 11' 15' 15 }' new int[] { 1' 0' 0' 1' 1' 0' 1 }); " is 230.
Long Statement,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestLotsOfConcatenating2,The length of the statement  "            AssertAnalyzesTo(a' "abc-def-123-456"' new string[] { "abc-def-123-456"' "abc"' "abcdef"' "abcdef123456"' "def"' "123"' "123456"' "456" }' new int[] { 0' 0' 0' 0' 4' 8' 8' 12 }' new int[] { 15' 3' 7' 15' 7' 11' 15' 15 }' new int[] { 1' 0' 0' 0' 1' 1' 0' 1 }); " is 259.
Long Statement,Lucene.Net.Analysis.Miscellaneous,AnalyzerAnonymousInnerClassHelper6,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,CreateComponents,The length of the statement  "                return new TokenStreamComponents(tokenizer' new WordDelimiterFilter(TEST_VERSION_CURRENT' tokenizer' flags' protectedWords)); " is 125.
Long Statement,Lucene.Net.Analysis.Miscellaneous,AnalyzerAnonymousInnerClassHelper7,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,CreateComponents,The length of the statement  "                return new TokenStreamComponents(tokenizer' new WordDelimiterFilter(TEST_VERSION_CURRENT' tokenizer' flags' protectedWords)); " is 125.
Long Statement,Lucene.Net.Analysis.Miscellaneous,AnalyzerAnonymousInnerClassHelper8,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,CreateComponents,The length of the statement  "                return new TokenStreamComponents(tokenizer' new WordDelimiterFilter(TEST_VERSION_CURRENT' tokenizer' flags' protectedWords)); " is 125.
Long Statement,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestFrontUnigram,The length of the statement  "            EdgeNGramTokenFilter tokenizer = new EdgeNGramTokenFilter(TEST_VERSION_CURRENT' input' EdgeNGramTokenFilter.Side.FRONT' 1' 1); " is 126.
Long Statement,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestBackUnigram,The length of the statement  "            EdgeNGramTokenFilter tokenizer = new EdgeNGramTokenFilter(LuceneVersion.LUCENE_43' input' EdgeNGramTokenFilter.Side.BACK' 1' 1); " is 128.
Long Statement,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestOversizedNgrams,The length of the statement  "            EdgeNGramTokenFilter tokenizer = new EdgeNGramTokenFilter(TEST_VERSION_CURRENT' input' EdgeNGramTokenFilter.Side.FRONT' 6' 6); " is 126.
Long Statement,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestFrontRangeOfNgrams,The length of the statement  "            EdgeNGramTokenFilter tokenizer = new EdgeNGramTokenFilter(TEST_VERSION_CURRENT' input' EdgeNGramTokenFilter.Side.FRONT' 1' 3); " is 126.
Long Statement,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestBackRangeOfNgrams,The length of the statement  "            EdgeNGramTokenFilter tokenizer = new EdgeNGramTokenFilter(LuceneVersion.LUCENE_43' input' EdgeNGramTokenFilter.Side.BACK' 1' 3); " is 128.
Long Statement,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestBackRangeOfNgrams,The length of the statement  "            AssertTokenStreamContents(tokenizer' new string[] { "e"' "de"' "cde" }' new int[] { 4' 3' 2 }' new int[] { 5' 5' 5 }' null' null' null' null' false); " is 149.
Long Statement,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestFilterPositions,The length of the statement  "            EdgeNGramTokenFilter tokenizer = new EdgeNGramTokenFilter(TEST_VERSION_CURRENT' ts' EdgeNGramTokenFilter.Side.FRONT' 1' 3); " is 123.
Long Statement,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestFilterPositions,The length of the statement  "            AssertTokenStreamContents(tokenizer' new string[] { "a"' "ab"' "abc"' "v"' "vw"' "vwx" }' new int[] { 0' 0' 0' 6' 6' 6 }' new int[] { 5' 5' 5' 11' 11' 11 }' null' new int[] { 1' 0' 0' 1' 0' 0 }' null' null' false); " is 214.
Long Statement,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestFirstTokenPositionIncrement,The length of the statement  "            EdgeNGramTokenFilter filter = new EdgeNGramTokenFilter(TEST_VERSION_CURRENT' ts' EdgeNGramTokenFilter.Side.FRONT' 2' 3); " is 120.
Long Statement,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestFirstTokenPositionIncrement,The length of the statement  "            AssertTokenStreamContents(filter' new string[] { "ab"' "abc" }' new int[] { 2' 2 }' new int[] { 5' 5 }' new int[] { 1' 0 }); " is 124.
Long Statement,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestSmallTokenInStream,The length of the statement  "            EdgeNGramTokenFilter tokenizer = new EdgeNGramTokenFilter(TEST_VERSION_CURRENT' input' EdgeNGramTokenFilter.Side.FRONT' 3' 3); " is 126.
Long Statement,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestReset,The length of the statement  "            EdgeNGramTokenFilter filter = new EdgeNGramTokenFilter(TEST_VERSION_CURRENT' tokenizer' EdgeNGramTokenFilter.Side.FRONT' 1' 3); " is 127.
Long Statement,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestInvalidOffsets,The length of the statement  "            AssertAnalyzesTo(analyzer' "mosfellsbær"' new string[] { "mo"' "mos"' "mosf"' "mosfe"' "mosfel"' "mosfell"' "mosfells"' "mosfellsb"' "mosfellsba"' "mosfellsbae"' "mosfellsbaer" }' new int[] { 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' new int[] { 11' 11' 11' 11' 11' 11' 11' 11' 11' 11' 11 }); " is 285.
Long Statement,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestGraphs,The length of the statement  "            AssertTokenStreamContents(tk' new string[] { "efgh ij"' "ij klmn"' "ij klmno"' "klmno p" }' new int[] { 6' 11' 11' 14 }' new int[] { 13' 19' 19' 21 }' new int[] { 3' 1' 0' 1 }' new int[] { 2' 2' 2' 2 }' 23); " is 207.
Long Statement,Lucene.Net.Analysis.NGram,AnalyzerAnonymousInnerClassHelper2,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,CreateComponents,The length of the statement  "                Tokenizer tokenizer = new Lucene43EdgeNGramTokenizer(Version.LUCENE_43' reader' Lucene43EdgeNGramTokenizer.Side.BACK' 2' 4); " is 124.
Long Statement,Lucene.Net.Analysis.NGram,AnalyzerAnonymousInnerClassHelper3,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,CreateComponents,The length of the statement  "                return new TokenStreamComponents(tokenizer' new EdgeNGramTokenFilter(LuceneVersion.LUCENE_43' tokenizer' EdgeNGramTokenFilter.Side.BACK' 2' 4)); " is 144.
Long Statement,Lucene.Net.Analysis.NGram,AnalyzerAnonymousInnerClassHelper4,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,CreateComponents,The length of the statement  "                return new TokenStreamComponents(tokenizer' new EdgeNGramTokenFilter(TEST_VERSION_CURRENT' tokenizer' EdgeNGramTokenFilter.Side.FRONT' 2' 15)); " is 143.
Long Statement,Lucene.Net.Analysis.NGram,AnalyzerAnonymousInnerClassHelper5,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,CreateComponents,The length of the statement  "                return new TokenStreamComponents(tokenizer' new EdgeNGramTokenFilter(LuceneVersion.LUCENE_43' tokenizer' EdgeNGramTokenFilter.Side.BACK' 2' 15)); " is 145.
Long Statement,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestBackUnigram,The length of the statement  "            Tokenizer tokenizer = new Lucene43EdgeNGramTokenizer(Version.LUCENE_43' input' Lucene43EdgeNGramTokenizer.Side.BACK' 1' 1); " is 123.
Long Statement,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestFrontRangeOfNgrams,The length of the statement  "            AssertTokenStreamContents(tokenizer' new string[] { "a"' "ab"' "abc" }' new int[] { 0' 0' 0 }' new int[] { 1' 2' 3 }' 5); // abcde " is 130.
Long Statement,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestBackRangeOfNgrams,The length of the statement  "            Tokenizer tokenizer = new Lucene43EdgeNGramTokenizer(Version.LUCENE_43' input' Lucene43EdgeNGramTokenizer.Side.BACK' 1' 3); " is 123.
Long Statement,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestBackRangeOfNgrams,The length of the statement  "            AssertTokenStreamContents(tokenizer' new string[] { "e"' "de"' "cde" }' new int[] { 4' 3' 2 }' new int[] { 5' 5' 5 }' null' null' null' 5' false); // abcde " is 155.
Long Statement,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestReset,The length of the statement  "            AssertTokenStreamContents(tokenizer' new string[] { "a"' "ab"' "abc" }' new int[] { 0' 0' 0 }' new int[] { 1' 2' 3 }' 5); // abcde " is 130.
Long Statement,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestReset,The length of the statement  "            AssertTokenStreamContents(tokenizer' new string[] { "a"' "ab"' "abc" }' new int[] { 0' 0' 0 }' new int[] { 1' 2' 3 }' 5); // abcde " is 130.
Long Statement,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestTokenizerPositions,The length of the statement  "            Tokenizer tokenizer = new Lucene43EdgeNGramTokenizer(Version.LUCENE_43' input' Lucene43EdgeNGramTokenizer.Side.FRONT' 1' 3); " is 124.
Long Statement,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestTokenizerPositions,The length of the statement  "            AssertTokenStreamContents(tokenizer' new string[] { "a"' "ab"' "abc" }' new int[] { 0' 0' 0 }' new int[] { 1' 2' 3 }' null' new int[] { 1' 0' 0 }' null' null' false); " is 166.
Long Statement,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestTokenizerPositions,The length of the statement  "            AssertTokenStreamContents(tokenizer' new string[] { "a"' "ab"' "abc" }' new int[] { 0' 0' 0 }' new int[] { 1' 2' 3 }' null' new int[] { 1' 1' 1 }' null' null' false); " is 166.
Long Statement,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestUnigrams,The length of the statement  "            AssertTokenStreamContents(filter' new string[] { "a"' "b"' "c"' "d"' "e" }' new int[] { 0' 0' 0' 0' 0 }' new int[] { 5' 5' 5' 5' 5 }' new int[] { 1' 0' 0' 0' 0 }); " is 163.
Long Statement,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestBigrams,The length of the statement  "            AssertTokenStreamContents(filter' new string[] { "ab"' "bc"' "cd"' "de" }' new int[] { 0' 0' 0' 0 }' new int[] { 5' 5' 5' 5 }' new int[] { 1' 0' 0' 0 }); " is 153.
Long Statement,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestNgrams,The length of the statement  "            AssertTokenStreamContents(filter' new string[] { "a"' "ab"' "abc"' "b"' "bc"' "bcd"' "c"' "cd"' "cde"' "d"' "de"' "e" }' new int[] { 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' new int[] { 5' 5' 5' 5' 5' 5' 5' 5' 5' 5' 5' 5 }' null' new int[] { 1' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' null' null' false); " is 296.
Long Statement,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestNgramsNoIncrement,The length of the statement  "            AssertTokenStreamContents(filter' new string[] { "a"' "ab"' "abc"' "b"' "bc"' "bcd"' "c"' "cd"' "cde"' "d"' "de"' "e" }' new int[] { 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' new int[] { 5' 5' 5' 5' 5' 5' 5' 5' 5' 5' 5' 5 }' null' new int[] { 1' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' null' null' false); " is 296.
Long Statement,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestSmallTokenInStream,The length of the statement  "            AssertTokenStreamContents(filter' new string[] { "abc"' "fgh" }' new int[] { 0' 7 }' new int[] { 3' 10 }' new int[] { 1' 2 }); " is 126.
Long Statement,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestReset,The length of the statement  "            AssertTokenStreamContents(filter' new string[] { "a"' "b"' "c"' "d"' "e" }' new int[] { 0' 0' 0' 0' 0 }' new int[] { 5' 5' 5' 5' 5 }' new int[] { 1' 0' 0' 0' 0 }); " is 163.
Long Statement,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestReset,The length of the statement  "            AssertTokenStreamContents(filter' new string[] { "a"' "b"' "c"' "d"' "e" }' new int[] { 0' 0' 0' 0' 0 }' new int[] { 5' 5' 5' 5' 5 }' new int[] { 1' 0' 0' 0' 0 }); " is 163.
Long Statement,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestInvalidOffsets,The length of the statement  "            AssertAnalyzesTo(analyzer' "mosfellsbær"' new string[] { "mo"' "os"' "sf"' "fe"' "el"' "ll"' "ls"' "sb"' "ba"' "ae"' "er" }' new int[] { 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' new int[] { 11' 11' 11' 11' 11' 11' 11' 11' 11' 11' 11 }' new int[] { 1' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }); " is 277.
Long Statement,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestLucene43,The length of the statement  "            AssertTokenStreamContents(filter' new string[] { "ab"' "bc"' "cd"' "de"' "abc"' "bcd"' "cde" }' new int[] { 0' 1' 2' 3' 0' 1' 2 }' new int[] { 2' 3' 4' 5' 3' 4' 5 }' null' new int[] { 1' 1' 1' 1' 1' 1' 1 }' null' null' false); " is 226.
Long Statement,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestUnigrams,The length of the statement  "            AssertTokenStreamContents(tokenizer' new string[] { "a"' "b"' "c"' "d"' "e" }' new int[] { 0' 1' 2' 3' 4 }' new int[] { 1' 2' 3' 4' 5 }' 5); // abcde " is 149.
Long Statement,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestBigrams,The length of the statement  "            AssertTokenStreamContents(tokenizer' new string[] { "ab"' "bc"' "cd"' "de" }' new int[] { 0' 1' 2' 3 }' new int[] { 2' 3' 4' 5 }' 5); // abcde " is 142.
Long Statement,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestNgrams,The length of the statement  "            AssertTokenStreamContents(tokenizer' new string[] { "a"' "ab"' "abc"' "b"' "bc"' "bcd"' "c"' "cd"' "cde"' "d"' "de"' "e" }' new int[] { 0' 0' 0' 1' 1' 1' 2' 2' 2' 3' 3' 4 }' new int[] { 1' 2' 3' 2' 3' 4' 3' 4' 5' 4' 5' 5 }' null' null' null' 5' false); // abcde " is 261.
Long Statement,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestReset,The length of the statement  "            AssertTokenStreamContents(tokenizer' new string[] { "a"' "b"' "c"' "d"' "e" }' new int[] { 0' 1' 2' 3' 4 }' new int[] { 1' 2' 3' 4' 5 }' 5); // abcde " is 149.
Long Statement,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestReset,The length of the statement  "            AssertTokenStreamContents(tokenizer' new string[] { "a"' "b"' "c"' "d"' "e" }' new int[] { 0' 1' 2' 3' 4 }' new int[] { 1' 2' 3' 4' 5 }' 5); // abcde " is 149.
Long Statement,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestNGrams,The length of the statement  "            TokenStream grams = new NGramTokenizerAnonymousInnerClassHelper(TEST_VERSION_CURRENT' new StringReader(s)' minGram' maxGram' edgesOnly' nonTokenChars); " is 151.
Long Statement,Lucene.Net.Analysis.Nl,TestDutchStemmer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Nl\TestDutchStemmer.cs,TestEmptyStemDictionary,The length of the statement  "            DutchAnalyzer a = new DutchAnalyzer(TEST_VERSION_CURRENT' CharArraySet.EMPTY_SET' CharArraySet.EMPTY_SET' CharArrayMap<string>.EmptyMap()); " is 139.
Long Statement,Lucene.Net.Analysis.Path,TestPathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestPathHierarchyTokenizer.cs,TestBasic,The length of the statement  "            AssertTokenStreamContents(t' new string[] { "/a"' "/a/b"' "/a/b/c" }' new int[] { 0' 0' 0 }' new int[] { 2' 4' 6 }' new int[] { 1' 0' 0 }' path.Length); " is 152.
Long Statement,Lucene.Net.Analysis.Path,TestPathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestPathHierarchyTokenizer.cs,TestEndOfDelimiter,The length of the statement  "            AssertTokenStreamContents(t' new string[] { "/a"' "/a/b"' "/a/b/c"' "/a/b/c/" }' new int[] { 0' 0' 0' 0 }' new int[] { 2' 4' 6' 7 }' new int[] { 1' 0' 0' 0 }' path.Length); " is 172.
Long Statement,Lucene.Net.Analysis.Path,TestPathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestPathHierarchyTokenizer.cs,TestStartOfChar,The length of the statement  "            AssertTokenStreamContents(t' new string[] { "a"' "a/b"' "a/b/c" }' new int[] { 0' 0' 0 }' new int[] { 1' 3' 5 }' new int[] { 1' 0' 0 }' path.Length); " is 149.
Long Statement,Lucene.Net.Analysis.Path,TestPathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestPathHierarchyTokenizer.cs,TestStartOfCharEndOfDelimiter,The length of the statement  "            AssertTokenStreamContents(t' new string[] { "a"' "a/b"' "a/b/c"' "a/b/c/" }' new int[] { 0' 0' 0' 0 }' new int[] { 1' 3' 5' 6 }' new int[] { 1' 0' 0' 0 }' path.Length); " is 168.
Long Statement,Lucene.Net.Analysis.Path,TestPathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestPathHierarchyTokenizer.cs,TestOnlyDelimiters,The length of the statement  "            AssertTokenStreamContents(t' new string[] { "/"' "//" }' new int[] { 0' 0 }' new int[] { 1' 2 }' new int[] { 1' 0 }' path.Length); " is 130.
Long Statement,Lucene.Net.Analysis.Path,TestPathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestPathHierarchyTokenizer.cs,TestReplace,The length of the statement  "            AssertTokenStreamContents(t' new string[] { "\\a"' "\\a\\b"' "\\a\\b\\c" }' new int[] { 0' 0' 0 }' new int[] { 2' 4' 6 }' new int[] { 1' 0' 0 }' path.Length); " is 158.
Long Statement,Lucene.Net.Analysis.Path,TestPathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestPathHierarchyTokenizer.cs,TestWindowsPath,The length of the statement  "            AssertTokenStreamContents(t' new string[] { "c:"' "c:\\a"' "c:\\a\\b"' "c:\\a\\b\\c" }' new int[] { 0' 0' 0' 0 }' new int[] { 2' 4' 6' 8 }' new int[] { 1' 0' 0' 0 }' path.Length); " is 179.
Long Statement,Lucene.Net.Analysis.Path,TestPathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestPathHierarchyTokenizer.cs,TestNormalizeWinDelimToLinuxDelim,The length of the statement  "            AssertTokenStreamContents(t' new string[] { "c:"' "c:/a"' "c:/a/b"' "c:/a/b/c" }' new int[] { 0' 0' 0' 0 }' new int[] { 2' 4' 6' 8 }' new int[] { 1' 0' 0' 0 }' path.Length); " is 173.
Long Statement,Lucene.Net.Analysis.Path,TestPathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestPathHierarchyTokenizer.cs,TestBasicSkip,The length of the statement  "            AssertTokenStreamContents(t' new string[] { "/b"' "/b/c" }' new int[] { 2' 2 }' new int[] { 4' 6 }' new int[] { 1' 0 }' path.Length); " is 133.
Long Statement,Lucene.Net.Analysis.Path,TestPathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestPathHierarchyTokenizer.cs,TestEndOfDelimiterSkip,The length of the statement  "            AssertTokenStreamContents(t' new string[] { "/b"' "/b/c"' "/b/c/" }' new int[] { 2' 2' 2 }' new int[] { 4' 6' 7 }' new int[] { 1' 0' 0 }' path.Length); " is 151.
Long Statement,Lucene.Net.Analysis.Path,TestPathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestPathHierarchyTokenizer.cs,TestStartOfCharSkip,The length of the statement  "            AssertTokenStreamContents(t' new string[] { "/b"' "/b/c" }' new int[] { 1' 1 }' new int[] { 3' 5 }' new int[] { 1' 0 }' path.Length); " is 133.
Long Statement,Lucene.Net.Analysis.Path,TestPathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestPathHierarchyTokenizer.cs,TestStartOfCharEndOfDelimiterSkip,The length of the statement  "            AssertTokenStreamContents(t' new string[] { "/b"' "/b/c"' "/b/c/" }' new int[] { 1' 1' 1 }' new int[] { 3' 5' 6 }' new int[] { 1' 0' 0 }' path.Length); " is 151.
Long Statement,Lucene.Net.Analysis.Path,TestReversePathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestReversePathHierarchyTokenizer.cs,TestBasicReverse,The length of the statement  "            AssertTokenStreamContents(t' new string[] { "/a/b/c"' "a/b/c"' "b/c"' "c" }' new int[] { 0' 1' 3' 5 }' new int[] { 6' 6' 6' 6 }' new int[] { 1' 0' 0' 0 }' path.Length); " is 168.
Long Statement,Lucene.Net.Analysis.Path,TestReversePathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestReversePathHierarchyTokenizer.cs,TestEndOfDelimiterReverse,The length of the statement  "            AssertTokenStreamContents(t' new string[] { "/a/b/c/"' "a/b/c/"' "b/c/"' "c/" }' new int[] { 0' 1' 3' 5 }' new int[] { 7' 7' 7' 7 }' new int[] { 1' 0' 0' 0 }' path.Length); " is 172.
Long Statement,Lucene.Net.Analysis.Path,TestReversePathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestReversePathHierarchyTokenizer.cs,TestStartOfCharReverse,The length of the statement  "            AssertTokenStreamContents(t' new string[] { "a/b/c"' "b/c"' "c" }' new int[] { 0' 2' 4 }' new int[] { 5' 5' 5 }' new int[] { 1' 0' 0 }' path.Length); " is 149.
Long Statement,Lucene.Net.Analysis.Path,TestReversePathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestReversePathHierarchyTokenizer.cs,TestStartOfCharEndOfDelimiterReverse,The length of the statement  "            AssertTokenStreamContents(t' new string[] { "a/b/c/"' "b/c/"' "c/" }' new int[] { 0' 2' 4 }' new int[] { 6' 6' 6 }' new int[] { 1' 0' 0 }' path.Length); " is 152.
Long Statement,Lucene.Net.Analysis.Path,TestReversePathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestReversePathHierarchyTokenizer.cs,TestOnlyDelimitersReverse,The length of the statement  "            AssertTokenStreamContents(t' new string[] { "//"' "/" }' new int[] { 0' 1 }' new int[] { 2' 2 }' new int[] { 1' 0 }' path.Length); " is 130.
Long Statement,Lucene.Net.Analysis.Path,TestReversePathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestReversePathHierarchyTokenizer.cs,TestEndOfDelimiterReverseSkip,The length of the statement  "            AssertTokenStreamContents(t' new string[] { "/a/b/"' "a/b/"' "b/" }' new int[] { 0' 1' 3 }' new int[] { 5' 5' 5 }' new int[] { 1' 0' 0 }' path.Length); " is 151.
Long Statement,Lucene.Net.Analysis.Path,TestReversePathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestReversePathHierarchyTokenizer.cs,TestStartOfCharReverseSkip,The length of the statement  "            AssertTokenStreamContents(t' new string[] { "a/b/"' "b/" }' new int[] { 0' 2 }' new int[] { 4' 4 }' new int[] { 1' 0 }' path.Length); " is 133.
Long Statement,Lucene.Net.Analysis.Path,TestReversePathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestReversePathHierarchyTokenizer.cs,TestStartOfCharEndOfDelimiterReverseSkip,The length of the statement  "            AssertTokenStreamContents(t' new string[] { "a/b/"' "b/" }' new int[] { 0' 2 }' new int[] { 4' 4 }' new int[] { 1' 0 }' path.Length); " is 133.
Long Statement,Lucene.Net.Analysis.Path,TestReversePathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestReversePathHierarchyTokenizer.cs,TestReverseSkip2,The length of the statement  "            AssertTokenStreamContents(t' new string[] { "/a/"' "a/" }' new int[] { 0' 1 }' new int[] { 3' 3 }' new int[] { 1' 0 }' path.Length); " is 132.
Long Statement,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestNoPattern,The length of the statement  "            TestPatterns("foobarbaz"' new string[] { }' new string[] { "foobarbaz" }' new int[] { 0 }' new int[] { 9 }' new int[] { 1 }' false); " is 132.
Long Statement,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestNoPattern,The length of the statement  "            TestPatterns("foobarbaz"' new string[] { }' new string[] { "foobarbaz" }' new int[] { 0 }' new int[] { 9 }' new int[] { 1 }' true); " is 131.
Long Statement,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestNoPattern,The length of the statement  "            TestPatterns("foo bar baz"' new string[] { }' new string[] { "foo"' "bar"' "baz" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' false); " is 161.
Long Statement,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestNoPattern,The length of the statement  "            TestPatterns("foo bar baz"' new string[] { }' new string[] { "foo"' "bar"' "baz" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' true); " is 160.
Long Statement,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestNoMatch,The length of the statement  "            TestPatterns("foobarbaz"' new string[] { "xx" }' new string[] { "foobarbaz" }' new int[] { 0 }' new int[] { 9 }' new int[] { 1 }' false); " is 137.
Long Statement,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestNoMatch,The length of the statement  "            TestPatterns("foobarbaz"' new string[] { "xx" }' new string[] { "foobarbaz" }' new int[] { 0 }' new int[] { 9 }' new int[] { 1 }' true); " is 136.
Long Statement,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestNoMatch,The length of the statement  "            TestPatterns("foo bar baz"' new string[] { "xx" }' new string[] { "foo"' "bar"' "baz" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' false); " is 166.
Long Statement,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestNoMatch,The length of the statement  "            TestPatterns("foo bar baz"' new string[] { "xx" }' new string[] { "foo"' "bar"' "baz" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' true); " is 165.
Long Statement,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestNoCapture,The length of the statement  "            TestPatterns("foobarbaz"' new string[] { ".." }' new string[] { "foobarbaz" }' new int[] { 0 }' new int[] { 9 }' new int[] { 1 }' false); " is 137.
Long Statement,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestNoCapture,The length of the statement  "            TestPatterns("foobarbaz"' new string[] { ".." }' new string[] { "foobarbaz" }' new int[] { 0 }' new int[] { 9 }' new int[] { 1 }' true); " is 136.
Long Statement,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestNoCapture,The length of the statement  "            TestPatterns("foo bar baz"' new string[] { ".." }' new string[] { "foo"' "bar"' "baz" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' false); " is 166.
Long Statement,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestNoCapture,The length of the statement  "            TestPatterns("foo bar baz"' new string[] { ".." }' new string[] { "foo"' "bar"' "baz" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' true); " is 165.
Long Statement,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestEmptyCapture,The length of the statement  "            TestPatterns("foobarbaz"' new string[] { ".(y*)" }' new string[] { "foobarbaz" }' new int[] { 0 }' new int[] { 9 }' new int[] { 1 }' false); " is 140.
Long Statement,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestEmptyCapture,The length of the statement  "            TestPatterns("foobarbaz"' new string[] { ".(y*)" }' new string[] { "foobarbaz" }' new int[] { 0 }' new int[] { 9 }' new int[] { 1 }' true); " is 139.
Long Statement,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestEmptyCapture,The length of the statement  "            TestPatterns("foo bar baz"' new string[] { ".(y*)" }' new string[] { "foo"' "bar"' "baz" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' false); " is 169.
Long Statement,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestEmptyCapture,The length of the statement  "            TestPatterns("foo bar baz"' new string[] { ".(y*)" }' new string[] { "foo"' "bar"' "baz" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' true); " is 168.
Long Statement,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureAll,The length of the statement  "            TestPatterns("foobarbaz"' new string[] { "(.+)" }' new string[] { "foobarbaz" }' new int[] { 0 }' new int[] { 9 }' new int[] { 1 }' false); " is 139.
Long Statement,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureAll,The length of the statement  "            TestPatterns("foobarbaz"' new string[] { "(.+)" }' new string[] { "foobarbaz" }' new int[] { 0 }' new int[] { 9 }' new int[] { 1 }' true); " is 138.
Long Statement,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureAll,The length of the statement  "            TestPatterns("foo bar baz"' new string[] { "(.+)" }' new string[] { "foo"' "bar"' "baz" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' false); " is 168.
Long Statement,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureAll,The length of the statement  "            TestPatterns("foo bar baz"' new string[] { "(.+)" }' new string[] { "foo"' "bar"' "baz" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' true); " is 167.
Long Statement,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStart,The length of the statement  "            TestPatterns("foobarbaz"' new string[] { "^(.)" }' new string[] { "f" }' new int[] { 0 }' new int[] { 9 }' new int[] { 1 }' false); " is 131.
Long Statement,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStart,The length of the statement  "            TestPatterns("foobarbaz"' new string[] { "^(.)" }' new string[] { "foobarbaz"' "f" }' new int[] { 0' 0 }' new int[] { 9' 9 }' new int[] { 1' 0 }' true); " is 152.
Long Statement,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStart,The length of the statement  "            TestPatterns("foo bar baz"' new string[] { "^(.)" }' new string[] { "f"' "b"' "b" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' false); " is 162.
Long Statement,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStart,The length of the statement  "            TestPatterns("foo bar baz"' new string[] { "^(.)" }' new string[] { "foo"' "f"' "bar"' "b"' "baz"' "b" }' new int[] { 0' 0' 4' 4' 8' 8 }' new int[] { 3' 3' 7' 7' 11' 11 }' new int[] { 1' 0' 1' 0' 1' 0 }' true); " is 210.
Long Statement,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureMiddle,The length of the statement  "            TestPatterns("foobarbaz"' new string[] { "^.(.)." }' new string[] { "o" }' new int[] { 0 }' new int[] { 9 }' new int[] { 1 }' false); " is 133.
Long Statement,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureMiddle,The length of the statement  "            TestPatterns("foobarbaz"' new string[] { "^.(.)." }' new string[] { "foobarbaz"' "o" }' new int[] { 0' 0 }' new int[] { 9' 9 }' new int[] { 1' 0 }' true); " is 154.
Long Statement,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureMiddle,The length of the statement  "            TestPatterns("foo bar baz"' new string[] { "^.(.)." }' new string[] { "o"' "a"' "a" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' false); " is 164.
Long Statement,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureMiddle,The length of the statement  "            TestPatterns("foo bar baz"' new string[] { "^.(.)." }' new string[] { "foo"' "o"' "bar"' "a"' "baz"' "a" }' new int[] { 0' 0' 4' 4' 8' 8 }' new int[] { 3' 3' 7' 7' 11' 11 }' new int[] { 1' 0' 1' 0' 1' 0 }' true); " is 212.
Long Statement,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureEnd,The length of the statement  "            TestPatterns("foobarbaz"' new string[] { "(.)$" }' new string[] { "z" }' new int[] { 0 }' new int[] { 9 }' new int[] { 1 }' false); " is 131.
Long Statement,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureEnd,The length of the statement  "            TestPatterns("foobarbaz"' new string[] { "(.)$" }' new string[] { "foobarbaz"' "z" }' new int[] { 0' 0 }' new int[] { 9' 9 }' new int[] { 1' 0 }' true); " is 152.
Long Statement,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureEnd,The length of the statement  "            TestPatterns("foo bar baz"' new string[] { "(.)$" }' new string[] { "o"' "r"' "z" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' false); " is 162.
Long Statement,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureEnd,The length of the statement  "            TestPatterns("foo bar baz"' new string[] { "(.)$" }' new string[] { "foo"' "o"' "bar"' "r"' "baz"' "z" }' new int[] { 0' 0' 4' 4' 8' 8 }' new int[] { 3' 3' 7' 7' 11' 11 }' new int[] { 1' 0' 1' 0' 1' 0 }' true); " is 210.
Long Statement,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStartMiddle,The length of the statement  "            TestPatterns("foobarbaz"' new string[] { "^(.)(.)" }' new string[] { "f"' "o" }' new int[] { 0' 0 }' new int[] { 9' 9 }' new int[] { 1' 0 }' false); " is 148.
Long Statement,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStartMiddle,The length of the statement  "            TestPatterns("foobarbaz"' new string[] { "^(.)(.)" }' new string[] { "foobarbaz"' "f"' "o" }' new int[] { 0' 0' 0 }' new int[] { 9' 9' 9 }' new int[] { 1' 0' 0 }' true); " is 169.
Long Statement,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStartMiddle,The length of the statement  "            TestPatterns("foo bar baz"' new string[] { "^(.)(.)" }' new string[] { "f"' "o"' "b"' "a"' "b"' "a" }' new int[] { 0' 0' 4' 4' 8' 8 }' new int[] { 3' 3' 7' 7' 11' 11 }' new int[] { 1' 0' 1' 0' 1' 0 }' false); " is 208.
Long Statement,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStartMiddle,The length of the statement  "            TestPatterns("foo bar baz"' new string[] { "^(.)(.)" }' new string[] { "foo"' "f"' "o"' "bar"' "b"' "a"' "baz"' "b"' "a" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' true); " is 256.
Long Statement,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStartEnd,The length of the statement  "            TestPatterns("foobarbaz"' new string[] { "^(.).+(.)$" }' new string[] { "f"' "z" }' new int[] { 0' 0 }' new int[] { 9' 9 }' new int[] { 1' 0 }' false); " is 151.
Long Statement,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStartEnd,The length of the statement  "            TestPatterns("foobarbaz"' new string[] { "^(.).+(.)$" }' new string[] { "foobarbaz"' "f"' "z" }' new int[] { 0' 0' 0 }' new int[] { 9' 9' 9 }' new int[] { 1' 0' 0 }' true); " is 172.
Long Statement,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStartEnd,The length of the statement  "            TestPatterns("foo bar baz"' new string[] { "^(.).+(.)$" }' new string[] { "f"' "o"' "b"' "r"' "b"' "z" }' new int[] { 0' 0' 4' 4' 8' 8 }' new int[] { 3' 3' 7' 7' 11' 11 }' new int[] { 1' 0' 1' 0' 1' 0 }' false); " is 211.
Long Statement,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStartEnd,The length of the statement  "            TestPatterns("foo bar baz"' new string[] { "^(.).+(.)$" }' new string[] { "foo"' "f"' "o"' "bar"' "b"' "r"' "baz"' "b"' "z" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' true); " is 259.
Long Statement,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureMiddleEnd,The length of the statement  "            TestPatterns("foobarbaz"' new string[] { "(.)(.)$" }' new string[] { "a"' "z" }' new int[] { 0' 0 }' new int[] { 9' 9 }' new int[] { 1' 0 }' false); " is 148.
Long Statement,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureMiddleEnd,The length of the statement  "            TestPatterns("foobarbaz"' new string[] { "(.)(.)$" }' new string[] { "foobarbaz"' "a"' "z" }' new int[] { 0' 0' 0 }' new int[] { 9' 9' 9 }' new int[] { 1' 0' 0 }' true); " is 169.
Long Statement,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureMiddleEnd,The length of the statement  "            TestPatterns("foo bar baz"' new string[] { "(.)(.)$" }' new string[] { "o"' "o"' "a"' "r"' "a"' "z" }' new int[] { 0' 0' 4' 4' 8' 8 }' new int[] { 3' 3' 7' 7' 11' 11 }' new int[] { 1' 0' 1' 0' 1' 0 }' false); " is 208.
Long Statement,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureMiddleEnd,The length of the statement  "            TestPatterns("foo bar baz"' new string[] { "(.)(.)$" }' new string[] { "foo"' "o"' "o"' "bar"' "a"' "r"' "baz"' "a"' "z" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' true); " is 256.
Long Statement,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestMultiCaptureOverlap,The length of the statement  "            TestPatterns("foobarbaz"' new string[] { "(.(.(.)))" }' new string[] { "foo"' "oo"' "o"' "bar"' "ar"' "r"' "baz"' "az"' "z" }' new int[] { 0' 0' 0' 0' 0' 0' 0' 0' 0 }' new int[] { 9' 9' 9' 9' 9' 9' 9' 9' 9 }' new int[] { 1' 0' 0' 0' 0' 0' 0' 0' 0 }' false); " is 257.
Long Statement,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestMultiCaptureOverlap,The length of the statement  "            TestPatterns("foobarbaz"' new string[] { "(.(.(.)))" }' new string[] { "foobarbaz"' "foo"' "oo"' "o"' "bar"' "ar"' "r"' "baz"' "az"' "z" }' new int[] { 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' new int[] { 9' 9' 9' 9' 9' 9' 9' 9' 9' 9 }' new int[] { 1' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' true); " is 278.
Long Statement,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestMultiCaptureOverlap,The length of the statement  "            TestPatterns("foo bar baz"' new string[] { "(.(.(.)))" }' new string[] { "foo"' "oo"' "o"' "bar"' "ar"' "r"' "baz"' "az"' "z" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' false); " is 262.
Long Statement,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestMultiCaptureOverlap,The length of the statement  "            TestPatterns("foo bar baz"' new string[] { "(.(.(.)))" }' new string[] { "foo"' "oo"' "o"' "bar"' "ar"' "r"' "baz"' "az"' "z" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' true); " is 261.
Long Statement,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestMultiPattern,The length of the statement  "            TestPatterns("aaabbbaaa"' new string[] { "(aaa)"' "(bbb)"' "(ccc)" }' new string[] { "aaa"' "bbb"' "aaa" }' new int[] { 0' 0' 0 }' new int[] { 9' 9' 9 }' new int[] { 1' 0' 0 }' false); " is 184.
Long Statement,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestMultiPattern,The length of the statement  "            TestPatterns("aaabbbaaa"' new string[] { "(aaa)"' "(bbb)"' "(ccc)" }' new string[] { "aaabbbaaa"' "aaa"' "bbb"' "aaa" }' new int[] { 0' 0' 0' 0 }' new int[] { 9' 9' 9' 9 }' new int[] { 1' 0' 0' 0 }' true); " is 205.
Long Statement,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestMultiPattern,The length of the statement  "            TestPatterns("aaa bbb aaa"' new string[] { "(aaa)"' "(bbb)"' "(ccc)" }' new string[] { "aaa"' "bbb"' "aaa" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' false); " is 187.
Long Statement,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestMultiPattern,The length of the statement  "            TestPatterns("aaa bbb aaa"' new string[] { "(aaa)"' "(bbb)"' "(ccc)" }' new string[] { "aaa"' "bbb"' "aaa" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' true); " is 186.
Long Statement,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCamelCase,The length of the statement  "            TestPatterns("letsPartyLIKEits1999_dude"' new string[] { "([A-Z]{2'})"' "(?<![A-Z])([A-Z][a-z]+)"' "(?:^|\\b|(?<=[0-9_])|(?<=[A-Z]{2}))([a-z]+)"' "([0-9]+)" }' new string[] { "lets"' "Party"' "LIKE"' "its"' "1999"' "dude" }' new int[] { 0' 0' 0' 0' 0' 0 }' new int[] { 25' 25' 25' 25' 25' 25 }' new int[] { 1' 0' 0' 0' 0' 0' 0 }' false); " is 337.
Long Statement,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCamelCase,The length of the statement  "            TestPatterns("letsPartyLIKEits1999_dude"' new string[] { "([A-Z]{2'})"' "(?<![A-Z])([A-Z][a-z]+)"' "(?:^|\\b|(?<=[0-9_])|(?<=[A-Z]{2}))([a-z]+)"' "([0-9]+)" }' new string[] { "letsPartyLIKEits1999_dude"' "lets"' "Party"' "LIKE"' "its"' "1999"' "dude" }' new int[] { 0' 0' 0' 0' 0' 0' 0 }' new int[] { 25' 25' 25' 25' 25' 25' 25 }' new int[] { 1' 0' 0' 0' 0' 0' 0' 0 }' true); " is 375.
Long Statement,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestPatterns,The length of the statement  "            TokenStream ts = new PatternCaptureGroupTokenFilter(new MockTokenizer(new StringReader(input)' MockTokenizer.WHITESPACE' false)' preserveOriginal' patterns); " is 157.
Long Statement,Lucene.Net.Analysis.Pattern,AnalyzerAnonymousInnerClassHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,CreateComponents,The length of the statement  "                return new TokenStreamComponents(tokenizer' new PatternCaptureGroupTokenFilter(tokenizer' false' new Regex("((..)(..))"' RegexOptions.Compiled))); " is 146.
Long Statement,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,checkOutput,The length of the statement  "            CharFilter cs = new PatternReplaceCharFilter(new Regex(pattern' RegexOptions.Compiled)' replacement' new StringReader(input)); " is 126.
Long Statement,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,TestNothingChange,The length of the statement  "            AssertTokenStreamContents(ts' new string[] { "this"' "is"' "test." }' new int[] { 0' 5' 8 }' new int[] { 4' 7' 13 }' BLOCK.Length); " is 131.
Long Statement,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,Test1block1matchLonger,The length of the statement  "            AssertTokenStreamContents(ts' new string[] { "aa##bb###cc"' "dd" }' new int[] { 0' 9 }' new int[] { 8' 11 }' BLOCK.Length); " is 123.
Long Statement,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,Test1blockMultiMatches,The length of the statement  "            AssertTokenStreamContents(ts' new string[] { "aa"' "bb"' "cc"' "---"' "aa"' "bb"' "aa"' "bb"' "cc" }' new int[] { 2' 6' 9' 11' 15' 18' 21' 25' 29 }' new int[] { 4' 8' 10' 14' 17' 20' 23' 27' 33 }' BLOCK.Length); " is 211.
Long Statement,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,Test2blocksMultiMatches,The length of the statement  "            AssertTokenStreamContents(ts' new string[] { "aa##bb"' "cc"' "---"' "aa##bb"' "aa."' "bb"' "aa##bb"' "cc" }' new int[] { 2' 8' 11' 15' 21' 25' 28' 36 }' new int[] { 7' 10' 14' 20' 24' 27' 35' 38 }' BLOCK.Length); " is 212.
Long Statement,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,TestChain,The length of the statement  "            AssertTokenStreamContents(ts' new string[] { "aa"' "b"' "-"' "c"' "."' "---"' "b"' "aa"' "."' "c"' "c"' "b" }' new int[] { 1' 3' 6' 8' 12' 14' 18' 21' 23' 25' 29' 33 }' new int[] { 2' 5' 7' 11' 13' 17' 20' 22' 24' 28' 32' 35 }' BLOCK.Length); " is 242.
Long Statement,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilterFactory.cs,TestNothingChange,The length of the statement  "            reader = CharFilterFactory("PatternReplace"' "pattern"' "(aa)\\s+(bb)\\s+(cc)"' "replacement"' "$1$2$3").Create(reader); " is 120.
Long Statement,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilterFactory.cs,Test1block1matchSameLength,The length of the statement  "            reader = CharFilterFactory("PatternReplace"' "pattern"' "(aa)\\s+(bb)\\s+(cc)"' "replacement"' "$1#$2#$3").Create(reader); " is 122.
Long Statement,Lucene.Net.Analysis.Pattern,TestPatternReplaceFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceFilter.cs,TestReplaceAll,The length of the statement  "            TokenStream ts = new PatternReplaceFilter(new MockTokenizer(new StringReader(input)' MockTokenizer.WHITESPACE' false)' new Regex("a*b"' RegexOptions.Compiled)' "-"' true); " is 171.
Long Statement,Lucene.Net.Analysis.Pattern,TestPatternReplaceFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceFilter.cs,TestReplaceFirst,The length of the statement  "            TokenStream ts = new PatternReplaceFilter(new MockTokenizer(new StringReader(input)' MockTokenizer.WHITESPACE' false)' new Regex("a*b"' RegexOptions.Compiled)' "-"' false); " is 172.
Long Statement,Lucene.Net.Analysis.Pattern,TestPatternReplaceFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceFilter.cs,TestStripFirst,The length of the statement  "            TokenStream ts = new PatternReplaceFilter(new MockTokenizer(new StringReader(input)' MockTokenizer.WHITESPACE' false)' new Regex("a*b"' RegexOptions.Compiled)' null' false); " is 173.
Long Statement,Lucene.Net.Analysis.Pattern,TestPatternReplaceFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceFilter.cs,TestStripAll,The length of the statement  "            TokenStream ts = new PatternReplaceFilter(new MockTokenizer(new StringReader(input)' MockTokenizer.WHITESPACE' false)' new Regex("a*b"' RegexOptions.Compiled)' null' true); " is 172.
Long Statement,Lucene.Net.Analysis.Pattern,TestPatternReplaceFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceFilter.cs,TestReplaceAllWithBackRef,The length of the statement  "            TokenStream ts = new PatternReplaceFilter(new MockTokenizer(new StringReader(input)' MockTokenizer.WHITESPACE' false)' new Regex("(a*)b"' RegexOptions.Compiled)' /*"$1\\$$"*/ "$1$$"' true); " is 189.
Long Statement,Lucene.Net.Analysis.Pattern,AnalyzerAnonymousInnerClassHelper3,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceFilter.cs,CreateComponents,The length of the statement  "                return new TokenStreamComponents(tokenizer' new PatternReplaceFilter(tokenizer' new Regex("a"' RegexOptions.Compiled)' "b"' true)); " is 131.
Long Statement,Lucene.Net.Analysis.Pattern,TestPatternTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternTokenizer.cs,TestSplitting,The length of the statement  "            //new string[] {"-1"' "\\p{Space}"' "aaa   bbb \t\tccc  "' "aaa bbb ccc"}' // LUCENENET: Java-specific Regex syntax. See: http://stackoverflow.com/a/4731164/181087 " is 163.
Long Statement,Lucene.Net.Analysis.Pattern,TestPatternTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternTokenizer.cs,TestSplitting,The length of the statement  "                TokenStream stream = new PatternTokenizer(new StringReader(test[2])' new Regex(test[1]' RegexOptions.Compiled)' int.Parse(test[0]' CultureInfo.InvariantCulture)); " is 162.
Long Statement,Lucene.Net.Analysis.Pattern,TestPatternTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternTokenizer.cs,TestOffsetCorrection,The length of the statement  "            AssertTokenStreamContents(stream' new string[] { "Günther"' "Günther"' "is"' "here" }' new int[] { 0' 13' 26' 29 }' new int[] { 12' 25' 28' 33 }' INPUT.Length); " is 160.
Long Statement,Lucene.Net.Analysis.Pattern,TestPatternTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternTokenizer.cs,TestOffsetCorrection,The length of the statement  "            AssertTokenStreamContents(stream' new string[] { "Günther"' "Günther" }' new int[] { 0' 13 }' new int[] { 12' 25 }' INPUT.Length); " is 130.
Long Statement,Lucene.Net.Analysis.Payloads,DelimitedPayloadTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Payloads\DelimitedPayloadTokenFilterTest.cs,TestPayloads,The length of the statement  "            DelimitedPayloadTokenFilter filter = new DelimitedPayloadTokenFilter(new MockTokenizer(new StringReader(test)' MockTokenizer.WHITESPACE' false)' DelimitedPayloadTokenFilter.DEFAULT_DELIMITER' new IdentityEncoder()); " is 215.
Long Statement,Lucene.Net.Analysis.Payloads,DelimitedPayloadTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Payloads\DelimitedPayloadTokenFilterTest.cs,TestNext,The length of the statement  "            DelimitedPayloadTokenFilter filter = new DelimitedPayloadTokenFilter(new MockTokenizer(new StringReader(test)' MockTokenizer.WHITESPACE' false)' DelimitedPayloadTokenFilter.DEFAULT_DELIMITER' new IdentityEncoder()); " is 215.
Long Statement,Lucene.Net.Analysis.Payloads,DelimitedPayloadTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Payloads\DelimitedPayloadTokenFilterTest.cs,TestFloatEncoding,The length of the statement  "            DelimitedPayloadTokenFilter filter = new DelimitedPayloadTokenFilter(new MockTokenizer(new StringReader(test)' MockTokenizer.WHITESPACE' false)' '|'' new SingleEncoder()); " is 171.
Long Statement,Lucene.Net.Analysis.Payloads,DelimitedPayloadTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Payloads\DelimitedPayloadTokenFilterTest.cs,TestIntEncoding,The length of the statement  "            DelimitedPayloadTokenFilter filter = new DelimitedPayloadTokenFilter(new MockTokenizer(new StringReader(test)' MockTokenizer.WHITESPACE' false)' '|'' new IntegerEncoder()); " is 172.
Long Statement,Lucene.Net.Analysis.Payloads,DelimitedPayloadTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Payloads\DelimitedPayloadTokenFilterTest.cs,AssertTermEquals,The length of the statement  "                    assertTrue(expectPay[i] + " does not equal: " + payload.Bytes[i + payload.Offset]' expectPay[i] == payload.Bytes[i + payload.Offset]); " is 134.
Long Statement,Lucene.Net.Analysis.Payloads,DelimitedPayloadTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Payloads\DelimitedPayloadTokenFilterTest.cs,AssertTermEquals,The length of the statement  "                    assertTrue(expectPay[i] + " does not equal: " + payload.Bytes[i + payload.Offset]' expectPay[i] == payload.Bytes[i + payload.Offset]); " is 134.
Long Statement,Lucene.Net.Analysis.Payloads,NumericPayloadTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Payloads\NumericPayloadTokenFilterTest.cs,Test,The length of the statement  "            NumericPayloadTokenFilter nptf = new NumericPayloadTokenFilter(new WordTokenFilter(this' new MockTokenizer(new StringReader(test)' MockTokenizer.WHITESPACE' false))' 3' "D"); " is 174.
Long Statement,Lucene.Net.Analysis.Payloads,TokenOffsetPayloadTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Payloads\TokenOffsetPayloadTokenFilterTest.cs,Test,The length of the statement  "            TokenOffsetPayloadTokenFilter nptf = new TokenOffsetPayloadTokenFilter(new MockTokenizer(new StringReader(test)' MockTokenizer.WHITESPACE' false)); " is 147.
Long Statement,Lucene.Net.Analysis.Payloads,TypeAsPayloadTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Payloads\TypeAsPayloadTokenFilterTest.cs,Test,The length of the statement  "            TypeAsPayloadTokenFilter nptf = new TypeAsPayloadTokenFilter(new WordTokenFilter(this' new MockTokenizer(new StringReader(test)' MockTokenizer.WHITESPACE' false))); " is 164.
Long Statement,Lucene.Net.Analysis.Payloads,TypeAsPayloadTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Payloads\TypeAsPayloadTokenFilterTest.cs,Test,The length of the statement  "                assertTrue(typeAtt.Type + " is not null and it should be"' typeAtt.Type.Equals(char.ToUpper(termAtt.Buffer[0]).ToString()' StringComparison.Ordinal)); " is 150.
Long Statement,Lucene.Net.Analysis.Pt,TestPortugueseLightStemFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pt\TestPortugueseLightStemFilter.cs,TestExamples,The length of the statement  "            AssertAnalyzesTo(analyzer' "O debate político' pelo menos o que vem a público' parece' de modo nada " + "surpreendente' restrito a temas menores. Mas há' evidentemente' " + "grandes questões em jogo nas eleições que se aproximam."' new string[] { "o"' "debat"' "politic"' "pelo"' "meno"' "o"' "que"' "vem"' "a"' "public"' "parec"' "de"' "modo"' "nada"' "surpreendent"' "restrit"' "a"' "tema"' "menor"' "mas"' "há"' "evident"' "grand"' "questa"' "em"' "jogo"' "nas"' "eleica"' "que"' "se"' "aproximam" }); " is 504.
Long Statement,Lucene.Net.Analysis.Pt,TestPortugueseMinimalStemFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pt\TestPortugueseMinimalStemFilter.cs,TestExamples,The length of the statement  "            AssertAnalyzesTo(analyzer' "O debate político' pelo menos o que vem a público' parece' de modo nada " + "surpreendente' restrito a temas menores. Mas há' evidentemente' " + "grandes questões em jogo nas eleições que se aproximam."' new string[] { "o"' "debate"' "político"' "pelo"' "menos"' "o"' "que"' "vem"' "a"' "público"' "parece"' "de"' "modo"' "nada"' "surpreendente"' "restrito"' "a"' "tema"' "menor"' "mas"' "há"' "evidentemente"' "grande"' "questão"' "em"' "jogo"' "na"' "eleição"' "que"' "se"' "aproximam" }); " is 519.
Long Statement,Lucene.Net.Analysis.Pt,TestPortugueseStemFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pt\TestPortugueseStemFilter.cs,TestExamples,The length of the statement  "            AssertAnalyzesTo(analyzer' "O debate político' pelo menos o que vem a público' parece' de modo nada " + "surpreendente' restrito a temas menores. Mas há' evidentemente' " + "grandes questões em jogo nas eleições que se aproximam."' new string[] { "o"' "debat"' "politic"' "pel"' "menos"' "o"' "que"' "vem"' "a"' "public"' "parec"' "de"' "mod"' "nad"' "surpreend"' "restrit"' "a"' "tem"' "men"' "mas"' "ha"' "evid"' "grand"' "quest"' "em"' "jog"' "na"' "eleic"' "que"' "se"' "aproxim" }); " is 487.
Long Statement,Lucene.Net.Analysis.Query,QueryAutoStopWordAnalyzerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Query\QueryAutoStopWordAnalyzerTest.cs,TestNoStopwords,The length of the statement  "            protectedAnalyzer = new QueryAutoStopWordAnalyzer(TEST_VERSION_CURRENT' appAnalyzer' reader' Collections.EmptyList<string>()' 1); " is 129.
Long Statement,Lucene.Net.Analysis.Query,QueryAutoStopWordAnalyzerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Query\QueryAutoStopWordAnalyzerTest.cs,TestStopwordsPerFieldMaxPercentDocs,The length of the statement  "            protectedAnalyzer = new QueryAutoStopWordAnalyzer(TEST_VERSION_CURRENT' appAnalyzer' reader' Arrays.AsList("variedField")' 1f / 2f); " is 132.
Long Statement,Lucene.Net.Analysis.Query,QueryAutoStopWordAnalyzerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Query\QueryAutoStopWordAnalyzerTest.cs,TestStopwordsPerFieldMaxPercentDocs,The length of the statement  "            protectedAnalyzer = new QueryAutoStopWordAnalyzer(TEST_VERSION_CURRENT' appAnalyzer' reader' Arrays.AsList("variedField"' "repetitiveField")' 1f / 2f); " is 151.
Long Statement,Lucene.Net.Analysis.Query,QueryAutoStopWordAnalyzerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Query\QueryAutoStopWordAnalyzerTest.cs,TestStopwordsPerFieldMaxDocFreq,The length of the statement  "            protectedAnalyzer = new QueryAutoStopWordAnalyzer(TEST_VERSION_CURRENT' appAnalyzer' reader' Arrays.AsList("repetitiveField")' 10); " is 131.
Long Statement,Lucene.Net.Analysis.Query,QueryAutoStopWordAnalyzerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Query\QueryAutoStopWordAnalyzerTest.cs,TestStopwordsPerFieldMaxDocFreq,The length of the statement  "            protectedAnalyzer = new QueryAutoStopWordAnalyzer(TEST_VERSION_CURRENT' appAnalyzer' reader' Arrays.AsList("repetitiveField"' "variedField")' 10); " is 146.
Long Statement,Lucene.Net.Analysis.Query,QueryAutoStopWordAnalyzerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Query\QueryAutoStopWordAnalyzerTest.cs,TestStopwordsPerFieldMaxDocFreq,The length of the statement  "            int numNewStopWords = protectedAnalyzer.GetStopWords("repetitiveField").Length + protectedAnalyzer.GetStopWords("variedField").Length; " is 134.
Long Statement,Lucene.Net.Analysis.Query,QueryAutoStopWordAnalyzerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Query\QueryAutoStopWordAnalyzerTest.cs,TestNoFieldNamePollution,The length of the statement  "            protectedAnalyzer = new QueryAutoStopWordAnalyzer(TEST_VERSION_CURRENT' appAnalyzer' reader' Arrays.AsList("repetitiveField")' 10); " is 131.
Long Statement,Lucene.Net.Analysis.Query,QueryAutoStopWordAnalyzerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Query\QueryAutoStopWordAnalyzerTest.cs,TestTokenStream,The length of the statement  "            QueryAutoStopWordAnalyzer a = new QueryAutoStopWordAnalyzer(TEST_VERSION_CURRENT' new MockAnalyzer(Random' MockTokenizer.WHITESPACE' false)' reader' 10); " is 153.
Long Statement,Lucene.Net.Analysis.Reverse,TestReverseStringFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Reverse\TestReverseStringFilter.cs,TestFilter,The length of the statement  "            TokenStream stream = new MockTokenizer(new StringReader("Do have a nice day")' MockTokenizer.WHITESPACE' false); // 1-4 length string " is 133.
Long Statement,Lucene.Net.Analysis.Reverse,TestReverseStringFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Reverse\TestReverseStringFilter.cs,TestFilterWithMark,The length of the statement  "            TokenStream stream = new MockTokenizer(new StringReader("Do have a nice day")' MockTokenizer.WHITESPACE' false); // 1-4 length string " is 133.
Long Statement,Lucene.Net.Analysis.Ru,TestRussianAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Ru\TestRussianAnalyzer.cs,TestReusableTokenStream30,The length of the statement  "            AssertAnalyzesTo(a' "Вместе с тем о силе электромагнитной энергии имели представление еще"' new string[] { "вмест"' "сил"' "электромагнитн"' "энерг"' "имел"' "представлен" }); " is 175.
Long Statement,Lucene.Net.Analysis.Ru,TestRussianAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Ru\TestRussianAnalyzer.cs,TestReusableTokenStream,The length of the statement  "            AssertAnalyzesTo(a' "Вместе с тем о силе электромагнитной энергии имели представление еще"' new string[] { "вмест"' "сил"' "электромагнитн"' "энерг"' "имел"' "представлен" }); " is 175.
Long Statement,Lucene.Net.Analysis.Ru,TestRussianAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Ru\TestRussianAnalyzer.cs,TestWithStemExclusionSet,The length of the statement  "            AssertAnalyzesTo(a' "Вместе с тем о силе электромагнитной энергии имели представление еще"' new string[] { "вмест"' "сил"' "электромагнитн"' "энерг"' "имел"' "представление" }); " is 177.
Long Statement,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestReusableTokenStream,The length of the statement  "            AssertAnalyzesTo(a' "please divide into shingles"' new string[] { "please"' "please divide"' "divide"' "divide into"' "into"' "into shingles"' "shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new int[] { 1' 0' 1' 0' 1' 0' 1 }); " is 271.
Long Statement,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestReusableTokenStream,The length of the statement  "            AssertAnalyzesTo(a' "divide me up again"' new string[] { "divide"' "divide me"' "me"' "me up"' "up"' "up again"' "again" }' new int[] { 0' 0' 7' 7' 10' 10' 13 }' new int[] { 6' 9' 9' 12' 12' 18' 18 }' new int[] { 1' 0' 1' 0' 1' 0' 1 }); " is 236.
Long Statement,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinShingleSize,The length of the statement  "            ShingleAnalyzerWrapper analyzer = new ShingleAnalyzerWrapper(new MockAnalyzer(Random' MockTokenizer.WHITESPACE' false)' 3' 4); " is 126.
Long Statement,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinShingleSize,The length of the statement  "            AssertAnalyzesTo(analyzer' "please divide this sentence into shingles"' new string[] { "please"' "please divide this"' "please divide this sentence"' "divide"' "divide this sentence"' "divide this sentence into"' "this"' "this sentence into"' "this sentence into shingles"' "sentence"' "sentence into shingles"' "into"' "shingles" }' new int[] { 0' 0' 0' 7' 7' 7' 14' 14' 14' 19' 19' 28' 33 }' new int[] { 6' 18' 27' 13' 27' 32' 18' 32' 41' 27' 41' 32' 41 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 1' 1 }); " is 512.
Long Statement,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinShingleSize,The length of the statement  "            analyzer = new ShingleAnalyzerWrapper(new MockAnalyzer(Random' MockTokenizer.WHITESPACE' false)' 3' 4' ShingleFilter.DEFAULT_TOKEN_SEPARATOR' false' false' ShingleFilter.DEFAULT_FILLER_TOKEN); " is 192.
Long Statement,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinShingleSize,The length of the statement  "            AssertAnalyzesTo(analyzer' "please divide this sentence into shingles"' new string[] { "please divide this"' "please divide this sentence"' "divide this sentence"' "divide this sentence into"' "this sentence into"' "this sentence into shingles"' "sentence into shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 18' 27' 27' 32' 32' 41' 41 }' new int[] { 1' 0' 1' 0' 1' 0' 1 }); " is 389.
Long Statement,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinAndSameMaxShingleSize,The length of the statement  "            ShingleAnalyzerWrapper analyzer = new ShingleAnalyzerWrapper(new MockAnalyzer(Random' MockTokenizer.WHITESPACE' false)' 3' 3); " is 126.
Long Statement,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinAndSameMaxShingleSize,The length of the statement  "            AssertAnalyzesTo(analyzer' "please divide this sentence into shingles"' new string[] { "please"' "please divide this"' "divide"' "divide this sentence"' "this"' "this sentence into"' "sentence"' "sentence into shingles"' "into"' "shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19' 19' 28' 33 }' new int[] { 6' 18' 13' 27' 18' 32' 27' 41' 32' 41 }' new int[] { 1' 0' 1' 0' 1' 0' 1' 0' 1' 1 }); " is 390.
Long Statement,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinAndSameMaxShingleSize,The length of the statement  "            analyzer = new ShingleAnalyzerWrapper(new MockAnalyzer(Random' MockTokenizer.WHITESPACE' false)' 3' 3' ShingleFilter.DEFAULT_TOKEN_SEPARATOR' false' false' ShingleFilter.DEFAULT_FILLER_TOKEN); " is 192.
Long Statement,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinAndSameMaxShingleSize,The length of the statement  "            AssertAnalyzesTo(analyzer' "please divide this sentence into shingles"' new string[] { "please divide this"' "divide this sentence"' "this sentence into"' "sentence into shingles" }' new int[] { 0' 7' 14' 19 }' new int[] { 18' 27' 32' 41 }' new int[] { 1' 1' 1' 1 }); " is 267.
Long Statement,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNoTokenSeparator,The length of the statement  "            ShingleAnalyzerWrapper analyzer = new ShingleAnalyzerWrapper(new MockAnalyzer(Random' MockTokenizer.WHITESPACE' false)' ShingleFilter.DEFAULT_MIN_SHINGLE_SIZE' ShingleFilter.DEFAULT_MAX_SHINGLE_SIZE' ""' true' false' ShingleFilter.DEFAULT_FILLER_TOKEN); " is 253.
Long Statement,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNoTokenSeparator,The length of the statement  "            AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "please"' "pleasedivide"' "divide"' "divideinto"' "into"' "intoshingles"' "shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new int[] { 1' 0' 1' 0' 1' 0' 1 }); " is 275.
Long Statement,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNoTokenSeparator,The length of the statement  "            analyzer = new ShingleAnalyzerWrapper(new MockAnalyzer(Random' MockTokenizer.WHITESPACE' false)' ShingleFilter.DEFAULT_MIN_SHINGLE_SIZE' ShingleFilter.DEFAULT_MAX_SHINGLE_SIZE' ""' false' false' ShingleFilter.DEFAULT_FILLER_TOKEN); " is 231.
Long Statement,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNoTokenSeparator,The length of the statement  "            AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "pleasedivide"' "divideinto"' "intoshingles" }' new int[] { 0' 7' 14 }' new int[] { 13' 18' 27 }' new int[] { 1' 1' 1 }); " is 194.
Long Statement,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNullTokenSeparator,The length of the statement  "            ShingleAnalyzerWrapper analyzer = new ShingleAnalyzerWrapper(new MockAnalyzer(Random' MockTokenizer.WHITESPACE' false)' ShingleFilter.DEFAULT_MIN_SHINGLE_SIZE' ShingleFilter.DEFAULT_MAX_SHINGLE_SIZE' null' true' false' ShingleFilter.DEFAULT_FILLER_TOKEN); " is 255.
Long Statement,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNullTokenSeparator,The length of the statement  "            AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "please"' "pleasedivide"' "divide"' "divideinto"' "into"' "intoshingles"' "shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new int[] { 1' 0' 1' 0' 1' 0' 1 }); " is 275.
Long Statement,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNullTokenSeparator,The length of the statement  "            analyzer = new ShingleAnalyzerWrapper(new MockAnalyzer(Random' MockTokenizer.WHITESPACE' false)' ShingleFilter.DEFAULT_MIN_SHINGLE_SIZE' ShingleFilter.DEFAULT_MAX_SHINGLE_SIZE' ""' false' false' ShingleFilter.DEFAULT_FILLER_TOKEN); " is 231.
Long Statement,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNullTokenSeparator,The length of the statement  "            AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "pleasedivide"' "divideinto"' "intoshingles" }' new int[] { 0' 7' 14 }' new int[] { 13' 18' 27 }' new int[] { 1' 1' 1 }); " is 194.
Long Statement,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestAltTokenSeparator,The length of the statement  "            ShingleAnalyzerWrapper analyzer = new ShingleAnalyzerWrapper(new MockAnalyzer(Random' MockTokenizer.WHITESPACE' false)' ShingleFilter.DEFAULT_MIN_SHINGLE_SIZE' ShingleFilter.DEFAULT_MAX_SHINGLE_SIZE' "<SEP>"' true' false' ShingleFilter.DEFAULT_FILLER_TOKEN); " is 258.
Long Statement,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestAltTokenSeparator,The length of the statement  "            AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "please"' "please<SEP>divide"' "divide"' "divide<SEP>into"' "into"' "into<SEP>shingles"' "shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new int[] { 1' 0' 1' 0' 1' 0' 1 }); " is 290.
Long Statement,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestAltTokenSeparator,The length of the statement  "            analyzer = new ShingleAnalyzerWrapper(new MockAnalyzer(Random' MockTokenizer.WHITESPACE' false)' ShingleFilter.DEFAULT_MIN_SHINGLE_SIZE' ShingleFilter.DEFAULT_MAX_SHINGLE_SIZE' "<SEP>"' false' false' ShingleFilter.DEFAULT_FILLER_TOKEN); " is 236.
Long Statement,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestAltTokenSeparator,The length of the statement  "            AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "please<SEP>divide"' "divide<SEP>into"' "into<SEP>shingles" }' new int[] { 0' 7' 14 }' new int[] { 13' 18' 27 }' new int[] { 1' 1' 1 }); " is 209.
Long Statement,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestAltFillerToken,The length of the statement  "            ShingleAnalyzerWrapper analyzer = new ShingleAnalyzerWrapper(@delegate' ShingleFilter.DEFAULT_MIN_SHINGLE_SIZE' ShingleFilter.DEFAULT_MAX_SHINGLE_SIZE' ShingleFilter.DEFAULT_TOKEN_SEPARATOR' true' false' "--"); " is 210.
Long Statement,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestAltFillerToken,The length of the statement  "            AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "please"' "please divide"' "divide"' "divide --"' "-- shingles"' "shingles" }' new int[] { 0' 0' 7' 7' 19' 19 }' new int[] { 6' 13' 13' 19' 27' 27 }' new int[] { 1' 0' 1' 0' 1' 1 }); " is 255.
Long Statement,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestAltFillerToken,The length of the statement  "            analyzer = new ShingleAnalyzerWrapper(@delegate' ShingleFilter.DEFAULT_MIN_SHINGLE_SIZE' ShingleFilter.DEFAULT_MAX_SHINGLE_SIZE' ShingleFilter.DEFAULT_TOKEN_SEPARATOR' false' false' null); " is 188.
Long Statement,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestAltFillerToken,The length of the statement  "            AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "please divide"' "divide "' " shingles" }' new int[] { 0' 7' 19 }' new int[] { 13' 19' 27 }' new int[] { 1' 1' 1 }); " is 189.
Long Statement,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestAltFillerToken,The length of the statement  "            analyzer = new ShingleAnalyzerWrapper(@delegate' ShingleFilter.DEFAULT_MIN_SHINGLE_SIZE' ShingleFilter.DEFAULT_MAX_SHINGLE_SIZE' ShingleFilter.DEFAULT_TOKEN_SEPARATOR' false' false' ""); " is 186.
Long Statement,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestAltFillerToken,The length of the statement  "            AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "please divide"' "divide "' " shingles" }' new int[] { 0' 7' 19 }' new int[] { 13' 19' 27 }' new int[] { 1' 1' 1 }); " is 189.
Long Statement,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestOutputUnigramsIfNoShinglesSingleToken,The length of the statement  "            ShingleAnalyzerWrapper analyzer = new ShingleAnalyzerWrapper(new MockAnalyzer(Random' MockTokenizer.WHITESPACE' false)' ShingleFilter.DEFAULT_MIN_SHINGLE_SIZE' ShingleFilter.DEFAULT_MAX_SHINGLE_SIZE' ""' false' true' ShingleFilter.DEFAULT_FILLER_TOKEN); " is 253.
Long Statement,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,SetUp,The length of the statement  "            testTokenWithHoles = new Token[] { CreateToken("please"' 0' 6)' CreateToken("divide"' 7' 13)' CreateToken("sentence"' 19' 27' 2)' CreateToken("shingles"' 33' 39' 2) }; " is 167.
Long Statement,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestBiGramFilterWithHoles,The length of the statement  "            this.shingleFilterTest(2' testTokenWithHoles' BI_GRAM_TOKENS_WITH_HOLES' BI_GRAM_POSITION_INCREMENTS_WITH_HOLES' BI_GRAM_TYPES_WITH_HOLES' true); " is 145.
Long Statement,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestBiGramFilterWithoutUnigrams,The length of the statement  "            this.shingleFilterTest(2' TEST_TOKEN' BI_GRAM_TOKENS_WITHOUT_UNIGRAMS' BI_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS' BI_GRAM_TYPES_WITHOUT_UNIGRAMS' false); " is 156.
Long Statement,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestBiGramFilterWithHolesWithoutUnigrams,The length of the statement  "            this.shingleFilterTest(2' testTokenWithHoles' BI_GRAM_TOKENS_WITH_HOLES_WITHOUT_UNIGRAMS' BI_GRAM_POSITION_INCREMENTS_WITH_HOLES_WITHOUT_UNIGRAMS' BI_GRAM_TYPES_WITHOUT_UNIGRAMS' false); " is 186.
Long Statement,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestBiGramFilterWithSingleTokenWithoutUnigrams,The length of the statement  "            this.shingleFilterTest(2' TEST_SINGLE_TOKEN' EMPTY_TOKEN_ARRAY' EMPTY_TOKEN_INCREMENTS_ARRAY' EMPTY_TOKEN_TYPES_ARRAY' false); " is 126.
Long Statement,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestBiGramFilterWithEmptyTokenStream,The length of the statement  "            this.shingleFilterTest(2' EMPTY_TOKEN_ARRAY' EMPTY_TOKEN_ARRAY' EMPTY_TOKEN_INCREMENTS_ARRAY' EMPTY_TOKEN_TYPES_ARRAY' true); " is 125.
Long Statement,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestBiGramFilterWithEmptyTokenStreamWithoutUnigrams,The length of the statement  "            this.shingleFilterTest(2' EMPTY_TOKEN_ARRAY' EMPTY_TOKEN_ARRAY' EMPTY_TOKEN_INCREMENTS_ARRAY' EMPTY_TOKEN_TYPES_ARRAY' false); " is 126.
Long Statement,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTriGramFilterWithoutUnigrams,The length of the statement  "            this.shingleFilterTest(3' TEST_TOKEN' TRI_GRAM_TOKENS_WITHOUT_UNIGRAMS' TRI_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS' TRI_GRAM_TYPES_WITHOUT_UNIGRAMS' false); " is 159.
Long Statement,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestFourGramFilterWithoutUnigrams,The length of the statement  "            this.shingleFilterTest(4' TEST_TOKEN' FOUR_GRAM_TOKENS_WITHOUT_UNIGRAMS' FOUR_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS' FOUR_GRAM_TYPES_WITHOUT_UNIGRAMS' false); " is 162.
Long Statement,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTriGramFilterMinTriGram,The length of the statement  "            this.shingleFilterTest(3' 3' TEST_TOKEN' TRI_GRAM_TOKENS_MIN_TRI_GRAM' TRI_GRAM_POSITION_INCREMENTS_MIN_TRI_GRAM' TRI_GRAM_TYPES_MIN_TRI_GRAM' true); " is 149.
Long Statement,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTriGramFilterWithoutUnigramsMinTriGram,The length of the statement  "            this.shingleFilterTest(3' 3' TEST_TOKEN' TRI_GRAM_TOKENS_WITHOUT_UNIGRAMS_MIN_TRI_GRAM' TRI_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS_MIN_TRI_GRAM' TRI_GRAM_TYPES_WITHOUT_UNIGRAMS_MIN_TRI_GRAM' false); " is 201.
Long Statement,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestFourGramFilterMinTriGram,The length of the statement  "            this.shingleFilterTest(3' 4' TEST_TOKEN' FOUR_GRAM_TOKENS_MIN_TRI_GRAM' FOUR_GRAM_POSITION_INCREMENTS_MIN_TRI_GRAM' FOUR_GRAM_TYPES_MIN_TRI_GRAM' true); " is 152.
Long Statement,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestFourGramFilterWithoutUnigramsMinTriGram,The length of the statement  "            this.shingleFilterTest(3' 4' TEST_TOKEN' FOUR_GRAM_TOKENS_WITHOUT_UNIGRAMS_MIN_TRI_GRAM' FOUR_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS_MIN_TRI_GRAM' FOUR_GRAM_TYPES_WITHOUT_UNIGRAMS_MIN_TRI_GRAM' false); " is 204.
Long Statement,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestFourGramFilterMinFourGram,The length of the statement  "            this.shingleFilterTest(4' 4' TEST_TOKEN' FOUR_GRAM_TOKENS_MIN_FOUR_GRAM' FOUR_GRAM_POSITION_INCREMENTS_MIN_FOUR_GRAM' FOUR_GRAM_TYPES_MIN_FOUR_GRAM' true); " is 155.
Long Statement,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestFourGramFilterWithoutUnigramsMinFourGram,The length of the statement  "            this.shingleFilterTest(4' 4' TEST_TOKEN' FOUR_GRAM_TOKENS_WITHOUT_UNIGRAMS_MIN_FOUR_GRAM' FOUR_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS_MIN_FOUR_GRAM' FOUR_GRAM_TYPES_WITHOUT_UNIGRAMS_MIN_FOUR_GRAM' false); " is 207.
Long Statement,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestBiGramFilterNoSeparator,The length of the statement  "            this.shingleFilterTest(""' 2' 2' TEST_TOKEN' BI_GRAM_TOKENS_NO_SEPARATOR' BI_GRAM_POSITION_INCREMENTS_NO_SEPARATOR' BI_GRAM_TYPES_NO_SEPARATOR' true); " is 150.
Long Statement,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestBiGramFilterWithoutUnigramsNoSeparator,The length of the statement  "            this.shingleFilterTest(""' 2' 2' TEST_TOKEN' BI_GRAM_TOKENS_WITHOUT_UNIGRAMS_NO_SEPARATOR' BI_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS_NO_SEPARATOR' BI_GRAM_TYPES_WITHOUT_UNIGRAMS_NO_SEPARATOR' false); " is 202.
Long Statement,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTriGramFilterNoSeparator,The length of the statement  "            this.shingleFilterTest(""' 2' 3' TEST_TOKEN' TRI_GRAM_TOKENS_NO_SEPARATOR' TRI_GRAM_POSITION_INCREMENTS_NO_SEPARATOR' TRI_GRAM_TYPES_NO_SEPARATOR' true); " is 153.
Long Statement,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTriGramFilterWithoutUnigramsNoSeparator,The length of the statement  "            this.shingleFilterTest(""' 2' 3' TEST_TOKEN' TRI_GRAM_TOKENS_WITHOUT_UNIGRAMS_NO_SEPARATOR' TRI_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS_NO_SEPARATOR' TRI_GRAM_TYPES_WITHOUT_UNIGRAMS_NO_SEPARATOR' false); " is 205.
Long Statement,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestBiGramFilterAltSeparator,The length of the statement  "            this.shingleFilterTest("<SEP>"' 2' 2' TEST_TOKEN' BI_GRAM_TOKENS_ALT_SEPARATOR' BI_GRAM_POSITION_INCREMENTS_ALT_SEPARATOR' BI_GRAM_TYPES_ALT_SEPARATOR' true); " is 158.
Long Statement,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestBiGramFilterWithoutUnigramsAltSeparator,The length of the statement  "            this.shingleFilterTest("<SEP>"' 2' 2' TEST_TOKEN' BI_GRAM_TOKENS_WITHOUT_UNIGRAMS_ALT_SEPARATOR' BI_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS_ALT_SEPARATOR' BI_GRAM_TYPES_WITHOUT_UNIGRAMS_ALT_SEPARATOR' false); " is 210.
Long Statement,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTriGramFilterAltSeparator,The length of the statement  "            this.shingleFilterTest("<SEP>"' 2' 3' TEST_TOKEN' TRI_GRAM_TOKENS_ALT_SEPARATOR' TRI_GRAM_POSITION_INCREMENTS_ALT_SEPARATOR' TRI_GRAM_TYPES_ALT_SEPARATOR' true); " is 161.
Long Statement,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTriGramFilterWithoutUnigramsAltSeparator,The length of the statement  "            this.shingleFilterTest("<SEP>"' 2' 3' TEST_TOKEN' TRI_GRAM_TOKENS_WITHOUT_UNIGRAMS_ALT_SEPARATOR' TRI_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS_ALT_SEPARATOR' TRI_GRAM_TYPES_WITHOUT_UNIGRAMS_ALT_SEPARATOR' false); " is 213.
Long Statement,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTriGramFilterNullSeparator,The length of the statement  "            this.shingleFilterTest(null' 2' 3' TEST_TOKEN' TRI_GRAM_TOKENS_NULL_SEPARATOR' TRI_GRAM_POSITION_INCREMENTS_NULL_SEPARATOR' TRI_GRAM_TYPES_NULL_SEPARATOR' true); " is 161.
Long Statement,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestPositionIncrementEqualToN,The length of the statement  "            this.shingleFilterTest(2' 3' TEST_TOKEN_POS_INCR_EQUAL_TO_N' TRI_GRAM_TOKENS_POS_INCR_EQUAL_TO_N' TRI_GRAM_POSITION_INCREMENTS_POS_INCR_EQUAL_TO_N' TRI_GRAM_TYPES_POS_INCR_EQUAL_TO_N' true); " is 190.
Long Statement,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestPositionIncrementEqualToNWithoutUnigrams,The length of the statement  "            this.shingleFilterTest(2' 3' TEST_TOKEN_POS_INCR_EQUAL_TO_N' TRI_GRAM_TOKENS_POS_INCR_EQUAL_TO_N_WITHOUT_UNIGRAMS' TRI_GRAM_POSITION_INCREMENTS_POS_INCR_EQUAL_TO_N_WITHOUT_UNIGRAMS' TRI_GRAM_TYPES_POS_INCR_EQUAL_TO_N_WITHOUT_UNIGRAMS' false); " is 242.
Long Statement,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestPositionIncrementGreaterThanN,The length of the statement  "            this.shingleFilterTest(2' 3' TEST_TOKEN_POS_INCR_GREATER_THAN_N' TRI_GRAM_TOKENS_POS_INCR_GREATER_THAN_N' TRI_GRAM_POSITION_INCREMENTS_POS_INCR_GREATER_THAN_N' TRI_GRAM_TYPES_POS_INCR_GREATER_THAN_N' true); " is 206.
Long Statement,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestPositionIncrementGreaterThanNWithoutUnigrams,The length of the statement  "            this.shingleFilterTest(2' 3' TEST_TOKEN_POS_INCR_GREATER_THAN_N' TRI_GRAM_TOKENS_POS_INCR_GREATER_THAN_N_WITHOUT_UNIGRAMS' TRI_GRAM_POSITION_INCREMENTS_POS_INCR_GREATER_THAN_N_WITHOUT_UNIGRAMS' TRI_GRAM_TYPES_POS_INCR_GREATER_THAN_N_WITHOUT_UNIGRAMS' false); " is 258.
Long Statement,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestReset,The length of the statement  "            AssertTokenStreamContents(filter' new string[] { "please"' "please divide"' "divide"' "divide this"' "this"' "this sentence"' "sentence" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new string[] { TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE }' new int[] { 1' 0' 1' 0' 1' 0' 1 }); " is 416.
Long Statement,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestReset,The length of the statement  "            AssertTokenStreamContents(filter' new string[] { "please"' "please divide"' "divide"' "divide this"' "this"' "this sentence"' "sentence" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new string[] { TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE }' new int[] { 1' 0' 1' 0' 1' 0' 1 }); " is 416.
Long Statement,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestOutputUnigramsIfNoShinglesSingleTokenCase,The length of the statement  "            this.shingleFilterTest(2' 2' TEST_SINGLE_TOKEN' SINGLE_TOKEN' SINGLE_TOKEN_INCREMENTS' SINGLE_TOKEN_TYPES' false' true); " is 120.
Long Statement,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestOutputUnigramsIfNoShinglesWithSimpleUnigramlessBigram,The length of the statement  "            this.shingleFilterTest(2' 2' TEST_TOKEN' BI_GRAM_TOKENS_WITHOUT_UNIGRAMS' BI_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS' BI_GRAM_TYPES_WITHOUT_UNIGRAMS' false' true); " is 165.
Long Statement,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestOutputUnigramsIfNoShinglesWithMultipleInputTokens,The length of the statement  "            this.shingleFilterTest(7' 7' TEST_TOKEN' TEST_TOKEN' UNIGRAM_ONLY_POSITION_INCREMENTS' UNIGRAM_ONLY_TYPES' false' true); " is 120.
Long Statement,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTrailingHole1,The length of the statement  "            AssertTokenStreamContents(filter' new string[] { "wizard"' "wizard _" }' new int[] { 0' 0 }' new int[] { 6' 9 }' new int[] { 1' 0 }' 9); " is 136.
Long Statement,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTrailingHole2,The length of the statement  "            AssertTokenStreamContents(filter' new string[] { "purple"' "purple wizard"' "wizard"' "wizard _" }' new int[] { 0' 0' 7' 7 }' new int[] { 6' 13' 13' 16 }' new int[] { 1' 0' 1' 0 }' 16); " is 185.
Long Statement,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHoles,The length of the statement  "            AssertTokenStreamContents(filter' new string[] { "purple"' "purple wizard"' "wizard"' "wizard _" }' new int[] { 0' 0' 7' 7 }' new int[] { 6' 13' 13' 20 }' new int[] { 1' 0' 1' 0 }' 20); " is 185.
Long Statement,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingle,The length of the statement  "            AssertTokenStreamContents(filter' new string[] { "purple"' "purple wizard"' "purple wizard _"' "wizard"' "wizard _"' "wizard _ _" }' new int[] { 0' 0' 0' 7' 7' 7 }' new int[] { 6' 13' 20' 13' 20' 20 }' new int[] { 1' 0' 0' 1' 0' 0 }' 20); " is 238.
Long Statement,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingleWithTokenFiller,The length of the statement  "            AssertTokenStreamContents(filter' new string[] { "purple"' "purple wizard"' "purple wizard --"' "wizard"' "wizard --"' "wizard -- --" }' new int[] { 0' 0' 0' 7' 7' 7 }' new int[] { 6' 13' 20' 13' 20' 20 }' new int[] { 1' 0' 0' 1' 0' 0 }' 20); " is 242.
Long Statement,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingleWithTokenFiller,The length of the statement  "            AssertTokenStreamContents(filter' new string[] { "purple"' "purple wizard"' "purple wizard "' "wizard"' "wizard "' "wizard  " }' new int[] { 0' 0' 0' 7' 7' 7 }' new int[] { 6' 13' 20' 13' 20' 20 }' new int[] { 1' 0' 0' 1' 0' 0 }' 20); " is 234.
Long Statement,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingleWithTokenFiller,The length of the statement  "            AssertTokenStreamContents(filter' new string[] { "purple"' "purple wizard"' "purple wizard "' "wizard"' "wizard "' "wizard  " }' new int[] { 0' 0' 0' 7' 7' 7 }' new int[] { 6' 13' 20' 13' 20' 20 }' new int[] { 1' 0' 0' 1' 0' 0 }' 20); " is 234.
Long Statement,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingleWithTokenFiller,The length of the statement  "            AssertTokenStreamContents(filter' new string[] { "purple"' "purplewizard"' "purplewizard"' "wizard"' "wizard"' "wizard" }' new int[] { 0' 0' 0' 7' 7' 7 }' new int[] { 6' 13' 20' 13' 20' 20 }' new int[] { 1' 0' 0' 1' 0' 0 }' 20); " is 228.
Long Statement,Lucene.Net.Analysis.Shingle,TestShingleFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\TestShingleFilterFactory.cs,TestMaxShingleSize,The length of the statement  "            AssertTokenStreamContents(stream' new string[] { "this"' "this is"' "this is a"' "is"' "is a"' "is a test"' "a"' "a test"' "test" }); " is 133.
Long Statement,Lucene.Net.Analysis.Shingle,TestShingleFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\TestShingleFilterFactory.cs,TestMinShingleSize,The length of the statement  "            AssertTokenStreamContents(stream' new string[] { "this"' "this is a"' "this is a test"' "is"' "is a test"' "a"' "test" }); " is 122.
Long Statement,Lucene.Net.Analysis.Shingle,TestShingleFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\TestShingleFilterFactory.cs,TestMinShingleSizeNoUnigrams,The length of the statement  "            stream = TokenFilterFactory("Shingle"' "minShingleSize"' "3"' "maxShingleSize"' "4"' "outputUnigrams"' "false").Create(stream); " is 127.
Long Statement,Lucene.Net.Analysis.Shingle,TestShingleFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\TestShingleFilterFactory.cs,TestEqualMinAndMaxShingleSizeNoUnigrams,The length of the statement  "            stream = TokenFilterFactory("Shingle"' "minShingleSize"' "3"' "maxShingleSize"' "3"' "outputUnigrams"' "false").Create(stream); " is 127.
Long Statement,Lucene.Net.Analysis.Shingle,TestShingleFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\TestShingleFilterFactory.cs,TestTokenSeparator,The length of the statement  "            AssertTokenStreamContents(stream' new string[] { "this"' "this=BLAH=is"' "is"' "is=BLAH=a"' "a"' "a=BLAH=test"' "test" }); " is 122.
Long Statement,Lucene.Net.Analysis.Shingle,TestShingleFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\TestShingleFilterFactory.cs,TestMinShingleSizeAndTokenSeparator,The length of the statement  "            stream = TokenFilterFactory("Shingle"' "minShingleSize"' "3"' "maxShingleSize"' "4"' "tokenSeparator"' "=BLAH=").Create(stream); " is 128.
Long Statement,Lucene.Net.Analysis.Shingle,TestShingleFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\TestShingleFilterFactory.cs,TestMinShingleSizeAndTokenSeparator,The length of the statement  "            AssertTokenStreamContents(stream' new string[] { "this"' "this=BLAH=is=BLAH=a"' "this=BLAH=is=BLAH=a=BLAH=test"' "is"' "is=BLAH=a=BLAH=test"' "a"' "test" }); " is 157.
Long Statement,Lucene.Net.Analysis.Shingle,TestShingleFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\TestShingleFilterFactory.cs,TestMinShingleSizeAndTokenSeparatorNoUnigrams,The length of the statement  "            stream = TokenFilterFactory("Shingle"' "minShingleSize"' "3"' "maxShingleSize"' "4"' "tokenSeparator"' "=BLAH="' "outputUnigrams"' "false").Create(stream); " is 155.
Long Statement,Lucene.Net.Analysis.Shingle,TestShingleFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\TestShingleFilterFactory.cs,TestMinShingleSizeAndTokenSeparatorNoUnigrams,The length of the statement  "            AssertTokenStreamContents(stream' new string[] { "this=BLAH=is=BLAH=a"' "this=BLAH=is=BLAH=a=BLAH=test"' "is=BLAH=a=BLAH=test" }); " is 130.
Long Statement,Lucene.Net.Analysis.Sinks,DateRecognizerSinkTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Sinks\DateRecognizerSinkTokenizerTest.cs,Test,The length of the statement  "            DateRecognizerSinkFilter sinkFilter = new DateRecognizerSinkFilter(new string[] { "MM/dd/yyyy"' "M/dd/yyyy"' "MM/d/yyyy"' "M/d/yyyy" }' CultureInfo.InvariantCulture); " is 166.
Long Statement,Lucene.Net.Analysis.Sinks,DateRecognizerSinkTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Sinks\DateRecognizerSinkTokenizerTest.cs,Test,The length of the statement  "            TeeSinkTokenFilter tee = new TeeSinkTokenFilter(new MockTokenizer(new StringReader(test)' MockTokenizer.WHITESPACE' false)); " is 124.
Long Statement,Lucene.Net.Analysis.Sinks,DateRecognizerSinkTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Sinks\DateRecognizerSinkTokenizerTest.cs,TestLooseDateFormat,The length of the statement  "            TeeSinkTokenFilter tee = new TeeSinkTokenFilter(new MockTokenizer(new StringReader(test)' MockTokenizer.WHITESPACE' false)); " is 124.
Long Statement,Lucene.Net.Analysis.Sinks,TestTeeSinkTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Sinks\TestTeeSinkTokenFilter.cs,TestGeneral,The length of the statement  "            TeeSinkTokenFilter source = new TeeSinkTokenFilter(new MockTokenizer(new StringReader(buffer1.ToString())' MockTokenizer.WHITESPACE' false)); " is 141.
Long Statement,Lucene.Net.Analysis.Sinks,TestTeeSinkTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Sinks\TestTeeSinkTokenFilter.cs,TestMultipleSources,The length of the statement  "            TeeSinkTokenFilter tee1 = new TeeSinkTokenFilter(new MockTokenizer(new StringReader(buffer1.ToString())' MockTokenizer.WHITESPACE' false)); " is 139.
Long Statement,Lucene.Net.Analysis.Sinks,TestTeeSinkTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Sinks\TestTeeSinkTokenFilter.cs,TestMultipleSources,The length of the statement  "            TeeSinkTokenFilter tee2 = new TeeSinkTokenFilter(new MockTokenizer(new StringReader(buffer2.ToString())' MockTokenizer.WHITESPACE' false)); " is 139.
Long Statement,Lucene.Net.Analysis.Sinks,TestTeeSinkTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Sinks\TestTeeSinkTokenFilter.cs,Performance,The length of the statement  "                TeeSinkTokenFilter teeStream = new TeeSinkTokenFilter(new StandardFilter(TEST_VERSION_CURRENT' new StandardTokenizer(TEST_VERSION_CURRENT' new StringReader(buffer.ToString())))); " is 178.
Long Statement,Lucene.Net.Analysis.Sinks,TestTeeSinkTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Sinks\TestTeeSinkTokenFilter.cs,Performance,The length of the statement  "                TokenStream stream = new ModuloTokenFilter(this' new StandardFilter(TEST_VERSION_CURRENT' new StandardTokenizer(TEST_VERSION_CURRENT' new StringReader(buffer.ToString())))' 100); " is 178.
Long Statement,Lucene.Net.Analysis.Sinks,TestTeeSinkTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Sinks\TestTeeSinkTokenFilter.cs,Performance,The length of the statement  "                        stream = new StandardFilter(TEST_VERSION_CURRENT' new StandardTokenizer(TEST_VERSION_CURRENT' new StringReader(buffer.ToString()))); " is 132.
Long Statement,Lucene.Net.Analysis.Sinks,TestTeeSinkTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Sinks\TestTeeSinkTokenFilter.cs,Performance,The length of the statement  "                        stream = new ModuloTokenFilter(this' new StandardFilter(TEST_VERSION_CURRENT' new StandardTokenizer(TEST_VERSION_CURRENT' new StringReader(buffer.ToString())))' modCounts[j]); " is 175.
Long Statement,Lucene.Net.Analysis.Sinks,TestTeeSinkTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Sinks\TestTeeSinkTokenFilter.cs,Performance,The length of the statement  "                        teeStream = new TeeSinkTokenFilter(new StandardFilter(TEST_VERSION_CURRENT' new StandardTokenizer(TEST_VERSION_CURRENT' new StringReader(buffer.ToString())))); " is 159.
Long Statement,Lucene.Net.Analysis.Sinks,TokenRangeSinkTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Sinks\TokenRangeSinkTokenizerTest.cs,Test,The length of the statement  "            TeeSinkTokenFilter tee = new TeeSinkTokenFilter(new MockTokenizer(new StringReader(test)' MockTokenizer.WHITESPACE' false)); " is 124.
Long Statement,Lucene.Net.Analysis.Sinks,TokenTypeSinkTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Sinks\TokenTypeSinkTokenizerTest.cs,Test,The length of the statement  "            TeeSinkTokenFilter ttf = new TeeSinkTokenFilter(new WordTokenFilter(this' new MockTokenizer(new StringReader(test)' MockTokenizer.WHITESPACE' false))); " is 151.
Long Statement,Lucene.Net.Analysis.Snowball,TestSnowballPorterFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Snowball\TestSnowballPorterFilterFactory.cs,TestProtected,The length of the statement  "            stream = TokenFilterFactory("SnowballPorter"' TEST_VERSION_CURRENT' new StringMockResourceLoader("ridding")' "protected"' "protwords.txt"' "language"' "English").Create(stream); " is 177.
Long Statement,Lucene.Net.Analysis.Snowball,TestSnowballVocab,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Snowball\TestSnowballVocab.cs,AssertCorrectOutput,The length of the statement  "            VocabularyAssert.AssertVocabulary(a' GetDataFile("TestSnowballVocabData.zip")' dataDirectory + "/voc.txt"' dataDirectory + "/output.txt"); " is 138.
Long Statement,Lucene.Net.Analysis.Standard,TestUAX29URLEmailTokenizerFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Standard\TestUAX29URLEmailTokenizerFactory.cs,TestArabic,The length of the statement  "            Reader reader = new StringReader("الفيلم الوثائقي الأول عن ويكيبيديا يسمى \"الحقيقة بالأرقام: قصة ويكيبيديا\" (بالإنجليزية: Truth in Numbers: The Wikipedia Story)، سيتم إطلاقه في 2008."); " is 187.
Long Statement,Lucene.Net.Analysis.Standard,TestUAX29URLEmailTokenizerFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Standard\TestUAX29URLEmailTokenizerFactory.cs,TestArabic,The length of the statement  "            AssertTokenStreamContents(stream' new string[] { "الفيلم"' "الوثائقي"' "الأول"' "عن"' "ويكيبيديا"' "يسمى"' "الحقيقة"' "بالأرقام"' "قصة"' "ويكيبيديا"' "بالإنجليزية"' "Truth"' "in"' "Numbers"' "The"' "Wikipedia"' "Story"' "سيتم"' "إطلاقه"' "في"' "2008" }); " is 254.
Long Statement,Lucene.Net.Analysis.Standard,TestUAX29URLEmailTokenizerFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Standard\TestUAX29URLEmailTokenizerFactory.cs,TestURLs,The length of the statement  "            string textWithURLs = "http://johno.jsmf.net/knowhow/ngrams/index.php?table=en-dickens-word-2gram&paragraphs=50&length=200&no-ads=on\n" + " some extra\nWords thrown in here. " + "http://c5-3486.bisynxu.FR/aI.YnNms/" + " samba Halta gamba " + "ftp://119.220.152.185/JgJgdZ/31aW5c/viWlfQSTs5/1c8U5T/ih5rXx/YfUJ/xBW1uHrQo6.R\n" + "M19nq.0URV4A.Me.CC/mj0kgt6hue/dRXv8YVLOw9v/CIOqb\n" + "Https://yu7v33rbt.vC6U3.XN--KPRW13D/y%4fMSzkGFlm/wbDF4m" + " inter Locutio " + "[c2d4::]/%471j5l/j3KFN%AAAn/Fip-NisKH/\n" + "file:///aXvSZS34is/eIgM8s~U5dU4Ifd%c7" + " blah Sirrah woof " + "http://[a42:a7b6::]/qSmxSUU4z/%52qVl4\n"; " is 614.
Long Statement,Lucene.Net.Analysis.Standard,TestUAX29URLEmailTokenizerFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Standard\TestUAX29URLEmailTokenizerFactory.cs,TestURLs,The length of the statement  "            AssertTokenStreamContents(stream' new string[] { "http://johno.jsmf.net/knowhow/ngrams/index.php?table=en-dickens-word-2gram&paragraphs=50&length=200&no-ads=on"' "some"' "extra"' "Words"' "thrown"' "in"' "here"' "http://c5-3486.bisynxu.FR/aI.YnNms/"' "samba"' "Halta"' "gamba"' "ftp://119.220.152.185/JgJgdZ/31aW5c/viWlfQSTs5/1c8U5T/ih5rXx/YfUJ/xBW1uHrQo6.R"' "M19nq.0URV4A.Me.CC/mj0kgt6hue/dRXv8YVLOw9v/CIOqb"' "Https://yu7v33rbt.vC6U3.XN--KPRW13D/y%4fMSzkGFlm/wbDF4m"' "inter"' "Locutio"' "[c2d4::]/%471j5l/j3KFN%AAAn/Fip-NisKH/"' "file:///aXvSZS34is/eIgM8s~U5dU4Ifd%c7"' "blah"' "Sirrah"' "woof"' "http://[a42:a7b6::]/qSmxSUU4z/%52qVl4" }); " is 643.
Long Statement,Lucene.Net.Analysis.Standard,TestUAX29URLEmailTokenizerFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Standard\TestUAX29URLEmailTokenizerFactory.cs,TestEmails,The length of the statement  "            string textWithEmails = " some extra\nWords thrown in here. " + "dJ8ngFi@avz13m.CC\n" + "kU-l6DS@[082.015.228.189]\n" + "\"%U\u0012@?\\B\"@Fl2d.md" + " samba Halta gamba " + "Bvd#@tupjv.sn\n" + "SBMm0Nm.oyk70.rMNdd8k.#ru3LI.gMMLBI.0dZRD4d.RVK2nY@au58t.B13albgy4u.mt\n" + "~+Kdz@3mousnl.SE\n" + " inter Locutio " + "C'ts`@Vh4zk.uoafcft-dr753x4odt04q.UY\n" + "}0tzWYDBuy@cSRQAABB9B.7c8xawf75-cyo.PM" + " blah Sirrah woof " + "lMahAA.j/5.RqUjS745.DtkcYdi@d2-4gb-l6.ae\n" + "lv'p@tqk.vj5s0tgl.0dlu7su3iyiaz.dqso.494.3hb76.XN--MGBAAM7A8H\n"; " is 536.
Long Statement,Lucene.Net.Analysis.Standard,TestUAX29URLEmailTokenizerFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Standard\TestUAX29URLEmailTokenizerFactory.cs,TestEmails,The length of the statement  "            AssertTokenStreamContents(stream' new string[] { "some"' "extra"' "Words"' "thrown"' "in"' "here"' "dJ8ngFi@avz13m.CC"' "kU-l6DS@[082.015.228.189]"' "\"%U\u0012@?\\B\"@Fl2d.md"' "samba"' "Halta"' "gamba"' "Bvd#@tupjv.sn"' "SBMm0Nm.oyk70.rMNdd8k.#ru3LI.gMMLBI.0dZRD4d.RVK2nY@au58t.B13albgy4u.mt"' "~+Kdz@3mousnl.SE"' "inter"' "Locutio"' "C'ts`@Vh4zk.uoafcft-dr753x4odt04q.UY"' "}0tzWYDBuy@cSRQAABB9B.7c8xawf75-cyo.PM"' "blah"' "Sirrah"' "woof"' "lMahAA.j/5.RqUjS745.DtkcYdi@d2-4gb-l6.ae"' "lv'p@tqk.vj5s0tgl.0dlu7su3iyiaz.dqso.494.3hb76.XN--MGBAAM7A8H" }); " is 555.
Long Statement,Lucene.Net.Analysis.Standard,TestUAX29URLEmailTokenizerFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Standard\TestUAX29URLEmailTokenizerFactory.cs,TestMatchVersion,The length of the statement  "            stream = TokenizerFactory("UAX29URLEmail"' Version.LUCENE_31' new ClasspathResourceLoader(this.GetType())).Create(reader); " is 122.
Long Statement,Lucene.Net.Analysis.Synonym,TestMultiWordSynonyms_,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestMultiWordSynonyms.cs,TestMultiWordSynonymsOld,The length of the statement  "            SlowSynonymFilter ts = new SlowSynonymFilter(new MockTokenizer(new StringReader("a e")' MockTokenizer.WHITESPACE' false)' synMap); " is 130.
Long Statement,Lucene.Net.Analysis.Synonym,TestMultiWordSynonyms_,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestMultiWordSynonyms.cs,TestMultiWordSynonyms,The length of the statement  "            stream = TokenFilterFactory("Synonym"' TEST_VERSION_CURRENT' new StringMockResourceLoader("a b c'd")' "synonyms"' "synonyms.txt").Create(stream); " is 145.
Long Statement,Lucene.Net.Analysis.Synonym,TestSlowSynonymFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSlowSynonymFilter.cs,TestMatching,The length of the statement  "            AssertTokenizesTo(map' "zoo zoo $ zoo"' new string[] { "zoo"' "zoo"' "zoo"' "zoo"' "zoo"' "zoo"' "$"' "zoo"' "zoo"' "zoo" }); " is 125.
Long Statement,Lucene.Net.Analysis.Synonym,TestSlowSynonymFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSlowSynonymFilter.cs,TestIncludeOrig,The length of the statement  "            AssertTokenizesTo(map' "zoo zoo $ zoo"' new string[] { "zoo"' "zoo"' "zoo"' "$"' "zoo"' "zoo"' "zoo" }' new int[] { 1' 0' 1' 1' 1' 0' 1 }); " is 139.
Long Statement,Lucene.Net.Analysis.Synonym,TestSlowSynonymFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSlowSynonymFilter.cs,TestMapMerge,The length of the statement  "            AssertTokenizesTo(map' "a"' new string[] { "a1"' "a2"' "a3"' "A3"' "a4"' "a5"' "A5"' "a6" }' new int[] { 1' 1' 1' 0' 1' 1' 0' 1 }); " is 131.
Long Statement,Lucene.Net.Analysis.Synonym,TestSlowSynonymFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSlowSynonymFilter.cs,TestOverlap,The length of the statement  "            AssertTokenizesTo(map' "a"' new string[] { "a3"' "a5"' "a7"' "a8"' "a9"' "a10"' "a11"' "a111" }' new int[] { 1' 2' 2' 1' 1' 1' 1' 100 }); " is 137.
Long Statement,Lucene.Net.Analysis.Synonym,TestSlowSynonymFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSlowSynonymFilter.cs,TestOffsetBug,The length of the statement  "            AssertTokenizesTo(map' Tokens("a'1'0'1 a'1'2'3 x'1'4'5")' new string[] { "b"' "y" }' new int[] { 0' 4 }' new int[] { 3' 5 }' new int[] { 1' 1 }); " is 145.
Long Statement,Lucene.Net.Analysis.Synonym,TestSynonymFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymFilterFactory.cs,TestSynonymsOld,The length of the statement  "            stream = TokenFilterFactory("Synonym"' Version.LUCENE_33' new ClasspathResourceLoader(this.GetType())' "synonyms"' "synonyms.txt").Create(stream); " is 146.
Long Statement,Lucene.Net.Analysis.Synonym,TestSynonymFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymFilterFactory.cs,TestMultiwordOffsetsOld,The length of the statement  "            stream = TokenFilterFactory("Synonym"' Version.LUCENE_33' new StringMockResourceLoader("national hockey league' nhl")' "synonyms"' "synonyms.txt").Create(stream); " is 162.
Long Statement,Lucene.Net.Analysis.Synonym,TestSynonymFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymFilterFactory.cs,TestMultiwordOffsetsOld,The length of the statement  "            AssertTokenStreamContents(stream' new string[] { "national"' "nhl"' "hockey"' "league" }' new int[] { 0' 0' 0' 0 }' new int[] { 22' 22' 22' 22 }' new int[] { 1' 0' 1' 1 }); " is 172.
Long Statement,Lucene.Net.Analysis.Synonym,TestSynonymFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymFilterFactory.cs,TestEmptySynonyms,The length of the statement  "            stream = TokenFilterFactory("Synonym"' TEST_VERSION_CURRENT' new StringMockResourceLoader("")' "synonyms"' "synonyms.txt").Create(stream); // empty file! " is 153.
Long Statement,Lucene.Net.Analysis.Synonym,TestSynonymFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymFilterFactory.cs,TestFormat,The length of the statement  "            CheckSolrSynonyms(TokenFilterFactory("Synonym"' "synonyms"' "synonyms.txt"' "format"' typeof(SolrSynonymParser).AssemblyQualifiedName)); " is 136.
Long Statement,Lucene.Net.Analysis.Synonym,TestSynonymFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymFilterFactory.cs,DoTestTokenizerFactoryArguments,The length of the statement  "            factory = TokenFilterFactory("Synonym"' ver' "synonyms"' "synonyms.txt"' "tokenizerFactory"' clazz' "pattern"' "(.*)"' "group"' "0"); " is 133.
Long Statement,Lucene.Net.Analysis.Synonym,TestSynonymFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymFilterFactory.cs,DoTestTokenizerFactoryArguments,The length of the statement  "            factory = TokenFilterFactory("Synonym"' ver' "synonyms"' "synonyms.txt"' "tokenizerFactory"' clazz' "tokenizerFactory.pattern"' "(.*)"' "tokenizerFactory.group"' "0"); " is 167.
Long Statement,Lucene.Net.Analysis.Synonym,TestSynonymFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymFilterFactory.cs,DoTestTokenizerFactoryArguments,The length of the statement  "                factory = TokenFilterFactory("Synonym"' ver' "synonyms"' "synonyms.txt"' "tokenizerFactory"' clazz' "tokenizerFactory.pattern"' "(.*)"' "tokenizerFactory.bogusbogusbogus"' "bogus"' "tokenizerFactory.group"' "0"); " is 212.
Long Statement,Lucene.Net.Analysis.Synonym,TestSynonymFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymFilterFactory.cs,AssertDelegator,The length of the statement  "            assertTrue("delegator not expected class: " + delegator.GetType()' delegatorClass.GetTypeInfo().IsInstanceOfType(delegator)); " is 125.
Long Statement,Lucene.Net.Analysis.Synonym,TestSynonymMapFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymMapFilter.cs,Verify,The length of the statement  "                    Console.WriteLine("  incr token=" + termAtt.ToString() + " posIncr=" + posIncrAtt.PositionIncrement + " startOff=" + offsetAtt.StartOffset + " endOff=" + offsetAtt.EndOffset); " is 175.
Long Statement,Lucene.Net.Analysis.Synonym,TestSynonymMapFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymMapFilter.cs,Verify,The length of the statement  "                            Console.WriteLine("  incr token=" + termAtt.ToString() + " posIncr=" + posIncrAtt.PositionIncrement + " startOff=" + offsetAtt.StartOffset + " endOff=" + offsetAtt.EndOffset); " is 175.
Long Statement,Lucene.Net.Analysis.Synonym,TestSynonymMapFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymMapFilter.cs,Verify,The length of the statement  "                            expectedEndOffset = int.Parse(expectedAtPos[atPos].Substring(1 + colonIndex' underbarIndex - (1 + colonIndex))' CultureInfo.InvariantCulture); " is 142.
Long Statement,Lucene.Net.Analysis.Synonym,TestSynonymMapFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymMapFilter.cs,SlowSynMatcher,The length of the statement  "                    for (int nextInputIDX = inputIDX + 1; nextInputIDX < numInputs && nextInputIDX < (inputIDX + synInLength); nextInputIDX++) " is 122.
Long Statement,Lucene.Net.Analysis.Synonym,TestSynonymMapFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymMapFilter.cs,TestVanishingTerms,The length of the statement  "            AssertAnalyzesTo(analyzer' "xyzzy aaa pot of gold"' new string[] { "xyzzy"' "aaaa1"' "pot"' "aaaa2"' "of"' "aaaa3"' "gold" }); " is 126.
Long Statement,Lucene.Net.Analysis.Synonym,TestSynonymMapFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymMapFilter.cs,TestRecursion2,The length of the statement  "            AssertAnalyzesTo(a' "zoo zoo $ zoo"' new string[] { "zoo"' "zoo"' "zoo"' "zoo"' "zoo"' "$"' "zoo"' "zoo"' "zoo"' "zoo" }' new int[] { 1' 0' 1' 0' 0' 1' 0' 1' 0' 1 }); " is 166.
Long Statement,Lucene.Net.Analysis.Synonym,TestSynonymMapFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymMapFilter.cs,TestRecursion4,The length of the statement  "            AssertAnalyzesTo(a' "zoo zoo $ zoo"' new string[] { "zoo"' "zoo"' "zoo"' "$"' "zoo"' "zoo"' "zoo" }' new int[] { 1' 0' 1' 1' 1' 0' 1 }); " is 136.
Long Statement,Lucene.Net.Analysis.Synonym,TestSynonymMapFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymMapFilter.cs,TestMultiwordOffsets,The length of the statement  "            AssertAnalyzesTo(a' "national hockey league"' new string[] { "national"' "nhl"' "hockey"' "league" }' new int[] { 0' 0' 9' 16 }' new int[] { 8' 22' 15' 22 }' new int[] { 1' 0' 1' 1 }); " is 184.
Long Statement,Lucene.Net.Analysis.Synonym,TestWordnetSynonymParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestWordnetSynonymParser.cs,TestSynonyms,The length of the statement  "            AssertAnalyzesTo(analyzer' "Lost in the woods"' new string[] { "Lost"' "in"' "the"' "woods"' "wood"' "forest" }' new int[] { 0' 5' 8' 12' 12' 12 }' new int[] { 4' 7' 11' 17' 17' 17 }' new int[] { 1' 1' 1' 1' 0' 0 }); " is 216.
Long Statement,Lucene.Net.Analysis.Tr,TestApostropheFilter_,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Tr\TestApostropheFilter.cs,TestApostropheFilter,The length of the statement  "            TokenStream stream = new MockTokenizer(new StringReader("Türkiye'de 2003'te Van Gölü'nü gördüm")' MockTokenizer.WHITESPACE' false); " is 131.
Long Statement,Lucene.Net.Analysis.Tr,TestTurkishLowerCaseFilter_,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Tr\TestTurkishLowerCaseFilter.cs,TestTurkishLowerCaseFilter,The length of the statement  "            TokenStream stream = new MockTokenizer(new StringReader("\u0130STANBUL \u0130ZM\u0130R ISPARTA")' MockTokenizer.WHITESPACE' false); " is 131.
Long Statement,Lucene.Net.Analysis.Tr,TestTurkishLowerCaseFilter_,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Tr\TestTurkishLowerCaseFilter.cs,TestDecomposed,The length of the statement  "            TokenStream stream = new MockTokenizer(new StringReader("\u0049\u0307STANBUL \u0049\u0307ZM\u0049\u0307R ISPARTA")' MockTokenizer.WHITESPACE' false); " is 149.
Long Statement,Lucene.Net.Analysis.Tr,TestTurkishLowerCaseFilter_,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Tr\TestTurkishLowerCaseFilter.cs,TestDecomposed2,The length of the statement  "            TokenStream stream = new MockTokenizer(new StringReader("\u0049\u0316\u0307STANBUL \u0049\u0307ZM\u0049\u0307R I\u0316SPARTA")' MockTokenizer.WHITESPACE' false); " is 161.
Long Statement,Lucene.Net.Analysis.Util,BaseTokenStreamFactoryTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\BaseTokenStreamFactoryTestCase.cs,AnalysisFactory,The length of the statement  "                    throw; // LUCENENET: CA2200: Rethrow to preserve stack details (https://docs.microsoft.com/en-us/visualstudio/code-quality/ca2200-rethrow-to-preserve-stack-details) " is 164.
Long Statement,Lucene.Net.Analysis.Util,BaseTokenStreamFactoryTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\BaseTokenStreamFactoryTestCase.cs,TokenizerFactory,The length of the statement  "            return (TokenizerFactory)AnalysisFactory(Lucene.Net.Analysis.Util.TokenizerFactory.LookupClass(name)' matchVersion' loader' keysAndValues); " is 139.
Long Statement,Lucene.Net.Analysis.Util,BaseTokenStreamFactoryTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\BaseTokenStreamFactoryTestCase.cs,TokenFilterFactory,The length of the statement  "            return (TokenFilterFactory)AnalysisFactory(Lucene.Net.Analysis.Util.TokenFilterFactory.LookupClass(name)' matchVersion' loader' keysAndValues); " is 143.
Long Statement,Lucene.Net.Analysis.Util,BaseTokenStreamFactoryTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\BaseTokenStreamFactoryTestCase.cs,CharFilterFactory,The length of the statement  "            return (CharFilterFactory)AnalysisFactory(Lucene.Net.Analysis.Util.CharFilterFactory.LookupClass(name)' matchVersion' loader' keysAndValues); " is 141.
Long Statement,Lucene.Net.Analysis.Util,TestAnalysisSPILoader,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestAnalysisSPILoader.cs,TestLookupTokenFilter,The length of the statement  "            assertSame(typeof(RemoveDuplicatesTokenFilterFactory)' TokenFilterFactory.ForName("RemoveDuplicates"' VersionArgOnly()).GetType()); " is 131.
Long Statement,Lucene.Net.Analysis.Util,TestAnalysisSPILoader,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestAnalysisSPILoader.cs,TestLookupTokenFilter,The length of the statement  "            assertSame(typeof(RemoveDuplicatesTokenFilterFactory)' TokenFilterFactory.ForName("REMOVEDUPLICATES"' VersionArgOnly()).GetType()); " is 131.
Long Statement,Lucene.Net.Analysis.Util,TestAnalysisSPILoader,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestAnalysisSPILoader.cs,TestLookupTokenFilter,The length of the statement  "            assertSame(typeof(RemoveDuplicatesTokenFilterFactory)' TokenFilterFactory.ForName("removeduplicates"' VersionArgOnly()).GetType()); " is 131.
Long Statement,Lucene.Net.Analysis.Util,TestCharArrayMap_,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArrayMap.cs,TestToString,The length of the statement  "            CharArrayMap<int?> cm = new CharArrayMap<int?>(TEST_VERSION_CURRENT' Collections.SingletonMap<string' int?>("test"' 1)' false); " is 127.
Long Statement,Lucene.Net.Analysis.Util,TestCharArraySet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArraySet.cs,TestUnionWithObject,The length of the statement  "            var mixedExistingNonExistingValuesAsObject = new List<object> { "true"' "set"' "of"' "unique"' "values"' "except"' "sells" }; " is 125.
Long Statement,Lucene.Net.Analysis.Util,TestCharArraySet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArraySet.cs,TestUnionWithObject,The length of the statement  "            var nonExistingMixedTypes = new object[] { true' (byte)55' (short)44' (int)33' (sbyte)22' (long)11' (char)'\n'' "hurray"' (uint)99' (ulong)89' (ushort)79' new char[] { 't'' 'w'' 'o' }' new StringCharSequenceWrapper("testing") }; " is 228.
Long Statement,Lucene.Net.Analysis.Util,TestCharArraySet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArraySet.cs,TestUnionWithObject,The length of the statement  "            assertTrue(target.UnionWith(originalValues.Cast<object>())); // Need to cast here because the .NET return type is void for UnionWith. " is 133.
Long Statement,Lucene.Net.Analysis.Util,TestCharArraySet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArraySet.cs,TestUnionWithCharArray,The length of the statement  "            var mixedExistingNonExistingValues = new List<char[]> { "true".ToCharArray()' "set".ToCharArray()' "of".ToCharArray()' "unique".ToCharArray()' "values".ToCharArray()' "except".ToCharArray()' "sells".ToCharArray() }; " is 215.
Long Statement,Lucene.Net.Analysis.Util,TestCharArraySet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArraySet.cs,TestUnionWithCharSequence,The length of the statement  "            var existingValues = new List<ICharSequence> { new StringCharSequenceWrapper("seashells")' new StringCharSequenceWrapper("sea")' new StringCharSequenceWrapper("shore") }; " is 170.
Long Statement,Lucene.Net.Analysis.Util,TestCharArraySet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArraySet.cs,TestUnionWithCharSequence,The length of the statement  "            var mixedExistingNonExistingValues = new List<ICharSequence> { new StringCharSequenceWrapper("true")' new StringCharSequenceWrapper("set")' new StringCharSequenceWrapper("of")' new StringCharSequenceWrapper("unique")' new StringCharSequenceWrapper("values")' new StringCharSequenceWrapper("except")' new StringCharSequenceWrapper("sells") }; " is 341.
Long Statement,Lucene.Net.Analysis.Util,TestCharArraySet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArraySet.cs,TestIsSubsetOfString,The length of the statement  "            var superset = new List<string> { "introducing"' "sally"' "sells"' "seashells"' "by"' "the"' "sea"' "shore"' "and"' "more" }; " is 125.
Long Statement,Lucene.Net.Analysis.Util,TestCharArraySet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArraySet.cs,TestIsSubsetOfObject,The length of the statement  "            var superset = new List<object> { "introducing"' "sally"' "sells"' "seashells"' "by"' "the"' "sea"' "shore"' "and"' "more" }; " is 125.
Long Statement,Lucene.Net.Analysis.Util,TestCharArraySet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArraySet.cs,TestIsProperSubsetOfString,The length of the statement  "            var superset = new List<string> { "introducing"' "sally"' "sells"' "seashells"' "by"' "the"' "sea"' "shore"' "and"' "more" }; " is 125.
Long Statement,Lucene.Net.Analysis.Util,TestCharArraySet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArraySet.cs,TestIsProperSubsetOfObject,The length of the statement  "            var superset = new List<object> { "introducing"' "sally"' "sells"' "seashells"' "by"' "the"' "sea"' "shore"' "and"' "more" }; " is 125.
Long Statement,Lucene.Net.Analysis.Util,TestCharArraySet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArraySet.cs,TestIsSupersetOfString,The length of the statement  "            var superset = new List<string> { "introducing"' "sally"' "sells"' "seashells"' "by"' "the"' "sea"' "shore"' "and"' "more" }; " is 125.
Long Statement,Lucene.Net.Analysis.Util,TestCharArraySet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArraySet.cs,TestIsSupersetOfObject,The length of the statement  "            var superset = new List<object> { "introducing"' "sally"' "sells"' "seashells"' "by"' "the"' "sea"' "shore"' "and"' "more" }; " is 125.
Long Statement,Lucene.Net.Analysis.Util,TestCharArraySet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArraySet.cs,TestIsProperSupersetOfString,The length of the statement  "            var superset = new List<string> { "introducing"' "sally"' "sells"' "seashells"' "by"' "the"' "sea"' "shore"' "and"' "more" }; " is 125.
Long Statement,Lucene.Net.Analysis.Util,TestCharArraySet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArraySet.cs,TestIsProperSupersetOfObject,The length of the statement  "            var superset = new List<object> { "introducing"' "sally"' "sells"' "seashells"' "by"' "the"' "sea"' "shore"' "and"' "more" }; " is 125.
Long Statement,Lucene.Net.Analysis.Util,TestCharArraySet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArraySet.cs,TestOverlapsString,The length of the statement  "            var overlapping = new List<string> { "introducing"' "sally"' "sells"' "seashells"' "by"' "the"' "sea"' "shore"' "and"' "more" }; " is 128.
Long Statement,Lucene.Net.Analysis.Util,TestCharArraySet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArraySet.cs,TestOverlapsObject,The length of the statement  "            var overlapping = new List<object> { "introducing"' "sally"' "sells"' "seashells"' "by"' "the"' "sea"' "shore"' "and"' "more" }; " is 128.
Long Statement,Lucene.Net.Analysis.Util,TestCharTokenizers,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharTokenizers.cs,TestMaxWordLength,The length of the statement  "            var tokenizer = new LowerCaseTokenizer(TEST_VERSION_CURRENT' new StringReader(builder.ToString() + builder.ToString())); " is 120.
Long Statement,Lucene.Net.Analysis.Util,TestCharTokenizers,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharTokenizers.cs,TestMaxWordLength,The length of the statement  "            AssertTokenStreamContents(tokenizer' new[] { builder.ToString().ToLowerInvariant()' builder.ToString().ToLowerInvariant() }); " is 125.
Long Statement,Lucene.Net.Analysis.Util,TestCharTokenizers,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharTokenizers.cs,TestMaxWordLengthWithSupplementary,The length of the statement  "            var tokenizer = new LowerCaseTokenizer(TEST_VERSION_CURRENT' new StringReader(builder.ToString() + builder.ToString())); " is 120.
Long Statement,Lucene.Net.Analysis.Util,TestCharTokenizers,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharTokenizers.cs,TestMaxWordLengthWithSupplementary,The length of the statement  "            AssertTokenStreamContents(tokenizer' new[] { builder.ToString().ToLowerInvariant()' builder.ToString().ToLowerInvariant() }); " is 125.
Long Statement,Lucene.Net.Analysis.Util,TestCharTokenizers,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharTokenizers.cs,TestSurrogates,The length of the statement  "            AssertAnalyzesTo(analyzer' "bar 123" + (char)55404 + (char)56321 + "34 5te 987"' new string[] { "123𫀁34"' "5"' "987" }); " is 121.
Long Statement,Lucene.Net.Analysis.Util,TestCharTokenizers,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharTokenizers.cs,TestSurrogates,The length of the statement  "            AssertAnalyzesTo(analyzer' "787 " + (char)55297 + (char)56388 + "6" + (char)55404 + (char)56321 + " art true 734"' new string[] { "787"' "𐑄6𫀁"' "734" }); " is 155.
Long Statement,Lucene.Net.Analysis.Util,TestFilesystemResourceLoader,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestFilesystemResourceLoader.cs,assertNotFound,The length of the statement  "                IOUtils.DisposeWhileHandlingException(rl.OpenResource("/this-directory-really-really-really-should-not-exist/foo/bar.txt")); " is 124.
Long Statement,Lucene.Net.Analysis.Util,TestFilesystemResourceLoader,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestFilesystemResourceLoader.cs,assertClasspathDelegation,The length of the statement  "            var file = CreateTempFile(System.IO.Path.GetFileNameWithoutExtension(englishStopFile)' System.IO.Path.GetExtension(englishStopFile)); " is 133.
Long Statement,Lucene.Net.Analysis.Util,TestFilesystemResourceLoader,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestFilesystemResourceLoader.cs,assertClasspathDelegation,The length of the statement  "            using (var stream = typeof(Snowball.SnowballFilter).GetTypeInfo().Assembly.FindAndGetManifestResourceStream(typeof(Snowball.SnowballFilter)' englishStopFile)) " is 158.
Long Statement,Lucene.Net.Analysis.Util,TestFilesystemResourceLoader,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestFilesystemResourceLoader.cs,assertClasspathDelegation,The length of the statement  "            CharArraySet set = WordlistLoader.GetSnowballWordSet(new System.IO.StreamReader(rl.OpenResource(file.FullName)' Encoding.UTF8)' TEST_VERSION_CURRENT); " is 150.
Long Statement,Lucene.Net.Analysis.Util,TestFilesystemResourceLoader,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestFilesystemResourceLoader.cs,assertClasspathDelegation,The length of the statement  "            assertEquals("Lucene.Net.Analysis.Util.RollingCharBuffer"' rl.NewInstance<object>("Lucene.Net.Analysis.Util.RollingCharBuffer").ToString()); " is 140.
Long Statement,Lucene.Net.Analysis.Util,TestFilesystemResourceLoader,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestFilesystemResourceLoader.cs,assertClasspathDelegation,The length of the statement  "            //IOUtils.CloseWhileHandlingException(rl.OpenResource("java/lang/String.class")); // LUCENENET TODO: Not sure what the equivalent to this is (or if there is one). " is 162.
Long Statement,Lucene.Net.Analysis.Util,TestFilesystemResourceLoader,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestFilesystemResourceLoader.cs,TestBaseDir,The length of the statement  "                TextWriter os = new System.IO.StreamWriter(new System.IO.FileStream(System.IO.Path.Combine(@base.FullName' "template.txt")' System.IO.FileMode.Create' System.IO.FileAccess.Write)' Encoding.UTF8); " is 195.
Long Statement,Lucene.Net.Analysis.Util,TestFilesystemResourceLoader,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestFilesystemResourceLoader.cs,TestBaseDir,The length of the statement  "                assertEquals("foobar"' WordlistLoader.GetLines(rl.OpenResource(new FileInfo(System.IO.Path.Combine(@base.FullName' "template.txt")).FullName)' Encoding.UTF8).First()); " is 167.
Long Statement,Lucene.Net.Analysis.Util,TestWordlistLoader,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestWordlistLoader.cs,TestWordlistLoading,The length of the statement  "            //CharArraySet wordSet2 = WordlistLoader.GetWordSet(new System.IO.StreamReader(new StringReader(s))' TEST_VERSION_CURRENT); " is 123.
Long Statement,Lucene.Net.Analysis.Util,TestWordlistLoader,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestWordlistLoader.cs,TestSnowballListLoading,The length of the statement  "            string s = "|comment\n" + " |comment\n" + "\n" + "  \t\n" + " |comment | comment\n" + "ONE\n" + "   two   \n" + " three   four five \n" + "six seven | comment\n"; //multiple stopwords + comment -  multiple stopwords -  stopword with leading/trailing space -  stopword' in uppercase -  commented line with comment -  line with only whitespace -  blank line -  commented line with leading whitespace -  commented line " is 415.
Long Statement,Lucene.Net.Analysis.Wikipedia,TestWikipediaTokenizerFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\TestWikipediaTokenizerFactory.cs,TestTokenizer,The length of the statement  "            AssertTokenStreamContents(tokenizer' new string[] { "This"' "is"' "a"' "foo" }' new int[] { 0' 5' 8' 21 }' new int[] { 4' 7' 9' 24 }' new string[] { "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' WikipediaTokenizer.CATEGORY }' new int[] { 1' 1' 1' 1 }); " is 248.
Long Statement,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestSimple,The length of the statement  "            AssertTokenStreamContents(tf' new string[] { "This"' "is"' "a"' "foo" }' new int[] { 0' 5' 8' 21 }' new int[] { 4' 7' 9' 24 }' new string[] { "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' WikipediaTokenizer.CATEGORY }' new int[] { 1' 1' 1' 1 }' text.Length); " is 254.
Long Statement,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestHandwritten,The length of the statement  "            string test = "[[link]] This is a [[Category:foo]] Category  This is a linked [[:Category:bar none withstanding]] " + "Category This is (parens) This is a [[link]]  This is an external URL [http://lucene.apache.org] " + "Here is ''italics'' and ''more italics''' '''bold''' and '''''five quotes''''' " + " This is a [[link|display info]]  This is a period.  Here is $3.25 and here is 3.50.  Here's Johnny.  " + "==heading== ===sub head=== followed by some text  [[Category:blah| ]] " + "''[[Category:ital_cat]]''  here is some that is ''italics [[Category:foo]] but is never closed." + "'''same [[Category:foo]] goes for this '''''and2 [[Category:foo]] and this" + " [http://foo.boo.com/test/test/ Test Test] [http://foo.boo.com/test/test/test.html Test Test]" + " [http://foo.boo.com/test/test/test.html?g=b&c=d Test Test] <ref>Citation</ref> <sup>martian</sup> <span class=\"glue\">code</span>"; " is 897.
Long Statement,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestHandwritten,The length of the statement  "            AssertTokenStreamContents(tf' new string[] { "link"' "This"' "is"' "a"' "foo"' "Category"' "This"' "is"' "a"' "linked"' "bar"' "none"' "withstanding"' "Category"' "This"' "is"' "parens"' "This"' "is"' "a"' "link"' "This"' "is"' "an"' "external"' "URL"' "http://lucene.apache.org"' "Here"' "is"' "italics"' "and"' "more"' "italics"' "bold"' "and"' "five"' "quotes"' "This"' "is"' "a"' "link"' "display"' "info"' "This"' "is"' "a"' "period"' "Here"' "is"' "3.25"' "and"' "here"' "is"' "3.50"' "Here's"' "Johnny"' "heading"' "sub"' "head"' "followed"' "by"' "some"' "text"' "blah"' "ital"' "cat"' "here"' "is"' "some"' "that"' "is"' "italics"' "foo"' "but"' "is"' "never"' "closed"' "same"' "foo"' "goes"' "for"' "this"' "and2"' "foo"' "and"' "this"' "http://foo.boo.com/test/test/"' "Test"' "Test"' "http://foo.boo.com/test/test/test.html"' "Test"' "Test"' "http://foo.boo.com/test/test/test.html?g=b&c=d"' "Test"' "Test"' "Citation"' "martian"' "code" }' new string[] { WikipediaTokenizer.INTERNAL_LINK' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' WikipediaTokenizer.CATEGORY' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' WikipediaTokenizer.CATEGORY' WikipediaTokenizer.CATEGORY' WikipediaTokenizer.CATEGORY' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' WikipediaTokenizer.INTERNAL_LINK' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' WikipediaTokenizer.EXTERNAL_LINK_URL' "<ALPHANUM>"' "<ALPHANUM>"' WikipediaTokenizer.ITALICS' "<ALPHANUM>"' WikipediaTokenizer.ITALICS' WikipediaTokenizer.ITALICS' WikipediaTokenizer.BOLD' "<ALPHANUM>"' WikipediaTokenizer.BOLD_ITALICS' WikipediaTokenizer.BOLD_ITALICS' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' WikipediaTokenizer.INTERNAL_LINK' WikipediaTokenizer.INTERNAL_LINK' WikipediaTokenizer.INTERNAL_LINK' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' "<NUM>"' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' "<NUM>"' "<APOSTROPHE>"' "<ALPHANUM>"' WikipediaTokenizer.HEADING' WikipediaTokenizer.SUB_HEADING' WikipediaTokenizer.SUB_HEADING' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' WikipediaTokenizer.CATEGORY' WikipediaTokenizer.CATEGORY' WikipediaTokenizer.CATEGORY' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' WikipediaTokenizer.ITALICS' WikipediaTokenizer.CATEGORY' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' WikipediaTokenizer.BOLD' WikipediaTokenizer.CATEGORY' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' WikipediaTokenizer.BOLD_ITALICS' WikipediaTokenizer.CATEGORY' "<ALPHANUM>"' "<ALPHANUM>"' WikipediaTokenizer.EXTERNAL_LINK_URL' WikipediaTokenizer.EXTERNAL_LINK' WikipediaTokenizer.EXTERNAL_LINK' WikipediaTokenizer.EXTERNAL_LINK_URL' WikipediaTokenizer.EXTERNAL_LINK' WikipediaTokenizer.EXTERNAL_LINK' WikipediaTokenizer.EXTERNAL_LINK_URL' WikipediaTokenizer.EXTERNAL_LINK' WikipediaTokenizer.EXTERNAL_LINK' WikipediaTokenizer.CITATION' "<ALPHANUM>"' "<ALPHANUM>" }); " is 3001.
Long Statement,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,CheckLinkPhrases,The length of the statement  "            AssertTokenStreamContents(tf' new string[] { "click"' "link"' "here"' "again"' "click"' "http://lucene.apache.org"' "here"' "again"' "a"' "b"' "c"' "d" }' new int[] { 1' 1' 1' 1' 1' 1' 0' 1' 1' 1' 1' 1 }); " is 205.
Long Statement,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestLinks,The length of the statement  "            string test = "[http://lucene.apache.org/java/docs/index.html#news here] [http://lucene.apache.org/java/docs/index.html?b=c here] [https://lucene.apache.org/java/docs/index.html?b=c here]"; " is 189.
Long Statement,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestLinks,The length of the statement  "            AssertTokenStreamContents(tf' new string[] { "http://lucene.apache.org/java/docs/index.html#news"' "here"' "http://lucene.apache.org/java/docs/index.html?b=c"' "here"' "https://lucene.apache.org/java/docs/index.html?b=c"' "here" }' new string[] { WikipediaTokenizer.EXTERNAL_LINK_URL' WikipediaTokenizer.EXTERNAL_LINK' WikipediaTokenizer.EXTERNAL_LINK_URL' WikipediaTokenizer.EXTERNAL_LINK' WikipediaTokenizer.EXTERNAL_LINK_URL' WikipediaTokenizer.EXTERNAL_LINK }); " is 465.
Long Statement,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestLucene1133,The length of the statement  "            string test = "[[Category:a b c d]] [[Category:e f g]] [[link here]] [[link there]] ''italics here'' something ''more italics'' [[Category:h   i   j]]"; " is 152.
Long Statement,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestLucene1133,The length of the statement  "            AssertTokenStreamContents(tf' new string[] { "a b c d"' "e f g"' "link"' "here"' "link"' "there"' "italics here"' "something"' "more italics"' "h   i   j" }' new int[] { 11' 32' 42' 47' 56' 61' 71' 86' 98' 124 }' new int[] { 18' 37' 46' 51' 60' 66' 83' 95' 110' 133 }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 }); " is 313.
Long Statement,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestBoth,The length of the statement  "            string test = "[[Category:a b c d]] [[Category:e f g]] [[link here]] [[link there]] ''italics here'' something ''more italics'' [[Category:h   i   j]]"; " is 152.
Long Statement,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestBoth,The length of the statement  "            AssertTokenStreamContents(tf' new string[] { "a b c d"' "a"' "b"' "c"' "d"' "e f g"' "e"' "f"' "g"' "link"' "here"' "link"' "there"' "italics here"' "italics"' "here"' "something"' "more italics"' "more"' "italics"' "h   i   j"' "h"' "i"' "j" }' new int[] { 11' 11' 13' 15' 17' 32' 32' 34' 36' 42' 47' 56' 61' 71' 71' 79' 86' 98' 98' 103' 124' 124' 128' 132 }' new int[] { 18' 12' 14' 16' 18' 37' 33' 35' 37' 46' 51' 60' 66' 83' 78' 83' 95' 110' 102' 110' 133' 125' 129' 133 }' new int[] { 1' 0' 1' 1' 1' 1' 0' 1' 1' 1' 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 0' 1' 1 }); " is 564.
Long Statement,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestBoth,The length of the statement  "            int[] expectedFlags = new int[] { WikipediaTokenizer.UNTOKENIZED_TOKEN_FLAG' 0' 0' 0' 0' WikipediaTokenizer.UNTOKENIZED_TOKEN_FLAG' 0' 0' 0' 0' 0' 0' 0' WikipediaTokenizer.UNTOKENIZED_TOKEN_FLAG' 0' 0' 0' WikipediaTokenizer.UNTOKENIZED_TOKEN_FLAG' 0' 0' WikipediaTokenizer.UNTOKENIZED_TOKEN_FLAG' 0' 0' 0 }; " is 307.
Long Statement,Lucene.Net.Analysis,TestApiConsistency,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Support\TestApiConsistency.cs,TestPrivateFieldNames,The length of the statement  "            base.TestPrivateFieldNames(typeFromTargetAssembly' @"Snowball\.Ext\..+Stemmer|Miscellaneous\.Scandinavian.+Filter\.[AO]E_se|En\.KStemmer\.MaxWordLen"); " is 151.
Complex Conditional,Lucene.Net.Analysis.Core,MockRandomAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestRandomChains.cs,CreateComponent,The conditional expression  "ite.InnerException != null && (ite.InnerException.GetType().Equals(typeof(ArgumentException))                          || ite.InnerException.GetType().Equals(typeof(ArgumentOutOfRangeException))                          || ite.InnerException.GetType().Equals(typeof(NotSupportedException)))"  is complex.
Empty Catch Block,Lucene.Net.Analysis.CharFilters,TestMappingCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestMappingCharFilterFactory.cs,TestParseString,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Analysis.CharFilters,TestMappingCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestMappingCharFilterFactory.cs,TestParseString,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Analysis.CharFilters,TestMappingCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestMappingCharFilterFactory.cs,TestParseString,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Analysis.Core,TestFactories,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestFactories.cs,Initialize,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Analysis.Core,TestFactories,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestFactories.cs,Initialize,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Analysis.Core,TestTypeTokenFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestTypeTokenFilterFactory.cs,TestMissingTypesParameter,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Analysis.Synonym,TestSynonymFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymFilterFactory.cs,DoTestTokenizerFactoryArguments,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Analysis.Synonym,TestSynonymFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymFilterFactory.cs,DoTestTokenizerFactoryArguments,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Analysis.Synonym,TestSynonymMap,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymMap.cs,TestInvalidMappingRules,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Analysis.Util,TestAnalysisSPILoader,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestAnalysisSPILoader.cs,TestBogusLookupTokenizer,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Analysis.Util,TestAnalysisSPILoader,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestAnalysisSPILoader.cs,TestBogusLookupTokenizer,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Analysis.Util,TestAnalysisSPILoader,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestAnalysisSPILoader.cs,TestBogusLookupTokenizerClass,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Analysis.Util,TestAnalysisSPILoader,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestAnalysisSPILoader.cs,TestBogusLookupTokenizerClass,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Analysis.Util,TestAnalysisSPILoader,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestAnalysisSPILoader.cs,TestBogusLookupTokenFilter,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Analysis.Util,TestAnalysisSPILoader,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestAnalysisSPILoader.cs,TestBogusLookupTokenFilter,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Analysis.Util,TestAnalysisSPILoader,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestAnalysisSPILoader.cs,TestBogusLookupTokenFilterClass,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Analysis.Util,TestAnalysisSPILoader,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestAnalysisSPILoader.cs,TestBogusLookupTokenFilterClass,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Analysis.Util,TestAnalysisSPILoader,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestAnalysisSPILoader.cs,TestBogusLookupCharFilter,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Analysis.Util,TestAnalysisSPILoader,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestAnalysisSPILoader.cs,TestBogusLookupCharFilter,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Analysis.Util,TestAnalysisSPILoader,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestAnalysisSPILoader.cs,TestBogusLookupCharFilterClass,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Analysis.Util,TestAnalysisSPILoader,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestAnalysisSPILoader.cs,TestBogusLookupCharFilterClass,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_MarkI,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_ReadCII,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_ReadCII,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_ReadCII,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_ReadCII,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_ReadCII,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_ReadCII,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_ReadCII,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_ReadCII,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_Read_CII_Exception,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_Read_CII_Exception,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_Read_CII_Exception,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_Read_CII_Exception,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_Read_CII_Exception,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_Read_CII_Exception,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_Read_CII_Exception,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_Read_CII_Exception,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_Read_CII_Exception,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_Read_CII_Exception,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_Read_CII_Exception,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_Read_CII_Exception,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_Reset_IOException,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,TearDown,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Analysis.Util,TestCharacterUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharacterUtils.cs,TestCodePointAtCharSequenceInt,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Analysis.Util,TestCharacterUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharacterUtils.cs,TestCodePointAtCharSequenceInt,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Analysis.Util,TestCharacterUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharacterUtils.cs,TestOffsetByCodePoint,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Analysis.Util,TestCharacterUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharacterUtils.cs,TestNewCharacterBuffer,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Analysis.Util,TestCharArrayMap_,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArrayMap.cs,TestMethods,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Analysis.Util,TestCharArraySet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArraySet.cs,TestUnmodifiableSet,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Analysis.Util,TestCharArraySet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArraySet.cs,TestContainsWithNull,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Analysis.Util,TestCharArraySet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArraySet.cs,TestContainsWithNull,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Analysis.Util,TestCharArraySet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArraySet.cs,TestContainsWithNull,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Analysis.Util,TestCharArraySet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArraySet.cs,TestContainsWithNull,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Analysis.Util,TestFilesystemResourceLoader,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestFilesystemResourceLoader.cs,assertNotFound,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Analysis.Util,TestFilesystemResourceLoader,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestFilesystemResourceLoader.cs,assertNotFound,The method has an empty catch block.
Magic Number,Lucene.Net.Analysis.Ar,TestArabicAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Ar\TestArabicAnalyzer.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' new ArabicAnalyzer(TEST_VERSION_CURRENT)' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.Bg,TestBulgarianAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Bg\TestBulgarianAnalyzer.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' new BulgarianAnalyzer(TEST_VERSION_CURRENT)' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.Br,TestBrazilianStemmer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Br\TestBrazilianStemmer.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' new BrazilianAnalyzer(TEST_VERSION_CURRENT)' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.Ca,TestCatalanAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Ca\TestCatalanAnalyzer.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' new CatalanAnalyzer(TEST_VERSION_CURRENT)' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.CharFilters,HTMLStripCharFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\HTMLStripCharFilterTest.cs,TestReserved,The following statement contains a magic number: assertTrue("Escaped tag not preserved: " + result.IndexOf("reserved"' StringComparison.Ordinal)' result.IndexOf("reserved"' StringComparison.Ordinal) == 9);
Magic Number,Lucene.Net.Analysis.CharFilters,HTMLStripCharFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\HTMLStripCharFilterTest.cs,TestReserved,The following statement contains a magic number: assertTrue("Escaped tag not preserved: " + result.IndexOf("reserved"' 15' StringComparison.Ordinal)' result.IndexOf("reserved"' 15' StringComparison.Ordinal) == 38);
Magic Number,Lucene.Net.Analysis.CharFilters,HTMLStripCharFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\HTMLStripCharFilterTest.cs,TestReserved,The following statement contains a magic number: assertTrue("Escaped tag not preserved: " + result.IndexOf("reserved"' 15' StringComparison.Ordinal)' result.IndexOf("reserved"' 15' StringComparison.Ordinal) == 38);
Magic Number,Lucene.Net.Analysis.CharFilters,HTMLStripCharFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\HTMLStripCharFilterTest.cs,TestReserved,The following statement contains a magic number: assertTrue("Escaped tag not preserved: " + result.IndexOf("reserved"' 15' StringComparison.Ordinal)' result.IndexOf("reserved"' 15' StringComparison.Ordinal) == 38);
Magic Number,Lucene.Net.Analysis.CharFilters,HTMLStripCharFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\HTMLStripCharFilterTest.cs,TestReserved,The following statement contains a magic number: assertTrue("Escaped tag not preserved: " + result.IndexOf("reserved"' 41' StringComparison.Ordinal)' result.IndexOf("reserved"' 41' StringComparison.Ordinal) == 54);
Magic Number,Lucene.Net.Analysis.CharFilters,HTMLStripCharFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\HTMLStripCharFilterTest.cs,TestReserved,The following statement contains a magic number: assertTrue("Escaped tag not preserved: " + result.IndexOf("reserved"' 41' StringComparison.Ordinal)' result.IndexOf("reserved"' 41' StringComparison.Ordinal) == 54);
Magic Number,Lucene.Net.Analysis.CharFilters,HTMLStripCharFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\HTMLStripCharFilterTest.cs,TestReserved,The following statement contains a magic number: assertTrue("Escaped tag not preserved: " + result.IndexOf("reserved"' 41' StringComparison.Ordinal)' result.IndexOf("reserved"' 41' StringComparison.Ordinal) == 54);
Magic Number,Lucene.Net.Analysis.CharFilters,HTMLStripCharFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\HTMLStripCharFilterTest.cs,TestBufferOverflow,The following statement contains a magic number: StringBuilder testBuilder = new StringBuilder(HTMLStripCharFilter.InitialBufferSize + 50);
Magic Number,Lucene.Net.Analysis.CharFilters,HTMLStripCharFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\HTMLStripCharFilterTest.cs,TestBufferOverflow,The following statement contains a magic number: AppendChars(testBuilder' HTMLStripCharFilter.InitialBufferSize + 500);
Magic Number,Lucene.Net.Analysis.CharFilters,HTMLStripCharFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\HTMLStripCharFilterTest.cs,TestBufferOverflow,The following statement contains a magic number: AppendChars(testBuilder' 3 * HTMLStripCharFilter.InitialBufferSize + 500);
Magic Number,Lucene.Net.Analysis.CharFilters,HTMLStripCharFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\HTMLStripCharFilterTest.cs,TestBufferOverflow,The following statement contains a magic number: AppendChars(testBuilder' 3 * HTMLStripCharFilter.InitialBufferSize + 500);
Magic Number,Lucene.Net.Analysis.CharFilters,HTMLStripCharFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\HTMLStripCharFilterTest.cs,TestBufferOverflow,The following statement contains a magic number: AppendChars(testBuilder' HTMLStripCharFilter.InitialBufferSize + 500);
Magic Number,Lucene.Net.Analysis.CharFilters,HTMLStripCharFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\HTMLStripCharFilterTest.cs,TestBufferOverflow,The following statement contains a magic number: AppendChars(testBuilder' HTMLStripCharFilter.InitialBufferSize + 500);
Magic Number,Lucene.Net.Analysis.CharFilters,HTMLStripCharFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\HTMLStripCharFilterTest.cs,AppendChars,The following statement contains a magic number: int i1 = numChars / 2;
Magic Number,Lucene.Net.Analysis.CharFilters,HTMLStripCharFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\HTMLStripCharFilterTest.cs,TestComment,The following statement contains a magic number: AppendChars(testBuilder' TestUtil.NextInt32(Random' 0' 1000));
Magic Number,Lucene.Net.Analysis.CharFilters,HTMLStripCharFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\HTMLStripCharFilterTest.cs,TestRandom,The following statement contains a magic number: int numRounds = RANDOM_MULTIPLIER * 1000;
Magic Number,Lucene.Net.Analysis.CharFilters,HTMLStripCharFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\HTMLStripCharFilterTest.cs,TestRandomHugeStrings,The following statement contains a magic number: int numRounds = RANDOM_MULTIPLIER * 100;
Magic Number,Lucene.Net.Analysis.CharFilters,HTMLStripCharFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\HTMLStripCharFilterTest.cs,TestRandomHugeStrings,The following statement contains a magic number: CheckRandomData(Random' NewTestAnalyzer()' numRounds' 8192);
Magic Number,Lucene.Net.Analysis.CharFilters,HTMLStripCharFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\HTMLStripCharFilterTest.cs,TestCDATA,The following statement contains a magic number: int maxNumElems = 100;
Magic Number,Lucene.Net.Analysis.CharFilters,HTMLStripCharFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\HTMLStripCharFilterTest.cs,TestRandomBrokenHTML,The following statement contains a magic number: int maxNumElements = 10000;
Magic Number,Lucene.Net.Analysis.CharFilters,HTMLStripCharFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\HTMLStripCharFilterTest.cs,TestRandomText,The following statement contains a magic number: int minNumWords = 10;
Magic Number,Lucene.Net.Analysis.CharFilters,HTMLStripCharFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\HTMLStripCharFilterTest.cs,TestRandomText,The following statement contains a magic number: int maxNumWords = 10000;
Magic Number,Lucene.Net.Analysis.CharFilters,HTMLStripCharFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\HTMLStripCharFilterTest.cs,TestRandomText,The following statement contains a magic number: int minWordLength = 3;
Magic Number,Lucene.Net.Analysis.CharFilters,HTMLStripCharFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\HTMLStripCharFilterTest.cs,TestRandomText,The following statement contains a magic number: int maxWordLength = 20;
Magic Number,Lucene.Net.Analysis.CharFilters,HTMLStripCharFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\HTMLStripCharFilterTest.cs,TestRandomText,The following statement contains a magic number: switch (TestUtil.NextInt32(Random' 0' 4))              {                  case 0:                      {                          for (int wordNum = 0; wordNum < numWords; ++wordNum)                          {                              text.Append(TestUtil.RandomUnicodeString(Random' maxWordLength));                              text.Append(' ');                          }                          break;                      }                  case 1:                      {                          for (int wordNum = 0; wordNum < numWords; ++wordNum)                          {                              text.Append(TestUtil.RandomRealisticUnicodeString(Random' minWordLength' maxWordLength));                              text.Append(' ');                          }                          break;                      }                  default:                      { // ASCII 50% of the time                          for (int wordNum = 0; wordNum < numWords; ++wordNum)                          {                              text.Append(TestUtil.RandomSimpleString(Random));                              text.Append(' ');                          }                      }                      break;              }
Magic Number,Lucene.Net.Analysis.CharFilters,TestHTMLStripCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestHTMLStripCharFilterFactory.cs,TestNothingChanged,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "this"' "is"' "only"' "a"' "test." }' new int[] { 0' 5' 8' 13' 15 }' new int[] { 4' 7' 12' 14' 20 });
Magic Number,Lucene.Net.Analysis.CharFilters,TestHTMLStripCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestHTMLStripCharFilterFactory.cs,TestNothingChanged,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "this"' "is"' "only"' "a"' "test." }' new int[] { 0' 5' 8' 13' 15 }' new int[] { 4' 7' 12' 14' 20 });
Magic Number,Lucene.Net.Analysis.CharFilters,TestHTMLStripCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestHTMLStripCharFilterFactory.cs,TestNothingChanged,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "this"' "is"' "only"' "a"' "test." }' new int[] { 0' 5' 8' 13' 15 }' new int[] { 4' 7' 12' 14' 20 });
Magic Number,Lucene.Net.Analysis.CharFilters,TestHTMLStripCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestHTMLStripCharFilterFactory.cs,TestNothingChanged,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "this"' "is"' "only"' "a"' "test." }' new int[] { 0' 5' 8' 13' 15 }' new int[] { 4' 7' 12' 14' 20 });
Magic Number,Lucene.Net.Analysis.CharFilters,TestHTMLStripCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestHTMLStripCharFilterFactory.cs,TestNothingChanged,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "this"' "is"' "only"' "a"' "test." }' new int[] { 0' 5' 8' 13' 15 }' new int[] { 4' 7' 12' 14' 20 });
Magic Number,Lucene.Net.Analysis.CharFilters,TestHTMLStripCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestHTMLStripCharFilterFactory.cs,TestNothingChanged,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "this"' "is"' "only"' "a"' "test." }' new int[] { 0' 5' 8' 13' 15 }' new int[] { 4' 7' 12' 14' 20 });
Magic Number,Lucene.Net.Analysis.CharFilters,TestHTMLStripCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestHTMLStripCharFilterFactory.cs,TestNothingChanged,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "this"' "is"' "only"' "a"' "test." }' new int[] { 0' 5' 8' 13' 15 }' new int[] { 4' 7' 12' 14' 20 });
Magic Number,Lucene.Net.Analysis.CharFilters,TestHTMLStripCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestHTMLStripCharFilterFactory.cs,TestNothingChanged,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "this"' "is"' "only"' "a"' "test." }' new int[] { 0' 5' 8' 13' 15 }' new int[] { 4' 7' 12' 14' 20 });
Magic Number,Lucene.Net.Analysis.CharFilters,TestHTMLStripCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestHTMLStripCharFilterFactory.cs,TestNothingChanged,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "this"' "is"' "only"' "a"' "test." }' new int[] { 0' 5' 8' 13' 15 }' new int[] { 4' 7' 12' 14' 20 });
Magic Number,Lucene.Net.Analysis.CharFilters,TestHTMLStripCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestHTMLStripCharFilterFactory.cs,TestNoEscapedTags,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "this"' "is"' "only"' "a"' "test." }' new int[] { 3' 12' 18' 27' 32 }' new int[] { 11' 14' 26' 28' 41 });
Magic Number,Lucene.Net.Analysis.CharFilters,TestHTMLStripCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestHTMLStripCharFilterFactory.cs,TestNoEscapedTags,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "this"' "is"' "only"' "a"' "test." }' new int[] { 3' 12' 18' 27' 32 }' new int[] { 11' 14' 26' 28' 41 });
Magic Number,Lucene.Net.Analysis.CharFilters,TestHTMLStripCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestHTMLStripCharFilterFactory.cs,TestNoEscapedTags,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "this"' "is"' "only"' "a"' "test." }' new int[] { 3' 12' 18' 27' 32 }' new int[] { 11' 14' 26' 28' 41 });
Magic Number,Lucene.Net.Analysis.CharFilters,TestHTMLStripCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestHTMLStripCharFilterFactory.cs,TestNoEscapedTags,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "this"' "is"' "only"' "a"' "test." }' new int[] { 3' 12' 18' 27' 32 }' new int[] { 11' 14' 26' 28' 41 });
Magic Number,Lucene.Net.Analysis.CharFilters,TestHTMLStripCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestHTMLStripCharFilterFactory.cs,TestNoEscapedTags,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "this"' "is"' "only"' "a"' "test." }' new int[] { 3' 12' 18' 27' 32 }' new int[] { 11' 14' 26' 28' 41 });
Magic Number,Lucene.Net.Analysis.CharFilters,TestHTMLStripCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestHTMLStripCharFilterFactory.cs,TestNoEscapedTags,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "this"' "is"' "only"' "a"' "test." }' new int[] { 3' 12' 18' 27' 32 }' new int[] { 11' 14' 26' 28' 41 });
Magic Number,Lucene.Net.Analysis.CharFilters,TestHTMLStripCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestHTMLStripCharFilterFactory.cs,TestNoEscapedTags,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "this"' "is"' "only"' "a"' "test." }' new int[] { 3' 12' 18' 27' 32 }' new int[] { 11' 14' 26' 28' 41 });
Magic Number,Lucene.Net.Analysis.CharFilters,TestHTMLStripCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestHTMLStripCharFilterFactory.cs,TestNoEscapedTags,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "this"' "is"' "only"' "a"' "test." }' new int[] { 3' 12' 18' 27' 32 }' new int[] { 11' 14' 26' 28' 41 });
Magic Number,Lucene.Net.Analysis.CharFilters,TestHTMLStripCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestHTMLStripCharFilterFactory.cs,TestNoEscapedTags,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "this"' "is"' "only"' "a"' "test." }' new int[] { 3' 12' 18' 27' 32 }' new int[] { 11' 14' 26' 28' 41 });
Magic Number,Lucene.Net.Analysis.CharFilters,TestHTMLStripCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestHTMLStripCharFilterFactory.cs,TestNoEscapedTags,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "this"' "is"' "only"' "a"' "test." }' new int[] { 3' 12' 18' 27' 32 }' new int[] { 11' 14' 26' 28' 41 });
Magic Number,Lucene.Net.Analysis.CharFilters,TestHTMLStripCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestHTMLStripCharFilterFactory.cs,TestEscapedTags,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "<u>this</u>"' "is"' "only"' "a"' "<I>test</I>." }' new int[] { 0' 12' 18' 27' 29 }' new int[] { 11' 14' 26' 28' 41 });
Magic Number,Lucene.Net.Analysis.CharFilters,TestHTMLStripCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestHTMLStripCharFilterFactory.cs,TestEscapedTags,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "<u>this</u>"' "is"' "only"' "a"' "<I>test</I>." }' new int[] { 0' 12' 18' 27' 29 }' new int[] { 11' 14' 26' 28' 41 });
Magic Number,Lucene.Net.Analysis.CharFilters,TestHTMLStripCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestHTMLStripCharFilterFactory.cs,TestEscapedTags,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "<u>this</u>"' "is"' "only"' "a"' "<I>test</I>." }' new int[] { 0' 12' 18' 27' 29 }' new int[] { 11' 14' 26' 28' 41 });
Magic Number,Lucene.Net.Analysis.CharFilters,TestHTMLStripCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestHTMLStripCharFilterFactory.cs,TestEscapedTags,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "<u>this</u>"' "is"' "only"' "a"' "<I>test</I>." }' new int[] { 0' 12' 18' 27' 29 }' new int[] { 11' 14' 26' 28' 41 });
Magic Number,Lucene.Net.Analysis.CharFilters,TestHTMLStripCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestHTMLStripCharFilterFactory.cs,TestEscapedTags,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "<u>this</u>"' "is"' "only"' "a"' "<I>test</I>." }' new int[] { 0' 12' 18' 27' 29 }' new int[] { 11' 14' 26' 28' 41 });
Magic Number,Lucene.Net.Analysis.CharFilters,TestHTMLStripCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestHTMLStripCharFilterFactory.cs,TestEscapedTags,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "<u>this</u>"' "is"' "only"' "a"' "<I>test</I>." }' new int[] { 0' 12' 18' 27' 29 }' new int[] { 11' 14' 26' 28' 41 });
Magic Number,Lucene.Net.Analysis.CharFilters,TestHTMLStripCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestHTMLStripCharFilterFactory.cs,TestEscapedTags,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "<u>this</u>"' "is"' "only"' "a"' "<I>test</I>." }' new int[] { 0' 12' 18' 27' 29 }' new int[] { 11' 14' 26' 28' 41 });
Magic Number,Lucene.Net.Analysis.CharFilters,TestHTMLStripCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestHTMLStripCharFilterFactory.cs,TestEscapedTags,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "<u>this</u>"' "is"' "only"' "a"' "<I>test</I>." }' new int[] { 0' 12' 18' 27' 29 }' new int[] { 11' 14' 26' 28' 41 });
Magic Number,Lucene.Net.Analysis.CharFilters,TestHTMLStripCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestHTMLStripCharFilterFactory.cs,TestEscapedTags,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "<u>this</u>"' "is"' "only"' "a"' "<I>test</I>." }' new int[] { 0' 12' 18' 27' 29 }' new int[] { 11' 14' 26' 28' 41 });
Magic Number,Lucene.Net.Analysis.CharFilters,TestHTMLStripCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestHTMLStripCharFilterFactory.cs,TestSeparatorOnlyEscapedTags,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "this"' "is"' "only"' "a"' "test." }' new int[] { 3' 12' 18' 27' 32 }' new int[] { 11' 14' 26' 28' 41 });
Magic Number,Lucene.Net.Analysis.CharFilters,TestHTMLStripCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestHTMLStripCharFilterFactory.cs,TestSeparatorOnlyEscapedTags,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "this"' "is"' "only"' "a"' "test." }' new int[] { 3' 12' 18' 27' 32 }' new int[] { 11' 14' 26' 28' 41 });
Magic Number,Lucene.Net.Analysis.CharFilters,TestHTMLStripCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestHTMLStripCharFilterFactory.cs,TestSeparatorOnlyEscapedTags,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "this"' "is"' "only"' "a"' "test." }' new int[] { 3' 12' 18' 27' 32 }' new int[] { 11' 14' 26' 28' 41 });
Magic Number,Lucene.Net.Analysis.CharFilters,TestHTMLStripCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestHTMLStripCharFilterFactory.cs,TestSeparatorOnlyEscapedTags,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "this"' "is"' "only"' "a"' "test." }' new int[] { 3' 12' 18' 27' 32 }' new int[] { 11' 14' 26' 28' 41 });
Magic Number,Lucene.Net.Analysis.CharFilters,TestHTMLStripCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestHTMLStripCharFilterFactory.cs,TestSeparatorOnlyEscapedTags,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "this"' "is"' "only"' "a"' "test." }' new int[] { 3' 12' 18' 27' 32 }' new int[] { 11' 14' 26' 28' 41 });
Magic Number,Lucene.Net.Analysis.CharFilters,TestHTMLStripCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestHTMLStripCharFilterFactory.cs,TestSeparatorOnlyEscapedTags,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "this"' "is"' "only"' "a"' "test." }' new int[] { 3' 12' 18' 27' 32 }' new int[] { 11' 14' 26' 28' 41 });
Magic Number,Lucene.Net.Analysis.CharFilters,TestHTMLStripCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestHTMLStripCharFilterFactory.cs,TestSeparatorOnlyEscapedTags,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "this"' "is"' "only"' "a"' "test." }' new int[] { 3' 12' 18' 27' 32 }' new int[] { 11' 14' 26' 28' 41 });
Magic Number,Lucene.Net.Analysis.CharFilters,TestHTMLStripCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestHTMLStripCharFilterFactory.cs,TestSeparatorOnlyEscapedTags,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "this"' "is"' "only"' "a"' "test." }' new int[] { 3' 12' 18' 27' 32 }' new int[] { 11' 14' 26' 28' 41 });
Magic Number,Lucene.Net.Analysis.CharFilters,TestHTMLStripCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestHTMLStripCharFilterFactory.cs,TestSeparatorOnlyEscapedTags,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "this"' "is"' "only"' "a"' "test." }' new int[] { 3' 12' 18' 27' 32 }' new int[] { 11' 14' 26' 28' 41 });
Magic Number,Lucene.Net.Analysis.CharFilters,TestHTMLStripCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestHTMLStripCharFilterFactory.cs,TestSeparatorOnlyEscapedTags,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "this"' "is"' "only"' "a"' "test." }' new int[] { 3' 12' 18' 27' 32 }' new int[] { 11' 14' 26' 28' 41 });
Magic Number,Lucene.Net.Analysis.CharFilters,TestHTMLStripCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestHTMLStripCharFilterFactory.cs,TestEmptyEscapedTags,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "this"' "is"' "only"' "a"' "test." }' new int[] { 3' 12' 18' 27' 32 }' new int[] { 11' 14' 26' 28' 41 });
Magic Number,Lucene.Net.Analysis.CharFilters,TestHTMLStripCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestHTMLStripCharFilterFactory.cs,TestEmptyEscapedTags,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "this"' "is"' "only"' "a"' "test." }' new int[] { 3' 12' 18' 27' 32 }' new int[] { 11' 14' 26' 28' 41 });
Magic Number,Lucene.Net.Analysis.CharFilters,TestHTMLStripCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestHTMLStripCharFilterFactory.cs,TestEmptyEscapedTags,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "this"' "is"' "only"' "a"' "test." }' new int[] { 3' 12' 18' 27' 32 }' new int[] { 11' 14' 26' 28' 41 });
Magic Number,Lucene.Net.Analysis.CharFilters,TestHTMLStripCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestHTMLStripCharFilterFactory.cs,TestEmptyEscapedTags,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "this"' "is"' "only"' "a"' "test." }' new int[] { 3' 12' 18' 27' 32 }' new int[] { 11' 14' 26' 28' 41 });
Magic Number,Lucene.Net.Analysis.CharFilters,TestHTMLStripCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestHTMLStripCharFilterFactory.cs,TestEmptyEscapedTags,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "this"' "is"' "only"' "a"' "test." }' new int[] { 3' 12' 18' 27' 32 }' new int[] { 11' 14' 26' 28' 41 });
Magic Number,Lucene.Net.Analysis.CharFilters,TestHTMLStripCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestHTMLStripCharFilterFactory.cs,TestEmptyEscapedTags,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "this"' "is"' "only"' "a"' "test." }' new int[] { 3' 12' 18' 27' 32 }' new int[] { 11' 14' 26' 28' 41 });
Magic Number,Lucene.Net.Analysis.CharFilters,TestHTMLStripCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestHTMLStripCharFilterFactory.cs,TestEmptyEscapedTags,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "this"' "is"' "only"' "a"' "test." }' new int[] { 3' 12' 18' 27' 32 }' new int[] { 11' 14' 26' 28' 41 });
Magic Number,Lucene.Net.Analysis.CharFilters,TestHTMLStripCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestHTMLStripCharFilterFactory.cs,TestEmptyEscapedTags,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "this"' "is"' "only"' "a"' "test." }' new int[] { 3' 12' 18' 27' 32 }' new int[] { 11' 14' 26' 28' 41 });
Magic Number,Lucene.Net.Analysis.CharFilters,TestHTMLStripCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestHTMLStripCharFilterFactory.cs,TestEmptyEscapedTags,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "this"' "is"' "only"' "a"' "test." }' new int[] { 3' 12' 18' 27' 32 }' new int[] { 11' 14' 26' 28' 41 });
Magic Number,Lucene.Net.Analysis.CharFilters,TestHTMLStripCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestHTMLStripCharFilterFactory.cs,TestEmptyEscapedTags,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "this"' "is"' "only"' "a"' "test." }' new int[] { 3' 12' 18' 27' 32 }' new int[] { 11' 14' 26' 28' 41 });
Magic Number,Lucene.Net.Analysis.CharFilters,TestHTMLStripCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestHTMLStripCharFilterFactory.cs,TestSingleEscapedTag,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "this"' "is"' "<b>only</b>"' "a"' "test." }' new int[] { 3' 12' 15' 27' 32 }' new int[] { 11' 14' 26' 28' 41 });
Magic Number,Lucene.Net.Analysis.CharFilters,TestHTMLStripCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestHTMLStripCharFilterFactory.cs,TestSingleEscapedTag,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "this"' "is"' "<b>only</b>"' "a"' "test." }' new int[] { 3' 12' 15' 27' 32 }' new int[] { 11' 14' 26' 28' 41 });
Magic Number,Lucene.Net.Analysis.CharFilters,TestHTMLStripCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestHTMLStripCharFilterFactory.cs,TestSingleEscapedTag,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "this"' "is"' "<b>only</b>"' "a"' "test." }' new int[] { 3' 12' 15' 27' 32 }' new int[] { 11' 14' 26' 28' 41 });
Magic Number,Lucene.Net.Analysis.CharFilters,TestHTMLStripCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestHTMLStripCharFilterFactory.cs,TestSingleEscapedTag,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "this"' "is"' "<b>only</b>"' "a"' "test." }' new int[] { 3' 12' 15' 27' 32 }' new int[] { 11' 14' 26' 28' 41 });
Magic Number,Lucene.Net.Analysis.CharFilters,TestHTMLStripCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestHTMLStripCharFilterFactory.cs,TestSingleEscapedTag,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "this"' "is"' "<b>only</b>"' "a"' "test." }' new int[] { 3' 12' 15' 27' 32 }' new int[] { 11' 14' 26' 28' 41 });
Magic Number,Lucene.Net.Analysis.CharFilters,TestHTMLStripCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestHTMLStripCharFilterFactory.cs,TestSingleEscapedTag,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "this"' "is"' "<b>only</b>"' "a"' "test." }' new int[] { 3' 12' 15' 27' 32 }' new int[] { 11' 14' 26' 28' 41 });
Magic Number,Lucene.Net.Analysis.CharFilters,TestHTMLStripCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestHTMLStripCharFilterFactory.cs,TestSingleEscapedTag,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "this"' "is"' "<b>only</b>"' "a"' "test." }' new int[] { 3' 12' 15' 27' 32 }' new int[] { 11' 14' 26' 28' 41 });
Magic Number,Lucene.Net.Analysis.CharFilters,TestHTMLStripCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestHTMLStripCharFilterFactory.cs,TestSingleEscapedTag,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "this"' "is"' "<b>only</b>"' "a"' "test." }' new int[] { 3' 12' 15' 27' 32 }' new int[] { 11' 14' 26' 28' 41 });
Magic Number,Lucene.Net.Analysis.CharFilters,TestHTMLStripCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestHTMLStripCharFilterFactory.cs,TestSingleEscapedTag,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "this"' "is"' "<b>only</b>"' "a"' "test." }' new int[] { 3' 12' 15' 27' 32 }' new int[] { 11' 14' 26' 28' 41 });
Magic Number,Lucene.Net.Analysis.CharFilters,TestHTMLStripCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestHTMLStripCharFilterFactory.cs,TestSingleEscapedTag,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "this"' "is"' "<b>only</b>"' "a"' "test." }' new int[] { 3' 12' 15' 27' 32 }' new int[] { 11' 14' 26' 28' 41 });
Magic Number,Lucene.Net.Analysis.CharFilters,TestMappingCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestMappingCharFilter.cs,TestReaderReset,The following statement contains a magic number: char[] buf = new char[10];
Magic Number,Lucene.Net.Analysis.CharFilters,TestMappingCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestMappingCharFilter.cs,TestReaderReset,The following statement contains a magic number: int len = cs.Read(buf' 0' 10);
Magic Number,Lucene.Net.Analysis.CharFilters,TestMappingCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestMappingCharFilter.cs,TestReaderReset,The following statement contains a magic number: len = cs.Read(buf' 0' 10);
Magic Number,Lucene.Net.Analysis.CharFilters,TestMappingCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestMappingCharFilter.cs,TestReaderReset,The following statement contains a magic number: len = cs.Read(buf' 0' 10);
Magic Number,Lucene.Net.Analysis.CharFilters,TestMappingCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestMappingCharFilter.cs,Test2to4,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "llll" }' new int[] { 0 }' new int[] { 2 }' 2);
Magic Number,Lucene.Net.Analysis.CharFilters,TestMappingCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestMappingCharFilter.cs,Test2to4,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "llll" }' new int[] { 0 }' new int[] { 2 }' 2);
Magic Number,Lucene.Net.Analysis.CharFilters,TestMappingCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestMappingCharFilter.cs,Test2to1,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "a" }' new int[] { 0 }' new int[] { 2 }' 2);
Magic Number,Lucene.Net.Analysis.CharFilters,TestMappingCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestMappingCharFilter.cs,Test2to1,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "a" }' new int[] { 0 }' new int[] { 2 }' 2);
Magic Number,Lucene.Net.Analysis.CharFilters,TestMappingCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestMappingCharFilter.cs,Test3to1,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "b" }' new int[] { 0 }' new int[] { 3 }' 3);
Magic Number,Lucene.Net.Analysis.CharFilters,TestMappingCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestMappingCharFilter.cs,Test3to1,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "b" }' new int[] { 0 }' new int[] { 3 }' 3);
Magic Number,Lucene.Net.Analysis.CharFilters,TestMappingCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestMappingCharFilter.cs,Test4to2,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "cc" }' new int[] { 0 }' new int[] { 4 }' 4);
Magic Number,Lucene.Net.Analysis.CharFilters,TestMappingCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestMappingCharFilter.cs,Test4to2,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "cc" }' new int[] { 0 }' new int[] { 4 }' 4);
Magic Number,Lucene.Net.Analysis.CharFilters,TestMappingCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestMappingCharFilter.cs,Test5to0,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[0]' new int[] { }' new int[] { }' 5);
Magic Number,Lucene.Net.Analysis.CharFilters,TestMappingCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestMappingCharFilter.cs,TestNonBMPChar,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "fclef" }' new int[] { 0 }' new int[] { 2 }' 2);
Magic Number,Lucene.Net.Analysis.CharFilters,TestMappingCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestMappingCharFilter.cs,TestNonBMPChar,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "fclef" }' new int[] { 0 }' new int[] { 2 }' 2);
Magic Number,Lucene.Net.Analysis.CharFilters,TestMappingCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestMappingCharFilter.cs,TestTokenStream,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "i"' "i"' "jj"' "kkk"' "llll"' "cc"' "b"' "a" }' new int[] { 0' 2' 4' 6' 8' 11' 16' 20 }' new int[] { 1' 3' 5' 7' 10' 15' 19' 22 }' testString.Length);
Magic Number,Lucene.Net.Analysis.CharFilters,TestMappingCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestMappingCharFilter.cs,TestTokenStream,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "i"' "i"' "jj"' "kkk"' "llll"' "cc"' "b"' "a" }' new int[] { 0' 2' 4' 6' 8' 11' 16' 20 }' new int[] { 1' 3' 5' 7' 10' 15' 19' 22 }' testString.Length);
Magic Number,Lucene.Net.Analysis.CharFilters,TestMappingCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestMappingCharFilter.cs,TestTokenStream,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "i"' "i"' "jj"' "kkk"' "llll"' "cc"' "b"' "a" }' new int[] { 0' 2' 4' 6' 8' 11' 16' 20 }' new int[] { 1' 3' 5' 7' 10' 15' 19' 22 }' testString.Length);
Magic Number,Lucene.Net.Analysis.CharFilters,TestMappingCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestMappingCharFilter.cs,TestTokenStream,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "i"' "i"' "jj"' "kkk"' "llll"' "cc"' "b"' "a" }' new int[] { 0' 2' 4' 6' 8' 11' 16' 20 }' new int[] { 1' 3' 5' 7' 10' 15' 19' 22 }' testString.Length);
Magic Number,Lucene.Net.Analysis.CharFilters,TestMappingCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestMappingCharFilter.cs,TestTokenStream,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "i"' "i"' "jj"' "kkk"' "llll"' "cc"' "b"' "a" }' new int[] { 0' 2' 4' 6' 8' 11' 16' 20 }' new int[] { 1' 3' 5' 7' 10' 15' 19' 22 }' testString.Length);
Magic Number,Lucene.Net.Analysis.CharFilters,TestMappingCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestMappingCharFilter.cs,TestTokenStream,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "i"' "i"' "jj"' "kkk"' "llll"' "cc"' "b"' "a" }' new int[] { 0' 2' 4' 6' 8' 11' 16' 20 }' new int[] { 1' 3' 5' 7' 10' 15' 19' 22 }' testString.Length);
Magic Number,Lucene.Net.Analysis.CharFilters,TestMappingCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestMappingCharFilter.cs,TestTokenStream,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "i"' "i"' "jj"' "kkk"' "llll"' "cc"' "b"' "a" }' new int[] { 0' 2' 4' 6' 8' 11' 16' 20 }' new int[] { 1' 3' 5' 7' 10' 15' 19' 22 }' testString.Length);
Magic Number,Lucene.Net.Analysis.CharFilters,TestMappingCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestMappingCharFilter.cs,TestTokenStream,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "i"' "i"' "jj"' "kkk"' "llll"' "cc"' "b"' "a" }' new int[] { 0' 2' 4' 6' 8' 11' 16' 20 }' new int[] { 1' 3' 5' 7' 10' 15' 19' 22 }' testString.Length);
Magic Number,Lucene.Net.Analysis.CharFilters,TestMappingCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestMappingCharFilter.cs,TestTokenStream,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "i"' "i"' "jj"' "kkk"' "llll"' "cc"' "b"' "a" }' new int[] { 0' 2' 4' 6' 8' 11' 16' 20 }' new int[] { 1' 3' 5' 7' 10' 15' 19' 22 }' testString.Length);
Magic Number,Lucene.Net.Analysis.CharFilters,TestMappingCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestMappingCharFilter.cs,TestTokenStream,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "i"' "i"' "jj"' "kkk"' "llll"' "cc"' "b"' "a" }' new int[] { 0' 2' 4' 6' 8' 11' 16' 20 }' new int[] { 1' 3' 5' 7' 10' 15' 19' 22 }' testString.Length);
Magic Number,Lucene.Net.Analysis.CharFilters,TestMappingCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestMappingCharFilter.cs,TestTokenStream,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "i"' "i"' "jj"' "kkk"' "llll"' "cc"' "b"' "a" }' new int[] { 0' 2' 4' 6' 8' 11' 16' 20 }' new int[] { 1' 3' 5' 7' 10' 15' 19' 22 }' testString.Length);
Magic Number,Lucene.Net.Analysis.CharFilters,TestMappingCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestMappingCharFilter.cs,TestTokenStream,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "i"' "i"' "jj"' "kkk"' "llll"' "cc"' "b"' "a" }' new int[] { 0' 2' 4' 6' 8' 11' 16' 20 }' new int[] { 1' 3' 5' 7' 10' 15' 19' 22 }' testString.Length);
Magic Number,Lucene.Net.Analysis.CharFilters,TestMappingCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestMappingCharFilter.cs,TestTokenStream,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "i"' "i"' "jj"' "kkk"' "llll"' "cc"' "b"' "a" }' new int[] { 0' 2' 4' 6' 8' 11' 16' 20 }' new int[] { 1' 3' 5' 7' 10' 15' 19' 22 }' testString.Length);
Magic Number,Lucene.Net.Analysis.CharFilters,TestMappingCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestMappingCharFilter.cs,TestTokenStream,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "i"' "i"' "jj"' "kkk"' "llll"' "cc"' "b"' "a" }' new int[] { 0' 2' 4' 6' 8' 11' 16' 20 }' new int[] { 1' 3' 5' 7' 10' 15' 19' 22 }' testString.Length);
Magic Number,Lucene.Net.Analysis.CharFilters,TestMappingCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestMappingCharFilter.cs,TestChained,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "a"' "llllllll"' "i" }' new int[] { 0' 5' 8 }' new int[] { 4' 7' 9 }' testString.Length);
Magic Number,Lucene.Net.Analysis.CharFilters,TestMappingCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestMappingCharFilter.cs,TestChained,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "a"' "llllllll"' "i" }' new int[] { 0' 5' 8 }' new int[] { 4' 7' 9 }' testString.Length);
Magic Number,Lucene.Net.Analysis.CharFilters,TestMappingCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestMappingCharFilter.cs,TestChained,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "a"' "llllllll"' "i" }' new int[] { 0' 5' 8 }' new int[] { 4' 7' 9 }' testString.Length);
Magic Number,Lucene.Net.Analysis.CharFilters,TestMappingCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestMappingCharFilter.cs,TestChained,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "a"' "llllllll"' "i" }' new int[] { 0' 5' 8 }' new int[] { 4' 7' 9 }' testString.Length);
Magic Number,Lucene.Net.Analysis.CharFilters,TestMappingCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestMappingCharFilter.cs,TestChained,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "a"' "llllllll"' "i" }' new int[] { 0' 5' 8 }' new int[] { 4' 7' 9 }' testString.Length);
Magic Number,Lucene.Net.Analysis.CharFilters,TestMappingCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestMappingCharFilter.cs,TestRandom,The following statement contains a magic number: int numRounds = RANDOM_MULTIPLIER * 10000;
Magic Number,Lucene.Net.Analysis.CharFilters,TestMappingCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestMappingCharFilter.cs,TestRandomMaps,The following statement contains a magic number: int numIterations = AtLeast(3);
Magic Number,Lucene.Net.Analysis.CharFilters,TestMappingCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestMappingCharFilter.cs,TestRandomMaps,The following statement contains a magic number: int numRounds = 100;
Magic Number,Lucene.Net.Analysis.CharFilters,TestMappingCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestMappingCharFilter.cs,RandomMap,The following statement contains a magic number: int num = random.Next(5);
Magic Number,Lucene.Net.Analysis.CharFilters,TestMappingCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestMappingCharFilter.cs,TestRandomMaps2,The following statement contains a magic number: int numIterations = AtLeast(3);
Magic Number,Lucene.Net.Analysis.CharFilters,TestMappingCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestMappingCharFilter.cs,TestRandomMaps2,The following statement contains a magic number: int numMappings = AtLeast(5);
Magic Number,Lucene.Net.Analysis.CharFilters,TestMappingCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestMappingCharFilter.cs,TestRandomMaps2,The following statement contains a magic number: string key = TestUtil.RandomSimpleStringRange(random' 'a'' endLetter' 7);
Magic Number,Lucene.Net.Analysis.CharFilters,TestMappingCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestMappingCharFilter.cs,TestRandomMaps2,The following statement contains a magic number: string content = TestUtil.RandomSimpleStringRange(random' 'a'' endLetter' AtLeast(1000));
Magic Number,Lucene.Net.Analysis.CharFilters,TestMappingCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestMappingCharFilter.cs,TestRandomMaps2,The following statement contains a magic number: random.Next(10) == 7
Magic Number,Lucene.Net.Analysis.CharFilters,TestMappingCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestMappingCharFilter.cs,TestRandomMaps2,The following statement contains a magic number: random.Next(10) == 7
Magic Number,Lucene.Net.Analysis.CharFilters,TestMappingCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\CharFilters\TestMappingCharFilter.cs,TestRandomMaps2,The following statement contains a magic number: iter2 < 100
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestJa1,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "一二三四五六七八九十"' new string[] { "一二"' "二三"' "三四"' "四五"' "五六"' "六七"' "七八"' "八九"' "九十" }' new int[] { 0' 1' 2' 3' 4' 5' 6' 7' 8 }' new int[] { 2' 3' 4' 5' 6' 7' 8' 9' 10 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestJa1,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "一二三四五六七八九十"' new string[] { "一二"' "二三"' "三四"' "四五"' "五六"' "六七"' "七八"' "八九"' "九十" }' new int[] { 0' 1' 2' 3' 4' 5' 6' 7' 8 }' new int[] { 2' 3' 4' 5' 6' 7' 8' 9' 10 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestJa1,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "一二三四五六七八九十"' new string[] { "一二"' "二三"' "三四"' "四五"' "五六"' "六七"' "七八"' "八九"' "九十" }' new int[] { 0' 1' 2' 3' 4' 5' 6' 7' 8 }' new int[] { 2' 3' 4' 5' 6' 7' 8' 9' 10 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestJa1,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "一二三四五六七八九十"' new string[] { "一二"' "二三"' "三四"' "四五"' "五六"' "六七"' "七八"' "八九"' "九十" }' new int[] { 0' 1' 2' 3' 4' 5' 6' 7' 8 }' new int[] { 2' 3' 4' 5' 6' 7' 8' 9' 10 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestJa1,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "一二三四五六七八九十"' new string[] { "一二"' "二三"' "三四"' "四五"' "五六"' "六七"' "七八"' "八九"' "九十" }' new int[] { 0' 1' 2' 3' 4' 5' 6' 7' 8 }' new int[] { 2' 3' 4' 5' 6' 7' 8' 9' 10 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestJa1,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "一二三四五六七八九十"' new string[] { "一二"' "二三"' "三四"' "四五"' "五六"' "六七"' "七八"' "八九"' "九十" }' new int[] { 0' 1' 2' 3' 4' 5' 6' 7' 8 }' new int[] { 2' 3' 4' 5' 6' 7' 8' 9' 10 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestJa1,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "一二三四五六七八九十"' new string[] { "一二"' "二三"' "三四"' "四五"' "五六"' "六七"' "七八"' "八九"' "九十" }' new int[] { 0' 1' 2' 3' 4' 5' 6' 7' 8 }' new int[] { 2' 3' 4' 5' 6' 7' 8' 9' 10 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestJa1,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "一二三四五六七八九十"' new string[] { "一二"' "二三"' "三四"' "四五"' "五六"' "六七"' "七八"' "八九"' "九十" }' new int[] { 0' 1' 2' 3' 4' 5' 6' 7' 8 }' new int[] { 2' 3' 4' 5' 6' 7' 8' 9' 10 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestJa1,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "一二三四五六七八九十"' new string[] { "一二"' "二三"' "三四"' "四五"' "五六"' "六七"' "七八"' "八九"' "九十" }' new int[] { 0' 1' 2' 3' 4' 5' 6' 7' 8 }' new int[] { 2' 3' 4' 5' 6' 7' 8' 9' 10 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestJa1,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "一二三四五六七八九十"' new string[] { "一二"' "二三"' "三四"' "四五"' "五六"' "六七"' "七八"' "八九"' "九十" }' new int[] { 0' 1' 2' 3' 4' 5' 6' 7' 8 }' new int[] { 2' 3' 4' 5' 6' 7' 8' 9' 10 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestJa1,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "一二三四五六七八九十"' new string[] { "一二"' "二三"' "三四"' "四五"' "五六"' "六七"' "七八"' "八九"' "九十" }' new int[] { 0' 1' 2' 3' 4' 5' 6' 7' 8 }' new int[] { 2' 3' 4' 5' 6' 7' 8' 9' 10 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestJa1,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "一二三四五六七八九十"' new string[] { "一二"' "二三"' "三四"' "四五"' "五六"' "六七"' "七八"' "八九"' "九十" }' new int[] { 0' 1' 2' 3' 4' 5' 6' 7' 8 }' new int[] { 2' 3' 4' 5' 6' 7' 8' 9' 10 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestJa1,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "一二三四五六七八九十"' new string[] { "一二"' "二三"' "三四"' "四五"' "五六"' "六七"' "七八"' "八九"' "九十" }' new int[] { 0' 1' 2' 3' 4' 5' 6' 7' 8 }' new int[] { 2' 3' 4' 5' 6' 7' 8' 9' 10 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestJa1,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "一二三四五六七八九十"' new string[] { "一二"' "二三"' "三四"' "四五"' "五六"' "六七"' "七八"' "八九"' "九十" }' new int[] { 0' 1' 2' 3' 4' 5' 6' 7' 8 }' new int[] { 2' 3' 4' 5' 6' 7' 8' 9' 10 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestJa1,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "一二三四五六七八九十"' new string[] { "一二"' "二三"' "三四"' "四五"' "五六"' "六七"' "七八"' "八九"' "九十" }' new int[] { 0' 1' 2' 3' 4' 5' 6' 7' 8 }' new int[] { 2' 3' 4' 5' 6' 7' 8' 9' 10 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestJa1,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "一二三四五六七八九十"' new string[] { "一二"' "二三"' "三四"' "四五"' "五六"' "六七"' "七八"' "八九"' "九十" }' new int[] { 0' 1' 2' 3' 4' 5' 6' 7' 8 }' new int[] { 2' 3' 4' 5' 6' 7' 8' 9' 10 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestJa2,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "一 二三四 五六七八九 十"' new string[] { "一"' "二三"' "三四"' "五六"' "六七"' "七八"' "八九"' "十" }' new int[] { 0' 2' 3' 6' 7' 8' 9' 12 }' new int[] { 1' 4' 5' 8' 9' 10' 11' 13 }' new string[] { "<SINGLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestJa2,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "一 二三四 五六七八九 十"' new string[] { "一"' "二三"' "三四"' "五六"' "六七"' "七八"' "八九"' "十" }' new int[] { 0' 2' 3' 6' 7' 8' 9' 12 }' new int[] { 1' 4' 5' 8' 9' 10' 11' 13 }' new string[] { "<SINGLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestJa2,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "一 二三四 五六七八九 十"' new string[] { "一"' "二三"' "三四"' "五六"' "六七"' "七八"' "八九"' "十" }' new int[] { 0' 2' 3' 6' 7' 8' 9' 12 }' new int[] { 1' 4' 5' 8' 9' 10' 11' 13 }' new string[] { "<SINGLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestJa2,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "一 二三四 五六七八九 十"' new string[] { "一"' "二三"' "三四"' "五六"' "六七"' "七八"' "八九"' "十" }' new int[] { 0' 2' 3' 6' 7' 8' 9' 12 }' new int[] { 1' 4' 5' 8' 9' 10' 11' 13 }' new string[] { "<SINGLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestJa2,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "一 二三四 五六七八九 十"' new string[] { "一"' "二三"' "三四"' "五六"' "六七"' "七八"' "八九"' "十" }' new int[] { 0' 2' 3' 6' 7' 8' 9' 12 }' new int[] { 1' 4' 5' 8' 9' 10' 11' 13 }' new string[] { "<SINGLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestJa2,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "一 二三四 五六七八九 十"' new string[] { "一"' "二三"' "三四"' "五六"' "六七"' "七八"' "八九"' "十" }' new int[] { 0' 2' 3' 6' 7' 8' 9' 12 }' new int[] { 1' 4' 5' 8' 9' 10' 11' 13 }' new string[] { "<SINGLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestJa2,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "一 二三四 五六七八九 十"' new string[] { "一"' "二三"' "三四"' "五六"' "六七"' "七八"' "八九"' "十" }' new int[] { 0' 2' 3' 6' 7' 8' 9' 12 }' new int[] { 1' 4' 5' 8' 9' 10' 11' 13 }' new string[] { "<SINGLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestJa2,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "一 二三四 五六七八九 十"' new string[] { "一"' "二三"' "三四"' "五六"' "六七"' "七八"' "八九"' "十" }' new int[] { 0' 2' 3' 6' 7' 8' 9' 12 }' new int[] { 1' 4' 5' 8' 9' 10' 11' 13 }' new string[] { "<SINGLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestJa2,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "一 二三四 五六七八九 十"' new string[] { "一"' "二三"' "三四"' "五六"' "六七"' "七八"' "八九"' "十" }' new int[] { 0' 2' 3' 6' 7' 8' 9' 12 }' new int[] { 1' 4' 5' 8' 9' 10' 11' 13 }' new string[] { "<SINGLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestJa2,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "一 二三四 五六七八九 十"' new string[] { "一"' "二三"' "三四"' "五六"' "六七"' "七八"' "八九"' "十" }' new int[] { 0' 2' 3' 6' 7' 8' 9' 12 }' new int[] { 1' 4' 5' 8' 9' 10' 11' 13 }' new string[] { "<SINGLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestJa2,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "一 二三四 五六七八九 十"' new string[] { "一"' "二三"' "三四"' "五六"' "六七"' "七八"' "八九"' "十" }' new int[] { 0' 2' 3' 6' 7' 8' 9' 12 }' new int[] { 1' 4' 5' 8' 9' 10' 11' 13 }' new string[] { "<SINGLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestJa2,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "一 二三四 五六七八九 十"' new string[] { "一"' "二三"' "三四"' "五六"' "六七"' "七八"' "八九"' "十" }' new int[] { 0' 2' 3' 6' 7' 8' 9' 12 }' new int[] { 1' 4' 5' 8' 9' 10' 11' 13 }' new string[] { "<SINGLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestJa2,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "一 二三四 五六七八九 十"' new string[] { "一"' "二三"' "三四"' "五六"' "六七"' "七八"' "八九"' "十" }' new int[] { 0' 2' 3' 6' 7' 8' 9' 12 }' new int[] { 1' 4' 5' 8' 9' 10' 11' 13 }' new string[] { "<SINGLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestJa2,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "一 二三四 五六七八九 十"' new string[] { "一"' "二三"' "三四"' "五六"' "六七"' "七八"' "八九"' "十" }' new int[] { 0' 2' 3' 6' 7' 8' 9' 12 }' new int[] { 1' 4' 5' 8' 9' 10' 11' 13 }' new string[] { "<SINGLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestC,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "abc defgh ijklmn opqrstu vwxy z"' new string[] { "abc"' "defgh"' "ijklmn"' "opqrstu"' "vwxy"' "z" }' new int[] { 0' 4' 10' 17' 25' 30 }' new int[] { 3' 9' 16' 24' 29' 31 }' new string[] { "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>" }' new int[] { 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestC,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "abc defgh ijklmn opqrstu vwxy z"' new string[] { "abc"' "defgh"' "ijklmn"' "opqrstu"' "vwxy"' "z" }' new int[] { 0' 4' 10' 17' 25' 30 }' new int[] { 3' 9' 16' 24' 29' 31 }' new string[] { "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>" }' new int[] { 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestC,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "abc defgh ijklmn opqrstu vwxy z"' new string[] { "abc"' "defgh"' "ijklmn"' "opqrstu"' "vwxy"' "z" }' new int[] { 0' 4' 10' 17' 25' 30 }' new int[] { 3' 9' 16' 24' 29' 31 }' new string[] { "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>" }' new int[] { 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestC,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "abc defgh ijklmn opqrstu vwxy z"' new string[] { "abc"' "defgh"' "ijklmn"' "opqrstu"' "vwxy"' "z" }' new int[] { 0' 4' 10' 17' 25' 30 }' new int[] { 3' 9' 16' 24' 29' 31 }' new string[] { "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>" }' new int[] { 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestC,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "abc defgh ijklmn opqrstu vwxy z"' new string[] { "abc"' "defgh"' "ijklmn"' "opqrstu"' "vwxy"' "z" }' new int[] { 0' 4' 10' 17' 25' 30 }' new int[] { 3' 9' 16' 24' 29' 31 }' new string[] { "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>" }' new int[] { 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestC,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "abc defgh ijklmn opqrstu vwxy z"' new string[] { "abc"' "defgh"' "ijklmn"' "opqrstu"' "vwxy"' "z" }' new int[] { 0' 4' 10' 17' 25' 30 }' new int[] { 3' 9' 16' 24' 29' 31 }' new string[] { "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>" }' new int[] { 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestC,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "abc defgh ijklmn opqrstu vwxy z"' new string[] { "abc"' "defgh"' "ijklmn"' "opqrstu"' "vwxy"' "z" }' new int[] { 0' 4' 10' 17' 25' 30 }' new int[] { 3' 9' 16' 24' 29' 31 }' new string[] { "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>" }' new int[] { 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestC,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "abc defgh ijklmn opqrstu vwxy z"' new string[] { "abc"' "defgh"' "ijklmn"' "opqrstu"' "vwxy"' "z" }' new int[] { 0' 4' 10' 17' 25' 30 }' new int[] { 3' 9' 16' 24' 29' 31 }' new string[] { "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>" }' new int[] { 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestC,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "abc defgh ijklmn opqrstu vwxy z"' new string[] { "abc"' "defgh"' "ijklmn"' "opqrstu"' "vwxy"' "z" }' new int[] { 0' 4' 10' 17' 25' 30 }' new int[] { 3' 9' 16' 24' 29' 31 }' new string[] { "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>" }' new int[] { 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestC,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "abc defgh ijklmn opqrstu vwxy z"' new string[] { "abc"' "defgh"' "ijklmn"' "opqrstu"' "vwxy"' "z" }' new int[] { 0' 4' 10' 17' 25' 30 }' new int[] { 3' 9' 16' 24' 29' 31 }' new string[] { "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>" }' new int[] { 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestC,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "abc defgh ijklmn opqrstu vwxy z"' new string[] { "abc"' "defgh"' "ijklmn"' "opqrstu"' "vwxy"' "z" }' new int[] { 0' 4' 10' 17' 25' 30 }' new int[] { 3' 9' 16' 24' 29' 31 }' new string[] { "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>" }' new int[] { 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestFinalOffset,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あい"' new string[] { "あい" }' new int[] { 0 }' new int[] { 2 }' new string[] { "<DOUBLE>" }' new int[] { 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestFinalOffset,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あい   "' new string[] { "あい" }' new int[] { 0 }' new int[] { 2 }' new string[] { "<DOUBLE>" }' new int[] { 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestFinalOffset,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "test"' new string[] { "test" }' new int[] { 0 }' new int[] { 4 }' new string[] { "<ALPHANUM>" }' new int[] { 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestFinalOffset,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "test   "' new string[] { "test" }' new int[] { 0 }' new int[] { 4 }' new string[] { "<ALPHANUM>" }' new int[] { 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestFinalOffset,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいtest"' new string[] { "あい"' "test" }' new int[] { 0' 2 }' new int[] { 2' 6 }' new string[] { "<DOUBLE>"' "<ALPHANUM>" }' new int[] { 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestFinalOffset,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいtest"' new string[] { "あい"' "test" }' new int[] { 0' 2 }' new int[] { 2' 6 }' new string[] { "<DOUBLE>"' "<ALPHANUM>" }' new int[] { 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestFinalOffset,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいtest"' new string[] { "あい"' "test" }' new int[] { 0' 2 }' new int[] { 2' 6 }' new string[] { "<DOUBLE>"' "<ALPHANUM>" }' new int[] { 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestFinalOffset,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "testあい    "' new string[] { "test"' "あい" }' new int[] { 0' 4 }' new int[] { 4' 6 }' new string[] { "<ALPHANUM>"' "<DOUBLE>" }' new int[] { 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestFinalOffset,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "testあい    "' new string[] { "test"' "あい" }' new int[] { 0' 4 }' new int[] { 4' 6 }' new string[] { "<ALPHANUM>"' "<DOUBLE>" }' new int[] { 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestFinalOffset,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "testあい    "' new string[] { "test"' "あい" }' new int[] { 0' 4 }' new int[] { 4' 6 }' new string[] { "<ALPHANUM>"' "<DOUBLE>" }' new int[] { 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestMix,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいうえおabcかきくけこ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "abc"' "かき"' "きく"' "くけ"' "けこ" }' new int[] { 0' 1' 2' 3' 5' 8' 9' 10' 11 }' new int[] { 2' 3' 4' 5' 8' 10' 11' 12' 13 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestMix,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいうえおabcかきくけこ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "abc"' "かき"' "きく"' "くけ"' "けこ" }' new int[] { 0' 1' 2' 3' 5' 8' 9' 10' 11 }' new int[] { 2' 3' 4' 5' 8' 10' 11' 12' 13 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestMix,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいうえおabcかきくけこ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "abc"' "かき"' "きく"' "くけ"' "けこ" }' new int[] { 0' 1' 2' 3' 5' 8' 9' 10' 11 }' new int[] { 2' 3' 4' 5' 8' 10' 11' 12' 13 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestMix,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいうえおabcかきくけこ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "abc"' "かき"' "きく"' "くけ"' "けこ" }' new int[] { 0' 1' 2' 3' 5' 8' 9' 10' 11 }' new int[] { 2' 3' 4' 5' 8' 10' 11' 12' 13 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestMix,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいうえおabcかきくけこ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "abc"' "かき"' "きく"' "くけ"' "けこ" }' new int[] { 0' 1' 2' 3' 5' 8' 9' 10' 11 }' new int[] { 2' 3' 4' 5' 8' 10' 11' 12' 13 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestMix,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいうえおabcかきくけこ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "abc"' "かき"' "きく"' "くけ"' "けこ" }' new int[] { 0' 1' 2' 3' 5' 8' 9' 10' 11 }' new int[] { 2' 3' 4' 5' 8' 10' 11' 12' 13 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestMix,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいうえおabcかきくけこ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "abc"' "かき"' "きく"' "くけ"' "けこ" }' new int[] { 0' 1' 2' 3' 5' 8' 9' 10' 11 }' new int[] { 2' 3' 4' 5' 8' 10' 11' 12' 13 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestMix,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいうえおabcかきくけこ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "abc"' "かき"' "きく"' "くけ"' "けこ" }' new int[] { 0' 1' 2' 3' 5' 8' 9' 10' 11 }' new int[] { 2' 3' 4' 5' 8' 10' 11' 12' 13 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestMix,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいうえおabcかきくけこ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "abc"' "かき"' "きく"' "くけ"' "けこ" }' new int[] { 0' 1' 2' 3' 5' 8' 9' 10' 11 }' new int[] { 2' 3' 4' 5' 8' 10' 11' 12' 13 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestMix,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいうえおabcかきくけこ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "abc"' "かき"' "きく"' "くけ"' "けこ" }' new int[] { 0' 1' 2' 3' 5' 8' 9' 10' 11 }' new int[] { 2' 3' 4' 5' 8' 10' 11' 12' 13 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestMix,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいうえおabcかきくけこ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "abc"' "かき"' "きく"' "くけ"' "けこ" }' new int[] { 0' 1' 2' 3' 5' 8' 9' 10' 11 }' new int[] { 2' 3' 4' 5' 8' 10' 11' 12' 13 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestMix,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいうえおabcかきくけこ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "abc"' "かき"' "きく"' "くけ"' "けこ" }' new int[] { 0' 1' 2' 3' 5' 8' 9' 10' 11 }' new int[] { 2' 3' 4' 5' 8' 10' 11' 12' 13 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestMix,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいうえおabcかきくけこ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "abc"' "かき"' "きく"' "くけ"' "けこ" }' new int[] { 0' 1' 2' 3' 5' 8' 9' 10' 11 }' new int[] { 2' 3' 4' 5' 8' 10' 11' 12' 13 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestMix,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいうえおabcかきくけこ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "abc"' "かき"' "きく"' "くけ"' "けこ" }' new int[] { 0' 1' 2' 3' 5' 8' 9' 10' 11 }' new int[] { 2' 3' 4' 5' 8' 10' 11' 12' 13 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestMix,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいうえおabcかきくけこ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "abc"' "かき"' "きく"' "くけ"' "けこ" }' new int[] { 0' 1' 2' 3' 5' 8' 9' 10' 11 }' new int[] { 2' 3' 4' 5' 8' 10' 11' 12' 13 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestMix,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいうえおabcかきくけこ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "abc"' "かき"' "きく"' "くけ"' "けこ" }' new int[] { 0' 1' 2' 3' 5' 8' 9' 10' 11 }' new int[] { 2' 3' 4' 5' 8' 10' 11' 12' 13 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestMix2,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいうえおabんcかきくけ こ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "ab"' "ん"' "c"' "かき"' "きく"' "くけ"' "こ" }' new int[] { 0' 1' 2' 3' 5' 7' 8' 9' 10' 11' 14 }' new int[] { 2' 3' 4' 5' 7' 8' 9' 11' 12' 13' 15 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<SINGLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestMix2,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいうえおabんcかきくけ こ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "ab"' "ん"' "c"' "かき"' "きく"' "くけ"' "こ" }' new int[] { 0' 1' 2' 3' 5' 7' 8' 9' 10' 11' 14 }' new int[] { 2' 3' 4' 5' 7' 8' 9' 11' 12' 13' 15 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<SINGLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestMix2,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいうえおabんcかきくけ こ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "ab"' "ん"' "c"' "かき"' "きく"' "くけ"' "こ" }' new int[] { 0' 1' 2' 3' 5' 7' 8' 9' 10' 11' 14 }' new int[] { 2' 3' 4' 5' 7' 8' 9' 11' 12' 13' 15 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<SINGLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestMix2,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいうえおabんcかきくけ こ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "ab"' "ん"' "c"' "かき"' "きく"' "くけ"' "こ" }' new int[] { 0' 1' 2' 3' 5' 7' 8' 9' 10' 11' 14 }' new int[] { 2' 3' 4' 5' 7' 8' 9' 11' 12' 13' 15 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<SINGLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestMix2,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいうえおabんcかきくけ こ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "ab"' "ん"' "c"' "かき"' "きく"' "くけ"' "こ" }' new int[] { 0' 1' 2' 3' 5' 7' 8' 9' 10' 11' 14 }' new int[] { 2' 3' 4' 5' 7' 8' 9' 11' 12' 13' 15 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<SINGLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestMix2,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいうえおabんcかきくけ こ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "ab"' "ん"' "c"' "かき"' "きく"' "くけ"' "こ" }' new int[] { 0' 1' 2' 3' 5' 7' 8' 9' 10' 11' 14 }' new int[] { 2' 3' 4' 5' 7' 8' 9' 11' 12' 13' 15 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<SINGLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestMix2,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいうえおabんcかきくけ こ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "ab"' "ん"' "c"' "かき"' "きく"' "くけ"' "こ" }' new int[] { 0' 1' 2' 3' 5' 7' 8' 9' 10' 11' 14 }' new int[] { 2' 3' 4' 5' 7' 8' 9' 11' 12' 13' 15 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<SINGLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestMix2,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいうえおabんcかきくけ こ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "ab"' "ん"' "c"' "かき"' "きく"' "くけ"' "こ" }' new int[] { 0' 1' 2' 3' 5' 7' 8' 9' 10' 11' 14 }' new int[] { 2' 3' 4' 5' 7' 8' 9' 11' 12' 13' 15 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<SINGLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestMix2,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいうえおabんcかきくけ こ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "ab"' "ん"' "c"' "かき"' "きく"' "くけ"' "こ" }' new int[] { 0' 1' 2' 3' 5' 7' 8' 9' 10' 11' 14 }' new int[] { 2' 3' 4' 5' 7' 8' 9' 11' 12' 13' 15 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<SINGLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestMix2,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいうえおabんcかきくけ こ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "ab"' "ん"' "c"' "かき"' "きく"' "くけ"' "こ" }' new int[] { 0' 1' 2' 3' 5' 7' 8' 9' 10' 11' 14 }' new int[] { 2' 3' 4' 5' 7' 8' 9' 11' 12' 13' 15 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<SINGLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestMix2,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいうえおabんcかきくけ こ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "ab"' "ん"' "c"' "かき"' "きく"' "くけ"' "こ" }' new int[] { 0' 1' 2' 3' 5' 7' 8' 9' 10' 11' 14 }' new int[] { 2' 3' 4' 5' 7' 8' 9' 11' 12' 13' 15 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<SINGLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestMix2,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいうえおabんcかきくけ こ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "ab"' "ん"' "c"' "かき"' "きく"' "くけ"' "こ" }' new int[] { 0' 1' 2' 3' 5' 7' 8' 9' 10' 11' 14 }' new int[] { 2' 3' 4' 5' 7' 8' 9' 11' 12' 13' 15 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<SINGLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestMix2,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいうえおabんcかきくけ こ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "ab"' "ん"' "c"' "かき"' "きく"' "くけ"' "こ" }' new int[] { 0' 1' 2' 3' 5' 7' 8' 9' 10' 11' 14 }' new int[] { 2' 3' 4' 5' 7' 8' 9' 11' 12' 13' 15 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<SINGLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestMix2,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいうえおabんcかきくけ こ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "ab"' "ん"' "c"' "かき"' "きく"' "くけ"' "こ" }' new int[] { 0' 1' 2' 3' 5' 7' 8' 9' 10' 11' 14 }' new int[] { 2' 3' 4' 5' 7' 8' 9' 11' 12' 13' 15 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<SINGLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestMix2,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいうえおabんcかきくけ こ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "ab"' "ん"' "c"' "かき"' "きく"' "くけ"' "こ" }' new int[] { 0' 1' 2' 3' 5' 7' 8' 9' 10' 11' 14 }' new int[] { 2' 3' 4' 5' 7' 8' 9' 11' 12' 13' 15 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<SINGLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestMix2,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいうえおabんcかきくけ こ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "ab"' "ん"' "c"' "かき"' "きく"' "くけ"' "こ" }' new int[] { 0' 1' 2' 3' 5' 7' 8' 9' 10' 11' 14 }' new int[] { 2' 3' 4' 5' 7' 8' 9' 11' 12' 13' 15 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<SINGLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestMix2,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいうえおabんcかきくけ こ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "ab"' "ん"' "c"' "かき"' "きく"' "くけ"' "こ" }' new int[] { 0' 1' 2' 3' 5' 7' 8' 9' 10' 11' 14 }' new int[] { 2' 3' 4' 5' 7' 8' 9' 11' 12' 13' 15 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<SINGLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestMix2,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいうえおabんcかきくけ こ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "ab"' "ん"' "c"' "かき"' "きく"' "くけ"' "こ" }' new int[] { 0' 1' 2' 3' 5' 7' 8' 9' 10' 11' 14 }' new int[] { 2' 3' 4' 5' 7' 8' 9' 11' 12' 13' 15 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<SINGLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestMix2,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいうえおabんcかきくけ こ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "ab"' "ん"' "c"' "かき"' "きく"' "くけ"' "こ" }' new int[] { 0' 1' 2' 3' 5' 7' 8' 9' 10' 11' 14 }' new int[] { 2' 3' 4' 5' 7' 8' 9' 11' 12' 13' 15 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<SINGLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestMix2,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいうえおabんcかきくけ こ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "ab"' "ん"' "c"' "かき"' "きく"' "くけ"' "こ" }' new int[] { 0' 1' 2' 3' 5' 7' 8' 9' 10' 11' 14 }' new int[] { 2' 3' 4' 5' 7' 8' 9' 11' 12' 13' 15 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<SINGLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestNonIdeographic,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "一 روبرت موير"' new string[] { "一"' "روبرت"' "موير" }' new int[] { 0' 2' 8 }' new int[] { 1' 7' 12 }' new string[] { "<SINGLE>"' "<ALPHANUM>"' "<ALPHANUM>" }' new int[] { 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestNonIdeographic,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "一 روبرت موير"' new string[] { "一"' "روبرت"' "موير" }' new int[] { 0' 2' 8 }' new int[] { 1' 7' 12 }' new string[] { "<SINGLE>"' "<ALPHANUM>"' "<ALPHANUM>" }' new int[] { 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestNonIdeographic,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "一 روبرت موير"' new string[] { "一"' "روبرت"' "موير" }' new int[] { 0' 2' 8 }' new int[] { 1' 7' 12 }' new string[] { "<SINGLE>"' "<ALPHANUM>"' "<ALPHANUM>" }' new int[] { 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestNonIdeographic,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "一 روبرت موير"' new string[] { "一"' "روبرت"' "موير" }' new int[] { 0' 2' 8 }' new int[] { 1' 7' 12 }' new string[] { "<SINGLE>"' "<ALPHANUM>"' "<ALPHANUM>" }' new int[] { 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestNonIdeographicNonLetter,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "一 رُوبرت موير"' new string[] { "一"' "رُوبرت"' "موير" }' new int[] { 0' 2' 9 }' new int[] { 1' 8' 13 }' new string[] { "<SINGLE>"' "<ALPHANUM>"' "<ALPHANUM>" }' new int[] { 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestNonIdeographicNonLetter,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "一 رُوبرت موير"' new string[] { "一"' "رُوبرت"' "موير" }' new int[] { 0' 2' 9 }' new int[] { 1' 8' 13 }' new string[] { "<SINGLE>"' "<ALPHANUM>"' "<ALPHANUM>" }' new int[] { 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestNonIdeographicNonLetter,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "一 رُوبرت موير"' new string[] { "一"' "رُوبرت"' "موير" }' new int[] { 0' 2' 9 }' new int[] { 1' 8' 13 }' new string[] { "<SINGLE>"' "<ALPHANUM>"' "<ALPHANUM>" }' new int[] { 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestNonIdeographicNonLetter,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "一 رُوبرت موير"' new string[] { "一"' "رُوبرت"' "موير" }' new int[] { 0' 2' 9 }' new int[] { 1' 8' 13 }' new string[] { "<SINGLE>"' "<ALPHANUM>"' "<ALPHANUM>" }' new int[] { 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestSurrogates,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "𩬅艱鍟䇹愯瀛"' new string[] { "𩬅艱"' "艱鍟"' "鍟䇹"' "䇹愯"' "愯瀛" }' new int[] { 0' 2' 3' 4' 5 }' new int[] { 3' 4' 5' 6' 7 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>" }' new int[] { 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestSurrogates,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "𩬅艱鍟䇹愯瀛"' new string[] { "𩬅艱"' "艱鍟"' "鍟䇹"' "䇹愯"' "愯瀛" }' new int[] { 0' 2' 3' 4' 5 }' new int[] { 3' 4' 5' 6' 7 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>" }' new int[] { 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestSurrogates,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "𩬅艱鍟䇹愯瀛"' new string[] { "𩬅艱"' "艱鍟"' "鍟䇹"' "䇹愯"' "愯瀛" }' new int[] { 0' 2' 3' 4' 5 }' new int[] { 3' 4' 5' 6' 7 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>" }' new int[] { 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestSurrogates,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "𩬅艱鍟䇹愯瀛"' new string[] { "𩬅艱"' "艱鍟"' "鍟䇹"' "䇹愯"' "愯瀛" }' new int[] { 0' 2' 3' 4' 5 }' new int[] { 3' 4' 5' 6' 7 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>" }' new int[] { 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestSurrogates,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "𩬅艱鍟䇹愯瀛"' new string[] { "𩬅艱"' "艱鍟"' "鍟䇹"' "䇹愯"' "愯瀛" }' new int[] { 0' 2' 3' 4' 5 }' new int[] { 3' 4' 5' 6' 7 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>" }' new int[] { 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestSurrogates,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "𩬅艱鍟䇹愯瀛"' new string[] { "𩬅艱"' "艱鍟"' "鍟䇹"' "䇹愯"' "愯瀛" }' new int[] { 0' 2' 3' 4' 5 }' new int[] { 3' 4' 5' 6' 7 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>" }' new int[] { 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestSurrogates,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "𩬅艱鍟䇹愯瀛"' new string[] { "𩬅艱"' "艱鍟"' "鍟䇹"' "䇹愯"' "愯瀛" }' new int[] { 0' 2' 3' 4' 5 }' new int[] { 3' 4' 5' 6' 7 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>" }' new int[] { 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestSurrogates,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "𩬅艱鍟䇹愯瀛"' new string[] { "𩬅艱"' "艱鍟"' "鍟䇹"' "䇹愯"' "愯瀛" }' new int[] { 0' 2' 3' 4' 5 }' new int[] { 3' 4' 5' 6' 7 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>" }' new int[] { 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestSurrogates,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "𩬅艱鍟䇹愯瀛"' new string[] { "𩬅艱"' "艱鍟"' "鍟䇹"' "䇹愯"' "愯瀛" }' new int[] { 0' 2' 3' 4' 5 }' new int[] { 3' 4' 5' 6' 7 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>" }' new int[] { 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestReusableTokenStream,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいうえおabcかきくけこ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "abc"' "かき"' "きく"' "くけ"' "けこ" }' new int[] { 0' 1' 2' 3' 5' 8' 9' 10' 11 }' new int[] { 2' 3' 4' 5' 8' 10' 11' 12' 13 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestReusableTokenStream,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいうえおabcかきくけこ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "abc"' "かき"' "きく"' "くけ"' "けこ" }' new int[] { 0' 1' 2' 3' 5' 8' 9' 10' 11 }' new int[] { 2' 3' 4' 5' 8' 10' 11' 12' 13 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestReusableTokenStream,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいうえおabcかきくけこ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "abc"' "かき"' "きく"' "くけ"' "けこ" }' new int[] { 0' 1' 2' 3' 5' 8' 9' 10' 11 }' new int[] { 2' 3' 4' 5' 8' 10' 11' 12' 13 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestReusableTokenStream,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいうえおabcかきくけこ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "abc"' "かき"' "きく"' "くけ"' "けこ" }' new int[] { 0' 1' 2' 3' 5' 8' 9' 10' 11 }' new int[] { 2' 3' 4' 5' 8' 10' 11' 12' 13 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestReusableTokenStream,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいうえおabcかきくけこ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "abc"' "かき"' "きく"' "くけ"' "けこ" }' new int[] { 0' 1' 2' 3' 5' 8' 9' 10' 11 }' new int[] { 2' 3' 4' 5' 8' 10' 11' 12' 13 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestReusableTokenStream,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいうえおabcかきくけこ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "abc"' "かき"' "きく"' "くけ"' "けこ" }' new int[] { 0' 1' 2' 3' 5' 8' 9' 10' 11 }' new int[] { 2' 3' 4' 5' 8' 10' 11' 12' 13 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestReusableTokenStream,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいうえおabcかきくけこ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "abc"' "かき"' "きく"' "くけ"' "けこ" }' new int[] { 0' 1' 2' 3' 5' 8' 9' 10' 11 }' new int[] { 2' 3' 4' 5' 8' 10' 11' 12' 13 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestReusableTokenStream,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいうえおabcかきくけこ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "abc"' "かき"' "きく"' "くけ"' "けこ" }' new int[] { 0' 1' 2' 3' 5' 8' 9' 10' 11 }' new int[] { 2' 3' 4' 5' 8' 10' 11' 12' 13 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestReusableTokenStream,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいうえおabcかきくけこ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "abc"' "かき"' "きく"' "くけ"' "けこ" }' new int[] { 0' 1' 2' 3' 5' 8' 9' 10' 11 }' new int[] { 2' 3' 4' 5' 8' 10' 11' 12' 13 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestReusableTokenStream,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいうえおabcかきくけこ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "abc"' "かき"' "きく"' "くけ"' "けこ" }' new int[] { 0' 1' 2' 3' 5' 8' 9' 10' 11 }' new int[] { 2' 3' 4' 5' 8' 10' 11' 12' 13 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestReusableTokenStream,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいうえおabcかきくけこ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "abc"' "かき"' "きく"' "くけ"' "けこ" }' new int[] { 0' 1' 2' 3' 5' 8' 9' 10' 11 }' new int[] { 2' 3' 4' 5' 8' 10' 11' 12' 13 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestReusableTokenStream,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいうえおabcかきくけこ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "abc"' "かき"' "きく"' "くけ"' "けこ" }' new int[] { 0' 1' 2' 3' 5' 8' 9' 10' 11 }' new int[] { 2' 3' 4' 5' 8' 10' 11' 12' 13 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestReusableTokenStream,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいうえおabcかきくけこ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "abc"' "かき"' "きく"' "くけ"' "けこ" }' new int[] { 0' 1' 2' 3' 5' 8' 9' 10' 11 }' new int[] { 2' 3' 4' 5' 8' 10' 11' 12' 13 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestReusableTokenStream,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいうえおabcかきくけこ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "abc"' "かき"' "きく"' "くけ"' "けこ" }' new int[] { 0' 1' 2' 3' 5' 8' 9' 10' 11 }' new int[] { 2' 3' 4' 5' 8' 10' 11' 12' 13 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestReusableTokenStream,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいうえおabcかきくけこ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "abc"' "かき"' "きく"' "くけ"' "けこ" }' new int[] { 0' 1' 2' 3' 5' 8' 9' 10' 11 }' new int[] { 2' 3' 4' 5' 8' 10' 11' 12' 13 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestReusableTokenStream,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいうえおabcかきくけこ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "abc"' "かき"' "きく"' "くけ"' "けこ" }' new int[] { 0' 1' 2' 3' 5' 8' 9' 10' 11 }' new int[] { 2' 3' 4' 5' 8' 10' 11' 12' 13 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestReusableTokenStream,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいうえおabんcかきくけ こ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "ab"' "ん"' "c"' "かき"' "きく"' "くけ"' "こ" }' new int[] { 0' 1' 2' 3' 5' 7' 8' 9' 10' 11' 14 }' new int[] { 2' 3' 4' 5' 7' 8' 9' 11' 12' 13' 15 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<SINGLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestReusableTokenStream,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいうえおabんcかきくけ こ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "ab"' "ん"' "c"' "かき"' "きく"' "くけ"' "こ" }' new int[] { 0' 1' 2' 3' 5' 7' 8' 9' 10' 11' 14 }' new int[] { 2' 3' 4' 5' 7' 8' 9' 11' 12' 13' 15 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<SINGLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestReusableTokenStream,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいうえおabんcかきくけ こ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "ab"' "ん"' "c"' "かき"' "きく"' "くけ"' "こ" }' new int[] { 0' 1' 2' 3' 5' 7' 8' 9' 10' 11' 14 }' new int[] { 2' 3' 4' 5' 7' 8' 9' 11' 12' 13' 15 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<SINGLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestReusableTokenStream,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいうえおabんcかきくけ こ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "ab"' "ん"' "c"' "かき"' "きく"' "くけ"' "こ" }' new int[] { 0' 1' 2' 3' 5' 7' 8' 9' 10' 11' 14 }' new int[] { 2' 3' 4' 5' 7' 8' 9' 11' 12' 13' 15 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<SINGLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestReusableTokenStream,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいうえおabんcかきくけ こ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "ab"' "ん"' "c"' "かき"' "きく"' "くけ"' "こ" }' new int[] { 0' 1' 2' 3' 5' 7' 8' 9' 10' 11' 14 }' new int[] { 2' 3' 4' 5' 7' 8' 9' 11' 12' 13' 15 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<SINGLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestReusableTokenStream,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいうえおabんcかきくけ こ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "ab"' "ん"' "c"' "かき"' "きく"' "くけ"' "こ" }' new int[] { 0' 1' 2' 3' 5' 7' 8' 9' 10' 11' 14 }' new int[] { 2' 3' 4' 5' 7' 8' 9' 11' 12' 13' 15 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<SINGLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestReusableTokenStream,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいうえおabんcかきくけ こ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "ab"' "ん"' "c"' "かき"' "きく"' "くけ"' "こ" }' new int[] { 0' 1' 2' 3' 5' 7' 8' 9' 10' 11' 14 }' new int[] { 2' 3' 4' 5' 7' 8' 9' 11' 12' 13' 15 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<SINGLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestReusableTokenStream,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいうえおabんcかきくけ こ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "ab"' "ん"' "c"' "かき"' "きく"' "くけ"' "こ" }' new int[] { 0' 1' 2' 3' 5' 7' 8' 9' 10' 11' 14 }' new int[] { 2' 3' 4' 5' 7' 8' 9' 11' 12' 13' 15 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<SINGLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestReusableTokenStream,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいうえおabんcかきくけ こ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "ab"' "ん"' "c"' "かき"' "きく"' "くけ"' "こ" }' new int[] { 0' 1' 2' 3' 5' 7' 8' 9' 10' 11' 14 }' new int[] { 2' 3' 4' 5' 7' 8' 9' 11' 12' 13' 15 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<SINGLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestReusableTokenStream,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいうえおabんcかきくけ こ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "ab"' "ん"' "c"' "かき"' "きく"' "くけ"' "こ" }' new int[] { 0' 1' 2' 3' 5' 7' 8' 9' 10' 11' 14 }' new int[] { 2' 3' 4' 5' 7' 8' 9' 11' 12' 13' 15 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<SINGLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestReusableTokenStream,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいうえおabんcかきくけ こ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "ab"' "ん"' "c"' "かき"' "きく"' "くけ"' "こ" }' new int[] { 0' 1' 2' 3' 5' 7' 8' 9' 10' 11' 14 }' new int[] { 2' 3' 4' 5' 7' 8' 9' 11' 12' 13' 15 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<SINGLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestReusableTokenStream,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいうえおabんcかきくけ こ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "ab"' "ん"' "c"' "かき"' "きく"' "くけ"' "こ" }' new int[] { 0' 1' 2' 3' 5' 7' 8' 9' 10' 11' 14 }' new int[] { 2' 3' 4' 5' 7' 8' 9' 11' 12' 13' 15 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<SINGLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestReusableTokenStream,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいうえおabんcかきくけ こ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "ab"' "ん"' "c"' "かき"' "きく"' "くけ"' "こ" }' new int[] { 0' 1' 2' 3' 5' 7' 8' 9' 10' 11' 14 }' new int[] { 2' 3' 4' 5' 7' 8' 9' 11' 12' 13' 15 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<SINGLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestReusableTokenStream,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいうえおabんcかきくけ こ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "ab"' "ん"' "c"' "かき"' "きく"' "くけ"' "こ" }' new int[] { 0' 1' 2' 3' 5' 7' 8' 9' 10' 11' 14 }' new int[] { 2' 3' 4' 5' 7' 8' 9' 11' 12' 13' 15 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<SINGLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestReusableTokenStream,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいうえおabんcかきくけ こ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "ab"' "ん"' "c"' "かき"' "きく"' "くけ"' "こ" }' new int[] { 0' 1' 2' 3' 5' 7' 8' 9' 10' 11' 14 }' new int[] { 2' 3' 4' 5' 7' 8' 9' 11' 12' 13' 15 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<SINGLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestReusableTokenStream,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいうえおabんcかきくけ こ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "ab"' "ん"' "c"' "かき"' "きく"' "くけ"' "こ" }' new int[] { 0' 1' 2' 3' 5' 7' 8' 9' 10' 11' 14 }' new int[] { 2' 3' 4' 5' 7' 8' 9' 11' 12' 13' 15 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<SINGLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestReusableTokenStream,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいうえおabんcかきくけ こ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "ab"' "ん"' "c"' "かき"' "きく"' "くけ"' "こ" }' new int[] { 0' 1' 2' 3' 5' 7' 8' 9' 10' 11' 14 }' new int[] { 2' 3' 4' 5' 7' 8' 9' 11' 12' 13' 15 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<SINGLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestReusableTokenStream,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいうえおabんcかきくけ こ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "ab"' "ん"' "c"' "かき"' "きく"' "くけ"' "こ" }' new int[] { 0' 1' 2' 3' 5' 7' 8' 9' 10' 11' 14 }' new int[] { 2' 3' 4' 5' 7' 8' 9' 11' 12' 13' 15 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<SINGLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestReusableTokenStream,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいうえおabんcかきくけ こ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "ab"' "ん"' "c"' "かき"' "きく"' "くけ"' "こ" }' new int[] { 0' 1' 2' 3' 5' 7' 8' 9' 10' 11' 14 }' new int[] { 2' 3' 4' 5' 7' 8' 9' 11' 12' 13' 15 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<SINGLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestReusableTokenStream,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "あいうえおabんcかきくけ こ"' new string[] { "あい"' "いう"' "うえ"' "えお"' "ab"' "ん"' "c"' "かき"' "きく"' "くけ"' "こ" }' new int[] { 0' 1' 2' 3' 5' 7' 8' 9' 10' 11' 14 }' new int[] { 2' 3' 4' 5' 7' 8' 9' 11' 12' 13' 15 }' new string[] { "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<ALPHANUM>"' "<SINGLE>"' "<ALPHANUM>"' "<DOUBLE>"' "<DOUBLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestTokenStream,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "一丁丂"' new string[] { "一丁"' "丁丂" }' new int[] { 0' 1 }' new int[] { 2' 3 }' new string[] { "<DOUBLE>"' "<DOUBLE>" }' new int[] { 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestTokenStream,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "一丁丂"' new string[] { "一丁"' "丁丂" }' new int[] { 0' 1 }' new int[] { 2' 3 }' new string[] { "<DOUBLE>"' "<DOUBLE>" }' new int[] { 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestChangedOffsets,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "ab"' new string[] { "一二"' "二二"' "二三" }' new int[] { 0' 0' 1 }' new int[] { 1' 1' 2 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' new CJKAnalyzer(TEST_VERSION_CURRENT)' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestRandomHugeStrings,The following statement contains a magic number: CheckRandomData(random' new CJKAnalyzer(TEST_VERSION_CURRENT)' 100 * RANDOM_MULTIPLIER' 8192);
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKAnalyzer.cs,TestRandomHugeStrings,The following statement contains a magic number: CheckRandomData(random' new CJKAnalyzer(TEST_VERSION_CURRENT)' 100 * RANDOM_MULTIPLIER' 8192);
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestHanOnly,The following statement contains a magic number: AssertAnalyzesTo(a' "多くの学生が試験に落ちた。"' new string[] { "多"' "く"' "の"' "学生"' "が"' "試験"' "に"' "落"' "ち"' "た" }' new int[] { 0' 1' 2' 3' 5' 6' 8' 9' 10' 11 }' new int[] { 1' 2' 3' 5' 6' 8' 9' 10' 11' 12 }' new string[] { "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<DOUBLE>"' "<HIRAGANA>"' "<DOUBLE>"' "<HIRAGANA>"' "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestHanOnly,The following statement contains a magic number: AssertAnalyzesTo(a' "多くの学生が試験に落ちた。"' new string[] { "多"' "く"' "の"' "学生"' "が"' "試験"' "に"' "落"' "ち"' "た" }' new int[] { 0' 1' 2' 3' 5' 6' 8' 9' 10' 11 }' new int[] { 1' 2' 3' 5' 6' 8' 9' 10' 11' 12 }' new string[] { "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<DOUBLE>"' "<HIRAGANA>"' "<DOUBLE>"' "<HIRAGANA>"' "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestHanOnly,The following statement contains a magic number: AssertAnalyzesTo(a' "多くの学生が試験に落ちた。"' new string[] { "多"' "く"' "の"' "学生"' "が"' "試験"' "に"' "落"' "ち"' "た" }' new int[] { 0' 1' 2' 3' 5' 6' 8' 9' 10' 11 }' new int[] { 1' 2' 3' 5' 6' 8' 9' 10' 11' 12 }' new string[] { "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<DOUBLE>"' "<HIRAGANA>"' "<DOUBLE>"' "<HIRAGANA>"' "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestHanOnly,The following statement contains a magic number: AssertAnalyzesTo(a' "多くの学生が試験に落ちた。"' new string[] { "多"' "く"' "の"' "学生"' "が"' "試験"' "に"' "落"' "ち"' "た" }' new int[] { 0' 1' 2' 3' 5' 6' 8' 9' 10' 11 }' new int[] { 1' 2' 3' 5' 6' 8' 9' 10' 11' 12 }' new string[] { "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<DOUBLE>"' "<HIRAGANA>"' "<DOUBLE>"' "<HIRAGANA>"' "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestHanOnly,The following statement contains a magic number: AssertAnalyzesTo(a' "多くの学生が試験に落ちた。"' new string[] { "多"' "く"' "の"' "学生"' "が"' "試験"' "に"' "落"' "ち"' "た" }' new int[] { 0' 1' 2' 3' 5' 6' 8' 9' 10' 11 }' new int[] { 1' 2' 3' 5' 6' 8' 9' 10' 11' 12 }' new string[] { "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<DOUBLE>"' "<HIRAGANA>"' "<DOUBLE>"' "<HIRAGANA>"' "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestHanOnly,The following statement contains a magic number: AssertAnalyzesTo(a' "多くの学生が試験に落ちた。"' new string[] { "多"' "く"' "の"' "学生"' "が"' "試験"' "に"' "落"' "ち"' "た" }' new int[] { 0' 1' 2' 3' 5' 6' 8' 9' 10' 11 }' new int[] { 1' 2' 3' 5' 6' 8' 9' 10' 11' 12 }' new string[] { "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<DOUBLE>"' "<HIRAGANA>"' "<DOUBLE>"' "<HIRAGANA>"' "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestHanOnly,The following statement contains a magic number: AssertAnalyzesTo(a' "多くの学生が試験に落ちた。"' new string[] { "多"' "く"' "の"' "学生"' "が"' "試験"' "に"' "落"' "ち"' "た" }' new int[] { 0' 1' 2' 3' 5' 6' 8' 9' 10' 11 }' new int[] { 1' 2' 3' 5' 6' 8' 9' 10' 11' 12 }' new string[] { "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<DOUBLE>"' "<HIRAGANA>"' "<DOUBLE>"' "<HIRAGANA>"' "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestHanOnly,The following statement contains a magic number: AssertAnalyzesTo(a' "多くの学生が試験に落ちた。"' new string[] { "多"' "く"' "の"' "学生"' "が"' "試験"' "に"' "落"' "ち"' "た" }' new int[] { 0' 1' 2' 3' 5' 6' 8' 9' 10' 11 }' new int[] { 1' 2' 3' 5' 6' 8' 9' 10' 11' 12 }' new string[] { "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<DOUBLE>"' "<HIRAGANA>"' "<DOUBLE>"' "<HIRAGANA>"' "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestHanOnly,The following statement contains a magic number: AssertAnalyzesTo(a' "多くの学生が試験に落ちた。"' new string[] { "多"' "く"' "の"' "学生"' "が"' "試験"' "に"' "落"' "ち"' "た" }' new int[] { 0' 1' 2' 3' 5' 6' 8' 9' 10' 11 }' new int[] { 1' 2' 3' 5' 6' 8' 9' 10' 11' 12 }' new string[] { "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<DOUBLE>"' "<HIRAGANA>"' "<DOUBLE>"' "<HIRAGANA>"' "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestHanOnly,The following statement contains a magic number: AssertAnalyzesTo(a' "多くの学生が試験に落ちた。"' new string[] { "多"' "く"' "の"' "学生"' "が"' "試験"' "に"' "落"' "ち"' "た" }' new int[] { 0' 1' 2' 3' 5' 6' 8' 9' 10' 11 }' new int[] { 1' 2' 3' 5' 6' 8' 9' 10' 11' 12 }' new string[] { "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<DOUBLE>"' "<HIRAGANA>"' "<DOUBLE>"' "<HIRAGANA>"' "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestHanOnly,The following statement contains a magic number: AssertAnalyzesTo(a' "多くの学生が試験に落ちた。"' new string[] { "多"' "く"' "の"' "学生"' "が"' "試験"' "に"' "落"' "ち"' "た" }' new int[] { 0' 1' 2' 3' 5' 6' 8' 9' 10' 11 }' new int[] { 1' 2' 3' 5' 6' 8' 9' 10' 11' 12 }' new string[] { "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<DOUBLE>"' "<HIRAGANA>"' "<DOUBLE>"' "<HIRAGANA>"' "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestHanOnly,The following statement contains a magic number: AssertAnalyzesTo(a' "多くの学生が試験に落ちた。"' new string[] { "多"' "く"' "の"' "学生"' "が"' "試験"' "に"' "落"' "ち"' "た" }' new int[] { 0' 1' 2' 3' 5' 6' 8' 9' 10' 11 }' new int[] { 1' 2' 3' 5' 6' 8' 9' 10' 11' 12 }' new string[] { "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<DOUBLE>"' "<HIRAGANA>"' "<DOUBLE>"' "<HIRAGANA>"' "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestHanOnly,The following statement contains a magic number: AssertAnalyzesTo(a' "多くの学生が試験に落ちた。"' new string[] { "多"' "く"' "の"' "学生"' "が"' "試験"' "に"' "落"' "ち"' "た" }' new int[] { 0' 1' 2' 3' 5' 6' 8' 9' 10' 11 }' new int[] { 1' 2' 3' 5' 6' 8' 9' 10' 11' 12 }' new string[] { "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<DOUBLE>"' "<HIRAGANA>"' "<DOUBLE>"' "<HIRAGANA>"' "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestHanOnly,The following statement contains a magic number: AssertAnalyzesTo(a' "多くの学生が試験に落ちた。"' new string[] { "多"' "く"' "の"' "学生"' "が"' "試験"' "に"' "落"' "ち"' "た" }' new int[] { 0' 1' 2' 3' 5' 6' 8' 9' 10' 11 }' new int[] { 1' 2' 3' 5' 6' 8' 9' 10' 11' 12 }' new string[] { "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<DOUBLE>"' "<HIRAGANA>"' "<DOUBLE>"' "<HIRAGANA>"' "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestHanOnly,The following statement contains a magic number: AssertAnalyzesTo(a' "多くの学生が試験に落ちた。"' new string[] { "多"' "く"' "の"' "学生"' "が"' "試験"' "に"' "落"' "ち"' "た" }' new int[] { 0' 1' 2' 3' 5' 6' 8' 9' 10' 11 }' new int[] { 1' 2' 3' 5' 6' 8' 9' 10' 11' 12 }' new string[] { "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<DOUBLE>"' "<HIRAGANA>"' "<DOUBLE>"' "<HIRAGANA>"' "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestHanOnly,The following statement contains a magic number: AssertAnalyzesTo(a' "多くの学生が試験に落ちた。"' new string[] { "多"' "く"' "の"' "学生"' "が"' "試験"' "に"' "落"' "ち"' "た" }' new int[] { 0' 1' 2' 3' 5' 6' 8' 9' 10' 11 }' new int[] { 1' 2' 3' 5' 6' 8' 9' 10' 11' 12 }' new string[] { "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<DOUBLE>"' "<HIRAGANA>"' "<DOUBLE>"' "<HIRAGANA>"' "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestHanOnly,The following statement contains a magic number: AssertAnalyzesTo(a' "多くの学生が試験に落ちた。"' new string[] { "多"' "く"' "の"' "学生"' "が"' "試験"' "に"' "落"' "ち"' "た" }' new int[] { 0' 1' 2' 3' 5' 6' 8' 9' 10' 11 }' new int[] { 1' 2' 3' 5' 6' 8' 9' 10' 11' 12 }' new string[] { "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<DOUBLE>"' "<HIRAGANA>"' "<DOUBLE>"' "<HIRAGANA>"' "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsAllScripts,The following statement contains a magic number: AssertAnalyzesTo(unibiAnalyzer' "多くの学生が試験に落ちた。"' new string[] { "多"' "多く"' "く"' "くの"' "の"' "の学"' "学"' "学生"' "生"' "生が"' "が"' "が試"' "試"' "試験"' "験"' "験に"' "に"' "に落"' "落"' "落ち"' "ち"' "ちた"' "た" }' new int[] { 0' 0' 1' 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11 }' new int[] { 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11' 11' 12' 12 }' new string[] { "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1 }' new int[] { 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsAllScripts,The following statement contains a magic number: AssertAnalyzesTo(unibiAnalyzer' "多くの学生が試験に落ちた。"' new string[] { "多"' "多く"' "く"' "くの"' "の"' "の学"' "学"' "学生"' "生"' "生が"' "が"' "が試"' "試"' "試験"' "験"' "験に"' "に"' "に落"' "落"' "落ち"' "ち"' "ちた"' "た" }' new int[] { 0' 0' 1' 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11 }' new int[] { 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11' 11' 12' 12 }' new string[] { "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1 }' new int[] { 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsAllScripts,The following statement contains a magic number: AssertAnalyzesTo(unibiAnalyzer' "多くの学生が試験に落ちた。"' new string[] { "多"' "多く"' "く"' "くの"' "の"' "の学"' "学"' "学生"' "生"' "生が"' "が"' "が試"' "試"' "試験"' "験"' "験に"' "に"' "に落"' "落"' "落ち"' "ち"' "ちた"' "た" }' new int[] { 0' 0' 1' 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11 }' new int[] { 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11' 11' 12' 12 }' new string[] { "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1 }' new int[] { 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsAllScripts,The following statement contains a magic number: AssertAnalyzesTo(unibiAnalyzer' "多くの学生が試験に落ちた。"' new string[] { "多"' "多く"' "く"' "くの"' "の"' "の学"' "学"' "学生"' "生"' "生が"' "が"' "が試"' "試"' "試験"' "験"' "験に"' "に"' "に落"' "落"' "落ち"' "ち"' "ちた"' "た" }' new int[] { 0' 0' 1' 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11 }' new int[] { 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11' 11' 12' 12 }' new string[] { "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1 }' new int[] { 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsAllScripts,The following statement contains a magic number: AssertAnalyzesTo(unibiAnalyzer' "多くの学生が試験に落ちた。"' new string[] { "多"' "多く"' "く"' "くの"' "の"' "の学"' "学"' "学生"' "生"' "生が"' "が"' "が試"' "試"' "試験"' "験"' "験に"' "に"' "に落"' "落"' "落ち"' "ち"' "ちた"' "た" }' new int[] { 0' 0' 1' 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11 }' new int[] { 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11' 11' 12' 12 }' new string[] { "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1 }' new int[] { 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsAllScripts,The following statement contains a magic number: AssertAnalyzesTo(unibiAnalyzer' "多くの学生が試験に落ちた。"' new string[] { "多"' "多く"' "く"' "くの"' "の"' "の学"' "学"' "学生"' "生"' "生が"' "が"' "が試"' "試"' "試験"' "験"' "験に"' "に"' "に落"' "落"' "落ち"' "ち"' "ちた"' "た" }' new int[] { 0' 0' 1' 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11 }' new int[] { 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11' 11' 12' 12 }' new string[] { "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1 }' new int[] { 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsAllScripts,The following statement contains a magic number: AssertAnalyzesTo(unibiAnalyzer' "多くの学生が試験に落ちた。"' new string[] { "多"' "多く"' "く"' "くの"' "の"' "の学"' "学"' "学生"' "生"' "生が"' "が"' "が試"' "試"' "試験"' "験"' "験に"' "に"' "に落"' "落"' "落ち"' "ち"' "ちた"' "た" }' new int[] { 0' 0' 1' 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11 }' new int[] { 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11' 11' 12' 12 }' new string[] { "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1 }' new int[] { 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsAllScripts,The following statement contains a magic number: AssertAnalyzesTo(unibiAnalyzer' "多くの学生が試験に落ちた。"' new string[] { "多"' "多く"' "く"' "くの"' "の"' "の学"' "学"' "学生"' "生"' "生が"' "が"' "が試"' "試"' "試験"' "験"' "験に"' "に"' "に落"' "落"' "落ち"' "ち"' "ちた"' "た" }' new int[] { 0' 0' 1' 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11 }' new int[] { 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11' 11' 12' 12 }' new string[] { "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1 }' new int[] { 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsAllScripts,The following statement contains a magic number: AssertAnalyzesTo(unibiAnalyzer' "多くの学生が試験に落ちた。"' new string[] { "多"' "多く"' "く"' "くの"' "の"' "の学"' "学"' "学生"' "生"' "生が"' "が"' "が試"' "試"' "試験"' "験"' "験に"' "に"' "に落"' "落"' "落ち"' "ち"' "ちた"' "た" }' new int[] { 0' 0' 1' 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11 }' new int[] { 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11' 11' 12' 12 }' new string[] { "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1 }' new int[] { 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsAllScripts,The following statement contains a magic number: AssertAnalyzesTo(unibiAnalyzer' "多くの学生が試験に落ちた。"' new string[] { "多"' "多く"' "く"' "くの"' "の"' "の学"' "学"' "学生"' "生"' "生が"' "が"' "が試"' "試"' "試験"' "験"' "験に"' "に"' "に落"' "落"' "落ち"' "ち"' "ちた"' "た" }' new int[] { 0' 0' 1' 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11 }' new int[] { 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11' 11' 12' 12 }' new string[] { "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1 }' new int[] { 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsAllScripts,The following statement contains a magic number: AssertAnalyzesTo(unibiAnalyzer' "多くの学生が試験に落ちた。"' new string[] { "多"' "多く"' "く"' "くの"' "の"' "の学"' "学"' "学生"' "生"' "生が"' "が"' "が試"' "試"' "試験"' "験"' "験に"' "に"' "に落"' "落"' "落ち"' "ち"' "ちた"' "た" }' new int[] { 0' 0' 1' 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11 }' new int[] { 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11' 11' 12' 12 }' new string[] { "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1 }' new int[] { 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsAllScripts,The following statement contains a magic number: AssertAnalyzesTo(unibiAnalyzer' "多くの学生が試験に落ちた。"' new string[] { "多"' "多く"' "く"' "くの"' "の"' "の学"' "学"' "学生"' "生"' "生が"' "が"' "が試"' "試"' "試験"' "験"' "験に"' "に"' "に落"' "落"' "落ち"' "ち"' "ちた"' "た" }' new int[] { 0' 0' 1' 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11 }' new int[] { 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11' 11' 12' 12 }' new string[] { "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1 }' new int[] { 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsAllScripts,The following statement contains a magic number: AssertAnalyzesTo(unibiAnalyzer' "多くの学生が試験に落ちた。"' new string[] { "多"' "多く"' "く"' "くの"' "の"' "の学"' "学"' "学生"' "生"' "生が"' "が"' "が試"' "試"' "試験"' "験"' "験に"' "に"' "に落"' "落"' "落ち"' "ち"' "ちた"' "た" }' new int[] { 0' 0' 1' 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11 }' new int[] { 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11' 11' 12' 12 }' new string[] { "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1 }' new int[] { 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsAllScripts,The following statement contains a magic number: AssertAnalyzesTo(unibiAnalyzer' "多くの学生が試験に落ちた。"' new string[] { "多"' "多く"' "く"' "くの"' "の"' "の学"' "学"' "学生"' "生"' "生が"' "が"' "が試"' "試"' "試験"' "験"' "験に"' "に"' "に落"' "落"' "落ち"' "ち"' "ちた"' "た" }' new int[] { 0' 0' 1' 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11 }' new int[] { 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11' 11' 12' 12 }' new string[] { "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1 }' new int[] { 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsAllScripts,The following statement contains a magic number: AssertAnalyzesTo(unibiAnalyzer' "多くの学生が試験に落ちた。"' new string[] { "多"' "多く"' "く"' "くの"' "の"' "の学"' "学"' "学生"' "生"' "生が"' "が"' "が試"' "試"' "試験"' "験"' "験に"' "に"' "に落"' "落"' "落ち"' "ち"' "ちた"' "た" }' new int[] { 0' 0' 1' 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11 }' new int[] { 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11' 11' 12' 12 }' new string[] { "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1 }' new int[] { 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsAllScripts,The following statement contains a magic number: AssertAnalyzesTo(unibiAnalyzer' "多くの学生が試験に落ちた。"' new string[] { "多"' "多く"' "く"' "くの"' "の"' "の学"' "学"' "学生"' "生"' "生が"' "が"' "が試"' "試"' "試験"' "験"' "験に"' "に"' "に落"' "落"' "落ち"' "ち"' "ちた"' "た" }' new int[] { 0' 0' 1' 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11 }' new int[] { 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11' 11' 12' 12 }' new string[] { "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1 }' new int[] { 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsAllScripts,The following statement contains a magic number: AssertAnalyzesTo(unibiAnalyzer' "多くの学生が試験に落ちた。"' new string[] { "多"' "多く"' "く"' "くの"' "の"' "の学"' "学"' "学生"' "生"' "生が"' "が"' "が試"' "試"' "試験"' "験"' "験に"' "に"' "に落"' "落"' "落ち"' "ち"' "ちた"' "た" }' new int[] { 0' 0' 1' 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11 }' new int[] { 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11' 11' 12' 12 }' new string[] { "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1 }' new int[] { 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsAllScripts,The following statement contains a magic number: AssertAnalyzesTo(unibiAnalyzer' "多くの学生が試験に落ちた。"' new string[] { "多"' "多く"' "く"' "くの"' "の"' "の学"' "学"' "学生"' "生"' "生が"' "が"' "が試"' "試"' "試験"' "験"' "験に"' "に"' "に落"' "落"' "落ち"' "ち"' "ちた"' "た" }' new int[] { 0' 0' 1' 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11 }' new int[] { 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11' 11' 12' 12 }' new string[] { "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1 }' new int[] { 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsAllScripts,The following statement contains a magic number: AssertAnalyzesTo(unibiAnalyzer' "多くの学生が試験に落ちた。"' new string[] { "多"' "多く"' "く"' "くの"' "の"' "の学"' "学"' "学生"' "生"' "生が"' "が"' "が試"' "試"' "試験"' "験"' "験に"' "に"' "に落"' "落"' "落ち"' "ち"' "ちた"' "た" }' new int[] { 0' 0' 1' 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11 }' new int[] { 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11' 11' 12' 12 }' new string[] { "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1 }' new int[] { 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsAllScripts,The following statement contains a magic number: AssertAnalyzesTo(unibiAnalyzer' "多くの学生が試験に落ちた。"' new string[] { "多"' "多く"' "く"' "くの"' "の"' "の学"' "学"' "学生"' "生"' "生が"' "が"' "が試"' "試"' "試験"' "験"' "験に"' "に"' "に落"' "落"' "落ち"' "ち"' "ちた"' "た" }' new int[] { 0' 0' 1' 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11 }' new int[] { 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11' 11' 12' 12 }' new string[] { "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1 }' new int[] { 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsAllScripts,The following statement contains a magic number: AssertAnalyzesTo(unibiAnalyzer' "多くの学生が試験に落ちた。"' new string[] { "多"' "多く"' "く"' "くの"' "の"' "の学"' "学"' "学生"' "生"' "生が"' "が"' "が試"' "試"' "試験"' "験"' "験に"' "に"' "に落"' "落"' "落ち"' "ち"' "ちた"' "た" }' new int[] { 0' 0' 1' 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11 }' new int[] { 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11' 11' 12' 12 }' new string[] { "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1 }' new int[] { 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsAllScripts,The following statement contains a magic number: AssertAnalyzesTo(unibiAnalyzer' "多くの学生が試験に落ちた。"' new string[] { "多"' "多く"' "く"' "くの"' "の"' "の学"' "学"' "学生"' "生"' "生が"' "が"' "が試"' "試"' "試験"' "験"' "験に"' "に"' "に落"' "落"' "落ち"' "ち"' "ちた"' "た" }' new int[] { 0' 0' 1' 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11 }' new int[] { 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11' 11' 12' 12 }' new string[] { "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1 }' new int[] { 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsAllScripts,The following statement contains a magic number: AssertAnalyzesTo(unibiAnalyzer' "多くの学生が試験に落ちた。"' new string[] { "多"' "多く"' "く"' "くの"' "の"' "の学"' "学"' "学生"' "生"' "生が"' "が"' "が試"' "試"' "試験"' "験"' "験に"' "に"' "に落"' "落"' "落ち"' "ち"' "ちた"' "た" }' new int[] { 0' 0' 1' 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11 }' new int[] { 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11' 11' 12' 12 }' new string[] { "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1 }' new int[] { 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsAllScripts,The following statement contains a magic number: AssertAnalyzesTo(unibiAnalyzer' "多くの学生が試験に落ちた。"' new string[] { "多"' "多く"' "く"' "くの"' "の"' "の学"' "学"' "学生"' "生"' "生が"' "が"' "が試"' "試"' "試験"' "験"' "験に"' "に"' "に落"' "落"' "落ち"' "ち"' "ちた"' "た" }' new int[] { 0' 0' 1' 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11 }' new int[] { 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11' 11' 12' 12 }' new string[] { "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1 }' new int[] { 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsAllScripts,The following statement contains a magic number: AssertAnalyzesTo(unibiAnalyzer' "多くの学生が試験に落ちた。"' new string[] { "多"' "多く"' "く"' "くの"' "の"' "の学"' "学"' "学生"' "生"' "生が"' "が"' "が試"' "試"' "試験"' "験"' "験に"' "に"' "に落"' "落"' "落ち"' "ち"' "ちた"' "た" }' new int[] { 0' 0' 1' 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11 }' new int[] { 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11' 11' 12' 12 }' new string[] { "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1 }' new int[] { 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsAllScripts,The following statement contains a magic number: AssertAnalyzesTo(unibiAnalyzer' "多くの学生が試験に落ちた。"' new string[] { "多"' "多く"' "く"' "くの"' "の"' "の学"' "学"' "学生"' "生"' "生が"' "が"' "が試"' "試"' "試験"' "験"' "験に"' "に"' "に落"' "落"' "落ち"' "ち"' "ちた"' "た" }' new int[] { 0' 0' 1' 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11 }' new int[] { 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11' 11' 12' 12 }' new string[] { "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1 }' new int[] { 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsAllScripts,The following statement contains a magic number: AssertAnalyzesTo(unibiAnalyzer' "多くの学生が試験に落ちた。"' new string[] { "多"' "多く"' "く"' "くの"' "の"' "の学"' "学"' "学生"' "生"' "生が"' "が"' "が試"' "試"' "試験"' "験"' "験に"' "に"' "に落"' "落"' "落ち"' "ち"' "ちた"' "た" }' new int[] { 0' 0' 1' 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11 }' new int[] { 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11' 11' 12' 12 }' new string[] { "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1 }' new int[] { 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsAllScripts,The following statement contains a magic number: AssertAnalyzesTo(unibiAnalyzer' "多くの学生が試験に落ちた。"' new string[] { "多"' "多く"' "く"' "くの"' "の"' "の学"' "学"' "学生"' "生"' "生が"' "が"' "が試"' "試"' "試験"' "験"' "験に"' "に"' "に落"' "落"' "落ち"' "ち"' "ちた"' "た" }' new int[] { 0' 0' 1' 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11 }' new int[] { 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11' 11' 12' 12 }' new string[] { "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1 }' new int[] { 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsAllScripts,The following statement contains a magic number: AssertAnalyzesTo(unibiAnalyzer' "多くの学生が試験に落ちた。"' new string[] { "多"' "多く"' "く"' "くの"' "の"' "の学"' "学"' "学生"' "生"' "生が"' "が"' "が試"' "試"' "試験"' "験"' "験に"' "に"' "に落"' "落"' "落ち"' "ち"' "ちた"' "た" }' new int[] { 0' 0' 1' 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11 }' new int[] { 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11' 11' 12' 12 }' new string[] { "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1 }' new int[] { 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsAllScripts,The following statement contains a magic number: AssertAnalyzesTo(unibiAnalyzer' "多くの学生が試験に落ちた。"' new string[] { "多"' "多く"' "く"' "くの"' "の"' "の学"' "学"' "学生"' "生"' "生が"' "が"' "が試"' "試"' "試験"' "験"' "験に"' "に"' "に落"' "落"' "落ち"' "ち"' "ちた"' "た" }' new int[] { 0' 0' 1' 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11 }' new int[] { 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11' 11' 12' 12 }' new string[] { "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1 }' new int[] { 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsAllScripts,The following statement contains a magic number: AssertAnalyzesTo(unibiAnalyzer' "多くの学生が試験に落ちた。"' new string[] { "多"' "多く"' "く"' "くの"' "の"' "の学"' "学"' "学生"' "生"' "生が"' "が"' "が試"' "試"' "試験"' "験"' "験に"' "に"' "に落"' "落"' "落ち"' "ち"' "ちた"' "た" }' new int[] { 0' 0' 1' 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11 }' new int[] { 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11' 11' 12' 12 }' new string[] { "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1 }' new int[] { 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsAllScripts,The following statement contains a magic number: AssertAnalyzesTo(unibiAnalyzer' "多くの学生が試験に落ちた。"' new string[] { "多"' "多く"' "く"' "くの"' "の"' "の学"' "学"' "学生"' "生"' "生が"' "が"' "が試"' "試"' "試験"' "験"' "験に"' "に"' "に落"' "落"' "落ち"' "ち"' "ちた"' "た" }' new int[] { 0' 0' 1' 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11 }' new int[] { 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11' 11' 12' 12 }' new string[] { "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1 }' new int[] { 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsAllScripts,The following statement contains a magic number: AssertAnalyzesTo(unibiAnalyzer' "多くの学生が試験に落ちた。"' new string[] { "多"' "多く"' "く"' "くの"' "の"' "の学"' "学"' "学生"' "生"' "生が"' "が"' "が試"' "試"' "試験"' "験"' "験に"' "に"' "に落"' "落"' "落ち"' "ち"' "ちた"' "た" }' new int[] { 0' 0' 1' 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11 }' new int[] { 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11' 11' 12' 12 }' new string[] { "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1 }' new int[] { 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsAllScripts,The following statement contains a magic number: AssertAnalyzesTo(unibiAnalyzer' "多くの学生が試験に落ちた。"' new string[] { "多"' "多く"' "く"' "くの"' "の"' "の学"' "学"' "学生"' "生"' "生が"' "が"' "が試"' "試"' "試験"' "験"' "験に"' "に"' "に落"' "落"' "落ち"' "ち"' "ちた"' "た" }' new int[] { 0' 0' 1' 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11 }' new int[] { 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11' 11' 12' 12 }' new string[] { "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1 }' new int[] { 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsAllScripts,The following statement contains a magic number: AssertAnalyzesTo(unibiAnalyzer' "多くの学生が試験に落ちた。"' new string[] { "多"' "多く"' "く"' "くの"' "の"' "の学"' "学"' "学生"' "生"' "生が"' "が"' "が試"' "試"' "試験"' "験"' "験に"' "に"' "に落"' "落"' "落ち"' "ち"' "ちた"' "た" }' new int[] { 0' 0' 1' 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11 }' new int[] { 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11' 11' 12' 12 }' new string[] { "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1 }' new int[] { 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsAllScripts,The following statement contains a magic number: AssertAnalyzesTo(unibiAnalyzer' "多くの学生が試験に落ちた。"' new string[] { "多"' "多く"' "く"' "くの"' "の"' "の学"' "学"' "学生"' "生"' "生が"' "が"' "が試"' "試"' "試験"' "験"' "験に"' "に"' "に落"' "落"' "落ち"' "ち"' "ちた"' "た" }' new int[] { 0' 0' 1' 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11 }' new int[] { 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11' 11' 12' 12 }' new string[] { "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1 }' new int[] { 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsAllScripts,The following statement contains a magic number: AssertAnalyzesTo(unibiAnalyzer' "多くの学生が試験に落ちた。"' new string[] { "多"' "多く"' "く"' "くの"' "の"' "の学"' "学"' "学生"' "生"' "生が"' "が"' "が試"' "試"' "試験"' "験"' "験に"' "に"' "に落"' "落"' "落ち"' "ち"' "ちた"' "た" }' new int[] { 0' 0' 1' 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11 }' new int[] { 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11' 11' 12' 12 }' new string[] { "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1 }' new int[] { 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsAllScripts,The following statement contains a magic number: AssertAnalyzesTo(unibiAnalyzer' "多くの学生が試験に落ちた。"' new string[] { "多"' "多く"' "く"' "くの"' "の"' "の学"' "学"' "学生"' "生"' "生が"' "が"' "が試"' "試"' "試験"' "験"' "験に"' "に"' "に落"' "落"' "落ち"' "ち"' "ちた"' "た" }' new int[] { 0' 0' 1' 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11 }' new int[] { 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11' 11' 12' 12 }' new string[] { "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1 }' new int[] { 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsAllScripts,The following statement contains a magic number: AssertAnalyzesTo(unibiAnalyzer' "多くの学生が試験に落ちた。"' new string[] { "多"' "多く"' "く"' "くの"' "の"' "の学"' "学"' "学生"' "生"' "生が"' "が"' "が試"' "試"' "試験"' "験"' "験に"' "に"' "に落"' "落"' "落ち"' "ち"' "ちた"' "た" }' new int[] { 0' 0' 1' 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11 }' new int[] { 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11' 11' 12' 12 }' new string[] { "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1 }' new int[] { 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsAllScripts,The following statement contains a magic number: AssertAnalyzesTo(unibiAnalyzer' "多くの学生が試験に落ちた。"' new string[] { "多"' "多く"' "く"' "くの"' "の"' "の学"' "学"' "学生"' "生"' "生が"' "が"' "が試"' "試"' "試験"' "験"' "験に"' "に"' "に落"' "落"' "落ち"' "ち"' "ちた"' "た" }' new int[] { 0' 0' 1' 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11 }' new int[] { 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11' 11' 12' 12 }' new string[] { "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1 }' new int[] { 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsAllScripts,The following statement contains a magic number: AssertAnalyzesTo(unibiAnalyzer' "多くの学生が試験に落ちた。"' new string[] { "多"' "多く"' "く"' "くの"' "の"' "の学"' "学"' "学生"' "生"' "生が"' "が"' "が試"' "試"' "試験"' "験"' "験に"' "に"' "に落"' "落"' "落ち"' "ち"' "ちた"' "た" }' new int[] { 0' 0' 1' 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11 }' new int[] { 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11' 11' 12' 12 }' new string[] { "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1 }' new int[] { 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsAllScripts,The following statement contains a magic number: AssertAnalyzesTo(unibiAnalyzer' "多くの学生が試験に落ちた。"' new string[] { "多"' "多く"' "く"' "くの"' "の"' "の学"' "学"' "学生"' "生"' "生が"' "が"' "が試"' "試"' "試験"' "験"' "験に"' "に"' "に落"' "落"' "落ち"' "ち"' "ちた"' "た" }' new int[] { 0' 0' 1' 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11 }' new int[] { 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11' 11' 12' 12 }' new string[] { "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1 }' new int[] { 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsAllScripts,The following statement contains a magic number: AssertAnalyzesTo(unibiAnalyzer' "多くの学生が試験に落ちた。"' new string[] { "多"' "多く"' "く"' "くの"' "の"' "の学"' "学"' "学生"' "生"' "生が"' "が"' "が試"' "試"' "試験"' "験"' "験に"' "に"' "に落"' "落"' "落ち"' "ち"' "ちた"' "た" }' new int[] { 0' 0' 1' 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11 }' new int[] { 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11' 11' 12' 12 }' new string[] { "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1 }' new int[] { 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsAllScripts,The following statement contains a magic number: AssertAnalyzesTo(unibiAnalyzer' "多くの学生が試験に落ちた。"' new string[] { "多"' "多く"' "く"' "くの"' "の"' "の学"' "学"' "学生"' "生"' "生が"' "が"' "が試"' "試"' "試験"' "験"' "験に"' "に"' "に落"' "落"' "落ち"' "ち"' "ちた"' "た" }' new int[] { 0' 0' 1' 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11 }' new int[] { 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11' 11' 12' 12 }' new string[] { "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1 }' new int[] { 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsAllScripts,The following statement contains a magic number: AssertAnalyzesTo(unibiAnalyzer' "多くの学生が試験に落ちた。"' new string[] { "多"' "多く"' "く"' "くの"' "の"' "の学"' "学"' "学生"' "生"' "生が"' "が"' "が試"' "試"' "試験"' "験"' "験に"' "に"' "に落"' "落"' "落ち"' "ち"' "ちた"' "た" }' new int[] { 0' 0' 1' 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11 }' new int[] { 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11' 11' 12' 12 }' new string[] { "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1 }' new int[] { 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsAllScripts,The following statement contains a magic number: AssertAnalyzesTo(unibiAnalyzer' "多くの学生が試験に落ちた。"' new string[] { "多"' "多く"' "く"' "くの"' "の"' "の学"' "学"' "学生"' "生"' "生が"' "が"' "が試"' "試"' "試験"' "験"' "験に"' "に"' "に落"' "落"' "落ち"' "ち"' "ちた"' "た" }' new int[] { 0' 0' 1' 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11 }' new int[] { 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11' 11' 12' 12 }' new string[] { "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1 }' new int[] { 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsAllScripts,The following statement contains a magic number: AssertAnalyzesTo(unibiAnalyzer' "多くの学生が試験に落ちた。"' new string[] { "多"' "多く"' "く"' "くの"' "の"' "の学"' "学"' "学生"' "生"' "生が"' "が"' "が試"' "試"' "試験"' "験"' "験に"' "に"' "に落"' "落"' "落ち"' "ち"' "ちた"' "た" }' new int[] { 0' 0' 1' 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11 }' new int[] { 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11' 11' 12' 12 }' new string[] { "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1 }' new int[] { 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsAllScripts,The following statement contains a magic number: AssertAnalyzesTo(unibiAnalyzer' "多くの学生が試験に落ちた。"' new string[] { "多"' "多く"' "く"' "くの"' "の"' "の学"' "学"' "学生"' "生"' "生が"' "が"' "が試"' "試"' "試験"' "験"' "験に"' "に"' "に落"' "落"' "落ち"' "ち"' "ちた"' "た" }' new int[] { 0' 0' 1' 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11 }' new int[] { 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11' 11' 12' 12 }' new string[] { "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1 }' new int[] { 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsAllScripts,The following statement contains a magic number: AssertAnalyzesTo(unibiAnalyzer' "多くの学生が試験に落ちた。"' new string[] { "多"' "多く"' "く"' "くの"' "の"' "の学"' "学"' "学生"' "生"' "生が"' "が"' "が試"' "試"' "試験"' "験"' "験に"' "に"' "に落"' "落"' "落ち"' "ち"' "ちた"' "た" }' new int[] { 0' 0' 1' 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11 }' new int[] { 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11' 11' 12' 12 }' new string[] { "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1 }' new int[] { 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsAllScripts,The following statement contains a magic number: AssertAnalyzesTo(unibiAnalyzer' "多くの学生が試験に落ちた。"' new string[] { "多"' "多く"' "く"' "くの"' "の"' "の学"' "学"' "学生"' "生"' "生が"' "が"' "が試"' "試"' "試験"' "験"' "験に"' "に"' "に落"' "落"' "落ち"' "ち"' "ちた"' "た" }' new int[] { 0' 0' 1' 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11 }' new int[] { 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11' 11' 12' 12 }' new string[] { "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1 }' new int[] { 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsAllScripts,The following statement contains a magic number: AssertAnalyzesTo(unibiAnalyzer' "多くの学生が試験に落ちた。"' new string[] { "多"' "多く"' "く"' "くの"' "の"' "の学"' "学"' "学生"' "生"' "生が"' "が"' "が試"' "試"' "試験"' "験"' "験に"' "に"' "に落"' "落"' "落ち"' "ち"' "ちた"' "た" }' new int[] { 0' 0' 1' 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11 }' new int[] { 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11' 11' 12' 12 }' new string[] { "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1 }' new int[] { 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsAllScripts,The following statement contains a magic number: AssertAnalyzesTo(unibiAnalyzer' "多くの学生が試験に落ちた。"' new string[] { "多"' "多く"' "く"' "くの"' "の"' "の学"' "学"' "学生"' "生"' "生が"' "が"' "が試"' "試"' "試験"' "験"' "験に"' "に"' "に落"' "落"' "落ち"' "ち"' "ちた"' "た" }' new int[] { 0' 0' 1' 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11 }' new int[] { 1' 2' 2' 3' 3' 4' 4' 5' 5' 6' 6' 7' 7' 8' 8' 9' 9' 10' 10' 11' 11' 12' 12 }' new string[] { "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>" }' new int[] { 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1' 0' 1 }' new int[] { 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1' 2' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsHanOnly,The following statement contains a magic number: AssertAnalyzesTo(a' "多くの学生が試験に落ちた。"' new string[] { "多"' "く"' "の"' "学"' "学生"' "生"' "が"' "試"' "試験"' "験"' "に"' "落"' "ち"' "た" }' new int[] { 0' 1' 2' 3' 3' 4' 5' 6' 6' 7' 8' 9' 10' 11 }' new int[] { 1' 2' 3' 4' 5' 5' 6' 7' 8' 8' 9' 10' 11' 12 }' new string[] { "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<HIRAGANA>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<HIRAGANA>"' "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 1' 1' 1 }' new int[] { 1' 1' 1' 1' 2' 1' 1' 1' 2' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsHanOnly,The following statement contains a magic number: AssertAnalyzesTo(a' "多くの学生が試験に落ちた。"' new string[] { "多"' "く"' "の"' "学"' "学生"' "生"' "が"' "試"' "試験"' "験"' "に"' "落"' "ち"' "た" }' new int[] { 0' 1' 2' 3' 3' 4' 5' 6' 6' 7' 8' 9' 10' 11 }' new int[] { 1' 2' 3' 4' 5' 5' 6' 7' 8' 8' 9' 10' 11' 12 }' new string[] { "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<HIRAGANA>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<HIRAGANA>"' "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 1' 1' 1 }' new int[] { 1' 1' 1' 1' 2' 1' 1' 1' 2' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsHanOnly,The following statement contains a magic number: AssertAnalyzesTo(a' "多くの学生が試験に落ちた。"' new string[] { "多"' "く"' "の"' "学"' "学生"' "生"' "が"' "試"' "試験"' "験"' "に"' "落"' "ち"' "た" }' new int[] { 0' 1' 2' 3' 3' 4' 5' 6' 6' 7' 8' 9' 10' 11 }' new int[] { 1' 2' 3' 4' 5' 5' 6' 7' 8' 8' 9' 10' 11' 12 }' new string[] { "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<HIRAGANA>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<HIRAGANA>"' "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 1' 1' 1 }' new int[] { 1' 1' 1' 1' 2' 1' 1' 1' 2' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsHanOnly,The following statement contains a magic number: AssertAnalyzesTo(a' "多くの学生が試験に落ちた。"' new string[] { "多"' "く"' "の"' "学"' "学生"' "生"' "が"' "試"' "試験"' "験"' "に"' "落"' "ち"' "た" }' new int[] { 0' 1' 2' 3' 3' 4' 5' 6' 6' 7' 8' 9' 10' 11 }' new int[] { 1' 2' 3' 4' 5' 5' 6' 7' 8' 8' 9' 10' 11' 12 }' new string[] { "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<HIRAGANA>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<HIRAGANA>"' "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 1' 1' 1 }' new int[] { 1' 1' 1' 1' 2' 1' 1' 1' 2' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsHanOnly,The following statement contains a magic number: AssertAnalyzesTo(a' "多くの学生が試験に落ちた。"' new string[] { "多"' "く"' "の"' "学"' "学生"' "生"' "が"' "試"' "試験"' "験"' "に"' "落"' "ち"' "た" }' new int[] { 0' 1' 2' 3' 3' 4' 5' 6' 6' 7' 8' 9' 10' 11 }' new int[] { 1' 2' 3' 4' 5' 5' 6' 7' 8' 8' 9' 10' 11' 12 }' new string[] { "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<HIRAGANA>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<HIRAGANA>"' "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 1' 1' 1 }' new int[] { 1' 1' 1' 1' 2' 1' 1' 1' 2' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsHanOnly,The following statement contains a magic number: AssertAnalyzesTo(a' "多くの学生が試験に落ちた。"' new string[] { "多"' "く"' "の"' "学"' "学生"' "生"' "が"' "試"' "試験"' "験"' "に"' "落"' "ち"' "た" }' new int[] { 0' 1' 2' 3' 3' 4' 5' 6' 6' 7' 8' 9' 10' 11 }' new int[] { 1' 2' 3' 4' 5' 5' 6' 7' 8' 8' 9' 10' 11' 12 }' new string[] { "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<HIRAGANA>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<HIRAGANA>"' "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 1' 1' 1 }' new int[] { 1' 1' 1' 1' 2' 1' 1' 1' 2' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsHanOnly,The following statement contains a magic number: AssertAnalyzesTo(a' "多くの学生が試験に落ちた。"' new string[] { "多"' "く"' "の"' "学"' "学生"' "生"' "が"' "試"' "試験"' "験"' "に"' "落"' "ち"' "た" }' new int[] { 0' 1' 2' 3' 3' 4' 5' 6' 6' 7' 8' 9' 10' 11 }' new int[] { 1' 2' 3' 4' 5' 5' 6' 7' 8' 8' 9' 10' 11' 12 }' new string[] { "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<HIRAGANA>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<HIRAGANA>"' "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 1' 1' 1 }' new int[] { 1' 1' 1' 1' 2' 1' 1' 1' 2' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsHanOnly,The following statement contains a magic number: AssertAnalyzesTo(a' "多くの学生が試験に落ちた。"' new string[] { "多"' "く"' "の"' "学"' "学生"' "生"' "が"' "試"' "試験"' "験"' "に"' "落"' "ち"' "た" }' new int[] { 0' 1' 2' 3' 3' 4' 5' 6' 6' 7' 8' 9' 10' 11 }' new int[] { 1' 2' 3' 4' 5' 5' 6' 7' 8' 8' 9' 10' 11' 12 }' new string[] { "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<HIRAGANA>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<HIRAGANA>"' "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 1' 1' 1 }' new int[] { 1' 1' 1' 1' 2' 1' 1' 1' 2' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsHanOnly,The following statement contains a magic number: AssertAnalyzesTo(a' "多くの学生が試験に落ちた。"' new string[] { "多"' "く"' "の"' "学"' "学生"' "生"' "が"' "試"' "試験"' "験"' "に"' "落"' "ち"' "た" }' new int[] { 0' 1' 2' 3' 3' 4' 5' 6' 6' 7' 8' 9' 10' 11 }' new int[] { 1' 2' 3' 4' 5' 5' 6' 7' 8' 8' 9' 10' 11' 12 }' new string[] { "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<HIRAGANA>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<HIRAGANA>"' "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 1' 1' 1 }' new int[] { 1' 1' 1' 1' 2' 1' 1' 1' 2' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsHanOnly,The following statement contains a magic number: AssertAnalyzesTo(a' "多くの学生が試験に落ちた。"' new string[] { "多"' "く"' "の"' "学"' "学生"' "生"' "が"' "試"' "試験"' "験"' "に"' "落"' "ち"' "た" }' new int[] { 0' 1' 2' 3' 3' 4' 5' 6' 6' 7' 8' 9' 10' 11 }' new int[] { 1' 2' 3' 4' 5' 5' 6' 7' 8' 8' 9' 10' 11' 12 }' new string[] { "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<HIRAGANA>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<HIRAGANA>"' "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 1' 1' 1 }' new int[] { 1' 1' 1' 1' 2' 1' 1' 1' 2' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsHanOnly,The following statement contains a magic number: AssertAnalyzesTo(a' "多くの学生が試験に落ちた。"' new string[] { "多"' "く"' "の"' "学"' "学生"' "生"' "が"' "試"' "試験"' "験"' "に"' "落"' "ち"' "た" }' new int[] { 0' 1' 2' 3' 3' 4' 5' 6' 6' 7' 8' 9' 10' 11 }' new int[] { 1' 2' 3' 4' 5' 5' 6' 7' 8' 8' 9' 10' 11' 12 }' new string[] { "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<HIRAGANA>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<HIRAGANA>"' "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 1' 1' 1 }' new int[] { 1' 1' 1' 1' 2' 1' 1' 1' 2' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsHanOnly,The following statement contains a magic number: AssertAnalyzesTo(a' "多くの学生が試験に落ちた。"' new string[] { "多"' "く"' "の"' "学"' "学生"' "生"' "が"' "試"' "試験"' "験"' "に"' "落"' "ち"' "た" }' new int[] { 0' 1' 2' 3' 3' 4' 5' 6' 6' 7' 8' 9' 10' 11 }' new int[] { 1' 2' 3' 4' 5' 5' 6' 7' 8' 8' 9' 10' 11' 12 }' new string[] { "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<HIRAGANA>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<HIRAGANA>"' "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 1' 1' 1 }' new int[] { 1' 1' 1' 1' 2' 1' 1' 1' 2' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsHanOnly,The following statement contains a magic number: AssertAnalyzesTo(a' "多くの学生が試験に落ちた。"' new string[] { "多"' "く"' "の"' "学"' "学生"' "生"' "が"' "試"' "試験"' "験"' "に"' "落"' "ち"' "た" }' new int[] { 0' 1' 2' 3' 3' 4' 5' 6' 6' 7' 8' 9' 10' 11 }' new int[] { 1' 2' 3' 4' 5' 5' 6' 7' 8' 8' 9' 10' 11' 12 }' new string[] { "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<HIRAGANA>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<HIRAGANA>"' "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 1' 1' 1 }' new int[] { 1' 1' 1' 1' 2' 1' 1' 1' 2' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsHanOnly,The following statement contains a magic number: AssertAnalyzesTo(a' "多くの学生が試験に落ちた。"' new string[] { "多"' "く"' "の"' "学"' "学生"' "生"' "が"' "試"' "試験"' "験"' "に"' "落"' "ち"' "た" }' new int[] { 0' 1' 2' 3' 3' 4' 5' 6' 6' 7' 8' 9' 10' 11 }' new int[] { 1' 2' 3' 4' 5' 5' 6' 7' 8' 8' 9' 10' 11' 12 }' new string[] { "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<HIRAGANA>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<HIRAGANA>"' "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 1' 1' 1 }' new int[] { 1' 1' 1' 1' 2' 1' 1' 1' 2' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsHanOnly,The following statement contains a magic number: AssertAnalyzesTo(a' "多くの学生が試験に落ちた。"' new string[] { "多"' "く"' "の"' "学"' "学生"' "生"' "が"' "試"' "試験"' "験"' "に"' "落"' "ち"' "た" }' new int[] { 0' 1' 2' 3' 3' 4' 5' 6' 6' 7' 8' 9' 10' 11 }' new int[] { 1' 2' 3' 4' 5' 5' 6' 7' 8' 8' 9' 10' 11' 12 }' new string[] { "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<HIRAGANA>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<HIRAGANA>"' "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 1' 1' 1 }' new int[] { 1' 1' 1' 1' 2' 1' 1' 1' 2' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsHanOnly,The following statement contains a magic number: AssertAnalyzesTo(a' "多くの学生が試験に落ちた。"' new string[] { "多"' "く"' "の"' "学"' "学生"' "生"' "が"' "試"' "試験"' "験"' "に"' "落"' "ち"' "た" }' new int[] { 0' 1' 2' 3' 3' 4' 5' 6' 6' 7' 8' 9' 10' 11 }' new int[] { 1' 2' 3' 4' 5' 5' 6' 7' 8' 8' 9' 10' 11' 12 }' new string[] { "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<HIRAGANA>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<HIRAGANA>"' "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 1' 1' 1 }' new int[] { 1' 1' 1' 1' 2' 1' 1' 1' 2' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsHanOnly,The following statement contains a magic number: AssertAnalyzesTo(a' "多くの学生が試験に落ちた。"' new string[] { "多"' "く"' "の"' "学"' "学生"' "生"' "が"' "試"' "試験"' "験"' "に"' "落"' "ち"' "た" }' new int[] { 0' 1' 2' 3' 3' 4' 5' 6' 6' 7' 8' 9' 10' 11 }' new int[] { 1' 2' 3' 4' 5' 5' 6' 7' 8' 8' 9' 10' 11' 12 }' new string[] { "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<HIRAGANA>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<HIRAGANA>"' "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 1' 1' 1 }' new int[] { 1' 1' 1' 1' 2' 1' 1' 1' 2' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsHanOnly,The following statement contains a magic number: AssertAnalyzesTo(a' "多くの学生が試験に落ちた。"' new string[] { "多"' "く"' "の"' "学"' "学生"' "生"' "が"' "試"' "試験"' "験"' "に"' "落"' "ち"' "た" }' new int[] { 0' 1' 2' 3' 3' 4' 5' 6' 6' 7' 8' 9' 10' 11 }' new int[] { 1' 2' 3' 4' 5' 5' 6' 7' 8' 8' 9' 10' 11' 12 }' new string[] { "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<HIRAGANA>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<HIRAGANA>"' "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 1' 1' 1 }' new int[] { 1' 1' 1' 1' 2' 1' 1' 1' 2' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsHanOnly,The following statement contains a magic number: AssertAnalyzesTo(a' "多くの学生が試験に落ちた。"' new string[] { "多"' "く"' "の"' "学"' "学生"' "生"' "が"' "試"' "試験"' "験"' "に"' "落"' "ち"' "た" }' new int[] { 0' 1' 2' 3' 3' 4' 5' 6' 6' 7' 8' 9' 10' 11 }' new int[] { 1' 2' 3' 4' 5' 5' 6' 7' 8' 8' 9' 10' 11' 12 }' new string[] { "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<HIRAGANA>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<HIRAGANA>"' "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 1' 1' 1 }' new int[] { 1' 1' 1' 1' 2' 1' 1' 1' 2' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsHanOnly,The following statement contains a magic number: AssertAnalyzesTo(a' "多くの学生が試験に落ちた。"' new string[] { "多"' "く"' "の"' "学"' "学生"' "生"' "が"' "試"' "試験"' "験"' "に"' "落"' "ち"' "た" }' new int[] { 0' 1' 2' 3' 3' 4' 5' 6' 6' 7' 8' 9' 10' 11 }' new int[] { 1' 2' 3' 4' 5' 5' 6' 7' 8' 8' 9' 10' 11' 12 }' new string[] { "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<HIRAGANA>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<HIRAGANA>"' "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 1' 1' 1 }' new int[] { 1' 1' 1' 1' 2' 1' 1' 1' 2' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsHanOnly,The following statement contains a magic number: AssertAnalyzesTo(a' "多くの学生が試験に落ちた。"' new string[] { "多"' "く"' "の"' "学"' "学生"' "生"' "が"' "試"' "試験"' "験"' "に"' "落"' "ち"' "た" }' new int[] { 0' 1' 2' 3' 3' 4' 5' 6' 6' 7' 8' 9' 10' 11 }' new int[] { 1' 2' 3' 4' 5' 5' 6' 7' 8' 8' 9' 10' 11' 12 }' new string[] { "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<HIRAGANA>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<HIRAGANA>"' "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 1' 1' 1 }' new int[] { 1' 1' 1' 1' 2' 1' 1' 1' 2' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsHanOnly,The following statement contains a magic number: AssertAnalyzesTo(a' "多くの学生が試験に落ちた。"' new string[] { "多"' "く"' "の"' "学"' "学生"' "生"' "が"' "試"' "試験"' "験"' "に"' "落"' "ち"' "た" }' new int[] { 0' 1' 2' 3' 3' 4' 5' 6' 6' 7' 8' 9' 10' 11 }' new int[] { 1' 2' 3' 4' 5' 5' 6' 7' 8' 8' 9' 10' 11' 12 }' new string[] { "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<HIRAGANA>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<HIRAGANA>"' "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 1' 1' 1 }' new int[] { 1' 1' 1' 1' 2' 1' 1' 1' 2' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsHanOnly,The following statement contains a magic number: AssertAnalyzesTo(a' "多くの学生が試験に落ちた。"' new string[] { "多"' "く"' "の"' "学"' "学生"' "生"' "が"' "試"' "試験"' "験"' "に"' "落"' "ち"' "た" }' new int[] { 0' 1' 2' 3' 3' 4' 5' 6' 6' 7' 8' 9' 10' 11 }' new int[] { 1' 2' 3' 4' 5' 5' 6' 7' 8' 8' 9' 10' 11' 12 }' new string[] { "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<HIRAGANA>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<HIRAGANA>"' "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 1' 1' 1 }' new int[] { 1' 1' 1' 1' 2' 1' 1' 1' 2' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsHanOnly,The following statement contains a magic number: AssertAnalyzesTo(a' "多くの学生が試験に落ちた。"' new string[] { "多"' "く"' "の"' "学"' "学生"' "生"' "が"' "試"' "試験"' "験"' "に"' "落"' "ち"' "た" }' new int[] { 0' 1' 2' 3' 3' 4' 5' 6' 6' 7' 8' 9' 10' 11 }' new int[] { 1' 2' 3' 4' 5' 5' 6' 7' 8' 8' 9' 10' 11' 12 }' new string[] { "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<HIRAGANA>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<HIRAGANA>"' "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 1' 1' 1 }' new int[] { 1' 1' 1' 1' 2' 1' 1' 1' 2' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsHanOnly,The following statement contains a magic number: AssertAnalyzesTo(a' "多くの学生が試験に落ちた。"' new string[] { "多"' "く"' "の"' "学"' "学生"' "生"' "が"' "試"' "試験"' "験"' "に"' "落"' "ち"' "た" }' new int[] { 0' 1' 2' 3' 3' 4' 5' 6' 6' 7' 8' 9' 10' 11 }' new int[] { 1' 2' 3' 4' 5' 5' 6' 7' 8' 8' 9' 10' 11' 12 }' new string[] { "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<HIRAGANA>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<HIRAGANA>"' "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 1' 1' 1 }' new int[] { 1' 1' 1' 1' 2' 1' 1' 1' 2' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsHanOnly,The following statement contains a magic number: AssertAnalyzesTo(a' "多くの学生が試験に落ちた。"' new string[] { "多"' "く"' "の"' "学"' "学生"' "生"' "が"' "試"' "試験"' "験"' "に"' "落"' "ち"' "た" }' new int[] { 0' 1' 2' 3' 3' 4' 5' 6' 6' 7' 8' 9' 10' 11 }' new int[] { 1' 2' 3' 4' 5' 5' 6' 7' 8' 8' 9' 10' 11' 12 }' new string[] { "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<HIRAGANA>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<HIRAGANA>"' "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 1' 1' 1 }' new int[] { 1' 1' 1' 1' 2' 1' 1' 1' 2' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestUnigramsAndBigramsHanOnly,The following statement contains a magic number: AssertAnalyzesTo(a' "多くの学生が試験に落ちた。"' new string[] { "多"' "く"' "の"' "学"' "学生"' "生"' "が"' "試"' "試験"' "験"' "に"' "落"' "ち"' "た" }' new int[] { 0' 1' 2' 3' 3' 4' 5' 6' 6' 7' 8' 9' 10' 11 }' new int[] { 1' 2' 3' 4' 5' 5' 6' 7' 8' 8' 9' 10' 11' 12 }' new string[] { "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<HIRAGANA>"' "<SINGLE>"' "<DOUBLE>"' "<SINGLE>"' "<HIRAGANA>"' "<SINGLE>"' "<HIRAGANA>"' "<HIRAGANA>"' "<SINGLE>" }' new int[] { 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 1' 1' 1 }' new int[] { 1' 1' 1' 1' 2' 1' 1' 1' 2' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestRandomUnibiStrings,The following statement contains a magic number: CheckRandomData(Random' unibiAnalyzer' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestRandomUnibiHugeStrings,The following statement contains a magic number: CheckRandomData(random' unibiAnalyzer' 100 * RANDOM_MULTIPLIER' 8192);
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKBigramFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKBigramFilter.cs,TestRandomUnibiHugeStrings,The following statement contains a magic number: CheckRandomData(random' unibiAnalyzer' 100 * RANDOM_MULTIPLIER' 8192);
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestJa1,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u4e00\u4e8c"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e8c\u4e09"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e09\u56db"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u56db\u4e94"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e94\u516d"' 4' 6' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u516d\u4e03"' 5' 7' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e03\u516b"' 6' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u516b\u4e5d"' 7' 9' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e5d\u5341"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestJa1,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u4e00\u4e8c"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e8c\u4e09"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e09\u56db"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u56db\u4e94"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e94\u516d"' 4' 6' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u516d\u4e03"' 5' 7' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e03\u516b"' 6' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u516b\u4e5d"' 7' 9' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e5d\u5341"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestJa1,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u4e00\u4e8c"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e8c\u4e09"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e09\u56db"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u56db\u4e94"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e94\u516d"' 4' 6' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u516d\u4e03"' 5' 7' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e03\u516b"' 6' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u516b\u4e5d"' 7' 9' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e5d\u5341"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestJa1,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u4e00\u4e8c"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e8c\u4e09"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e09\u56db"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u56db\u4e94"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e94\u516d"' 4' 6' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u516d\u4e03"' 5' 7' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e03\u516b"' 6' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u516b\u4e5d"' 7' 9' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e5d\u5341"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestJa1,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u4e00\u4e8c"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e8c\u4e09"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e09\u56db"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u56db\u4e94"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e94\u516d"' 4' 6' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u516d\u4e03"' 5' 7' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e03\u516b"' 6' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u516b\u4e5d"' 7' 9' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e5d\u5341"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestJa1,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u4e00\u4e8c"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e8c\u4e09"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e09\u56db"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u56db\u4e94"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e94\u516d"' 4' 6' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u516d\u4e03"' 5' 7' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e03\u516b"' 6' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u516b\u4e5d"' 7' 9' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e5d\u5341"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestJa1,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u4e00\u4e8c"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e8c\u4e09"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e09\u56db"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u56db\u4e94"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e94\u516d"' 4' 6' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u516d\u4e03"' 5' 7' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e03\u516b"' 6' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u516b\u4e5d"' 7' 9' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e5d\u5341"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestJa1,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u4e00\u4e8c"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e8c\u4e09"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e09\u56db"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u56db\u4e94"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e94\u516d"' 4' 6' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u516d\u4e03"' 5' 7' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e03\u516b"' 6' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u516b\u4e5d"' 7' 9' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e5d\u5341"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestJa1,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u4e00\u4e8c"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e8c\u4e09"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e09\u56db"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u56db\u4e94"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e94\u516d"' 4' 6' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u516d\u4e03"' 5' 7' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e03\u516b"' 6' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u516b\u4e5d"' 7' 9' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e5d\u5341"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestJa1,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u4e00\u4e8c"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e8c\u4e09"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e09\u56db"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u56db\u4e94"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e94\u516d"' 4' 6' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u516d\u4e03"' 5' 7' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e03\u516b"' 6' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u516b\u4e5d"' 7' 9' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e5d\u5341"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestJa1,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u4e00\u4e8c"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e8c\u4e09"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e09\u56db"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u56db\u4e94"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e94\u516d"' 4' 6' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u516d\u4e03"' 5' 7' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e03\u516b"' 6' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u516b\u4e5d"' 7' 9' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e5d\u5341"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestJa1,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u4e00\u4e8c"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e8c\u4e09"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e09\u56db"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u56db\u4e94"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e94\u516d"' 4' 6' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u516d\u4e03"' 5' 7' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e03\u516b"' 6' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u516b\u4e5d"' 7' 9' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e5d\u5341"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestJa1,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u4e00\u4e8c"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e8c\u4e09"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e09\u56db"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u56db\u4e94"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e94\u516d"' 4' 6' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u516d\u4e03"' 5' 7' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e03\u516b"' 6' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u516b\u4e5d"' 7' 9' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e5d\u5341"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestJa1,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u4e00\u4e8c"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e8c\u4e09"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e09\u56db"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u56db\u4e94"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e94\u516d"' 4' 6' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u516d\u4e03"' 5' 7' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e03\u516b"' 6' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u516b\u4e5d"' 7' 9' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e5d\u5341"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestJa1,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u4e00\u4e8c"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e8c\u4e09"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e09\u56db"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u56db\u4e94"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e94\u516d"' 4' 6' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u516d\u4e03"' 5' 7' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e03\u516b"' 6' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u516b\u4e5d"' 7' 9' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e5d\u5341"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestJa1,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u4e00\u4e8c"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e8c\u4e09"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e09\u56db"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u56db\u4e94"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e94\u516d"' 4' 6' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u516d\u4e03"' 5' 7' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e03\u516b"' 6' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u516b\u4e5d"' 7' 9' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e5d\u5341"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestJa2,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u4e00"' 0' 1' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e8c\u4e09"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e09\u56db"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e94\u516d"' 6' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u516d\u4e03"' 7' 9' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e03\u516b"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u516b\u4e5d"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u5341"' 12' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestJa2,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u4e00"' 0' 1' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e8c\u4e09"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e09\u56db"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e94\u516d"' 6' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u516d\u4e03"' 7' 9' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e03\u516b"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u516b\u4e5d"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u5341"' 12' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestJa2,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u4e00"' 0' 1' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e8c\u4e09"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e09\u56db"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e94\u516d"' 6' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u516d\u4e03"' 7' 9' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e03\u516b"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u516b\u4e5d"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u5341"' 12' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestJa2,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u4e00"' 0' 1' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e8c\u4e09"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e09\u56db"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e94\u516d"' 6' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u516d\u4e03"' 7' 9' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e03\u516b"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u516b\u4e5d"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u5341"' 12' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestJa2,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u4e00"' 0' 1' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e8c\u4e09"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e09\u56db"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e94\u516d"' 6' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u516d\u4e03"' 7' 9' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e03\u516b"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u516b\u4e5d"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u5341"' 12' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestJa2,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u4e00"' 0' 1' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e8c\u4e09"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e09\u56db"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e94\u516d"' 6' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u516d\u4e03"' 7' 9' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e03\u516b"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u516b\u4e5d"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u5341"' 12' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestJa2,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u4e00"' 0' 1' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e8c\u4e09"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e09\u56db"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e94\u516d"' 6' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u516d\u4e03"' 7' 9' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e03\u516b"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u516b\u4e5d"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u5341"' 12' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestJa2,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u4e00"' 0' 1' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e8c\u4e09"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e09\u56db"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e94\u516d"' 6' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u516d\u4e03"' 7' 9' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e03\u516b"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u516b\u4e5d"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u5341"' 12' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestJa2,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u4e00"' 0' 1' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e8c\u4e09"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e09\u56db"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e94\u516d"' 6' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u516d\u4e03"' 7' 9' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e03\u516b"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u516b\u4e5d"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u5341"' 12' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestJa2,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u4e00"' 0' 1' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e8c\u4e09"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e09\u56db"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e94\u516d"' 6' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u516d\u4e03"' 7' 9' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e03\u516b"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u516b\u4e5d"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u5341"' 12' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestJa2,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u4e00"' 0' 1' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e8c\u4e09"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e09\u56db"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e94\u516d"' 6' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u516d\u4e03"' 7' 9' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e03\u516b"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u516b\u4e5d"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u5341"' 12' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestJa2,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u4e00"' 0' 1' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e8c\u4e09"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e09\u56db"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e94\u516d"' 6' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u516d\u4e03"' 7' 9' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e03\u516b"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u516b\u4e5d"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u5341"' 12' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestJa2,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u4e00"' 0' 1' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e8c\u4e09"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e09\u56db"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e94\u516d"' 6' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u516d\u4e03"' 7' 9' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e03\u516b"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u516b\u4e5d"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u5341"' 12' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestJa2,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u4e00"' 0' 1' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e8c\u4e09"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e09\u56db"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e94\u516d"' 6' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u516d\u4e03"' 7' 9' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u4e03\u516b"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u516b\u4e5d"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u5341"' 12' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestC,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("abc"' 0' 3' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("defgh"' 4' 9' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("ijklmn"' 10' 16' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("opqrstu"' 17' 24' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("vwxy"' 25' 29' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("z"' 30' 31' CJKTokenizer.SINGLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestC,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("abc"' 0' 3' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("defgh"' 4' 9' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("ijklmn"' 10' 16' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("opqrstu"' 17' 24' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("vwxy"' 25' 29' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("z"' 30' 31' CJKTokenizer.SINGLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestC,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("abc"' 0' 3' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("defgh"' 4' 9' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("ijklmn"' 10' 16' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("opqrstu"' 17' 24' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("vwxy"' 25' 29' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("z"' 30' 31' CJKTokenizer.SINGLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestC,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("abc"' 0' 3' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("defgh"' 4' 9' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("ijklmn"' 10' 16' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("opqrstu"' 17' 24' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("vwxy"' 25' 29' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("z"' 30' 31' CJKTokenizer.SINGLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestC,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("abc"' 0' 3' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("defgh"' 4' 9' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("ijklmn"' 10' 16' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("opqrstu"' 17' 24' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("vwxy"' 25' 29' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("z"' 30' 31' CJKTokenizer.SINGLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestC,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("abc"' 0' 3' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("defgh"' 4' 9' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("ijklmn"' 10' 16' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("opqrstu"' 17' 24' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("vwxy"' 25' 29' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("z"' 30' 31' CJKTokenizer.SINGLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestC,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("abc"' 0' 3' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("defgh"' 4' 9' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("ijklmn"' 10' 16' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("opqrstu"' 17' 24' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("vwxy"' 25' 29' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("z"' 30' 31' CJKTokenizer.SINGLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestC,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("abc"' 0' 3' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("defgh"' 4' 9' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("ijklmn"' 10' 16' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("opqrstu"' 17' 24' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("vwxy"' 25' 29' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("z"' 30' 31' CJKTokenizer.SINGLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestC,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("abc"' 0' 3' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("defgh"' 4' 9' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("ijklmn"' 10' 16' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("opqrstu"' 17' 24' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("vwxy"' 25' 29' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("z"' 30' 31' CJKTokenizer.SINGLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestC,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("abc"' 0' 3' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("defgh"' 4' 9' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("ijklmn"' 10' 16' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("opqrstu"' 17' 24' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("vwxy"' 25' 29' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("z"' 30' 31' CJKTokenizer.SINGLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestC,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("abc"' 0' 3' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("defgh"' 4' 9' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("ijklmn"' 10' 16' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("opqrstu"' 17' 24' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("vwxy"' 25' 29' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("z"' 30' 31' CJKTokenizer.SINGLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestMix,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("abc"' 5' 8' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3051\u3053"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestMix,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("abc"' 5' 8' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3051\u3053"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestMix,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("abc"' 5' 8' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3051\u3053"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestMix,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("abc"' 5' 8' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3051\u3053"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestMix,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("abc"' 5' 8' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3051\u3053"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestMix,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("abc"' 5' 8' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3051\u3053"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestMix,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("abc"' 5' 8' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3051\u3053"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestMix,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("abc"' 5' 8' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3051\u3053"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestMix,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("abc"' 5' 8' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3051\u3053"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestMix,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("abc"' 5' 8' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3051\u3053"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestMix,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("abc"' 5' 8' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3051\u3053"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestMix,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("abc"' 5' 8' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3051\u3053"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestMix,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("abc"' 5' 8' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3051\u3053"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestMix,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("abc"' 5' 8' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3051\u3053"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestMix,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("abc"' 5' 8' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3051\u3053"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestMix,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("abc"' 5' 8' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3051\u3053"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestMix2,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ab"' 5' 7' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u3093"' 7' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("c"' 8' 9' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3053"' 14' 15' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestMix2,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ab"' 5' 7' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u3093"' 7' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("c"' 8' 9' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3053"' 14' 15' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestMix2,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ab"' 5' 7' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u3093"' 7' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("c"' 8' 9' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3053"' 14' 15' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestMix2,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ab"' 5' 7' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u3093"' 7' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("c"' 8' 9' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3053"' 14' 15' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestMix2,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ab"' 5' 7' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u3093"' 7' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("c"' 8' 9' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3053"' 14' 15' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestMix2,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ab"' 5' 7' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u3093"' 7' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("c"' 8' 9' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3053"' 14' 15' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestMix2,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ab"' 5' 7' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u3093"' 7' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("c"' 8' 9' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3053"' 14' 15' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestMix2,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ab"' 5' 7' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u3093"' 7' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("c"' 8' 9' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3053"' 14' 15' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestMix2,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ab"' 5' 7' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u3093"' 7' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("c"' 8' 9' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3053"' 14' 15' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestMix2,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ab"' 5' 7' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u3093"' 7' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("c"' 8' 9' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3053"' 14' 15' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestMix2,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ab"' 5' 7' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u3093"' 7' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("c"' 8' 9' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3053"' 14' 15' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestMix2,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ab"' 5' 7' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u3093"' 7' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("c"' 8' 9' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3053"' 14' 15' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestMix2,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ab"' 5' 7' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u3093"' 7' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("c"' 8' 9' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3053"' 14' 15' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestMix2,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ab"' 5' 7' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u3093"' 7' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("c"' 8' 9' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3053"' 14' 15' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestMix2,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ab"' 5' 7' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u3093"' 7' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("c"' 8' 9' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3053"' 14' 15' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestMix2,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ab"' 5' 7' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u3093"' 7' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("c"' 8' 9' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3053"' 14' 15' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestMix2,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ab"' 5' 7' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u3093"' 7' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("c"' 8' 9' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3053"' 14' 15' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestMix2,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ab"' 5' 7' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u3093"' 7' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("c"' 8' 9' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3053"' 14' 15' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestMix2,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ab"' 5' 7' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u3093"' 7' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("c"' 8' 9' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3053"' 14' 15' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestMix2,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ab"' 5' 7' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u3093"' 7' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("c"' 8' 9' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3053"' 14' 15' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestFullWidth,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("test"' 0' 4' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("1234"' 5' 9' CJKTokenizer.SINGLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestFullWidth,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("test"' 0' 4' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("1234"' 5' 9' CJKTokenizer.SINGLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestFullWidth,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("test"' 0' 4' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("1234"' 5' 9' CJKTokenizer.SINGLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestNonIdeographic,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u4e00"' 0' 1' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("رو"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("وب"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("بر"' 4' 6' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("رت"' 5' 7' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("مو"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("وي"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ير"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestNonIdeographic,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u4e00"' 0' 1' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("رو"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("وب"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("بر"' 4' 6' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("رت"' 5' 7' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("مو"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("وي"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ير"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestNonIdeographic,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u4e00"' 0' 1' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("رو"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("وب"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("بر"' 4' 6' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("رت"' 5' 7' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("مو"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("وي"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ير"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestNonIdeographic,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u4e00"' 0' 1' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("رو"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("وب"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("بر"' 4' 6' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("رت"' 5' 7' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("مو"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("وي"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ير"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestNonIdeographic,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u4e00"' 0' 1' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("رو"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("وب"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("بر"' 4' 6' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("رت"' 5' 7' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("مو"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("وي"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ير"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestNonIdeographic,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u4e00"' 0' 1' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("رو"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("وب"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("بر"' 4' 6' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("رت"' 5' 7' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("مو"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("وي"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ير"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestNonIdeographic,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u4e00"' 0' 1' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("رو"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("وب"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("بر"' 4' 6' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("رت"' 5' 7' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("مو"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("وي"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ير"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestNonIdeographic,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u4e00"' 0' 1' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("رو"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("وب"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("بر"' 4' 6' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("رت"' 5' 7' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("مو"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("وي"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ير"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestNonIdeographic,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u4e00"' 0' 1' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("رو"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("وب"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("بر"' 4' 6' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("رت"' 5' 7' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("مو"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("وي"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ير"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestNonIdeographic,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u4e00"' 0' 1' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("رو"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("وب"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("بر"' 4' 6' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("رت"' 5' 7' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("مو"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("وي"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ير"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestNonIdeographic,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u4e00"' 0' 1' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("رو"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("وب"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("بر"' 4' 6' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("رت"' 5' 7' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("مو"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("وي"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ير"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestNonIdeographic,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u4e00"' 0' 1' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("رو"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("وب"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("بر"' 4' 6' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("رت"' 5' 7' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("مو"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("وي"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ير"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestNonIdeographic,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u4e00"' 0' 1' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("رو"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("وب"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("بر"' 4' 6' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("رت"' 5' 7' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("مو"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("وي"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ير"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestNonIdeographic,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u4e00"' 0' 1' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("رو"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("وب"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("بر"' 4' 6' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("رت"' 5' 7' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("مو"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("وي"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ير"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestNonIdeographicNonLetter,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u4e00"' 0' 1' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ر"' 2' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("وب"' 4' 6' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("بر"' 5' 7' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("رت"' 6' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("مو"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("وي"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ير"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestNonIdeographicNonLetter,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u4e00"' 0' 1' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ر"' 2' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("وب"' 4' 6' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("بر"' 5' 7' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("رت"' 6' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("مو"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("وي"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ير"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestNonIdeographicNonLetter,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u4e00"' 0' 1' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ر"' 2' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("وب"' 4' 6' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("بر"' 5' 7' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("رت"' 6' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("مو"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("وي"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ير"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestNonIdeographicNonLetter,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u4e00"' 0' 1' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ر"' 2' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("وب"' 4' 6' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("بر"' 5' 7' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("رت"' 6' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("مو"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("وي"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ير"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestNonIdeographicNonLetter,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u4e00"' 0' 1' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ر"' 2' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("وب"' 4' 6' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("بر"' 5' 7' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("رت"' 6' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("مو"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("وي"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ير"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestNonIdeographicNonLetter,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u4e00"' 0' 1' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ر"' 2' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("وب"' 4' 6' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("بر"' 5' 7' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("رت"' 6' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("مو"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("وي"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ير"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestNonIdeographicNonLetter,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u4e00"' 0' 1' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ر"' 2' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("وب"' 4' 6' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("بر"' 5' 7' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("رت"' 6' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("مو"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("وي"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ير"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestNonIdeographicNonLetter,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u4e00"' 0' 1' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ر"' 2' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("وب"' 4' 6' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("بر"' 5' 7' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("رت"' 6' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("مو"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("وي"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ير"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestNonIdeographicNonLetter,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u4e00"' 0' 1' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ر"' 2' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("وب"' 4' 6' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("بر"' 5' 7' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("رت"' 6' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("مو"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("وي"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ير"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestNonIdeographicNonLetter,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u4e00"' 0' 1' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ر"' 2' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("وب"' 4' 6' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("بر"' 5' 7' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("رت"' 6' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("مو"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("وي"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ير"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestNonIdeographicNonLetter,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u4e00"' 0' 1' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ر"' 2' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("وب"' 4' 6' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("بر"' 5' 7' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("رت"' 6' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("مو"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("وي"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ير"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestNonIdeographicNonLetter,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u4e00"' 0' 1' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ر"' 2' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("وب"' 4' 6' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("بر"' 5' 7' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("رت"' 6' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("مو"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("وي"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ير"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestNonIdeographicNonLetter,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u4e00"' 0' 1' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ر"' 2' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("وب"' 4' 6' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("بر"' 5' 7' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("رت"' 6' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("مو"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("وي"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ير"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestNonIdeographicNonLetter,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u4e00"' 0' 1' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ر"' 2' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("وب"' 4' 6' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("بر"' 5' 7' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("رت"' 6' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("مو"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("وي"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ير"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestReusableTokenStream,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("abc"' 5' 8' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3051\u3053"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestReusableTokenStream,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("abc"' 5' 8' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3051\u3053"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestReusableTokenStream,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("abc"' 5' 8' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3051\u3053"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestReusableTokenStream,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("abc"' 5' 8' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3051\u3053"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestReusableTokenStream,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("abc"' 5' 8' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3051\u3053"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestReusableTokenStream,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("abc"' 5' 8' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3051\u3053"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestReusableTokenStream,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("abc"' 5' 8' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3051\u3053"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestReusableTokenStream,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("abc"' 5' 8' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3051\u3053"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestReusableTokenStream,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("abc"' 5' 8' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3051\u3053"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestReusableTokenStream,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("abc"' 5' 8' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3051\u3053"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestReusableTokenStream,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("abc"' 5' 8' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3051\u3053"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestReusableTokenStream,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("abc"' 5' 8' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3051\u3053"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestReusableTokenStream,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("abc"' 5' 8' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3051\u3053"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestReusableTokenStream,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("abc"' 5' 8' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3051\u3053"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestReusableTokenStream,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("abc"' 5' 8' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3051\u3053"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestReusableTokenStream,The following statement contains a magic number: TestToken[] out_tokens = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("abc"' 5' 8' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 8' 10' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3051\u3053"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestReusableTokenStream,The following statement contains a magic number: TestToken[] out_tokens2 = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ab"' 5' 7' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u3093"' 7' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("c"' 8' 9' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3053"' 14' 15' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestReusableTokenStream,The following statement contains a magic number: TestToken[] out_tokens2 = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ab"' 5' 7' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u3093"' 7' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("c"' 8' 9' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3053"' 14' 15' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestReusableTokenStream,The following statement contains a magic number: TestToken[] out_tokens2 = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ab"' 5' 7' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u3093"' 7' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("c"' 8' 9' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3053"' 14' 15' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestReusableTokenStream,The following statement contains a magic number: TestToken[] out_tokens2 = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ab"' 5' 7' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u3093"' 7' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("c"' 8' 9' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3053"' 14' 15' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestReusableTokenStream,The following statement contains a magic number: TestToken[] out_tokens2 = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ab"' 5' 7' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u3093"' 7' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("c"' 8' 9' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3053"' 14' 15' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestReusableTokenStream,The following statement contains a magic number: TestToken[] out_tokens2 = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ab"' 5' 7' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u3093"' 7' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("c"' 8' 9' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3053"' 14' 15' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestReusableTokenStream,The following statement contains a magic number: TestToken[] out_tokens2 = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ab"' 5' 7' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u3093"' 7' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("c"' 8' 9' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3053"' 14' 15' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestReusableTokenStream,The following statement contains a magic number: TestToken[] out_tokens2 = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ab"' 5' 7' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u3093"' 7' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("c"' 8' 9' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3053"' 14' 15' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestReusableTokenStream,The following statement contains a magic number: TestToken[] out_tokens2 = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ab"' 5' 7' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u3093"' 7' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("c"' 8' 9' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3053"' 14' 15' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestReusableTokenStream,The following statement contains a magic number: TestToken[] out_tokens2 = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ab"' 5' 7' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u3093"' 7' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("c"' 8' 9' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3053"' 14' 15' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestReusableTokenStream,The following statement contains a magic number: TestToken[] out_tokens2 = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ab"' 5' 7' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u3093"' 7' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("c"' 8' 9' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3053"' 14' 15' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestReusableTokenStream,The following statement contains a magic number: TestToken[] out_tokens2 = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ab"' 5' 7' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u3093"' 7' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("c"' 8' 9' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3053"' 14' 15' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestReusableTokenStream,The following statement contains a magic number: TestToken[] out_tokens2 = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ab"' 5' 7' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u3093"' 7' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("c"' 8' 9' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3053"' 14' 15' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestReusableTokenStream,The following statement contains a magic number: TestToken[] out_tokens2 = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ab"' 5' 7' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u3093"' 7' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("c"' 8' 9' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3053"' 14' 15' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestReusableTokenStream,The following statement contains a magic number: TestToken[] out_tokens2 = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ab"' 5' 7' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u3093"' 7' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("c"' 8' 9' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3053"' 14' 15' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestReusableTokenStream,The following statement contains a magic number: TestToken[] out_tokens2 = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ab"' 5' 7' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u3093"' 7' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("c"' 8' 9' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3053"' 14' 15' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestReusableTokenStream,The following statement contains a magic number: TestToken[] out_tokens2 = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ab"' 5' 7' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u3093"' 7' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("c"' 8' 9' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3053"' 14' 15' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestReusableTokenStream,The following statement contains a magic number: TestToken[] out_tokens2 = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ab"' 5' 7' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u3093"' 7' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("c"' 8' 9' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3053"' 14' 15' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestReusableTokenStream,The following statement contains a magic number: TestToken[] out_tokens2 = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ab"' 5' 7' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u3093"' 7' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("c"' 8' 9' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3053"' 14' 15' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestReusableTokenStream,The following statement contains a magic number: TestToken[] out_tokens2 = new TestToken[] { newToken("\u3042\u3044"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3044\u3046"' 1' 3' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3046\u3048"' 2' 4' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3048\u304a"' 3' 5' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("ab"' 5' 7' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u3093"' 7' 8' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("c"' 8' 9' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("\u304b\u304d"' 9' 11' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304d\u304f"' 10' 12' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u304f\u3051"' 11' 13' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("\u3053"' 14' 15' CJKTokenizer.DOUBLE_TOKEN_TYPE) };
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestFinalOffset,The following statement contains a magic number: checkCJKToken("あい"' new TestToken[] { newToken("あい"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE) });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestFinalOffset,The following statement contains a magic number: checkCJKToken("あい   "' new TestToken[] { newToken("あい"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE) });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestFinalOffset,The following statement contains a magic number: checkCJKToken("test"' new TestToken[] { newToken("test"' 0' 4' CJKTokenizer.SINGLE_TOKEN_TYPE) });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestFinalOffset,The following statement contains a magic number: checkCJKToken("test   "' new TestToken[] { newToken("test"' 0' 4' CJKTokenizer.SINGLE_TOKEN_TYPE) });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestFinalOffset,The following statement contains a magic number: checkCJKToken("あいtest"' new TestToken[] { newToken("あい"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("test"' 2' 6' CJKTokenizer.SINGLE_TOKEN_TYPE) });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestFinalOffset,The following statement contains a magic number: checkCJKToken("あいtest"' new TestToken[] { newToken("あい"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("test"' 2' 6' CJKTokenizer.SINGLE_TOKEN_TYPE) });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestFinalOffset,The following statement contains a magic number: checkCJKToken("あいtest"' new TestToken[] { newToken("あい"' 0' 2' CJKTokenizer.DOUBLE_TOKEN_TYPE)' newToken("test"' 2' 6' CJKTokenizer.SINGLE_TOKEN_TYPE) });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestFinalOffset,The following statement contains a magic number: checkCJKToken("testあい    "' new TestToken[] { newToken("test"' 0' 4' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("あい"' 4' 6' CJKTokenizer.DOUBLE_TOKEN_TYPE) });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestFinalOffset,The following statement contains a magic number: checkCJKToken("testあい    "' new TestToken[] { newToken("test"' 0' 4' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("あい"' 4' 6' CJKTokenizer.DOUBLE_TOKEN_TYPE) });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestFinalOffset,The following statement contains a magic number: checkCJKToken("testあい    "' new TestToken[] { newToken("test"' 0' 4' CJKTokenizer.SINGLE_TOKEN_TYPE)' newToken("あい"' 4' 6' CJKTokenizer.DOUBLE_TOKEN_TYPE) });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKTokenizer.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' new CJKAnalyzer(LuceneVersion.LUCENE_30)' 10000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKWidthFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKWidthFilter.cs,TestFullWidthASCII,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "Ｔｅｓｔ １２３４"' new string[] { "Test"' "1234" }' new int[] { 0' 5 }' new int[] { 4' 9 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKWidthFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKWidthFilter.cs,TestFullWidthASCII,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "Ｔｅｓｔ １２３４"' new string[] { "Test"' "1234" }' new int[] { 0' 5 }' new int[] { 4' 9 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKWidthFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKWidthFilter.cs,TestFullWidthASCII,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "Ｔｅｓｔ １２３４"' new string[] { "Test"' "1234" }' new int[] { 0' 5 }' new int[] { 4' 9 });
Magic Number,Lucene.Net.Analysis.Cjk,TestCJKWidthFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cjk\TestCJKWidthFilter.cs,TestRandomData,The following statement contains a magic number: CheckRandomData(Random' analyzer' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.Ckb,TestSoraniAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Ckb\TestSoraniAnalyzer.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' new SoraniAnalyzer(TEST_VERSION_CURRENT)' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.Cn,TestChineseTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cn\TestChineseTokenizer.cs,TestReusableTokenStream,The following statement contains a magic number: AssertAnalyzesTo(a' "中华人民共和国"' new string[] { "中"' "华"' "人"' "民"' "共"' "和"' "国" }' new int[] { 0' 1' 2' 3' 4' 5' 6 }' new int[] { 1' 2' 3' 4' 5' 6' 7 });
Magic Number,Lucene.Net.Analysis.Cn,TestChineseTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cn\TestChineseTokenizer.cs,TestReusableTokenStream,The following statement contains a magic number: AssertAnalyzesTo(a' "中华人民共和国"' new string[] { "中"' "华"' "人"' "民"' "共"' "和"' "国" }' new int[] { 0' 1' 2' 3' 4' 5' 6 }' new int[] { 1' 2' 3' 4' 5' 6' 7 });
Magic Number,Lucene.Net.Analysis.Cn,TestChineseTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cn\TestChineseTokenizer.cs,TestReusableTokenStream,The following statement contains a magic number: AssertAnalyzesTo(a' "中华人民共和国"' new string[] { "中"' "华"' "人"' "民"' "共"' "和"' "国" }' new int[] { 0' 1' 2' 3' 4' 5' 6 }' new int[] { 1' 2' 3' 4' 5' 6' 7 });
Magic Number,Lucene.Net.Analysis.Cn,TestChineseTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cn\TestChineseTokenizer.cs,TestReusableTokenStream,The following statement contains a magic number: AssertAnalyzesTo(a' "中华人民共和国"' new string[] { "中"' "华"' "人"' "民"' "共"' "和"' "国" }' new int[] { 0' 1' 2' 3' 4' 5' 6 }' new int[] { 1' 2' 3' 4' 5' 6' 7 });
Magic Number,Lucene.Net.Analysis.Cn,TestChineseTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cn\TestChineseTokenizer.cs,TestReusableTokenStream,The following statement contains a magic number: AssertAnalyzesTo(a' "中华人民共和国"' new string[] { "中"' "华"' "人"' "民"' "共"' "和"' "国" }' new int[] { 0' 1' 2' 3' 4' 5' 6 }' new int[] { 1' 2' 3' 4' 5' 6' 7 });
Magic Number,Lucene.Net.Analysis.Cn,TestChineseTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cn\TestChineseTokenizer.cs,TestReusableTokenStream,The following statement contains a magic number: AssertAnalyzesTo(a' "中华人民共和国"' new string[] { "中"' "华"' "人"' "民"' "共"' "和"' "国" }' new int[] { 0' 1' 2' 3' 4' 5' 6 }' new int[] { 1' 2' 3' 4' 5' 6' 7 });
Magic Number,Lucene.Net.Analysis.Cn,TestChineseTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cn\TestChineseTokenizer.cs,TestReusableTokenStream,The following statement contains a magic number: AssertAnalyzesTo(a' "中华人民共和国"' new string[] { "中"' "华"' "人"' "民"' "共"' "和"' "国" }' new int[] { 0' 1' 2' 3' 4' 5' 6 }' new int[] { 1' 2' 3' 4' 5' 6' 7 });
Magic Number,Lucene.Net.Analysis.Cn,TestChineseTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cn\TestChineseTokenizer.cs,TestReusableTokenStream,The following statement contains a magic number: AssertAnalyzesTo(a' "中华人民共和国"' new string[] { "中"' "华"' "人"' "民"' "共"' "和"' "国" }' new int[] { 0' 1' 2' 3' 4' 5' 6 }' new int[] { 1' 2' 3' 4' 5' 6' 7 });
Magic Number,Lucene.Net.Analysis.Cn,TestChineseTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cn\TestChineseTokenizer.cs,TestReusableTokenStream,The following statement contains a magic number: AssertAnalyzesTo(a' "中华人民共和国"' new string[] { "中"' "华"' "人"' "民"' "共"' "和"' "国" }' new int[] { 0' 1' 2' 3' 4' 5' 6 }' new int[] { 1' 2' 3' 4' 5' 6' 7 });
Magic Number,Lucene.Net.Analysis.Cn,TestChineseTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cn\TestChineseTokenizer.cs,TestReusableTokenStream,The following statement contains a magic number: AssertAnalyzesTo(a' "中华人民共和国"' new string[] { "中"' "华"' "人"' "民"' "共"' "和"' "国" }' new int[] { 0' 1' 2' 3' 4' 5' 6 }' new int[] { 1' 2' 3' 4' 5' 6' 7 });
Magic Number,Lucene.Net.Analysis.Cn,TestChineseTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cn\TestChineseTokenizer.cs,TestReusableTokenStream,The following statement contains a magic number: AssertAnalyzesTo(a' "中华人民共和国"' new string[] { "中"' "华"' "人"' "民"' "共"' "和"' "国" }' new int[] { 0' 1' 2' 3' 4' 5' 6 }' new int[] { 1' 2' 3' 4' 5' 6' 7 });
Magic Number,Lucene.Net.Analysis.Cn,TestChineseTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cn\TestChineseTokenizer.cs,TestReusableTokenStream,The following statement contains a magic number: AssertAnalyzesTo(a' "北京市"' new string[] { "北"' "京"' "市" }' new int[] { 0' 1' 2 }' new int[] { 1' 2' 3 });
Magic Number,Lucene.Net.Analysis.Cn,TestChineseTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cn\TestChineseTokenizer.cs,TestReusableTokenStream,The following statement contains a magic number: AssertAnalyzesTo(a' "北京市"' new string[] { "北"' "京"' "市" }' new int[] { 0' 1' 2 }' new int[] { 1' 2' 3 });
Magic Number,Lucene.Net.Analysis.Cn,TestChineseTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cn\TestChineseTokenizer.cs,TestReusableTokenStream,The following statement contains a magic number: AssertAnalyzesTo(a' "北京市"' new string[] { "北"' "京"' "市" }' new int[] { 0' 1' 2 }' new int[] { 1' 2' 3 });
Magic Number,Lucene.Net.Analysis.Cn,TestChineseTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cn\TestChineseTokenizer.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' new ChineseAnalyzer()' 10000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.CommonGrams,CommonGramsFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Commongrams\CommonGramsFilterTest.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' a' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.CommonGrams,CommonGramsFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Commongrams\CommonGramsFilterTest.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' b' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.CommonGrams,TestCommonGramsFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Commongrams\TestCommonGramsFilterFactory.cs,TestInform,The following statement contains a magic number: assertTrue("words Size: " + words.size() + " is not: " + 2' words.size() == 2);
Magic Number,Lucene.Net.Analysis.CommonGrams,TestCommonGramsFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Commongrams\TestCommonGramsFilterFactory.cs,TestInform,The following statement contains a magic number: assertTrue("words Size: " + words.size() + " is not: " + 2' words.size() == 2);
Magic Number,Lucene.Net.Analysis.CommonGrams,TestCommonGramsFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Commongrams\TestCommonGramsFilterFactory.cs,TestInform,The following statement contains a magic number: assertTrue("words Size: " + words.size() + " is not: " + 4' words.size() == 4);
Magic Number,Lucene.Net.Analysis.CommonGrams,TestCommonGramsFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Commongrams\TestCommonGramsFilterFactory.cs,TestInform,The following statement contains a magic number: assertTrue("words Size: " + words.size() + " is not: " + 4' words.size() == 4);
Magic Number,Lucene.Net.Analysis.CommonGrams,TestCommonGramsFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Commongrams\TestCommonGramsFilterFactory.cs,TestInform,The following statement contains a magic number: assertEquals(8' words.size());
Magic Number,Lucene.Net.Analysis.CommonGrams,TestCommonGramsQueryFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Commongrams\TestCommonGramsQueryFilterFactory.cs,TestInform,The following statement contains a magic number: assertTrue("words Size: " + words.size() + " is not: " + 2' words.size() == 2);
Magic Number,Lucene.Net.Analysis.CommonGrams,TestCommonGramsQueryFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Commongrams\TestCommonGramsQueryFilterFactory.cs,TestInform,The following statement contains a magic number: assertTrue("words Size: " + words.size() + " is not: " + 2' words.size() == 2);
Magic Number,Lucene.Net.Analysis.CommonGrams,TestCommonGramsQueryFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Commongrams\TestCommonGramsQueryFilterFactory.cs,TestInform,The following statement contains a magic number: assertTrue("words Size: " + words.size() + " is not: " + 4' words.size() == 4);
Magic Number,Lucene.Net.Analysis.CommonGrams,TestCommonGramsQueryFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Commongrams\TestCommonGramsQueryFilterFactory.cs,TestInform,The following statement contains a magic number: assertTrue("words Size: " + words.size() + " is not: " + 4' words.size() == 4);
Magic Number,Lucene.Net.Analysis.CommonGrams,TestCommonGramsQueryFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Commongrams\TestCommonGramsQueryFilterFactory.cs,TestInform,The following statement contains a magic number: assertEquals(8' words.size());
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestHyphenationCompoundWordsDELongestMatch,The following statement contains a magic number: HyphenationCompoundWordTokenFilter tf = new HyphenationCompoundWordTokenFilter(TEST_VERSION_CURRENT' new MockTokenizer(new StringReader("basketballkurv")' MockTokenizer.WHITESPACE' false)' hyphenator' dict' CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE' CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE' 40' true);
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestHyphenationOnly,The following statement contains a magic number: HyphenationCompoundWordTokenFilter tf = new HyphenationCompoundWordTokenFilter(TEST_VERSION_CURRENT' new MockTokenizer(new StringReader("basketballkurv")' MockTokenizer.WHITESPACE' false)' hyphenator' CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE' 2' 4);
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestHyphenationOnly,The following statement contains a magic number: HyphenationCompoundWordTokenFilter tf = new HyphenationCompoundWordTokenFilter(TEST_VERSION_CURRENT' new MockTokenizer(new StringReader("basketballkurv")' MockTokenizer.WHITESPACE' false)' hyphenator' CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE' 2' 4);
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestHyphenationOnly,The following statement contains a magic number: tf = new HyphenationCompoundWordTokenFilter(TEST_VERSION_CURRENT' new MockTokenizer(new StringReader("basketballkurv")' MockTokenizer.WHITESPACE' false)' hyphenator' CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE' 4' 6);
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestHyphenationOnly,The following statement contains a magic number: tf = new HyphenationCompoundWordTokenFilter(TEST_VERSION_CURRENT' new MockTokenizer(new StringReader("basketballkurv")' MockTokenizer.WHITESPACE' false)' hyphenator' CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE' 4' 6);
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestHyphenationOnly,The following statement contains a magic number: tf = new HyphenationCompoundWordTokenFilter(TEST_VERSION_CURRENT' new MockTokenizer(new StringReader("basketballkurv")' MockTokenizer.WHITESPACE' false)' hyphenator' CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE' 4' 10);
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestHyphenationOnly,The following statement contains a magic number: tf = new HyphenationCompoundWordTokenFilter(TEST_VERSION_CURRENT' new MockTokenizer(new StringReader("basketballkurv")' MockTokenizer.WHITESPACE' false)' hyphenator' CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE' 4' 10);
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSE,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Bildörr"' "Bil"' "dörr"' "Bilmotor"' "Bil"' "motor"' "Biltak"' "Bil"' "tak"' "Slagborr"' "Slag"' "borr"' "Hammarborr"' "Hammar"' "borr"' "Pelarborr"' "Pelar"' "borr"' "Glasögonfodral"' "Glas"' "ögon"' "fodral"' "Basfiolsfodral"' "Bas"' "fiol"' "fodral"' "Basfiolsfodralmakaregesäll"' "Bas"' "fiol"' "fodral"' "makare"' "gesäll"' "Skomakare"' "Sko"' "makare"' "Vindrutetorkare"' "Vind"' "rute"' "torkare"' "Vindrutetorkarblad"' "Vind"' "rute"' "blad"' "abba" }' new int[] { 0' 0' 0' 8' 8' 8' 17' 17' 17' 24' 24' 24' 33' 33' 33' 44' 44' 44' 54' 54' 54' 54' 69' 69' 69' 69' 84' 84' 84' 84' 84' 84' 111' 111' 111' 121' 121' 121' 121' 137' 137' 137' 137' 156 }' new int[] { 7' 7' 7' 16' 16' 16' 23' 23' 23' 32' 32' 32' 43' 43' 43' 53' 53' 53' 68' 68' 68' 68' 83' 83' 83' 83' 110' 110' 110' 110' 110' 110' 120' 120' 120' 136' 136' 136' 136' 155' 155' 155' 155' 160 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 0' 0' 1' 0' 0' 1' 0' 0' 0' 1' 0' 0' 0' 1 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSELongestMatch,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Basfiolsfodralmakaregesäll"' "Bas"' "fiolsfodral"' "fodral"' "makare"' "gesäll" }' new int[] { 0' 0' 0' 0' 0' 0 }' new int[] { 26' 26' 26' 26' 26' 26 }' new int[] { 1' 0' 0' 0' 0' 0 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSELongestMatch,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Basfiolsfodralmakaregesäll"' "Bas"' "fiolsfodral"' "fodral"' "makare"' "gesäll" }' new int[] { 0' 0' 0' 0' 0' 0 }' new int[] { 26' 26' 26' 26' 26' 26 }' new int[] { 1' 0' 0' 0' 0' 0 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSELongestMatch,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Basfiolsfodralmakaregesäll"' "Bas"' "fiolsfodral"' "fodral"' "makare"' "gesäll" }' new int[] { 0' 0' 0' 0' 0' 0 }' new int[] { 26' 26' 26' 26' 26' 26 }' new int[] { 1' 0' 0' 0' 0' 0 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSELongestMatch,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Basfiolsfodralmakaregesäll"' "Bas"' "fiolsfodral"' "fodral"' "makare"' "gesäll" }' new int[] { 0' 0' 0' 0' 0' 0 }' new int[] { 26' 26' 26' 26' 26' 26 }' new int[] { 1' 0' 0' 0' 0' 0 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSELongestMatch,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Basfiolsfodralmakaregesäll"' "Bas"' "fiolsfodral"' "fodral"' "makare"' "gesäll" }' new int[] { 0' 0' 0' 0' 0' 0 }' new int[] { 26' 26' 26' 26' 26' 26 }' new int[] { 1' 0' 0' 0' 0' 0 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestDumbCompoundWordsSELongestMatch,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "Basfiolsfodralmakaregesäll"' "Bas"' "fiolsfodral"' "fodral"' "makare"' "gesäll" }' new int[] { 0' 0' 0' 0' 0' 0 }' new int[] { 26' 26' 26' 26' 26' 26 }' new int[] { 1' 0' 0' 0' 0' 0 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestTokenEndingWithWordComponentOfMinimumLength,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "abcdef"' "ab"' "cd"' "ef" }' new int[] { 0' 0' 0' 0 }' new int[] { 6' 6' 6' 6 }' new int[] { 1' 0' 0' 0 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestTokenEndingWithWordComponentOfMinimumLength,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "abcdef"' "ab"' "cd"' "ef" }' new int[] { 0' 0' 0' 0 }' new int[] { 6' 6' 6' 6 }' new int[] { 1' 0' 0' 0 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestTokenEndingWithWordComponentOfMinimumLength,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "abcdef"' "ab"' "cd"' "ef" }' new int[] { 0' 0' 0' 0 }' new int[] { 6' 6' 6' 6 }' new int[] { 1' 0' 0' 0 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestTokenEndingWithWordComponentOfMinimumLength,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "abcdef"' "ab"' "cd"' "ef" }' new int[] { 0' 0' 0' 0 }' new int[] { 6' 6' 6' 6 }' new int[] { 1' 0' 0' 0 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestWordComponentWithLessThanMinimumLength,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "abcdefg"' "abc"' "efg" }' new int[] { 0' 0' 0 }' new int[] { 7' 7' 7 }' new int[] { 1' 0' 0 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestWordComponentWithLessThanMinimumLength,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "abcdefg"' "abc"' "efg" }' new int[] { 0' 0' 0 }' new int[] { 7' 7' 7 }' new int[] { 1' 0' 0 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestWordComponentWithLessThanMinimumLength,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "abcdefg"' "abc"' "efg" }' new int[] { 0' 0' 0 }' new int[] { 7' 7' 7 }' new int[] { 1' 0' 0 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestInvalidOffsets,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "banküberfall"' new string[] { "bankueberfall"' "fall" }' new int[] { 0' 0 }' new int[] { 12' 12 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestInvalidOffsets,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "banküberfall"' new string[] { "bankueberfall"' "fall" }' new int[] { 0' 0 }' new int[] { 12' 12 });
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' a' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.Compound,TestCompoundWordTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Compound\TestCompoundWordTokenFilter.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' b' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.Core,TestAllAnalyzersHaveFactories,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestAllAnalyzersHaveFactories.cs,Test,The following statement contains a magic number: string simpleName = clazzName.Substring(0' clazzName.Length - 9);
Magic Number,Lucene.Net.Analysis.Core,TestAnalyzers,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestAnalyzers.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' new WhitespaceAnalyzer(TEST_VERSION_CURRENT)' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.Core,TestAnalyzers,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestAnalyzers.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' new SimpleAnalyzer(TEST_VERSION_CURRENT)' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.Core,TestAnalyzers,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestAnalyzers.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' new StopAnalyzer(TEST_VERSION_CURRENT)' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.Core,TestAnalyzers,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestAnalyzers.cs,TestRandomHugeStrings,The following statement contains a magic number: CheckRandomData(random' new WhitespaceAnalyzer(TEST_VERSION_CURRENT)' 100 * RANDOM_MULTIPLIER' 8192);
Magic Number,Lucene.Net.Analysis.Core,TestAnalyzers,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestAnalyzers.cs,TestRandomHugeStrings,The following statement contains a magic number: CheckRandomData(random' new WhitespaceAnalyzer(TEST_VERSION_CURRENT)' 100 * RANDOM_MULTIPLIER' 8192);
Magic Number,Lucene.Net.Analysis.Core,TestAnalyzers,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestAnalyzers.cs,TestRandomHugeStrings,The following statement contains a magic number: CheckRandomData(random' new SimpleAnalyzer(TEST_VERSION_CURRENT)' 100 * RANDOM_MULTIPLIER' 8192);
Magic Number,Lucene.Net.Analysis.Core,TestAnalyzers,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestAnalyzers.cs,TestRandomHugeStrings,The following statement contains a magic number: CheckRandomData(random' new SimpleAnalyzer(TEST_VERSION_CURRENT)' 100 * RANDOM_MULTIPLIER' 8192);
Magic Number,Lucene.Net.Analysis.Core,TestAnalyzers,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestAnalyzers.cs,TestRandomHugeStrings,The following statement contains a magic number: CheckRandomData(random' new StopAnalyzer(TEST_VERSION_CURRENT)' 100 * RANDOM_MULTIPLIER' 8192);
Magic Number,Lucene.Net.Analysis.Core,TestAnalyzers,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestAnalyzers.cs,TestRandomHugeStrings,The following statement contains a magic number: CheckRandomData(random' new StopAnalyzer(TEST_VERSION_CURRENT)' 100 * RANDOM_MULTIPLIER' 8192);
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,Test,The following statement contains a magic number: CharArraySet cas = new CharArraySet(TEST_VERSION_CURRENT' 3' false);
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestUnicodeShinglesAndNgrams,The following statement contains a magic number: CheckRandomData(Random' analyzer' 2000);
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,TestBugInSomething,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,TestCuriousWikipediaString,The following statement contains a magic number: byte[] table = (byte[])(Array)new sbyte[] { -57' 26' 1' 48' 63' -23' 55' -84' 18' 120' -97' 103' 58' 13' 84' 89' 57' -13' -63' 5' 28' 97' -54' -94' 102' -108' -5' 5' 46' 40' 43' 78' 43' -72' 36' 29' 124' -106' -22' -51' 65' 5' 31' -42' 6' -99' 97' 14' 81' -128' 74' 100' 54' -55' -25' 53' -71' -98' 44' 33' 86' 106' -42' 47' 115' -89' -18' -26' 22' -95' -43' 83' -125' 105' -104' -24' 106' -16' 126' 115' -105' 97' 65' -33' 57' 44' -1' 123' -68' 100' 13' -41' -64' -119' 0' 92' 94' -36' 53' -9' -102' -18' 90' 94' -26' 31' 71' -20 };
Magic Number,Lucene.Net.Analysis.Core,AnalyzerAnonymousInnerClassHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,CreateComponents,The following statement contains a magic number: Tokenizer t = new MockTokenizer(new TestRandomChains.CheckThatYouDidntReadAnythingReaderWrapper(reader)' MockTokenFilter.ENGLISH_STOPSET' false' -65);
Magic Number,Lucene.Net.Analysis.Core,AnalyzerAnonymousInnerClassHelper100,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,CreateComponents,The following statement contains a magic number: Tokenizer tokenizer = new EdgeNGramTokenizer(TEST_VERSION_CURRENT' reader' 2' 94);
Magic Number,Lucene.Net.Analysis.Core,AnalyzerAnonymousInnerClassHelper100,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,CreateComponents,The following statement contains a magic number: Tokenizer tokenizer = new EdgeNGramTokenizer(TEST_VERSION_CURRENT' reader' 2' 94);
Magic Number,Lucene.Net.Analysis.Core,AnalyzerAnonymousInnerClassHelper100,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,CreateComponents,The following statement contains a magic number: TokenStream stream = new ShingleFilter(tokenizer' 5);
Magic Number,Lucene.Net.Analysis.Core,AnalyzerAnonymousInnerClassHelper100,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,CreateComponents,The following statement contains a magic number: stream = new NGramTokenFilter(TEST_VERSION_CURRENT' stream' 55' 83);
Magic Number,Lucene.Net.Analysis.Core,AnalyzerAnonymousInnerClassHelper100,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,CreateComponents,The following statement contains a magic number: stream = new NGramTokenFilter(TEST_VERSION_CURRENT' stream' 55' 83);
Magic Number,Lucene.Net.Analysis.Core,AnalyzerAnonymousInnerClassHelper2,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestBugInSomething.cs,CreateComponents,The following statement contains a magic number: stream = new WordDelimiterFilter(TEST_VERSION_CURRENT' stream' table' (WordDelimiterFlags)(object)-50' protWords);
Magic Number,Lucene.Net.Analysis.Core,TestClassicAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestClassicAnalyzer.cs,TestMaxTermLength,The following statement contains a magic number: sa.MaxTokenLength = 5;
Magic Number,Lucene.Net.Analysis.Core,TestClassicAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestClassicAnalyzer.cs,TestMaxTermLength2,The following statement contains a magic number: sa.MaxTokenLength = 5;
Magic Number,Lucene.Net.Analysis.Core,TestClassicAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestClassicAnalyzer.cs,TestMaxTermLength2,The following statement contains a magic number: AssertAnalyzesTo(sa' "ab cd toolong xy z"' new string[] { "ab"' "cd"' "xy"' "z" }' new int[] { 1' 1' 2' 1 });
Magic Number,Lucene.Net.Analysis.Core,TestClassicAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestClassicAnalyzer.cs,TestMaxTermLength3,The following statement contains a magic number: char[] chars = new char[255];
Magic Number,Lucene.Net.Analysis.Core,TestClassicAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestClassicAnalyzer.cs,TestMaxTermLength3,The following statement contains a magic number: i < 255
Magic Number,Lucene.Net.Analysis.Core,TestClassicAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestClassicAnalyzer.cs,TestMaxTermLength3,The following statement contains a magic number: string longTerm = new string(chars' 0' 255);
Magic Number,Lucene.Net.Analysis.Core,TestClassicAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestClassicAnalyzer.cs,TestWickedLongTerm,The following statement contains a magic number: assertEquals(2' reader.DocFreq(new Term("content"' "abc")));
Magic Number,Lucene.Net.Analysis.Core,TestClassicAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestClassicAnalyzer.cs,TestWickedLongTerm,The following statement contains a magic number: assertEquals(3' tps.NextPosition());
Magic Number,Lucene.Net.Analysis.Core,TestClassicAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestClassicAnalyzer.cs,TestWickedLongTerm,The following statement contains a magic number: assertEquals("document with wicked long term should is not in the index!"' 2' reader.NumDocs);
Magic Number,Lucene.Net.Analysis.Core,TestClassicAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestClassicAnalyzer.cs,TestWickedLongTerm,The following statement contains a magic number: sa.MaxTokenLength = 100000;
Magic Number,Lucene.Net.Analysis.Core,TestClassicAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestClassicAnalyzer.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' new ClassicAnalyzer(TEST_VERSION_CURRENT)' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.Core,TestClassicAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestClassicAnalyzer.cs,TestRandomHugeStrings,The following statement contains a magic number: CheckRandomData(random' new ClassicAnalyzer(TEST_VERSION_CURRENT)' 100 * RANDOM_MULTIPLIER' 8192);
Magic Number,Lucene.Net.Analysis.Core,TestClassicAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestClassicAnalyzer.cs,TestRandomHugeStrings,The following statement contains a magic number: CheckRandomData(random' new ClassicAnalyzer(TEST_VERSION_CURRENT)' 100 * RANDOM_MULTIPLIER' 8192);
Magic Number,Lucene.Net.Analysis.Core,TestDuelingAnalyzers,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestDuelingAnalyzers.cs,TestLetterAscii,The following statement contains a magic number: i < 1000
Magic Number,Lucene.Net.Analysis.Core,TestDuelingAnalyzers,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestDuelingAnalyzers.cs,TestLetterAsciiHuge,The following statement contains a magic number: int maxLength = 8192;
Magic Number,Lucene.Net.Analysis.Core,TestDuelingAnalyzers,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestDuelingAnalyzers.cs,TestLetterAsciiHuge,The following statement contains a magic number: left.MaxTokenLength = 255;
Magic Number,Lucene.Net.Analysis.Core,TestDuelingAnalyzers,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestDuelingAnalyzers.cs,TestLetterAsciiHuge,The following statement contains a magic number: int numIterations = AtLeast(50);
Magic Number,Lucene.Net.Analysis.Core,TestDuelingAnalyzers,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestDuelingAnalyzers.cs,TestLetterHtmlish,The following statement contains a magic number: string s = TestUtil.RandomHtmlishString(random' 20);
Magic Number,Lucene.Net.Analysis.Core,TestDuelingAnalyzers,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestDuelingAnalyzers.cs,TestLetterHtmlish,The following statement contains a magic number: i < 1000
Magic Number,Lucene.Net.Analysis.Core,TestDuelingAnalyzers,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestDuelingAnalyzers.cs,TestLetterHtmlishHuge,The following statement contains a magic number: int maxLength = 1024;
Magic Number,Lucene.Net.Analysis.Core,TestDuelingAnalyzers,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestDuelingAnalyzers.cs,TestLetterHtmlishHuge,The following statement contains a magic number: left.MaxTokenLength = 255;
Magic Number,Lucene.Net.Analysis.Core,TestDuelingAnalyzers,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestDuelingAnalyzers.cs,TestLetterHtmlishHuge,The following statement contains a magic number: int numIterations = AtLeast(50);
Magic Number,Lucene.Net.Analysis.Core,TestDuelingAnalyzers,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestDuelingAnalyzers.cs,TestLetterUnicode,The following statement contains a magic number: i < 1000
Magic Number,Lucene.Net.Analysis.Core,TestDuelingAnalyzers,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestDuelingAnalyzers.cs,TestLetterUnicodeHuge,The following statement contains a magic number: int maxLength = 4300;
Magic Number,Lucene.Net.Analysis.Core,TestDuelingAnalyzers,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestDuelingAnalyzers.cs,TestLetterUnicodeHuge,The following statement contains a magic number: left.MaxTokenLength = 255;
Magic Number,Lucene.Net.Analysis.Core,TestDuelingAnalyzers,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestDuelingAnalyzers.cs,TestLetterUnicodeHuge,The following statement contains a magic number: int numIterations = AtLeast(50);
Magic Number,Lucene.Net.Analysis.Core,TestFactories,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestFactories.cs,DoTestTokenizer,The following statement contains a magic number: CheckRandomData(Random' new FactoryAnalyzer(factory' null' null)' 100' 20' false' false);
Magic Number,Lucene.Net.Analysis.Core,TestFactories,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestFactories.cs,DoTestTokenizer,The following statement contains a magic number: CheckRandomData(Random' new FactoryAnalyzer(factory' null' null)' 100' 20' false' false);
Magic Number,Lucene.Net.Analysis.Core,TestFactories,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestFactories.cs,DoTestTokenFilter,The following statement contains a magic number: CheckRandomData(Random' new FactoryAnalyzer(assertingTokenizer' factory' null)' 100' 20' false' false);
Magic Number,Lucene.Net.Analysis.Core,TestFactories,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestFactories.cs,DoTestTokenFilter,The following statement contains a magic number: CheckRandomData(Random' new FactoryAnalyzer(assertingTokenizer' factory' null)' 100' 20' false' false);
Magic Number,Lucene.Net.Analysis.Core,TestFactories,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestFactories.cs,DoTestCharFilter,The following statement contains a magic number: CheckRandomData(Random' new FactoryAnalyzer(assertingTokenizer' null' factory)' 100' 20' false' false);
Magic Number,Lucene.Net.Analysis.Core,TestFactories,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestFactories.cs,DoTestCharFilter,The following statement contains a magic number: CheckRandomData(Random' new FactoryAnalyzer(assertingTokenizer' null' factory)' 100' 20' false' false);
Magic Number,Lucene.Net.Analysis.Core,TestKeywordAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestKeywordAnalyzer.cs,TestOffsets,The following statement contains a magic number: assertEquals(4' offsetAtt.EndOffset);
Magic Number,Lucene.Net.Analysis.Core,TestKeywordAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestKeywordAnalyzer.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' new KeywordAnalyzer()' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.Core,TestRandomChains,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestRandomChains.cs,TestRandomChains_,The following statement contains a magic number: int numIterations = AtLeast(20);
Magic Number,Lucene.Net.Analysis.Core,TestRandomChains,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestRandomChains.cs,TestRandomChains_,The following statement contains a magic number: CheckRandomData(random' a' 500 * RANDOM_MULTIPLIER' 20' false'                                      false /* We already validate our own offsets... */);
Magic Number,Lucene.Net.Analysis.Core,TestRandomChains,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestRandomChains.cs,TestRandomChains_,The following statement contains a magic number: CheckRandomData(random' a' 500 * RANDOM_MULTIPLIER' 20' false'                                      false /* We already validate our own offsets... */);
Magic Number,Lucene.Net.Analysis.Core,TestRandomChains,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestRandomChains.cs,TestRandomChainsWithLargeStrings,The following statement contains a magic number: int numIterations = AtLeast(20);
Magic Number,Lucene.Net.Analysis.Core,TestRandomChains,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestRandomChains.cs,TestRandomChainsWithLargeStrings,The following statement contains a magic number: CheckRandomData(random' a' 50 * RANDOM_MULTIPLIER' 128' false'                                      false /* We already validate our own offsets... */);
Magic Number,Lucene.Net.Analysis.Core,TestRandomChains,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestRandomChains.cs,TestRandomChainsWithLargeStrings,The following statement contains a magic number: CheckRandomData(random' a' 50 * RANDOM_MULTIPLIER' 128' false'                                      false /* We already validate our own offsets... */);
Magic Number,Lucene.Net.Analysis.Core,PredicateAnonymousInnerClassHelper2,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestRandomChains.cs,Apply,The following statement contains a magic number: Debug.Assert(args.Length == 3);
Magic Number,Lucene.Net.Analysis.Core,PredicateAnonymousInnerClassHelper2,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestRandomChains.cs,Apply,The following statement contains a magic number: return !((bool)args[2]);
Magic Number,Lucene.Net.Analysis.Core,PredicateAnonymousInnerClassHelper3,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestRandomChains.cs,Apply,The following statement contains a magic number: Debug.Assert(args.Length == 3);
Magic Number,Lucene.Net.Analysis.Core,PredicateAnonymousInnerClassHelper3,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestRandomChains.cs,Apply,The following statement contains a magic number: return !((bool)args[2]);
Magic Number,Lucene.Net.Analysis.Core,IntArgProducer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestRandomChains.cs,Create,The following statement contains a magic number: return TestUtil.NextInt32(random' -100' 100);
Magic Number,Lucene.Net.Analysis.Core,IntArgProducer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestRandomChains.cs,Create,The following statement contains a magic number: return TestUtil.NextInt32(random' -100' 100);
Magic Number,Lucene.Net.Analysis.Core,CharArgProducer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestRandomChains.cs,Create,The following statement contains a magic number: char c = (char)random.nextInt(65536);
Magic Number,Lucene.Net.Analysis.Core,ByteArgProducer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestRandomChains.cs,Create,The following statement contains a magic number: return (byte)random.nextInt(256);
Magic Number,Lucene.Net.Analysis.Core,ByteArrayArgProducer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestRandomChains.cs,Create,The following statement contains a magic number: byte[] bytes = new byte[random.nextInt(256)];
Magic Number,Lucene.Net.Analysis.Core,SByteArrayArgProducer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestRandomChains.cs,Create,The following statement contains a magic number: byte[] bytes = new byte[random.nextInt(256)];
Magic Number,Lucene.Net.Analysis.Core,StringEnumerableArgProducer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestRandomChains.cs,Create,The following statement contains a magic number: int num = random.nextInt(5);
Magic Number,Lucene.Net.Analysis.Core,CharArrayCollectionArgProducer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestRandomChains.cs,Create,The following statement contains a magic number: int num = random.nextInt(5);
Magic Number,Lucene.Net.Analysis.Core,CharArraySetArgProducer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestRandomChains.cs,Create,The following statement contains a magic number: int num = random.nextInt(10);
Magic Number,Lucene.Net.Analysis.Core,NormalizeCharMapArgProducer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestRandomChains.cs,Create,The following statement contains a magic number: int num = random.nextInt(5);
Magic Number,Lucene.Net.Analysis.Core,CharacterRunAutomatonArgProducer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestRandomChains.cs,Create,The following statement contains a magic number: switch (random.nextInt(5))                  {                      case 0: return MockTokenizer.KEYWORD;                      case 1: return MockTokenizer.SIMPLE;                      case 2: return MockTokenizer.WHITESPACE;                      case 3: return MockTokenFilter.EMPTY_STOPSET;                      default: return MockTokenFilter.ENGLISH_STOPSET;                  }
Magic Number,Lucene.Net.Analysis.Core,CharacterRunAutomatonArgProducer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestRandomChains.cs,Create,The following statement contains a magic number: switch (random.nextInt(5))                  {                      case 0: return MockTokenizer.KEYWORD;                      case 1: return MockTokenizer.SIMPLE;                      case 2: return MockTokenizer.WHITESPACE;                      case 3: return MockTokenFilter.EMPTY_STOPSET;                      default: return MockTokenFilter.ENGLISH_STOPSET;                  }
Magic Number,Lucene.Net.Analysis.Core,CharacterRunAutomatonArgProducer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestRandomChains.cs,Create,The following statement contains a magic number: switch (random.nextInt(5))                  {                      case 0: return MockTokenizer.KEYWORD;                      case 1: return MockTokenizer.SIMPLE;                      case 2: return MockTokenizer.WHITESPACE;                      case 3: return MockTokenFilter.EMPTY_STOPSET;                      default: return MockTokenFilter.ENGLISH_STOPSET;                  }
Magic Number,Lucene.Net.Analysis.Core,StringCharArrayMapArgProducer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestRandomChains.cs,Create,The following statement contains a magic number: int num = random.nextInt(10);
Magic Number,Lucene.Net.Analysis.Core,StemmerOverrideMapArgProducer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestRandomChains.cs,Create,The following statement contains a magic number: int num = random.nextInt(10);
Magic Number,Lucene.Net.Analysis.Core,SynonymMapArgProducer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestRandomChains.cs,Create,The following statement contains a magic number: int numEntries = AtLeast(10);
Magic Number,Lucene.Net.Analysis.Core,MockRandomAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestRandomChains.cs,NewCharFilterChain,The following statement contains a magic number: int numFilters = random.nextInt(3);
Magic Number,Lucene.Net.Analysis.Core,MockRandomAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestRandomChains.cs,NewFilterChain,The following statement contains a magic number: int numFilters = random.nextInt(5);
Magic Number,Lucene.Net.Analysis.Core,TestStandardAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestStandardAnalyzer.cs,TestHugeDoc,The following statement contains a magic number: char[] whitespace = new char[4094];
Magic Number,Lucene.Net.Analysis.Core,TestStandardAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestStandardAnalyzer.cs,TestOffsets,The following statement contains a magic number: BaseTokenStreamTestCase.AssertAnalyzesTo(a' "David has 5000 bones"' new string[] { "David"' "has"' "5000"' "bones" }' new int[] { 0' 6' 10' 15 }' new int[] { 5' 9' 14' 20 });
Magic Number,Lucene.Net.Analysis.Core,TestStandardAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestStandardAnalyzer.cs,TestOffsets,The following statement contains a magic number: BaseTokenStreamTestCase.AssertAnalyzesTo(a' "David has 5000 bones"' new string[] { "David"' "has"' "5000"' "bones" }' new int[] { 0' 6' 10' 15 }' new int[] { 5' 9' 14' 20 });
Magic Number,Lucene.Net.Analysis.Core,TestStandardAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestStandardAnalyzer.cs,TestOffsets,The following statement contains a magic number: BaseTokenStreamTestCase.AssertAnalyzesTo(a' "David has 5000 bones"' new string[] { "David"' "has"' "5000"' "bones" }' new int[] { 0' 6' 10' 15 }' new int[] { 5' 9' 14' 20 });
Magic Number,Lucene.Net.Analysis.Core,TestStandardAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestStandardAnalyzer.cs,TestOffsets,The following statement contains a magic number: BaseTokenStreamTestCase.AssertAnalyzesTo(a' "David has 5000 bones"' new string[] { "David"' "has"' "5000"' "bones" }' new int[] { 0' 6' 10' 15 }' new int[] { 5' 9' 14' 20 });
Magic Number,Lucene.Net.Analysis.Core,TestStandardAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestStandardAnalyzer.cs,TestOffsets,The following statement contains a magic number: BaseTokenStreamTestCase.AssertAnalyzesTo(a' "David has 5000 bones"' new string[] { "David"' "has"' "5000"' "bones" }' new int[] { 0' 6' 10' 15 }' new int[] { 5' 9' 14' 20 });
Magic Number,Lucene.Net.Analysis.Core,TestStandardAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestStandardAnalyzer.cs,TestOffsets,The following statement contains a magic number: BaseTokenStreamTestCase.AssertAnalyzesTo(a' "David has 5000 bones"' new string[] { "David"' "has"' "5000"' "bones" }' new int[] { 0' 6' 10' 15 }' new int[] { 5' 9' 14' 20 });
Magic Number,Lucene.Net.Analysis.Core,TestStandardAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestStandardAnalyzer.cs,TestOffsets,The following statement contains a magic number: BaseTokenStreamTestCase.AssertAnalyzesTo(a' "David has 5000 bones"' new string[] { "David"' "has"' "5000"' "bones" }' new int[] { 0' 6' 10' 15 }' new int[] { 5' 9' 14' 20 });
Magic Number,Lucene.Net.Analysis.Core,TestStandardAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestStandardAnalyzer.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' new StandardAnalyzer(TEST_VERSION_CURRENT)' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.Core,TestStandardAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestStandardAnalyzer.cs,TestRandomHugeStrings,The following statement contains a magic number: CheckRandomData(random' new StandardAnalyzer(TEST_VERSION_CURRENT)' 100 * RANDOM_MULTIPLIER' 8192);
Magic Number,Lucene.Net.Analysis.Core,TestStandardAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestStandardAnalyzer.cs,TestRandomHugeStrings,The following statement contains a magic number: CheckRandomData(random' new StandardAnalyzer(TEST_VERSION_CURRENT)' 100 * RANDOM_MULTIPLIER' 8192);
Magic Number,Lucene.Net.Analysis.Core,TestStandardAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestStandardAnalyzer.cs,TestRandomHugeStringsGraphAfter,The following statement contains a magic number: CheckRandomData(random' new AnalyzerAnonymousInnerClassHelper4(this)' 100 * RANDOM_MULTIPLIER' 8192);
Magic Number,Lucene.Net.Analysis.Core,TestStandardAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestStandardAnalyzer.cs,TestRandomHugeStringsGraphAfter,The following statement contains a magic number: CheckRandomData(random' new AnalyzerAnonymousInnerClassHelper4(this)' 100 * RANDOM_MULTIPLIER' 8192);
Magic Number,Lucene.Net.Analysis.Core,TestStopAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestStopAnalyzer.cs,TestStopListPositions,The following statement contains a magic number: int[] expectedIncr = new int[] { 1' 1' 1' 3' 1' 1' 1' 2' 1 };
Magic Number,Lucene.Net.Analysis.Core,TestStopAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestStopAnalyzer.cs,TestStopListPositions,The following statement contains a magic number: int[] expectedIncr = new int[] { 1' 1' 1' 3' 1' 1' 1' 2' 1 };
Magic Number,Lucene.Net.Analysis.Core,TestStopFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestStopFilter.cs,TestStopPositons,The following statement contains a magic number: i % 3 != 0
Magic Number,Lucene.Net.Analysis.Core,TestStopFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestStopFilter.cs,TestStopPositons,The following statement contains a magic number: i < 20
Magic Number,Lucene.Net.Analysis.Core,TestStopFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestStopFilter.cs,TestStopPositons,The following statement contains a magic number: i % 2 == 0
Magic Number,Lucene.Net.Analysis.Core,TestStopFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestStopFilter.cs,TestEndStopword,The following statement contains a magic number: AssertTokenStreamContents(stpf' new string[] { "test" }' new int[] { 0 }' new int[] { 4 }' null' new int[] { 1 }' null' 7' 1' null' true' null);
Magic Number,Lucene.Net.Analysis.Core,TestStopFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestStopFilter.cs,TestEndStopword,The following statement contains a magic number: AssertTokenStreamContents(stpf' new string[] { "test" }' new int[] { 0 }' new int[] { 4 }' null' new int[] { 1 }' null' 7' 1' null' true' null);
Magic Number,Lucene.Net.Analysis.Core,TestStopFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestStopFilter.cs,DoTestStopPositons,The following statement contains a magic number: assertEquals("all but first token must have position increment of 3"' enableIcrements ? (i == 0 ? 1 : 3) : 1' posIncrAtt.PositionIncrement);
Magic Number,Lucene.Net.Analysis.Core,TestStopFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestStopFilter.cs,DoTestStopPositons,The following statement contains a magic number: i < 20
Magic Number,Lucene.Net.Analysis.Core,TestStopFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestStopFilterFactory.cs,TestInform,The following statement contains a magic number: assertTrue("words Size: " + words.size() + " is not: " + 2' words.size() == 2);
Magic Number,Lucene.Net.Analysis.Core,TestStopFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestStopFilterFactory.cs,TestInform,The following statement contains a magic number: assertTrue("words Size: " + words.size() + " is not: " + 2' words.size() == 2);
Magic Number,Lucene.Net.Analysis.Core,TestStopFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestStopFilterFactory.cs,TestInform,The following statement contains a magic number: assertTrue("words Size: " + words.size() + " is not: " + 4' words.size() == 4);
Magic Number,Lucene.Net.Analysis.Core,TestStopFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestStopFilterFactory.cs,TestInform,The following statement contains a magic number: assertTrue("words Size: " + words.size() + " is not: " + 4' words.size() == 4);
Magic Number,Lucene.Net.Analysis.Core,TestStopFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestStopFilterFactory.cs,TestInform,The following statement contains a magic number: assertEquals(8' words.size());
Magic Number,Lucene.Net.Analysis.Core,TestTypeTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestTypeTokenFilter.cs,TestStopPositons,The following statement contains a magic number: i % 3 != 0
Magic Number,Lucene.Net.Analysis.Core,TestTypeTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestTypeTokenFilter.cs,TestStopPositons,The following statement contains a magic number: i < 20
Magic Number,Lucene.Net.Analysis.Core,TestTypeTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestTypeTokenFilter.cs,TestPositons,The following statement contains a magic number: assertEquals("if position increment is enabled the positionIncrementAttribute value should be 3' otherwise 1"' posIncrAtt.PositionIncrement' enablePositionIncrements ? 3 : 1);
Magic Number,Lucene.Net.Analysis.Core,TestTypeTokenFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestTypeTokenFilterFactory.cs,TestInform,The following statement contains a magic number: assertTrue("types Size: " + types.Count + " is not: " + 2' types.Count == 2);
Magic Number,Lucene.Net.Analysis.Core,TestTypeTokenFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestTypeTokenFilterFactory.cs,TestInform,The following statement contains a magic number: assertTrue("types Size: " + types.Count + " is not: " + 2' types.Count == 2);
Magic Number,Lucene.Net.Analysis.Core,TestTypeTokenFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestTypeTokenFilterFactory.cs,TestInform,The following statement contains a magic number: assertTrue("types Size: " + types.Count + " is not: " + 4' types.Count == 4);
Magic Number,Lucene.Net.Analysis.Core,TestTypeTokenFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestTypeTokenFilterFactory.cs,TestInform,The following statement contains a magic number: assertTrue("types Size: " + types.Count + " is not: " + 4' types.Count == 4);
Magic Number,Lucene.Net.Analysis.Core,TestTypeTokenFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestTypeTokenFilterFactory.cs,TestCreationWithBlackList,The following statement contains a magic number: input.SetInt32Value(123);
Magic Number,Lucene.Net.Analysis.Core,TestTypeTokenFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestTypeTokenFilterFactory.cs,TestCreationWithWhiteList,The following statement contains a magic number: input.SetInt32Value(123);
Magic Number,Lucene.Net.Analysis.Core,TestUAX29URLEmailAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailAnalyzer.cs,TestHugeDoc,The following statement contains a magic number: char[] whitespace = new char[4094];
Magic Number,Lucene.Net.Analysis.Core,TestUAX29URLEmailAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailAnalyzer.cs,TestOffsets,The following statement contains a magic number: BaseTokenStreamTestCase.AssertAnalyzesTo(a' "David has 5000 bones"' new string[] { "david"' "has"' "5000"' "bones" }' new int[] { 0' 6' 10' 15 }' new int[] { 5' 9' 14' 20 });
Magic Number,Lucene.Net.Analysis.Core,TestUAX29URLEmailAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailAnalyzer.cs,TestOffsets,The following statement contains a magic number: BaseTokenStreamTestCase.AssertAnalyzesTo(a' "David has 5000 bones"' new string[] { "david"' "has"' "5000"' "bones" }' new int[] { 0' 6' 10' 15 }' new int[] { 5' 9' 14' 20 });
Magic Number,Lucene.Net.Analysis.Core,TestUAX29URLEmailAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailAnalyzer.cs,TestOffsets,The following statement contains a magic number: BaseTokenStreamTestCase.AssertAnalyzesTo(a' "David has 5000 bones"' new string[] { "david"' "has"' "5000"' "bones" }' new int[] { 0' 6' 10' 15 }' new int[] { 5' 9' 14' 20 });
Magic Number,Lucene.Net.Analysis.Core,TestUAX29URLEmailAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailAnalyzer.cs,TestOffsets,The following statement contains a magic number: BaseTokenStreamTestCase.AssertAnalyzesTo(a' "David has 5000 bones"' new string[] { "david"' "has"' "5000"' "bones" }' new int[] { 0' 6' 10' 15 }' new int[] { 5' 9' 14' 20 });
Magic Number,Lucene.Net.Analysis.Core,TestUAX29URLEmailAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailAnalyzer.cs,TestOffsets,The following statement contains a magic number: BaseTokenStreamTestCase.AssertAnalyzesTo(a' "David has 5000 bones"' new string[] { "david"' "has"' "5000"' "bones" }' new int[] { 0' 6' 10' 15 }' new int[] { 5' 9' 14' 20 });
Magic Number,Lucene.Net.Analysis.Core,TestUAX29URLEmailAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailAnalyzer.cs,TestOffsets,The following statement contains a magic number: BaseTokenStreamTestCase.AssertAnalyzesTo(a' "David has 5000 bones"' new string[] { "david"' "has"' "5000"' "bones" }' new int[] { 0' 6' 10' 15 }' new int[] { 5' 9' 14' 20 });
Magic Number,Lucene.Net.Analysis.Core,TestUAX29URLEmailAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailAnalyzer.cs,TestOffsets,The following statement contains a magic number: BaseTokenStreamTestCase.AssertAnalyzesTo(a' "David has 5000 bones"' new string[] { "david"' "has"' "5000"' "bones" }' new int[] { 0' 6' 10' 15 }' new int[] { 5' 9' 14' 20 });
Magic Number,Lucene.Net.Analysis.Core,TestUAX29URLEmailAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailAnalyzer.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' new UAX29URLEmailAnalyzer(TEST_VERSION_CURRENT)' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.Core,TestUAX29URLEmailTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailTokenizer.cs,TestHugeDoc,The following statement contains a magic number: char[] whitespace = new char[4094];
Magic Number,Lucene.Net.Analysis.Core,TestUAX29URLEmailTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailTokenizer.cs,TestOffsets,The following statement contains a magic number: BaseTokenStreamTestCase.AssertAnalyzesTo(a' "David has 5000 bones"' new string[] { "David"' "has"' "5000"' "bones" }' new int[] { 0' 6' 10' 15 }' new int[] { 5' 9' 14' 20 });
Magic Number,Lucene.Net.Analysis.Core,TestUAX29URLEmailTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailTokenizer.cs,TestOffsets,The following statement contains a magic number: BaseTokenStreamTestCase.AssertAnalyzesTo(a' "David has 5000 bones"' new string[] { "David"' "has"' "5000"' "bones" }' new int[] { 0' 6' 10' 15 }' new int[] { 5' 9' 14' 20 });
Magic Number,Lucene.Net.Analysis.Core,TestUAX29URLEmailTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailTokenizer.cs,TestOffsets,The following statement contains a magic number: BaseTokenStreamTestCase.AssertAnalyzesTo(a' "David has 5000 bones"' new string[] { "David"' "has"' "5000"' "bones" }' new int[] { 0' 6' 10' 15 }' new int[] { 5' 9' 14' 20 });
Magic Number,Lucene.Net.Analysis.Core,TestUAX29URLEmailTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailTokenizer.cs,TestOffsets,The following statement contains a magic number: BaseTokenStreamTestCase.AssertAnalyzesTo(a' "David has 5000 bones"' new string[] { "David"' "has"' "5000"' "bones" }' new int[] { 0' 6' 10' 15 }' new int[] { 5' 9' 14' 20 });
Magic Number,Lucene.Net.Analysis.Core,TestUAX29URLEmailTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailTokenizer.cs,TestOffsets,The following statement contains a magic number: BaseTokenStreamTestCase.AssertAnalyzesTo(a' "David has 5000 bones"' new string[] { "David"' "has"' "5000"' "bones" }' new int[] { 0' 6' 10' 15 }' new int[] { 5' 9' 14' 20 });
Magic Number,Lucene.Net.Analysis.Core,TestUAX29URLEmailTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailTokenizer.cs,TestOffsets,The following statement contains a magic number: BaseTokenStreamTestCase.AssertAnalyzesTo(a' "David has 5000 bones"' new string[] { "David"' "has"' "5000"' "bones" }' new int[] { 0' 6' 10' 15 }' new int[] { 5' 9' 14' 20 });
Magic Number,Lucene.Net.Analysis.Core,TestUAX29URLEmailTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailTokenizer.cs,TestOffsets,The following statement contains a magic number: BaseTokenStreamTestCase.AssertAnalyzesTo(a' "David has 5000 bones"' new string[] { "David"' "has"' "5000"' "bones" }' new int[] { 0' 6' 10' 15 }' new int[] { 5' 9' 14' 20 });
Magic Number,Lucene.Net.Analysis.Core,TestUAX29URLEmailTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailTokenizer.cs,TestWikiURLs,The following statement contains a magic number: char[] buffer = new char[1024];
Magic Number,Lucene.Net.Analysis.Core,TestUAX29URLEmailTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailTokenizer.cs,TestEmails,The following statement contains a magic number: char[] buffer = new char[1024];
Magic Number,Lucene.Net.Analysis.Core,TestUAX29URLEmailTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailTokenizer.cs,TestURLs,The following statement contains a magic number: char[] buffer = new char[1024];
Magic Number,Lucene.Net.Analysis.Core,TestUAX29URLEmailTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailTokenizer.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' a' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.Core,TestUAX29URLEmailTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailTokenizer.cs,TestRandomHugeStrings,The following statement contains a magic number: CheckRandomData(random' a' 100 * RANDOM_MULTIPLIER' 8192);
Magic Number,Lucene.Net.Analysis.Core,TestUAX29URLEmailTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Core\TestUAX29URLEmailTokenizer.cs,TestRandomHugeStrings,The following statement contains a magic number: CheckRandomData(random' a' 100 * RANDOM_MULTIPLIER' 8192);
Magic Number,Lucene.Net.Analysis.Cz,TestCzechAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Cz\TestCzechAnalyzer.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' new CzechAnalyzer(TEST_VERSION_CURRENT)' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.Da,TestDanishAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Da\TestDanishAnalyzer.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' new DanishAnalyzer(TEST_VERSION_CURRENT)' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.De,TestGermanAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\De\TestGermanAnalyzer.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' new GermanAnalyzer(TEST_VERSION_CURRENT)' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.De,TestGermanLightStemFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\De\TestGermanLightStemFilter.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' analyzer' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.De,TestGermanMinimalStemFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\De\TestGermanMinimalStemFilter.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' analyzer' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.De,TestGermanNormalizationFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\De\TestGermanNormalizationFilter.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' analyzer' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.De,TestGermanStemFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\De\TestGermanStemFilter.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' analyzer' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.El,GreekAnalyzerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\El\GreekAnalyzerTest.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' new GreekAnalyzer(TEST_VERSION_CURRENT)' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.En,TestEnglishAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\En\TestEnglishAnalyzer.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' new EnglishAnalyzer(TEST_VERSION_CURRENT)' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.En,TestEnglishMinimalStemFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\En\TestEnglishMinimalStemFilter.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' analyzer' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.En,TestKStemmer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\En\TestKStemmer.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' a' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.En,TestPorterStemFilter_,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\En\TestPorterStemFilter.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' a' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.Es,TestSpanishAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Es\TestSpanishAnalyzer.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' new SpanishAnalyzer(TEST_VERSION_CURRENT)' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.Es,TestSpanishLightStemFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Es\TestSpanishLightStemFilter.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' analyzer' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.Eu,TestBasqueAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Eu\TestBasqueAnalyzer.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' new BasqueAnalyzer(TEST_VERSION_CURRENT)' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.Fa,TestPersianAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Fa\TestPersianAnalyzer.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' new PersianAnalyzer(TEST_VERSION_CURRENT)' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.Fa,TestPersianCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Fa\TestPersianCharFilter.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' analyzer' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.Fi,TestFinnishAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Fi\TestFinnishAnalyzer.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' new FinnishAnalyzer(TEST_VERSION_CURRENT)' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.Fi,TestFinnishLightStemFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Fi\TestFinnishLightStemFilter.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' analyzer' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.Fr,TestFrenchAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Fr\TestFrenchAnalyzer.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' new FrenchAnalyzer(TEST_VERSION_CURRENT)' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.Fr,TestFrenchLightStemFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Fr\TestFrenchLightStemFilter.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' analyzer' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.Fr,TestFrenchMinimalStemFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Fr\TestFrenchMinimalStemFilter.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' analyzer' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.Ga,TestIrishAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Ga\TestIrishAnalyzer.cs,TestHyphens,The following statement contains a magic number: AssertAnalyzesTo(a' "n-athair"' new string[] { "athair" }' new int[] { 2 });
Magic Number,Lucene.Net.Analysis.Ga,TestIrishAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Ga\TestIrishAnalyzer.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' new IrishAnalyzer(TEST_VERSION_CURRENT)' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.Gl,TestGalicianAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Gl\TestGalicianAnalyzer.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' new GalicianAnalyzer(TEST_VERSION_CURRENT)' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.Gl,TestGalicianMinimalStemFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Gl\TestGalicianMinimalStemFilter.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' a' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.Hi,TestHindiAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Hi\TestHindiAnalyzer.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' new HindiAnalyzer(TEST_VERSION_CURRENT)' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.Hunspell,TestAllDictionaries,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Hunspell\TestAllDictionaries.cs,Test,The following statement contains a magic number: ZipArchiveEntry affEntry = zip.GetEntry(tests[i + 2]);
Magic Number,Lucene.Net.Analysis.Hunspell,TestAllDictionaries,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Hunspell\TestAllDictionaries.cs,TestOneDictionary,The following statement contains a magic number: ZipArchiveEntry affEntry = zip.GetEntry(tests[i + 2]);
Magic Number,Lucene.Net.Analysis.Hunspell,TestAllDictionaries2,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Hunspell\TestAllDictionaries2.cs,Test,The following statement contains a magic number: ZipArchiveEntry affEntry = zip.GetEntry(tests[i + 2]);
Magic Number,Lucene.Net.Analysis.Hunspell,TestAllDictionaries2,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Hunspell\TestAllDictionaries2.cs,TestOneDictionary,The following statement contains a magic number: ZipArchiveEntry affEntry = zip.GetEntry(tests[i + 2]);
Magic Number,Lucene.Net.Analysis.Hunspell,TestDictionary,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Hunspell\TestDictionary.cs,TestSimpleDictionary,The following statement contains a magic number: assertEquals(3' dictionary.LookupSuffix(new char[] { 'e' }' 0' 1).Length);
Magic Number,Lucene.Net.Analysis.Hunspell,TestDictionary,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Hunspell\TestDictionary.cs,TestSimpleDictionary,The following statement contains a magic number: Int32sRef ordList = dictionary.LookupWord(new char[] { 'o'' 'l'' 'r' }' 0' 3);
Magic Number,Lucene.Net.Analysis.Hunspell,TestDictionary,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Hunspell\TestDictionary.cs,TestSimpleDictionary,The following statement contains a magic number: ordList = dictionary.LookupWord(new char[] { 'l'' 'u'' 'c'' 'e'' 'n' }' 0' 5);
Magic Number,Lucene.Net.Analysis.Hunspell,TestDictionary,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Hunspell\TestDictionary.cs,TestCompressedDictionary,The following statement contains a magic number: assertEquals(3' dictionary.LookupSuffix(new char[] { 'e' }' 0' 1).Length);
Magic Number,Lucene.Net.Analysis.Hunspell,TestDictionary,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Hunspell\TestDictionary.cs,TestCompressedDictionary,The following statement contains a magic number: Int32sRef ordList = dictionary.LookupWord(new char[] { 'o'' 'l'' 'r' }' 0' 3);
Magic Number,Lucene.Net.Analysis.Hunspell,TestDictionary,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Hunspell\TestDictionary.cs,TestCompressedBeforeSetDictionary,The following statement contains a magic number: assertEquals(3' dictionary.LookupSuffix(new char[] { 'e' }' 0' 1).Length);
Magic Number,Lucene.Net.Analysis.Hunspell,TestDictionary,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Hunspell\TestDictionary.cs,TestCompressedBeforeSetDictionary,The following statement contains a magic number: Int32sRef ordList = dictionary.LookupWord(new char[] { 'o'' 'l'' 'r' }' 0' 3);
Magic Number,Lucene.Net.Analysis.Hunspell,TestDictionary,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Hunspell\TestDictionary.cs,TestCompressedEmptyAliasDictionary,The following statement contains a magic number: assertEquals(3' dictionary.LookupSuffix(new char[] { 'e' }' 0' 1).Length);
Magic Number,Lucene.Net.Analysis.Hunspell,TestDictionary,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Hunspell\TestDictionary.cs,TestCompressedEmptyAliasDictionary,The following statement contains a magic number: Int32sRef ordList = dictionary.LookupWord(new char[] { 'o'' 'l'' 'r' }' 0' 3);
Magic Number,Lucene.Net.Analysis.Hunspell,TestHunspellStemFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Hunspell\TestHunspellStemFilter.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' analyzer' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.Hu,TestHungarianAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Hu\TestHungarianAnalyzer.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' new HungarianAnalyzer(TEST_VERSION_CURRENT)' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.Hy,TestArmenianAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Hy\TestArmenianAnalyzer.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' new ArmenianAnalyzer(TEST_VERSION_CURRENT)' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.Id,TestIndonesianAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Id\TestIndonesianAnalyzer.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' new IndonesianAnalyzer(TEST_VERSION_CURRENT)' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.It,TestItalianAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\It\TestItalianAnalyzer.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' new ItalianAnalyzer(TEST_VERSION_CURRENT)' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.It,TestItalianLightStemFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\It\TestItalianLightStemFilter.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' analyzer' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.Lv,TestLatvianAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Lv\TestLatvianAnalyzer.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' new LatvianAnalyzer(TEST_VERSION_CURRENT)' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.Miscellaneous,PatternAnalyzerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\PatternAnalyzerTest.cs,TestHugeDocument,The following statement contains a magic number: char[] largeWord = new char[5000];
Magic Number,Lucene.Net.Analysis.Miscellaneous,PatternAnalyzerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\PatternAnalyzerTest.cs,TestHugeDocument,The following statement contains a magic number: char[] largeWord2 = new char[2000];
Magic Number,Lucene.Net.Analysis.Miscellaneous,PatternAnalyzerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\PatternAnalyzerTest.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' a' 10000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestASCIIFoldingFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestASCIIFoldingFilter.cs,testRandomStrings,The following statement contains a magic number: CheckRandomData(Random' a' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.Miscellaneous,AnalyzerAnonymousInnerClassHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestASCIIFoldingFilter.cs,CreateComponents,The following statement contains a magic number: return new TokenStreamComponents(tokenizer' new CodepointCountFilter(TEST_VERSION_CURRENT' tokenizer' 0' 5));
Magic Number,Lucene.Net.Analysis.Miscellaneous,AnalyzerAnonymousInnerClassHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestASCIIFoldingFilter.cs,CreateComponents,The following statement contains a magic number: return new TokenStreamComponents(tokenizer' new LengthFilter(TEST_VERSION_CURRENT' tokenizer' 0' 5));
Magic Number,Lucene.Net.Analysis.Miscellaneous,AnalyzerAnonymousInnerClassHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestASCIIFoldingFilter.cs,CreateComponents,The following statement contains a magic number: return new TokenStreamComponents(tokenizer' new LimitTokenPositionFilter(tokenizer' 2' consumeAll));
Magic Number,Lucene.Net.Analysis.Miscellaneous,AnalyzerAnonymousInnerClassHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestASCIIFoldingFilter.cs,InitReader,The following statement contains a magic number: return new MockCharFilter(reader' 7);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestCapitalizationFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestCapitalizationFilter.cs,TestCapitalization,The following statement contains a magic number: AssertCapitalizesTo("Hello thEre my Name is Ryan"' new string[] { "Hello"' "There"' "my"' "Name"' "is"' "Ryan" }' false' keep' true' null' 3' CapitalizationFilter.DEFAULT_MAX_WORD_COUNT' CapitalizationFilter.DEFAULT_MAX_TOKEN_LENGTH);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestCapitalizationFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestCapitalizationFilter.cs,TestRandomString,The following statement contains a magic number: CheckRandomData(Random' a' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestCapitalizationFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestCapitalizationFilter.cs,TestIllegalArguments1,The following statement contains a magic number: Assert.Throws<ArgumentOutOfRangeException>(() =>              {                  new CapitalizationFilter(new MockTokenizer(new StringReader("accept only valid arguments")' MockTokenizer.WHITESPACE' false)' true' null' true' null' 0' -10' CapitalizationFilter.DEFAULT_MAX_TOKEN_LENGTH);              });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestCapitalizationFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestCapitalizationFilter.cs,TestIllegalArguments2,The following statement contains a magic number: Assert.Throws<ArgumentOutOfRangeException>(() =>              {                  new CapitalizationFilter(new MockTokenizer(new StringReader("accept only valid arguments")' MockTokenizer.WHITESPACE' false)' true' null' true' null' 0' CapitalizationFilter.DEFAULT_MAX_WORD_COUNT' -50);              });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestCodepointCountFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestCodepointCountFilter.cs,TestFilterWithPosIncr,The following statement contains a magic number: CodepointCountFilter filter = new CodepointCountFilter(TEST_VERSION_CURRENT' stream' 2' 6);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestCodepointCountFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestCodepointCountFilter.cs,TestFilterWithPosIncr,The following statement contains a magic number: CodepointCountFilter filter = new CodepointCountFilter(TEST_VERSION_CURRENT' stream' 2' 6);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestCodepointCountFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestCodepointCountFilter.cs,TestFilterWithPosIncr,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "short"' "ab"' "foo" }' new int[] { 1' 4' 2 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestCodepointCountFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestCodepointCountFilter.cs,TestFilterWithPosIncr,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "short"' "ab"' "foo" }' new int[] { 1' 4' 2 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestCodepointCountFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestCodepointCountFilter.cs,TestRandomStrings,The following statement contains a magic number: string text = TestUtil.RandomUnicodeString(Random' 100);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestCodepointCountFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestCodepointCountFilter.cs,TestRandomStrings,The following statement contains a magic number: int min = TestUtil.NextInt32(Random' 0' 100);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestCodepointCountFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestCodepointCountFilter.cs,TestRandomStrings,The following statement contains a magic number: int max = TestUtil.NextInt32(Random' 0' 100);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestCodepointCountFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestCodepointCountFilter.cs,TestRandomStrings,The following statement contains a magic number: i < 10000
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestCodepointCountFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestCodepointCountFilter.cs,TestIllegalArguments,The following statement contains a magic number: Assert.Throws<ArgumentOutOfRangeException>(() => {                  new CodepointCountFilter(TEST_VERSION_CURRENT' new MockTokenizer(new StringReader("accept only valid arguments")' MockTokenizer.WHITESPACE' false)' 4' 1);              });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestCodepointCountFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestCodepointCountFilterFactory.cs,TestPositionIncrements,The following statement contains a magic number: AssertTokenStreamContents(stream' new string[] { "foobar" }' new int[] { 2 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestHyphenatedWordsFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestHyphenatedWordsFilter.cs,TestOffsets,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "abcdef"' "geh"' "12345678-" }' new int[] { 0' 9' 13 }' new int[] { 8' 12' 24 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestHyphenatedWordsFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestHyphenatedWordsFilter.cs,TestOffsets,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "abcdef"' "geh"' "12345678-" }' new int[] { 0' 9' 13 }' new int[] { 8' 12' 24 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestHyphenatedWordsFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestHyphenatedWordsFilter.cs,TestOffsets,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "abcdef"' "geh"' "12345678-" }' new int[] { 0' 9' 13 }' new int[] { 8' 12' 24 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestHyphenatedWordsFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestHyphenatedWordsFilter.cs,TestOffsets,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "abcdef"' "geh"' "12345678-" }' new int[] { 0' 9' 13 }' new int[] { 8' 12' 24 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestHyphenatedWordsFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestHyphenatedWordsFilter.cs,TestOffsets,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "abcdef"' "geh"' "12345678-" }' new int[] { 0' 9' 13 }' new int[] { 8' 12' 24 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestHyphenatedWordsFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestHyphenatedWordsFilter.cs,TestRandomString,The following statement contains a magic number: CheckRandomData(Random' a' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestKeepFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestKeepFilterFactory.cs,TestInform,The following statement contains a magic number: assertTrue("words Size: " + words.size() + " is not: " + 2' words.size() == 2);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestKeepFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestKeepFilterFactory.cs,TestInform,The following statement contains a magic number: assertTrue("words Size: " + words.size() + " is not: " + 2' words.size() == 2);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestKeepFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestKeepFilterFactory.cs,TestInform,The following statement contains a magic number: assertTrue("words Size: " + words.size() + " is not: " + 4' words.size() == 4);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestKeepFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestKeepFilterFactory.cs,TestInform,The following statement contains a magic number: assertTrue("words Size: " + words.size() + " is not: " + 4' words.size() == 4);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestKeepWordFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestKeepWordFilter.cs,TestStopAndGo,The following statement contains a magic number: AssertTokenStreamContents(stream' new string[] { "aaa"' "BBB" }' new int[] { 3' 2 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestKeepWordFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestKeepWordFilter.cs,TestStopAndGo,The following statement contains a magic number: AssertTokenStreamContents(stream' new string[] { "aaa"' "BBB" }' new int[] { 3' 2 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestKeepWordFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestKeepWordFilter.cs,TestStopAndGo,The following statement contains a magic number: AssertTokenStreamContents(stream' new string[] { "aaa" }' new int[] { 3 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestKeepWordFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestKeepWordFilter.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' a' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestKeywordMarkerFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestKeywordMarkerFilter.cs,TestSetFilterIncrementToken,The following statement contains a magic number: CharArraySet set = new CharArraySet(TEST_VERSION_CURRENT' 5' true);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLengthFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLengthFilter.cs,TestFilterNoPosIncr,The following statement contains a magic number: LengthFilter filter = new LengthFilter(LuceneVersion.LUCENE_43' false' stream' 2' 6);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLengthFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLengthFilter.cs,TestFilterNoPosIncr,The following statement contains a magic number: LengthFilter filter = new LengthFilter(LuceneVersion.LUCENE_43' false' stream' 2' 6);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLengthFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLengthFilter.cs,TestFilterWithPosIncr,The following statement contains a magic number: LengthFilter filter = new LengthFilter(TEST_VERSION_CURRENT' stream' 2' 6);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLengthFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLengthFilter.cs,TestFilterWithPosIncr,The following statement contains a magic number: LengthFilter filter = new LengthFilter(TEST_VERSION_CURRENT' stream' 2' 6);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLengthFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLengthFilter.cs,TestFilterWithPosIncr,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "short"' "ab"' "foo" }' new int[] { 1' 4' 2 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLengthFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLengthFilter.cs,TestFilterWithPosIncr,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "short"' "ab"' "foo" }' new int[] { 1' 4' 2 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLengthFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLengthFilter.cs,TestIllegalArguments,The following statement contains a magic number: Assert.Throws<ArgumentOutOfRangeException>(() => new LengthFilter(TEST_VERSION_CURRENT' new MockTokenizer(new StringReader("accept only valid arguments"))' -4' -1));
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLengthFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLengthFilterFactory.cs,TestPositionIncrements,The following statement contains a magic number: AssertTokenStreamContents(stream' new string[] { "foobar" }' new int[] { 2 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLimitTokenCountAnalyzer_,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLimitTokenCountAnalyzer.cs,TestLimitTokenCountAnalyzer,The following statement contains a magic number: Analyzer a = new LimitTokenCountAnalyzer(mock' 2' consumeAll);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLimitTokenCountAnalyzer_,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLimitTokenCountAnalyzer.cs,TestLimitTokenCountAnalyzer,The following statement contains a magic number: AssertTokenStreamContents(a.GetTokenStream("dummy"' "1  2     3  4  5")' new string[] { "1"' "2" }' new int[] { 0' 3 }' new int[] { 1' 4 }' consumeAll ? (int?)16 : null);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLimitTokenCountAnalyzer_,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLimitTokenCountAnalyzer.cs,TestLimitTokenCountAnalyzer,The following statement contains a magic number: AssertTokenStreamContents(a.GetTokenStream("dummy"' "1  2     3  4  5")' new string[] { "1"' "2" }' new int[] { 0' 3 }' new int[] { 1' 4 }' consumeAll ? (int?)16 : null);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLimitTokenCountAnalyzer_,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLimitTokenCountAnalyzer.cs,TestLimitTokenCountAnalyzer,The following statement contains a magic number: AssertTokenStreamContents(a.GetTokenStream("dummy"' "1  2     3  4  5")' new string[] { "1"' "2" }' new int[] { 0' 3 }' new int[] { 1' 4 }' consumeAll ? (int?)16 : null);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLimitTokenCountAnalyzer_,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLimitTokenCountAnalyzer.cs,TestLimitTokenCountAnalyzer,The following statement contains a magic number: AssertTokenStreamContents(a.GetTokenStream("dummy"' "1 2 3 4 5")' new string[] { "1"' "2" }' new int[] { 0' 2 }' new int[] { 1' 3 }' consumeAll ? (int?)9 : null);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLimitTokenCountAnalyzer_,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLimitTokenCountAnalyzer.cs,TestLimitTokenCountAnalyzer,The following statement contains a magic number: AssertTokenStreamContents(a.GetTokenStream("dummy"' "1 2 3 4 5")' new string[] { "1"' "2" }' new int[] { 0' 2 }' new int[] { 1' 3 }' consumeAll ? (int?)9 : null);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLimitTokenCountAnalyzer_,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLimitTokenCountAnalyzer.cs,TestLimitTokenCountAnalyzer,The following statement contains a magic number: AssertTokenStreamContents(a.GetTokenStream("dummy"' "1 2 3 4 5")' new string[] { "1"' "2" }' new int[] { 0' 2 }' new int[] { 1' 3 }' consumeAll ? (int?)9 : null);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLimitTokenCountAnalyzer_,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLimitTokenCountAnalyzer.cs,TestLimitTokenCountAnalyzer,The following statement contains a magic number: AssertTokenStreamContents(a.GetTokenStream("dummy"' "1  ")' new string[] { "1" }' new int[] { 0 }' new int[] { 1 }' (consumeAll ? (int?)3 : null));
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLimitTokenCountAnalyzer_,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLimitTokenCountAnalyzer.cs,TestLimitTokenCountAnalyzer,The following statement contains a magic number: AssertTokenStreamContents(a.GetTokenStream("dummy"' "1  2  ")' new string[] { "1"' "2" }' new int[] { 0' 3 }' new int[] { 1' 4 }' consumeAll ? (int?)6 : null);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLimitTokenCountAnalyzer_,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLimitTokenCountAnalyzer.cs,TestLimitTokenCountAnalyzer,The following statement contains a magic number: AssertTokenStreamContents(a.GetTokenStream("dummy"' "1  2  ")' new string[] { "1"' "2" }' new int[] { 0' 3 }' new int[] { 1' 4 }' consumeAll ? (int?)6 : null);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLimitTokenCountAnalyzer_,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLimitTokenCountAnalyzer.cs,TestLimitTokenCountAnalyzer,The following statement contains a magic number: AssertTokenStreamContents(a.GetTokenStream("dummy"' "1  2  ")' new string[] { "1"' "2" }' new int[] { 0' 3 }' new int[] { 1' 4 }' consumeAll ? (int?)6 : null);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLimitTokenCountAnalyzer_,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLimitTokenCountAnalyzer.cs,TestLimitTokenCountIndexWriter,The following statement contains a magic number: int limit = TestUtil.NextInt32(Random' 50' 101000);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLimitTokenCountAnalyzer_,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLimitTokenCountAnalyzer.cs,TestLimitTokenCountIndexWriter,The following statement contains a magic number: int limit = TestUtil.NextInt32(Random' 50' 101000);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLimitTokenCountFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLimitTokenCountFilter.cs,Test,The following statement contains a magic number: TokenStream stream = new LimitTokenCountFilter(tokenizer' 3' consumeAll);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLimitTokenPositionFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLimitTokenPositionFilter.cs,TestMaxPosition2,The following statement contains a magic number: AssertTokenStreamContents(a.GetTokenStream("dummy"' "1  2     3  4  5")' new string[] { "1"' "2" }' new int[] { 0' 3 }' new int[] { 1' 4 }' consumeAll ? 16 : (int?)null);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLimitTokenPositionFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLimitTokenPositionFilter.cs,TestMaxPosition2,The following statement contains a magic number: AssertTokenStreamContents(a.GetTokenStream("dummy"' "1  2     3  4  5")' new string[] { "1"' "2" }' new int[] { 0' 3 }' new int[] { 1' 4 }' consumeAll ? 16 : (int?)null);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLimitTokenPositionFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLimitTokenPositionFilter.cs,TestMaxPosition2,The following statement contains a magic number: AssertTokenStreamContents(a.GetTokenStream("dummy"' "1  2     3  4  5")' new string[] { "1"' "2" }' new int[] { 0' 3 }' new int[] { 1' 4 }' consumeAll ? 16 : (int?)null);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLimitTokenPositionFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLimitTokenPositionFilter.cs,TestMaxPosition2,The following statement contains a magic number: AssertTokenStreamContents(a.GetTokenStream("dummy"' new StringReader("1 2 3 4 5"))' new string[] { "1"' "2" }' new int[] { 0' 2 }' new int[] { 1' 3 }' consumeAll ? 9 : (int?)null);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLimitTokenPositionFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLimitTokenPositionFilter.cs,TestMaxPosition2,The following statement contains a magic number: AssertTokenStreamContents(a.GetTokenStream("dummy"' new StringReader("1 2 3 4 5"))' new string[] { "1"' "2" }' new int[] { 0' 2 }' new int[] { 1' 3 }' consumeAll ? 9 : (int?)null);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLimitTokenPositionFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLimitTokenPositionFilter.cs,TestMaxPosition2,The following statement contains a magic number: AssertTokenStreamContents(a.GetTokenStream("dummy"' new StringReader("1 2 3 4 5"))' new string[] { "1"' "2" }' new int[] { 0' 2 }' new int[] { 1' 3 }' consumeAll ? 9 : (int?)null);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLimitTokenPositionFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLimitTokenPositionFilter.cs,TestMaxPosition2,The following statement contains a magic number: AssertTokenStreamContents(a.GetTokenStream("dummy"' "1  ")' new string[] { "1" }' new int[] { 0 }' new int[] { 1 }' consumeAll ? 3 : (int?)null);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLimitTokenPositionFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLimitTokenPositionFilter.cs,TestMaxPosition2,The following statement contains a magic number: AssertTokenStreamContents(a.GetTokenStream("dummy"' "1  2  ")' new string[] { "1"' "2" }' new int[] { 0' 3 }' new int[] { 1' 4 }' consumeAll ? 6 : (int?)null);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLimitTokenPositionFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLimitTokenPositionFilter.cs,TestMaxPosition2,The following statement contains a magic number: AssertTokenStreamContents(a.GetTokenStream("dummy"' "1  2  ")' new string[] { "1"' "2" }' new int[] { 0' 3 }' new int[] { 1' 4 }' consumeAll ? 6 : (int?)null);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLimitTokenPositionFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLimitTokenPositionFilter.cs,TestMaxPosition2,The following statement contains a magic number: AssertTokenStreamContents(a.GetTokenStream("dummy"' "1  2  ")' new string[] { "1"' "2" }' new int[] { 0' 3 }' new int[] { 1' 4 }' consumeAll ? 6 : (int?)null);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLimitTokenPositionFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLimitTokenPositionFilter.cs,TestMaxPosition3WithSynomyms,The following statement contains a magic number: stream = new LimitTokenPositionFilter(stream' 3' consumeAll);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestOffsets,The following statement contains a magic number: TokenFilter wdf = new Lucene47WordDelimiterFilter(new SingleTokenTokenStream(new Token("foo-bar"' 5' 12))' WordDelimiterIterator.DEFAULT_WORD_DELIM_TABLE' flags' null);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestOffsets,The following statement contains a magic number: TokenFilter wdf = new Lucene47WordDelimiterFilter(new SingleTokenTokenStream(new Token("foo-bar"' 5' 12))' WordDelimiterIterator.DEFAULT_WORD_DELIM_TABLE' flags' null);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestOffsets,The following statement contains a magic number: AssertTokenStreamContents(wdf' new string[] { "foo"' "bar"' "foobar" }' new int[] { 5' 9' 5 }' new int[] { 8' 12' 12 }' null' null' null' null' false);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestOffsets,The following statement contains a magic number: AssertTokenStreamContents(wdf' new string[] { "foo"' "bar"' "foobar" }' new int[] { 5' 9' 5 }' new int[] { 8' 12' 12 }' null' null' null' null' false);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestOffsets,The following statement contains a magic number: AssertTokenStreamContents(wdf' new string[] { "foo"' "bar"' "foobar" }' new int[] { 5' 9' 5 }' new int[] { 8' 12' 12 }' null' null' null' null' false);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestOffsets,The following statement contains a magic number: AssertTokenStreamContents(wdf' new string[] { "foo"' "bar"' "foobar" }' new int[] { 5' 9' 5 }' new int[] { 8' 12' 12 }' null' null' null' null' false);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestOffsets,The following statement contains a magic number: AssertTokenStreamContents(wdf' new string[] { "foo"' "bar"' "foobar" }' new int[] { 5' 9' 5 }' new int[] { 8' 12' 12 }' null' null' null' null' false);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestOffsets,The following statement contains a magic number: AssertTokenStreamContents(wdf' new string[] { "foo"' "bar"' "foobar" }' new int[] { 5' 9' 5 }' new int[] { 8' 12' 12 }' null' null' null' null' false);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestOffsets,The following statement contains a magic number: wdf = new Lucene47WordDelimiterFilter(new SingleTokenTokenStream(new Token("foo-bar"' 5' 6))' WordDelimiterIterator.DEFAULT_WORD_DELIM_TABLE' flags' null);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestOffsets,The following statement contains a magic number: wdf = new Lucene47WordDelimiterFilter(new SingleTokenTokenStream(new Token("foo-bar"' 5' 6))' WordDelimiterIterator.DEFAULT_WORD_DELIM_TABLE' flags' null);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestOffsets,The following statement contains a magic number: AssertTokenStreamContents(wdf' new string[] { "foo"' "bar"' "foobar" }' new int[] { 5' 5' 5 }' new int[] { 6' 6' 6 }' null' null' null' null' false);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestOffsets,The following statement contains a magic number: AssertTokenStreamContents(wdf' new string[] { "foo"' "bar"' "foobar" }' new int[] { 5' 5' 5 }' new int[] { 6' 6' 6 }' null' null' null' null' false);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestOffsets,The following statement contains a magic number: AssertTokenStreamContents(wdf' new string[] { "foo"' "bar"' "foobar" }' new int[] { 5' 5' 5 }' new int[] { 6' 6' 6 }' null' null' null' null' false);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestOffsets,The following statement contains a magic number: AssertTokenStreamContents(wdf' new string[] { "foo"' "bar"' "foobar" }' new int[] { 5' 5' 5 }' new int[] { 6' 6' 6 }' null' null' null' null' false);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestOffsets,The following statement contains a magic number: AssertTokenStreamContents(wdf' new string[] { "foo"' "bar"' "foobar" }' new int[] { 5' 5' 5 }' new int[] { 6' 6' 6 }' null' null' null' null' false);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestOffsets,The following statement contains a magic number: AssertTokenStreamContents(wdf' new string[] { "foo"' "bar"' "foobar" }' new int[] { 5' 5' 5 }' new int[] { 6' 6' 6 }' null' null' null' null' false);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestOffsetChange,The following statement contains a magic number: TokenFilter wdf = new Lucene47WordDelimiterFilter(new SingleTokenTokenStream(new Token("übelkeit)"' 7' 16))' WordDelimiterIterator.DEFAULT_WORD_DELIM_TABLE' flags' null);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestOffsetChange,The following statement contains a magic number: TokenFilter wdf = new Lucene47WordDelimiterFilter(new SingleTokenTokenStream(new Token("übelkeit)"' 7' 16))' WordDelimiterIterator.DEFAULT_WORD_DELIM_TABLE' flags' null);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestOffsetChange,The following statement contains a magic number: AssertTokenStreamContents(wdf' new string[] { "übelkeit" }' new int[] { 7 }' new int[] { 15 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestOffsetChange,The following statement contains a magic number: AssertTokenStreamContents(wdf' new string[] { "übelkeit" }' new int[] { 7 }' new int[] { 15 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestOffsetChange2,The following statement contains a magic number: TokenFilter wdf = new Lucene47WordDelimiterFilter(new SingleTokenTokenStream(new Token("(übelkeit"' 7' 17))' WordDelimiterIterator.DEFAULT_WORD_DELIM_TABLE' flags' null);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestOffsetChange2,The following statement contains a magic number: TokenFilter wdf = new Lucene47WordDelimiterFilter(new SingleTokenTokenStream(new Token("(übelkeit"' 7' 17))' WordDelimiterIterator.DEFAULT_WORD_DELIM_TABLE' flags' null);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestOffsetChange2,The following statement contains a magic number: AssertTokenStreamContents(wdf' new string[] { "übelkeit" }' new int[] { 8 }' new int[] { 17 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestOffsetChange2,The following statement contains a magic number: AssertTokenStreamContents(wdf' new string[] { "übelkeit" }' new int[] { 8 }' new int[] { 17 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestOffsetChange3,The following statement contains a magic number: TokenFilter wdf = new Lucene47WordDelimiterFilter(new SingleTokenTokenStream(new Token("(übelkeit"' 7' 16))' WordDelimiterIterator.DEFAULT_WORD_DELIM_TABLE' flags' null);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestOffsetChange3,The following statement contains a magic number: TokenFilter wdf = new Lucene47WordDelimiterFilter(new SingleTokenTokenStream(new Token("(übelkeit"' 7' 16))' WordDelimiterIterator.DEFAULT_WORD_DELIM_TABLE' flags' null);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestOffsetChange3,The following statement contains a magic number: AssertTokenStreamContents(wdf' new string[] { "übelkeit" }' new int[] { 8 }' new int[] { 16 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestOffsetChange3,The following statement contains a magic number: AssertTokenStreamContents(wdf' new string[] { "übelkeit" }' new int[] { 8 }' new int[] { 16 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestOffsetChange4,The following statement contains a magic number: TokenFilter wdf = new Lucene47WordDelimiterFilter(new SingleTokenTokenStream(new Token("(foo'bar)"' 7' 16))' WordDelimiterIterator.DEFAULT_WORD_DELIM_TABLE' flags' null);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestOffsetChange4,The following statement contains a magic number: TokenFilter wdf = new Lucene47WordDelimiterFilter(new SingleTokenTokenStream(new Token("(foo'bar)"' 7' 16))' WordDelimiterIterator.DEFAULT_WORD_DELIM_TABLE' flags' null);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestOffsetChange4,The following statement contains a magic number: AssertTokenStreamContents(wdf' new string[] { "foo"' "bar"' "foobar" }' new int[] { 8' 12' 8 }' new int[] { 11' 15' 15 }' null' null' null' null' false);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestOffsetChange4,The following statement contains a magic number: AssertTokenStreamContents(wdf' new string[] { "foo"' "bar"' "foobar" }' new int[] { 8' 12' 8 }' new int[] { 11' 15' 15 }' null' null' null' null' false);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestOffsetChange4,The following statement contains a magic number: AssertTokenStreamContents(wdf' new string[] { "foo"' "bar"' "foobar" }' new int[] { 8' 12' 8 }' new int[] { 11' 15' 15 }' null' null' null' null' false);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestOffsetChange4,The following statement contains a magic number: AssertTokenStreamContents(wdf' new string[] { "foo"' "bar"' "foobar" }' new int[] { 8' 12' 8 }' new int[] { 11' 15' 15 }' null' null' null' null' false);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestOffsetChange4,The following statement contains a magic number: AssertTokenStreamContents(wdf' new string[] { "foo"' "bar"' "foobar" }' new int[] { 8' 12' 8 }' new int[] { 11' 15' 15 }' null' null' null' null' false);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestOffsetChange4,The following statement contains a magic number: AssertTokenStreamContents(wdf' new string[] { "foo"' "bar"' "foobar" }' new int[] { 8' 12' 8 }' new int[] { 11' 15' 15 }' null' null' null' null' false);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a' "LUCENE / SOLR"' new string[] { "LUCENE"' "SOLR" }' new int[] { 0' 9 }' new int[] { 6' 13 }' null' new int[] { 1' 1 }' null' false);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a' "LUCENE / SOLR"' new string[] { "LUCENE"' "SOLR" }' new int[] { 0' 9 }' new int[] { 6' 13 }' null' new int[] { 1' 1 }' null' false);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a' "LUCENE / SOLR"' new string[] { "LUCENE"' "SOLR" }' new int[] { 0' 9 }' new int[] { 6' 13 }' null' new int[] { 1' 1 }' null' false);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a' "LUCENE / solR"' new string[] { "LUCENE"' "sol"' "R"' "solR" }' new int[] { 0' 9' 12' 9 }' new int[] { 6' 12' 13' 13 }' null' new int[] { 1' 1' 1' 0 }' null' false);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a' "LUCENE / solR"' new string[] { "LUCENE"' "sol"' "R"' "solR" }' new int[] { 0' 9' 12' 9 }' new int[] { 6' 12' 13' 13 }' null' new int[] { 1' 1' 1' 0 }' null' false);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a' "LUCENE / solR"' new string[] { "LUCENE"' "sol"' "R"' "solR" }' new int[] { 0' 9' 12' 9 }' new int[] { 6' 12' 13' 13 }' null' new int[] { 1' 1' 1' 0 }' null' false);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a' "LUCENE / solR"' new string[] { "LUCENE"' "sol"' "R"' "solR" }' new int[] { 0' 9' 12' 9 }' new int[] { 6' 12' 13' 13 }' null' new int[] { 1' 1' 1' 0 }' null' false);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a' "LUCENE / solR"' new string[] { "LUCENE"' "sol"' "R"' "solR" }' new int[] { 0' 9' 12' 9 }' new int[] { 6' 12' 13' 13 }' null' new int[] { 1' 1' 1' 0 }' null' false);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a' "LUCENE / solR"' new string[] { "LUCENE"' "sol"' "R"' "solR" }' new int[] { 0' 9' 12' 9 }' new int[] { 6' 12' 13' 13 }' null' new int[] { 1' 1' 1' 0 }' null' false);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a' "LUCENE / solR"' new string[] { "LUCENE"' "sol"' "R"' "solR" }' new int[] { 0' 9' 12' 9 }' new int[] { 6' 12' 13' 13 }' null' new int[] { 1' 1' 1' 0 }' null' false);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a' "LUCENE / NUTCH SOLR"' new string[] { "LUCENE"' "NUTCH"' "SOLR" }' new int[] { 0' 9' 15 }' new int[] { 6' 14' 19 }' null' new int[] { 1' 1' 1 }' null' false);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a' "LUCENE / NUTCH SOLR"' new string[] { "LUCENE"' "NUTCH"' "SOLR" }' new int[] { 0' 9' 15 }' new int[] { 6' 14' 19 }' null' new int[] { 1' 1' 1 }' null' false);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a' "LUCENE / NUTCH SOLR"' new string[] { "LUCENE"' "NUTCH"' "SOLR" }' new int[] { 0' 9' 15 }' new int[] { 6' 14' 19 }' null' new int[] { 1' 1' 1 }' null' false);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a' "LUCENE / NUTCH SOLR"' new string[] { "LUCENE"' "NUTCH"' "SOLR" }' new int[] { 0' 9' 15 }' new int[] { 6' 14' 19 }' null' new int[] { 1' 1' 1 }' null' false);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a' "LUCENE / NUTCH SOLR"' new string[] { "LUCENE"' "NUTCH"' "SOLR" }' new int[] { 0' 9' 15 }' new int[] { 6' 14' 19 }' null' new int[] { 1' 1' 1 }' null' false);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a2' "LUCENE largegap SOLR"' new string[] { "LUCENE"' "largegap"' "SOLR" }' new int[] { 0' 7' 16 }' new int[] { 6' 15' 20 }' null' new int[] { 1' 10' 1 }' null' false);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a2' "LUCENE largegap SOLR"' new string[] { "LUCENE"' "largegap"' "SOLR" }' new int[] { 0' 7' 16 }' new int[] { 6' 15' 20 }' null' new int[] { 1' 10' 1 }' null' false);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a2' "LUCENE largegap SOLR"' new string[] { "LUCENE"' "largegap"' "SOLR" }' new int[] { 0' 7' 16 }' new int[] { 6' 15' 20 }' null' new int[] { 1' 10' 1 }' null' false);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a2' "LUCENE largegap SOLR"' new string[] { "LUCENE"' "largegap"' "SOLR" }' new int[] { 0' 7' 16 }' new int[] { 6' 15' 20 }' null' new int[] { 1' 10' 1 }' null' false);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a2' "LUCENE largegap SOLR"' new string[] { "LUCENE"' "largegap"' "SOLR" }' new int[] { 0' 7' 16 }' new int[] { 6' 15' 20 }' null' new int[] { 1' 10' 1 }' null' false);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a2' "LUCENE largegap SOLR"' new string[] { "LUCENE"' "largegap"' "SOLR" }' new int[] { 0' 7' 16 }' new int[] { 6' 15' 20 }' null' new int[] { 1' 10' 1 }' null' false);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a2' "LUCENE / SOLR"' new string[] { "LUCENE"' "SOLR" }' new int[] { 0' 9 }' new int[] { 6' 13 }' null' new int[] { 1' 11 }' null' false);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a2' "LUCENE / SOLR"' new string[] { "LUCENE"' "SOLR" }' new int[] { 0' 9 }' new int[] { 6' 13 }' null' new int[] { 1' 11 }' null' false);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a2' "LUCENE / SOLR"' new string[] { "LUCENE"' "SOLR" }' new int[] { 0' 9 }' new int[] { 6' 13 }' null' new int[] { 1' 11 }' null' false);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a2' "LUCENE / SOLR"' new string[] { "LUCENE"' "SOLR" }' new int[] { 0' 9 }' new int[] { 6' 13 }' null' new int[] { 1' 11 }' null' false);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a2' "LUCENE / solR"' new string[] { "LUCENE"' "sol"' "R"' "solR" }' new int[] { 0' 9' 12' 9 }' new int[] { 6' 12' 13' 13 }' null' new int[] { 1' 11' 1' 0 }' null' false);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a2' "LUCENE / solR"' new string[] { "LUCENE"' "sol"' "R"' "solR" }' new int[] { 0' 9' 12' 9 }' new int[] { 6' 12' 13' 13 }' null' new int[] { 1' 11' 1' 0 }' null' false);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a2' "LUCENE / solR"' new string[] { "LUCENE"' "sol"' "R"' "solR" }' new int[] { 0' 9' 12' 9 }' new int[] { 6' 12' 13' 13 }' null' new int[] { 1' 11' 1' 0 }' null' false);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a2' "LUCENE / solR"' new string[] { "LUCENE"' "sol"' "R"' "solR" }' new int[] { 0' 9' 12' 9 }' new int[] { 6' 12' 13' 13 }' null' new int[] { 1' 11' 1' 0 }' null' false);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a2' "LUCENE / solR"' new string[] { "LUCENE"' "sol"' "R"' "solR" }' new int[] { 0' 9' 12' 9 }' new int[] { 6' 12' 13' 13 }' null' new int[] { 1' 11' 1' 0 }' null' false);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a2' "LUCENE / solR"' new string[] { "LUCENE"' "sol"' "R"' "solR" }' new int[] { 0' 9' 12' 9 }' new int[] { 6' 12' 13' 13 }' null' new int[] { 1' 11' 1' 0 }' null' false);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a2' "LUCENE / solR"' new string[] { "LUCENE"' "sol"' "R"' "solR" }' new int[] { 0' 9' 12' 9 }' new int[] { 6' 12' 13' 13 }' null' new int[] { 1' 11' 1' 0 }' null' false);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a2' "LUCENE / solR"' new string[] { "LUCENE"' "sol"' "R"' "solR" }' new int[] { 0' 9' 12' 9 }' new int[] { 6' 12' 13' 13 }' null' new int[] { 1' 11' 1' 0 }' null' false);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a2' "LUCENE / NUTCH SOLR"' new string[] { "LUCENE"' "NUTCH"' "SOLR" }' new int[] { 0' 9' 15 }' new int[] { 6' 14' 19 }' null' new int[] { 1' 11' 1 }' null' false);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a2' "LUCENE / NUTCH SOLR"' new string[] { "LUCENE"' "NUTCH"' "SOLR" }' new int[] { 0' 9' 15 }' new int[] { 6' 14' 19 }' null' new int[] { 1' 11' 1 }' null' false);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a2' "LUCENE / NUTCH SOLR"' new string[] { "LUCENE"' "NUTCH"' "SOLR" }' new int[] { 0' 9' 15 }' new int[] { 6' 14' 19 }' null' new int[] { 1' 11' 1 }' null' false);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a2' "LUCENE / NUTCH SOLR"' new string[] { "LUCENE"' "NUTCH"' "SOLR" }' new int[] { 0' 9' 15 }' new int[] { 6' 14' 19 }' null' new int[] { 1' 11' 1 }' null' false);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a2' "LUCENE / NUTCH SOLR"' new string[] { "LUCENE"' "NUTCH"' "SOLR" }' new int[] { 0' 9' 15 }' new int[] { 6' 14' 19 }' null' new int[] { 1' 11' 1 }' null' false);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a2' "LUCENE / NUTCH SOLR"' new string[] { "LUCENE"' "NUTCH"' "SOLR" }' new int[] { 0' 9' 15 }' new int[] { 6' 14' 19 }' null' new int[] { 1' 11' 1 }' null' false);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a3' "lucene.solr"' new string[] { "lucene"' "solr"' "lucenesolr" }' new int[] { 0' 7' 0 }' new int[] { 6' 11' 11 }' null' new int[] { 1' 1' 0 }' null' false);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a3' "lucene.solr"' new string[] { "lucene"' "solr"' "lucenesolr" }' new int[] { 0' 7' 0 }' new int[] { 6' 11' 11 }' null' new int[] { 1' 1' 0 }' null' false);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a3' "lucene.solr"' new string[] { "lucene"' "solr"' "lucenesolr" }' new int[] { 0' 7' 0 }' new int[] { 6' 11' 11 }' null' new int[] { 1' 1' 0 }' null' false);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a3' "lucene.solr"' new string[] { "lucene"' "solr"' "lucenesolr" }' new int[] { 0' 7' 0 }' new int[] { 6' 11' 11 }' null' new int[] { 1' 1' 0 }' null' false);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a3' "the lucene.solr"' new string[] { "lucene"' "solr"' "lucenesolr" }' new int[] { 4' 11' 4 }' new int[] { 10' 15' 15 }' null' new int[] { 2' 1' 0 }' null' false);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a3' "the lucene.solr"' new string[] { "lucene"' "solr"' "lucenesolr" }' new int[] { 4' 11' 4 }' new int[] { 10' 15' 15 }' null' new int[] { 2' 1' 0 }' null' false);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a3' "the lucene.solr"' new string[] { "lucene"' "solr"' "lucenesolr" }' new int[] { 4' 11' 4 }' new int[] { 10' 15' 15 }' null' new int[] { 2' 1' 0 }' null' false);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a3' "the lucene.solr"' new string[] { "lucene"' "solr"' "lucenesolr" }' new int[] { 4' 11' 4 }' new int[] { 10' 15' 15 }' null' new int[] { 2' 1' 0 }' null' false);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a3' "the lucene.solr"' new string[] { "lucene"' "solr"' "lucenesolr" }' new int[] { 4' 11' 4 }' new int[] { 10' 15' 15 }' null' new int[] { 2' 1' 0 }' null' false);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a3' "the lucene.solr"' new string[] { "lucene"' "solr"' "lucenesolr" }' new int[] { 4' 11' 4 }' new int[] { 10' 15' 15 }' null' new int[] { 2' 1' 0 }' null' false);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a3' "the lucene.solr"' new string[] { "lucene"' "solr"' "lucenesolr" }' new int[] { 4' 11' 4 }' new int[] { 10' 15' 15 }' null' new int[] { 2' 1' 0 }' null' false);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestRandomStrings,The following statement contains a magic number: int numIterations = AtLeast(5);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestRandomStrings,The following statement contains a magic number: WordDelimiterFlags flags = (WordDelimiterFlags)Random.Next(512);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' a' 200' 20' false' false);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' a' 200' 20' false' false);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestLucene47WordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,TestEmptyTerm,The following statement contains a magic number: i < 512
Magic Number,Lucene.Net.Analysis.Miscellaneous,LargePosIncTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,IncrementToken,The following statement contains a magic number: posIncAtt.PositionIncrement = 10;
Magic Number,Lucene.Net.Analysis.Miscellaneous,LargePosIncTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestLucene47WordDelimiterFilter.cs,IncrementToken,The following statement contains a magic number: posIncAtt.PositionIncrement = 10;
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestPerFieldAnalyzerWrapper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestPerFieldAnalyzerWrapper.cs,TestCharFilters,The following statement contains a magic number: AssertAnalyzesTo(a' "ab"' new string[] { "aab" }' new int[] { 0 }' new int[] { 2 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestPerFieldAnalyzerWrapper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestPerFieldAnalyzerWrapper.cs,TestCharFilters,The following statement contains a magic number: AssertAnalyzesTo(p' "ab"' new string[] { "aab" }' new int[] { 0 }' new int[] { 2 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestPrefixAndSuffixAwareTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestPrefixAndSuffixAwareTokenFilter.cs,Test,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "^"' "hello"' "world"' "$" }' new int[] { 0' 0' 6' 11 }' new int[] { 0' 5' 11' 11 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestPrefixAndSuffixAwareTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestPrefixAndSuffixAwareTokenFilter.cs,Test,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "^"' "hello"' "world"' "$" }' new int[] { 0' 0' 6' 11 }' new int[] { 0' 5' 11' 11 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestPrefixAndSuffixAwareTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestPrefixAndSuffixAwareTokenFilter.cs,Test,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "^"' "hello"' "world"' "$" }' new int[] { 0' 0' 6' 11 }' new int[] { 0' 5' 11' 11 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestPrefixAndSuffixAwareTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestPrefixAndSuffixAwareTokenFilter.cs,Test,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "^"' "hello"' "world"' "$" }' new int[] { 0' 0' 6' 11 }' new int[] { 0' 5' 11' 11 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestPrefixAndSuffixAwareTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestPrefixAndSuffixAwareTokenFilter.cs,Test,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "^"' "hello"' "world"' "$" }' new int[] { 0' 0' 6' 11 }' new int[] { 0' 5' 11' 11 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestPrefixAwareTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestPrefixAwareTokenFilter.cs,Test,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "a"' "b" }' new int[] { 0' 1 }' new int[] { 1' 2 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestPrefixAwareTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestPrefixAwareTokenFilter.cs,Test,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "^"' "hello"' "world"' "$" }' new int[] { 0' 0' 6' 11 }' new int[] { 0' 5' 11' 11 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestPrefixAwareTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestPrefixAwareTokenFilter.cs,Test,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "^"' "hello"' "world"' "$" }' new int[] { 0' 0' 6' 11 }' new int[] { 0' 5' 11' 11 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestPrefixAwareTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestPrefixAwareTokenFilter.cs,Test,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "^"' "hello"' "world"' "$" }' new int[] { 0' 0' 6' 11 }' new int[] { 0' 5' 11' 11 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestPrefixAwareTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestPrefixAwareTokenFilter.cs,Test,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "^"' "hello"' "world"' "$" }' new int[] { 0' 0' 6' 11 }' new int[] { 0' 5' 11' 11 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestPrefixAwareTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestPrefixAwareTokenFilter.cs,Test,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "^"' "hello"' "world"' "$" }' new int[] { 0' 0' 6' 11 }' new int[] { 0' 5' 11' 11 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestRemoveDuplicatesTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestRemoveDuplicatesTokenFilter.cs,TestNoDups,The following statement contains a magic number: TestDups("A B B C D E"' Tok(1' "A"' 0' 4)' Tok(1' "B"' 5' 10)' Tok(1' "B"' 11' 15)' Tok(1' "C"' 16' 20)' Tok(0' "D"' 16' 20)' Tok(1' "E"' 21' 25));
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestRemoveDuplicatesTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestRemoveDuplicatesTokenFilter.cs,TestNoDups,The following statement contains a magic number: TestDups("A B B C D E"' Tok(1' "A"' 0' 4)' Tok(1' "B"' 5' 10)' Tok(1' "B"' 11' 15)' Tok(1' "C"' 16' 20)' Tok(0' "D"' 16' 20)' Tok(1' "E"' 21' 25));
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestRemoveDuplicatesTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestRemoveDuplicatesTokenFilter.cs,TestNoDups,The following statement contains a magic number: TestDups("A B B C D E"' Tok(1' "A"' 0' 4)' Tok(1' "B"' 5' 10)' Tok(1' "B"' 11' 15)' Tok(1' "C"' 16' 20)' Tok(0' "D"' 16' 20)' Tok(1' "E"' 21' 25));
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestRemoveDuplicatesTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestRemoveDuplicatesTokenFilter.cs,TestNoDups,The following statement contains a magic number: TestDups("A B B C D E"' Tok(1' "A"' 0' 4)' Tok(1' "B"' 5' 10)' Tok(1' "B"' 11' 15)' Tok(1' "C"' 16' 20)' Tok(0' "D"' 16' 20)' Tok(1' "E"' 21' 25));
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestRemoveDuplicatesTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestRemoveDuplicatesTokenFilter.cs,TestNoDups,The following statement contains a magic number: TestDups("A B B C D E"' Tok(1' "A"' 0' 4)' Tok(1' "B"' 5' 10)' Tok(1' "B"' 11' 15)' Tok(1' "C"' 16' 20)' Tok(0' "D"' 16' 20)' Tok(1' "E"' 21' 25));
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestRemoveDuplicatesTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestRemoveDuplicatesTokenFilter.cs,TestNoDups,The following statement contains a magic number: TestDups("A B B C D E"' Tok(1' "A"' 0' 4)' Tok(1' "B"' 5' 10)' Tok(1' "B"' 11' 15)' Tok(1' "C"' 16' 20)' Tok(0' "D"' 16' 20)' Tok(1' "E"' 21' 25));
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestRemoveDuplicatesTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestRemoveDuplicatesTokenFilter.cs,TestNoDups,The following statement contains a magic number: TestDups("A B B C D E"' Tok(1' "A"' 0' 4)' Tok(1' "B"' 5' 10)' Tok(1' "B"' 11' 15)' Tok(1' "C"' 16' 20)' Tok(0' "D"' 16' 20)' Tok(1' "E"' 21' 25));
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestRemoveDuplicatesTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestRemoveDuplicatesTokenFilter.cs,TestNoDups,The following statement contains a magic number: TestDups("A B B C D E"' Tok(1' "A"' 0' 4)' Tok(1' "B"' 5' 10)' Tok(1' "B"' 11' 15)' Tok(1' "C"' 16' 20)' Tok(0' "D"' 16' 20)' Tok(1' "E"' 21' 25));
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestRemoveDuplicatesTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestRemoveDuplicatesTokenFilter.cs,TestNoDups,The following statement contains a magic number: TestDups("A B B C D E"' Tok(1' "A"' 0' 4)' Tok(1' "B"' 5' 10)' Tok(1' "B"' 11' 15)' Tok(1' "C"' 16' 20)' Tok(0' "D"' 16' 20)' Tok(1' "E"' 21' 25));
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestRemoveDuplicatesTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestRemoveDuplicatesTokenFilter.cs,TestNoDups,The following statement contains a magic number: TestDups("A B B C D E"' Tok(1' "A"' 0' 4)' Tok(1' "B"' 5' 10)' Tok(1' "B"' 11' 15)' Tok(1' "C"' 16' 20)' Tok(0' "D"' 16' 20)' Tok(1' "E"' 21' 25));
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestRemoveDuplicatesTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestRemoveDuplicatesTokenFilter.cs,TestNoDups,The following statement contains a magic number: TestDups("A B B C D E"' Tok(1' "A"' 0' 4)' Tok(1' "B"' 5' 10)' Tok(1' "B"' 11' 15)' Tok(1' "C"' 16' 20)' Tok(0' "D"' 16' 20)' Tok(1' "E"' 21' 25));
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestRemoveDuplicatesTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestRemoveDuplicatesTokenFilter.cs,TestSimpleDups,The following statement contains a magic number: TestDups("A B C D E"' Tok(1' "A"' 0' 4)' Tok(1' "B"' 5' 10)' Tok(0' "B"' 11' 15)' Tok(1' "C"' 16' 20)' Tok(0' "D"' 16' 20)' Tok(1' "E"' 21' 25));
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestRemoveDuplicatesTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestRemoveDuplicatesTokenFilter.cs,TestSimpleDups,The following statement contains a magic number: TestDups("A B C D E"' Tok(1' "A"' 0' 4)' Tok(1' "B"' 5' 10)' Tok(0' "B"' 11' 15)' Tok(1' "C"' 16' 20)' Tok(0' "D"' 16' 20)' Tok(1' "E"' 21' 25));
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestRemoveDuplicatesTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestRemoveDuplicatesTokenFilter.cs,TestSimpleDups,The following statement contains a magic number: TestDups("A B C D E"' Tok(1' "A"' 0' 4)' Tok(1' "B"' 5' 10)' Tok(0' "B"' 11' 15)' Tok(1' "C"' 16' 20)' Tok(0' "D"' 16' 20)' Tok(1' "E"' 21' 25));
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestRemoveDuplicatesTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestRemoveDuplicatesTokenFilter.cs,TestSimpleDups,The following statement contains a magic number: TestDups("A B C D E"' Tok(1' "A"' 0' 4)' Tok(1' "B"' 5' 10)' Tok(0' "B"' 11' 15)' Tok(1' "C"' 16' 20)' Tok(0' "D"' 16' 20)' Tok(1' "E"' 21' 25));
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestRemoveDuplicatesTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestRemoveDuplicatesTokenFilter.cs,TestSimpleDups,The following statement contains a magic number: TestDups("A B C D E"' Tok(1' "A"' 0' 4)' Tok(1' "B"' 5' 10)' Tok(0' "B"' 11' 15)' Tok(1' "C"' 16' 20)' Tok(0' "D"' 16' 20)' Tok(1' "E"' 21' 25));
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestRemoveDuplicatesTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestRemoveDuplicatesTokenFilter.cs,TestSimpleDups,The following statement contains a magic number: TestDups("A B C D E"' Tok(1' "A"' 0' 4)' Tok(1' "B"' 5' 10)' Tok(0' "B"' 11' 15)' Tok(1' "C"' 16' 20)' Tok(0' "D"' 16' 20)' Tok(1' "E"' 21' 25));
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestRemoveDuplicatesTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestRemoveDuplicatesTokenFilter.cs,TestSimpleDups,The following statement contains a magic number: TestDups("A B C D E"' Tok(1' "A"' 0' 4)' Tok(1' "B"' 5' 10)' Tok(0' "B"' 11' 15)' Tok(1' "C"' 16' 20)' Tok(0' "D"' 16' 20)' Tok(1' "E"' 21' 25));
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestRemoveDuplicatesTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestRemoveDuplicatesTokenFilter.cs,TestSimpleDups,The following statement contains a magic number: TestDups("A B C D E"' Tok(1' "A"' 0' 4)' Tok(1' "B"' 5' 10)' Tok(0' "B"' 11' 15)' Tok(1' "C"' 16' 20)' Tok(0' "D"' 16' 20)' Tok(1' "E"' 21' 25));
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestRemoveDuplicatesTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestRemoveDuplicatesTokenFilter.cs,TestSimpleDups,The following statement contains a magic number: TestDups("A B C D E"' Tok(1' "A"' 0' 4)' Tok(1' "B"' 5' 10)' Tok(0' "B"' 11' 15)' Tok(1' "C"' 16' 20)' Tok(0' "D"' 16' 20)' Tok(1' "E"' 21' 25));
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestRemoveDuplicatesTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestRemoveDuplicatesTokenFilter.cs,TestSimpleDups,The following statement contains a magic number: TestDups("A B C D E"' Tok(1' "A"' 0' 4)' Tok(1' "B"' 5' 10)' Tok(0' "B"' 11' 15)' Tok(1' "C"' 16' 20)' Tok(0' "D"' 16' 20)' Tok(1' "E"' 21' 25));
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestRemoveDuplicatesTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestRemoveDuplicatesTokenFilter.cs,TestSimpleDups,The following statement contains a magic number: TestDups("A B C D E"' Tok(1' "A"' 0' 4)' Tok(1' "B"' 5' 10)' Tok(0' "B"' 11' 15)' Tok(1' "C"' 16' 20)' Tok(0' "D"' 16' 20)' Tok(1' "E"' 21' 25));
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestRemoveDuplicatesTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestRemoveDuplicatesTokenFilter.cs,TestRandomStrings,The following statement contains a magic number: int numIters = AtLeast(10);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestRemoveDuplicatesTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestRemoveDuplicatesTokenFilter.cs,TestRandomStrings,The following statement contains a magic number: int numEntries = AtLeast(10);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestRemoveDuplicatesTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestRemoveDuplicatesTokenFilter.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' analyzer' 200);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestRemoveDuplicatesTokenFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestRemoveDuplicatesTokenFilterFactory.cs,TestSimpleDups,The following statement contains a magic number: TestDups("A B C D E"' Tok(1' "A"' 0' 4)' Tok(1' "B"' 5' 10)' Tok(0' "B"' 11' 15)' Tok(1' "C"' 16' 20)' Tok(0' "D"' 16' 20)' Tok(1' "E"' 21' 25));
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestRemoveDuplicatesTokenFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestRemoveDuplicatesTokenFilterFactory.cs,TestSimpleDups,The following statement contains a magic number: TestDups("A B C D E"' Tok(1' "A"' 0' 4)' Tok(1' "B"' 5' 10)' Tok(0' "B"' 11' 15)' Tok(1' "C"' 16' 20)' Tok(0' "D"' 16' 20)' Tok(1' "E"' 21' 25));
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestRemoveDuplicatesTokenFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestRemoveDuplicatesTokenFilterFactory.cs,TestSimpleDups,The following statement contains a magic number: TestDups("A B C D E"' Tok(1' "A"' 0' 4)' Tok(1' "B"' 5' 10)' Tok(0' "B"' 11' 15)' Tok(1' "C"' 16' 20)' Tok(0' "D"' 16' 20)' Tok(1' "E"' 21' 25));
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestRemoveDuplicatesTokenFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestRemoveDuplicatesTokenFilterFactory.cs,TestSimpleDups,The following statement contains a magic number: TestDups("A B C D E"' Tok(1' "A"' 0' 4)' Tok(1' "B"' 5' 10)' Tok(0' "B"' 11' 15)' Tok(1' "C"' 16' 20)' Tok(0' "D"' 16' 20)' Tok(1' "E"' 21' 25));
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestRemoveDuplicatesTokenFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestRemoveDuplicatesTokenFilterFactory.cs,TestSimpleDups,The following statement contains a magic number: TestDups("A B C D E"' Tok(1' "A"' 0' 4)' Tok(1' "B"' 5' 10)' Tok(0' "B"' 11' 15)' Tok(1' "C"' 16' 20)' Tok(0' "D"' 16' 20)' Tok(1' "E"' 21' 25));
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestRemoveDuplicatesTokenFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestRemoveDuplicatesTokenFilterFactory.cs,TestSimpleDups,The following statement contains a magic number: TestDups("A B C D E"' Tok(1' "A"' 0' 4)' Tok(1' "B"' 5' 10)' Tok(0' "B"' 11' 15)' Tok(1' "C"' 16' 20)' Tok(0' "D"' 16' 20)' Tok(1' "E"' 21' 25));
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestRemoveDuplicatesTokenFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestRemoveDuplicatesTokenFilterFactory.cs,TestSimpleDups,The following statement contains a magic number: TestDups("A B C D E"' Tok(1' "A"' 0' 4)' Tok(1' "B"' 5' 10)' Tok(0' "B"' 11' 15)' Tok(1' "C"' 16' 20)' Tok(0' "D"' 16' 20)' Tok(1' "E"' 21' 25));
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestRemoveDuplicatesTokenFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestRemoveDuplicatesTokenFilterFactory.cs,TestSimpleDups,The following statement contains a magic number: TestDups("A B C D E"' Tok(1' "A"' 0' 4)' Tok(1' "B"' 5' 10)' Tok(0' "B"' 11' 15)' Tok(1' "C"' 16' 20)' Tok(0' "D"' 16' 20)' Tok(1' "E"' 21' 25));
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestRemoveDuplicatesTokenFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestRemoveDuplicatesTokenFilterFactory.cs,TestSimpleDups,The following statement contains a magic number: TestDups("A B C D E"' Tok(1' "A"' 0' 4)' Tok(1' "B"' 5' 10)' Tok(0' "B"' 11' 15)' Tok(1' "C"' 16' 20)' Tok(0' "D"' 16' 20)' Tok(1' "E"' 21' 25));
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestRemoveDuplicatesTokenFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestRemoveDuplicatesTokenFilterFactory.cs,TestSimpleDups,The following statement contains a magic number: TestDups("A B C D E"' Tok(1' "A"' 0' 4)' Tok(1' "B"' 5' 10)' Tok(0' "B"' 11' 15)' Tok(1' "C"' 16' 20)' Tok(0' "D"' 16' 20)' Tok(1' "E"' 21' 25));
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestRemoveDuplicatesTokenFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestRemoveDuplicatesTokenFilterFactory.cs,TestSimpleDups,The following statement contains a magic number: TestDups("A B C D E"' Tok(1' "A"' 0' 4)' Tok(1' "B"' 5' 10)' Tok(0' "B"' 11' 15)' Tok(1' "C"' 16' 20)' Tok(0' "D"' 16' 20)' Tok(1' "E"' 21' 25));
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestScandinavianFoldingFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestScandinavianFoldingFilter.cs,TestRandomData,The following statement contains a magic number: CheckRandomData(Random' analyzer' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestScandinavianNormalizationFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestScandinavianNormalizationFilter.cs,TestRandomData,The following statement contains a magic number: CheckRandomData(Random' analyzer' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestSingleTokenTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestSingleTokenTokenFilter.cs,Test,The following statement contains a magic number: token = new Token("hallo"' 10' 20' "someType");
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestSingleTokenTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestSingleTokenTokenFilter.cs,Test,The following statement contains a magic number: token = new Token("hallo"' 10' 20' "someType");
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestStemmerOverrideFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestStemmerOverrideFilter.cs,TestRandomRealisticWhiteSpace,The following statement contains a magic number: int numTerms = AtLeast(50);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestStemmerOverrideFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestStemmerOverrideFilter.cs,TestRandomRealisticKeyword,The following statement contains a magic number: int numTerms = AtLeast(50);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestTrimFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestTrimFilter.cs,TestTrim,The following statement contains a magic number: TokenStream ts = new IterTokenStream(new Token(a' 0' a.Length' 1' 5)' new Token(b' 0' b.Length' 6' 10)' new Token(ccc' 0' ccc.Length' 11' 15)' new Token(whitespace' 0' whitespace.Length' 16' 20)' new Token(empty' 0' empty.Length' 21' 21));
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestTrimFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestTrimFilter.cs,TestTrim,The following statement contains a magic number: TokenStream ts = new IterTokenStream(new Token(a' 0' a.Length' 1' 5)' new Token(b' 0' b.Length' 6' 10)' new Token(ccc' 0' ccc.Length' 11' 15)' new Token(whitespace' 0' whitespace.Length' 16' 20)' new Token(empty' 0' empty.Length' 21' 21));
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestTrimFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestTrimFilter.cs,TestTrim,The following statement contains a magic number: TokenStream ts = new IterTokenStream(new Token(a' 0' a.Length' 1' 5)' new Token(b' 0' b.Length' 6' 10)' new Token(ccc' 0' ccc.Length' 11' 15)' new Token(whitespace' 0' whitespace.Length' 16' 20)' new Token(empty' 0' empty.Length' 21' 21));
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestTrimFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestTrimFilter.cs,TestTrim,The following statement contains a magic number: TokenStream ts = new IterTokenStream(new Token(a' 0' a.Length' 1' 5)' new Token(b' 0' b.Length' 6' 10)' new Token(ccc' 0' ccc.Length' 11' 15)' new Token(whitespace' 0' whitespace.Length' 16' 20)' new Token(empty' 0' empty.Length' 21' 21));
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestTrimFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestTrimFilter.cs,TestTrim,The following statement contains a magic number: TokenStream ts = new IterTokenStream(new Token(a' 0' a.Length' 1' 5)' new Token(b' 0' b.Length' 6' 10)' new Token(ccc' 0' ccc.Length' 11' 15)' new Token(whitespace' 0' whitespace.Length' 16' 20)' new Token(empty' 0' empty.Length' 21' 21));
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestTrimFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestTrimFilter.cs,TestTrim,The following statement contains a magic number: TokenStream ts = new IterTokenStream(new Token(a' 0' a.Length' 1' 5)' new Token(b' 0' b.Length' 6' 10)' new Token(ccc' 0' ccc.Length' 11' 15)' new Token(whitespace' 0' whitespace.Length' 16' 20)' new Token(empty' 0' empty.Length' 21' 21));
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestTrimFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestTrimFilter.cs,TestTrim,The following statement contains a magic number: TokenStream ts = new IterTokenStream(new Token(a' 0' a.Length' 1' 5)' new Token(b' 0' b.Length' 6' 10)' new Token(ccc' 0' ccc.Length' 11' 15)' new Token(whitespace' 0' whitespace.Length' 16' 20)' new Token(empty' 0' empty.Length' 21' 21));
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestTrimFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestTrimFilter.cs,TestTrim,The following statement contains a magic number: TokenStream ts = new IterTokenStream(new Token(a' 0' a.Length' 1' 5)' new Token(b' 0' b.Length' 6' 10)' new Token(ccc' 0' ccc.Length' 11' 15)' new Token(whitespace' 0' whitespace.Length' 16' 20)' new Token(empty' 0' empty.Length' 21' 21));
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestTrimFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestTrimFilter.cs,TestTrim,The following statement contains a magic number: TokenStream ts = new IterTokenStream(new Token(a' 0' a.Length' 1' 5)' new Token(b' 0' b.Length' 6' 10)' new Token(ccc' 0' ccc.Length' 11' 15)' new Token(whitespace' 0' whitespace.Length' 16' 20)' new Token(empty' 0' empty.Length' 21' 21));
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestTrimFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestTrimFilter.cs,TestTrim,The following statement contains a magic number: ts = new IterTokenStream(new Token(a' 0' a.Length' 0' 2)' new Token(b' 0' b.Length' 0' 2)' new Token(ccc' 0' ccc.Length' 0' 3)' new Token(whitespace' 0' whitespace.Length' 0' 3));
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestTrimFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestTrimFilter.cs,TestTrim,The following statement contains a magic number: ts = new IterTokenStream(new Token(a' 0' a.Length' 0' 2)' new Token(b' 0' b.Length' 0' 2)' new Token(ccc' 0' ccc.Length' 0' 3)' new Token(whitespace' 0' whitespace.Length' 0' 3));
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestTrimFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestTrimFilter.cs,TestTrim,The following statement contains a magic number: ts = new IterTokenStream(new Token(a' 0' a.Length' 0' 2)' new Token(b' 0' b.Length' 0' 2)' new Token(ccc' 0' ccc.Length' 0' 3)' new Token(whitespace' 0' whitespace.Length' 0' 3));
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestTrimFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestTrimFilter.cs,TestTrim,The following statement contains a magic number: ts = new IterTokenStream(new Token(a' 0' a.Length' 0' 2)' new Token(b' 0' b.Length' 0' 2)' new Token(ccc' 0' ccc.Length' 0' 3)' new Token(whitespace' 0' whitespace.Length' 0' 3));
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestTrimFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestTrimFilter.cs,TestTrim,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "a"' "b"' "c"' "" }' new int[] { 1' 0' 1' 3 }' new int[] { 2' 1' 2' 3 }' null' new int[] { 1' 1' 1' 1 }' null' null' false);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestTrimFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestTrimFilter.cs,TestTrim,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "a"' "b"' "c"' "" }' new int[] { 1' 0' 1' 3 }' new int[] { 2' 1' 2' 3 }' null' new int[] { 1' 1' 1' 1 }' null' null' false);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestTrimFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestTrimFilter.cs,TestTrim,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "a"' "b"' "c"' "" }' new int[] { 1' 0' 1' 3 }' new int[] { 2' 1' 2' 3 }' null' new int[] { 1' 1' 1' 1 }' null' null' false);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestTrimFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestTrimFilter.cs,TestTrim,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "a"' "b"' "c"' "" }' new int[] { 1' 0' 1' 3 }' new int[] { 2' 1' 2' 3 }' null' new int[] { 1' 1' 1' 1 }' null' null' false);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestTrimFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestTrimFilter.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' a' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestTrimFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestTrimFilter.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' b' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestTruncateTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestTruncateTokenFilter.cs,TestTruncating,The following statement contains a magic number: stream = new TruncateTokenFilter(stream' 5);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestTruncateTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestTruncateTokenFilter.cs,TestNonPositiveLength,The following statement contains a magic number: Assert.Throws<ArgumentOutOfRangeException>(() => {                  new TruncateTokenFilter(new MockTokenizer(new StringReader("length must be a positive number"))' -48);              });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestOffsets,The following statement contains a magic number: WordDelimiterFilter wdf = new WordDelimiterFilter(TEST_VERSION_CURRENT' new SingleTokenTokenStream(new Token("foo-bar"' 5' 12))' WordDelimiterIterator.DEFAULT_WORD_DELIM_TABLE' flags' null);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestOffsets,The following statement contains a magic number: WordDelimiterFilter wdf = new WordDelimiterFilter(TEST_VERSION_CURRENT' new SingleTokenTokenStream(new Token("foo-bar"' 5' 12))' WordDelimiterIterator.DEFAULT_WORD_DELIM_TABLE' flags' null);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestOffsets,The following statement contains a magic number: AssertTokenStreamContents(wdf' new string[] { "foo"' "foobar"' "bar" }' new int[] { 5' 5' 9 }' new int[] { 8' 12' 12 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestOffsets,The following statement contains a magic number: AssertTokenStreamContents(wdf' new string[] { "foo"' "foobar"' "bar" }' new int[] { 5' 5' 9 }' new int[] { 8' 12' 12 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestOffsets,The following statement contains a magic number: AssertTokenStreamContents(wdf' new string[] { "foo"' "foobar"' "bar" }' new int[] { 5' 5' 9 }' new int[] { 8' 12' 12 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestOffsets,The following statement contains a magic number: AssertTokenStreamContents(wdf' new string[] { "foo"' "foobar"' "bar" }' new int[] { 5' 5' 9 }' new int[] { 8' 12' 12 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestOffsets,The following statement contains a magic number: AssertTokenStreamContents(wdf' new string[] { "foo"' "foobar"' "bar" }' new int[] { 5' 5' 9 }' new int[] { 8' 12' 12 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestOffsets,The following statement contains a magic number: AssertTokenStreamContents(wdf' new string[] { "foo"' "foobar"' "bar" }' new int[] { 5' 5' 9 }' new int[] { 8' 12' 12 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestOffsets,The following statement contains a magic number: wdf = new WordDelimiterFilter(TEST_VERSION_CURRENT' new SingleTokenTokenStream(new Token("foo-bar"' 5' 6))' WordDelimiterIterator.DEFAULT_WORD_DELIM_TABLE' flags' null);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestOffsets,The following statement contains a magic number: wdf = new WordDelimiterFilter(TEST_VERSION_CURRENT' new SingleTokenTokenStream(new Token("foo-bar"' 5' 6))' WordDelimiterIterator.DEFAULT_WORD_DELIM_TABLE' flags' null);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestOffsets,The following statement contains a magic number: AssertTokenStreamContents(wdf' new string[] { "foo"' "bar"' "foobar" }' new int[] { 5' 5' 5 }' new int[] { 6' 6' 6 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestOffsets,The following statement contains a magic number: AssertTokenStreamContents(wdf' new string[] { "foo"' "bar"' "foobar" }' new int[] { 5' 5' 5 }' new int[] { 6' 6' 6 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestOffsets,The following statement contains a magic number: AssertTokenStreamContents(wdf' new string[] { "foo"' "bar"' "foobar" }' new int[] { 5' 5' 5 }' new int[] { 6' 6' 6 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestOffsets,The following statement contains a magic number: AssertTokenStreamContents(wdf' new string[] { "foo"' "bar"' "foobar" }' new int[] { 5' 5' 5 }' new int[] { 6' 6' 6 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestOffsets,The following statement contains a magic number: AssertTokenStreamContents(wdf' new string[] { "foo"' "bar"' "foobar" }' new int[] { 5' 5' 5 }' new int[] { 6' 6' 6 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestOffsets,The following statement contains a magic number: AssertTokenStreamContents(wdf' new string[] { "foo"' "bar"' "foobar" }' new int[] { 5' 5' 5 }' new int[] { 6' 6' 6 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestOffsetChange,The following statement contains a magic number: WordDelimiterFilter wdf = new WordDelimiterFilter(TEST_VERSION_CURRENT' new SingleTokenTokenStream(new Token("übelkeit)"' 7' 16))' WordDelimiterIterator.DEFAULT_WORD_DELIM_TABLE' flags' null);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestOffsetChange,The following statement contains a magic number: WordDelimiterFilter wdf = new WordDelimiterFilter(TEST_VERSION_CURRENT' new SingleTokenTokenStream(new Token("übelkeit)"' 7' 16))' WordDelimiterIterator.DEFAULT_WORD_DELIM_TABLE' flags' null);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestOffsetChange,The following statement contains a magic number: AssertTokenStreamContents(wdf' new string[] { "übelkeit" }' new int[] { 7 }' new int[] { 15 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestOffsetChange,The following statement contains a magic number: AssertTokenStreamContents(wdf' new string[] { "übelkeit" }' new int[] { 7 }' new int[] { 15 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestOffsetChange2,The following statement contains a magic number: WordDelimiterFilter wdf = new WordDelimiterFilter(TEST_VERSION_CURRENT' new SingleTokenTokenStream(new Token("(übelkeit"' 7' 17))' WordDelimiterIterator.DEFAULT_WORD_DELIM_TABLE' flags' null);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestOffsetChange2,The following statement contains a magic number: WordDelimiterFilter wdf = new WordDelimiterFilter(TEST_VERSION_CURRENT' new SingleTokenTokenStream(new Token("(übelkeit"' 7' 17))' WordDelimiterIterator.DEFAULT_WORD_DELIM_TABLE' flags' null);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestOffsetChange2,The following statement contains a magic number: AssertTokenStreamContents(wdf' new string[] { "übelkeit" }' new int[] { 8 }' new int[] { 17 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestOffsetChange2,The following statement contains a magic number: AssertTokenStreamContents(wdf' new string[] { "übelkeit" }' new int[] { 8 }' new int[] { 17 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestOffsetChange3,The following statement contains a magic number: WordDelimiterFilter wdf = new WordDelimiterFilter(TEST_VERSION_CURRENT' new SingleTokenTokenStream(new Token("(übelkeit"' 7' 16))' WordDelimiterIterator.DEFAULT_WORD_DELIM_TABLE' flags' null);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestOffsetChange3,The following statement contains a magic number: WordDelimiterFilter wdf = new WordDelimiterFilter(TEST_VERSION_CURRENT' new SingleTokenTokenStream(new Token("(übelkeit"' 7' 16))' WordDelimiterIterator.DEFAULT_WORD_DELIM_TABLE' flags' null);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestOffsetChange3,The following statement contains a magic number: AssertTokenStreamContents(wdf' new string[] { "übelkeit" }' new int[] { 8 }' new int[] { 16 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestOffsetChange3,The following statement contains a magic number: AssertTokenStreamContents(wdf' new string[] { "übelkeit" }' new int[] { 8 }' new int[] { 16 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestOffsetChange4,The following statement contains a magic number: WordDelimiterFilter wdf = new WordDelimiterFilter(TEST_VERSION_CURRENT' new SingleTokenTokenStream(new Token("(foo'bar)"' 7' 16))' WordDelimiterIterator.DEFAULT_WORD_DELIM_TABLE' flags' null);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestOffsetChange4,The following statement contains a magic number: WordDelimiterFilter wdf = new WordDelimiterFilter(TEST_VERSION_CURRENT' new SingleTokenTokenStream(new Token("(foo'bar)"' 7' 16))' WordDelimiterIterator.DEFAULT_WORD_DELIM_TABLE' flags' null);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestOffsetChange4,The following statement contains a magic number: AssertTokenStreamContents(wdf' new string[] { "foo"' "foobar"' "bar" }' new int[] { 8' 8' 12 }' new int[] { 11' 15' 15 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestOffsetChange4,The following statement contains a magic number: AssertTokenStreamContents(wdf' new string[] { "foo"' "foobar"' "bar" }' new int[] { 8' 8' 12 }' new int[] { 11' 15' 15 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestOffsetChange4,The following statement contains a magic number: AssertTokenStreamContents(wdf' new string[] { "foo"' "foobar"' "bar" }' new int[] { 8' 8' 12 }' new int[] { 11' 15' 15 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestOffsetChange4,The following statement contains a magic number: AssertTokenStreamContents(wdf' new string[] { "foo"' "foobar"' "bar" }' new int[] { 8' 8' 12 }' new int[] { 11' 15' 15 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestOffsetChange4,The following statement contains a magic number: AssertTokenStreamContents(wdf' new string[] { "foo"' "foobar"' "bar" }' new int[] { 8' 8' 12 }' new int[] { 11' 15' 15 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestOffsetChange4,The following statement contains a magic number: AssertTokenStreamContents(wdf' new string[] { "foo"' "foobar"' "bar" }' new int[] { 8' 8' 12 }' new int[] { 11' 15' 15 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a' "LUCENE / SOLR"' new string[] { "LUCENE"' "SOLR" }' new int[] { 0' 9 }' new int[] { 6' 13 }' new int[] { 1' 1 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a' "LUCENE / SOLR"' new string[] { "LUCENE"' "SOLR" }' new int[] { 0' 9 }' new int[] { 6' 13 }' new int[] { 1' 1 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a' "LUCENE / SOLR"' new string[] { "LUCENE"' "SOLR" }' new int[] { 0' 9 }' new int[] { 6' 13 }' new int[] { 1' 1 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a' "LUCENE / solR"' new string[] { "LUCENE"' "sol"' "solR"' "R" }' new int[] { 0' 9' 9' 12 }' new int[] { 6' 12' 13' 13 }' new int[] { 1' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a' "LUCENE / solR"' new string[] { "LUCENE"' "sol"' "solR"' "R" }' new int[] { 0' 9' 9' 12 }' new int[] { 6' 12' 13' 13 }' new int[] { 1' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a' "LUCENE / solR"' new string[] { "LUCENE"' "sol"' "solR"' "R" }' new int[] { 0' 9' 9' 12 }' new int[] { 6' 12' 13' 13 }' new int[] { 1' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a' "LUCENE / solR"' new string[] { "LUCENE"' "sol"' "solR"' "R" }' new int[] { 0' 9' 9' 12 }' new int[] { 6' 12' 13' 13 }' new int[] { 1' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a' "LUCENE / solR"' new string[] { "LUCENE"' "sol"' "solR"' "R" }' new int[] { 0' 9' 9' 12 }' new int[] { 6' 12' 13' 13 }' new int[] { 1' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a' "LUCENE / solR"' new string[] { "LUCENE"' "sol"' "solR"' "R" }' new int[] { 0' 9' 9' 12 }' new int[] { 6' 12' 13' 13 }' new int[] { 1' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a' "LUCENE / solR"' new string[] { "LUCENE"' "sol"' "solR"' "R" }' new int[] { 0' 9' 9' 12 }' new int[] { 6' 12' 13' 13 }' new int[] { 1' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a' "LUCENE / NUTCH SOLR"' new string[] { "LUCENE"' "NUTCH"' "SOLR" }' new int[] { 0' 9' 15 }' new int[] { 6' 14' 19 }' new int[] { 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a' "LUCENE / NUTCH SOLR"' new string[] { "LUCENE"' "NUTCH"' "SOLR" }' new int[] { 0' 9' 15 }' new int[] { 6' 14' 19 }' new int[] { 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a' "LUCENE / NUTCH SOLR"' new string[] { "LUCENE"' "NUTCH"' "SOLR" }' new int[] { 0' 9' 15 }' new int[] { 6' 14' 19 }' new int[] { 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a' "LUCENE / NUTCH SOLR"' new string[] { "LUCENE"' "NUTCH"' "SOLR" }' new int[] { 0' 9' 15 }' new int[] { 6' 14' 19 }' new int[] { 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a' "LUCENE / NUTCH SOLR"' new string[] { "LUCENE"' "NUTCH"' "SOLR" }' new int[] { 0' 9' 15 }' new int[] { 6' 14' 19 }' new int[] { 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a2' "LUCENE largegap SOLR"' new string[] { "LUCENE"' "largegap"' "SOLR" }' new int[] { 0' 7' 16 }' new int[] { 6' 15' 20 }' new int[] { 1' 10' 1 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a2' "LUCENE largegap SOLR"' new string[] { "LUCENE"' "largegap"' "SOLR" }' new int[] { 0' 7' 16 }' new int[] { 6' 15' 20 }' new int[] { 1' 10' 1 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a2' "LUCENE largegap SOLR"' new string[] { "LUCENE"' "largegap"' "SOLR" }' new int[] { 0' 7' 16 }' new int[] { 6' 15' 20 }' new int[] { 1' 10' 1 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a2' "LUCENE largegap SOLR"' new string[] { "LUCENE"' "largegap"' "SOLR" }' new int[] { 0' 7' 16 }' new int[] { 6' 15' 20 }' new int[] { 1' 10' 1 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a2' "LUCENE largegap SOLR"' new string[] { "LUCENE"' "largegap"' "SOLR" }' new int[] { 0' 7' 16 }' new int[] { 6' 15' 20 }' new int[] { 1' 10' 1 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a2' "LUCENE largegap SOLR"' new string[] { "LUCENE"' "largegap"' "SOLR" }' new int[] { 0' 7' 16 }' new int[] { 6' 15' 20 }' new int[] { 1' 10' 1 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a2' "LUCENE / SOLR"' new string[] { "LUCENE"' "SOLR" }' new int[] { 0' 9 }' new int[] { 6' 13 }' new int[] { 1' 11 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a2' "LUCENE / SOLR"' new string[] { "LUCENE"' "SOLR" }' new int[] { 0' 9 }' new int[] { 6' 13 }' new int[] { 1' 11 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a2' "LUCENE / SOLR"' new string[] { "LUCENE"' "SOLR" }' new int[] { 0' 9 }' new int[] { 6' 13 }' new int[] { 1' 11 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a2' "LUCENE / SOLR"' new string[] { "LUCENE"' "SOLR" }' new int[] { 0' 9 }' new int[] { 6' 13 }' new int[] { 1' 11 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a2' "LUCENE / solR"' new string[] { "LUCENE"' "sol"' "solR"' "R" }' new int[] { 0' 9' 9' 12 }' new int[] { 6' 12' 13' 13 }' new int[] { 1' 11' 0' 1 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a2' "LUCENE / solR"' new string[] { "LUCENE"' "sol"' "solR"' "R" }' new int[] { 0' 9' 9' 12 }' new int[] { 6' 12' 13' 13 }' new int[] { 1' 11' 0' 1 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a2' "LUCENE / solR"' new string[] { "LUCENE"' "sol"' "solR"' "R" }' new int[] { 0' 9' 9' 12 }' new int[] { 6' 12' 13' 13 }' new int[] { 1' 11' 0' 1 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a2' "LUCENE / solR"' new string[] { "LUCENE"' "sol"' "solR"' "R" }' new int[] { 0' 9' 9' 12 }' new int[] { 6' 12' 13' 13 }' new int[] { 1' 11' 0' 1 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a2' "LUCENE / solR"' new string[] { "LUCENE"' "sol"' "solR"' "R" }' new int[] { 0' 9' 9' 12 }' new int[] { 6' 12' 13' 13 }' new int[] { 1' 11' 0' 1 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a2' "LUCENE / solR"' new string[] { "LUCENE"' "sol"' "solR"' "R" }' new int[] { 0' 9' 9' 12 }' new int[] { 6' 12' 13' 13 }' new int[] { 1' 11' 0' 1 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a2' "LUCENE / solR"' new string[] { "LUCENE"' "sol"' "solR"' "R" }' new int[] { 0' 9' 9' 12 }' new int[] { 6' 12' 13' 13 }' new int[] { 1' 11' 0' 1 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a2' "LUCENE / solR"' new string[] { "LUCENE"' "sol"' "solR"' "R" }' new int[] { 0' 9' 9' 12 }' new int[] { 6' 12' 13' 13 }' new int[] { 1' 11' 0' 1 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a2' "LUCENE / NUTCH SOLR"' new string[] { "LUCENE"' "NUTCH"' "SOLR" }' new int[] { 0' 9' 15 }' new int[] { 6' 14' 19 }' new int[] { 1' 11' 1 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a2' "LUCENE / NUTCH SOLR"' new string[] { "LUCENE"' "NUTCH"' "SOLR" }' new int[] { 0' 9' 15 }' new int[] { 6' 14' 19 }' new int[] { 1' 11' 1 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a2' "LUCENE / NUTCH SOLR"' new string[] { "LUCENE"' "NUTCH"' "SOLR" }' new int[] { 0' 9' 15 }' new int[] { 6' 14' 19 }' new int[] { 1' 11' 1 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a2' "LUCENE / NUTCH SOLR"' new string[] { "LUCENE"' "NUTCH"' "SOLR" }' new int[] { 0' 9' 15 }' new int[] { 6' 14' 19 }' new int[] { 1' 11' 1 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a2' "LUCENE / NUTCH SOLR"' new string[] { "LUCENE"' "NUTCH"' "SOLR" }' new int[] { 0' 9' 15 }' new int[] { 6' 14' 19 }' new int[] { 1' 11' 1 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a2' "LUCENE / NUTCH SOLR"' new string[] { "LUCENE"' "NUTCH"' "SOLR" }' new int[] { 0' 9' 15 }' new int[] { 6' 14' 19 }' new int[] { 1' 11' 1 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a3' "lucene.solr"' new string[] { "lucene"' "lucenesolr"' "solr" }' new int[] { 0' 0' 7 }' new int[] { 6' 11' 11 }' new int[] { 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a3' "lucene.solr"' new string[] { "lucene"' "lucenesolr"' "solr" }' new int[] { 0' 0' 7 }' new int[] { 6' 11' 11 }' new int[] { 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a3' "lucene.solr"' new string[] { "lucene"' "lucenesolr"' "solr" }' new int[] { 0' 0' 7 }' new int[] { 6' 11' 11 }' new int[] { 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a3' "lucene.solr"' new string[] { "lucene"' "lucenesolr"' "solr" }' new int[] { 0' 0' 7 }' new int[] { 6' 11' 11 }' new int[] { 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a3' "the lucene.solr"' new string[] { "lucene"' "lucenesolr"' "solr" }' new int[] { 4' 4' 11 }' new int[] { 10' 15' 15 }' new int[] { 2' 0' 1 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a3' "the lucene.solr"' new string[] { "lucene"' "lucenesolr"' "solr" }' new int[] { 4' 4' 11 }' new int[] { 10' 15' 15 }' new int[] { 2' 0' 1 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a3' "the lucene.solr"' new string[] { "lucene"' "lucenesolr"' "solr" }' new int[] { 4' 4' 11 }' new int[] { 10' 15' 15 }' new int[] { 2' 0' 1 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a3' "the lucene.solr"' new string[] { "lucene"' "lucenesolr"' "solr" }' new int[] { 4' 4' 11 }' new int[] { 10' 15' 15 }' new int[] { 2' 0' 1 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a3' "the lucene.solr"' new string[] { "lucene"' "lucenesolr"' "solr" }' new int[] { 4' 4' 11 }' new int[] { 10' 15' 15 }' new int[] { 2' 0' 1 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a3' "the lucene.solr"' new string[] { "lucene"' "lucenesolr"' "solr" }' new int[] { 4' 4' 11 }' new int[] { 10' 15' 15 }' new int[] { 2' 0' 1 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertAnalyzesTo(a3' "the lucene.solr"' new string[] { "lucene"' "lucenesolr"' "solr" }' new int[] { 4' 4' 11 }' new int[] { 10' 15' 15 }' new int[] { 2' 0' 1 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestLotsOfConcatenating,The following statement contains a magic number: AssertAnalyzesTo(a' "abc-def-123-456"' new string[] { "abc"' "abcdef"' "abcdef123456"' "def"' "123"' "123456"' "456" }' new int[] { 0' 0' 0' 4' 8' 8' 12 }' new int[] { 3' 7' 15' 7' 11' 15' 15 }' new int[] { 1' 0' 0' 1' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestLotsOfConcatenating,The following statement contains a magic number: AssertAnalyzesTo(a' "abc-def-123-456"' new string[] { "abc"' "abcdef"' "abcdef123456"' "def"' "123"' "123456"' "456" }' new int[] { 0' 0' 0' 4' 8' 8' 12 }' new int[] { 3' 7' 15' 7' 11' 15' 15 }' new int[] { 1' 0' 0' 1' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestLotsOfConcatenating,The following statement contains a magic number: AssertAnalyzesTo(a' "abc-def-123-456"' new string[] { "abc"' "abcdef"' "abcdef123456"' "def"' "123"' "123456"' "456" }' new int[] { 0' 0' 0' 4' 8' 8' 12 }' new int[] { 3' 7' 15' 7' 11' 15' 15 }' new int[] { 1' 0' 0' 1' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestLotsOfConcatenating,The following statement contains a magic number: AssertAnalyzesTo(a' "abc-def-123-456"' new string[] { "abc"' "abcdef"' "abcdef123456"' "def"' "123"' "123456"' "456" }' new int[] { 0' 0' 0' 4' 8' 8' 12 }' new int[] { 3' 7' 15' 7' 11' 15' 15 }' new int[] { 1' 0' 0' 1' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestLotsOfConcatenating,The following statement contains a magic number: AssertAnalyzesTo(a' "abc-def-123-456"' new string[] { "abc"' "abcdef"' "abcdef123456"' "def"' "123"' "123456"' "456" }' new int[] { 0' 0' 0' 4' 8' 8' 12 }' new int[] { 3' 7' 15' 7' 11' 15' 15 }' new int[] { 1' 0' 0' 1' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestLotsOfConcatenating,The following statement contains a magic number: AssertAnalyzesTo(a' "abc-def-123-456"' new string[] { "abc"' "abcdef"' "abcdef123456"' "def"' "123"' "123456"' "456" }' new int[] { 0' 0' 0' 4' 8' 8' 12 }' new int[] { 3' 7' 15' 7' 11' 15' 15 }' new int[] { 1' 0' 0' 1' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestLotsOfConcatenating,The following statement contains a magic number: AssertAnalyzesTo(a' "abc-def-123-456"' new string[] { "abc"' "abcdef"' "abcdef123456"' "def"' "123"' "123456"' "456" }' new int[] { 0' 0' 0' 4' 8' 8' 12 }' new int[] { 3' 7' 15' 7' 11' 15' 15 }' new int[] { 1' 0' 0' 1' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestLotsOfConcatenating,The following statement contains a magic number: AssertAnalyzesTo(a' "abc-def-123-456"' new string[] { "abc"' "abcdef"' "abcdef123456"' "def"' "123"' "123456"' "456" }' new int[] { 0' 0' 0' 4' 8' 8' 12 }' new int[] { 3' 7' 15' 7' 11' 15' 15 }' new int[] { 1' 0' 0' 1' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestLotsOfConcatenating,The following statement contains a magic number: AssertAnalyzesTo(a' "abc-def-123-456"' new string[] { "abc"' "abcdef"' "abcdef123456"' "def"' "123"' "123456"' "456" }' new int[] { 0' 0' 0' 4' 8' 8' 12 }' new int[] { 3' 7' 15' 7' 11' 15' 15 }' new int[] { 1' 0' 0' 1' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestLotsOfConcatenating,The following statement contains a magic number: AssertAnalyzesTo(a' "abc-def-123-456"' new string[] { "abc"' "abcdef"' "abcdef123456"' "def"' "123"' "123456"' "456" }' new int[] { 0' 0' 0' 4' 8' 8' 12 }' new int[] { 3' 7' 15' 7' 11' 15' 15 }' new int[] { 1' 0' 0' 1' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestLotsOfConcatenating,The following statement contains a magic number: AssertAnalyzesTo(a' "abc-def-123-456"' new string[] { "abc"' "abcdef"' "abcdef123456"' "def"' "123"' "123456"' "456" }' new int[] { 0' 0' 0' 4' 8' 8' 12 }' new int[] { 3' 7' 15' 7' 11' 15' 15 }' new int[] { 1' 0' 0' 1' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestLotsOfConcatenating2,The following statement contains a magic number: AssertAnalyzesTo(a' "abc-def-123-456"' new string[] { "abc-def-123-456"' "abc"' "abcdef"' "abcdef123456"' "def"' "123"' "123456"' "456" }' new int[] { 0' 0' 0' 0' 4' 8' 8' 12 }' new int[] { 15' 3' 7' 15' 7' 11' 15' 15 }' new int[] { 1' 0' 0' 0' 1' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestLotsOfConcatenating2,The following statement contains a magic number: AssertAnalyzesTo(a' "abc-def-123-456"' new string[] { "abc-def-123-456"' "abc"' "abcdef"' "abcdef123456"' "def"' "123"' "123456"' "456" }' new int[] { 0' 0' 0' 0' 4' 8' 8' 12 }' new int[] { 15' 3' 7' 15' 7' 11' 15' 15 }' new int[] { 1' 0' 0' 0' 1' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestLotsOfConcatenating2,The following statement contains a magic number: AssertAnalyzesTo(a' "abc-def-123-456"' new string[] { "abc-def-123-456"' "abc"' "abcdef"' "abcdef123456"' "def"' "123"' "123456"' "456" }' new int[] { 0' 0' 0' 0' 4' 8' 8' 12 }' new int[] { 15' 3' 7' 15' 7' 11' 15' 15 }' new int[] { 1' 0' 0' 0' 1' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestLotsOfConcatenating2,The following statement contains a magic number: AssertAnalyzesTo(a' "abc-def-123-456"' new string[] { "abc-def-123-456"' "abc"' "abcdef"' "abcdef123456"' "def"' "123"' "123456"' "456" }' new int[] { 0' 0' 0' 0' 4' 8' 8' 12 }' new int[] { 15' 3' 7' 15' 7' 11' 15' 15 }' new int[] { 1' 0' 0' 0' 1' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestLotsOfConcatenating2,The following statement contains a magic number: AssertAnalyzesTo(a' "abc-def-123-456"' new string[] { "abc-def-123-456"' "abc"' "abcdef"' "abcdef123456"' "def"' "123"' "123456"' "456" }' new int[] { 0' 0' 0' 0' 4' 8' 8' 12 }' new int[] { 15' 3' 7' 15' 7' 11' 15' 15 }' new int[] { 1' 0' 0' 0' 1' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestLotsOfConcatenating2,The following statement contains a magic number: AssertAnalyzesTo(a' "abc-def-123-456"' new string[] { "abc-def-123-456"' "abc"' "abcdef"' "abcdef123456"' "def"' "123"' "123456"' "456" }' new int[] { 0' 0' 0' 0' 4' 8' 8' 12 }' new int[] { 15' 3' 7' 15' 7' 11' 15' 15 }' new int[] { 1' 0' 0' 0' 1' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestLotsOfConcatenating2,The following statement contains a magic number: AssertAnalyzesTo(a' "abc-def-123-456"' new string[] { "abc-def-123-456"' "abc"' "abcdef"' "abcdef123456"' "def"' "123"' "123456"' "456" }' new int[] { 0' 0' 0' 0' 4' 8' 8' 12 }' new int[] { 15' 3' 7' 15' 7' 11' 15' 15 }' new int[] { 1' 0' 0' 0' 1' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestLotsOfConcatenating2,The following statement contains a magic number: AssertAnalyzesTo(a' "abc-def-123-456"' new string[] { "abc-def-123-456"' "abc"' "abcdef"' "abcdef123456"' "def"' "123"' "123456"' "456" }' new int[] { 0' 0' 0' 0' 4' 8' 8' 12 }' new int[] { 15' 3' 7' 15' 7' 11' 15' 15 }' new int[] { 1' 0' 0' 0' 1' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestLotsOfConcatenating2,The following statement contains a magic number: AssertAnalyzesTo(a' "abc-def-123-456"' new string[] { "abc-def-123-456"' "abc"' "abcdef"' "abcdef123456"' "def"' "123"' "123456"' "456" }' new int[] { 0' 0' 0' 0' 4' 8' 8' 12 }' new int[] { 15' 3' 7' 15' 7' 11' 15' 15 }' new int[] { 1' 0' 0' 0' 1' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestLotsOfConcatenating2,The following statement contains a magic number: AssertAnalyzesTo(a' "abc-def-123-456"' new string[] { "abc-def-123-456"' "abc"' "abcdef"' "abcdef123456"' "def"' "123"' "123456"' "456" }' new int[] { 0' 0' 0' 0' 4' 8' 8' 12 }' new int[] { 15' 3' 7' 15' 7' 11' 15' 15 }' new int[] { 1' 0' 0' 0' 1' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestLotsOfConcatenating2,The following statement contains a magic number: AssertAnalyzesTo(a' "abc-def-123-456"' new string[] { "abc-def-123-456"' "abc"' "abcdef"' "abcdef123456"' "def"' "123"' "123456"' "456" }' new int[] { 0' 0' 0' 0' 4' 8' 8' 12 }' new int[] { 15' 3' 7' 15' 7' 11' 15' 15 }' new int[] { 1' 0' 0' 0' 1' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestLotsOfConcatenating2,The following statement contains a magic number: AssertAnalyzesTo(a' "abc-def-123-456"' new string[] { "abc-def-123-456"' "abc"' "abcdef"' "abcdef123456"' "def"' "123"' "123456"' "456" }' new int[] { 0' 0' 0' 0' 4' 8' 8' 12 }' new int[] { 15' 3' 7' 15' 7' 11' 15' 15 }' new int[] { 1' 0' 0' 0' 1' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestRandomStrings,The following statement contains a magic number: int numIterations = AtLeast(5);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestRandomStrings,The following statement contains a magic number: WordDelimiterFlags flags = (WordDelimiterFlags)Random.Next(512);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' a' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestRandomHugeStrings,The following statement contains a magic number: int numIterations = AtLeast(5);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestRandomHugeStrings,The following statement contains a magic number: WordDelimiterFlags flags = (WordDelimiterFlags)Random.Next(512);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestRandomHugeStrings,The following statement contains a magic number: CheckRandomData(Random' a' 100 * RANDOM_MULTIPLIER' 8192);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestRandomHugeStrings,The following statement contains a magic number: CheckRandomData(Random' a' 100 * RANDOM_MULTIPLIER' 8192);
Magic Number,Lucene.Net.Analysis.Miscellaneous,TestWordDelimiterFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Miscellaneous\TestWordDelimiterFilter.cs,TestEmptyTerm,The following statement contains a magic number: i < 512
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestInvalidInput2,The following statement contains a magic number: new EdgeNGramTokenFilter(TEST_VERSION_CURRENT' input' EdgeNGramTokenFilter.Side.FRONT' 2' 1);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestInvalidInput3,The following statement contains a magic number: new EdgeNGramTokenFilter(TEST_VERSION_CURRENT' input' EdgeNGramTokenFilter.Side.FRONT' -1' 2);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestFrontUnigram,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "a" }' new int[] { 0 }' new int[] { 5 });
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestBackUnigram,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "e" }' new int[] { 4 }' new int[] { 5 });
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestBackUnigram,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "e" }' new int[] { 4 }' new int[] { 5 });
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestOversizedNgrams,The following statement contains a magic number: EdgeNGramTokenFilter tokenizer = new EdgeNGramTokenFilter(TEST_VERSION_CURRENT' input' EdgeNGramTokenFilter.Side.FRONT' 6' 6);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestOversizedNgrams,The following statement contains a magic number: EdgeNGramTokenFilter tokenizer = new EdgeNGramTokenFilter(TEST_VERSION_CURRENT' input' EdgeNGramTokenFilter.Side.FRONT' 6' 6);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestFrontRangeOfNgrams,The following statement contains a magic number: EdgeNGramTokenFilter tokenizer = new EdgeNGramTokenFilter(TEST_VERSION_CURRENT' input' EdgeNGramTokenFilter.Side.FRONT' 1' 3);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestFrontRangeOfNgrams,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "a"' "ab"' "abc" }' new int[] { 0' 0' 0 }' new int[] { 5' 5' 5 });
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestFrontRangeOfNgrams,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "a"' "ab"' "abc" }' new int[] { 0' 0' 0 }' new int[] { 5' 5' 5 });
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestFrontRangeOfNgrams,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "a"' "ab"' "abc" }' new int[] { 0' 0' 0 }' new int[] { 5' 5' 5 });
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestBackRangeOfNgrams,The following statement contains a magic number: EdgeNGramTokenFilter tokenizer = new EdgeNGramTokenFilter(LuceneVersion.LUCENE_43' input' EdgeNGramTokenFilter.Side.BACK' 1' 3);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestBackRangeOfNgrams,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "e"' "de"' "cde" }' new int[] { 4' 3' 2 }' new int[] { 5' 5' 5 }' null' null' null' null' false);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestBackRangeOfNgrams,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "e"' "de"' "cde" }' new int[] { 4' 3' 2 }' new int[] { 5' 5' 5 }' null' null' null' null' false);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestBackRangeOfNgrams,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "e"' "de"' "cde" }' new int[] { 4' 3' 2 }' new int[] { 5' 5' 5 }' null' null' null' null' false);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestBackRangeOfNgrams,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "e"' "de"' "cde" }' new int[] { 4' 3' 2 }' new int[] { 5' 5' 5 }' null' null' null' null' false);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestBackRangeOfNgrams,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "e"' "de"' "cde" }' new int[] { 4' 3' 2 }' new int[] { 5' 5' 5 }' null' null' null' null' false);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestBackRangeOfNgrams,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "e"' "de"' "cde" }' new int[] { 4' 3' 2 }' new int[] { 5' 5' 5 }' null' null' null' null' false);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestFilterPositions,The following statement contains a magic number: EdgeNGramTokenFilter tokenizer = new EdgeNGramTokenFilter(TEST_VERSION_CURRENT' ts' EdgeNGramTokenFilter.Side.FRONT' 1' 3);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestFilterPositions,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "a"' "ab"' "abc"' "v"' "vw"' "vwx" }' new int[] { 0' 0' 0' 6' 6' 6 }' new int[] { 5' 5' 5' 11' 11' 11 }' null' new int[] { 1' 0' 0' 1' 0' 0 }' null' null' false);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestFilterPositions,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "a"' "ab"' "abc"' "v"' "vw"' "vwx" }' new int[] { 0' 0' 0' 6' 6' 6 }' new int[] { 5' 5' 5' 11' 11' 11 }' null' new int[] { 1' 0' 0' 1' 0' 0 }' null' null' false);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestFilterPositions,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "a"' "ab"' "abc"' "v"' "vw"' "vwx" }' new int[] { 0' 0' 0' 6' 6' 6 }' new int[] { 5' 5' 5' 11' 11' 11 }' null' new int[] { 1' 0' 0' 1' 0' 0 }' null' null' false);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestFilterPositions,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "a"' "ab"' "abc"' "v"' "vw"' "vwx" }' new int[] { 0' 0' 0' 6' 6' 6 }' new int[] { 5' 5' 5' 11' 11' 11 }' null' new int[] { 1' 0' 0' 1' 0' 0 }' null' null' false);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestFilterPositions,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "a"' "ab"' "abc"' "v"' "vw"' "vwx" }' new int[] { 0' 0' 0' 6' 6' 6 }' new int[] { 5' 5' 5' 11' 11' 11 }' null' new int[] { 1' 0' 0' 1' 0' 0 }' null' null' false);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestFilterPositions,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "a"' "ab"' "abc"' "v"' "vw"' "vwx" }' new int[] { 0' 0' 0' 6' 6' 6 }' new int[] { 5' 5' 5' 11' 11' 11 }' null' new int[] { 1' 0' 0' 1' 0' 0 }' null' null' false);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestFilterPositions,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "a"' "ab"' "abc"' "v"' "vw"' "vwx" }' new int[] { 0' 0' 0' 6' 6' 6 }' new int[] { 5' 5' 5' 11' 11' 11 }' null' new int[] { 1' 0' 0' 1' 0' 0 }' null' null' false);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestFilterPositions,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "a"' "ab"' "abc"' "v"' "vw"' "vwx" }' new int[] { 0' 0' 0' 6' 6' 6 }' new int[] { 5' 5' 5' 11' 11' 11 }' null' new int[] { 1' 0' 0' 1' 0' 0 }' null' null' false);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestFilterPositions,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "a"' "ab"' "abc"' "v"' "vw"' "vwx" }' new int[] { 0' 0' 0' 6' 6' 6 }' new int[] { 5' 5' 5' 11' 11' 11 }' null' new int[] { 1' 0' 0' 1' 0' 0 }' null' null' false);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestFirstTokenPositionIncrement,The following statement contains a magic number: EdgeNGramTokenFilter filter = new EdgeNGramTokenFilter(TEST_VERSION_CURRENT' ts' EdgeNGramTokenFilter.Side.FRONT' 2' 3);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestFirstTokenPositionIncrement,The following statement contains a magic number: EdgeNGramTokenFilter filter = new EdgeNGramTokenFilter(TEST_VERSION_CURRENT' ts' EdgeNGramTokenFilter.Side.FRONT' 2' 3);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestFirstTokenPositionIncrement,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "ab"' "abc" }' new int[] { 2' 2 }' new int[] { 5' 5 }' new int[] { 1' 0 });
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestFirstTokenPositionIncrement,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "ab"' "abc" }' new int[] { 2' 2 }' new int[] { 5' 5 }' new int[] { 1' 0 });
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestFirstTokenPositionIncrement,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "ab"' "abc" }' new int[] { 2' 2 }' new int[] { 5' 5 }' new int[] { 1' 0 });
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestFirstTokenPositionIncrement,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "ab"' "abc" }' new int[] { 2' 2 }' new int[] { 5' 5 }' new int[] { 1' 0 });
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestSmallTokenInStream,The following statement contains a magic number: EdgeNGramTokenFilter tokenizer = new EdgeNGramTokenFilter(TEST_VERSION_CURRENT' input' EdgeNGramTokenFilter.Side.FRONT' 3' 3);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestSmallTokenInStream,The following statement contains a magic number: EdgeNGramTokenFilter tokenizer = new EdgeNGramTokenFilter(TEST_VERSION_CURRENT' input' EdgeNGramTokenFilter.Side.FRONT' 3' 3);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestSmallTokenInStream,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "abc"' "fgh" }' new int[] { 0' 7 }' new int[] { 3' 10 });
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestSmallTokenInStream,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "abc"' "fgh" }' new int[] { 0' 7 }' new int[] { 3' 10 });
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestSmallTokenInStream,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "abc"' "fgh" }' new int[] { 0' 7 }' new int[] { 3' 10 });
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestReset,The following statement contains a magic number: EdgeNGramTokenFilter filter = new EdgeNGramTokenFilter(TEST_VERSION_CURRENT' tokenizer' EdgeNGramTokenFilter.Side.FRONT' 1' 3);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestReset,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "a"' "ab"' "abc" }' new int[] { 0' 0' 0 }' new int[] { 5' 5' 5 });
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestReset,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "a"' "ab"' "abc" }' new int[] { 0' 0' 0 }' new int[] { 5' 5' 5 });
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestReset,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "a"' "ab"' "abc" }' new int[] { 0' 0' 0 }' new int[] { 5' 5' 5 });
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestReset,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "a"' "ab"' "abc" }' new int[] { 0' 0' 0 }' new int[] { 5' 5' 5 });
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestReset,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "a"' "ab"' "abc" }' new int[] { 0' 0' 0 }' new int[] { 5' 5' 5 });
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestReset,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "a"' "ab"' "abc" }' new int[] { 0' 0' 0 }' new int[] { 5' 5' 5 });
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestInvalidOffsets,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "mosfellsbær"' new string[] { "mo"' "mos"' "mosf"' "mosfe"' "mosfel"' "mosfell"' "mosfells"' "mosfellsb"' "mosfellsba"' "mosfellsbae"' "mosfellsbaer" }' new int[] { 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' new int[] { 11' 11' 11' 11' 11' 11' 11' 11' 11' 11' 11 });
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestInvalidOffsets,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "mosfellsbær"' new string[] { "mo"' "mos"' "mosf"' "mosfe"' "mosfel"' "mosfell"' "mosfells"' "mosfellsb"' "mosfellsba"' "mosfellsbae"' "mosfellsbaer" }' new int[] { 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' new int[] { 11' 11' 11' 11' 11' 11' 11' 11' 11' 11' 11 });
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestInvalidOffsets,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "mosfellsbær"' new string[] { "mo"' "mos"' "mosf"' "mosfe"' "mosfel"' "mosfell"' "mosfells"' "mosfellsb"' "mosfellsba"' "mosfellsbae"' "mosfellsbaer" }' new int[] { 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' new int[] { 11' 11' 11' 11' 11' 11' 11' 11' 11' 11' 11 });
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestInvalidOffsets,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "mosfellsbær"' new string[] { "mo"' "mos"' "mosf"' "mosfe"' "mosfel"' "mosfell"' "mosfells"' "mosfellsb"' "mosfellsba"' "mosfellsbae"' "mosfellsbaer" }' new int[] { 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' new int[] { 11' 11' 11' 11' 11' 11' 11' 11' 11' 11' 11 });
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestInvalidOffsets,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "mosfellsbær"' new string[] { "mo"' "mos"' "mosf"' "mosfe"' "mosfel"' "mosfell"' "mosfells"' "mosfellsb"' "mosfellsba"' "mosfellsbae"' "mosfellsbaer" }' new int[] { 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' new int[] { 11' 11' 11' 11' 11' 11' 11' 11' 11' 11' 11 });
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestInvalidOffsets,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "mosfellsbær"' new string[] { "mo"' "mos"' "mosf"' "mosfe"' "mosfel"' "mosfell"' "mosfells"' "mosfellsb"' "mosfellsba"' "mosfellsbae"' "mosfellsbaer" }' new int[] { 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' new int[] { 11' 11' 11' 11' 11' 11' 11' 11' 11' 11' 11 });
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestInvalidOffsets,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "mosfellsbær"' new string[] { "mo"' "mos"' "mosf"' "mosfe"' "mosfel"' "mosfell"' "mosfells"' "mosfellsb"' "mosfellsba"' "mosfellsbae"' "mosfellsbaer" }' new int[] { 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' new int[] { 11' 11' 11' 11' 11' 11' 11' 11' 11' 11' 11 });
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestInvalidOffsets,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "mosfellsbær"' new string[] { "mo"' "mos"' "mosf"' "mosfe"' "mosfel"' "mosfell"' "mosfells"' "mosfellsb"' "mosfellsba"' "mosfellsbae"' "mosfellsbaer" }' new int[] { 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' new int[] { 11' 11' 11' 11' 11' 11' 11' 11' 11' 11' 11 });
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestInvalidOffsets,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "mosfellsbær"' new string[] { "mo"' "mos"' "mosf"' "mosfe"' "mosfel"' "mosfell"' "mosfells"' "mosfellsb"' "mosfellsba"' "mosfellsbae"' "mosfellsbaer" }' new int[] { 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' new int[] { 11' 11' 11' 11' 11' 11' 11' 11' 11' 11' 11 });
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestInvalidOffsets,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "mosfellsbær"' new string[] { "mo"' "mos"' "mosf"' "mosfe"' "mosfel"' "mosfell"' "mosfells"' "mosfellsb"' "mosfellsba"' "mosfellsbae"' "mosfellsbaer" }' new int[] { 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' new int[] { 11' 11' 11' 11' 11' 11' 11' 11' 11' 11' 11 });
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestInvalidOffsets,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "mosfellsbær"' new string[] { "mo"' "mos"' "mosf"' "mosfe"' "mosfel"' "mosfell"' "mosfells"' "mosfellsb"' "mosfellsba"' "mosfellsbae"' "mosfellsbaer" }' new int[] { 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' new int[] { 11' 11' 11' 11' 11' 11' 11' 11' 11' 11' 11 });
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestRandomStrings,The following statement contains a magic number: int min = TestUtil.NextInt32(Random' 2' 10);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestRandomStrings,The following statement contains a magic number: int min = TestUtil.NextInt32(Random' 2' 10);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestRandomStrings,The following statement contains a magic number: int max = TestUtil.NextInt32(Random' min' 20);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' a' 100 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestRandomStrings,The following statement contains a magic number: i < 10
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' b' 1000 * RANDOM_MULTIPLIER' 20' false' false);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' b' 1000 * RANDOM_MULTIPLIER' 20' false' false);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestGraphs,The following statement contains a magic number: tk = new EdgeNGramTokenFilter(TEST_VERSION_CURRENT' tk' 7' 10);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestGraphs,The following statement contains a magic number: tk = new EdgeNGramTokenFilter(TEST_VERSION_CURRENT' tk' 7' 10);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestGraphs,The following statement contains a magic number: AssertTokenStreamContents(tk' new string[] { "efgh ij"' "ij klmn"' "ij klmno"' "klmno p" }' new int[] { 6' 11' 11' 14 }' new int[] { 13' 19' 19' 21 }' new int[] { 3' 1' 0' 1 }' new int[] { 2' 2' 2' 2 }' 23);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestGraphs,The following statement contains a magic number: AssertTokenStreamContents(tk' new string[] { "efgh ij"' "ij klmn"' "ij klmno"' "klmno p" }' new int[] { 6' 11' 11' 14 }' new int[] { 13' 19' 19' 21 }' new int[] { 3' 1' 0' 1 }' new int[] { 2' 2' 2' 2 }' 23);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestGraphs,The following statement contains a magic number: AssertTokenStreamContents(tk' new string[] { "efgh ij"' "ij klmn"' "ij klmno"' "klmno p" }' new int[] { 6' 11' 11' 14 }' new int[] { 13' 19' 19' 21 }' new int[] { 3' 1' 0' 1 }' new int[] { 2' 2' 2' 2 }' 23);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestGraphs,The following statement contains a magic number: AssertTokenStreamContents(tk' new string[] { "efgh ij"' "ij klmn"' "ij klmno"' "klmno p" }' new int[] { 6' 11' 11' 14 }' new int[] { 13' 19' 19' 21 }' new int[] { 3' 1' 0' 1 }' new int[] { 2' 2' 2' 2 }' 23);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestGraphs,The following statement contains a magic number: AssertTokenStreamContents(tk' new string[] { "efgh ij"' "ij klmn"' "ij klmno"' "klmno p" }' new int[] { 6' 11' 11' 14 }' new int[] { 13' 19' 19' 21 }' new int[] { 3' 1' 0' 1 }' new int[] { 2' 2' 2' 2 }' 23);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestGraphs,The following statement contains a magic number: AssertTokenStreamContents(tk' new string[] { "efgh ij"' "ij klmn"' "ij klmno"' "klmno p" }' new int[] { 6' 11' 11' 14 }' new int[] { 13' 19' 19' 21 }' new int[] { 3' 1' 0' 1 }' new int[] { 2' 2' 2' 2 }' 23);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestGraphs,The following statement contains a magic number: AssertTokenStreamContents(tk' new string[] { "efgh ij"' "ij klmn"' "ij klmno"' "klmno p" }' new int[] { 6' 11' 11' 14 }' new int[] { 13' 19' 19' 21 }' new int[] { 3' 1' 0' 1 }' new int[] { 2' 2' 2' 2 }' 23);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestGraphs,The following statement contains a magic number: AssertTokenStreamContents(tk' new string[] { "efgh ij"' "ij klmn"' "ij klmno"' "klmno p" }' new int[] { 6' 11' 11' 14 }' new int[] { 13' 19' 19' 21 }' new int[] { 3' 1' 0' 1 }' new int[] { 2' 2' 2' 2 }' 23);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestGraphs,The following statement contains a magic number: AssertTokenStreamContents(tk' new string[] { "efgh ij"' "ij klmn"' "ij klmno"' "klmno p" }' new int[] { 6' 11' 11' 14 }' new int[] { 13' 19' 19' 21 }' new int[] { 3' 1' 0' 1 }' new int[] { 2' 2' 2' 2 }' 23);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestGraphs,The following statement contains a magic number: AssertTokenStreamContents(tk' new string[] { "efgh ij"' "ij klmn"' "ij klmno"' "klmno p" }' new int[] { 6' 11' 11' 14 }' new int[] { 13' 19' 19' 21 }' new int[] { 3' 1' 0' 1 }' new int[] { 2' 2' 2' 2 }' 23);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestGraphs,The following statement contains a magic number: AssertTokenStreamContents(tk' new string[] { "efgh ij"' "ij klmn"' "ij klmno"' "klmno p" }' new int[] { 6' 11' 11' 14 }' new int[] { 13' 19' 19' 21 }' new int[] { 3' 1' 0' 1 }' new int[] { 2' 2' 2' 2 }' 23);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestGraphs,The following statement contains a magic number: AssertTokenStreamContents(tk' new string[] { "efgh ij"' "ij klmn"' "ij klmno"' "klmno p" }' new int[] { 6' 11' 11' 14 }' new int[] { 13' 19' 19' 21 }' new int[] { 3' 1' 0' 1 }' new int[] { 2' 2' 2' 2 }' 23);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestGraphs,The following statement contains a magic number: AssertTokenStreamContents(tk' new string[] { "efgh ij"' "ij klmn"' "ij klmno"' "klmno p" }' new int[] { 6' 11' 11' 14 }' new int[] { 13' 19' 19' 21 }' new int[] { 3' 1' 0' 1 }' new int[] { 2' 2' 2' 2 }' 23);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestGraphs,The following statement contains a magic number: AssertTokenStreamContents(tk' new string[] { "efgh ij"' "ij klmn"' "ij klmno"' "klmno p" }' new int[] { 6' 11' 11' 14 }' new int[] { 13' 19' 19' 21 }' new int[] { 3' 1' 0' 1 }' new int[] { 2' 2' 2' 2 }' 23);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestSupplementaryCharacters,The following statement contains a magic number: string s = TestUtil.RandomUnicodeString(Random' 10);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestSupplementaryCharacters,The following statement contains a magic number: int minGram = TestUtil.NextInt32(Random' 1' 3);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,TestSupplementaryCharacters,The following statement contains a magic number: int maxGram = TestUtil.NextInt32(Random' minGram' 10);
Magic Number,Lucene.Net.Analysis.NGram,AnalyzerAnonymousInnerClassHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,CreateComponents,The following statement contains a magic number: filters = new EdgeNGramTokenFilter(LuceneVersion.LUCENE_43' filters' EdgeNGramTokenFilter.Side.FRONT' 2' 15);
Magic Number,Lucene.Net.Analysis.NGram,AnalyzerAnonymousInnerClassHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,CreateComponents,The following statement contains a magic number: filters = new EdgeNGramTokenFilter(LuceneVersion.LUCENE_43' filters' EdgeNGramTokenFilter.Side.FRONT' 2' 15);
Magic Number,Lucene.Net.Analysis.NGram,AnalyzerAnonymousInnerClassHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,CreateComponents,The following statement contains a magic number: filters = new NGramTokenFilter(TEST_VERSION_CURRENT' filters' 2' 2);
Magic Number,Lucene.Net.Analysis.NGram,AnalyzerAnonymousInnerClassHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,CreateComponents,The following statement contains a magic number: filters = new NGramTokenFilter(TEST_VERSION_CURRENT' filters' 2' 2);
Magic Number,Lucene.Net.Analysis.NGram,AnalyzerAnonymousInnerClassHelper2,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,CreateComponents,The following statement contains a magic number: Tokenizer tokenizer = new Lucene43EdgeNGramTokenizer(Version.LUCENE_43' reader' Lucene43EdgeNGramTokenizer.Side.BACK' 2' 4);
Magic Number,Lucene.Net.Analysis.NGram,AnalyzerAnonymousInnerClassHelper2,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,CreateComponents,The following statement contains a magic number: Tokenizer tokenizer = new Lucene43EdgeNGramTokenizer(Version.LUCENE_43' reader' Lucene43EdgeNGramTokenizer.Side.BACK' 2' 4);
Magic Number,Lucene.Net.Analysis.NGram,AnalyzerAnonymousInnerClassHelper3,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,CreateComponents,The following statement contains a magic number: return new TokenStreamComponents(tokenizer' new EdgeNGramTokenFilter(LuceneVersion.LUCENE_43' tokenizer' EdgeNGramTokenFilter.Side.BACK' 2' 4));
Magic Number,Lucene.Net.Analysis.NGram,AnalyzerAnonymousInnerClassHelper3,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,CreateComponents,The following statement contains a magic number: return new TokenStreamComponents(tokenizer' new EdgeNGramTokenFilter(LuceneVersion.LUCENE_43' tokenizer' EdgeNGramTokenFilter.Side.BACK' 2' 4));
Magic Number,Lucene.Net.Analysis.NGram,AnalyzerAnonymousInnerClassHelper3,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,CreateComponents,The following statement contains a magic number: return new TokenStreamComponents(tokenizer' new NGramTokenFilter(TEST_VERSION_CURRENT' tokenizer' 2' 15));
Magic Number,Lucene.Net.Analysis.NGram,AnalyzerAnonymousInnerClassHelper3,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,CreateComponents,The following statement contains a magic number: return new TokenStreamComponents(tokenizer' new NGramTokenFilter(TEST_VERSION_CURRENT' tokenizer' 2' 15));
Magic Number,Lucene.Net.Analysis.NGram,AnalyzerAnonymousInnerClassHelper4,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,CreateComponents,The following statement contains a magic number: return new TokenStreamComponents(tokenizer' new EdgeNGramTokenFilter(TEST_VERSION_CURRENT' tokenizer' EdgeNGramTokenFilter.Side.FRONT' 2' 15));
Magic Number,Lucene.Net.Analysis.NGram,AnalyzerAnonymousInnerClassHelper4,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,CreateComponents,The following statement contains a magic number: return new TokenStreamComponents(tokenizer' new EdgeNGramTokenFilter(TEST_VERSION_CURRENT' tokenizer' EdgeNGramTokenFilter.Side.FRONT' 2' 15));
Magic Number,Lucene.Net.Analysis.NGram,AnalyzerAnonymousInnerClassHelper5,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,CreateComponents,The following statement contains a magic number: return new TokenStreamComponents(tokenizer' new EdgeNGramTokenFilter(LuceneVersion.LUCENE_43' tokenizer' EdgeNGramTokenFilter.Side.BACK' 2' 15));
Magic Number,Lucene.Net.Analysis.NGram,AnalyzerAnonymousInnerClassHelper5,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenFilterTest.cs,CreateComponents,The following statement contains a magic number: return new TokenStreamComponents(tokenizer' new EdgeNGramTokenFilter(LuceneVersion.LUCENE_43' tokenizer' EdgeNGramTokenFilter.Side.BACK' 2' 15));
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestInvalidInput2,The following statement contains a magic number: new EdgeNGramTokenizer(TEST_VERSION_CURRENT' input' 2' 1);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestInvalidInput3,The following statement contains a magic number: new EdgeNGramTokenizer(TEST_VERSION_CURRENT' input' -1' 2);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestFrontUnigram,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "a" }' new int[] { 0 }' new int[] { 1 }' 5);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestBackUnigram,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "e" }' new int[] { 4 }' new int[] { 5 }' 5);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestBackUnigram,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "e" }' new int[] { 4 }' new int[] { 5 }' 5);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestBackUnigram,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "e" }' new int[] { 4 }' new int[] { 5 }' 5);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestOversizedNgrams,The following statement contains a magic number: EdgeNGramTokenizer tokenizer = new EdgeNGramTokenizer(TEST_VERSION_CURRENT' input' 6' 6);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestOversizedNgrams,The following statement contains a magic number: EdgeNGramTokenizer tokenizer = new EdgeNGramTokenizer(TEST_VERSION_CURRENT' input' 6' 6);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestOversizedNgrams,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[0]' new int[0]' new int[0]' 5);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestFrontRangeOfNgrams,The following statement contains a magic number: EdgeNGramTokenizer tokenizer = new EdgeNGramTokenizer(TEST_VERSION_CURRENT' input' 1' 3);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestFrontRangeOfNgrams,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "a"' "ab"' "abc" }' new int[] { 0' 0' 0 }' new int[] { 1' 2' 3 }' 5);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestFrontRangeOfNgrams,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "a"' "ab"' "abc" }' new int[] { 0' 0' 0 }' new int[] { 1' 2' 3 }' 5);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestFrontRangeOfNgrams,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "a"' "ab"' "abc" }' new int[] { 0' 0' 0 }' new int[] { 1' 2' 3 }' 5);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestBackRangeOfNgrams,The following statement contains a magic number: Tokenizer tokenizer = new Lucene43EdgeNGramTokenizer(Version.LUCENE_43' input' Lucene43EdgeNGramTokenizer.Side.BACK' 1' 3);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestBackRangeOfNgrams,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "e"' "de"' "cde" }' new int[] { 4' 3' 2 }' new int[] { 5' 5' 5 }' null' null' null' 5' false);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestBackRangeOfNgrams,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "e"' "de"' "cde" }' new int[] { 4' 3' 2 }' new int[] { 5' 5' 5 }' null' null' null' 5' false);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestBackRangeOfNgrams,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "e"' "de"' "cde" }' new int[] { 4' 3' 2 }' new int[] { 5' 5' 5 }' null' null' null' 5' false);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestBackRangeOfNgrams,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "e"' "de"' "cde" }' new int[] { 4' 3' 2 }' new int[] { 5' 5' 5 }' null' null' null' 5' false);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestBackRangeOfNgrams,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "e"' "de"' "cde" }' new int[] { 4' 3' 2 }' new int[] { 5' 5' 5 }' null' null' null' 5' false);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestBackRangeOfNgrams,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "e"' "de"' "cde" }' new int[] { 4' 3' 2 }' new int[] { 5' 5' 5 }' null' null' null' 5' false);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestBackRangeOfNgrams,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "e"' "de"' "cde" }' new int[] { 4' 3' 2 }' new int[] { 5' 5' 5 }' null' null' null' 5' false);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestReset,The following statement contains a magic number: EdgeNGramTokenizer tokenizer = new EdgeNGramTokenizer(TEST_VERSION_CURRENT' input' 1' 3);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestReset,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "a"' "ab"' "abc" }' new int[] { 0' 0' 0 }' new int[] { 1' 2' 3 }' 5);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestReset,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "a"' "ab"' "abc" }' new int[] { 0' 0' 0 }' new int[] { 1' 2' 3 }' 5);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestReset,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "a"' "ab"' "abc" }' new int[] { 0' 0' 0 }' new int[] { 1' 2' 3 }' 5);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestReset,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "a"' "ab"' "abc" }' new int[] { 0' 0' 0 }' new int[] { 1' 2' 3 }' 5);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestReset,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "a"' "ab"' "abc" }' new int[] { 0' 0' 0 }' new int[] { 1' 2' 3 }' 5);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestReset,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "a"' "ab"' "abc" }' new int[] { 0' 0' 0 }' new int[] { 1' 2' 3 }' 5);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestRandomStrings,The following statement contains a magic number: int min = TestUtil.NextInt32(Random' 2' 10);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestRandomStrings,The following statement contains a magic number: int min = TestUtil.NextInt32(Random' 2' 10);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestRandomStrings,The following statement contains a magic number: int max = TestUtil.NextInt32(Random' min' 20);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' a' 100 * RANDOM_MULTIPLIER' 20);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' a' 100 * RANDOM_MULTIPLIER' 20);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' a' 10 * RANDOM_MULTIPLIER' 8192);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' a' 10 * RANDOM_MULTIPLIER' 8192);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestRandomStrings,The following statement contains a magic number: i < 10
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' b' 1000 * RANDOM_MULTIPLIER' 20' false' false);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' b' 1000 * RANDOM_MULTIPLIER' 20' false' false);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' b' 100 * RANDOM_MULTIPLIER' 8192' false' false);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' b' 100 * RANDOM_MULTIPLIER' 8192' false' false);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestTokenizerPositions,The following statement contains a magic number: Tokenizer tokenizer = new Lucene43EdgeNGramTokenizer(Version.LUCENE_43' input' Lucene43EdgeNGramTokenizer.Side.FRONT' 1' 3);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestTokenizerPositions,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "a"' "ab"' "abc" }' new int[] { 0' 0' 0 }' new int[] { 1' 2' 3 }' null' new int[] { 1' 0' 0 }' null' null' false);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestTokenizerPositions,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "a"' "ab"' "abc" }' new int[] { 0' 0' 0 }' new int[] { 1' 2' 3 }' null' new int[] { 1' 0' 0 }' null' null' false);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestTokenizerPositions,The following statement contains a magic number: tokenizer = new EdgeNGramTokenizer(TEST_VERSION_CURRENT' new StringReader("abcde")' 1' 3);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestTokenizerPositions,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "a"' "ab"' "abc" }' new int[] { 0' 0' 0 }' new int[] { 1' 2' 3 }' null' new int[] { 1' 1' 1 }' null' null' false);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestTokenizerPositions,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "a"' "ab"' "abc" }' new int[] { 0' 0' 0 }' new int[] { 1' 2' 3 }' null' new int[] { 1' 1' 1 }' null' null' false);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestLargeInput,The following statement contains a magic number: int minGram = TestUtil.NextInt32(Random' 1' 100);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestLargeInput,The following statement contains a magic number: int maxGram = TestUtil.NextInt32(Random' minGram' 100);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestLargeInput,The following statement contains a magic number: TestNGrams(minGram' maxGram' TestUtil.NextInt32(Random' 3 * 1024' 4 * 1024)' "");
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestLargeInput,The following statement contains a magic number: TestNGrams(minGram' maxGram' TestUtil.NextInt32(Random' 3 * 1024' 4 * 1024)' "");
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestLargeInput,The following statement contains a magic number: TestNGrams(minGram' maxGram' TestUtil.NextInt32(Random' 3 * 1024' 4 * 1024)' "");
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestLargeInput,The following statement contains a magic number: TestNGrams(minGram' maxGram' TestUtil.NextInt32(Random' 3 * 1024' 4 * 1024)' "");
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestLargeMaxGram,The following statement contains a magic number: int minGram = TestUtil.NextInt32(Random' 1290' 1300);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestLargeMaxGram,The following statement contains a magic number: int minGram = TestUtil.NextInt32(Random' 1290' 1300);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestLargeMaxGram,The following statement contains a magic number: int maxGram = TestUtil.NextInt32(Random' minGram' 1300);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestLargeMaxGram,The following statement contains a magic number: TestNGrams(minGram' maxGram' TestUtil.NextInt32(Random' 3 * 1024' 4 * 1024)' "");
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestLargeMaxGram,The following statement contains a magic number: TestNGrams(minGram' maxGram' TestUtil.NextInt32(Random' 3 * 1024' 4 * 1024)' "");
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestLargeMaxGram,The following statement contains a magic number: TestNGrams(minGram' maxGram' TestUtil.NextInt32(Random' 3 * 1024' 4 * 1024)' "");
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestLargeMaxGram,The following statement contains a magic number: TestNGrams(minGram' maxGram' TestUtil.NextInt32(Random' 3 * 1024' 4 * 1024)' "");
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestPreTokenization,The following statement contains a magic number: int minGram = TestUtil.NextInt32(Random' 1' 100);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestPreTokenization,The following statement contains a magic number: int maxGram = TestUtil.NextInt32(Random' minGram' 100);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestPreTokenization,The following statement contains a magic number: TestNGrams(minGram' maxGram' TestUtil.NextInt32(Random' 0' 4 * 1024)' "a");
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestPreTokenization,The following statement contains a magic number: TestNGrams(minGram' maxGram' TestUtil.NextInt32(Random' 0' 4 * 1024)' "a");
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestHeavyPreTokenization,The following statement contains a magic number: int minGram = TestUtil.NextInt32(Random' 1' 100);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestHeavyPreTokenization,The following statement contains a magic number: int maxGram = TestUtil.NextInt32(Random' minGram' 100);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestHeavyPreTokenization,The following statement contains a magic number: TestNGrams(minGram' maxGram' TestUtil.NextInt32(Random' 0' 4 * 1024)' "abcdef");
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestHeavyPreTokenization,The following statement contains a magic number: TestNGrams(minGram' maxGram' TestUtil.NextInt32(Random' 0' 4 * 1024)' "abcdef");
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestFewTokenChars,The following statement contains a magic number: char[] chrs = new char[TestUtil.NextInt32(Random' 4000' 5000)];
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestFewTokenChars,The following statement contains a magic number: char[] chrs = new char[TestUtil.NextInt32(Random' 4000' 5000)];
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestFewTokenChars,The following statement contains a magic number: Random.NextDouble() < 0.1
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestFewTokenChars,The following statement contains a magic number: int minGram = TestUtil.NextInt32(Random' 1' 2);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestFewTokenChars,The following statement contains a magic number: int maxGram = TestUtil.NextInt32(Random' minGram' 2);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestFullUTF8Range,The following statement contains a magic number: int minGram = TestUtil.NextInt32(Random' 1' 100);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestFullUTF8Range,The following statement contains a magic number: int maxGram = TestUtil.NextInt32(Random' minGram' 100);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestFullUTF8Range,The following statement contains a magic number: string s = TestUtil.RandomUnicodeString(Random' 4 * 1024);
Magic Number,Lucene.Net.Analysis.NGram,EdgeNGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\EdgeNGramTokenizerTest.cs,TestFullUTF8Range,The following statement contains a magic number: string s = TestUtil.RandomUnicodeString(Random' 4 * 1024);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestInvalidInput,The following statement contains a magic number: new NGramTokenFilter(TEST_VERSION_CURRENT' input' 2' 1);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestUnigrams,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "a"' "b"' "c"' "d"' "e" }' new int[] { 0' 0' 0' 0' 0 }' new int[] { 5' 5' 5' 5' 5 }' new int[] { 1' 0' 0' 0' 0 });
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestUnigrams,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "a"' "b"' "c"' "d"' "e" }' new int[] { 0' 0' 0' 0' 0 }' new int[] { 5' 5' 5' 5' 5 }' new int[] { 1' 0' 0' 0' 0 });
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestUnigrams,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "a"' "b"' "c"' "d"' "e" }' new int[] { 0' 0' 0' 0' 0 }' new int[] { 5' 5' 5' 5' 5 }' new int[] { 1' 0' 0' 0' 0 });
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestUnigrams,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "a"' "b"' "c"' "d"' "e" }' new int[] { 0' 0' 0' 0' 0 }' new int[] { 5' 5' 5' 5' 5 }' new int[] { 1' 0' 0' 0' 0 });
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestUnigrams,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "a"' "b"' "c"' "d"' "e" }' new int[] { 0' 0' 0' 0' 0 }' new int[] { 5' 5' 5' 5' 5 }' new int[] { 1' 0' 0' 0' 0 });
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestBigrams,The following statement contains a magic number: NGramTokenFilter filter = new NGramTokenFilter(TEST_VERSION_CURRENT' input' 2' 2);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestBigrams,The following statement contains a magic number: NGramTokenFilter filter = new NGramTokenFilter(TEST_VERSION_CURRENT' input' 2' 2);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestBigrams,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "ab"' "bc"' "cd"' "de" }' new int[] { 0' 0' 0' 0 }' new int[] { 5' 5' 5' 5 }' new int[] { 1' 0' 0' 0 });
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestBigrams,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "ab"' "bc"' "cd"' "de" }' new int[] { 0' 0' 0' 0 }' new int[] { 5' 5' 5' 5 }' new int[] { 1' 0' 0' 0 });
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestBigrams,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "ab"' "bc"' "cd"' "de" }' new int[] { 0' 0' 0' 0 }' new int[] { 5' 5' 5' 5 }' new int[] { 1' 0' 0' 0 });
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestBigrams,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "ab"' "bc"' "cd"' "de" }' new int[] { 0' 0' 0' 0 }' new int[] { 5' 5' 5' 5 }' new int[] { 1' 0' 0' 0 });
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestNgrams,The following statement contains a magic number: NGramTokenFilter filter = new NGramTokenFilter(TEST_VERSION_CURRENT' input' 1' 3);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestNgrams,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "a"' "ab"' "abc"' "b"' "bc"' "bcd"' "c"' "cd"' "cde"' "d"' "de"' "e" }' new int[] { 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' new int[] { 5' 5' 5' 5' 5' 5' 5' 5' 5' 5' 5' 5 }' null' new int[] { 1' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' null' null' false);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestNgrams,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "a"' "ab"' "abc"' "b"' "bc"' "bcd"' "c"' "cd"' "cde"' "d"' "de"' "e" }' new int[] { 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' new int[] { 5' 5' 5' 5' 5' 5' 5' 5' 5' 5' 5' 5 }' null' new int[] { 1' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' null' null' false);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestNgrams,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "a"' "ab"' "abc"' "b"' "bc"' "bcd"' "c"' "cd"' "cde"' "d"' "de"' "e" }' new int[] { 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' new int[] { 5' 5' 5' 5' 5' 5' 5' 5' 5' 5' 5' 5 }' null' new int[] { 1' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' null' null' false);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestNgrams,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "a"' "ab"' "abc"' "b"' "bc"' "bcd"' "c"' "cd"' "cde"' "d"' "de"' "e" }' new int[] { 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' new int[] { 5' 5' 5' 5' 5' 5' 5' 5' 5' 5' 5' 5 }' null' new int[] { 1' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' null' null' false);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestNgrams,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "a"' "ab"' "abc"' "b"' "bc"' "bcd"' "c"' "cd"' "cde"' "d"' "de"' "e" }' new int[] { 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' new int[] { 5' 5' 5' 5' 5' 5' 5' 5' 5' 5' 5' 5 }' null' new int[] { 1' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' null' null' false);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestNgrams,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "a"' "ab"' "abc"' "b"' "bc"' "bcd"' "c"' "cd"' "cde"' "d"' "de"' "e" }' new int[] { 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' new int[] { 5' 5' 5' 5' 5' 5' 5' 5' 5' 5' 5' 5 }' null' new int[] { 1' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' null' null' false);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestNgrams,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "a"' "ab"' "abc"' "b"' "bc"' "bcd"' "c"' "cd"' "cde"' "d"' "de"' "e" }' new int[] { 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' new int[] { 5' 5' 5' 5' 5' 5' 5' 5' 5' 5' 5' 5 }' null' new int[] { 1' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' null' null' false);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestNgrams,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "a"' "ab"' "abc"' "b"' "bc"' "bcd"' "c"' "cd"' "cde"' "d"' "de"' "e" }' new int[] { 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' new int[] { 5' 5' 5' 5' 5' 5' 5' 5' 5' 5' 5' 5 }' null' new int[] { 1' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' null' null' false);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestNgrams,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "a"' "ab"' "abc"' "b"' "bc"' "bcd"' "c"' "cd"' "cde"' "d"' "de"' "e" }' new int[] { 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' new int[] { 5' 5' 5' 5' 5' 5' 5' 5' 5' 5' 5' 5 }' null' new int[] { 1' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' null' null' false);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestNgrams,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "a"' "ab"' "abc"' "b"' "bc"' "bcd"' "c"' "cd"' "cde"' "d"' "de"' "e" }' new int[] { 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' new int[] { 5' 5' 5' 5' 5' 5' 5' 5' 5' 5' 5' 5 }' null' new int[] { 1' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' null' null' false);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestNgrams,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "a"' "ab"' "abc"' "b"' "bc"' "bcd"' "c"' "cd"' "cde"' "d"' "de"' "e" }' new int[] { 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' new int[] { 5' 5' 5' 5' 5' 5' 5' 5' 5' 5' 5' 5 }' null' new int[] { 1' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' null' null' false);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestNgrams,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "a"' "ab"' "abc"' "b"' "bc"' "bcd"' "c"' "cd"' "cde"' "d"' "de"' "e" }' new int[] { 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' new int[] { 5' 5' 5' 5' 5' 5' 5' 5' 5' 5' 5' 5 }' null' new int[] { 1' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' null' null' false);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestNgramsNoIncrement,The following statement contains a magic number: NGramTokenFilter filter = new NGramTokenFilter(TEST_VERSION_CURRENT' input' 1' 3);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestNgramsNoIncrement,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "a"' "ab"' "abc"' "b"' "bc"' "bcd"' "c"' "cd"' "cde"' "d"' "de"' "e" }' new int[] { 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' new int[] { 5' 5' 5' 5' 5' 5' 5' 5' 5' 5' 5' 5 }' null' new int[] { 1' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' null' null' false);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestNgramsNoIncrement,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "a"' "ab"' "abc"' "b"' "bc"' "bcd"' "c"' "cd"' "cde"' "d"' "de"' "e" }' new int[] { 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' new int[] { 5' 5' 5' 5' 5' 5' 5' 5' 5' 5' 5' 5 }' null' new int[] { 1' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' null' null' false);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestNgramsNoIncrement,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "a"' "ab"' "abc"' "b"' "bc"' "bcd"' "c"' "cd"' "cde"' "d"' "de"' "e" }' new int[] { 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' new int[] { 5' 5' 5' 5' 5' 5' 5' 5' 5' 5' 5' 5 }' null' new int[] { 1' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' null' null' false);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestNgramsNoIncrement,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "a"' "ab"' "abc"' "b"' "bc"' "bcd"' "c"' "cd"' "cde"' "d"' "de"' "e" }' new int[] { 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' new int[] { 5' 5' 5' 5' 5' 5' 5' 5' 5' 5' 5' 5 }' null' new int[] { 1' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' null' null' false);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestNgramsNoIncrement,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "a"' "ab"' "abc"' "b"' "bc"' "bcd"' "c"' "cd"' "cde"' "d"' "de"' "e" }' new int[] { 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' new int[] { 5' 5' 5' 5' 5' 5' 5' 5' 5' 5' 5' 5 }' null' new int[] { 1' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' null' null' false);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestNgramsNoIncrement,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "a"' "ab"' "abc"' "b"' "bc"' "bcd"' "c"' "cd"' "cde"' "d"' "de"' "e" }' new int[] { 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' new int[] { 5' 5' 5' 5' 5' 5' 5' 5' 5' 5' 5' 5 }' null' new int[] { 1' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' null' null' false);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestNgramsNoIncrement,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "a"' "ab"' "abc"' "b"' "bc"' "bcd"' "c"' "cd"' "cde"' "d"' "de"' "e" }' new int[] { 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' new int[] { 5' 5' 5' 5' 5' 5' 5' 5' 5' 5' 5' 5 }' null' new int[] { 1' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' null' null' false);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestNgramsNoIncrement,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "a"' "ab"' "abc"' "b"' "bc"' "bcd"' "c"' "cd"' "cde"' "d"' "de"' "e" }' new int[] { 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' new int[] { 5' 5' 5' 5' 5' 5' 5' 5' 5' 5' 5' 5 }' null' new int[] { 1' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' null' null' false);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestNgramsNoIncrement,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "a"' "ab"' "abc"' "b"' "bc"' "bcd"' "c"' "cd"' "cde"' "d"' "de"' "e" }' new int[] { 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' new int[] { 5' 5' 5' 5' 5' 5' 5' 5' 5' 5' 5' 5 }' null' new int[] { 1' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' null' null' false);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestNgramsNoIncrement,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "a"' "ab"' "abc"' "b"' "bc"' "bcd"' "c"' "cd"' "cde"' "d"' "de"' "e" }' new int[] { 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' new int[] { 5' 5' 5' 5' 5' 5' 5' 5' 5' 5' 5' 5 }' null' new int[] { 1' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' null' null' false);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestNgramsNoIncrement,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "a"' "ab"' "abc"' "b"' "bc"' "bcd"' "c"' "cd"' "cde"' "d"' "de"' "e" }' new int[] { 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' new int[] { 5' 5' 5' 5' 5' 5' 5' 5' 5' 5' 5' 5 }' null' new int[] { 1' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' null' null' false);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestNgramsNoIncrement,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "a"' "ab"' "abc"' "b"' "bc"' "bcd"' "c"' "cd"' "cde"' "d"' "de"' "e" }' new int[] { 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' new int[] { 5' 5' 5' 5' 5' 5' 5' 5' 5' 5' 5' 5 }' null' new int[] { 1' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' null' null' false);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestOversizedNgrams,The following statement contains a magic number: NGramTokenFilter filter = new NGramTokenFilter(TEST_VERSION_CURRENT' input' 6' 7);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestOversizedNgrams,The following statement contains a magic number: NGramTokenFilter filter = new NGramTokenFilter(TEST_VERSION_CURRENT' input' 6' 7);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestSmallTokenInStream,The following statement contains a magic number: NGramTokenFilter filter = new NGramTokenFilter(TEST_VERSION_CURRENT' input' 3' 3);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestSmallTokenInStream,The following statement contains a magic number: NGramTokenFilter filter = new NGramTokenFilter(TEST_VERSION_CURRENT' input' 3' 3);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestSmallTokenInStream,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "abc"' "fgh" }' new int[] { 0' 7 }' new int[] { 3' 10 }' new int[] { 1' 2 });
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestSmallTokenInStream,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "abc"' "fgh" }' new int[] { 0' 7 }' new int[] { 3' 10 }' new int[] { 1' 2 });
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestSmallTokenInStream,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "abc"' "fgh" }' new int[] { 0' 7 }' new int[] { 3' 10 }' new int[] { 1' 2 });
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestSmallTokenInStream,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "abc"' "fgh" }' new int[] { 0' 7 }' new int[] { 3' 10 }' new int[] { 1' 2 });
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestReset,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "a"' "b"' "c"' "d"' "e" }' new int[] { 0' 0' 0' 0' 0 }' new int[] { 5' 5' 5' 5' 5 }' new int[] { 1' 0' 0' 0' 0 });
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestReset,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "a"' "b"' "c"' "d"' "e" }' new int[] { 0' 0' 0' 0' 0 }' new int[] { 5' 5' 5' 5' 5 }' new int[] { 1' 0' 0' 0' 0 });
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestReset,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "a"' "b"' "c"' "d"' "e" }' new int[] { 0' 0' 0' 0' 0 }' new int[] { 5' 5' 5' 5' 5 }' new int[] { 1' 0' 0' 0' 0 });
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestReset,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "a"' "b"' "c"' "d"' "e" }' new int[] { 0' 0' 0' 0' 0 }' new int[] { 5' 5' 5' 5' 5 }' new int[] { 1' 0' 0' 0' 0 });
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestReset,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "a"' "b"' "c"' "d"' "e" }' new int[] { 0' 0' 0' 0' 0 }' new int[] { 5' 5' 5' 5' 5 }' new int[] { 1' 0' 0' 0' 0 });
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestReset,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "a"' "b"' "c"' "d"' "e" }' new int[] { 0' 0' 0' 0' 0 }' new int[] { 5' 5' 5' 5' 5 }' new int[] { 1' 0' 0' 0' 0 });
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestReset,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "a"' "b"' "c"' "d"' "e" }' new int[] { 0' 0' 0' 0' 0 }' new int[] { 5' 5' 5' 5' 5 }' new int[] { 1' 0' 0' 0' 0 });
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestReset,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "a"' "b"' "c"' "d"' "e" }' new int[] { 0' 0' 0' 0' 0 }' new int[] { 5' 5' 5' 5' 5 }' new int[] { 1' 0' 0' 0' 0 });
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestReset,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "a"' "b"' "c"' "d"' "e" }' new int[] { 0' 0' 0' 0' 0 }' new int[] { 5' 5' 5' 5' 5 }' new int[] { 1' 0' 0' 0' 0 });
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestReset,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "a"' "b"' "c"' "d"' "e" }' new int[] { 0' 0' 0' 0' 0 }' new int[] { 5' 5' 5' 5' 5 }' new int[] { 1' 0' 0' 0' 0 });
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestInvalidOffsets,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "mosfellsbær"' new string[] { "mo"' "os"' "sf"' "fe"' "el"' "ll"' "ls"' "sb"' "ba"' "ae"' "er" }' new int[] { 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' new int[] { 11' 11' 11' 11' 11' 11' 11' 11' 11' 11' 11 }' new int[] { 1' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 });
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestInvalidOffsets,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "mosfellsbær"' new string[] { "mo"' "os"' "sf"' "fe"' "el"' "ll"' "ls"' "sb"' "ba"' "ae"' "er" }' new int[] { 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' new int[] { 11' 11' 11' 11' 11' 11' 11' 11' 11' 11' 11 }' new int[] { 1' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 });
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestInvalidOffsets,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "mosfellsbær"' new string[] { "mo"' "os"' "sf"' "fe"' "el"' "ll"' "ls"' "sb"' "ba"' "ae"' "er" }' new int[] { 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' new int[] { 11' 11' 11' 11' 11' 11' 11' 11' 11' 11' 11 }' new int[] { 1' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 });
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestInvalidOffsets,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "mosfellsbær"' new string[] { "mo"' "os"' "sf"' "fe"' "el"' "ll"' "ls"' "sb"' "ba"' "ae"' "er" }' new int[] { 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' new int[] { 11' 11' 11' 11' 11' 11' 11' 11' 11' 11' 11 }' new int[] { 1' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 });
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestInvalidOffsets,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "mosfellsbær"' new string[] { "mo"' "os"' "sf"' "fe"' "el"' "ll"' "ls"' "sb"' "ba"' "ae"' "er" }' new int[] { 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' new int[] { 11' 11' 11' 11' 11' 11' 11' 11' 11' 11' 11 }' new int[] { 1' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 });
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestInvalidOffsets,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "mosfellsbær"' new string[] { "mo"' "os"' "sf"' "fe"' "el"' "ll"' "ls"' "sb"' "ba"' "ae"' "er" }' new int[] { 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' new int[] { 11' 11' 11' 11' 11' 11' 11' 11' 11' 11' 11 }' new int[] { 1' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 });
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestInvalidOffsets,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "mosfellsbær"' new string[] { "mo"' "os"' "sf"' "fe"' "el"' "ll"' "ls"' "sb"' "ba"' "ae"' "er" }' new int[] { 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' new int[] { 11' 11' 11' 11' 11' 11' 11' 11' 11' 11' 11 }' new int[] { 1' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 });
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestInvalidOffsets,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "mosfellsbær"' new string[] { "mo"' "os"' "sf"' "fe"' "el"' "ll"' "ls"' "sb"' "ba"' "ae"' "er" }' new int[] { 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' new int[] { 11' 11' 11' 11' 11' 11' 11' 11' 11' 11' 11 }' new int[] { 1' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 });
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestInvalidOffsets,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "mosfellsbær"' new string[] { "mo"' "os"' "sf"' "fe"' "el"' "ll"' "ls"' "sb"' "ba"' "ae"' "er" }' new int[] { 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' new int[] { 11' 11' 11' 11' 11' 11' 11' 11' 11' 11' 11 }' new int[] { 1' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 });
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestInvalidOffsets,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "mosfellsbær"' new string[] { "mo"' "os"' "sf"' "fe"' "el"' "ll"' "ls"' "sb"' "ba"' "ae"' "er" }' new int[] { 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' new int[] { 11' 11' 11' 11' 11' 11' 11' 11' 11' 11' 11 }' new int[] { 1' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 });
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestInvalidOffsets,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "mosfellsbær"' new string[] { "mo"' "os"' "sf"' "fe"' "el"' "ll"' "ls"' "sb"' "ba"' "ae"' "er" }' new int[] { 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' new int[] { 11' 11' 11' 11' 11' 11' 11' 11' 11' 11' 11 }' new int[] { 1' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 });
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestRandomStrings,The following statement contains a magic number: int min = TestUtil.NextInt32(Random' 2' 10);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestRandomStrings,The following statement contains a magic number: int min = TestUtil.NextInt32(Random' 2' 10);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestRandomStrings,The following statement contains a magic number: int max = TestUtil.NextInt32(Random' min' 20);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' a' 200 * RANDOM_MULTIPLIER' 20);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' a' 200 * RANDOM_MULTIPLIER' 20);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestRandomStrings,The following statement contains a magic number: i < 10
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestLucene43,The following statement contains a magic number: NGramTokenFilter filter = new NGramTokenFilter(LuceneVersion.LUCENE_43' input' 2' 3);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestLucene43,The following statement contains a magic number: NGramTokenFilter filter = new NGramTokenFilter(LuceneVersion.LUCENE_43' input' 2' 3);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestLucene43,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "ab"' "bc"' "cd"' "de"' "abc"' "bcd"' "cde" }' new int[] { 0' 1' 2' 3' 0' 1' 2 }' new int[] { 2' 3' 4' 5' 3' 4' 5 }' null' new int[] { 1' 1' 1' 1' 1' 1' 1 }' null' null' false);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestLucene43,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "ab"' "bc"' "cd"' "de"' "abc"' "bcd"' "cde" }' new int[] { 0' 1' 2' 3' 0' 1' 2 }' new int[] { 2' 3' 4' 5' 3' 4' 5 }' null' new int[] { 1' 1' 1' 1' 1' 1' 1 }' null' null' false);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestLucene43,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "ab"' "bc"' "cd"' "de"' "abc"' "bcd"' "cde" }' new int[] { 0' 1' 2' 3' 0' 1' 2 }' new int[] { 2' 3' 4' 5' 3' 4' 5 }' null' new int[] { 1' 1' 1' 1' 1' 1' 1 }' null' null' false);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestLucene43,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "ab"' "bc"' "cd"' "de"' "abc"' "bcd"' "cde" }' new int[] { 0' 1' 2' 3' 0' 1' 2 }' new int[] { 2' 3' 4' 5' 3' 4' 5 }' null' new int[] { 1' 1' 1' 1' 1' 1' 1 }' null' null' false);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestLucene43,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "ab"' "bc"' "cd"' "de"' "abc"' "bcd"' "cde" }' new int[] { 0' 1' 2' 3' 0' 1' 2 }' new int[] { 2' 3' 4' 5' 3' 4' 5 }' null' new int[] { 1' 1' 1' 1' 1' 1' 1 }' null' null' false);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestLucene43,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "ab"' "bc"' "cd"' "de"' "abc"' "bcd"' "cde" }' new int[] { 0' 1' 2' 3' 0' 1' 2 }' new int[] { 2' 3' 4' 5' 3' 4' 5 }' null' new int[] { 1' 1' 1' 1' 1' 1' 1 }' null' null' false);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestLucene43,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "ab"' "bc"' "cd"' "de"' "abc"' "bcd"' "cde" }' new int[] { 0' 1' 2' 3' 0' 1' 2 }' new int[] { 2' 3' 4' 5' 3' 4' 5 }' null' new int[] { 1' 1' 1' 1' 1' 1' 1 }' null' null' false);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestLucene43,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "ab"' "bc"' "cd"' "de"' "abc"' "bcd"' "cde" }' new int[] { 0' 1' 2' 3' 0' 1' 2 }' new int[] { 2' 3' 4' 5' 3' 4' 5 }' null' new int[] { 1' 1' 1' 1' 1' 1' 1 }' null' null' false);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestLucene43,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "ab"' "bc"' "cd"' "de"' "abc"' "bcd"' "cde" }' new int[] { 0' 1' 2' 3' 0' 1' 2 }' new int[] { 2' 3' 4' 5' 3' 4' 5 }' null' new int[] { 1' 1' 1' 1' 1' 1' 1 }' null' null' false);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestLucene43,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "ab"' "bc"' "cd"' "de"' "abc"' "bcd"' "cde" }' new int[] { 0' 1' 2' 3' 0' 1' 2 }' new int[] { 2' 3' 4' 5' 3' 4' 5 }' null' new int[] { 1' 1' 1' 1' 1' 1' 1 }' null' null' false);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestSupplementaryCharacters,The following statement contains a magic number: string s = TestUtil.RandomUnicodeString(Random' 10);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestSupplementaryCharacters,The following statement contains a magic number: int minGram = TestUtil.NextInt32(Random' 1' 3);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenFilterTest.cs,TestSupplementaryCharacters,The following statement contains a magic number: int maxGram = TestUtil.NextInt32(Random' minGram' 10);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestInvalidInput,The following statement contains a magic number: new NGramTokenizer(TEST_VERSION_CURRENT' input' 2' 1);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestUnigrams,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "a"' "b"' "c"' "d"' "e" }' new int[] { 0' 1' 2' 3' 4 }' new int[] { 1' 2' 3' 4' 5 }' 5);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestUnigrams,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "a"' "b"' "c"' "d"' "e" }' new int[] { 0' 1' 2' 3' 4 }' new int[] { 1' 2' 3' 4' 5 }' 5);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestUnigrams,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "a"' "b"' "c"' "d"' "e" }' new int[] { 0' 1' 2' 3' 4 }' new int[] { 1' 2' 3' 4' 5 }' 5);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestUnigrams,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "a"' "b"' "c"' "d"' "e" }' new int[] { 0' 1' 2' 3' 4 }' new int[] { 1' 2' 3' 4' 5 }' 5);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestUnigrams,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "a"' "b"' "c"' "d"' "e" }' new int[] { 0' 1' 2' 3' 4 }' new int[] { 1' 2' 3' 4' 5 }' 5);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestUnigrams,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "a"' "b"' "c"' "d"' "e" }' new int[] { 0' 1' 2' 3' 4 }' new int[] { 1' 2' 3' 4' 5 }' 5);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestUnigrams,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "a"' "b"' "c"' "d"' "e" }' new int[] { 0' 1' 2' 3' 4 }' new int[] { 1' 2' 3' 4' 5 }' 5);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestUnigrams,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "a"' "b"' "c"' "d"' "e" }' new int[] { 0' 1' 2' 3' 4 }' new int[] { 1' 2' 3' 4' 5 }' 5);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestBigrams,The following statement contains a magic number: NGramTokenizer tokenizer = new NGramTokenizer(TEST_VERSION_CURRENT' input' 2' 2);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestBigrams,The following statement contains a magic number: NGramTokenizer tokenizer = new NGramTokenizer(TEST_VERSION_CURRENT' input' 2' 2);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestBigrams,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "ab"' "bc"' "cd"' "de" }' new int[] { 0' 1' 2' 3 }' new int[] { 2' 3' 4' 5 }' 5);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestBigrams,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "ab"' "bc"' "cd"' "de" }' new int[] { 0' 1' 2' 3 }' new int[] { 2' 3' 4' 5 }' 5);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestBigrams,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "ab"' "bc"' "cd"' "de" }' new int[] { 0' 1' 2' 3 }' new int[] { 2' 3' 4' 5 }' 5);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestBigrams,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "ab"' "bc"' "cd"' "de" }' new int[] { 0' 1' 2' 3 }' new int[] { 2' 3' 4' 5 }' 5);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestBigrams,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "ab"' "bc"' "cd"' "de" }' new int[] { 0' 1' 2' 3 }' new int[] { 2' 3' 4' 5 }' 5);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestBigrams,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "ab"' "bc"' "cd"' "de" }' new int[] { 0' 1' 2' 3 }' new int[] { 2' 3' 4' 5 }' 5);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestBigrams,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "ab"' "bc"' "cd"' "de" }' new int[] { 0' 1' 2' 3 }' new int[] { 2' 3' 4' 5 }' 5);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestNgrams,The following statement contains a magic number: NGramTokenizer tokenizer = new NGramTokenizer(TEST_VERSION_CURRENT' input' 1' 3);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestNgrams,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "a"' "ab"' "abc"' "b"' "bc"' "bcd"' "c"' "cd"' "cde"' "d"' "de"' "e" }' new int[] { 0' 0' 0' 1' 1' 1' 2' 2' 2' 3' 3' 4 }' new int[] { 1' 2' 3' 2' 3' 4' 3' 4' 5' 4' 5' 5 }' null' null' null' 5' false);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestNgrams,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "a"' "ab"' "abc"' "b"' "bc"' "bcd"' "c"' "cd"' "cde"' "d"' "de"' "e" }' new int[] { 0' 0' 0' 1' 1' 1' 2' 2' 2' 3' 3' 4 }' new int[] { 1' 2' 3' 2' 3' 4' 3' 4' 5' 4' 5' 5 }' null' null' null' 5' false);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestNgrams,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "a"' "ab"' "abc"' "b"' "bc"' "bcd"' "c"' "cd"' "cde"' "d"' "de"' "e" }' new int[] { 0' 0' 0' 1' 1' 1' 2' 2' 2' 3' 3' 4 }' new int[] { 1' 2' 3' 2' 3' 4' 3' 4' 5' 4' 5' 5 }' null' null' null' 5' false);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestNgrams,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "a"' "ab"' "abc"' "b"' "bc"' "bcd"' "c"' "cd"' "cde"' "d"' "de"' "e" }' new int[] { 0' 0' 0' 1' 1' 1' 2' 2' 2' 3' 3' 4 }' new int[] { 1' 2' 3' 2' 3' 4' 3' 4' 5' 4' 5' 5 }' null' null' null' 5' false);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestNgrams,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "a"' "ab"' "abc"' "b"' "bc"' "bcd"' "c"' "cd"' "cde"' "d"' "de"' "e" }' new int[] { 0' 0' 0' 1' 1' 1' 2' 2' 2' 3' 3' 4 }' new int[] { 1' 2' 3' 2' 3' 4' 3' 4' 5' 4' 5' 5 }' null' null' null' 5' false);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestNgrams,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "a"' "ab"' "abc"' "b"' "bc"' "bcd"' "c"' "cd"' "cde"' "d"' "de"' "e" }' new int[] { 0' 0' 0' 1' 1' 1' 2' 2' 2' 3' 3' 4 }' new int[] { 1' 2' 3' 2' 3' 4' 3' 4' 5' 4' 5' 5 }' null' null' null' 5' false);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestNgrams,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "a"' "ab"' "abc"' "b"' "bc"' "bcd"' "c"' "cd"' "cde"' "d"' "de"' "e" }' new int[] { 0' 0' 0' 1' 1' 1' 2' 2' 2' 3' 3' 4 }' new int[] { 1' 2' 3' 2' 3' 4' 3' 4' 5' 4' 5' 5 }' null' null' null' 5' false);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestNgrams,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "a"' "ab"' "abc"' "b"' "bc"' "bcd"' "c"' "cd"' "cde"' "d"' "de"' "e" }' new int[] { 0' 0' 0' 1' 1' 1' 2' 2' 2' 3' 3' 4 }' new int[] { 1' 2' 3' 2' 3' 4' 3' 4' 5' 4' 5' 5 }' null' null' null' 5' false);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestNgrams,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "a"' "ab"' "abc"' "b"' "bc"' "bcd"' "c"' "cd"' "cde"' "d"' "de"' "e" }' new int[] { 0' 0' 0' 1' 1' 1' 2' 2' 2' 3' 3' 4 }' new int[] { 1' 2' 3' 2' 3' 4' 3' 4' 5' 4' 5' 5 }' null' null' null' 5' false);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestNgrams,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "a"' "ab"' "abc"' "b"' "bc"' "bcd"' "c"' "cd"' "cde"' "d"' "de"' "e" }' new int[] { 0' 0' 0' 1' 1' 1' 2' 2' 2' 3' 3' 4 }' new int[] { 1' 2' 3' 2' 3' 4' 3' 4' 5' 4' 5' 5 }' null' null' null' 5' false);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestNgrams,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "a"' "ab"' "abc"' "b"' "bc"' "bcd"' "c"' "cd"' "cde"' "d"' "de"' "e" }' new int[] { 0' 0' 0' 1' 1' 1' 2' 2' 2' 3' 3' 4 }' new int[] { 1' 2' 3' 2' 3' 4' 3' 4' 5' 4' 5' 5 }' null' null' null' 5' false);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestNgrams,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "a"' "ab"' "abc"' "b"' "bc"' "bcd"' "c"' "cd"' "cde"' "d"' "de"' "e" }' new int[] { 0' 0' 0' 1' 1' 1' 2' 2' 2' 3' 3' 4 }' new int[] { 1' 2' 3' 2' 3' 4' 3' 4' 5' 4' 5' 5 }' null' null' null' 5' false);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestNgrams,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "a"' "ab"' "abc"' "b"' "bc"' "bcd"' "c"' "cd"' "cde"' "d"' "de"' "e" }' new int[] { 0' 0' 0' 1' 1' 1' 2' 2' 2' 3' 3' 4 }' new int[] { 1' 2' 3' 2' 3' 4' 3' 4' 5' 4' 5' 5 }' null' null' null' 5' false);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestNgrams,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "a"' "ab"' "abc"' "b"' "bc"' "bcd"' "c"' "cd"' "cde"' "d"' "de"' "e" }' new int[] { 0' 0' 0' 1' 1' 1' 2' 2' 2' 3' 3' 4 }' new int[] { 1' 2' 3' 2' 3' 4' 3' 4' 5' 4' 5' 5 }' null' null' null' 5' false);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestNgrams,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "a"' "ab"' "abc"' "b"' "bc"' "bcd"' "c"' "cd"' "cde"' "d"' "de"' "e" }' new int[] { 0' 0' 0' 1' 1' 1' 2' 2' 2' 3' 3' 4 }' new int[] { 1' 2' 3' 2' 3' 4' 3' 4' 5' 4' 5' 5 }' null' null' null' 5' false);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestNgrams,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "a"' "ab"' "abc"' "b"' "bc"' "bcd"' "c"' "cd"' "cde"' "d"' "de"' "e" }' new int[] { 0' 0' 0' 1' 1' 1' 2' 2' 2' 3' 3' 4 }' new int[] { 1' 2' 3' 2' 3' 4' 3' 4' 5' 4' 5' 5 }' null' null' null' 5' false);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestNgrams,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "a"' "ab"' "abc"' "b"' "bc"' "bcd"' "c"' "cd"' "cde"' "d"' "de"' "e" }' new int[] { 0' 0' 0' 1' 1' 1' 2' 2' 2' 3' 3' 4 }' new int[] { 1' 2' 3' 2' 3' 4' 3' 4' 5' 4' 5' 5 }' null' null' null' 5' false);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestNgrams,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "a"' "ab"' "abc"' "b"' "bc"' "bcd"' "c"' "cd"' "cde"' "d"' "de"' "e" }' new int[] { 0' 0' 0' 1' 1' 1' 2' 2' 2' 3' 3' 4 }' new int[] { 1' 2' 3' 2' 3' 4' 3' 4' 5' 4' 5' 5 }' null' null' null' 5' false);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestOversizedNgrams,The following statement contains a magic number: NGramTokenizer tokenizer = new NGramTokenizer(TEST_VERSION_CURRENT' input' 6' 7);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestOversizedNgrams,The following statement contains a magic number: NGramTokenizer tokenizer = new NGramTokenizer(TEST_VERSION_CURRENT' input' 6' 7);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestOversizedNgrams,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[0]' new int[0]' new int[0]' 5);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestReset,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "a"' "b"' "c"' "d"' "e" }' new int[] { 0' 1' 2' 3' 4 }' new int[] { 1' 2' 3' 4' 5 }' 5);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestReset,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "a"' "b"' "c"' "d"' "e" }' new int[] { 0' 1' 2' 3' 4 }' new int[] { 1' 2' 3' 4' 5 }' 5);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestReset,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "a"' "b"' "c"' "d"' "e" }' new int[] { 0' 1' 2' 3' 4 }' new int[] { 1' 2' 3' 4' 5 }' 5);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestReset,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "a"' "b"' "c"' "d"' "e" }' new int[] { 0' 1' 2' 3' 4 }' new int[] { 1' 2' 3' 4' 5 }' 5);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestReset,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "a"' "b"' "c"' "d"' "e" }' new int[] { 0' 1' 2' 3' 4 }' new int[] { 1' 2' 3' 4' 5 }' 5);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestReset,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "a"' "b"' "c"' "d"' "e" }' new int[] { 0' 1' 2' 3' 4 }' new int[] { 1' 2' 3' 4' 5 }' 5);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestReset,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "a"' "b"' "c"' "d"' "e" }' new int[] { 0' 1' 2' 3' 4 }' new int[] { 1' 2' 3' 4' 5 }' 5);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestReset,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "a"' "b"' "c"' "d"' "e" }' new int[] { 0' 1' 2' 3' 4 }' new int[] { 1' 2' 3' 4' 5 }' 5);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestReset,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "a"' "b"' "c"' "d"' "e" }' new int[] { 0' 1' 2' 3' 4 }' new int[] { 1' 2' 3' 4' 5 }' 5);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestReset,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "a"' "b"' "c"' "d"' "e" }' new int[] { 0' 1' 2' 3' 4 }' new int[] { 1' 2' 3' 4' 5 }' 5);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestReset,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "a"' "b"' "c"' "d"' "e" }' new int[] { 0' 1' 2' 3' 4 }' new int[] { 1' 2' 3' 4' 5 }' 5);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestReset,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "a"' "b"' "c"' "d"' "e" }' new int[] { 0' 1' 2' 3' 4 }' new int[] { 1' 2' 3' 4' 5 }' 5);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestReset,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "a"' "b"' "c"' "d"' "e" }' new int[] { 0' 1' 2' 3' 4 }' new int[] { 1' 2' 3' 4' 5 }' 5);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestReset,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "a"' "b"' "c"' "d"' "e" }' new int[] { 0' 1' 2' 3' 4 }' new int[] { 1' 2' 3' 4' 5 }' 5);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestReset,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "a"' "b"' "c"' "d"' "e" }' new int[] { 0' 1' 2' 3' 4 }' new int[] { 1' 2' 3' 4' 5 }' 5);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestReset,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "a"' "b"' "c"' "d"' "e" }' new int[] { 0' 1' 2' 3' 4 }' new int[] { 1' 2' 3' 4' 5 }' 5);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestRandomStrings,The following statement contains a magic number: int min = TestUtil.NextInt32(Random' 2' 10);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestRandomStrings,The following statement contains a magic number: int min = TestUtil.NextInt32(Random' 2' 10);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestRandomStrings,The following statement contains a magic number: int max = TestUtil.NextInt32(Random' min' 20);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' a' 200 * RANDOM_MULTIPLIER' 20);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' a' 200 * RANDOM_MULTIPLIER' 20);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' a' 10 * RANDOM_MULTIPLIER' 1027);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' a' 10 * RANDOM_MULTIPLIER' 1027);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestRandomStrings,The following statement contains a magic number: i < 10
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestLargeInput,The following statement contains a magic number: int minGram = TestUtil.NextInt32(Random' 1' 100);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestLargeInput,The following statement contains a magic number: int maxGram = TestUtil.NextInt32(Random' minGram' 100);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestLargeInput,The following statement contains a magic number: TestNGrams(minGram' maxGram' TestUtil.NextInt32(Random' 3 * 1024' 4 * 1024)' "");
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestLargeInput,The following statement contains a magic number: TestNGrams(minGram' maxGram' TestUtil.NextInt32(Random' 3 * 1024' 4 * 1024)' "");
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestLargeInput,The following statement contains a magic number: TestNGrams(minGram' maxGram' TestUtil.NextInt32(Random' 3 * 1024' 4 * 1024)' "");
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestLargeInput,The following statement contains a magic number: TestNGrams(minGram' maxGram' TestUtil.NextInt32(Random' 3 * 1024' 4 * 1024)' "");
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestLargeMaxGram,The following statement contains a magic number: int minGram = TestUtil.NextInt32(Random' 1290' 1300);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestLargeMaxGram,The following statement contains a magic number: int minGram = TestUtil.NextInt32(Random' 1290' 1300);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestLargeMaxGram,The following statement contains a magic number: int maxGram = TestUtil.NextInt32(Random' minGram' 1300);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestLargeMaxGram,The following statement contains a magic number: TestNGrams(minGram' maxGram' TestUtil.NextInt32(Random' 3 * 1024' 4 * 1024)' "");
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestLargeMaxGram,The following statement contains a magic number: TestNGrams(minGram' maxGram' TestUtil.NextInt32(Random' 3 * 1024' 4 * 1024)' "");
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestLargeMaxGram,The following statement contains a magic number: TestNGrams(minGram' maxGram' TestUtil.NextInt32(Random' 3 * 1024' 4 * 1024)' "");
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestLargeMaxGram,The following statement contains a magic number: TestNGrams(minGram' maxGram' TestUtil.NextInt32(Random' 3 * 1024' 4 * 1024)' "");
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestPreTokenization,The following statement contains a magic number: int minGram = TestUtil.NextInt32(Random' 1' 100);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestPreTokenization,The following statement contains a magic number: int maxGram = TestUtil.NextInt32(Random' minGram' 100);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestPreTokenization,The following statement contains a magic number: TestNGrams(minGram' maxGram' TestUtil.NextInt32(Random' 0' 4 * 1024)' "a");
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestPreTokenization,The following statement contains a magic number: TestNGrams(minGram' maxGram' TestUtil.NextInt32(Random' 0' 4 * 1024)' "a");
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestHeavyPreTokenization,The following statement contains a magic number: int minGram = TestUtil.NextInt32(Random' 1' 100);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestHeavyPreTokenization,The following statement contains a magic number: int maxGram = TestUtil.NextInt32(Random' minGram' 100);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestHeavyPreTokenization,The following statement contains a magic number: TestNGrams(minGram' maxGram' TestUtil.NextInt32(Random' 0' 4 * 1024)' "abcdef");
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestHeavyPreTokenization,The following statement contains a magic number: TestNGrams(minGram' maxGram' TestUtil.NextInt32(Random' 0' 4 * 1024)' "abcdef");
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestFewTokenChars,The following statement contains a magic number: char[] chrs = new char[TestUtil.NextInt32(Random' 4000' 5000)];
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestFewTokenChars,The following statement contains a magic number: char[] chrs = new char[TestUtil.NextInt32(Random' 4000' 5000)];
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestFewTokenChars,The following statement contains a magic number: Random.NextDouble() < 0.1
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestFewTokenChars,The following statement contains a magic number: int minGram = TestUtil.NextInt32(Random' 1' 2);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestFewTokenChars,The following statement contains a magic number: int maxGram = TestUtil.NextInt32(Random' minGram' 2);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestFullUTF8Range,The following statement contains a magic number: int minGram = TestUtil.NextInt32(Random' 1' 100);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestFullUTF8Range,The following statement contains a magic number: int maxGram = TestUtil.NextInt32(Random' minGram' 100);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestFullUTF8Range,The following statement contains a magic number: string s = TestUtil.RandomUnicodeString(Random' 4 * 1024);
Magic Number,Lucene.Net.Analysis.NGram,NGramTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\NGram\NGramTokenizerTest.cs,TestFullUTF8Range,The following statement contains a magic number: string s = TestUtil.RandomUnicodeString(Random' 4 * 1024);
Magic Number,Lucene.Net.Analysis.Nl,TestDutchStemmer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Nl\TestDutchStemmer.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' new DutchAnalyzer(TEST_VERSION_CURRENT)' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.No,TestNorwegianAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\No\TestNorwegianAnalyzer.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' new NorwegianAnalyzer(TEST_VERSION_CURRENT)' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.No,TestNorwegianLightStemFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\No\TestNorwegianLightStemFilter.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(random' analyzer' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.No,TestNorwegianMinimalStemFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\No\TestNorwegianMinimalStemFilter.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(random' analyzer' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.Path,TestPathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestPathHierarchyTokenizer.cs,TestBasic,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "/a"' "/a/b"' "/a/b/c" }' new int[] { 0' 0' 0 }' new int[] { 2' 4' 6 }' new int[] { 1' 0' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestPathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestPathHierarchyTokenizer.cs,TestBasic,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "/a"' "/a/b"' "/a/b/c" }' new int[] { 0' 0' 0 }' new int[] { 2' 4' 6 }' new int[] { 1' 0' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestPathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestPathHierarchyTokenizer.cs,TestBasic,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "/a"' "/a/b"' "/a/b/c" }' new int[] { 0' 0' 0 }' new int[] { 2' 4' 6 }' new int[] { 1' 0' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestPathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestPathHierarchyTokenizer.cs,TestEndOfDelimiter,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "/a"' "/a/b"' "/a/b/c"' "/a/b/c/" }' new int[] { 0' 0' 0' 0 }' new int[] { 2' 4' 6' 7 }' new int[] { 1' 0' 0' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestPathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestPathHierarchyTokenizer.cs,TestEndOfDelimiter,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "/a"' "/a/b"' "/a/b/c"' "/a/b/c/" }' new int[] { 0' 0' 0' 0 }' new int[] { 2' 4' 6' 7 }' new int[] { 1' 0' 0' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestPathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestPathHierarchyTokenizer.cs,TestEndOfDelimiter,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "/a"' "/a/b"' "/a/b/c"' "/a/b/c/" }' new int[] { 0' 0' 0' 0 }' new int[] { 2' 4' 6' 7 }' new int[] { 1' 0' 0' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestPathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestPathHierarchyTokenizer.cs,TestEndOfDelimiter,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "/a"' "/a/b"' "/a/b/c"' "/a/b/c/" }' new int[] { 0' 0' 0' 0 }' new int[] { 2' 4' 6' 7 }' new int[] { 1' 0' 0' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestPathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestPathHierarchyTokenizer.cs,TestStartOfChar,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "a"' "a/b"' "a/b/c" }' new int[] { 0' 0' 0 }' new int[] { 1' 3' 5 }' new int[] { 1' 0' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestPathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestPathHierarchyTokenizer.cs,TestStartOfChar,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "a"' "a/b"' "a/b/c" }' new int[] { 0' 0' 0 }' new int[] { 1' 3' 5 }' new int[] { 1' 0' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestPathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestPathHierarchyTokenizer.cs,TestStartOfCharEndOfDelimiter,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "a"' "a/b"' "a/b/c"' "a/b/c/" }' new int[] { 0' 0' 0' 0 }' new int[] { 1' 3' 5' 6 }' new int[] { 1' 0' 0' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestPathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestPathHierarchyTokenizer.cs,TestStartOfCharEndOfDelimiter,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "a"' "a/b"' "a/b/c"' "a/b/c/" }' new int[] { 0' 0' 0' 0 }' new int[] { 1' 3' 5' 6 }' new int[] { 1' 0' 0' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestPathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestPathHierarchyTokenizer.cs,TestStartOfCharEndOfDelimiter,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "a"' "a/b"' "a/b/c"' "a/b/c/" }' new int[] { 0' 0' 0' 0 }' new int[] { 1' 3' 5' 6 }' new int[] { 1' 0' 0' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestPathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestPathHierarchyTokenizer.cs,TestOnlyDelimiters,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "/"' "//" }' new int[] { 0' 0 }' new int[] { 1' 2 }' new int[] { 1' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestPathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestPathHierarchyTokenizer.cs,TestReplace,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "\\a"' "\\a\\b"' "\\a\\b\\c" }' new int[] { 0' 0' 0 }' new int[] { 2' 4' 6 }' new int[] { 1' 0' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestPathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestPathHierarchyTokenizer.cs,TestReplace,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "\\a"' "\\a\\b"' "\\a\\b\\c" }' new int[] { 0' 0' 0 }' new int[] { 2' 4' 6 }' new int[] { 1' 0' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestPathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestPathHierarchyTokenizer.cs,TestReplace,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "\\a"' "\\a\\b"' "\\a\\b\\c" }' new int[] { 0' 0' 0 }' new int[] { 2' 4' 6 }' new int[] { 1' 0' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestPathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestPathHierarchyTokenizer.cs,TestWindowsPath,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "c:"' "c:\\a"' "c:\\a\\b"' "c:\\a\\b\\c" }' new int[] { 0' 0' 0' 0 }' new int[] { 2' 4' 6' 8 }' new int[] { 1' 0' 0' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestPathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestPathHierarchyTokenizer.cs,TestWindowsPath,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "c:"' "c:\\a"' "c:\\a\\b"' "c:\\a\\b\\c" }' new int[] { 0' 0' 0' 0 }' new int[] { 2' 4' 6' 8 }' new int[] { 1' 0' 0' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestPathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestPathHierarchyTokenizer.cs,TestWindowsPath,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "c:"' "c:\\a"' "c:\\a\\b"' "c:\\a\\b\\c" }' new int[] { 0' 0' 0' 0 }' new int[] { 2' 4' 6' 8 }' new int[] { 1' 0' 0' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestPathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestPathHierarchyTokenizer.cs,TestWindowsPath,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "c:"' "c:\\a"' "c:\\a\\b"' "c:\\a\\b\\c" }' new int[] { 0' 0' 0' 0 }' new int[] { 2' 4' 6' 8 }' new int[] { 1' 0' 0' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestPathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestPathHierarchyTokenizer.cs,TestNormalizeWinDelimToLinuxDelim,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "c:"' "c:/a"' "c:/a/b"' "c:/a/b/c" }' new int[] { 0' 0' 0' 0 }' new int[] { 2' 4' 6' 8 }' new int[] { 1' 0' 0' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestPathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestPathHierarchyTokenizer.cs,TestNormalizeWinDelimToLinuxDelim,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "c:"' "c:/a"' "c:/a/b"' "c:/a/b/c" }' new int[] { 0' 0' 0' 0 }' new int[] { 2' 4' 6' 8 }' new int[] { 1' 0' 0' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestPathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestPathHierarchyTokenizer.cs,TestNormalizeWinDelimToLinuxDelim,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "c:"' "c:/a"' "c:/a/b"' "c:/a/b/c" }' new int[] { 0' 0' 0' 0 }' new int[] { 2' 4' 6' 8 }' new int[] { 1' 0' 0' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestPathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestPathHierarchyTokenizer.cs,TestNormalizeWinDelimToLinuxDelim,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "c:"' "c:/a"' "c:/a/b"' "c:/a/b/c" }' new int[] { 0' 0' 0' 0 }' new int[] { 2' 4' 6' 8 }' new int[] { 1' 0' 0' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestPathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestPathHierarchyTokenizer.cs,TestBasicSkip,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "/b"' "/b/c" }' new int[] { 2' 2 }' new int[] { 4' 6 }' new int[] { 1' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestPathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestPathHierarchyTokenizer.cs,TestBasicSkip,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "/b"' "/b/c" }' new int[] { 2' 2 }' new int[] { 4' 6 }' new int[] { 1' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestPathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestPathHierarchyTokenizer.cs,TestBasicSkip,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "/b"' "/b/c" }' new int[] { 2' 2 }' new int[] { 4' 6 }' new int[] { 1' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestPathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestPathHierarchyTokenizer.cs,TestBasicSkip,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "/b"' "/b/c" }' new int[] { 2' 2 }' new int[] { 4' 6 }' new int[] { 1' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestPathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestPathHierarchyTokenizer.cs,TestEndOfDelimiterSkip,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "/b"' "/b/c"' "/b/c/" }' new int[] { 2' 2' 2 }' new int[] { 4' 6' 7 }' new int[] { 1' 0' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestPathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestPathHierarchyTokenizer.cs,TestEndOfDelimiterSkip,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "/b"' "/b/c"' "/b/c/" }' new int[] { 2' 2' 2 }' new int[] { 4' 6' 7 }' new int[] { 1' 0' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestPathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestPathHierarchyTokenizer.cs,TestEndOfDelimiterSkip,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "/b"' "/b/c"' "/b/c/" }' new int[] { 2' 2' 2 }' new int[] { 4' 6' 7 }' new int[] { 1' 0' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestPathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestPathHierarchyTokenizer.cs,TestEndOfDelimiterSkip,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "/b"' "/b/c"' "/b/c/" }' new int[] { 2' 2' 2 }' new int[] { 4' 6' 7 }' new int[] { 1' 0' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestPathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestPathHierarchyTokenizer.cs,TestEndOfDelimiterSkip,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "/b"' "/b/c"' "/b/c/" }' new int[] { 2' 2' 2 }' new int[] { 4' 6' 7 }' new int[] { 1' 0' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestPathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestPathHierarchyTokenizer.cs,TestEndOfDelimiterSkip,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "/b"' "/b/c"' "/b/c/" }' new int[] { 2' 2' 2 }' new int[] { 4' 6' 7 }' new int[] { 1' 0' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestPathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestPathHierarchyTokenizer.cs,TestStartOfCharSkip,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "/b"' "/b/c" }' new int[] { 1' 1 }' new int[] { 3' 5 }' new int[] { 1' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestPathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestPathHierarchyTokenizer.cs,TestStartOfCharSkip,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "/b"' "/b/c" }' new int[] { 1' 1 }' new int[] { 3' 5 }' new int[] { 1' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestPathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestPathHierarchyTokenizer.cs,TestStartOfCharEndOfDelimiterSkip,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "/b"' "/b/c"' "/b/c/" }' new int[] { 1' 1' 1 }' new int[] { 3' 5' 6 }' new int[] { 1' 0' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestPathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestPathHierarchyTokenizer.cs,TestStartOfCharEndOfDelimiterSkip,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "/b"' "/b/c"' "/b/c/" }' new int[] { 1' 1' 1 }' new int[] { 3' 5' 6 }' new int[] { 1' 0' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestPathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestPathHierarchyTokenizer.cs,TestStartOfCharEndOfDelimiterSkip,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "/b"' "/b/c"' "/b/c/" }' new int[] { 1' 1' 1 }' new int[] { 3' 5' 6 }' new int[] { 1' 0' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestPathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestPathHierarchyTokenizer.cs,TestOnlyDelimitersSkip,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "/" }' new int[] { 1 }' new int[] { 2 }' new int[] { 1 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestPathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestPathHierarchyTokenizer.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' a' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.Path,TestPathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestPathHierarchyTokenizer.cs,TestRandomHugeStrings,The following statement contains a magic number: CheckRandomData(random' a' 100 * RANDOM_MULTIPLIER' 1027);
Magic Number,Lucene.Net.Analysis.Path,TestPathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestPathHierarchyTokenizer.cs,TestRandomHugeStrings,The following statement contains a magic number: CheckRandomData(random' a' 100 * RANDOM_MULTIPLIER' 1027);
Magic Number,Lucene.Net.Analysis.Path,TestReversePathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestReversePathHierarchyTokenizer.cs,TestBasicReverse,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "/a/b/c"' "a/b/c"' "b/c"' "c" }' new int[] { 0' 1' 3' 5 }' new int[] { 6' 6' 6' 6 }' new int[] { 1' 0' 0' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestReversePathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestReversePathHierarchyTokenizer.cs,TestBasicReverse,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "/a/b/c"' "a/b/c"' "b/c"' "c" }' new int[] { 0' 1' 3' 5 }' new int[] { 6' 6' 6' 6 }' new int[] { 1' 0' 0' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestReversePathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestReversePathHierarchyTokenizer.cs,TestBasicReverse,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "/a/b/c"' "a/b/c"' "b/c"' "c" }' new int[] { 0' 1' 3' 5 }' new int[] { 6' 6' 6' 6 }' new int[] { 1' 0' 0' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestReversePathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestReversePathHierarchyTokenizer.cs,TestBasicReverse,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "/a/b/c"' "a/b/c"' "b/c"' "c" }' new int[] { 0' 1' 3' 5 }' new int[] { 6' 6' 6' 6 }' new int[] { 1' 0' 0' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestReversePathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestReversePathHierarchyTokenizer.cs,TestBasicReverse,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "/a/b/c"' "a/b/c"' "b/c"' "c" }' new int[] { 0' 1' 3' 5 }' new int[] { 6' 6' 6' 6 }' new int[] { 1' 0' 0' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestReversePathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestReversePathHierarchyTokenizer.cs,TestBasicReverse,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "/a/b/c"' "a/b/c"' "b/c"' "c" }' new int[] { 0' 1' 3' 5 }' new int[] { 6' 6' 6' 6 }' new int[] { 1' 0' 0' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestReversePathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestReversePathHierarchyTokenizer.cs,TestEndOfDelimiterReverse,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "/a/b/c/"' "a/b/c/"' "b/c/"' "c/" }' new int[] { 0' 1' 3' 5 }' new int[] { 7' 7' 7' 7 }' new int[] { 1' 0' 0' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestReversePathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestReversePathHierarchyTokenizer.cs,TestEndOfDelimiterReverse,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "/a/b/c/"' "a/b/c/"' "b/c/"' "c/" }' new int[] { 0' 1' 3' 5 }' new int[] { 7' 7' 7' 7 }' new int[] { 1' 0' 0' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestReversePathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestReversePathHierarchyTokenizer.cs,TestEndOfDelimiterReverse,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "/a/b/c/"' "a/b/c/"' "b/c/"' "c/" }' new int[] { 0' 1' 3' 5 }' new int[] { 7' 7' 7' 7 }' new int[] { 1' 0' 0' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestReversePathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestReversePathHierarchyTokenizer.cs,TestEndOfDelimiterReverse,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "/a/b/c/"' "a/b/c/"' "b/c/"' "c/" }' new int[] { 0' 1' 3' 5 }' new int[] { 7' 7' 7' 7 }' new int[] { 1' 0' 0' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestReversePathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestReversePathHierarchyTokenizer.cs,TestEndOfDelimiterReverse,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "/a/b/c/"' "a/b/c/"' "b/c/"' "c/" }' new int[] { 0' 1' 3' 5 }' new int[] { 7' 7' 7' 7 }' new int[] { 1' 0' 0' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestReversePathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestReversePathHierarchyTokenizer.cs,TestEndOfDelimiterReverse,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "/a/b/c/"' "a/b/c/"' "b/c/"' "c/" }' new int[] { 0' 1' 3' 5 }' new int[] { 7' 7' 7' 7 }' new int[] { 1' 0' 0' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestReversePathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestReversePathHierarchyTokenizer.cs,TestStartOfCharReverse,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "a/b/c"' "b/c"' "c" }' new int[] { 0' 2' 4 }' new int[] { 5' 5' 5 }' new int[] { 1' 0' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestReversePathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestReversePathHierarchyTokenizer.cs,TestStartOfCharReverse,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "a/b/c"' "b/c"' "c" }' new int[] { 0' 2' 4 }' new int[] { 5' 5' 5 }' new int[] { 1' 0' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestReversePathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestReversePathHierarchyTokenizer.cs,TestStartOfCharReverse,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "a/b/c"' "b/c"' "c" }' new int[] { 0' 2' 4 }' new int[] { 5' 5' 5 }' new int[] { 1' 0' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestReversePathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestReversePathHierarchyTokenizer.cs,TestStartOfCharReverse,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "a/b/c"' "b/c"' "c" }' new int[] { 0' 2' 4 }' new int[] { 5' 5' 5 }' new int[] { 1' 0' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestReversePathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestReversePathHierarchyTokenizer.cs,TestStartOfCharReverse,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "a/b/c"' "b/c"' "c" }' new int[] { 0' 2' 4 }' new int[] { 5' 5' 5 }' new int[] { 1' 0' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestReversePathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestReversePathHierarchyTokenizer.cs,TestStartOfCharEndOfDelimiterReverse,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "a/b/c/"' "b/c/"' "c/" }' new int[] { 0' 2' 4 }' new int[] { 6' 6' 6 }' new int[] { 1' 0' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestReversePathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestReversePathHierarchyTokenizer.cs,TestStartOfCharEndOfDelimiterReverse,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "a/b/c/"' "b/c/"' "c/" }' new int[] { 0' 2' 4 }' new int[] { 6' 6' 6 }' new int[] { 1' 0' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestReversePathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestReversePathHierarchyTokenizer.cs,TestStartOfCharEndOfDelimiterReverse,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "a/b/c/"' "b/c/"' "c/" }' new int[] { 0' 2' 4 }' new int[] { 6' 6' 6 }' new int[] { 1' 0' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestReversePathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestReversePathHierarchyTokenizer.cs,TestStartOfCharEndOfDelimiterReverse,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "a/b/c/"' "b/c/"' "c/" }' new int[] { 0' 2' 4 }' new int[] { 6' 6' 6 }' new int[] { 1' 0' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestReversePathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestReversePathHierarchyTokenizer.cs,TestStartOfCharEndOfDelimiterReverse,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "a/b/c/"' "b/c/"' "c/" }' new int[] { 0' 2' 4 }' new int[] { 6' 6' 6 }' new int[] { 1' 0' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestReversePathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestReversePathHierarchyTokenizer.cs,TestOnlyDelimitersReverse,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "//"' "/" }' new int[] { 0' 1 }' new int[] { 2' 2 }' new int[] { 1' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestReversePathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestReversePathHierarchyTokenizer.cs,TestOnlyDelimitersReverse,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "//"' "/" }' new int[] { 0' 1 }' new int[] { 2' 2 }' new int[] { 1' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestReversePathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestReversePathHierarchyTokenizer.cs,TestEndOfDelimiterReverseSkip,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "/a/b/"' "a/b/"' "b/" }' new int[] { 0' 1' 3 }' new int[] { 5' 5' 5 }' new int[] { 1' 0' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestReversePathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestReversePathHierarchyTokenizer.cs,TestEndOfDelimiterReverseSkip,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "/a/b/"' "a/b/"' "b/" }' new int[] { 0' 1' 3 }' new int[] { 5' 5' 5 }' new int[] { 1' 0' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestReversePathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestReversePathHierarchyTokenizer.cs,TestEndOfDelimiterReverseSkip,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "/a/b/"' "a/b/"' "b/" }' new int[] { 0' 1' 3 }' new int[] { 5' 5' 5 }' new int[] { 1' 0' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestReversePathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestReversePathHierarchyTokenizer.cs,TestEndOfDelimiterReverseSkip,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "/a/b/"' "a/b/"' "b/" }' new int[] { 0' 1' 3 }' new int[] { 5' 5' 5 }' new int[] { 1' 0' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestReversePathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestReversePathHierarchyTokenizer.cs,TestStartOfCharReverseSkip,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "a/b/"' "b/" }' new int[] { 0' 2 }' new int[] { 4' 4 }' new int[] { 1' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestReversePathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestReversePathHierarchyTokenizer.cs,TestStartOfCharReverseSkip,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "a/b/"' "b/" }' new int[] { 0' 2 }' new int[] { 4' 4 }' new int[] { 1' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestReversePathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestReversePathHierarchyTokenizer.cs,TestStartOfCharReverseSkip,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "a/b/"' "b/" }' new int[] { 0' 2 }' new int[] { 4' 4 }' new int[] { 1' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestReversePathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestReversePathHierarchyTokenizer.cs,TestStartOfCharEndOfDelimiterReverseSkip,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "a/b/"' "b/" }' new int[] { 0' 2 }' new int[] { 4' 4 }' new int[] { 1' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestReversePathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestReversePathHierarchyTokenizer.cs,TestStartOfCharEndOfDelimiterReverseSkip,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "a/b/"' "b/" }' new int[] { 0' 2 }' new int[] { 4' 4 }' new int[] { 1' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestReversePathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestReversePathHierarchyTokenizer.cs,TestStartOfCharEndOfDelimiterReverseSkip,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "a/b/"' "b/" }' new int[] { 0' 2 }' new int[] { 4' 4 }' new int[] { 1' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestReversePathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestReversePathHierarchyTokenizer.cs,TestReverseSkip2,The following statement contains a magic number: ReversePathHierarchyTokenizer t = new ReversePathHierarchyTokenizer(new StringReader(path)' 2);
Magic Number,Lucene.Net.Analysis.Path,TestReversePathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestReversePathHierarchyTokenizer.cs,TestReverseSkip2,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "/a/"' "a/" }' new int[] { 0' 1 }' new int[] { 3' 3 }' new int[] { 1' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestReversePathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestReversePathHierarchyTokenizer.cs,TestReverseSkip2,The following statement contains a magic number: AssertTokenStreamContents(t' new string[] { "/a/"' "a/" }' new int[] { 0' 1 }' new int[] { 3' 3 }' new int[] { 1' 0 }' path.Length);
Magic Number,Lucene.Net.Analysis.Path,TestReversePathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestReversePathHierarchyTokenizer.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' a' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.Path,TestReversePathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestReversePathHierarchyTokenizer.cs,TestRandomHugeStrings,The following statement contains a magic number: CheckRandomData(random' a' 100 * RANDOM_MULTIPLIER' 1027);
Magic Number,Lucene.Net.Analysis.Path,TestReversePathHierarchyTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Path\TestReversePathHierarchyTokenizer.cs,TestRandomHugeStrings,The following statement contains a magic number: CheckRandomData(random' a' 100 * RANDOM_MULTIPLIER' 1027);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestNoPattern,The following statement contains a magic number: TestPatterns("foobarbaz"' new string[] { }' new string[] { "foobarbaz" }' new int[] { 0 }' new int[] { 9 }' new int[] { 1 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestNoPattern,The following statement contains a magic number: TestPatterns("foobarbaz"' new string[] { }' new string[] { "foobarbaz" }' new int[] { 0 }' new int[] { 9 }' new int[] { 1 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestNoPattern,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { }' new string[] { "foo"' "bar"' "baz" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestNoPattern,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { }' new string[] { "foo"' "bar"' "baz" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestNoPattern,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { }' new string[] { "foo"' "bar"' "baz" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestNoPattern,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { }' new string[] { "foo"' "bar"' "baz" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestNoPattern,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { }' new string[] { "foo"' "bar"' "baz" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestNoPattern,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { }' new string[] { "foo"' "bar"' "baz" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestNoPattern,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { }' new string[] { "foo"' "bar"' "baz" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestNoPattern,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { }' new string[] { "foo"' "bar"' "baz" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestNoPattern,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { }' new string[] { "foo"' "bar"' "baz" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestNoPattern,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { }' new string[] { "foo"' "bar"' "baz" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestNoMatch,The following statement contains a magic number: TestPatterns("foobarbaz"' new string[] { "xx" }' new string[] { "foobarbaz" }' new int[] { 0 }' new int[] { 9 }' new int[] { 1 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestNoMatch,The following statement contains a magic number: TestPatterns("foobarbaz"' new string[] { "xx" }' new string[] { "foobarbaz" }' new int[] { 0 }' new int[] { 9 }' new int[] { 1 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestNoMatch,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "xx" }' new string[] { "foo"' "bar"' "baz" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestNoMatch,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "xx" }' new string[] { "foo"' "bar"' "baz" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestNoMatch,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "xx" }' new string[] { "foo"' "bar"' "baz" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestNoMatch,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "xx" }' new string[] { "foo"' "bar"' "baz" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestNoMatch,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "xx" }' new string[] { "foo"' "bar"' "baz" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestNoMatch,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "xx" }' new string[] { "foo"' "bar"' "baz" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestNoMatch,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "xx" }' new string[] { "foo"' "bar"' "baz" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestNoMatch,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "xx" }' new string[] { "foo"' "bar"' "baz" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestNoMatch,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "xx" }' new string[] { "foo"' "bar"' "baz" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestNoMatch,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "xx" }' new string[] { "foo"' "bar"' "baz" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestNoCapture,The following statement contains a magic number: TestPatterns("foobarbaz"' new string[] { ".." }' new string[] { "foobarbaz" }' new int[] { 0 }' new int[] { 9 }' new int[] { 1 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestNoCapture,The following statement contains a magic number: TestPatterns("foobarbaz"' new string[] { ".." }' new string[] { "foobarbaz" }' new int[] { 0 }' new int[] { 9 }' new int[] { 1 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestNoCapture,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { ".." }' new string[] { "foo"' "bar"' "baz" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestNoCapture,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { ".." }' new string[] { "foo"' "bar"' "baz" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestNoCapture,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { ".." }' new string[] { "foo"' "bar"' "baz" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestNoCapture,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { ".." }' new string[] { "foo"' "bar"' "baz" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestNoCapture,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { ".." }' new string[] { "foo"' "bar"' "baz" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestNoCapture,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { ".." }' new string[] { "foo"' "bar"' "baz" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestNoCapture,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { ".." }' new string[] { "foo"' "bar"' "baz" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestNoCapture,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { ".." }' new string[] { "foo"' "bar"' "baz" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestNoCapture,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { ".." }' new string[] { "foo"' "bar"' "baz" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestNoCapture,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { ".." }' new string[] { "foo"' "bar"' "baz" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestEmptyCapture,The following statement contains a magic number: TestPatterns("foobarbaz"' new string[] { ".(y*)" }' new string[] { "foobarbaz" }' new int[] { 0 }' new int[] { 9 }' new int[] { 1 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestEmptyCapture,The following statement contains a magic number: TestPatterns("foobarbaz"' new string[] { ".(y*)" }' new string[] { "foobarbaz" }' new int[] { 0 }' new int[] { 9 }' new int[] { 1 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestEmptyCapture,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { ".(y*)" }' new string[] { "foo"' "bar"' "baz" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestEmptyCapture,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { ".(y*)" }' new string[] { "foo"' "bar"' "baz" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestEmptyCapture,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { ".(y*)" }' new string[] { "foo"' "bar"' "baz" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestEmptyCapture,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { ".(y*)" }' new string[] { "foo"' "bar"' "baz" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestEmptyCapture,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { ".(y*)" }' new string[] { "foo"' "bar"' "baz" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestEmptyCapture,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { ".(y*)" }' new string[] { "foo"' "bar"' "baz" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestEmptyCapture,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { ".(y*)" }' new string[] { "foo"' "bar"' "baz" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestEmptyCapture,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { ".(y*)" }' new string[] { "foo"' "bar"' "baz" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestEmptyCapture,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { ".(y*)" }' new string[] { "foo"' "bar"' "baz" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestEmptyCapture,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { ".(y*)" }' new string[] { "foo"' "bar"' "baz" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureAll,The following statement contains a magic number: TestPatterns("foobarbaz"' new string[] { "(.+)" }' new string[] { "foobarbaz" }' new int[] { 0 }' new int[] { 9 }' new int[] { 1 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureAll,The following statement contains a magic number: TestPatterns("foobarbaz"' new string[] { "(.+)" }' new string[] { "foobarbaz" }' new int[] { 0 }' new int[] { 9 }' new int[] { 1 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureAll,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.+)" }' new string[] { "foo"' "bar"' "baz" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureAll,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.+)" }' new string[] { "foo"' "bar"' "baz" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureAll,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.+)" }' new string[] { "foo"' "bar"' "baz" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureAll,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.+)" }' new string[] { "foo"' "bar"' "baz" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureAll,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.+)" }' new string[] { "foo"' "bar"' "baz" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureAll,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.+)" }' new string[] { "foo"' "bar"' "baz" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureAll,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.+)" }' new string[] { "foo"' "bar"' "baz" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureAll,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.+)" }' new string[] { "foo"' "bar"' "baz" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureAll,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.+)" }' new string[] { "foo"' "bar"' "baz" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureAll,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.+)" }' new string[] { "foo"' "bar"' "baz" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStart,The following statement contains a magic number: TestPatterns("foobarbaz"' new string[] { "^(.)" }' new string[] { "f" }' new int[] { 0 }' new int[] { 9 }' new int[] { 1 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStart,The following statement contains a magic number: TestPatterns("foobarbaz"' new string[] { "^(.)" }' new string[] { "foobarbaz"' "f" }' new int[] { 0' 0 }' new int[] { 9' 9 }' new int[] { 1' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStart,The following statement contains a magic number: TestPatterns("foobarbaz"' new string[] { "^(.)" }' new string[] { "foobarbaz"' "f" }' new int[] { 0' 0 }' new int[] { 9' 9 }' new int[] { 1' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStart,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^(.)" }' new string[] { "f"' "b"' "b" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStart,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^(.)" }' new string[] { "f"' "b"' "b" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStart,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^(.)" }' new string[] { "f"' "b"' "b" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStart,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^(.)" }' new string[] { "f"' "b"' "b" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStart,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^(.)" }' new string[] { "f"' "b"' "b" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStart,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^(.)" }' new string[] { "foo"' "f"' "bar"' "b"' "baz"' "b" }' new int[] { 0' 0' 4' 4' 8' 8 }' new int[] { 3' 3' 7' 7' 11' 11 }' new int[] { 1' 0' 1' 0' 1' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStart,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^(.)" }' new string[] { "foo"' "f"' "bar"' "b"' "baz"' "b" }' new int[] { 0' 0' 4' 4' 8' 8 }' new int[] { 3' 3' 7' 7' 11' 11 }' new int[] { 1' 0' 1' 0' 1' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStart,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^(.)" }' new string[] { "foo"' "f"' "bar"' "b"' "baz"' "b" }' new int[] { 0' 0' 4' 4' 8' 8 }' new int[] { 3' 3' 7' 7' 11' 11 }' new int[] { 1' 0' 1' 0' 1' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStart,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^(.)" }' new string[] { "foo"' "f"' "bar"' "b"' "baz"' "b" }' new int[] { 0' 0' 4' 4' 8' 8 }' new int[] { 3' 3' 7' 7' 11' 11 }' new int[] { 1' 0' 1' 0' 1' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStart,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^(.)" }' new string[] { "foo"' "f"' "bar"' "b"' "baz"' "b" }' new int[] { 0' 0' 4' 4' 8' 8 }' new int[] { 3' 3' 7' 7' 11' 11 }' new int[] { 1' 0' 1' 0' 1' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStart,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^(.)" }' new string[] { "foo"' "f"' "bar"' "b"' "baz"' "b" }' new int[] { 0' 0' 4' 4' 8' 8 }' new int[] { 3' 3' 7' 7' 11' 11 }' new int[] { 1' 0' 1' 0' 1' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStart,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^(.)" }' new string[] { "foo"' "f"' "bar"' "b"' "baz"' "b" }' new int[] { 0' 0' 4' 4' 8' 8 }' new int[] { 3' 3' 7' 7' 11' 11 }' new int[] { 1' 0' 1' 0' 1' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStart,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^(.)" }' new string[] { "foo"' "f"' "bar"' "b"' "baz"' "b" }' new int[] { 0' 0' 4' 4' 8' 8 }' new int[] { 3' 3' 7' 7' 11' 11 }' new int[] { 1' 0' 1' 0' 1' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStart,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^(.)" }' new string[] { "foo"' "f"' "bar"' "b"' "baz"' "b" }' new int[] { 0' 0' 4' 4' 8' 8 }' new int[] { 3' 3' 7' 7' 11' 11 }' new int[] { 1' 0' 1' 0' 1' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStart,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^(.)" }' new string[] { "foo"' "f"' "bar"' "b"' "baz"' "b" }' new int[] { 0' 0' 4' 4' 8' 8 }' new int[] { 3' 3' 7' 7' 11' 11 }' new int[] { 1' 0' 1' 0' 1' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureMiddle,The following statement contains a magic number: TestPatterns("foobarbaz"' new string[] { "^.(.)." }' new string[] { "o" }' new int[] { 0 }' new int[] { 9 }' new int[] { 1 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureMiddle,The following statement contains a magic number: TestPatterns("foobarbaz"' new string[] { "^.(.)." }' new string[] { "foobarbaz"' "o" }' new int[] { 0' 0 }' new int[] { 9' 9 }' new int[] { 1' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureMiddle,The following statement contains a magic number: TestPatterns("foobarbaz"' new string[] { "^.(.)." }' new string[] { "foobarbaz"' "o" }' new int[] { 0' 0 }' new int[] { 9' 9 }' new int[] { 1' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureMiddle,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^.(.)." }' new string[] { "o"' "a"' "a" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureMiddle,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^.(.)." }' new string[] { "o"' "a"' "a" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureMiddle,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^.(.)." }' new string[] { "o"' "a"' "a" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureMiddle,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^.(.)." }' new string[] { "o"' "a"' "a" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureMiddle,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^.(.)." }' new string[] { "o"' "a"' "a" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureMiddle,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^.(.)." }' new string[] { "foo"' "o"' "bar"' "a"' "baz"' "a" }' new int[] { 0' 0' 4' 4' 8' 8 }' new int[] { 3' 3' 7' 7' 11' 11 }' new int[] { 1' 0' 1' 0' 1' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureMiddle,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^.(.)." }' new string[] { "foo"' "o"' "bar"' "a"' "baz"' "a" }' new int[] { 0' 0' 4' 4' 8' 8 }' new int[] { 3' 3' 7' 7' 11' 11 }' new int[] { 1' 0' 1' 0' 1' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureMiddle,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^.(.)." }' new string[] { "foo"' "o"' "bar"' "a"' "baz"' "a" }' new int[] { 0' 0' 4' 4' 8' 8 }' new int[] { 3' 3' 7' 7' 11' 11 }' new int[] { 1' 0' 1' 0' 1' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureMiddle,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^.(.)." }' new string[] { "foo"' "o"' "bar"' "a"' "baz"' "a" }' new int[] { 0' 0' 4' 4' 8' 8 }' new int[] { 3' 3' 7' 7' 11' 11 }' new int[] { 1' 0' 1' 0' 1' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureMiddle,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^.(.)." }' new string[] { "foo"' "o"' "bar"' "a"' "baz"' "a" }' new int[] { 0' 0' 4' 4' 8' 8 }' new int[] { 3' 3' 7' 7' 11' 11 }' new int[] { 1' 0' 1' 0' 1' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureMiddle,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^.(.)." }' new string[] { "foo"' "o"' "bar"' "a"' "baz"' "a" }' new int[] { 0' 0' 4' 4' 8' 8 }' new int[] { 3' 3' 7' 7' 11' 11 }' new int[] { 1' 0' 1' 0' 1' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureMiddle,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^.(.)." }' new string[] { "foo"' "o"' "bar"' "a"' "baz"' "a" }' new int[] { 0' 0' 4' 4' 8' 8 }' new int[] { 3' 3' 7' 7' 11' 11 }' new int[] { 1' 0' 1' 0' 1' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureMiddle,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^.(.)." }' new string[] { "foo"' "o"' "bar"' "a"' "baz"' "a" }' new int[] { 0' 0' 4' 4' 8' 8 }' new int[] { 3' 3' 7' 7' 11' 11 }' new int[] { 1' 0' 1' 0' 1' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureMiddle,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^.(.)." }' new string[] { "foo"' "o"' "bar"' "a"' "baz"' "a" }' new int[] { 0' 0' 4' 4' 8' 8 }' new int[] { 3' 3' 7' 7' 11' 11 }' new int[] { 1' 0' 1' 0' 1' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureMiddle,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^.(.)." }' new string[] { "foo"' "o"' "bar"' "a"' "baz"' "a" }' new int[] { 0' 0' 4' 4' 8' 8 }' new int[] { 3' 3' 7' 7' 11' 11 }' new int[] { 1' 0' 1' 0' 1' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureEnd,The following statement contains a magic number: TestPatterns("foobarbaz"' new string[] { "(.)$" }' new string[] { "z" }' new int[] { 0 }' new int[] { 9 }' new int[] { 1 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureEnd,The following statement contains a magic number: TestPatterns("foobarbaz"' new string[] { "(.)$" }' new string[] { "foobarbaz"' "z" }' new int[] { 0' 0 }' new int[] { 9' 9 }' new int[] { 1' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureEnd,The following statement contains a magic number: TestPatterns("foobarbaz"' new string[] { "(.)$" }' new string[] { "foobarbaz"' "z" }' new int[] { 0' 0 }' new int[] { 9' 9 }' new int[] { 1' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureEnd,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.)$" }' new string[] { "o"' "r"' "z" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureEnd,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.)$" }' new string[] { "o"' "r"' "z" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureEnd,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.)$" }' new string[] { "o"' "r"' "z" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureEnd,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.)$" }' new string[] { "o"' "r"' "z" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureEnd,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.)$" }' new string[] { "o"' "r"' "z" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureEnd,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.)$" }' new string[] { "foo"' "o"' "bar"' "r"' "baz"' "z" }' new int[] { 0' 0' 4' 4' 8' 8 }' new int[] { 3' 3' 7' 7' 11' 11 }' new int[] { 1' 0' 1' 0' 1' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureEnd,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.)$" }' new string[] { "foo"' "o"' "bar"' "r"' "baz"' "z" }' new int[] { 0' 0' 4' 4' 8' 8 }' new int[] { 3' 3' 7' 7' 11' 11 }' new int[] { 1' 0' 1' 0' 1' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureEnd,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.)$" }' new string[] { "foo"' "o"' "bar"' "r"' "baz"' "z" }' new int[] { 0' 0' 4' 4' 8' 8 }' new int[] { 3' 3' 7' 7' 11' 11 }' new int[] { 1' 0' 1' 0' 1' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureEnd,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.)$" }' new string[] { "foo"' "o"' "bar"' "r"' "baz"' "z" }' new int[] { 0' 0' 4' 4' 8' 8 }' new int[] { 3' 3' 7' 7' 11' 11 }' new int[] { 1' 0' 1' 0' 1' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureEnd,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.)$" }' new string[] { "foo"' "o"' "bar"' "r"' "baz"' "z" }' new int[] { 0' 0' 4' 4' 8' 8 }' new int[] { 3' 3' 7' 7' 11' 11 }' new int[] { 1' 0' 1' 0' 1' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureEnd,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.)$" }' new string[] { "foo"' "o"' "bar"' "r"' "baz"' "z" }' new int[] { 0' 0' 4' 4' 8' 8 }' new int[] { 3' 3' 7' 7' 11' 11 }' new int[] { 1' 0' 1' 0' 1' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureEnd,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.)$" }' new string[] { "foo"' "o"' "bar"' "r"' "baz"' "z" }' new int[] { 0' 0' 4' 4' 8' 8 }' new int[] { 3' 3' 7' 7' 11' 11 }' new int[] { 1' 0' 1' 0' 1' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureEnd,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.)$" }' new string[] { "foo"' "o"' "bar"' "r"' "baz"' "z" }' new int[] { 0' 0' 4' 4' 8' 8 }' new int[] { 3' 3' 7' 7' 11' 11 }' new int[] { 1' 0' 1' 0' 1' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureEnd,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.)$" }' new string[] { "foo"' "o"' "bar"' "r"' "baz"' "z" }' new int[] { 0' 0' 4' 4' 8' 8 }' new int[] { 3' 3' 7' 7' 11' 11 }' new int[] { 1' 0' 1' 0' 1' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureEnd,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.)$" }' new string[] { "foo"' "o"' "bar"' "r"' "baz"' "z" }' new int[] { 0' 0' 4' 4' 8' 8 }' new int[] { 3' 3' 7' 7' 11' 11 }' new int[] { 1' 0' 1' 0' 1' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStartMiddle,The following statement contains a magic number: TestPatterns("foobarbaz"' new string[] { "^(.)(.)" }' new string[] { "f"' "o" }' new int[] { 0' 0 }' new int[] { 9' 9 }' new int[] { 1' 0 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStartMiddle,The following statement contains a magic number: TestPatterns("foobarbaz"' new string[] { "^(.)(.)" }' new string[] { "f"' "o" }' new int[] { 0' 0 }' new int[] { 9' 9 }' new int[] { 1' 0 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStartMiddle,The following statement contains a magic number: TestPatterns("foobarbaz"' new string[] { "^(.)(.)" }' new string[] { "foobarbaz"' "f"' "o" }' new int[] { 0' 0' 0 }' new int[] { 9' 9' 9 }' new int[] { 1' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStartMiddle,The following statement contains a magic number: TestPatterns("foobarbaz"' new string[] { "^(.)(.)" }' new string[] { "foobarbaz"' "f"' "o" }' new int[] { 0' 0' 0 }' new int[] { 9' 9' 9 }' new int[] { 1' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStartMiddle,The following statement contains a magic number: TestPatterns("foobarbaz"' new string[] { "^(.)(.)" }' new string[] { "foobarbaz"' "f"' "o" }' new int[] { 0' 0' 0 }' new int[] { 9' 9' 9 }' new int[] { 1' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStartMiddle,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^(.)(.)" }' new string[] { "f"' "o"' "b"' "a"' "b"' "a" }' new int[] { 0' 0' 4' 4' 8' 8 }' new int[] { 3' 3' 7' 7' 11' 11 }' new int[] { 1' 0' 1' 0' 1' 0 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStartMiddle,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^(.)(.)" }' new string[] { "f"' "o"' "b"' "a"' "b"' "a" }' new int[] { 0' 0' 4' 4' 8' 8 }' new int[] { 3' 3' 7' 7' 11' 11 }' new int[] { 1' 0' 1' 0' 1' 0 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStartMiddle,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^(.)(.)" }' new string[] { "f"' "o"' "b"' "a"' "b"' "a" }' new int[] { 0' 0' 4' 4' 8' 8 }' new int[] { 3' 3' 7' 7' 11' 11 }' new int[] { 1' 0' 1' 0' 1' 0 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStartMiddle,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^(.)(.)" }' new string[] { "f"' "o"' "b"' "a"' "b"' "a" }' new int[] { 0' 0' 4' 4' 8' 8 }' new int[] { 3' 3' 7' 7' 11' 11 }' new int[] { 1' 0' 1' 0' 1' 0 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStartMiddle,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^(.)(.)" }' new string[] { "f"' "o"' "b"' "a"' "b"' "a" }' new int[] { 0' 0' 4' 4' 8' 8 }' new int[] { 3' 3' 7' 7' 11' 11 }' new int[] { 1' 0' 1' 0' 1' 0 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStartMiddle,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^(.)(.)" }' new string[] { "f"' "o"' "b"' "a"' "b"' "a" }' new int[] { 0' 0' 4' 4' 8' 8 }' new int[] { 3' 3' 7' 7' 11' 11 }' new int[] { 1' 0' 1' 0' 1' 0 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStartMiddle,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^(.)(.)" }' new string[] { "f"' "o"' "b"' "a"' "b"' "a" }' new int[] { 0' 0' 4' 4' 8' 8 }' new int[] { 3' 3' 7' 7' 11' 11 }' new int[] { 1' 0' 1' 0' 1' 0 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStartMiddle,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^(.)(.)" }' new string[] { "f"' "o"' "b"' "a"' "b"' "a" }' new int[] { 0' 0' 4' 4' 8' 8 }' new int[] { 3' 3' 7' 7' 11' 11 }' new int[] { 1' 0' 1' 0' 1' 0 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStartMiddle,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^(.)(.)" }' new string[] { "f"' "o"' "b"' "a"' "b"' "a" }' new int[] { 0' 0' 4' 4' 8' 8 }' new int[] { 3' 3' 7' 7' 11' 11 }' new int[] { 1' 0' 1' 0' 1' 0 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStartMiddle,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^(.)(.)" }' new string[] { "f"' "o"' "b"' "a"' "b"' "a" }' new int[] { 0' 0' 4' 4' 8' 8 }' new int[] { 3' 3' 7' 7' 11' 11 }' new int[] { 1' 0' 1' 0' 1' 0 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStartMiddle,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^(.)(.)" }' new string[] { "foo"' "f"' "o"' "bar"' "b"' "a"' "baz"' "b"' "a" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStartMiddle,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^(.)(.)" }' new string[] { "foo"' "f"' "o"' "bar"' "b"' "a"' "baz"' "b"' "a" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStartMiddle,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^(.)(.)" }' new string[] { "foo"' "f"' "o"' "bar"' "b"' "a"' "baz"' "b"' "a" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStartMiddle,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^(.)(.)" }' new string[] { "foo"' "f"' "o"' "bar"' "b"' "a"' "baz"' "b"' "a" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStartMiddle,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^(.)(.)" }' new string[] { "foo"' "f"' "o"' "bar"' "b"' "a"' "baz"' "b"' "a" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStartMiddle,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^(.)(.)" }' new string[] { "foo"' "f"' "o"' "bar"' "b"' "a"' "baz"' "b"' "a" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStartMiddle,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^(.)(.)" }' new string[] { "foo"' "f"' "o"' "bar"' "b"' "a"' "baz"' "b"' "a" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStartMiddle,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^(.)(.)" }' new string[] { "foo"' "f"' "o"' "bar"' "b"' "a"' "baz"' "b"' "a" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStartMiddle,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^(.)(.)" }' new string[] { "foo"' "f"' "o"' "bar"' "b"' "a"' "baz"' "b"' "a" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStartMiddle,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^(.)(.)" }' new string[] { "foo"' "f"' "o"' "bar"' "b"' "a"' "baz"' "b"' "a" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStartMiddle,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^(.)(.)" }' new string[] { "foo"' "f"' "o"' "bar"' "b"' "a"' "baz"' "b"' "a" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStartMiddle,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^(.)(.)" }' new string[] { "foo"' "f"' "o"' "bar"' "b"' "a"' "baz"' "b"' "a" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStartMiddle,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^(.)(.)" }' new string[] { "foo"' "f"' "o"' "bar"' "b"' "a"' "baz"' "b"' "a" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStartMiddle,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^(.)(.)" }' new string[] { "foo"' "f"' "o"' "bar"' "b"' "a"' "baz"' "b"' "a" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStartMiddle,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^(.)(.)" }' new string[] { "foo"' "f"' "o"' "bar"' "b"' "a"' "baz"' "b"' "a" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStartEnd,The following statement contains a magic number: TestPatterns("foobarbaz"' new string[] { "^(.).+(.)$" }' new string[] { "f"' "z" }' new int[] { 0' 0 }' new int[] { 9' 9 }' new int[] { 1' 0 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStartEnd,The following statement contains a magic number: TestPatterns("foobarbaz"' new string[] { "^(.).+(.)$" }' new string[] { "f"' "z" }' new int[] { 0' 0 }' new int[] { 9' 9 }' new int[] { 1' 0 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStartEnd,The following statement contains a magic number: TestPatterns("foobarbaz"' new string[] { "^(.).+(.)$" }' new string[] { "foobarbaz"' "f"' "z" }' new int[] { 0' 0' 0 }' new int[] { 9' 9' 9 }' new int[] { 1' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStartEnd,The following statement contains a magic number: TestPatterns("foobarbaz"' new string[] { "^(.).+(.)$" }' new string[] { "foobarbaz"' "f"' "z" }' new int[] { 0' 0' 0 }' new int[] { 9' 9' 9 }' new int[] { 1' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStartEnd,The following statement contains a magic number: TestPatterns("foobarbaz"' new string[] { "^(.).+(.)$" }' new string[] { "foobarbaz"' "f"' "z" }' new int[] { 0' 0' 0 }' new int[] { 9' 9' 9 }' new int[] { 1' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStartEnd,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^(.).+(.)$" }' new string[] { "f"' "o"' "b"' "r"' "b"' "z" }' new int[] { 0' 0' 4' 4' 8' 8 }' new int[] { 3' 3' 7' 7' 11' 11 }' new int[] { 1' 0' 1' 0' 1' 0 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStartEnd,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^(.).+(.)$" }' new string[] { "f"' "o"' "b"' "r"' "b"' "z" }' new int[] { 0' 0' 4' 4' 8' 8 }' new int[] { 3' 3' 7' 7' 11' 11 }' new int[] { 1' 0' 1' 0' 1' 0 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStartEnd,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^(.).+(.)$" }' new string[] { "f"' "o"' "b"' "r"' "b"' "z" }' new int[] { 0' 0' 4' 4' 8' 8 }' new int[] { 3' 3' 7' 7' 11' 11 }' new int[] { 1' 0' 1' 0' 1' 0 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStartEnd,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^(.).+(.)$" }' new string[] { "f"' "o"' "b"' "r"' "b"' "z" }' new int[] { 0' 0' 4' 4' 8' 8 }' new int[] { 3' 3' 7' 7' 11' 11 }' new int[] { 1' 0' 1' 0' 1' 0 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStartEnd,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^(.).+(.)$" }' new string[] { "f"' "o"' "b"' "r"' "b"' "z" }' new int[] { 0' 0' 4' 4' 8' 8 }' new int[] { 3' 3' 7' 7' 11' 11 }' new int[] { 1' 0' 1' 0' 1' 0 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStartEnd,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^(.).+(.)$" }' new string[] { "f"' "o"' "b"' "r"' "b"' "z" }' new int[] { 0' 0' 4' 4' 8' 8 }' new int[] { 3' 3' 7' 7' 11' 11 }' new int[] { 1' 0' 1' 0' 1' 0 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStartEnd,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^(.).+(.)$" }' new string[] { "f"' "o"' "b"' "r"' "b"' "z" }' new int[] { 0' 0' 4' 4' 8' 8 }' new int[] { 3' 3' 7' 7' 11' 11 }' new int[] { 1' 0' 1' 0' 1' 0 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStartEnd,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^(.).+(.)$" }' new string[] { "f"' "o"' "b"' "r"' "b"' "z" }' new int[] { 0' 0' 4' 4' 8' 8 }' new int[] { 3' 3' 7' 7' 11' 11 }' new int[] { 1' 0' 1' 0' 1' 0 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStartEnd,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^(.).+(.)$" }' new string[] { "f"' "o"' "b"' "r"' "b"' "z" }' new int[] { 0' 0' 4' 4' 8' 8 }' new int[] { 3' 3' 7' 7' 11' 11 }' new int[] { 1' 0' 1' 0' 1' 0 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStartEnd,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^(.).+(.)$" }' new string[] { "f"' "o"' "b"' "r"' "b"' "z" }' new int[] { 0' 0' 4' 4' 8' 8 }' new int[] { 3' 3' 7' 7' 11' 11 }' new int[] { 1' 0' 1' 0' 1' 0 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStartEnd,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^(.).+(.)$" }' new string[] { "foo"' "f"' "o"' "bar"' "b"' "r"' "baz"' "b"' "z" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStartEnd,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^(.).+(.)$" }' new string[] { "foo"' "f"' "o"' "bar"' "b"' "r"' "baz"' "b"' "z" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStartEnd,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^(.).+(.)$" }' new string[] { "foo"' "f"' "o"' "bar"' "b"' "r"' "baz"' "b"' "z" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStartEnd,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^(.).+(.)$" }' new string[] { "foo"' "f"' "o"' "bar"' "b"' "r"' "baz"' "b"' "z" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStartEnd,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^(.).+(.)$" }' new string[] { "foo"' "f"' "o"' "bar"' "b"' "r"' "baz"' "b"' "z" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStartEnd,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^(.).+(.)$" }' new string[] { "foo"' "f"' "o"' "bar"' "b"' "r"' "baz"' "b"' "z" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStartEnd,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^(.).+(.)$" }' new string[] { "foo"' "f"' "o"' "bar"' "b"' "r"' "baz"' "b"' "z" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStartEnd,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^(.).+(.)$" }' new string[] { "foo"' "f"' "o"' "bar"' "b"' "r"' "baz"' "b"' "z" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStartEnd,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^(.).+(.)$" }' new string[] { "foo"' "f"' "o"' "bar"' "b"' "r"' "baz"' "b"' "z" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStartEnd,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^(.).+(.)$" }' new string[] { "foo"' "f"' "o"' "bar"' "b"' "r"' "baz"' "b"' "z" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStartEnd,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^(.).+(.)$" }' new string[] { "foo"' "f"' "o"' "bar"' "b"' "r"' "baz"' "b"' "z" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStartEnd,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^(.).+(.)$" }' new string[] { "foo"' "f"' "o"' "bar"' "b"' "r"' "baz"' "b"' "z" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStartEnd,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^(.).+(.)$" }' new string[] { "foo"' "f"' "o"' "bar"' "b"' "r"' "baz"' "b"' "z" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStartEnd,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^(.).+(.)$" }' new string[] { "foo"' "f"' "o"' "bar"' "b"' "r"' "baz"' "b"' "z" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureStartEnd,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "^(.).+(.)$" }' new string[] { "foo"' "f"' "o"' "bar"' "b"' "r"' "baz"' "b"' "z" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureMiddleEnd,The following statement contains a magic number: TestPatterns("foobarbaz"' new string[] { "(.)(.)$" }' new string[] { "a"' "z" }' new int[] { 0' 0 }' new int[] { 9' 9 }' new int[] { 1' 0 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureMiddleEnd,The following statement contains a magic number: TestPatterns("foobarbaz"' new string[] { "(.)(.)$" }' new string[] { "a"' "z" }' new int[] { 0' 0 }' new int[] { 9' 9 }' new int[] { 1' 0 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureMiddleEnd,The following statement contains a magic number: TestPatterns("foobarbaz"' new string[] { "(.)(.)$" }' new string[] { "foobarbaz"' "a"' "z" }' new int[] { 0' 0' 0 }' new int[] { 9' 9' 9 }' new int[] { 1' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureMiddleEnd,The following statement contains a magic number: TestPatterns("foobarbaz"' new string[] { "(.)(.)$" }' new string[] { "foobarbaz"' "a"' "z" }' new int[] { 0' 0' 0 }' new int[] { 9' 9' 9 }' new int[] { 1' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureMiddleEnd,The following statement contains a magic number: TestPatterns("foobarbaz"' new string[] { "(.)(.)$" }' new string[] { "foobarbaz"' "a"' "z" }' new int[] { 0' 0' 0 }' new int[] { 9' 9' 9 }' new int[] { 1' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureMiddleEnd,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.)(.)$" }' new string[] { "o"' "o"' "a"' "r"' "a"' "z" }' new int[] { 0' 0' 4' 4' 8' 8 }' new int[] { 3' 3' 7' 7' 11' 11 }' new int[] { 1' 0' 1' 0' 1' 0 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureMiddleEnd,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.)(.)$" }' new string[] { "o"' "o"' "a"' "r"' "a"' "z" }' new int[] { 0' 0' 4' 4' 8' 8 }' new int[] { 3' 3' 7' 7' 11' 11 }' new int[] { 1' 0' 1' 0' 1' 0 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureMiddleEnd,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.)(.)$" }' new string[] { "o"' "o"' "a"' "r"' "a"' "z" }' new int[] { 0' 0' 4' 4' 8' 8 }' new int[] { 3' 3' 7' 7' 11' 11 }' new int[] { 1' 0' 1' 0' 1' 0 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureMiddleEnd,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.)(.)$" }' new string[] { "o"' "o"' "a"' "r"' "a"' "z" }' new int[] { 0' 0' 4' 4' 8' 8 }' new int[] { 3' 3' 7' 7' 11' 11 }' new int[] { 1' 0' 1' 0' 1' 0 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureMiddleEnd,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.)(.)$" }' new string[] { "o"' "o"' "a"' "r"' "a"' "z" }' new int[] { 0' 0' 4' 4' 8' 8 }' new int[] { 3' 3' 7' 7' 11' 11 }' new int[] { 1' 0' 1' 0' 1' 0 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureMiddleEnd,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.)(.)$" }' new string[] { "o"' "o"' "a"' "r"' "a"' "z" }' new int[] { 0' 0' 4' 4' 8' 8 }' new int[] { 3' 3' 7' 7' 11' 11 }' new int[] { 1' 0' 1' 0' 1' 0 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureMiddleEnd,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.)(.)$" }' new string[] { "o"' "o"' "a"' "r"' "a"' "z" }' new int[] { 0' 0' 4' 4' 8' 8 }' new int[] { 3' 3' 7' 7' 11' 11 }' new int[] { 1' 0' 1' 0' 1' 0 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureMiddleEnd,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.)(.)$" }' new string[] { "o"' "o"' "a"' "r"' "a"' "z" }' new int[] { 0' 0' 4' 4' 8' 8 }' new int[] { 3' 3' 7' 7' 11' 11 }' new int[] { 1' 0' 1' 0' 1' 0 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureMiddleEnd,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.)(.)$" }' new string[] { "o"' "o"' "a"' "r"' "a"' "z" }' new int[] { 0' 0' 4' 4' 8' 8 }' new int[] { 3' 3' 7' 7' 11' 11 }' new int[] { 1' 0' 1' 0' 1' 0 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureMiddleEnd,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.)(.)$" }' new string[] { "o"' "o"' "a"' "r"' "a"' "z" }' new int[] { 0' 0' 4' 4' 8' 8 }' new int[] { 3' 3' 7' 7' 11' 11 }' new int[] { 1' 0' 1' 0' 1' 0 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureMiddleEnd,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.)(.)$" }' new string[] { "foo"' "o"' "o"' "bar"' "a"' "r"' "baz"' "a"' "z" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureMiddleEnd,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.)(.)$" }' new string[] { "foo"' "o"' "o"' "bar"' "a"' "r"' "baz"' "a"' "z" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureMiddleEnd,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.)(.)$" }' new string[] { "foo"' "o"' "o"' "bar"' "a"' "r"' "baz"' "a"' "z" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureMiddleEnd,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.)(.)$" }' new string[] { "foo"' "o"' "o"' "bar"' "a"' "r"' "baz"' "a"' "z" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureMiddleEnd,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.)(.)$" }' new string[] { "foo"' "o"' "o"' "bar"' "a"' "r"' "baz"' "a"' "z" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureMiddleEnd,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.)(.)$" }' new string[] { "foo"' "o"' "o"' "bar"' "a"' "r"' "baz"' "a"' "z" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureMiddleEnd,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.)(.)$" }' new string[] { "foo"' "o"' "o"' "bar"' "a"' "r"' "baz"' "a"' "z" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureMiddleEnd,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.)(.)$" }' new string[] { "foo"' "o"' "o"' "bar"' "a"' "r"' "baz"' "a"' "z" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureMiddleEnd,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.)(.)$" }' new string[] { "foo"' "o"' "o"' "bar"' "a"' "r"' "baz"' "a"' "z" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureMiddleEnd,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.)(.)$" }' new string[] { "foo"' "o"' "o"' "bar"' "a"' "r"' "baz"' "a"' "z" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureMiddleEnd,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.)(.)$" }' new string[] { "foo"' "o"' "o"' "bar"' "a"' "r"' "baz"' "a"' "z" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureMiddleEnd,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.)(.)$" }' new string[] { "foo"' "o"' "o"' "bar"' "a"' "r"' "baz"' "a"' "z" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureMiddleEnd,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.)(.)$" }' new string[] { "foo"' "o"' "o"' "bar"' "a"' "r"' "baz"' "a"' "z" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureMiddleEnd,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.)(.)$" }' new string[] { "foo"' "o"' "o"' "bar"' "a"' "r"' "baz"' "a"' "z" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCaptureMiddleEnd,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.)(.)$" }' new string[] { "foo"' "o"' "o"' "bar"' "a"' "r"' "baz"' "a"' "z" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestMultiCaptureOverlap,The following statement contains a magic number: TestPatterns("foobarbaz"' new string[] { "(.(.(.)))" }' new string[] { "foo"' "oo"' "o"' "bar"' "ar"' "r"' "baz"' "az"' "z" }' new int[] { 0' 0' 0' 0' 0' 0' 0' 0' 0 }' new int[] { 9' 9' 9' 9' 9' 9' 9' 9' 9 }' new int[] { 1' 0' 0' 0' 0' 0' 0' 0' 0 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestMultiCaptureOverlap,The following statement contains a magic number: TestPatterns("foobarbaz"' new string[] { "(.(.(.)))" }' new string[] { "foo"' "oo"' "o"' "bar"' "ar"' "r"' "baz"' "az"' "z" }' new int[] { 0' 0' 0' 0' 0' 0' 0' 0' 0 }' new int[] { 9' 9' 9' 9' 9' 9' 9' 9' 9 }' new int[] { 1' 0' 0' 0' 0' 0' 0' 0' 0 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestMultiCaptureOverlap,The following statement contains a magic number: TestPatterns("foobarbaz"' new string[] { "(.(.(.)))" }' new string[] { "foo"' "oo"' "o"' "bar"' "ar"' "r"' "baz"' "az"' "z" }' new int[] { 0' 0' 0' 0' 0' 0' 0' 0' 0 }' new int[] { 9' 9' 9' 9' 9' 9' 9' 9' 9 }' new int[] { 1' 0' 0' 0' 0' 0' 0' 0' 0 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestMultiCaptureOverlap,The following statement contains a magic number: TestPatterns("foobarbaz"' new string[] { "(.(.(.)))" }' new string[] { "foo"' "oo"' "o"' "bar"' "ar"' "r"' "baz"' "az"' "z" }' new int[] { 0' 0' 0' 0' 0' 0' 0' 0' 0 }' new int[] { 9' 9' 9' 9' 9' 9' 9' 9' 9 }' new int[] { 1' 0' 0' 0' 0' 0' 0' 0' 0 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestMultiCaptureOverlap,The following statement contains a magic number: TestPatterns("foobarbaz"' new string[] { "(.(.(.)))" }' new string[] { "foo"' "oo"' "o"' "bar"' "ar"' "r"' "baz"' "az"' "z" }' new int[] { 0' 0' 0' 0' 0' 0' 0' 0' 0 }' new int[] { 9' 9' 9' 9' 9' 9' 9' 9' 9 }' new int[] { 1' 0' 0' 0' 0' 0' 0' 0' 0 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestMultiCaptureOverlap,The following statement contains a magic number: TestPatterns("foobarbaz"' new string[] { "(.(.(.)))" }' new string[] { "foo"' "oo"' "o"' "bar"' "ar"' "r"' "baz"' "az"' "z" }' new int[] { 0' 0' 0' 0' 0' 0' 0' 0' 0 }' new int[] { 9' 9' 9' 9' 9' 9' 9' 9' 9 }' new int[] { 1' 0' 0' 0' 0' 0' 0' 0' 0 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestMultiCaptureOverlap,The following statement contains a magic number: TestPatterns("foobarbaz"' new string[] { "(.(.(.)))" }' new string[] { "foo"' "oo"' "o"' "bar"' "ar"' "r"' "baz"' "az"' "z" }' new int[] { 0' 0' 0' 0' 0' 0' 0' 0' 0 }' new int[] { 9' 9' 9' 9' 9' 9' 9' 9' 9 }' new int[] { 1' 0' 0' 0' 0' 0' 0' 0' 0 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestMultiCaptureOverlap,The following statement contains a magic number: TestPatterns("foobarbaz"' new string[] { "(.(.(.)))" }' new string[] { "foo"' "oo"' "o"' "bar"' "ar"' "r"' "baz"' "az"' "z" }' new int[] { 0' 0' 0' 0' 0' 0' 0' 0' 0 }' new int[] { 9' 9' 9' 9' 9' 9' 9' 9' 9 }' new int[] { 1' 0' 0' 0' 0' 0' 0' 0' 0 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestMultiCaptureOverlap,The following statement contains a magic number: TestPatterns("foobarbaz"' new string[] { "(.(.(.)))" }' new string[] { "foo"' "oo"' "o"' "bar"' "ar"' "r"' "baz"' "az"' "z" }' new int[] { 0' 0' 0' 0' 0' 0' 0' 0' 0 }' new int[] { 9' 9' 9' 9' 9' 9' 9' 9' 9 }' new int[] { 1' 0' 0' 0' 0' 0' 0' 0' 0 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestMultiCaptureOverlap,The following statement contains a magic number: TestPatterns("foobarbaz"' new string[] { "(.(.(.)))" }' new string[] { "foobarbaz"' "foo"' "oo"' "o"' "bar"' "ar"' "r"' "baz"' "az"' "z" }' new int[] { 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' new int[] { 9' 9' 9' 9' 9' 9' 9' 9' 9' 9 }' new int[] { 1' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestMultiCaptureOverlap,The following statement contains a magic number: TestPatterns("foobarbaz"' new string[] { "(.(.(.)))" }' new string[] { "foobarbaz"' "foo"' "oo"' "o"' "bar"' "ar"' "r"' "baz"' "az"' "z" }' new int[] { 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' new int[] { 9' 9' 9' 9' 9' 9' 9' 9' 9' 9 }' new int[] { 1' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestMultiCaptureOverlap,The following statement contains a magic number: TestPatterns("foobarbaz"' new string[] { "(.(.(.)))" }' new string[] { "foobarbaz"' "foo"' "oo"' "o"' "bar"' "ar"' "r"' "baz"' "az"' "z" }' new int[] { 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' new int[] { 9' 9' 9' 9' 9' 9' 9' 9' 9' 9 }' new int[] { 1' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestMultiCaptureOverlap,The following statement contains a magic number: TestPatterns("foobarbaz"' new string[] { "(.(.(.)))" }' new string[] { "foobarbaz"' "foo"' "oo"' "o"' "bar"' "ar"' "r"' "baz"' "az"' "z" }' new int[] { 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' new int[] { 9' 9' 9' 9' 9' 9' 9' 9' 9' 9 }' new int[] { 1' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestMultiCaptureOverlap,The following statement contains a magic number: TestPatterns("foobarbaz"' new string[] { "(.(.(.)))" }' new string[] { "foobarbaz"' "foo"' "oo"' "o"' "bar"' "ar"' "r"' "baz"' "az"' "z" }' new int[] { 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' new int[] { 9' 9' 9' 9' 9' 9' 9' 9' 9' 9 }' new int[] { 1' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestMultiCaptureOverlap,The following statement contains a magic number: TestPatterns("foobarbaz"' new string[] { "(.(.(.)))" }' new string[] { "foobarbaz"' "foo"' "oo"' "o"' "bar"' "ar"' "r"' "baz"' "az"' "z" }' new int[] { 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' new int[] { 9' 9' 9' 9' 9' 9' 9' 9' 9' 9 }' new int[] { 1' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestMultiCaptureOverlap,The following statement contains a magic number: TestPatterns("foobarbaz"' new string[] { "(.(.(.)))" }' new string[] { "foobarbaz"' "foo"' "oo"' "o"' "bar"' "ar"' "r"' "baz"' "az"' "z" }' new int[] { 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' new int[] { 9' 9' 9' 9' 9' 9' 9' 9' 9' 9 }' new int[] { 1' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestMultiCaptureOverlap,The following statement contains a magic number: TestPatterns("foobarbaz"' new string[] { "(.(.(.)))" }' new string[] { "foobarbaz"' "foo"' "oo"' "o"' "bar"' "ar"' "r"' "baz"' "az"' "z" }' new int[] { 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' new int[] { 9' 9' 9' 9' 9' 9' 9' 9' 9' 9 }' new int[] { 1' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestMultiCaptureOverlap,The following statement contains a magic number: TestPatterns("foobarbaz"' new string[] { "(.(.(.)))" }' new string[] { "foobarbaz"' "foo"' "oo"' "o"' "bar"' "ar"' "r"' "baz"' "az"' "z" }' new int[] { 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' new int[] { 9' 9' 9' 9' 9' 9' 9' 9' 9' 9 }' new int[] { 1' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestMultiCaptureOverlap,The following statement contains a magic number: TestPatterns("foobarbaz"' new string[] { "(.(.(.)))" }' new string[] { "foobarbaz"' "foo"' "oo"' "o"' "bar"' "ar"' "r"' "baz"' "az"' "z" }' new int[] { 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' new int[] { 9' 9' 9' 9' 9' 9' 9' 9' 9' 9 }' new int[] { 1' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestMultiCaptureOverlap,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.(.(.)))" }' new string[] { "foo"' "oo"' "o"' "bar"' "ar"' "r"' "baz"' "az"' "z" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestMultiCaptureOverlap,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.(.(.)))" }' new string[] { "foo"' "oo"' "o"' "bar"' "ar"' "r"' "baz"' "az"' "z" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestMultiCaptureOverlap,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.(.(.)))" }' new string[] { "foo"' "oo"' "o"' "bar"' "ar"' "r"' "baz"' "az"' "z" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestMultiCaptureOverlap,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.(.(.)))" }' new string[] { "foo"' "oo"' "o"' "bar"' "ar"' "r"' "baz"' "az"' "z" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestMultiCaptureOverlap,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.(.(.)))" }' new string[] { "foo"' "oo"' "o"' "bar"' "ar"' "r"' "baz"' "az"' "z" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestMultiCaptureOverlap,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.(.(.)))" }' new string[] { "foo"' "oo"' "o"' "bar"' "ar"' "r"' "baz"' "az"' "z" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestMultiCaptureOverlap,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.(.(.)))" }' new string[] { "foo"' "oo"' "o"' "bar"' "ar"' "r"' "baz"' "az"' "z" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestMultiCaptureOverlap,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.(.(.)))" }' new string[] { "foo"' "oo"' "o"' "bar"' "ar"' "r"' "baz"' "az"' "z" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestMultiCaptureOverlap,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.(.(.)))" }' new string[] { "foo"' "oo"' "o"' "bar"' "ar"' "r"' "baz"' "az"' "z" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestMultiCaptureOverlap,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.(.(.)))" }' new string[] { "foo"' "oo"' "o"' "bar"' "ar"' "r"' "baz"' "az"' "z" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestMultiCaptureOverlap,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.(.(.)))" }' new string[] { "foo"' "oo"' "o"' "bar"' "ar"' "r"' "baz"' "az"' "z" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestMultiCaptureOverlap,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.(.(.)))" }' new string[] { "foo"' "oo"' "o"' "bar"' "ar"' "r"' "baz"' "az"' "z" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestMultiCaptureOverlap,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.(.(.)))" }' new string[] { "foo"' "oo"' "o"' "bar"' "ar"' "r"' "baz"' "az"' "z" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestMultiCaptureOverlap,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.(.(.)))" }' new string[] { "foo"' "oo"' "o"' "bar"' "ar"' "r"' "baz"' "az"' "z" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestMultiCaptureOverlap,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.(.(.)))" }' new string[] { "foo"' "oo"' "o"' "bar"' "ar"' "r"' "baz"' "az"' "z" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestMultiCaptureOverlap,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.(.(.)))" }' new string[] { "foo"' "oo"' "o"' "bar"' "ar"' "r"' "baz"' "az"' "z" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestMultiCaptureOverlap,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.(.(.)))" }' new string[] { "foo"' "oo"' "o"' "bar"' "ar"' "r"' "baz"' "az"' "z" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestMultiCaptureOverlap,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.(.(.)))" }' new string[] { "foo"' "oo"' "o"' "bar"' "ar"' "r"' "baz"' "az"' "z" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestMultiCaptureOverlap,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.(.(.)))" }' new string[] { "foo"' "oo"' "o"' "bar"' "ar"' "r"' "baz"' "az"' "z" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestMultiCaptureOverlap,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.(.(.)))" }' new string[] { "foo"' "oo"' "o"' "bar"' "ar"' "r"' "baz"' "az"' "z" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestMultiCaptureOverlap,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.(.(.)))" }' new string[] { "foo"' "oo"' "o"' "bar"' "ar"' "r"' "baz"' "az"' "z" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestMultiCaptureOverlap,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.(.(.)))" }' new string[] { "foo"' "oo"' "o"' "bar"' "ar"' "r"' "baz"' "az"' "z" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestMultiCaptureOverlap,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.(.(.)))" }' new string[] { "foo"' "oo"' "o"' "bar"' "ar"' "r"' "baz"' "az"' "z" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestMultiCaptureOverlap,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.(.(.)))" }' new string[] { "foo"' "oo"' "o"' "bar"' "ar"' "r"' "baz"' "az"' "z" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestMultiCaptureOverlap,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.(.(.)))" }' new string[] { "foo"' "oo"' "o"' "bar"' "ar"' "r"' "baz"' "az"' "z" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestMultiCaptureOverlap,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.(.(.)))" }' new string[] { "foo"' "oo"' "o"' "bar"' "ar"' "r"' "baz"' "az"' "z" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestMultiCaptureOverlap,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.(.(.)))" }' new string[] { "foo"' "oo"' "o"' "bar"' "ar"' "r"' "baz"' "az"' "z" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestMultiCaptureOverlap,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.(.(.)))" }' new string[] { "foo"' "oo"' "o"' "bar"' "ar"' "r"' "baz"' "az"' "z" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestMultiCaptureOverlap,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.(.(.)))" }' new string[] { "foo"' "oo"' "o"' "bar"' "ar"' "r"' "baz"' "az"' "z" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestMultiCaptureOverlap,The following statement contains a magic number: TestPatterns("foo bar baz"' new string[] { "(.(.(.)))" }' new string[] { "foo"' "oo"' "o"' "bar"' "ar"' "r"' "baz"' "az"' "z" }' new int[] { 0' 0' 0' 4' 4' 4' 8' 8' 8 }' new int[] { 3' 3' 3' 7' 7' 7' 11' 11' 11 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestMultiPattern,The following statement contains a magic number: TestPatterns("aaabbbaaa"' new string[] { "(aaa)"' "(bbb)"' "(ccc)" }' new string[] { "aaa"' "bbb"' "aaa" }' new int[] { 0' 0' 0 }' new int[] { 9' 9' 9 }' new int[] { 1' 0' 0 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestMultiPattern,The following statement contains a magic number: TestPatterns("aaabbbaaa"' new string[] { "(aaa)"' "(bbb)"' "(ccc)" }' new string[] { "aaa"' "bbb"' "aaa" }' new int[] { 0' 0' 0 }' new int[] { 9' 9' 9 }' new int[] { 1' 0' 0 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestMultiPattern,The following statement contains a magic number: TestPatterns("aaabbbaaa"' new string[] { "(aaa)"' "(bbb)"' "(ccc)" }' new string[] { "aaa"' "bbb"' "aaa" }' new int[] { 0' 0' 0 }' new int[] { 9' 9' 9 }' new int[] { 1' 0' 0 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestMultiPattern,The following statement contains a magic number: TestPatterns("aaabbbaaa"' new string[] { "(aaa)"' "(bbb)"' "(ccc)" }' new string[] { "aaabbbaaa"' "aaa"' "bbb"' "aaa" }' new int[] { 0' 0' 0' 0 }' new int[] { 9' 9' 9' 9 }' new int[] { 1' 0' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestMultiPattern,The following statement contains a magic number: TestPatterns("aaabbbaaa"' new string[] { "(aaa)"' "(bbb)"' "(ccc)" }' new string[] { "aaabbbaaa"' "aaa"' "bbb"' "aaa" }' new int[] { 0' 0' 0' 0 }' new int[] { 9' 9' 9' 9 }' new int[] { 1' 0' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestMultiPattern,The following statement contains a magic number: TestPatterns("aaabbbaaa"' new string[] { "(aaa)"' "(bbb)"' "(ccc)" }' new string[] { "aaabbbaaa"' "aaa"' "bbb"' "aaa" }' new int[] { 0' 0' 0' 0 }' new int[] { 9' 9' 9' 9 }' new int[] { 1' 0' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestMultiPattern,The following statement contains a magic number: TestPatterns("aaabbbaaa"' new string[] { "(aaa)"' "(bbb)"' "(ccc)" }' new string[] { "aaabbbaaa"' "aaa"' "bbb"' "aaa" }' new int[] { 0' 0' 0' 0 }' new int[] { 9' 9' 9' 9 }' new int[] { 1' 0' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestMultiPattern,The following statement contains a magic number: TestPatterns("aaa bbb aaa"' new string[] { "(aaa)"' "(bbb)"' "(ccc)" }' new string[] { "aaa"' "bbb"' "aaa" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestMultiPattern,The following statement contains a magic number: TestPatterns("aaa bbb aaa"' new string[] { "(aaa)"' "(bbb)"' "(ccc)" }' new string[] { "aaa"' "bbb"' "aaa" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestMultiPattern,The following statement contains a magic number: TestPatterns("aaa bbb aaa"' new string[] { "(aaa)"' "(bbb)"' "(ccc)" }' new string[] { "aaa"' "bbb"' "aaa" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestMultiPattern,The following statement contains a magic number: TestPatterns("aaa bbb aaa"' new string[] { "(aaa)"' "(bbb)"' "(ccc)" }' new string[] { "aaa"' "bbb"' "aaa" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestMultiPattern,The following statement contains a magic number: TestPatterns("aaa bbb aaa"' new string[] { "(aaa)"' "(bbb)"' "(ccc)" }' new string[] { "aaa"' "bbb"' "aaa" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestMultiPattern,The following statement contains a magic number: TestPatterns("aaa bbb aaa"' new string[] { "(aaa)"' "(bbb)"' "(ccc)" }' new string[] { "aaa"' "bbb"' "aaa" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestMultiPattern,The following statement contains a magic number: TestPatterns("aaa bbb aaa"' new string[] { "(aaa)"' "(bbb)"' "(ccc)" }' new string[] { "aaa"' "bbb"' "aaa" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestMultiPattern,The following statement contains a magic number: TestPatterns("aaa bbb aaa"' new string[] { "(aaa)"' "(bbb)"' "(ccc)" }' new string[] { "aaa"' "bbb"' "aaa" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestMultiPattern,The following statement contains a magic number: TestPatterns("aaa bbb aaa"' new string[] { "(aaa)"' "(bbb)"' "(ccc)" }' new string[] { "aaa"' "bbb"' "aaa" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestMultiPattern,The following statement contains a magic number: TestPatterns("aaa bbb aaa"' new string[] { "(aaa)"' "(bbb)"' "(ccc)" }' new string[] { "aaa"' "bbb"' "aaa" }' new int[] { 0' 4' 8 }' new int[] { 3' 7' 11 }' new int[] { 1' 1' 1 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCamelCase,The following statement contains a magic number: TestPatterns("letsPartyLIKEits1999_dude"' new string[] { "([A-Z]{2'})"' "(?<![A-Z])([A-Z][a-z]+)"' "(?:^|\\b|(?<=[0-9_])|(?<=[A-Z]{2}))([a-z]+)"' "([0-9]+)" }' new string[] { "lets"' "Party"' "LIKE"' "its"' "1999"' "dude" }' new int[] { 0' 0' 0' 0' 0' 0 }' new int[] { 25' 25' 25' 25' 25' 25 }' new int[] { 1' 0' 0' 0' 0' 0' 0 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCamelCase,The following statement contains a magic number: TestPatterns("letsPartyLIKEits1999_dude"' new string[] { "([A-Z]{2'})"' "(?<![A-Z])([A-Z][a-z]+)"' "(?:^|\\b|(?<=[0-9_])|(?<=[A-Z]{2}))([a-z]+)"' "([0-9]+)" }' new string[] { "lets"' "Party"' "LIKE"' "its"' "1999"' "dude" }' new int[] { 0' 0' 0' 0' 0' 0 }' new int[] { 25' 25' 25' 25' 25' 25 }' new int[] { 1' 0' 0' 0' 0' 0' 0 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCamelCase,The following statement contains a magic number: TestPatterns("letsPartyLIKEits1999_dude"' new string[] { "([A-Z]{2'})"' "(?<![A-Z])([A-Z][a-z]+)"' "(?:^|\\b|(?<=[0-9_])|(?<=[A-Z]{2}))([a-z]+)"' "([0-9]+)" }' new string[] { "lets"' "Party"' "LIKE"' "its"' "1999"' "dude" }' new int[] { 0' 0' 0' 0' 0' 0 }' new int[] { 25' 25' 25' 25' 25' 25 }' new int[] { 1' 0' 0' 0' 0' 0' 0 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCamelCase,The following statement contains a magic number: TestPatterns("letsPartyLIKEits1999_dude"' new string[] { "([A-Z]{2'})"' "(?<![A-Z])([A-Z][a-z]+)"' "(?:^|\\b|(?<=[0-9_])|(?<=[A-Z]{2}))([a-z]+)"' "([0-9]+)" }' new string[] { "lets"' "Party"' "LIKE"' "its"' "1999"' "dude" }' new int[] { 0' 0' 0' 0' 0' 0 }' new int[] { 25' 25' 25' 25' 25' 25 }' new int[] { 1' 0' 0' 0' 0' 0' 0 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCamelCase,The following statement contains a magic number: TestPatterns("letsPartyLIKEits1999_dude"' new string[] { "([A-Z]{2'})"' "(?<![A-Z])([A-Z][a-z]+)"' "(?:^|\\b|(?<=[0-9_])|(?<=[A-Z]{2}))([a-z]+)"' "([0-9]+)" }' new string[] { "lets"' "Party"' "LIKE"' "its"' "1999"' "dude" }' new int[] { 0' 0' 0' 0' 0' 0 }' new int[] { 25' 25' 25' 25' 25' 25 }' new int[] { 1' 0' 0' 0' 0' 0' 0 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCamelCase,The following statement contains a magic number: TestPatterns("letsPartyLIKEits1999_dude"' new string[] { "([A-Z]{2'})"' "(?<![A-Z])([A-Z][a-z]+)"' "(?:^|\\b|(?<=[0-9_])|(?<=[A-Z]{2}))([a-z]+)"' "([0-9]+)" }' new string[] { "lets"' "Party"' "LIKE"' "its"' "1999"' "dude" }' new int[] { 0' 0' 0' 0' 0' 0 }' new int[] { 25' 25' 25' 25' 25' 25 }' new int[] { 1' 0' 0' 0' 0' 0' 0 }' false);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCamelCase,The following statement contains a magic number: TestPatterns("letsPartyLIKEits1999_dude"' new string[] { "([A-Z]{2'})"' "(?<![A-Z])([A-Z][a-z]+)"' "(?:^|\\b|(?<=[0-9_])|(?<=[A-Z]{2}))([a-z]+)"' "([0-9]+)" }' new string[] { "letsPartyLIKEits1999_dude"' "lets"' "Party"' "LIKE"' "its"' "1999"' "dude" }' new int[] { 0' 0' 0' 0' 0' 0' 0 }' new int[] { 25' 25' 25' 25' 25' 25' 25 }' new int[] { 1' 0' 0' 0' 0' 0' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCamelCase,The following statement contains a magic number: TestPatterns("letsPartyLIKEits1999_dude"' new string[] { "([A-Z]{2'})"' "(?<![A-Z])([A-Z][a-z]+)"' "(?:^|\\b|(?<=[0-9_])|(?<=[A-Z]{2}))([a-z]+)"' "([0-9]+)" }' new string[] { "letsPartyLIKEits1999_dude"' "lets"' "Party"' "LIKE"' "its"' "1999"' "dude" }' new int[] { 0' 0' 0' 0' 0' 0' 0 }' new int[] { 25' 25' 25' 25' 25' 25' 25 }' new int[] { 1' 0' 0' 0' 0' 0' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCamelCase,The following statement contains a magic number: TestPatterns("letsPartyLIKEits1999_dude"' new string[] { "([A-Z]{2'})"' "(?<![A-Z])([A-Z][a-z]+)"' "(?:^|\\b|(?<=[0-9_])|(?<=[A-Z]{2}))([a-z]+)"' "([0-9]+)" }' new string[] { "letsPartyLIKEits1999_dude"' "lets"' "Party"' "LIKE"' "its"' "1999"' "dude" }' new int[] { 0' 0' 0' 0' 0' 0' 0 }' new int[] { 25' 25' 25' 25' 25' 25' 25 }' new int[] { 1' 0' 0' 0' 0' 0' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCamelCase,The following statement contains a magic number: TestPatterns("letsPartyLIKEits1999_dude"' new string[] { "([A-Z]{2'})"' "(?<![A-Z])([A-Z][a-z]+)"' "(?:^|\\b|(?<=[0-9_])|(?<=[A-Z]{2}))([a-z]+)"' "([0-9]+)" }' new string[] { "letsPartyLIKEits1999_dude"' "lets"' "Party"' "LIKE"' "its"' "1999"' "dude" }' new int[] { 0' 0' 0' 0' 0' 0' 0 }' new int[] { 25' 25' 25' 25' 25' 25' 25 }' new int[] { 1' 0' 0' 0' 0' 0' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCamelCase,The following statement contains a magic number: TestPatterns("letsPartyLIKEits1999_dude"' new string[] { "([A-Z]{2'})"' "(?<![A-Z])([A-Z][a-z]+)"' "(?:^|\\b|(?<=[0-9_])|(?<=[A-Z]{2}))([a-z]+)"' "([0-9]+)" }' new string[] { "letsPartyLIKEits1999_dude"' "lets"' "Party"' "LIKE"' "its"' "1999"' "dude" }' new int[] { 0' 0' 0' 0' 0' 0' 0 }' new int[] { 25' 25' 25' 25' 25' 25' 25 }' new int[] { 1' 0' 0' 0' 0' 0' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCamelCase,The following statement contains a magic number: TestPatterns("letsPartyLIKEits1999_dude"' new string[] { "([A-Z]{2'})"' "(?<![A-Z])([A-Z][a-z]+)"' "(?:^|\\b|(?<=[0-9_])|(?<=[A-Z]{2}))([a-z]+)"' "([0-9]+)" }' new string[] { "letsPartyLIKEits1999_dude"' "lets"' "Party"' "LIKE"' "its"' "1999"' "dude" }' new int[] { 0' 0' 0' 0' 0' 0' 0 }' new int[] { 25' 25' 25' 25' 25' 25' 25 }' new int[] { 1' 0' 0' 0' 0' 0' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestCamelCase,The following statement contains a magic number: TestPatterns("letsPartyLIKEits1999_dude"' new string[] { "([A-Z]{2'})"' "(?<![A-Z])([A-Z][a-z]+)"' "(?:^|\\b|(?<=[0-9_])|(?<=[A-Z]{2}))([a-z]+)"' "([0-9]+)" }' new string[] { "letsPartyLIKEits1999_dude"' "lets"' "Party"' "LIKE"' "its"' "1999"' "dude" }' new int[] { 0' 0' 0' 0' 0' 0' 0 }' new int[] { 25' 25' 25' 25' 25' 25' 25 }' new int[] { 1' 0' 0' 0' 0' 0' 0' 0 }' true);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternCaptureGroupTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternCaptureGroupTokenFilter.cs,TestRandomString,The following statement contains a magic number: CheckRandomData(Random' a' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,TestNothingChange,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "this"' "is"' "test." }' new int[] { 0' 5' 8 }' new int[] { 4' 7' 13 }' BLOCK.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,TestNothingChange,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "this"' "is"' "test." }' new int[] { 0' 5' 8 }' new int[] { 4' 7' 13 }' BLOCK.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,TestNothingChange,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "this"' "is"' "test." }' new int[] { 0' 5' 8 }' new int[] { 4' 7' 13 }' BLOCK.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,TestNothingChange,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "this"' "is"' "test." }' new int[] { 0' 5' 8 }' new int[] { 4' 7' 13 }' BLOCK.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,TestNothingChange,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "this"' "is"' "test." }' new int[] { 0' 5' 8 }' new int[] { 4' 7' 13 }' BLOCK.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,Test1block1matchSameLength,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "aa#bb#cc" }' new int[] { 0 }' new int[] { 8 }' BLOCK.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,Test1block1matchLonger,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "aa##bb###cc"' "dd" }' new int[] { 0' 9 }' new int[] { 8' 11 }' BLOCK.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,Test1block1matchLonger,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "aa##bb###cc"' "dd" }' new int[] { 0' 9 }' new int[] { 8' 11 }' BLOCK.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,Test1block1matchLonger,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "aa##bb###cc"' "dd" }' new int[] { 0' 9 }' new int[] { 8' 11 }' BLOCK.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,Test1block2matchLonger,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "aa"' "aa" }' new int[] { 1' 4 }' new int[] { 2' 5 }' BLOCK.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,Test1block2matchLonger,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "aa"' "aa" }' new int[] { 1' 4 }' new int[] { 2' 5 }' BLOCK.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,Test1block2matchLonger,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "aa"' "aa" }' new int[] { 1' 4 }' new int[] { 2' 5 }' BLOCK.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,Test1block1matchShorter,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "aa#bb"' "dd" }' new int[] { 0' 12 }' new int[] { 11' 14 }' BLOCK.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,Test1block1matchShorter,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "aa#bb"' "dd" }' new int[] { 0' 12 }' new int[] { 11' 14 }' BLOCK.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,Test1block1matchShorter,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "aa#bb"' "dd" }' new int[] { 0' 12 }' new int[] { 11' 14 }' BLOCK.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,Test1blockMultiMatches,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "aa"' "bb"' "cc"' "---"' "aa"' "bb"' "aa"' "bb"' "cc" }' new int[] { 2' 6' 9' 11' 15' 18' 21' 25' 29 }' new int[] { 4' 8' 10' 14' 17' 20' 23' 27' 33 }' BLOCK.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,Test1blockMultiMatches,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "aa"' "bb"' "cc"' "---"' "aa"' "bb"' "aa"' "bb"' "cc" }' new int[] { 2' 6' 9' 11' 15' 18' 21' 25' 29 }' new int[] { 4' 8' 10' 14' 17' 20' 23' 27' 33 }' BLOCK.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,Test1blockMultiMatches,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "aa"' "bb"' "cc"' "---"' "aa"' "bb"' "aa"' "bb"' "cc" }' new int[] { 2' 6' 9' 11' 15' 18' 21' 25' 29 }' new int[] { 4' 8' 10' 14' 17' 20' 23' 27' 33 }' BLOCK.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,Test1blockMultiMatches,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "aa"' "bb"' "cc"' "---"' "aa"' "bb"' "aa"' "bb"' "cc" }' new int[] { 2' 6' 9' 11' 15' 18' 21' 25' 29 }' new int[] { 4' 8' 10' 14' 17' 20' 23' 27' 33 }' BLOCK.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,Test1blockMultiMatches,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "aa"' "bb"' "cc"' "---"' "aa"' "bb"' "aa"' "bb"' "cc" }' new int[] { 2' 6' 9' 11' 15' 18' 21' 25' 29 }' new int[] { 4' 8' 10' 14' 17' 20' 23' 27' 33 }' BLOCK.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,Test1blockMultiMatches,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "aa"' "bb"' "cc"' "---"' "aa"' "bb"' "aa"' "bb"' "cc" }' new int[] { 2' 6' 9' 11' 15' 18' 21' 25' 29 }' new int[] { 4' 8' 10' 14' 17' 20' 23' 27' 33 }' BLOCK.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,Test1blockMultiMatches,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "aa"' "bb"' "cc"' "---"' "aa"' "bb"' "aa"' "bb"' "cc" }' new int[] { 2' 6' 9' 11' 15' 18' 21' 25' 29 }' new int[] { 4' 8' 10' 14' 17' 20' 23' 27' 33 }' BLOCK.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,Test1blockMultiMatches,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "aa"' "bb"' "cc"' "---"' "aa"' "bb"' "aa"' "bb"' "cc" }' new int[] { 2' 6' 9' 11' 15' 18' 21' 25' 29 }' new int[] { 4' 8' 10' 14' 17' 20' 23' 27' 33 }' BLOCK.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,Test1blockMultiMatches,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "aa"' "bb"' "cc"' "---"' "aa"' "bb"' "aa"' "bb"' "cc" }' new int[] { 2' 6' 9' 11' 15' 18' 21' 25' 29 }' new int[] { 4' 8' 10' 14' 17' 20' 23' 27' 33 }' BLOCK.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,Test1blockMultiMatches,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "aa"' "bb"' "cc"' "---"' "aa"' "bb"' "aa"' "bb"' "cc" }' new int[] { 2' 6' 9' 11' 15' 18' 21' 25' 29 }' new int[] { 4' 8' 10' 14' 17' 20' 23' 27' 33 }' BLOCK.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,Test1blockMultiMatches,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "aa"' "bb"' "cc"' "---"' "aa"' "bb"' "aa"' "bb"' "cc" }' new int[] { 2' 6' 9' 11' 15' 18' 21' 25' 29 }' new int[] { 4' 8' 10' 14' 17' 20' 23' 27' 33 }' BLOCK.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,Test1blockMultiMatches,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "aa"' "bb"' "cc"' "---"' "aa"' "bb"' "aa"' "bb"' "cc" }' new int[] { 2' 6' 9' 11' 15' 18' 21' 25' 29 }' new int[] { 4' 8' 10' 14' 17' 20' 23' 27' 33 }' BLOCK.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,Test1blockMultiMatches,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "aa"' "bb"' "cc"' "---"' "aa"' "bb"' "aa"' "bb"' "cc" }' new int[] { 2' 6' 9' 11' 15' 18' 21' 25' 29 }' new int[] { 4' 8' 10' 14' 17' 20' 23' 27' 33 }' BLOCK.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,Test1blockMultiMatches,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "aa"' "bb"' "cc"' "---"' "aa"' "bb"' "aa"' "bb"' "cc" }' new int[] { 2' 6' 9' 11' 15' 18' 21' 25' 29 }' new int[] { 4' 8' 10' 14' 17' 20' 23' 27' 33 }' BLOCK.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,Test1blockMultiMatches,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "aa"' "bb"' "cc"' "---"' "aa"' "bb"' "aa"' "bb"' "cc" }' new int[] { 2' 6' 9' 11' 15' 18' 21' 25' 29 }' new int[] { 4' 8' 10' 14' 17' 20' 23' 27' 33 }' BLOCK.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,Test1blockMultiMatches,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "aa"' "bb"' "cc"' "---"' "aa"' "bb"' "aa"' "bb"' "cc" }' new int[] { 2' 6' 9' 11' 15' 18' 21' 25' 29 }' new int[] { 4' 8' 10' 14' 17' 20' 23' 27' 33 }' BLOCK.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,Test1blockMultiMatches,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "aa"' "bb"' "cc"' "---"' "aa"' "bb"' "aa"' "bb"' "cc" }' new int[] { 2' 6' 9' 11' 15' 18' 21' 25' 29 }' new int[] { 4' 8' 10' 14' 17' 20' 23' 27' 33 }' BLOCK.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,Test1blockMultiMatches,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "aa"' "bb"' "cc"' "---"' "aa"' "bb"' "aa"' "bb"' "cc" }' new int[] { 2' 6' 9' 11' 15' 18' 21' 25' 29 }' new int[] { 4' 8' 10' 14' 17' 20' 23' 27' 33 }' BLOCK.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,Test2blocksMultiMatches,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "aa##bb"' "cc"' "---"' "aa##bb"' "aa."' "bb"' "aa##bb"' "cc" }' new int[] { 2' 8' 11' 15' 21' 25' 28' 36 }' new int[] { 7' 10' 14' 20' 24' 27' 35' 38 }' BLOCK.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,Test2blocksMultiMatches,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "aa##bb"' "cc"' "---"' "aa##bb"' "aa."' "bb"' "aa##bb"' "cc" }' new int[] { 2' 8' 11' 15' 21' 25' 28' 36 }' new int[] { 7' 10' 14' 20' 24' 27' 35' 38 }' BLOCK.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,Test2blocksMultiMatches,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "aa##bb"' "cc"' "---"' "aa##bb"' "aa."' "bb"' "aa##bb"' "cc" }' new int[] { 2' 8' 11' 15' 21' 25' 28' 36 }' new int[] { 7' 10' 14' 20' 24' 27' 35' 38 }' BLOCK.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,Test2blocksMultiMatches,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "aa##bb"' "cc"' "---"' "aa##bb"' "aa."' "bb"' "aa##bb"' "cc" }' new int[] { 2' 8' 11' 15' 21' 25' 28' 36 }' new int[] { 7' 10' 14' 20' 24' 27' 35' 38 }' BLOCK.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,Test2blocksMultiMatches,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "aa##bb"' "cc"' "---"' "aa##bb"' "aa."' "bb"' "aa##bb"' "cc" }' new int[] { 2' 8' 11' 15' 21' 25' 28' 36 }' new int[] { 7' 10' 14' 20' 24' 27' 35' 38 }' BLOCK.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,Test2blocksMultiMatches,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "aa##bb"' "cc"' "---"' "aa##bb"' "aa."' "bb"' "aa##bb"' "cc" }' new int[] { 2' 8' 11' 15' 21' 25' 28' 36 }' new int[] { 7' 10' 14' 20' 24' 27' 35' 38 }' BLOCK.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,Test2blocksMultiMatches,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "aa##bb"' "cc"' "---"' "aa##bb"' "aa."' "bb"' "aa##bb"' "cc" }' new int[] { 2' 8' 11' 15' 21' 25' 28' 36 }' new int[] { 7' 10' 14' 20' 24' 27' 35' 38 }' BLOCK.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,Test2blocksMultiMatches,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "aa##bb"' "cc"' "---"' "aa##bb"' "aa."' "bb"' "aa##bb"' "cc" }' new int[] { 2' 8' 11' 15' 21' 25' 28' 36 }' new int[] { 7' 10' 14' 20' 24' 27' 35' 38 }' BLOCK.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,Test2blocksMultiMatches,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "aa##bb"' "cc"' "---"' "aa##bb"' "aa."' "bb"' "aa##bb"' "cc" }' new int[] { 2' 8' 11' 15' 21' 25' 28' 36 }' new int[] { 7' 10' 14' 20' 24' 27' 35' 38 }' BLOCK.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,Test2blocksMultiMatches,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "aa##bb"' "cc"' "---"' "aa##bb"' "aa."' "bb"' "aa##bb"' "cc" }' new int[] { 2' 8' 11' 15' 21' 25' 28' 36 }' new int[] { 7' 10' 14' 20' 24' 27' 35' 38 }' BLOCK.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,Test2blocksMultiMatches,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "aa##bb"' "cc"' "---"' "aa##bb"' "aa."' "bb"' "aa##bb"' "cc" }' new int[] { 2' 8' 11' 15' 21' 25' 28' 36 }' new int[] { 7' 10' 14' 20' 24' 27' 35' 38 }' BLOCK.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,Test2blocksMultiMatches,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "aa##bb"' "cc"' "---"' "aa##bb"' "aa."' "bb"' "aa##bb"' "cc" }' new int[] { 2' 8' 11' 15' 21' 25' 28' 36 }' new int[] { 7' 10' 14' 20' 24' 27' 35' 38 }' BLOCK.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,Test2blocksMultiMatches,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "aa##bb"' "cc"' "---"' "aa##bb"' "aa."' "bb"' "aa##bb"' "cc" }' new int[] { 2' 8' 11' 15' 21' 25' 28' 36 }' new int[] { 7' 10' 14' 20' 24' 27' 35' 38 }' BLOCK.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,Test2blocksMultiMatches,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "aa##bb"' "cc"' "---"' "aa##bb"' "aa."' "bb"' "aa##bb"' "cc" }' new int[] { 2' 8' 11' 15' 21' 25' 28' 36 }' new int[] { 7' 10' 14' 20' 24' 27' 35' 38 }' BLOCK.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,Test2blocksMultiMatches,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "aa##bb"' "cc"' "---"' "aa##bb"' "aa."' "bb"' "aa##bb"' "cc" }' new int[] { 2' 8' 11' 15' 21' 25' 28' 36 }' new int[] { 7' 10' 14' 20' 24' 27' 35' 38 }' BLOCK.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,Test2blocksMultiMatches,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "aa##bb"' "cc"' "---"' "aa##bb"' "aa."' "bb"' "aa##bb"' "cc" }' new int[] { 2' 8' 11' 15' 21' 25' 28' 36 }' new int[] { 7' 10' 14' 20' 24' 27' 35' 38 }' BLOCK.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,TestChain,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "aa"' "b"' "-"' "c"' "."' "---"' "b"' "aa"' "."' "c"' "c"' "b" }' new int[] { 1' 3' 6' 8' 12' 14' 18' 21' 23' 25' 29' 33 }' new int[] { 2' 5' 7' 11' 13' 17' 20' 22' 24' 28' 32' 35 }' BLOCK.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,TestChain,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "aa"' "b"' "-"' "c"' "."' "---"' "b"' "aa"' "."' "c"' "c"' "b" }' new int[] { 1' 3' 6' 8' 12' 14' 18' 21' 23' 25' 29' 33 }' new int[] { 2' 5' 7' 11' 13' 17' 20' 22' 24' 28' 32' 35 }' BLOCK.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,TestChain,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "aa"' "b"' "-"' "c"' "."' "---"' "b"' "aa"' "."' "c"' "c"' "b" }' new int[] { 1' 3' 6' 8' 12' 14' 18' 21' 23' 25' 29' 33 }' new int[] { 2' 5' 7' 11' 13' 17' 20' 22' 24' 28' 32' 35 }' BLOCK.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,TestChain,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "aa"' "b"' "-"' "c"' "."' "---"' "b"' "aa"' "."' "c"' "c"' "b" }' new int[] { 1' 3' 6' 8' 12' 14' 18' 21' 23' 25' 29' 33 }' new int[] { 2' 5' 7' 11' 13' 17' 20' 22' 24' 28' 32' 35 }' BLOCK.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,TestChain,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "aa"' "b"' "-"' "c"' "."' "---"' "b"' "aa"' "."' "c"' "c"' "b" }' new int[] { 1' 3' 6' 8' 12' 14' 18' 21' 23' 25' 29' 33 }' new int[] { 2' 5' 7' 11' 13' 17' 20' 22' 24' 28' 32' 35 }' BLOCK.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,TestChain,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "aa"' "b"' "-"' "c"' "."' "---"' "b"' "aa"' "."' "c"' "c"' "b" }' new int[] { 1' 3' 6' 8' 12' 14' 18' 21' 23' 25' 29' 33 }' new int[] { 2' 5' 7' 11' 13' 17' 20' 22' 24' 28' 32' 35 }' BLOCK.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,TestChain,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "aa"' "b"' "-"' "c"' "."' "---"' "b"' "aa"' "."' "c"' "c"' "b" }' new int[] { 1' 3' 6' 8' 12' 14' 18' 21' 23' 25' 29' 33 }' new int[] { 2' 5' 7' 11' 13' 17' 20' 22' 24' 28' 32' 35 }' BLOCK.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,TestChain,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "aa"' "b"' "-"' "c"' "."' "---"' "b"' "aa"' "."' "c"' "c"' "b" }' new int[] { 1' 3' 6' 8' 12' 14' 18' 21' 23' 25' 29' 33 }' new int[] { 2' 5' 7' 11' 13' 17' 20' 22' 24' 28' 32' 35 }' BLOCK.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,TestChain,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "aa"' "b"' "-"' "c"' "."' "---"' "b"' "aa"' "."' "c"' "c"' "b" }' new int[] { 1' 3' 6' 8' 12' 14' 18' 21' 23' 25' 29' 33 }' new int[] { 2' 5' 7' 11' 13' 17' 20' 22' 24' 28' 32' 35 }' BLOCK.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,TestChain,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "aa"' "b"' "-"' "c"' "."' "---"' "b"' "aa"' "."' "c"' "c"' "b" }' new int[] { 1' 3' 6' 8' 12' 14' 18' 21' 23' 25' 29' 33 }' new int[] { 2' 5' 7' 11' 13' 17' 20' 22' 24' 28' 32' 35 }' BLOCK.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,TestChain,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "aa"' "b"' "-"' "c"' "."' "---"' "b"' "aa"' "."' "c"' "c"' "b" }' new int[] { 1' 3' 6' 8' 12' 14' 18' 21' 23' 25' 29' 33 }' new int[] { 2' 5' 7' 11' 13' 17' 20' 22' 24' 28' 32' 35 }' BLOCK.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,TestChain,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "aa"' "b"' "-"' "c"' "."' "---"' "b"' "aa"' "."' "c"' "c"' "b" }' new int[] { 1' 3' 6' 8' 12' 14' 18' 21' 23' 25' 29' 33 }' new int[] { 2' 5' 7' 11' 13' 17' 20' 22' 24' 28' 32' 35 }' BLOCK.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,TestChain,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "aa"' "b"' "-"' "c"' "."' "---"' "b"' "aa"' "."' "c"' "c"' "b" }' new int[] { 1' 3' 6' 8' 12' 14' 18' 21' 23' 25' 29' 33 }' new int[] { 2' 5' 7' 11' 13' 17' 20' 22' 24' 28' 32' 35 }' BLOCK.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,TestChain,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "aa"' "b"' "-"' "c"' "."' "---"' "b"' "aa"' "."' "c"' "c"' "b" }' new int[] { 1' 3' 6' 8' 12' 14' 18' 21' 23' 25' 29' 33 }' new int[] { 2' 5' 7' 11' 13' 17' 20' 22' 24' 28' 32' 35 }' BLOCK.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,TestChain,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "aa"' "b"' "-"' "c"' "."' "---"' "b"' "aa"' "."' "c"' "c"' "b" }' new int[] { 1' 3' 6' 8' 12' 14' 18' 21' 23' 25' 29' 33 }' new int[] { 2' 5' 7' 11' 13' 17' 20' 22' 24' 28' 32' 35 }' BLOCK.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,TestChain,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "aa"' "b"' "-"' "c"' "."' "---"' "b"' "aa"' "."' "c"' "c"' "b" }' new int[] { 1' 3' 6' 8' 12' 14' 18' 21' 23' 25' 29' 33 }' new int[] { 2' 5' 7' 11' 13' 17' 20' 22' 24' 28' 32' 35 }' BLOCK.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,TestChain,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "aa"' "b"' "-"' "c"' "."' "---"' "b"' "aa"' "."' "c"' "c"' "b" }' new int[] { 1' 3' 6' 8' 12' 14' 18' 21' 23' 25' 29' 33 }' new int[] { 2' 5' 7' 11' 13' 17' 20' 22' 24' 28' 32' 35 }' BLOCK.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,TestChain,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "aa"' "b"' "-"' "c"' "."' "---"' "b"' "aa"' "."' "c"' "c"' "b" }' new int[] { 1' 3' 6' 8' 12' 14' 18' 21' 23' 25' 29' 33 }' new int[] { 2' 5' 7' 11' 13' 17' 20' 22' 24' 28' 32' 35 }' BLOCK.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,TestChain,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "aa"' "b"' "-"' "c"' "."' "---"' "b"' "aa"' "."' "c"' "c"' "b" }' new int[] { 1' 3' 6' 8' 12' 14' 18' 21' 23' 25' 29' 33 }' new int[] { 2' 5' 7' 11' 13' 17' 20' 22' 24' 28' 32' 35 }' BLOCK.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,TestChain,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "aa"' "b"' "-"' "c"' "."' "---"' "b"' "aa"' "."' "c"' "c"' "b" }' new int[] { 1' 3' 6' 8' 12' 14' 18' 21' 23' 25' 29' 33 }' new int[] { 2' 5' 7' 11' 13' 17' 20' 22' 24' 28' 32' 35 }' BLOCK.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,TestChain,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "aa"' "b"' "-"' "c"' "."' "---"' "b"' "aa"' "."' "c"' "c"' "b" }' new int[] { 1' 3' 6' 8' 12' 14' 18' 21' 23' 25' 29' 33 }' new int[] { 2' 5' 7' 11' 13' 17' 20' 22' 24' 28' 32' 35 }' BLOCK.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,TestChain,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "aa"' "b"' "-"' "c"' "."' "---"' "b"' "aa"' "."' "c"' "c"' "b" }' new int[] { 1' 3' 6' 8' 12' 14' 18' 21' 23' 25' 29' 33 }' new int[] { 2' 5' 7' 11' 13' 17' 20' 22' 24' 28' 32' 35 }' BLOCK.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,TestChain,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "aa"' "b"' "-"' "c"' "."' "---"' "b"' "aa"' "."' "c"' "c"' "b" }' new int[] { 1' 3' 6' 8' 12' 14' 18' 21' 23' 25' 29' 33 }' new int[] { 2' 5' 7' 11' 13' 17' 20' 22' 24' 28' 32' 35 }' BLOCK.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,TestRandomStrings,The following statement contains a magic number: int numPatterns = 10 + LuceneTestCase.Random.Next(20);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,TestRandomStrings,The following statement contains a magic number: int numPatterns = 10 + LuceneTestCase.Random.Next(20);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,TestRandomStrings,The following statement contains a magic number: const int maxInputLength = 30;
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilter.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(random' a' 250 * RANDOM_MULTIPLIER' maxInputLength' asciiOnly);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilterFactory.cs,TestNothingChange,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "this"' "is"' "test." }' new int[] { 0' 5' 8 }' new int[] { 4' 7' 13 });
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilterFactory.cs,TestNothingChange,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "this"' "is"' "test." }' new int[] { 0' 5' 8 }' new int[] { 4' 7' 13 });
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilterFactory.cs,TestNothingChange,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "this"' "is"' "test." }' new int[] { 0' 5' 8 }' new int[] { 4' 7' 13 });
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilterFactory.cs,TestNothingChange,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "this"' "is"' "test." }' new int[] { 0' 5' 8 }' new int[] { 4' 7' 13 });
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilterFactory.cs,TestNothingChange,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "this"' "is"' "test." }' new int[] { 0' 5' 8 }' new int[] { 4' 7' 13 });
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceCharFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceCharFilterFactory.cs,Test1block1matchSameLength,The following statement contains a magic number: AssertTokenStreamContents(ts' new string[] { "aa#bb#cc" }' new int[] { 0 }' new int[] { 8 });
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceFilter.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' a' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternReplaceFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternReplaceFilter.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' b' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternTokenizer.cs,TestSplitting,The following statement contains a magic number: TokenStream stream = new PatternTokenizer(new StringReader(test[2])' new Regex(test[1]' RegexOptions.Compiled)' int.Parse(test[0]' CultureInfo.InvariantCulture));
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternTokenizer.cs,TestSplitting,The following statement contains a magic number: assertEquals("pattern: " + test[1] + " with input: " + test[2]' test[3]' @out);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternTokenizer.cs,TestSplitting,The following statement contains a magic number: assertEquals("pattern: " + test[1] + " with input: " + test[2]' test[3]' @out);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternTokenizer.cs,TestOffsetCorrection,The following statement contains a magic number: AssertTokenStreamContents(stream' new string[] { "Günther"' "Günther"' "is"' "here" }' new int[] { 0' 13' 26' 29 }' new int[] { 12' 25' 28' 33 }' INPUT.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternTokenizer.cs,TestOffsetCorrection,The following statement contains a magic number: AssertTokenStreamContents(stream' new string[] { "Günther"' "Günther"' "is"' "here" }' new int[] { 0' 13' 26' 29 }' new int[] { 12' 25' 28' 33 }' INPUT.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternTokenizer.cs,TestOffsetCorrection,The following statement contains a magic number: AssertTokenStreamContents(stream' new string[] { "Günther"' "Günther"' "is"' "here" }' new int[] { 0' 13' 26' 29 }' new int[] { 12' 25' 28' 33 }' INPUT.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternTokenizer.cs,TestOffsetCorrection,The following statement contains a magic number: AssertTokenStreamContents(stream' new string[] { "Günther"' "Günther"' "is"' "here" }' new int[] { 0' 13' 26' 29 }' new int[] { 12' 25' 28' 33 }' INPUT.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternTokenizer.cs,TestOffsetCorrection,The following statement contains a magic number: AssertTokenStreamContents(stream' new string[] { "Günther"' "Günther"' "is"' "here" }' new int[] { 0' 13' 26' 29 }' new int[] { 12' 25' 28' 33 }' INPUT.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternTokenizer.cs,TestOffsetCorrection,The following statement contains a magic number: AssertTokenStreamContents(stream' new string[] { "Günther"' "Günther"' "is"' "here" }' new int[] { 0' 13' 26' 29 }' new int[] { 12' 25' 28' 33 }' INPUT.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternTokenizer.cs,TestOffsetCorrection,The following statement contains a magic number: AssertTokenStreamContents(stream' new string[] { "Günther"' "Günther"' "is"' "here" }' new int[] { 0' 13' 26' 29 }' new int[] { 12' 25' 28' 33 }' INPUT.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternTokenizer.cs,TestOffsetCorrection,The following statement contains a magic number: AssertTokenStreamContents(stream' new string[] { "Günther"' "Günther" }' new int[] { 0' 13 }' new int[] { 12' 25 }' INPUT.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternTokenizer.cs,TestOffsetCorrection,The following statement contains a magic number: AssertTokenStreamContents(stream' new string[] { "Günther"' "Günther" }' new int[] { 0' 13 }' new int[] { 12' 25 }' INPUT.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternTokenizer.cs,TestOffsetCorrection,The following statement contains a magic number: AssertTokenStreamContents(stream' new string[] { "Günther"' "Günther" }' new int[] { 0' 13 }' new int[] { 12' 25 }' INPUT.Length);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternTokenizer.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' a' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.Pattern,TestPatternTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pattern\TestPatternTokenizer.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' b' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.Payloads,DelimitedPayloadTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Payloads\DelimitedPayloadTokenFilterTest.cs,TestFloatEncoding,The following statement contains a magic number: AssertTermEquals("red"' filter' termAtt' payAtt' PayloadHelper.EncodeSingle(2.0f));
Magic Number,Lucene.Net.Analysis.Payloads,DelimitedPayloadTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Payloads\DelimitedPayloadTokenFilterTest.cs,TestFloatEncoding,The following statement contains a magic number: AssertTermEquals("fox"' filter' termAtt' payAtt' PayloadHelper.EncodeSingle(3.5f));
Magic Number,Lucene.Net.Analysis.Payloads,DelimitedPayloadTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Payloads\DelimitedPayloadTokenFilterTest.cs,TestFloatEncoding,The following statement contains a magic number: AssertTermEquals("jumped"' filter' termAtt' payAtt' PayloadHelper.EncodeSingle(0.5f));
Magic Number,Lucene.Net.Analysis.Payloads,DelimitedPayloadTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Payloads\DelimitedPayloadTokenFilterTest.cs,TestFloatEncoding,The following statement contains a magic number: AssertTermEquals("lazy"' filter' termAtt' payAtt' PayloadHelper.EncodeSingle(5.0f));
Magic Number,Lucene.Net.Analysis.Payloads,DelimitedPayloadTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Payloads\DelimitedPayloadTokenFilterTest.cs,TestFloatEncoding,The following statement contains a magic number: AssertTermEquals("brown"' filter' termAtt' payAtt' PayloadHelper.EncodeSingle(99.3f));
Magic Number,Lucene.Net.Analysis.Payloads,DelimitedPayloadTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Payloads\DelimitedPayloadTokenFilterTest.cs,TestFloatEncoding,The following statement contains a magic number: AssertTermEquals("dogs"' filter' termAtt' payAtt' PayloadHelper.EncodeSingle(83.7f));
Magic Number,Lucene.Net.Analysis.Payloads,DelimitedPayloadTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Payloads\DelimitedPayloadTokenFilterTest.cs,TestIntEncoding,The following statement contains a magic number: AssertTermEquals("red"' filter' termAtt' payAtt' PayloadHelper.EncodeInt32(2));
Magic Number,Lucene.Net.Analysis.Payloads,DelimitedPayloadTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Payloads\DelimitedPayloadTokenFilterTest.cs,TestIntEncoding,The following statement contains a magic number: AssertTermEquals("fox"' filter' termAtt' payAtt' PayloadHelper.EncodeInt32(3));
Magic Number,Lucene.Net.Analysis.Payloads,DelimitedPayloadTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Payloads\DelimitedPayloadTokenFilterTest.cs,TestIntEncoding,The following statement contains a magic number: AssertTermEquals("lazy"' filter' termAtt' payAtt' PayloadHelper.EncodeInt32(5));
Magic Number,Lucene.Net.Analysis.Payloads,DelimitedPayloadTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Payloads\DelimitedPayloadTokenFilterTest.cs,TestIntEncoding,The following statement contains a magic number: AssertTermEquals("brown"' filter' termAtt' payAtt' PayloadHelper.EncodeInt32(99));
Magic Number,Lucene.Net.Analysis.Payloads,DelimitedPayloadTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Payloads\DelimitedPayloadTokenFilterTest.cs,TestIntEncoding,The following statement contains a magic number: AssertTermEquals("dogs"' filter' termAtt' payAtt' PayloadHelper.EncodeInt32(83));
Magic Number,Lucene.Net.Analysis.Payloads,NumericPayloadTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Payloads\NumericPayloadTokenFilterTest.cs,Test,The following statement contains a magic number: NumericPayloadTokenFilter nptf = new NumericPayloadTokenFilter(new WordTokenFilter(this' new MockTokenizer(new StringReader(test)' MockTokenizer.WHITESPACE' false))' 3' "D");
Magic Number,Lucene.Net.Analysis.Payloads,NumericPayloadTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Payloads\NumericPayloadTokenFilterTest.cs,Test,The following statement contains a magic number: assertTrue(pay + " does not equal: " + 3' pay == 3);
Magic Number,Lucene.Net.Analysis.Payloads,NumericPayloadTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Payloads\NumericPayloadTokenFilterTest.cs,Test,The following statement contains a magic number: assertTrue(pay + " does not equal: " + 3' pay == 3);
Magic Number,Lucene.Net.Analysis.Payloads,TestDelimitedPayloadTokenFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Payloads\TestDelimitedPayloadTokenFilterFactory.cs,TestEncoder,The following statement contains a magic number: assertEquals(0.1f' payFloat' 0.0f);
Magic Number,Lucene.Net.Analysis.Payloads,TestDelimitedPayloadTokenFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Payloads\TestDelimitedPayloadTokenFilterFactory.cs,TestDelim,The following statement contains a magic number: assertEquals(0.1f' payFloat' 0.0f);
Magic Number,Lucene.Net.Analysis.Payloads,TokenOffsetPayloadTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Payloads\TokenOffsetPayloadTokenFilterTest.cs,Test,The following statement contains a magic number: int end = PayloadHelper.DecodeInt32(data' 4);
Magic Number,Lucene.Net.Analysis.Payloads,TokenOffsetPayloadTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Payloads\TokenOffsetPayloadTokenFilterTest.cs,Test,The following statement contains a magic number: assertTrue(count + " does not equal: " + 10' count == 10);
Magic Number,Lucene.Net.Analysis.Payloads,TokenOffsetPayloadTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Payloads\TokenOffsetPayloadTokenFilterTest.cs,Test,The following statement contains a magic number: assertTrue(count + " does not equal: " + 10' count == 10);
Magic Number,Lucene.Net.Analysis.Payloads,TypeAsPayloadTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Payloads\TypeAsPayloadTokenFilterTest.cs,Test,The following statement contains a magic number: assertTrue(count + " does not equal: " + 10' count == 10);
Magic Number,Lucene.Net.Analysis.Payloads,TypeAsPayloadTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Payloads\TypeAsPayloadTokenFilterTest.cs,Test,The following statement contains a magic number: assertTrue(count + " does not equal: " + 10' count == 10);
Magic Number,Lucene.Net.Analysis.Position,PositionFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Position\PositionFilterTest.cs,TestNonZeroPositionIncrement,The following statement contains a magic number: AssertTokenStreamContents(  #pragma warning disable 612' 618                  new PositionFilter(  #pragma warning restore 612' 618                      new TestTokenStream(this' TEST_TOKEN)' 5)' TEST_TOKEN' TEST_TOKEN_NON_ZERO_POSITION_INCREMENTS);
Magic Number,Lucene.Net.Analysis.Position,PositionFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Position\PositionFilterTest.cs,Test6GramFilterNoPositions,The following statement contains a magic number: ShingleFilter filter = new ShingleFilter(new TestTokenStream(this' TEST_TOKEN)' 6);
Magic Number,Lucene.Net.Analysis.Pt,TestPortugueseAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pt\TestPortugueseAnalyzer.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' new PortugueseAnalyzer(TEST_VERSION_CURRENT)' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.Pt,TestPortugueseLightStemFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pt\TestPortugueseLightStemFilter.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' analyzer' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.Pt,TestPortugueseMinimalStemFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pt\TestPortugueseMinimalStemFilter.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' analyzer' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.Pt,TestPortugueseStemFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Pt\TestPortugueseStemFilter.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' analyzer' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.Query,QueryAutoStopWordAnalyzerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Query\QueryAutoStopWordAnalyzerTest.cs,SetUp,The following statement contains a magic number: int numDocs = 200;
Magic Number,Lucene.Net.Analysis.Query,QueryAutoStopWordAnalyzerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Query\QueryAutoStopWordAnalyzerTest.cs,TestStopwordsAllFieldsMaxPercentDocs,The following statement contains a magic number: protectedAnalyzer = new QueryAutoStopWordAnalyzer(TEST_VERSION_CURRENT' appAnalyzer' reader' 1f / 2f);
Magic Number,Lucene.Net.Analysis.Query,QueryAutoStopWordAnalyzerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Query\QueryAutoStopWordAnalyzerTest.cs,TestStopwordsAllFieldsMaxPercentDocs,The following statement contains a magic number: protectedAnalyzer = new QueryAutoStopWordAnalyzer(TEST_VERSION_CURRENT' appAnalyzer' reader' 1f / 4f);
Magic Number,Lucene.Net.Analysis.Query,QueryAutoStopWordAnalyzerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Query\QueryAutoStopWordAnalyzerTest.cs,TestStopwordsPerFieldMaxPercentDocs,The following statement contains a magic number: protectedAnalyzer = new QueryAutoStopWordAnalyzer(TEST_VERSION_CURRENT' appAnalyzer' reader' Arrays.AsList("variedField")' 1f / 2f);
Magic Number,Lucene.Net.Analysis.Query,QueryAutoStopWordAnalyzerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Query\QueryAutoStopWordAnalyzerTest.cs,TestStopwordsPerFieldMaxPercentDocs,The following statement contains a magic number: protectedAnalyzer = new QueryAutoStopWordAnalyzer(TEST_VERSION_CURRENT' appAnalyzer' reader' Arrays.AsList("variedField"' "repetitiveField")' 1f / 2f);
Magic Number,Lucene.Net.Analysis.Query,QueryAutoStopWordAnalyzerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Query\QueryAutoStopWordAnalyzerTest.cs,TestStopwordsPerFieldMaxDocFreq,The following statement contains a magic number: protectedAnalyzer = new QueryAutoStopWordAnalyzer(TEST_VERSION_CURRENT' appAnalyzer' reader' Arrays.AsList("repetitiveField")' 10);
Magic Number,Lucene.Net.Analysis.Query,QueryAutoStopWordAnalyzerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Query\QueryAutoStopWordAnalyzerTest.cs,TestStopwordsPerFieldMaxDocFreq,The following statement contains a magic number: protectedAnalyzer = new QueryAutoStopWordAnalyzer(TEST_VERSION_CURRENT' appAnalyzer' reader' Arrays.AsList("repetitiveField"' "variedField")' 10);
Magic Number,Lucene.Net.Analysis.Query,QueryAutoStopWordAnalyzerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Query\QueryAutoStopWordAnalyzerTest.cs,TestNoFieldNamePollution,The following statement contains a magic number: protectedAnalyzer = new QueryAutoStopWordAnalyzer(TEST_VERSION_CURRENT' appAnalyzer' reader' Arrays.AsList("repetitiveField")' 10);
Magic Number,Lucene.Net.Analysis.Query,QueryAutoStopWordAnalyzerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Query\QueryAutoStopWordAnalyzerTest.cs,TestTokenStream,The following statement contains a magic number: QueryAutoStopWordAnalyzer a = new QueryAutoStopWordAnalyzer(TEST_VERSION_CURRENT' new MockAnalyzer(Random' MockTokenizer.WHITESPACE' false)' reader' 10);
Magic Number,Lucene.Net.Analysis.Reverse,TestReverseStringFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Reverse\TestReverseStringFilter.cs,TestReverseChar,The following statement contains a magic number: ReverseStringFilter.Reverse(TEST_VERSION_CURRENT' buffer' 2' 3);
Magic Number,Lucene.Net.Analysis.Reverse,TestReverseStringFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Reverse\TestReverseStringFilter.cs,TestReverseChar,The following statement contains a magic number: ReverseStringFilter.Reverse(TEST_VERSION_CURRENT' buffer' 2' 3);
Magic Number,Lucene.Net.Analysis.Reverse,TestReverseStringFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Reverse\TestReverseStringFilter.cs,TestReverseSupplementaryChar,The following statement contains a magic number: ReverseStringFilter.Reverse(TEST_VERSION_CURRENT' buffer' 3' 7);
Magic Number,Lucene.Net.Analysis.Reverse,TestReverseStringFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Reverse\TestReverseStringFilter.cs,TestReverseSupplementaryChar,The following statement contains a magic number: ReverseStringFilter.Reverse(TEST_VERSION_CURRENT' buffer' 3' 7);
Magic Number,Lucene.Net.Analysis.Reverse,TestReverseStringFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Reverse\TestReverseStringFilter.cs,TestReverseSupplementaryChar,The following statement contains a magic number: ReverseStringFilter.Reverse(TEST_VERSION_CURRENT' buffer' 3' 8);
Magic Number,Lucene.Net.Analysis.Reverse,TestReverseStringFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Reverse\TestReverseStringFilter.cs,TestReverseSupplementaryChar,The following statement contains a magic number: ReverseStringFilter.Reverse(TEST_VERSION_CURRENT' buffer' 3' 8);
Magic Number,Lucene.Net.Analysis.Reverse,TestReverseStringFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Reverse\TestReverseStringFilter.cs,TestReverseSupplementaryChar,The following statement contains a magic number: ReverseStringFilter.Reverse(TEST_VERSION_CURRENT' buffer' 3' 7);
Magic Number,Lucene.Net.Analysis.Reverse,TestReverseStringFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Reverse\TestReverseStringFilter.cs,TestReverseSupplementaryChar,The following statement contains a magic number: ReverseStringFilter.Reverse(TEST_VERSION_CURRENT' buffer' 3' 7);
Magic Number,Lucene.Net.Analysis.Reverse,TestReverseStringFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Reverse\TestReverseStringFilter.cs,TestReverseSupplementaryChar,The following statement contains a magic number: ReverseStringFilter.Reverse(TEST_VERSION_CURRENT' buffer' 3' 8);
Magic Number,Lucene.Net.Analysis.Reverse,TestReverseStringFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Reverse\TestReverseStringFilter.cs,TestReverseSupplementaryChar,The following statement contains a magic number: ReverseStringFilter.Reverse(TEST_VERSION_CURRENT' buffer' 3' 8);
Magic Number,Lucene.Net.Analysis.Reverse,TestReverseStringFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Reverse\TestReverseStringFilter.cs,TestReverseSupplementaryChar,The following statement contains a magic number: ReverseStringFilter.Reverse(TEST_VERSION_CURRENT' buffer' 3' 7);
Magic Number,Lucene.Net.Analysis.Reverse,TestReverseStringFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Reverse\TestReverseStringFilter.cs,TestReverseSupplementaryChar,The following statement contains a magic number: ReverseStringFilter.Reverse(TEST_VERSION_CURRENT' buffer' 3' 7);
Magic Number,Lucene.Net.Analysis.Reverse,TestReverseStringFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Reverse\TestReverseStringFilter.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' a' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.Ro,TestRomanianAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Ro\TestRomanianAnalyzer.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' new RomanianAnalyzer(TEST_VERSION_CURRENT)' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.Ru,TestRussianAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Ru\TestRussianAnalyzer.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' new RussianAnalyzer(TEST_VERSION_CURRENT)' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.Ru,TestRussianLightStemFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Ru\TestRussianLightStemFilter.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' analyzer' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,SetUp,The following statement contains a magic number: analyzer = new ShingleAnalyzerWrapper(new MockAnalyzer(Random' MockTokenizer.WHITESPACE' false)' 2);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestShingleAnalyzerWrapperPhraseQuery,The following statement contains a magic number: ScoreDoc[] hits = searcher.Search(q' null' 1000).ScoreDocs;
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestShingleAnalyzerWrapperBooleanQuery,The following statement contains a magic number: ScoreDoc[] hits = searcher.Search(q' null' 1000).ScoreDocs;
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestShingleAnalyzerWrapperBooleanQuery,The following statement contains a magic number: int[] ranks = new int[] { 1' 2' 0 };
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestReusableTokenStream,The following statement contains a magic number: Analyzer a = new ShingleAnalyzerWrapper(new MockAnalyzer(Random' MockTokenizer.WHITESPACE' false)' 2);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestReusableTokenStream,The following statement contains a magic number: AssertAnalyzesTo(a' "please divide into shingles"' new string[] { "please"' "please divide"' "divide"' "divide into"' "into"' "into shingles"' "shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestReusableTokenStream,The following statement contains a magic number: AssertAnalyzesTo(a' "please divide into shingles"' new string[] { "please"' "please divide"' "divide"' "divide into"' "into"' "into shingles"' "shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestReusableTokenStream,The following statement contains a magic number: AssertAnalyzesTo(a' "please divide into shingles"' new string[] { "please"' "please divide"' "divide"' "divide into"' "into"' "into shingles"' "shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestReusableTokenStream,The following statement contains a magic number: AssertAnalyzesTo(a' "please divide into shingles"' new string[] { "please"' "please divide"' "divide"' "divide into"' "into"' "into shingles"' "shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestReusableTokenStream,The following statement contains a magic number: AssertAnalyzesTo(a' "please divide into shingles"' new string[] { "please"' "please divide"' "divide"' "divide into"' "into"' "into shingles"' "shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestReusableTokenStream,The following statement contains a magic number: AssertAnalyzesTo(a' "please divide into shingles"' new string[] { "please"' "please divide"' "divide"' "divide into"' "into"' "into shingles"' "shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestReusableTokenStream,The following statement contains a magic number: AssertAnalyzesTo(a' "please divide into shingles"' new string[] { "please"' "please divide"' "divide"' "divide into"' "into"' "into shingles"' "shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestReusableTokenStream,The following statement contains a magic number: AssertAnalyzesTo(a' "please divide into shingles"' new string[] { "please"' "please divide"' "divide"' "divide into"' "into"' "into shingles"' "shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestReusableTokenStream,The following statement contains a magic number: AssertAnalyzesTo(a' "please divide into shingles"' new string[] { "please"' "please divide"' "divide"' "divide into"' "into"' "into shingles"' "shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestReusableTokenStream,The following statement contains a magic number: AssertAnalyzesTo(a' "please divide into shingles"' new string[] { "please"' "please divide"' "divide"' "divide into"' "into"' "into shingles"' "shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestReusableTokenStream,The following statement contains a magic number: AssertAnalyzesTo(a' "please divide into shingles"' new string[] { "please"' "please divide"' "divide"' "divide into"' "into"' "into shingles"' "shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestReusableTokenStream,The following statement contains a magic number: AssertAnalyzesTo(a' "please divide into shingles"' new string[] { "please"' "please divide"' "divide"' "divide into"' "into"' "into shingles"' "shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestReusableTokenStream,The following statement contains a magic number: AssertAnalyzesTo(a' "divide me up again"' new string[] { "divide"' "divide me"' "me"' "me up"' "up"' "up again"' "again" }' new int[] { 0' 0' 7' 7' 10' 10' 13 }' new int[] { 6' 9' 9' 12' 12' 18' 18 }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestReusableTokenStream,The following statement contains a magic number: AssertAnalyzesTo(a' "divide me up again"' new string[] { "divide"' "divide me"' "me"' "me up"' "up"' "up again"' "again" }' new int[] { 0' 0' 7' 7' 10' 10' 13 }' new int[] { 6' 9' 9' 12' 12' 18' 18 }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestReusableTokenStream,The following statement contains a magic number: AssertAnalyzesTo(a' "divide me up again"' new string[] { "divide"' "divide me"' "me"' "me up"' "up"' "up again"' "again" }' new int[] { 0' 0' 7' 7' 10' 10' 13 }' new int[] { 6' 9' 9' 12' 12' 18' 18 }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestReusableTokenStream,The following statement contains a magic number: AssertAnalyzesTo(a' "divide me up again"' new string[] { "divide"' "divide me"' "me"' "me up"' "up"' "up again"' "again" }' new int[] { 0' 0' 7' 7' 10' 10' 13 }' new int[] { 6' 9' 9' 12' 12' 18' 18 }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestReusableTokenStream,The following statement contains a magic number: AssertAnalyzesTo(a' "divide me up again"' new string[] { "divide"' "divide me"' "me"' "me up"' "up"' "up again"' "again" }' new int[] { 0' 0' 7' 7' 10' 10' 13 }' new int[] { 6' 9' 9' 12' 12' 18' 18 }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestReusableTokenStream,The following statement contains a magic number: AssertAnalyzesTo(a' "divide me up again"' new string[] { "divide"' "divide me"' "me"' "me up"' "up"' "up again"' "again" }' new int[] { 0' 0' 7' 7' 10' 10' 13 }' new int[] { 6' 9' 9' 12' 12' 18' 18 }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestReusableTokenStream,The following statement contains a magic number: AssertAnalyzesTo(a' "divide me up again"' new string[] { "divide"' "divide me"' "me"' "me up"' "up"' "up again"' "again" }' new int[] { 0' 0' 7' 7' 10' 10' 13 }' new int[] { 6' 9' 9' 12' 12' 18' 18 }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestReusableTokenStream,The following statement contains a magic number: AssertAnalyzesTo(a' "divide me up again"' new string[] { "divide"' "divide me"' "me"' "me up"' "up"' "up again"' "again" }' new int[] { 0' 0' 7' 7' 10' 10' 13 }' new int[] { 6' 9' 9' 12' 12' 18' 18 }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestReusableTokenStream,The following statement contains a magic number: AssertAnalyzesTo(a' "divide me up again"' new string[] { "divide"' "divide me"' "me"' "me up"' "up"' "up again"' "again" }' new int[] { 0' 0' 7' 7' 10' 10' 13 }' new int[] { 6' 9' 9' 12' 12' 18' 18 }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestReusableTokenStream,The following statement contains a magic number: AssertAnalyzesTo(a' "divide me up again"' new string[] { "divide"' "divide me"' "me"' "me up"' "up"' "up again"' "again" }' new int[] { 0' 0' 7' 7' 10' 10' 13 }' new int[] { 6' 9' 9' 12' 12' 18' 18 }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestReusableTokenStream,The following statement contains a magic number: AssertAnalyzesTo(a' "divide me up again"' new string[] { "divide"' "divide me"' "me"' "me up"' "up"' "up again"' "again" }' new int[] { 0' 0' 7' 7' 10' 10' 13 }' new int[] { 6' 9' 9' 12' 12' 18' 18 }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestReusableTokenStream,The following statement contains a magic number: AssertAnalyzesTo(a' "divide me up again"' new string[] { "divide"' "divide me"' "me"' "me up"' "up"' "up again"' "again" }' new int[] { 0' 0' 7' 7' 10' 10' 13 }' new int[] { 6' 9' 9' 12' 12' 18' 18 }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinShingleSize,The following statement contains a magic number: ShingleAnalyzerWrapper analyzer = new ShingleAnalyzerWrapper(new MockAnalyzer(Random' MockTokenizer.WHITESPACE' false)' 3' 4);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinShingleSize,The following statement contains a magic number: ShingleAnalyzerWrapper analyzer = new ShingleAnalyzerWrapper(new MockAnalyzer(Random' MockTokenizer.WHITESPACE' false)' 3' 4);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinShingleSize,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide this sentence into shingles"' new string[] { "please"' "please divide this"' "please divide this sentence"' "divide"' "divide this sentence"' "divide this sentence into"' "this"' "this sentence into"' "this sentence into shingles"' "sentence"' "sentence into shingles"' "into"' "shingles" }' new int[] { 0' 0' 0' 7' 7' 7' 14' 14' 14' 19' 19' 28' 33 }' new int[] { 6' 18' 27' 13' 27' 32' 18' 32' 41' 27' 41' 32' 41 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinShingleSize,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide this sentence into shingles"' new string[] { "please"' "please divide this"' "please divide this sentence"' "divide"' "divide this sentence"' "divide this sentence into"' "this"' "this sentence into"' "this sentence into shingles"' "sentence"' "sentence into shingles"' "into"' "shingles" }' new int[] { 0' 0' 0' 7' 7' 7' 14' 14' 14' 19' 19' 28' 33 }' new int[] { 6' 18' 27' 13' 27' 32' 18' 32' 41' 27' 41' 32' 41 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinShingleSize,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide this sentence into shingles"' new string[] { "please"' "please divide this"' "please divide this sentence"' "divide"' "divide this sentence"' "divide this sentence into"' "this"' "this sentence into"' "this sentence into shingles"' "sentence"' "sentence into shingles"' "into"' "shingles" }' new int[] { 0' 0' 0' 7' 7' 7' 14' 14' 14' 19' 19' 28' 33 }' new int[] { 6' 18' 27' 13' 27' 32' 18' 32' 41' 27' 41' 32' 41 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinShingleSize,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide this sentence into shingles"' new string[] { "please"' "please divide this"' "please divide this sentence"' "divide"' "divide this sentence"' "divide this sentence into"' "this"' "this sentence into"' "this sentence into shingles"' "sentence"' "sentence into shingles"' "into"' "shingles" }' new int[] { 0' 0' 0' 7' 7' 7' 14' 14' 14' 19' 19' 28' 33 }' new int[] { 6' 18' 27' 13' 27' 32' 18' 32' 41' 27' 41' 32' 41 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinShingleSize,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide this sentence into shingles"' new string[] { "please"' "please divide this"' "please divide this sentence"' "divide"' "divide this sentence"' "divide this sentence into"' "this"' "this sentence into"' "this sentence into shingles"' "sentence"' "sentence into shingles"' "into"' "shingles" }' new int[] { 0' 0' 0' 7' 7' 7' 14' 14' 14' 19' 19' 28' 33 }' new int[] { 6' 18' 27' 13' 27' 32' 18' 32' 41' 27' 41' 32' 41 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinShingleSize,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide this sentence into shingles"' new string[] { "please"' "please divide this"' "please divide this sentence"' "divide"' "divide this sentence"' "divide this sentence into"' "this"' "this sentence into"' "this sentence into shingles"' "sentence"' "sentence into shingles"' "into"' "shingles" }' new int[] { 0' 0' 0' 7' 7' 7' 14' 14' 14' 19' 19' 28' 33 }' new int[] { 6' 18' 27' 13' 27' 32' 18' 32' 41' 27' 41' 32' 41 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinShingleSize,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide this sentence into shingles"' new string[] { "please"' "please divide this"' "please divide this sentence"' "divide"' "divide this sentence"' "divide this sentence into"' "this"' "this sentence into"' "this sentence into shingles"' "sentence"' "sentence into shingles"' "into"' "shingles" }' new int[] { 0' 0' 0' 7' 7' 7' 14' 14' 14' 19' 19' 28' 33 }' new int[] { 6' 18' 27' 13' 27' 32' 18' 32' 41' 27' 41' 32' 41 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinShingleSize,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide this sentence into shingles"' new string[] { "please"' "please divide this"' "please divide this sentence"' "divide"' "divide this sentence"' "divide this sentence into"' "this"' "this sentence into"' "this sentence into shingles"' "sentence"' "sentence into shingles"' "into"' "shingles" }' new int[] { 0' 0' 0' 7' 7' 7' 14' 14' 14' 19' 19' 28' 33 }' new int[] { 6' 18' 27' 13' 27' 32' 18' 32' 41' 27' 41' 32' 41 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinShingleSize,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide this sentence into shingles"' new string[] { "please"' "please divide this"' "please divide this sentence"' "divide"' "divide this sentence"' "divide this sentence into"' "this"' "this sentence into"' "this sentence into shingles"' "sentence"' "sentence into shingles"' "into"' "shingles" }' new int[] { 0' 0' 0' 7' 7' 7' 14' 14' 14' 19' 19' 28' 33 }' new int[] { 6' 18' 27' 13' 27' 32' 18' 32' 41' 27' 41' 32' 41 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinShingleSize,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide this sentence into shingles"' new string[] { "please"' "please divide this"' "please divide this sentence"' "divide"' "divide this sentence"' "divide this sentence into"' "this"' "this sentence into"' "this sentence into shingles"' "sentence"' "sentence into shingles"' "into"' "shingles" }' new int[] { 0' 0' 0' 7' 7' 7' 14' 14' 14' 19' 19' 28' 33 }' new int[] { 6' 18' 27' 13' 27' 32' 18' 32' 41' 27' 41' 32' 41 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinShingleSize,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide this sentence into shingles"' new string[] { "please"' "please divide this"' "please divide this sentence"' "divide"' "divide this sentence"' "divide this sentence into"' "this"' "this sentence into"' "this sentence into shingles"' "sentence"' "sentence into shingles"' "into"' "shingles" }' new int[] { 0' 0' 0' 7' 7' 7' 14' 14' 14' 19' 19' 28' 33 }' new int[] { 6' 18' 27' 13' 27' 32' 18' 32' 41' 27' 41' 32' 41 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinShingleSize,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide this sentence into shingles"' new string[] { "please"' "please divide this"' "please divide this sentence"' "divide"' "divide this sentence"' "divide this sentence into"' "this"' "this sentence into"' "this sentence into shingles"' "sentence"' "sentence into shingles"' "into"' "shingles" }' new int[] { 0' 0' 0' 7' 7' 7' 14' 14' 14' 19' 19' 28' 33 }' new int[] { 6' 18' 27' 13' 27' 32' 18' 32' 41' 27' 41' 32' 41 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinShingleSize,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide this sentence into shingles"' new string[] { "please"' "please divide this"' "please divide this sentence"' "divide"' "divide this sentence"' "divide this sentence into"' "this"' "this sentence into"' "this sentence into shingles"' "sentence"' "sentence into shingles"' "into"' "shingles" }' new int[] { 0' 0' 0' 7' 7' 7' 14' 14' 14' 19' 19' 28' 33 }' new int[] { 6' 18' 27' 13' 27' 32' 18' 32' 41' 27' 41' 32' 41 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinShingleSize,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide this sentence into shingles"' new string[] { "please"' "please divide this"' "please divide this sentence"' "divide"' "divide this sentence"' "divide this sentence into"' "this"' "this sentence into"' "this sentence into shingles"' "sentence"' "sentence into shingles"' "into"' "shingles" }' new int[] { 0' 0' 0' 7' 7' 7' 14' 14' 14' 19' 19' 28' 33 }' new int[] { 6' 18' 27' 13' 27' 32' 18' 32' 41' 27' 41' 32' 41 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinShingleSize,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide this sentence into shingles"' new string[] { "please"' "please divide this"' "please divide this sentence"' "divide"' "divide this sentence"' "divide this sentence into"' "this"' "this sentence into"' "this sentence into shingles"' "sentence"' "sentence into shingles"' "into"' "shingles" }' new int[] { 0' 0' 0' 7' 7' 7' 14' 14' 14' 19' 19' 28' 33 }' new int[] { 6' 18' 27' 13' 27' 32' 18' 32' 41' 27' 41' 32' 41 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinShingleSize,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide this sentence into shingles"' new string[] { "please"' "please divide this"' "please divide this sentence"' "divide"' "divide this sentence"' "divide this sentence into"' "this"' "this sentence into"' "this sentence into shingles"' "sentence"' "sentence into shingles"' "into"' "shingles" }' new int[] { 0' 0' 0' 7' 7' 7' 14' 14' 14' 19' 19' 28' 33 }' new int[] { 6' 18' 27' 13' 27' 32' 18' 32' 41' 27' 41' 32' 41 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinShingleSize,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide this sentence into shingles"' new string[] { "please"' "please divide this"' "please divide this sentence"' "divide"' "divide this sentence"' "divide this sentence into"' "this"' "this sentence into"' "this sentence into shingles"' "sentence"' "sentence into shingles"' "into"' "shingles" }' new int[] { 0' 0' 0' 7' 7' 7' 14' 14' 14' 19' 19' 28' 33 }' new int[] { 6' 18' 27' 13' 27' 32' 18' 32' 41' 27' 41' 32' 41 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinShingleSize,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide this sentence into shingles"' new string[] { "please"' "please divide this"' "please divide this sentence"' "divide"' "divide this sentence"' "divide this sentence into"' "this"' "this sentence into"' "this sentence into shingles"' "sentence"' "sentence into shingles"' "into"' "shingles" }' new int[] { 0' 0' 0' 7' 7' 7' 14' 14' 14' 19' 19' 28' 33 }' new int[] { 6' 18' 27' 13' 27' 32' 18' 32' 41' 27' 41' 32' 41 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinShingleSize,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide this sentence into shingles"' new string[] { "please"' "please divide this"' "please divide this sentence"' "divide"' "divide this sentence"' "divide this sentence into"' "this"' "this sentence into"' "this sentence into shingles"' "sentence"' "sentence into shingles"' "into"' "shingles" }' new int[] { 0' 0' 0' 7' 7' 7' 14' 14' 14' 19' 19' 28' 33 }' new int[] { 6' 18' 27' 13' 27' 32' 18' 32' 41' 27' 41' 32' 41 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinShingleSize,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide this sentence into shingles"' new string[] { "please"' "please divide this"' "please divide this sentence"' "divide"' "divide this sentence"' "divide this sentence into"' "this"' "this sentence into"' "this sentence into shingles"' "sentence"' "sentence into shingles"' "into"' "shingles" }' new int[] { 0' 0' 0' 7' 7' 7' 14' 14' 14' 19' 19' 28' 33 }' new int[] { 6' 18' 27' 13' 27' 32' 18' 32' 41' 27' 41' 32' 41 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinShingleSize,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide this sentence into shingles"' new string[] { "please"' "please divide this"' "please divide this sentence"' "divide"' "divide this sentence"' "divide this sentence into"' "this"' "this sentence into"' "this sentence into shingles"' "sentence"' "sentence into shingles"' "into"' "shingles" }' new int[] { 0' 0' 0' 7' 7' 7' 14' 14' 14' 19' 19' 28' 33 }' new int[] { 6' 18' 27' 13' 27' 32' 18' 32' 41' 27' 41' 32' 41 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinShingleSize,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide this sentence into shingles"' new string[] { "please"' "please divide this"' "please divide this sentence"' "divide"' "divide this sentence"' "divide this sentence into"' "this"' "this sentence into"' "this sentence into shingles"' "sentence"' "sentence into shingles"' "into"' "shingles" }' new int[] { 0' 0' 0' 7' 7' 7' 14' 14' 14' 19' 19' 28' 33 }' new int[] { 6' 18' 27' 13' 27' 32' 18' 32' 41' 27' 41' 32' 41 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinShingleSize,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide this sentence into shingles"' new string[] { "please"' "please divide this"' "please divide this sentence"' "divide"' "divide this sentence"' "divide this sentence into"' "this"' "this sentence into"' "this sentence into shingles"' "sentence"' "sentence into shingles"' "into"' "shingles" }' new int[] { 0' 0' 0' 7' 7' 7' 14' 14' 14' 19' 19' 28' 33 }' new int[] { 6' 18' 27' 13' 27' 32' 18' 32' 41' 27' 41' 32' 41 }' new int[] { 1' 0' 0' 1' 0' 0' 1' 0' 0' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinShingleSize,The following statement contains a magic number: analyzer = new ShingleAnalyzerWrapper(new MockAnalyzer(Random' MockTokenizer.WHITESPACE' false)' 3' 4' ShingleFilter.DEFAULT_TOKEN_SEPARATOR' false' false' ShingleFilter.DEFAULT_FILLER_TOKEN);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinShingleSize,The following statement contains a magic number: analyzer = new ShingleAnalyzerWrapper(new MockAnalyzer(Random' MockTokenizer.WHITESPACE' false)' 3' 4' ShingleFilter.DEFAULT_TOKEN_SEPARATOR' false' false' ShingleFilter.DEFAULT_FILLER_TOKEN);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinShingleSize,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide this sentence into shingles"' new string[] { "please divide this"' "please divide this sentence"' "divide this sentence"' "divide this sentence into"' "this sentence into"' "this sentence into shingles"' "sentence into shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 18' 27' 27' 32' 32' 41' 41 }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinShingleSize,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide this sentence into shingles"' new string[] { "please divide this"' "please divide this sentence"' "divide this sentence"' "divide this sentence into"' "this sentence into"' "this sentence into shingles"' "sentence into shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 18' 27' 27' 32' 32' 41' 41 }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinShingleSize,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide this sentence into shingles"' new string[] { "please divide this"' "please divide this sentence"' "divide this sentence"' "divide this sentence into"' "this sentence into"' "this sentence into shingles"' "sentence into shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 18' 27' 27' 32' 32' 41' 41 }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinShingleSize,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide this sentence into shingles"' new string[] { "please divide this"' "please divide this sentence"' "divide this sentence"' "divide this sentence into"' "this sentence into"' "this sentence into shingles"' "sentence into shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 18' 27' 27' 32' 32' 41' 41 }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinShingleSize,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide this sentence into shingles"' new string[] { "please divide this"' "please divide this sentence"' "divide this sentence"' "divide this sentence into"' "this sentence into"' "this sentence into shingles"' "sentence into shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 18' 27' 27' 32' 32' 41' 41 }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinShingleSize,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide this sentence into shingles"' new string[] { "please divide this"' "please divide this sentence"' "divide this sentence"' "divide this sentence into"' "this sentence into"' "this sentence into shingles"' "sentence into shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 18' 27' 27' 32' 32' 41' 41 }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinShingleSize,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide this sentence into shingles"' new string[] { "please divide this"' "please divide this sentence"' "divide this sentence"' "divide this sentence into"' "this sentence into"' "this sentence into shingles"' "sentence into shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 18' 27' 27' 32' 32' 41' 41 }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinShingleSize,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide this sentence into shingles"' new string[] { "please divide this"' "please divide this sentence"' "divide this sentence"' "divide this sentence into"' "this sentence into"' "this sentence into shingles"' "sentence into shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 18' 27' 27' 32' 32' 41' 41 }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinShingleSize,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide this sentence into shingles"' new string[] { "please divide this"' "please divide this sentence"' "divide this sentence"' "divide this sentence into"' "this sentence into"' "this sentence into shingles"' "sentence into shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 18' 27' 27' 32' 32' 41' 41 }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinShingleSize,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide this sentence into shingles"' new string[] { "please divide this"' "please divide this sentence"' "divide this sentence"' "divide this sentence into"' "this sentence into"' "this sentence into shingles"' "sentence into shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 18' 27' 27' 32' 32' 41' 41 }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinShingleSize,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide this sentence into shingles"' new string[] { "please divide this"' "please divide this sentence"' "divide this sentence"' "divide this sentence into"' "this sentence into"' "this sentence into shingles"' "sentence into shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 18' 27' 27' 32' 32' 41' 41 }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinShingleSize,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide this sentence into shingles"' new string[] { "please divide this"' "please divide this sentence"' "divide this sentence"' "divide this sentence into"' "this sentence into"' "this sentence into shingles"' "sentence into shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 18' 27' 27' 32' 32' 41' 41 }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinAndSameMaxShingleSize,The following statement contains a magic number: ShingleAnalyzerWrapper analyzer = new ShingleAnalyzerWrapper(new MockAnalyzer(Random' MockTokenizer.WHITESPACE' false)' 3' 3);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinAndSameMaxShingleSize,The following statement contains a magic number: ShingleAnalyzerWrapper analyzer = new ShingleAnalyzerWrapper(new MockAnalyzer(Random' MockTokenizer.WHITESPACE' false)' 3' 3);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinAndSameMaxShingleSize,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide this sentence into shingles"' new string[] { "please"' "please divide this"' "divide"' "divide this sentence"' "this"' "this sentence into"' "sentence"' "sentence into shingles"' "into"' "shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19' 19' 28' 33 }' new int[] { 6' 18' 13' 27' 18' 32' 27' 41' 32' 41 }' new int[] { 1' 0' 1' 0' 1' 0' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinAndSameMaxShingleSize,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide this sentence into shingles"' new string[] { "please"' "please divide this"' "divide"' "divide this sentence"' "this"' "this sentence into"' "sentence"' "sentence into shingles"' "into"' "shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19' 19' 28' 33 }' new int[] { 6' 18' 13' 27' 18' 32' 27' 41' 32' 41 }' new int[] { 1' 0' 1' 0' 1' 0' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinAndSameMaxShingleSize,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide this sentence into shingles"' new string[] { "please"' "please divide this"' "divide"' "divide this sentence"' "this"' "this sentence into"' "sentence"' "sentence into shingles"' "into"' "shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19' 19' 28' 33 }' new int[] { 6' 18' 13' 27' 18' 32' 27' 41' 32' 41 }' new int[] { 1' 0' 1' 0' 1' 0' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinAndSameMaxShingleSize,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide this sentence into shingles"' new string[] { "please"' "please divide this"' "divide"' "divide this sentence"' "this"' "this sentence into"' "sentence"' "sentence into shingles"' "into"' "shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19' 19' 28' 33 }' new int[] { 6' 18' 13' 27' 18' 32' 27' 41' 32' 41 }' new int[] { 1' 0' 1' 0' 1' 0' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinAndSameMaxShingleSize,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide this sentence into shingles"' new string[] { "please"' "please divide this"' "divide"' "divide this sentence"' "this"' "this sentence into"' "sentence"' "sentence into shingles"' "into"' "shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19' 19' 28' 33 }' new int[] { 6' 18' 13' 27' 18' 32' 27' 41' 32' 41 }' new int[] { 1' 0' 1' 0' 1' 0' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinAndSameMaxShingleSize,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide this sentence into shingles"' new string[] { "please"' "please divide this"' "divide"' "divide this sentence"' "this"' "this sentence into"' "sentence"' "sentence into shingles"' "into"' "shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19' 19' 28' 33 }' new int[] { 6' 18' 13' 27' 18' 32' 27' 41' 32' 41 }' new int[] { 1' 0' 1' 0' 1' 0' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinAndSameMaxShingleSize,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide this sentence into shingles"' new string[] { "please"' "please divide this"' "divide"' "divide this sentence"' "this"' "this sentence into"' "sentence"' "sentence into shingles"' "into"' "shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19' 19' 28' 33 }' new int[] { 6' 18' 13' 27' 18' 32' 27' 41' 32' 41 }' new int[] { 1' 0' 1' 0' 1' 0' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinAndSameMaxShingleSize,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide this sentence into shingles"' new string[] { "please"' "please divide this"' "divide"' "divide this sentence"' "this"' "this sentence into"' "sentence"' "sentence into shingles"' "into"' "shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19' 19' 28' 33 }' new int[] { 6' 18' 13' 27' 18' 32' 27' 41' 32' 41 }' new int[] { 1' 0' 1' 0' 1' 0' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinAndSameMaxShingleSize,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide this sentence into shingles"' new string[] { "please"' "please divide this"' "divide"' "divide this sentence"' "this"' "this sentence into"' "sentence"' "sentence into shingles"' "into"' "shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19' 19' 28' 33 }' new int[] { 6' 18' 13' 27' 18' 32' 27' 41' 32' 41 }' new int[] { 1' 0' 1' 0' 1' 0' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinAndSameMaxShingleSize,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide this sentence into shingles"' new string[] { "please"' "please divide this"' "divide"' "divide this sentence"' "this"' "this sentence into"' "sentence"' "sentence into shingles"' "into"' "shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19' 19' 28' 33 }' new int[] { 6' 18' 13' 27' 18' 32' 27' 41' 32' 41 }' new int[] { 1' 0' 1' 0' 1' 0' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinAndSameMaxShingleSize,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide this sentence into shingles"' new string[] { "please"' "please divide this"' "divide"' "divide this sentence"' "this"' "this sentence into"' "sentence"' "sentence into shingles"' "into"' "shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19' 19' 28' 33 }' new int[] { 6' 18' 13' 27' 18' 32' 27' 41' 32' 41 }' new int[] { 1' 0' 1' 0' 1' 0' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinAndSameMaxShingleSize,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide this sentence into shingles"' new string[] { "please"' "please divide this"' "divide"' "divide this sentence"' "this"' "this sentence into"' "sentence"' "sentence into shingles"' "into"' "shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19' 19' 28' 33 }' new int[] { 6' 18' 13' 27' 18' 32' 27' 41' 32' 41 }' new int[] { 1' 0' 1' 0' 1' 0' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinAndSameMaxShingleSize,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide this sentence into shingles"' new string[] { "please"' "please divide this"' "divide"' "divide this sentence"' "this"' "this sentence into"' "sentence"' "sentence into shingles"' "into"' "shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19' 19' 28' 33 }' new int[] { 6' 18' 13' 27' 18' 32' 27' 41' 32' 41 }' new int[] { 1' 0' 1' 0' 1' 0' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinAndSameMaxShingleSize,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide this sentence into shingles"' new string[] { "please"' "please divide this"' "divide"' "divide this sentence"' "this"' "this sentence into"' "sentence"' "sentence into shingles"' "into"' "shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19' 19' 28' 33 }' new int[] { 6' 18' 13' 27' 18' 32' 27' 41' 32' 41 }' new int[] { 1' 0' 1' 0' 1' 0' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinAndSameMaxShingleSize,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide this sentence into shingles"' new string[] { "please"' "please divide this"' "divide"' "divide this sentence"' "this"' "this sentence into"' "sentence"' "sentence into shingles"' "into"' "shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19' 19' 28' 33 }' new int[] { 6' 18' 13' 27' 18' 32' 27' 41' 32' 41 }' new int[] { 1' 0' 1' 0' 1' 0' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinAndSameMaxShingleSize,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide this sentence into shingles"' new string[] { "please"' "please divide this"' "divide"' "divide this sentence"' "this"' "this sentence into"' "sentence"' "sentence into shingles"' "into"' "shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19' 19' 28' 33 }' new int[] { 6' 18' 13' 27' 18' 32' 27' 41' 32' 41 }' new int[] { 1' 0' 1' 0' 1' 0' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinAndSameMaxShingleSize,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide this sentence into shingles"' new string[] { "please"' "please divide this"' "divide"' "divide this sentence"' "this"' "this sentence into"' "sentence"' "sentence into shingles"' "into"' "shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19' 19' 28' 33 }' new int[] { 6' 18' 13' 27' 18' 32' 27' 41' 32' 41 }' new int[] { 1' 0' 1' 0' 1' 0' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinAndSameMaxShingleSize,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide this sentence into shingles"' new string[] { "please"' "please divide this"' "divide"' "divide this sentence"' "this"' "this sentence into"' "sentence"' "sentence into shingles"' "into"' "shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19' 19' 28' 33 }' new int[] { 6' 18' 13' 27' 18' 32' 27' 41' 32' 41 }' new int[] { 1' 0' 1' 0' 1' 0' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinAndSameMaxShingleSize,The following statement contains a magic number: analyzer = new ShingleAnalyzerWrapper(new MockAnalyzer(Random' MockTokenizer.WHITESPACE' false)' 3' 3' ShingleFilter.DEFAULT_TOKEN_SEPARATOR' false' false' ShingleFilter.DEFAULT_FILLER_TOKEN);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinAndSameMaxShingleSize,The following statement contains a magic number: analyzer = new ShingleAnalyzerWrapper(new MockAnalyzer(Random' MockTokenizer.WHITESPACE' false)' 3' 3' ShingleFilter.DEFAULT_TOKEN_SEPARATOR' false' false' ShingleFilter.DEFAULT_FILLER_TOKEN);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinAndSameMaxShingleSize,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide this sentence into shingles"' new string[] { "please divide this"' "divide this sentence"' "this sentence into"' "sentence into shingles" }' new int[] { 0' 7' 14' 19 }' new int[] { 18' 27' 32' 41 }' new int[] { 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinAndSameMaxShingleSize,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide this sentence into shingles"' new string[] { "please divide this"' "divide this sentence"' "this sentence into"' "sentence into shingles" }' new int[] { 0' 7' 14' 19 }' new int[] { 18' 27' 32' 41 }' new int[] { 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinAndSameMaxShingleSize,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide this sentence into shingles"' new string[] { "please divide this"' "divide this sentence"' "this sentence into"' "sentence into shingles" }' new int[] { 0' 7' 14' 19 }' new int[] { 18' 27' 32' 41 }' new int[] { 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinAndSameMaxShingleSize,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide this sentence into shingles"' new string[] { "please divide this"' "divide this sentence"' "this sentence into"' "sentence into shingles" }' new int[] { 0' 7' 14' 19 }' new int[] { 18' 27' 32' 41 }' new int[] { 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinAndSameMaxShingleSize,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide this sentence into shingles"' new string[] { "please divide this"' "divide this sentence"' "this sentence into"' "sentence into shingles" }' new int[] { 0' 7' 14' 19 }' new int[] { 18' 27' 32' 41 }' new int[] { 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinAndSameMaxShingleSize,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide this sentence into shingles"' new string[] { "please divide this"' "divide this sentence"' "this sentence into"' "sentence into shingles" }' new int[] { 0' 7' 14' 19 }' new int[] { 18' 27' 32' 41 }' new int[] { 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNonDefaultMinAndSameMaxShingleSize,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide this sentence into shingles"' new string[] { "please divide this"' "divide this sentence"' "this sentence into"' "sentence into shingles" }' new int[] { 0' 7' 14' 19 }' new int[] { 18' 27' 32' 41 }' new int[] { 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNoTokenSeparator,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "please"' "pleasedivide"' "divide"' "divideinto"' "into"' "intoshingles"' "shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNoTokenSeparator,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "please"' "pleasedivide"' "divide"' "divideinto"' "into"' "intoshingles"' "shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNoTokenSeparator,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "please"' "pleasedivide"' "divide"' "divideinto"' "into"' "intoshingles"' "shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNoTokenSeparator,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "please"' "pleasedivide"' "divide"' "divideinto"' "into"' "intoshingles"' "shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNoTokenSeparator,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "please"' "pleasedivide"' "divide"' "divideinto"' "into"' "intoshingles"' "shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNoTokenSeparator,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "please"' "pleasedivide"' "divide"' "divideinto"' "into"' "intoshingles"' "shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNoTokenSeparator,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "please"' "pleasedivide"' "divide"' "divideinto"' "into"' "intoshingles"' "shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNoTokenSeparator,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "please"' "pleasedivide"' "divide"' "divideinto"' "into"' "intoshingles"' "shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNoTokenSeparator,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "please"' "pleasedivide"' "divide"' "divideinto"' "into"' "intoshingles"' "shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNoTokenSeparator,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "please"' "pleasedivide"' "divide"' "divideinto"' "into"' "intoshingles"' "shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNoTokenSeparator,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "please"' "pleasedivide"' "divide"' "divideinto"' "into"' "intoshingles"' "shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNoTokenSeparator,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "please"' "pleasedivide"' "divide"' "divideinto"' "into"' "intoshingles"' "shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNoTokenSeparator,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "pleasedivide"' "divideinto"' "intoshingles" }' new int[] { 0' 7' 14 }' new int[] { 13' 18' 27 }' new int[] { 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNoTokenSeparator,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "pleasedivide"' "divideinto"' "intoshingles" }' new int[] { 0' 7' 14 }' new int[] { 13' 18' 27 }' new int[] { 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNoTokenSeparator,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "pleasedivide"' "divideinto"' "intoshingles" }' new int[] { 0' 7' 14 }' new int[] { 13' 18' 27 }' new int[] { 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNoTokenSeparator,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "pleasedivide"' "divideinto"' "intoshingles" }' new int[] { 0' 7' 14 }' new int[] { 13' 18' 27 }' new int[] { 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNoTokenSeparator,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "pleasedivide"' "divideinto"' "intoshingles" }' new int[] { 0' 7' 14 }' new int[] { 13' 18' 27 }' new int[] { 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNullTokenSeparator,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "please"' "pleasedivide"' "divide"' "divideinto"' "into"' "intoshingles"' "shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNullTokenSeparator,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "please"' "pleasedivide"' "divide"' "divideinto"' "into"' "intoshingles"' "shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNullTokenSeparator,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "please"' "pleasedivide"' "divide"' "divideinto"' "into"' "intoshingles"' "shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNullTokenSeparator,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "please"' "pleasedivide"' "divide"' "divideinto"' "into"' "intoshingles"' "shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNullTokenSeparator,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "please"' "pleasedivide"' "divide"' "divideinto"' "into"' "intoshingles"' "shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNullTokenSeparator,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "please"' "pleasedivide"' "divide"' "divideinto"' "into"' "intoshingles"' "shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNullTokenSeparator,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "please"' "pleasedivide"' "divide"' "divideinto"' "into"' "intoshingles"' "shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNullTokenSeparator,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "please"' "pleasedivide"' "divide"' "divideinto"' "into"' "intoshingles"' "shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNullTokenSeparator,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "please"' "pleasedivide"' "divide"' "divideinto"' "into"' "intoshingles"' "shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNullTokenSeparator,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "please"' "pleasedivide"' "divide"' "divideinto"' "into"' "intoshingles"' "shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNullTokenSeparator,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "please"' "pleasedivide"' "divide"' "divideinto"' "into"' "intoshingles"' "shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNullTokenSeparator,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "please"' "pleasedivide"' "divide"' "divideinto"' "into"' "intoshingles"' "shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNullTokenSeparator,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "pleasedivide"' "divideinto"' "intoshingles" }' new int[] { 0' 7' 14 }' new int[] { 13' 18' 27 }' new int[] { 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNullTokenSeparator,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "pleasedivide"' "divideinto"' "intoshingles" }' new int[] { 0' 7' 14 }' new int[] { 13' 18' 27 }' new int[] { 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNullTokenSeparator,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "pleasedivide"' "divideinto"' "intoshingles" }' new int[] { 0' 7' 14 }' new int[] { 13' 18' 27 }' new int[] { 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNullTokenSeparator,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "pleasedivide"' "divideinto"' "intoshingles" }' new int[] { 0' 7' 14 }' new int[] { 13' 18' 27 }' new int[] { 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestNullTokenSeparator,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "pleasedivide"' "divideinto"' "intoshingles" }' new int[] { 0' 7' 14 }' new int[] { 13' 18' 27 }' new int[] { 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestAltTokenSeparator,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "please"' "please<SEP>divide"' "divide"' "divide<SEP>into"' "into"' "into<SEP>shingles"' "shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestAltTokenSeparator,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "please"' "please<SEP>divide"' "divide"' "divide<SEP>into"' "into"' "into<SEP>shingles"' "shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestAltTokenSeparator,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "please"' "please<SEP>divide"' "divide"' "divide<SEP>into"' "into"' "into<SEP>shingles"' "shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestAltTokenSeparator,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "please"' "please<SEP>divide"' "divide"' "divide<SEP>into"' "into"' "into<SEP>shingles"' "shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestAltTokenSeparator,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "please"' "please<SEP>divide"' "divide"' "divide<SEP>into"' "into"' "into<SEP>shingles"' "shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestAltTokenSeparator,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "please"' "please<SEP>divide"' "divide"' "divide<SEP>into"' "into"' "into<SEP>shingles"' "shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestAltTokenSeparator,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "please"' "please<SEP>divide"' "divide"' "divide<SEP>into"' "into"' "into<SEP>shingles"' "shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestAltTokenSeparator,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "please"' "please<SEP>divide"' "divide"' "divide<SEP>into"' "into"' "into<SEP>shingles"' "shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestAltTokenSeparator,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "please"' "please<SEP>divide"' "divide"' "divide<SEP>into"' "into"' "into<SEP>shingles"' "shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestAltTokenSeparator,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "please"' "please<SEP>divide"' "divide"' "divide<SEP>into"' "into"' "into<SEP>shingles"' "shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestAltTokenSeparator,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "please"' "please<SEP>divide"' "divide"' "divide<SEP>into"' "into"' "into<SEP>shingles"' "shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestAltTokenSeparator,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "please"' "please<SEP>divide"' "divide"' "divide<SEP>into"' "into"' "into<SEP>shingles"' "shingles" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestAltTokenSeparator,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "please<SEP>divide"' "divide<SEP>into"' "into<SEP>shingles" }' new int[] { 0' 7' 14 }' new int[] { 13' 18' 27 }' new int[] { 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestAltTokenSeparator,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "please<SEP>divide"' "divide<SEP>into"' "into<SEP>shingles" }' new int[] { 0' 7' 14 }' new int[] { 13' 18' 27 }' new int[] { 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestAltTokenSeparator,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "please<SEP>divide"' "divide<SEP>into"' "into<SEP>shingles" }' new int[] { 0' 7' 14 }' new int[] { 13' 18' 27 }' new int[] { 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestAltTokenSeparator,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "please<SEP>divide"' "divide<SEP>into"' "into<SEP>shingles" }' new int[] { 0' 7' 14 }' new int[] { 13' 18' 27 }' new int[] { 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestAltTokenSeparator,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "please<SEP>divide"' "divide<SEP>into"' "into<SEP>shingles" }' new int[] { 0' 7' 14 }' new int[] { 13' 18' 27 }' new int[] { 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestAltFillerToken,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "please"' "please divide"' "divide"' "divide --"' "-- shingles"' "shingles" }' new int[] { 0' 0' 7' 7' 19' 19 }' new int[] { 6' 13' 13' 19' 27' 27 }' new int[] { 1' 0' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestAltFillerToken,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "please"' "please divide"' "divide"' "divide --"' "-- shingles"' "shingles" }' new int[] { 0' 0' 7' 7' 19' 19 }' new int[] { 6' 13' 13' 19' 27' 27 }' new int[] { 1' 0' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestAltFillerToken,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "please"' "please divide"' "divide"' "divide --"' "-- shingles"' "shingles" }' new int[] { 0' 0' 7' 7' 19' 19 }' new int[] { 6' 13' 13' 19' 27' 27 }' new int[] { 1' 0' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestAltFillerToken,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "please"' "please divide"' "divide"' "divide --"' "-- shingles"' "shingles" }' new int[] { 0' 0' 7' 7' 19' 19 }' new int[] { 6' 13' 13' 19' 27' 27 }' new int[] { 1' 0' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestAltFillerToken,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "please"' "please divide"' "divide"' "divide --"' "-- shingles"' "shingles" }' new int[] { 0' 0' 7' 7' 19' 19 }' new int[] { 6' 13' 13' 19' 27' 27 }' new int[] { 1' 0' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestAltFillerToken,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "please"' "please divide"' "divide"' "divide --"' "-- shingles"' "shingles" }' new int[] { 0' 0' 7' 7' 19' 19 }' new int[] { 6' 13' 13' 19' 27' 27 }' new int[] { 1' 0' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestAltFillerToken,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "please"' "please divide"' "divide"' "divide --"' "-- shingles"' "shingles" }' new int[] { 0' 0' 7' 7' 19' 19 }' new int[] { 6' 13' 13' 19' 27' 27 }' new int[] { 1' 0' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestAltFillerToken,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "please"' "please divide"' "divide"' "divide --"' "-- shingles"' "shingles" }' new int[] { 0' 0' 7' 7' 19' 19 }' new int[] { 6' 13' 13' 19' 27' 27 }' new int[] { 1' 0' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestAltFillerToken,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "please"' "please divide"' "divide"' "divide --"' "-- shingles"' "shingles" }' new int[] { 0' 0' 7' 7' 19' 19 }' new int[] { 6' 13' 13' 19' 27' 27 }' new int[] { 1' 0' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestAltFillerToken,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "please"' "please divide"' "divide"' "divide --"' "-- shingles"' "shingles" }' new int[] { 0' 0' 7' 7' 19' 19 }' new int[] { 6' 13' 13' 19' 27' 27 }' new int[] { 1' 0' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestAltFillerToken,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "please divide"' "divide "' " shingles" }' new int[] { 0' 7' 19 }' new int[] { 13' 19' 27 }' new int[] { 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestAltFillerToken,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "please divide"' "divide "' " shingles" }' new int[] { 0' 7' 19 }' new int[] { 13' 19' 27 }' new int[] { 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestAltFillerToken,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "please divide"' "divide "' " shingles" }' new int[] { 0' 7' 19 }' new int[] { 13' 19' 27 }' new int[] { 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestAltFillerToken,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "please divide"' "divide "' " shingles" }' new int[] { 0' 7' 19 }' new int[] { 13' 19' 27 }' new int[] { 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestAltFillerToken,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "please divide"' "divide "' " shingles" }' new int[] { 0' 7' 19 }' new int[] { 13' 19' 27 }' new int[] { 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestAltFillerToken,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "please divide"' "divide "' " shingles" }' new int[] { 0' 7' 19 }' new int[] { 13' 19' 27 }' new int[] { 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestAltFillerToken,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "please divide"' "divide "' " shingles" }' new int[] { 0' 7' 19 }' new int[] { 13' 19' 27 }' new int[] { 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestAltFillerToken,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "please divide"' "divide "' " shingles" }' new int[] { 0' 7' 19 }' new int[] { 13' 19' 27 }' new int[] { 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestAltFillerToken,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "please divide"' "divide "' " shingles" }' new int[] { 0' 7' 19 }' new int[] { 13' 19' 27 }' new int[] { 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestAltFillerToken,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please divide into shingles"' new string[] { "please divide"' "divide "' " shingles" }' new int[] { 0' 7' 19 }' new int[] { 13' 19' 27 }' new int[] { 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleAnalyzerWrapperTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleAnalyzerWrapperTest.cs,TestOutputUnigramsIfNoShinglesSingleToken,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "please"' new string[] { "please" }' new int[] { 0 }' new int[] { 6 }' new int[] { 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,SetUp,The following statement contains a magic number: testTokenWithHoles = new Token[] { CreateToken("please"' 0' 6)' CreateToken("divide"' 7' 13)' CreateToken("sentence"' 19' 27' 2)' CreateToken("shingles"' 33' 39' 2) };
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,SetUp,The following statement contains a magic number: testTokenWithHoles = new Token[] { CreateToken("please"' 0' 6)' CreateToken("divide"' 7' 13)' CreateToken("sentence"' 19' 27' 2)' CreateToken("shingles"' 33' 39' 2) };
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,SetUp,The following statement contains a magic number: testTokenWithHoles = new Token[] { CreateToken("please"' 0' 6)' CreateToken("divide"' 7' 13)' CreateToken("sentence"' 19' 27' 2)' CreateToken("shingles"' 33' 39' 2) };
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,SetUp,The following statement contains a magic number: testTokenWithHoles = new Token[] { CreateToken("please"' 0' 6)' CreateToken("divide"' 7' 13)' CreateToken("sentence"' 19' 27' 2)' CreateToken("shingles"' 33' 39' 2) };
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,SetUp,The following statement contains a magic number: testTokenWithHoles = new Token[] { CreateToken("please"' 0' 6)' CreateToken("divide"' 7' 13)' CreateToken("sentence"' 19' 27' 2)' CreateToken("shingles"' 33' 39' 2) };
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,SetUp,The following statement contains a magic number: testTokenWithHoles = new Token[] { CreateToken("please"' 0' 6)' CreateToken("divide"' 7' 13)' CreateToken("sentence"' 19' 27' 2)' CreateToken("shingles"' 33' 39' 2) };
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,SetUp,The following statement contains a magic number: testTokenWithHoles = new Token[] { CreateToken("please"' 0' 6)' CreateToken("divide"' 7' 13)' CreateToken("sentence"' 19' 27' 2)' CreateToken("shingles"' 33' 39' 2) };
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,SetUp,The following statement contains a magic number: testTokenWithHoles = new Token[] { CreateToken("please"' 0' 6)' CreateToken("divide"' 7' 13)' CreateToken("sentence"' 19' 27' 2)' CreateToken("shingles"' 33' 39' 2) };
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,SetUp,The following statement contains a magic number: testTokenWithHoles = new Token[] { CreateToken("please"' 0' 6)' CreateToken("divide"' 7' 13)' CreateToken("sentence"' 19' 27' 2)' CreateToken("shingles"' 33' 39' 2) };
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestBiGramFilter,The following statement contains a magic number: this.shingleFilterTest(2' TEST_TOKEN' BI_GRAM_TOKENS' BI_GRAM_POSITION_INCREMENTS' BI_GRAM_TYPES' true);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestBiGramFilterWithHoles,The following statement contains a magic number: this.shingleFilterTest(2' testTokenWithHoles' BI_GRAM_TOKENS_WITH_HOLES' BI_GRAM_POSITION_INCREMENTS_WITH_HOLES' BI_GRAM_TYPES_WITH_HOLES' true);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestBiGramFilterWithoutUnigrams,The following statement contains a magic number: this.shingleFilterTest(2' TEST_TOKEN' BI_GRAM_TOKENS_WITHOUT_UNIGRAMS' BI_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS' BI_GRAM_TYPES_WITHOUT_UNIGRAMS' false);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestBiGramFilterWithHolesWithoutUnigrams,The following statement contains a magic number: this.shingleFilterTest(2' testTokenWithHoles' BI_GRAM_TOKENS_WITH_HOLES_WITHOUT_UNIGRAMS' BI_GRAM_POSITION_INCREMENTS_WITH_HOLES_WITHOUT_UNIGRAMS' BI_GRAM_TYPES_WITHOUT_UNIGRAMS' false);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestBiGramFilterWithSingleToken,The following statement contains a magic number: this.shingleFilterTest(2' TEST_SINGLE_TOKEN' SINGLE_TOKEN' SINGLE_TOKEN_INCREMENTS' SINGLE_TOKEN_TYPES' true);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestBiGramFilterWithSingleTokenWithoutUnigrams,The following statement contains a magic number: this.shingleFilterTest(2' TEST_SINGLE_TOKEN' EMPTY_TOKEN_ARRAY' EMPTY_TOKEN_INCREMENTS_ARRAY' EMPTY_TOKEN_TYPES_ARRAY' false);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestBiGramFilterWithEmptyTokenStream,The following statement contains a magic number: this.shingleFilterTest(2' EMPTY_TOKEN_ARRAY' EMPTY_TOKEN_ARRAY' EMPTY_TOKEN_INCREMENTS_ARRAY' EMPTY_TOKEN_TYPES_ARRAY' true);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestBiGramFilterWithEmptyTokenStreamWithoutUnigrams,The following statement contains a magic number: this.shingleFilterTest(2' EMPTY_TOKEN_ARRAY' EMPTY_TOKEN_ARRAY' EMPTY_TOKEN_INCREMENTS_ARRAY' EMPTY_TOKEN_TYPES_ARRAY' false);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTriGramFilter,The following statement contains a magic number: this.shingleFilterTest(3' TEST_TOKEN' TRI_GRAM_TOKENS' TRI_GRAM_POSITION_INCREMENTS' TRI_GRAM_TYPES' true);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTriGramFilterWithoutUnigrams,The following statement contains a magic number: this.shingleFilterTest(3' TEST_TOKEN' TRI_GRAM_TOKENS_WITHOUT_UNIGRAMS' TRI_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS' TRI_GRAM_TYPES_WITHOUT_UNIGRAMS' false);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestFourGramFilter,The following statement contains a magic number: this.shingleFilterTest(4' TEST_TOKEN' FOUR_GRAM_TOKENS' FOUR_GRAM_POSITION_INCREMENTS' FOUR_GRAM_TYPES' true);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestFourGramFilterWithoutUnigrams,The following statement contains a magic number: this.shingleFilterTest(4' TEST_TOKEN' FOUR_GRAM_TOKENS_WITHOUT_UNIGRAMS' FOUR_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS' FOUR_GRAM_TYPES_WITHOUT_UNIGRAMS' false);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTriGramFilterMinTriGram,The following statement contains a magic number: this.shingleFilterTest(3' 3' TEST_TOKEN' TRI_GRAM_TOKENS_MIN_TRI_GRAM' TRI_GRAM_POSITION_INCREMENTS_MIN_TRI_GRAM' TRI_GRAM_TYPES_MIN_TRI_GRAM' true);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTriGramFilterMinTriGram,The following statement contains a magic number: this.shingleFilterTest(3' 3' TEST_TOKEN' TRI_GRAM_TOKENS_MIN_TRI_GRAM' TRI_GRAM_POSITION_INCREMENTS_MIN_TRI_GRAM' TRI_GRAM_TYPES_MIN_TRI_GRAM' true);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTriGramFilterWithoutUnigramsMinTriGram,The following statement contains a magic number: this.shingleFilterTest(3' 3' TEST_TOKEN' TRI_GRAM_TOKENS_WITHOUT_UNIGRAMS_MIN_TRI_GRAM' TRI_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS_MIN_TRI_GRAM' TRI_GRAM_TYPES_WITHOUT_UNIGRAMS_MIN_TRI_GRAM' false);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTriGramFilterWithoutUnigramsMinTriGram,The following statement contains a magic number: this.shingleFilterTest(3' 3' TEST_TOKEN' TRI_GRAM_TOKENS_WITHOUT_UNIGRAMS_MIN_TRI_GRAM' TRI_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS_MIN_TRI_GRAM' TRI_GRAM_TYPES_WITHOUT_UNIGRAMS_MIN_TRI_GRAM' false);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestFourGramFilterMinTriGram,The following statement contains a magic number: this.shingleFilterTest(3' 4' TEST_TOKEN' FOUR_GRAM_TOKENS_MIN_TRI_GRAM' FOUR_GRAM_POSITION_INCREMENTS_MIN_TRI_GRAM' FOUR_GRAM_TYPES_MIN_TRI_GRAM' true);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestFourGramFilterMinTriGram,The following statement contains a magic number: this.shingleFilterTest(3' 4' TEST_TOKEN' FOUR_GRAM_TOKENS_MIN_TRI_GRAM' FOUR_GRAM_POSITION_INCREMENTS_MIN_TRI_GRAM' FOUR_GRAM_TYPES_MIN_TRI_GRAM' true);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestFourGramFilterWithoutUnigramsMinTriGram,The following statement contains a magic number: this.shingleFilterTest(3' 4' TEST_TOKEN' FOUR_GRAM_TOKENS_WITHOUT_UNIGRAMS_MIN_TRI_GRAM' FOUR_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS_MIN_TRI_GRAM' FOUR_GRAM_TYPES_WITHOUT_UNIGRAMS_MIN_TRI_GRAM' false);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestFourGramFilterWithoutUnigramsMinTriGram,The following statement contains a magic number: this.shingleFilterTest(3' 4' TEST_TOKEN' FOUR_GRAM_TOKENS_WITHOUT_UNIGRAMS_MIN_TRI_GRAM' FOUR_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS_MIN_TRI_GRAM' FOUR_GRAM_TYPES_WITHOUT_UNIGRAMS_MIN_TRI_GRAM' false);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestFourGramFilterMinFourGram,The following statement contains a magic number: this.shingleFilterTest(4' 4' TEST_TOKEN' FOUR_GRAM_TOKENS_MIN_FOUR_GRAM' FOUR_GRAM_POSITION_INCREMENTS_MIN_FOUR_GRAM' FOUR_GRAM_TYPES_MIN_FOUR_GRAM' true);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestFourGramFilterMinFourGram,The following statement contains a magic number: this.shingleFilterTest(4' 4' TEST_TOKEN' FOUR_GRAM_TOKENS_MIN_FOUR_GRAM' FOUR_GRAM_POSITION_INCREMENTS_MIN_FOUR_GRAM' FOUR_GRAM_TYPES_MIN_FOUR_GRAM' true);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestFourGramFilterWithoutUnigramsMinFourGram,The following statement contains a magic number: this.shingleFilterTest(4' 4' TEST_TOKEN' FOUR_GRAM_TOKENS_WITHOUT_UNIGRAMS_MIN_FOUR_GRAM' FOUR_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS_MIN_FOUR_GRAM' FOUR_GRAM_TYPES_WITHOUT_UNIGRAMS_MIN_FOUR_GRAM' false);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestFourGramFilterWithoutUnigramsMinFourGram,The following statement contains a magic number: this.shingleFilterTest(4' 4' TEST_TOKEN' FOUR_GRAM_TOKENS_WITHOUT_UNIGRAMS_MIN_FOUR_GRAM' FOUR_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS_MIN_FOUR_GRAM' FOUR_GRAM_TYPES_WITHOUT_UNIGRAMS_MIN_FOUR_GRAM' false);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestBiGramFilterNoSeparator,The following statement contains a magic number: this.shingleFilterTest(""' 2' 2' TEST_TOKEN' BI_GRAM_TOKENS_NO_SEPARATOR' BI_GRAM_POSITION_INCREMENTS_NO_SEPARATOR' BI_GRAM_TYPES_NO_SEPARATOR' true);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestBiGramFilterNoSeparator,The following statement contains a magic number: this.shingleFilterTest(""' 2' 2' TEST_TOKEN' BI_GRAM_TOKENS_NO_SEPARATOR' BI_GRAM_POSITION_INCREMENTS_NO_SEPARATOR' BI_GRAM_TYPES_NO_SEPARATOR' true);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestBiGramFilterWithoutUnigramsNoSeparator,The following statement contains a magic number: this.shingleFilterTest(""' 2' 2' TEST_TOKEN' BI_GRAM_TOKENS_WITHOUT_UNIGRAMS_NO_SEPARATOR' BI_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS_NO_SEPARATOR' BI_GRAM_TYPES_WITHOUT_UNIGRAMS_NO_SEPARATOR' false);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestBiGramFilterWithoutUnigramsNoSeparator,The following statement contains a magic number: this.shingleFilterTest(""' 2' 2' TEST_TOKEN' BI_GRAM_TOKENS_WITHOUT_UNIGRAMS_NO_SEPARATOR' BI_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS_NO_SEPARATOR' BI_GRAM_TYPES_WITHOUT_UNIGRAMS_NO_SEPARATOR' false);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTriGramFilterNoSeparator,The following statement contains a magic number: this.shingleFilterTest(""' 2' 3' TEST_TOKEN' TRI_GRAM_TOKENS_NO_SEPARATOR' TRI_GRAM_POSITION_INCREMENTS_NO_SEPARATOR' TRI_GRAM_TYPES_NO_SEPARATOR' true);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTriGramFilterNoSeparator,The following statement contains a magic number: this.shingleFilterTest(""' 2' 3' TEST_TOKEN' TRI_GRAM_TOKENS_NO_SEPARATOR' TRI_GRAM_POSITION_INCREMENTS_NO_SEPARATOR' TRI_GRAM_TYPES_NO_SEPARATOR' true);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTriGramFilterWithoutUnigramsNoSeparator,The following statement contains a magic number: this.shingleFilterTest(""' 2' 3' TEST_TOKEN' TRI_GRAM_TOKENS_WITHOUT_UNIGRAMS_NO_SEPARATOR' TRI_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS_NO_SEPARATOR' TRI_GRAM_TYPES_WITHOUT_UNIGRAMS_NO_SEPARATOR' false);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTriGramFilterWithoutUnigramsNoSeparator,The following statement contains a magic number: this.shingleFilterTest(""' 2' 3' TEST_TOKEN' TRI_GRAM_TOKENS_WITHOUT_UNIGRAMS_NO_SEPARATOR' TRI_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS_NO_SEPARATOR' TRI_GRAM_TYPES_WITHOUT_UNIGRAMS_NO_SEPARATOR' false);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestBiGramFilterAltSeparator,The following statement contains a magic number: this.shingleFilterTest("<SEP>"' 2' 2' TEST_TOKEN' BI_GRAM_TOKENS_ALT_SEPARATOR' BI_GRAM_POSITION_INCREMENTS_ALT_SEPARATOR' BI_GRAM_TYPES_ALT_SEPARATOR' true);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestBiGramFilterAltSeparator,The following statement contains a magic number: this.shingleFilterTest("<SEP>"' 2' 2' TEST_TOKEN' BI_GRAM_TOKENS_ALT_SEPARATOR' BI_GRAM_POSITION_INCREMENTS_ALT_SEPARATOR' BI_GRAM_TYPES_ALT_SEPARATOR' true);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestBiGramFilterWithoutUnigramsAltSeparator,The following statement contains a magic number: this.shingleFilterTest("<SEP>"' 2' 2' TEST_TOKEN' BI_GRAM_TOKENS_WITHOUT_UNIGRAMS_ALT_SEPARATOR' BI_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS_ALT_SEPARATOR' BI_GRAM_TYPES_WITHOUT_UNIGRAMS_ALT_SEPARATOR' false);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestBiGramFilterWithoutUnigramsAltSeparator,The following statement contains a magic number: this.shingleFilterTest("<SEP>"' 2' 2' TEST_TOKEN' BI_GRAM_TOKENS_WITHOUT_UNIGRAMS_ALT_SEPARATOR' BI_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS_ALT_SEPARATOR' BI_GRAM_TYPES_WITHOUT_UNIGRAMS_ALT_SEPARATOR' false);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTriGramFilterAltSeparator,The following statement contains a magic number: this.shingleFilterTest("<SEP>"' 2' 3' TEST_TOKEN' TRI_GRAM_TOKENS_ALT_SEPARATOR' TRI_GRAM_POSITION_INCREMENTS_ALT_SEPARATOR' TRI_GRAM_TYPES_ALT_SEPARATOR' true);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTriGramFilterAltSeparator,The following statement contains a magic number: this.shingleFilterTest("<SEP>"' 2' 3' TEST_TOKEN' TRI_GRAM_TOKENS_ALT_SEPARATOR' TRI_GRAM_POSITION_INCREMENTS_ALT_SEPARATOR' TRI_GRAM_TYPES_ALT_SEPARATOR' true);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTriGramFilterWithoutUnigramsAltSeparator,The following statement contains a magic number: this.shingleFilterTest("<SEP>"' 2' 3' TEST_TOKEN' TRI_GRAM_TOKENS_WITHOUT_UNIGRAMS_ALT_SEPARATOR' TRI_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS_ALT_SEPARATOR' TRI_GRAM_TYPES_WITHOUT_UNIGRAMS_ALT_SEPARATOR' false);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTriGramFilterWithoutUnigramsAltSeparator,The following statement contains a magic number: this.shingleFilterTest("<SEP>"' 2' 3' TEST_TOKEN' TRI_GRAM_TOKENS_WITHOUT_UNIGRAMS_ALT_SEPARATOR' TRI_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS_ALT_SEPARATOR' TRI_GRAM_TYPES_WITHOUT_UNIGRAMS_ALT_SEPARATOR' false);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTriGramFilterNullSeparator,The following statement contains a magic number: this.shingleFilterTest(null' 2' 3' TEST_TOKEN' TRI_GRAM_TOKENS_NULL_SEPARATOR' TRI_GRAM_POSITION_INCREMENTS_NULL_SEPARATOR' TRI_GRAM_TYPES_NULL_SEPARATOR' true);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTriGramFilterNullSeparator,The following statement contains a magic number: this.shingleFilterTest(null' 2' 3' TEST_TOKEN' TRI_GRAM_TOKENS_NULL_SEPARATOR' TRI_GRAM_POSITION_INCREMENTS_NULL_SEPARATOR' TRI_GRAM_TYPES_NULL_SEPARATOR' true);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestPositionIncrementEqualToN,The following statement contains a magic number: this.shingleFilterTest(2' 3' TEST_TOKEN_POS_INCR_EQUAL_TO_N' TRI_GRAM_TOKENS_POS_INCR_EQUAL_TO_N' TRI_GRAM_POSITION_INCREMENTS_POS_INCR_EQUAL_TO_N' TRI_GRAM_TYPES_POS_INCR_EQUAL_TO_N' true);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestPositionIncrementEqualToN,The following statement contains a magic number: this.shingleFilterTest(2' 3' TEST_TOKEN_POS_INCR_EQUAL_TO_N' TRI_GRAM_TOKENS_POS_INCR_EQUAL_TO_N' TRI_GRAM_POSITION_INCREMENTS_POS_INCR_EQUAL_TO_N' TRI_GRAM_TYPES_POS_INCR_EQUAL_TO_N' true);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestPositionIncrementEqualToNWithoutUnigrams,The following statement contains a magic number: this.shingleFilterTest(2' 3' TEST_TOKEN_POS_INCR_EQUAL_TO_N' TRI_GRAM_TOKENS_POS_INCR_EQUAL_TO_N_WITHOUT_UNIGRAMS' TRI_GRAM_POSITION_INCREMENTS_POS_INCR_EQUAL_TO_N_WITHOUT_UNIGRAMS' TRI_GRAM_TYPES_POS_INCR_EQUAL_TO_N_WITHOUT_UNIGRAMS' false);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestPositionIncrementEqualToNWithoutUnigrams,The following statement contains a magic number: this.shingleFilterTest(2' 3' TEST_TOKEN_POS_INCR_EQUAL_TO_N' TRI_GRAM_TOKENS_POS_INCR_EQUAL_TO_N_WITHOUT_UNIGRAMS' TRI_GRAM_POSITION_INCREMENTS_POS_INCR_EQUAL_TO_N_WITHOUT_UNIGRAMS' TRI_GRAM_TYPES_POS_INCR_EQUAL_TO_N_WITHOUT_UNIGRAMS' false);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestPositionIncrementGreaterThanN,The following statement contains a magic number: this.shingleFilterTest(2' 3' TEST_TOKEN_POS_INCR_GREATER_THAN_N' TRI_GRAM_TOKENS_POS_INCR_GREATER_THAN_N' TRI_GRAM_POSITION_INCREMENTS_POS_INCR_GREATER_THAN_N' TRI_GRAM_TYPES_POS_INCR_GREATER_THAN_N' true);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestPositionIncrementGreaterThanN,The following statement contains a magic number: this.shingleFilterTest(2' 3' TEST_TOKEN_POS_INCR_GREATER_THAN_N' TRI_GRAM_TOKENS_POS_INCR_GREATER_THAN_N' TRI_GRAM_POSITION_INCREMENTS_POS_INCR_GREATER_THAN_N' TRI_GRAM_TYPES_POS_INCR_GREATER_THAN_N' true);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestPositionIncrementGreaterThanNWithoutUnigrams,The following statement contains a magic number: this.shingleFilterTest(2' 3' TEST_TOKEN_POS_INCR_GREATER_THAN_N' TRI_GRAM_TOKENS_POS_INCR_GREATER_THAN_N_WITHOUT_UNIGRAMS' TRI_GRAM_POSITION_INCREMENTS_POS_INCR_GREATER_THAN_N_WITHOUT_UNIGRAMS' TRI_GRAM_TYPES_POS_INCR_GREATER_THAN_N_WITHOUT_UNIGRAMS' false);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestPositionIncrementGreaterThanNWithoutUnigrams,The following statement contains a magic number: this.shingleFilterTest(2' 3' TEST_TOKEN_POS_INCR_GREATER_THAN_N' TRI_GRAM_TOKENS_POS_INCR_GREATER_THAN_N_WITHOUT_UNIGRAMS' TRI_GRAM_POSITION_INCREMENTS_POS_INCR_GREATER_THAN_N_WITHOUT_UNIGRAMS' TRI_GRAM_TYPES_POS_INCR_GREATER_THAN_N_WITHOUT_UNIGRAMS' false);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestReset,The following statement contains a magic number: TokenStream filter = new ShingleFilter(wsTokenizer' 2);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestReset,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "please"' "please divide"' "divide"' "divide this"' "this"' "this sentence"' "sentence" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new string[] { TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestReset,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "please"' "please divide"' "divide"' "divide this"' "this"' "this sentence"' "sentence" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new string[] { TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestReset,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "please"' "please divide"' "divide"' "divide this"' "this"' "this sentence"' "sentence" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new string[] { TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestReset,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "please"' "please divide"' "divide"' "divide this"' "this"' "this sentence"' "sentence" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new string[] { TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestReset,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "please"' "please divide"' "divide"' "divide this"' "this"' "this sentence"' "sentence" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new string[] { TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestReset,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "please"' "please divide"' "divide"' "divide this"' "this"' "this sentence"' "sentence" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new string[] { TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestReset,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "please"' "please divide"' "divide"' "divide this"' "this"' "this sentence"' "sentence" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new string[] { TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestReset,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "please"' "please divide"' "divide"' "divide this"' "this"' "this sentence"' "sentence" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new string[] { TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestReset,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "please"' "please divide"' "divide"' "divide this"' "this"' "this sentence"' "sentence" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new string[] { TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestReset,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "please"' "please divide"' "divide"' "divide this"' "this"' "this sentence"' "sentence" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new string[] { TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestReset,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "please"' "please divide"' "divide"' "divide this"' "this"' "this sentence"' "sentence" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new string[] { TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestReset,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "please"' "please divide"' "divide"' "divide this"' "this"' "this sentence"' "sentence" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new string[] { TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestReset,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "please"' "please divide"' "divide"' "divide this"' "this"' "this sentence"' "sentence" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new string[] { TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestReset,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "please"' "please divide"' "divide"' "divide this"' "this"' "this sentence"' "sentence" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new string[] { TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestReset,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "please"' "please divide"' "divide"' "divide this"' "this"' "this sentence"' "sentence" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new string[] { TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestReset,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "please"' "please divide"' "divide"' "divide this"' "this"' "this sentence"' "sentence" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new string[] { TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestReset,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "please"' "please divide"' "divide"' "divide this"' "this"' "this sentence"' "sentence" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new string[] { TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestReset,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "please"' "please divide"' "divide"' "divide this"' "this"' "this sentence"' "sentence" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new string[] { TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestReset,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "please"' "please divide"' "divide"' "divide this"' "this"' "this sentence"' "sentence" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new string[] { TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestReset,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "please"' "please divide"' "divide"' "divide this"' "this"' "this sentence"' "sentence" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new string[] { TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestReset,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "please"' "please divide"' "divide"' "divide this"' "this"' "this sentence"' "sentence" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new string[] { TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestReset,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "please"' "please divide"' "divide"' "divide this"' "this"' "this sentence"' "sentence" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new string[] { TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestReset,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "please"' "please divide"' "divide"' "divide this"' "this"' "this sentence"' "sentence" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new string[] { TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestReset,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "please"' "please divide"' "divide"' "divide this"' "this"' "this sentence"' "sentence" }' new int[] { 0' 0' 7' 7' 14' 14' 19 }' new int[] { 6' 13' 13' 18' 18' 27' 27 }' new string[] { TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE' "shingle"' TypeAttribute.DEFAULT_TYPE }' new int[] { 1' 0' 1' 0' 1' 0' 1 });
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestOutputUnigramsIfNoShinglesSingleTokenCase,The following statement contains a magic number: this.shingleFilterTest(2' 2' TEST_SINGLE_TOKEN' SINGLE_TOKEN' SINGLE_TOKEN_INCREMENTS' SINGLE_TOKEN_TYPES' false' true);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestOutputUnigramsIfNoShinglesSingleTokenCase,The following statement contains a magic number: this.shingleFilterTest(2' 2' TEST_SINGLE_TOKEN' SINGLE_TOKEN' SINGLE_TOKEN_INCREMENTS' SINGLE_TOKEN_TYPES' false' true);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestOutputUnigramsIfNoShinglesWithSimpleBigram,The following statement contains a magic number: this.shingleFilterTest(2' 2' TEST_TOKEN' BI_GRAM_TOKENS' BI_GRAM_POSITION_INCREMENTS' BI_GRAM_TYPES' true' true);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestOutputUnigramsIfNoShinglesWithSimpleBigram,The following statement contains a magic number: this.shingleFilterTest(2' 2' TEST_TOKEN' BI_GRAM_TOKENS' BI_GRAM_POSITION_INCREMENTS' BI_GRAM_TYPES' true' true);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestOutputUnigramsIfNoShinglesWithSimpleUnigramlessBigram,The following statement contains a magic number: this.shingleFilterTest(2' 2' TEST_TOKEN' BI_GRAM_TOKENS_WITHOUT_UNIGRAMS' BI_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS' BI_GRAM_TYPES_WITHOUT_UNIGRAMS' false' true);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestOutputUnigramsIfNoShinglesWithSimpleUnigramlessBigram,The following statement contains a magic number: this.shingleFilterTest(2' 2' TEST_TOKEN' BI_GRAM_TOKENS_WITHOUT_UNIGRAMS' BI_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS' BI_GRAM_TYPES_WITHOUT_UNIGRAMS' false' true);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestOutputUnigramsIfNoShinglesWithMultipleInputTokens,The following statement contains a magic number: this.shingleFilterTest(7' 7' TEST_TOKEN' TEST_TOKEN' UNIGRAM_ONLY_POSITION_INCREMENTS' UNIGRAM_ONLY_TYPES' false' true);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestOutputUnigramsIfNoShinglesWithMultipleInputTokens,The following statement contains a magic number: this.shingleFilterTest(7' 7' TEST_TOKEN' TEST_TOKEN' UNIGRAM_ONLY_POSITION_INCREMENTS' UNIGRAM_ONLY_TYPES' false' true);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' a' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestRandomHugeStrings,The following statement contains a magic number: CheckRandomData(random' a' 100 * RANDOM_MULTIPLIER' 8192);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestRandomHugeStrings,The following statement contains a magic number: CheckRandomData(random' a' 100 * RANDOM_MULTIPLIER' 8192);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTrailingHole1,The following statement contains a magic number: Token[] inputTokens = new Token[] { CreateToken("wizard"' 0' 6) };
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTrailingHole1,The following statement contains a magic number: ShingleFilter filter = new ShingleFilter(new CannedTokenStream(1' 9' inputTokens)' 2' 2);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTrailingHole1,The following statement contains a magic number: ShingleFilter filter = new ShingleFilter(new CannedTokenStream(1' 9' inputTokens)' 2' 2);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTrailingHole1,The following statement contains a magic number: ShingleFilter filter = new ShingleFilter(new CannedTokenStream(1' 9' inputTokens)' 2' 2);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTrailingHole1,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "wizard"' "wizard _" }' new int[] { 0' 0 }' new int[] { 6' 9 }' new int[] { 1' 0 }' 9);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTrailingHole1,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "wizard"' "wizard _" }' new int[] { 0' 0 }' new int[] { 6' 9 }' new int[] { 1' 0 }' 9);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTrailingHole1,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "wizard"' "wizard _" }' new int[] { 0' 0 }' new int[] { 6' 9 }' new int[] { 1' 0 }' 9);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTrailingHole2,The following statement contains a magic number: Token[] inputTokens = new Token[] { CreateToken("purple"' 0' 6)' CreateToken("wizard"' 7' 13) };
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTrailingHole2,The following statement contains a magic number: Token[] inputTokens = new Token[] { CreateToken("purple"' 0' 6)' CreateToken("wizard"' 7' 13) };
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTrailingHole2,The following statement contains a magic number: Token[] inputTokens = new Token[] { CreateToken("purple"' 0' 6)' CreateToken("wizard"' 7' 13) };
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTrailingHole2,The following statement contains a magic number: ShingleFilter filter = new ShingleFilter(new CannedTokenStream(1' 16' inputTokens)' 2' 2);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTrailingHole2,The following statement contains a magic number: ShingleFilter filter = new ShingleFilter(new CannedTokenStream(1' 16' inputTokens)' 2' 2);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTrailingHole2,The following statement contains a magic number: ShingleFilter filter = new ShingleFilter(new CannedTokenStream(1' 16' inputTokens)' 2' 2);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTrailingHole2,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "purple"' "purple wizard"' "wizard"' "wizard _" }' new int[] { 0' 0' 7' 7 }' new int[] { 6' 13' 13' 16 }' new int[] { 1' 0' 1' 0 }' 16);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTrailingHole2,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "purple"' "purple wizard"' "wizard"' "wizard _" }' new int[] { 0' 0' 7' 7 }' new int[] { 6' 13' 13' 16 }' new int[] { 1' 0' 1' 0 }' 16);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTrailingHole2,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "purple"' "purple wizard"' "wizard"' "wizard _" }' new int[] { 0' 0' 7' 7 }' new int[] { 6' 13' 13' 16 }' new int[] { 1' 0' 1' 0 }' 16);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTrailingHole2,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "purple"' "purple wizard"' "wizard"' "wizard _" }' new int[] { 0' 0' 7' 7 }' new int[] { 6' 13' 13' 16 }' new int[] { 1' 0' 1' 0 }' 16);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTrailingHole2,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "purple"' "purple wizard"' "wizard"' "wizard _" }' new int[] { 0' 0' 7' 7 }' new int[] { 6' 13' 13' 16 }' new int[] { 1' 0' 1' 0 }' 16);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTrailingHole2,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "purple"' "purple wizard"' "wizard"' "wizard _" }' new int[] { 0' 0' 7' 7 }' new int[] { 6' 13' 13' 16 }' new int[] { 1' 0' 1' 0 }' 16);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTrailingHole2,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "purple"' "purple wizard"' "wizard"' "wizard _" }' new int[] { 0' 0' 7' 7 }' new int[] { 6' 13' 13' 16 }' new int[] { 1' 0' 1' 0 }' 16);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHoles,The following statement contains a magic number: Token[] inputTokens = new Token[] { CreateToken("purple"' 0' 6)' CreateToken("wizard"' 7' 13) };
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHoles,The following statement contains a magic number: Token[] inputTokens = new Token[] { CreateToken("purple"' 0' 6)' CreateToken("wizard"' 7' 13) };
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHoles,The following statement contains a magic number: Token[] inputTokens = new Token[] { CreateToken("purple"' 0' 6)' CreateToken("wizard"' 7' 13) };
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHoles,The following statement contains a magic number: ShingleFilter filter = new ShingleFilter(new CannedTokenStream(2' 20' inputTokens)' 2' 2);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHoles,The following statement contains a magic number: ShingleFilter filter = new ShingleFilter(new CannedTokenStream(2' 20' inputTokens)' 2' 2);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHoles,The following statement contains a magic number: ShingleFilter filter = new ShingleFilter(new CannedTokenStream(2' 20' inputTokens)' 2' 2);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHoles,The following statement contains a magic number: ShingleFilter filter = new ShingleFilter(new CannedTokenStream(2' 20' inputTokens)' 2' 2);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHoles,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "purple"' "purple wizard"' "wizard"' "wizard _" }' new int[] { 0' 0' 7' 7 }' new int[] { 6' 13' 13' 20 }' new int[] { 1' 0' 1' 0 }' 20);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHoles,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "purple"' "purple wizard"' "wizard"' "wizard _" }' new int[] { 0' 0' 7' 7 }' new int[] { 6' 13' 13' 20 }' new int[] { 1' 0' 1' 0 }' 20);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHoles,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "purple"' "purple wizard"' "wizard"' "wizard _" }' new int[] { 0' 0' 7' 7 }' new int[] { 6' 13' 13' 20 }' new int[] { 1' 0' 1' 0 }' 20);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHoles,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "purple"' "purple wizard"' "wizard"' "wizard _" }' new int[] { 0' 0' 7' 7 }' new int[] { 6' 13' 13' 20 }' new int[] { 1' 0' 1' 0 }' 20);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHoles,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "purple"' "purple wizard"' "wizard"' "wizard _" }' new int[] { 0' 0' 7' 7 }' new int[] { 6' 13' 13' 20 }' new int[] { 1' 0' 1' 0 }' 20);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHoles,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "purple"' "purple wizard"' "wizard"' "wizard _" }' new int[] { 0' 0' 7' 7 }' new int[] { 6' 13' 13' 20 }' new int[] { 1' 0' 1' 0 }' 20);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHoles,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "purple"' "purple wizard"' "wizard"' "wizard _" }' new int[] { 0' 0' 7' 7 }' new int[] { 6' 13' 13' 20 }' new int[] { 1' 0' 1' 0 }' 20);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingle,The following statement contains a magic number: Token[] inputTokens = new Token[] { CreateToken("purple"' 0' 6)' CreateToken("wizard"' 7' 13) };
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingle,The following statement contains a magic number: Token[] inputTokens = new Token[] { CreateToken("purple"' 0' 6)' CreateToken("wizard"' 7' 13) };
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingle,The following statement contains a magic number: Token[] inputTokens = new Token[] { CreateToken("purple"' 0' 6)' CreateToken("wizard"' 7' 13) };
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingle,The following statement contains a magic number: ShingleFilter filter = new ShingleFilter(new CannedTokenStream(2' 20' inputTokens)' 2' 3);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingle,The following statement contains a magic number: ShingleFilter filter = new ShingleFilter(new CannedTokenStream(2' 20' inputTokens)' 2' 3);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingle,The following statement contains a magic number: ShingleFilter filter = new ShingleFilter(new CannedTokenStream(2' 20' inputTokens)' 2' 3);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingle,The following statement contains a magic number: ShingleFilter filter = new ShingleFilter(new CannedTokenStream(2' 20' inputTokens)' 2' 3);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingle,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "purple"' "purple wizard"' "purple wizard _"' "wizard"' "wizard _"' "wizard _ _" }' new int[] { 0' 0' 0' 7' 7' 7 }' new int[] { 6' 13' 20' 13' 20' 20 }' new int[] { 1' 0' 0' 1' 0' 0 }' 20);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingle,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "purple"' "purple wizard"' "purple wizard _"' "wizard"' "wizard _"' "wizard _ _" }' new int[] { 0' 0' 0' 7' 7' 7 }' new int[] { 6' 13' 20' 13' 20' 20 }' new int[] { 1' 0' 0' 1' 0' 0 }' 20);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingle,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "purple"' "purple wizard"' "purple wizard _"' "wizard"' "wizard _"' "wizard _ _" }' new int[] { 0' 0' 0' 7' 7' 7 }' new int[] { 6' 13' 20' 13' 20' 20 }' new int[] { 1' 0' 0' 1' 0' 0 }' 20);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingle,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "purple"' "purple wizard"' "purple wizard _"' "wizard"' "wizard _"' "wizard _ _" }' new int[] { 0' 0' 0' 7' 7' 7 }' new int[] { 6' 13' 20' 13' 20' 20 }' new int[] { 1' 0' 0' 1' 0' 0 }' 20);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingle,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "purple"' "purple wizard"' "purple wizard _"' "wizard"' "wizard _"' "wizard _ _" }' new int[] { 0' 0' 0' 7' 7' 7 }' new int[] { 6' 13' 20' 13' 20' 20 }' new int[] { 1' 0' 0' 1' 0' 0 }' 20);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingle,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "purple"' "purple wizard"' "purple wizard _"' "wizard"' "wizard _"' "wizard _ _" }' new int[] { 0' 0' 0' 7' 7' 7 }' new int[] { 6' 13' 20' 13' 20' 20 }' new int[] { 1' 0' 0' 1' 0' 0 }' 20);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingle,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "purple"' "purple wizard"' "purple wizard _"' "wizard"' "wizard _"' "wizard _ _" }' new int[] { 0' 0' 0' 7' 7' 7 }' new int[] { 6' 13' 20' 13' 20' 20 }' new int[] { 1' 0' 0' 1' 0' 0 }' 20);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingle,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "purple"' "purple wizard"' "purple wizard _"' "wizard"' "wizard _"' "wizard _ _" }' new int[] { 0' 0' 0' 7' 7' 7 }' new int[] { 6' 13' 20' 13' 20' 20 }' new int[] { 1' 0' 0' 1' 0' 0 }' 20);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingle,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "purple"' "purple wizard"' "purple wizard _"' "wizard"' "wizard _"' "wizard _ _" }' new int[] { 0' 0' 0' 7' 7' 7 }' new int[] { 6' 13' 20' 13' 20' 20 }' new int[] { 1' 0' 0' 1' 0' 0 }' 20);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingle,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "purple"' "purple wizard"' "purple wizard _"' "wizard"' "wizard _"' "wizard _ _" }' new int[] { 0' 0' 0' 7' 7' 7 }' new int[] { 6' 13' 20' 13' 20' 20 }' new int[] { 1' 0' 0' 1' 0' 0 }' 20);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingleWithTokenFiller,The following statement contains a magic number: Token[] inputTokens = new Token[] { CreateToken("purple"' 0' 6)' CreateToken("wizard"' 7' 13) };
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingleWithTokenFiller,The following statement contains a magic number: Token[] inputTokens = new Token[] { CreateToken("purple"' 0' 6)' CreateToken("wizard"' 7' 13) };
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingleWithTokenFiller,The following statement contains a magic number: Token[] inputTokens = new Token[] { CreateToken("purple"' 0' 6)' CreateToken("wizard"' 7' 13) };
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingleWithTokenFiller,The following statement contains a magic number: ShingleFilter filter = new ShingleFilter(new CannedTokenStream(2' 20' inputTokens)' 2' 3);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingleWithTokenFiller,The following statement contains a magic number: ShingleFilter filter = new ShingleFilter(new CannedTokenStream(2' 20' inputTokens)' 2' 3);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingleWithTokenFiller,The following statement contains a magic number: ShingleFilter filter = new ShingleFilter(new CannedTokenStream(2' 20' inputTokens)' 2' 3);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingleWithTokenFiller,The following statement contains a magic number: ShingleFilter filter = new ShingleFilter(new CannedTokenStream(2' 20' inputTokens)' 2' 3);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingleWithTokenFiller,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "purple"' "purple wizard"' "purple wizard --"' "wizard"' "wizard --"' "wizard -- --" }' new int[] { 0' 0' 0' 7' 7' 7 }' new int[] { 6' 13' 20' 13' 20' 20 }' new int[] { 1' 0' 0' 1' 0' 0 }' 20);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingleWithTokenFiller,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "purple"' "purple wizard"' "purple wizard --"' "wizard"' "wizard --"' "wizard -- --" }' new int[] { 0' 0' 0' 7' 7' 7 }' new int[] { 6' 13' 20' 13' 20' 20 }' new int[] { 1' 0' 0' 1' 0' 0 }' 20);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingleWithTokenFiller,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "purple"' "purple wizard"' "purple wizard --"' "wizard"' "wizard --"' "wizard -- --" }' new int[] { 0' 0' 0' 7' 7' 7 }' new int[] { 6' 13' 20' 13' 20' 20 }' new int[] { 1' 0' 0' 1' 0' 0 }' 20);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingleWithTokenFiller,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "purple"' "purple wizard"' "purple wizard --"' "wizard"' "wizard --"' "wizard -- --" }' new int[] { 0' 0' 0' 7' 7' 7 }' new int[] { 6' 13' 20' 13' 20' 20 }' new int[] { 1' 0' 0' 1' 0' 0 }' 20);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingleWithTokenFiller,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "purple"' "purple wizard"' "purple wizard --"' "wizard"' "wizard --"' "wizard -- --" }' new int[] { 0' 0' 0' 7' 7' 7 }' new int[] { 6' 13' 20' 13' 20' 20 }' new int[] { 1' 0' 0' 1' 0' 0 }' 20);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingleWithTokenFiller,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "purple"' "purple wizard"' "purple wizard --"' "wizard"' "wizard --"' "wizard -- --" }' new int[] { 0' 0' 0' 7' 7' 7 }' new int[] { 6' 13' 20' 13' 20' 20 }' new int[] { 1' 0' 0' 1' 0' 0 }' 20);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingleWithTokenFiller,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "purple"' "purple wizard"' "purple wizard --"' "wizard"' "wizard --"' "wizard -- --" }' new int[] { 0' 0' 0' 7' 7' 7 }' new int[] { 6' 13' 20' 13' 20' 20 }' new int[] { 1' 0' 0' 1' 0' 0 }' 20);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingleWithTokenFiller,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "purple"' "purple wizard"' "purple wizard --"' "wizard"' "wizard --"' "wizard -- --" }' new int[] { 0' 0' 0' 7' 7' 7 }' new int[] { 6' 13' 20' 13' 20' 20 }' new int[] { 1' 0' 0' 1' 0' 0 }' 20);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingleWithTokenFiller,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "purple"' "purple wizard"' "purple wizard --"' "wizard"' "wizard --"' "wizard -- --" }' new int[] { 0' 0' 0' 7' 7' 7 }' new int[] { 6' 13' 20' 13' 20' 20 }' new int[] { 1' 0' 0' 1' 0' 0 }' 20);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingleWithTokenFiller,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "purple"' "purple wizard"' "purple wizard --"' "wizard"' "wizard --"' "wizard -- --" }' new int[] { 0' 0' 0' 7' 7' 7 }' new int[] { 6' 13' 20' 13' 20' 20 }' new int[] { 1' 0' 0' 1' 0' 0 }' 20);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingleWithTokenFiller,The following statement contains a magic number: filter = new ShingleFilter(new CannedTokenStream(2' 20' inputTokens)' 2' 3);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingleWithTokenFiller,The following statement contains a magic number: filter = new ShingleFilter(new CannedTokenStream(2' 20' inputTokens)' 2' 3);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingleWithTokenFiller,The following statement contains a magic number: filter = new ShingleFilter(new CannedTokenStream(2' 20' inputTokens)' 2' 3);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingleWithTokenFiller,The following statement contains a magic number: filter = new ShingleFilter(new CannedTokenStream(2' 20' inputTokens)' 2' 3);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingleWithTokenFiller,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "purple"' "purple wizard"' "purple wizard "' "wizard"' "wizard "' "wizard  " }' new int[] { 0' 0' 0' 7' 7' 7 }' new int[] { 6' 13' 20' 13' 20' 20 }' new int[] { 1' 0' 0' 1' 0' 0 }' 20);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingleWithTokenFiller,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "purple"' "purple wizard"' "purple wizard "' "wizard"' "wizard "' "wizard  " }' new int[] { 0' 0' 0' 7' 7' 7 }' new int[] { 6' 13' 20' 13' 20' 20 }' new int[] { 1' 0' 0' 1' 0' 0 }' 20);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingleWithTokenFiller,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "purple"' "purple wizard"' "purple wizard "' "wizard"' "wizard "' "wizard  " }' new int[] { 0' 0' 0' 7' 7' 7 }' new int[] { 6' 13' 20' 13' 20' 20 }' new int[] { 1' 0' 0' 1' 0' 0 }' 20);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingleWithTokenFiller,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "purple"' "purple wizard"' "purple wizard "' "wizard"' "wizard "' "wizard  " }' new int[] { 0' 0' 0' 7' 7' 7 }' new int[] { 6' 13' 20' 13' 20' 20 }' new int[] { 1' 0' 0' 1' 0' 0 }' 20);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingleWithTokenFiller,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "purple"' "purple wizard"' "purple wizard "' "wizard"' "wizard "' "wizard  " }' new int[] { 0' 0' 0' 7' 7' 7 }' new int[] { 6' 13' 20' 13' 20' 20 }' new int[] { 1' 0' 0' 1' 0' 0 }' 20);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingleWithTokenFiller,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "purple"' "purple wizard"' "purple wizard "' "wizard"' "wizard "' "wizard  " }' new int[] { 0' 0' 0' 7' 7' 7 }' new int[] { 6' 13' 20' 13' 20' 20 }' new int[] { 1' 0' 0' 1' 0' 0 }' 20);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingleWithTokenFiller,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "purple"' "purple wizard"' "purple wizard "' "wizard"' "wizard "' "wizard  " }' new int[] { 0' 0' 0' 7' 7' 7 }' new int[] { 6' 13' 20' 13' 20' 20 }' new int[] { 1' 0' 0' 1' 0' 0 }' 20);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingleWithTokenFiller,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "purple"' "purple wizard"' "purple wizard "' "wizard"' "wizard "' "wizard  " }' new int[] { 0' 0' 0' 7' 7' 7 }' new int[] { 6' 13' 20' 13' 20' 20 }' new int[] { 1' 0' 0' 1' 0' 0 }' 20);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingleWithTokenFiller,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "purple"' "purple wizard"' "purple wizard "' "wizard"' "wizard "' "wizard  " }' new int[] { 0' 0' 0' 7' 7' 7 }' new int[] { 6' 13' 20' 13' 20' 20 }' new int[] { 1' 0' 0' 1' 0' 0 }' 20);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingleWithTokenFiller,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "purple"' "purple wizard"' "purple wizard "' "wizard"' "wizard "' "wizard  " }' new int[] { 0' 0' 0' 7' 7' 7 }' new int[] { 6' 13' 20' 13' 20' 20 }' new int[] { 1' 0' 0' 1' 0' 0 }' 20);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingleWithTokenFiller,The following statement contains a magic number: filter = new ShingleFilter(new CannedTokenStream(2' 20' inputTokens)' 2' 3);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingleWithTokenFiller,The following statement contains a magic number: filter = new ShingleFilter(new CannedTokenStream(2' 20' inputTokens)' 2' 3);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingleWithTokenFiller,The following statement contains a magic number: filter = new ShingleFilter(new CannedTokenStream(2' 20' inputTokens)' 2' 3);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingleWithTokenFiller,The following statement contains a magic number: filter = new ShingleFilter(new CannedTokenStream(2' 20' inputTokens)' 2' 3);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingleWithTokenFiller,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "purple"' "purple wizard"' "purple wizard "' "wizard"' "wizard "' "wizard  " }' new int[] { 0' 0' 0' 7' 7' 7 }' new int[] { 6' 13' 20' 13' 20' 20 }' new int[] { 1' 0' 0' 1' 0' 0 }' 20);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingleWithTokenFiller,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "purple"' "purple wizard"' "purple wizard "' "wizard"' "wizard "' "wizard  " }' new int[] { 0' 0' 0' 7' 7' 7 }' new int[] { 6' 13' 20' 13' 20' 20 }' new int[] { 1' 0' 0' 1' 0' 0 }' 20);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingleWithTokenFiller,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "purple"' "purple wizard"' "purple wizard "' "wizard"' "wizard "' "wizard  " }' new int[] { 0' 0' 0' 7' 7' 7 }' new int[] { 6' 13' 20' 13' 20' 20 }' new int[] { 1' 0' 0' 1' 0' 0 }' 20);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingleWithTokenFiller,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "purple"' "purple wizard"' "purple wizard "' "wizard"' "wizard "' "wizard  " }' new int[] { 0' 0' 0' 7' 7' 7 }' new int[] { 6' 13' 20' 13' 20' 20 }' new int[] { 1' 0' 0' 1' 0' 0 }' 20);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingleWithTokenFiller,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "purple"' "purple wizard"' "purple wizard "' "wizard"' "wizard "' "wizard  " }' new int[] { 0' 0' 0' 7' 7' 7 }' new int[] { 6' 13' 20' 13' 20' 20 }' new int[] { 1' 0' 0' 1' 0' 0 }' 20);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingleWithTokenFiller,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "purple"' "purple wizard"' "purple wizard "' "wizard"' "wizard "' "wizard  " }' new int[] { 0' 0' 0' 7' 7' 7 }' new int[] { 6' 13' 20' 13' 20' 20 }' new int[] { 1' 0' 0' 1' 0' 0 }' 20);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingleWithTokenFiller,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "purple"' "purple wizard"' "purple wizard "' "wizard"' "wizard "' "wizard  " }' new int[] { 0' 0' 0' 7' 7' 7 }' new int[] { 6' 13' 20' 13' 20' 20 }' new int[] { 1' 0' 0' 1' 0' 0 }' 20);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingleWithTokenFiller,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "purple"' "purple wizard"' "purple wizard "' "wizard"' "wizard "' "wizard  " }' new int[] { 0' 0' 0' 7' 7' 7 }' new int[] { 6' 13' 20' 13' 20' 20 }' new int[] { 1' 0' 0' 1' 0' 0 }' 20);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingleWithTokenFiller,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "purple"' "purple wizard"' "purple wizard "' "wizard"' "wizard "' "wizard  " }' new int[] { 0' 0' 0' 7' 7' 7 }' new int[] { 6' 13' 20' 13' 20' 20 }' new int[] { 1' 0' 0' 1' 0' 0 }' 20);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingleWithTokenFiller,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "purple"' "purple wizard"' "purple wizard "' "wizard"' "wizard "' "wizard  " }' new int[] { 0' 0' 0' 7' 7' 7 }' new int[] { 6' 13' 20' 13' 20' 20 }' new int[] { 1' 0' 0' 1' 0' 0 }' 20);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingleWithTokenFiller,The following statement contains a magic number: filter = new ShingleFilter(new CannedTokenStream(2' 20' inputTokens)' 2' 3);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingleWithTokenFiller,The following statement contains a magic number: filter = new ShingleFilter(new CannedTokenStream(2' 20' inputTokens)' 2' 3);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingleWithTokenFiller,The following statement contains a magic number: filter = new ShingleFilter(new CannedTokenStream(2' 20' inputTokens)' 2' 3);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingleWithTokenFiller,The following statement contains a magic number: filter = new ShingleFilter(new CannedTokenStream(2' 20' inputTokens)' 2' 3);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingleWithTokenFiller,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "purple"' "purplewizard"' "purplewizard"' "wizard"' "wizard"' "wizard" }' new int[] { 0' 0' 0' 7' 7' 7 }' new int[] { 6' 13' 20' 13' 20' 20 }' new int[] { 1' 0' 0' 1' 0' 0 }' 20);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingleWithTokenFiller,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "purple"' "purplewizard"' "purplewizard"' "wizard"' "wizard"' "wizard" }' new int[] { 0' 0' 0' 7' 7' 7 }' new int[] { 6' 13' 20' 13' 20' 20 }' new int[] { 1' 0' 0' 1' 0' 0 }' 20);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingleWithTokenFiller,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "purple"' "purplewizard"' "purplewizard"' "wizard"' "wizard"' "wizard" }' new int[] { 0' 0' 0' 7' 7' 7 }' new int[] { 6' 13' 20' 13' 20' 20 }' new int[] { 1' 0' 0' 1' 0' 0 }' 20);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingleWithTokenFiller,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "purple"' "purplewizard"' "purplewizard"' "wizard"' "wizard"' "wizard" }' new int[] { 0' 0' 0' 7' 7' 7 }' new int[] { 6' 13' 20' 13' 20' 20 }' new int[] { 1' 0' 0' 1' 0' 0 }' 20);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingleWithTokenFiller,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "purple"' "purplewizard"' "purplewizard"' "wizard"' "wizard"' "wizard" }' new int[] { 0' 0' 0' 7' 7' 7 }' new int[] { 6' 13' 20' 13' 20' 20 }' new int[] { 1' 0' 0' 1' 0' 0 }' 20);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingleWithTokenFiller,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "purple"' "purplewizard"' "purplewizard"' "wizard"' "wizard"' "wizard" }' new int[] { 0' 0' 0' 7' 7' 7 }' new int[] { 6' 13' 20' 13' 20' 20 }' new int[] { 1' 0' 0' 1' 0' 0 }' 20);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingleWithTokenFiller,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "purple"' "purplewizard"' "purplewizard"' "wizard"' "wizard"' "wizard" }' new int[] { 0' 0' 0' 7' 7' 7 }' new int[] { 6' 13' 20' 13' 20' 20 }' new int[] { 1' 0' 0' 1' 0' 0 }' 20);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingleWithTokenFiller,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "purple"' "purplewizard"' "purplewizard"' "wizard"' "wizard"' "wizard" }' new int[] { 0' 0' 0' 7' 7' 7 }' new int[] { 6' 13' 20' 13' 20' 20 }' new int[] { 1' 0' 0' 1' 0' 0 }' 20);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingleWithTokenFiller,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "purple"' "purplewizard"' "purplewizard"' "wizard"' "wizard"' "wizard" }' new int[] { 0' 0' 0' 7' 7' 7 }' new int[] { 6' 13' 20' 13' 20' 20 }' new int[] { 1' 0' 0' 1' 0' 0 }' 20);
Magic Number,Lucene.Net.Analysis.Shingle,ShingleFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Shingle\ShingleFilterTest.cs,TestTwoTrailingHolesTriShingleWithTokenFiller,The following statement contains a magic number: AssertTokenStreamContents(filter' new string[] { "purple"' "purplewizard"' "purplewizard"' "wizard"' "wizard"' "wizard" }' new int[] { 0' 0' 0' 7' 7' 7 }' new int[] { 6' 13' 20' 13' 20' 20 }' new int[] { 1' 0' 0' 1' 0' 0 }' 20);
Magic Number,Lucene.Net.Analysis.Sinks,DateRecognizerSinkTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Sinks\DateRecognizerSinkTokenizerTest.cs,Test,The following statement contains a magic number: assertTrue(count + " does not equal: " + 18' count == 18);
Magic Number,Lucene.Net.Analysis.Sinks,DateRecognizerSinkTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Sinks\DateRecognizerSinkTokenizerTest.cs,Test,The following statement contains a magic number: assertTrue(count + " does not equal: " + 18' count == 18);
Magic Number,Lucene.Net.Analysis.Sinks,DateRecognizerSinkTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Sinks\DateRecognizerSinkTokenizerTest.cs,Test,The following statement contains a magic number: assertTrue("sink Size: " + sinkCount + " is not: " + 2' sinkCount == 2);
Magic Number,Lucene.Net.Analysis.Sinks,DateRecognizerSinkTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Sinks\DateRecognizerSinkTokenizerTest.cs,Test,The following statement contains a magic number: assertTrue("sink Size: " + sinkCount + " is not: " + 2' sinkCount == 2);
Magic Number,Lucene.Net.Analysis.Sinks,DateRecognizerSinkTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Sinks\DateRecognizerSinkTokenizerTest.cs,TestLooseDateFormat,The following statement contains a magic number: assertTrue(count + " does not equal: " + 18' count == 18);
Magic Number,Lucene.Net.Analysis.Sinks,DateRecognizerSinkTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Sinks\DateRecognizerSinkTokenizerTest.cs,TestLooseDateFormat,The following statement contains a magic number: assertTrue(count + " does not equal: " + 18' count == 18);
Magic Number,Lucene.Net.Analysis.Sinks,DateRecognizerSinkTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Sinks\DateRecognizerSinkTokenizerTest.cs,TestLooseDateFormat,The following statement contains a magic number: assertTrue("sink Size: " + sinkCount + " is not: " + 2' sinkCount == 2);
Magic Number,Lucene.Net.Analysis.Sinks,DateRecognizerSinkTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Sinks\DateRecognizerSinkTokenizerTest.cs,TestLooseDateFormat,The following statement contains a magic number: assertTrue("sink Size: " + sinkCount + " is not: " + 2' sinkCount == 2);
Magic Number,Lucene.Net.Analysis.Sinks,TestTeeSinkTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Sinks\TestTeeSinkTokenFilter.cs,TestEndOffsetPositionWithTeeSinkTokenFilter,The following statement contains a magic number: assertEquals(2' termsEnum.TotalTermFreq);
Magic Number,Lucene.Net.Analysis.Sinks,TestTeeSinkTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Sinks\TestTeeSinkTokenFilter.cs,TestEndOffsetPositionWithTeeSinkTokenFilter,The following statement contains a magic number: assertEquals(2' positions.Freq);
Magic Number,Lucene.Net.Analysis.Sinks,TestTeeSinkTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Sinks\TestTeeSinkTokenFilter.cs,TestEndOffsetPositionWithTeeSinkTokenFilter,The following statement contains a magic number: assertEquals(4' positions.EndOffset);
Magic Number,Lucene.Net.Analysis.Sinks,TestTeeSinkTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Sinks\TestTeeSinkTokenFilter.cs,TestEndOffsetPositionWithTeeSinkTokenFilter,The following statement contains a magic number: assertEquals(8' positions.StartOffset);
Magic Number,Lucene.Net.Analysis.Sinks,TestTeeSinkTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Sinks\TestTeeSinkTokenFilter.cs,TestEndOffsetPositionWithTeeSinkTokenFilter,The following statement contains a magic number: assertEquals(12' positions.EndOffset);
Magic Number,Lucene.Net.Analysis.Sinks,TestTeeSinkTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Sinks\TestTeeSinkTokenFilter.cs,Performance,The following statement contains a magic number: int[] tokCount = new int[] { 100' 500' 1000' 2000' 5000' 10000 };
Magic Number,Lucene.Net.Analysis.Sinks,TestTeeSinkTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Sinks\TestTeeSinkTokenFilter.cs,Performance,The following statement contains a magic number: int[] tokCount = new int[] { 100' 500' 1000' 2000' 5000' 10000 };
Magic Number,Lucene.Net.Analysis.Sinks,TestTeeSinkTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Sinks\TestTeeSinkTokenFilter.cs,Performance,The following statement contains a magic number: int[] tokCount = new int[] { 100' 500' 1000' 2000' 5000' 10000 };
Magic Number,Lucene.Net.Analysis.Sinks,TestTeeSinkTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Sinks\TestTeeSinkTokenFilter.cs,Performance,The following statement contains a magic number: int[] tokCount = new int[] { 100' 500' 1000' 2000' 5000' 10000 };
Magic Number,Lucene.Net.Analysis.Sinks,TestTeeSinkTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Sinks\TestTeeSinkTokenFilter.cs,Performance,The following statement contains a magic number: int[] tokCount = new int[] { 100' 500' 1000' 2000' 5000' 10000 };
Magic Number,Lucene.Net.Analysis.Sinks,TestTeeSinkTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Sinks\TestTeeSinkTokenFilter.cs,Performance,The following statement contains a magic number: int[] tokCount = new int[] { 100' 500' 1000' 2000' 5000' 10000 };
Magic Number,Lucene.Net.Analysis.Sinks,TestTeeSinkTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Sinks\TestTeeSinkTokenFilter.cs,Performance,The following statement contains a magic number: int[] modCounts = new int[] { 1' 2' 5' 10' 20' 50' 100' 200' 500 };
Magic Number,Lucene.Net.Analysis.Sinks,TestTeeSinkTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Sinks\TestTeeSinkTokenFilter.cs,Performance,The following statement contains a magic number: int[] modCounts = new int[] { 1' 2' 5' 10' 20' 50' 100' 200' 500 };
Magic Number,Lucene.Net.Analysis.Sinks,TestTeeSinkTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Sinks\TestTeeSinkTokenFilter.cs,Performance,The following statement contains a magic number: int[] modCounts = new int[] { 1' 2' 5' 10' 20' 50' 100' 200' 500 };
Magic Number,Lucene.Net.Analysis.Sinks,TestTeeSinkTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Sinks\TestTeeSinkTokenFilter.cs,Performance,The following statement contains a magic number: int[] modCounts = new int[] { 1' 2' 5' 10' 20' 50' 100' 200' 500 };
Magic Number,Lucene.Net.Analysis.Sinks,TestTeeSinkTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Sinks\TestTeeSinkTokenFilter.cs,Performance,The following statement contains a magic number: int[] modCounts = new int[] { 1' 2' 5' 10' 20' 50' 100' 200' 500 };
Magic Number,Lucene.Net.Analysis.Sinks,TestTeeSinkTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Sinks\TestTeeSinkTokenFilter.cs,Performance,The following statement contains a magic number: int[] modCounts = new int[] { 1' 2' 5' 10' 20' 50' 100' 200' 500 };
Magic Number,Lucene.Net.Analysis.Sinks,TestTeeSinkTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Sinks\TestTeeSinkTokenFilter.cs,Performance,The following statement contains a magic number: int[] modCounts = new int[] { 1' 2' 5' 10' 20' 50' 100' 200' 500 };
Magic Number,Lucene.Net.Analysis.Sinks,TestTeeSinkTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Sinks\TestTeeSinkTokenFilter.cs,Performance,The following statement contains a magic number: int[] modCounts = new int[] { 1' 2' 5' 10' 20' 50' 100' 200' 500 };
Magic Number,Lucene.Net.Analysis.Sinks,TestTeeSinkTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Sinks\TestTeeSinkTokenFilter.cs,Performance,The following statement contains a magic number: TokenStream sink = teeStream.NewSinkTokenStream(new ModuloSinkFilter(this' 100));
Magic Number,Lucene.Net.Analysis.Sinks,TestTeeSinkTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Sinks\TestTeeSinkTokenFilter.cs,Performance,The following statement contains a magic number: TokenStream stream = new ModuloTokenFilter(this' new StandardFilter(TEST_VERSION_CURRENT' new StandardTokenizer(TEST_VERSION_CURRENT' new StringReader(buffer.ToString())))' 100);
Magic Number,Lucene.Net.Analysis.Sinks,TestTeeSinkTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Sinks\TestTeeSinkTokenFilter.cs,Performance,The following statement contains a magic number: i < 20
Magic Number,Lucene.Net.Analysis.Sinks,TestTeeSinkTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Sinks\TestTeeSinkTokenFilter.cs,Performance,The following statement contains a magic number: i < 20
Magic Number,Lucene.Net.Analysis.Sinks,TokenRangeSinkTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Sinks\TokenRangeSinkTokenizerTest.cs,Test,The following statement contains a magic number: TokenRangeSinkFilter sinkFilter = new TokenRangeSinkFilter(2' 4);
Magic Number,Lucene.Net.Analysis.Sinks,TokenRangeSinkTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Sinks\TokenRangeSinkTokenizerTest.cs,Test,The following statement contains a magic number: TokenRangeSinkFilter sinkFilter = new TokenRangeSinkFilter(2' 4);
Magic Number,Lucene.Net.Analysis.Sinks,TokenRangeSinkTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Sinks\TokenRangeSinkTokenizerTest.cs,Test,The following statement contains a magic number: assertTrue(count + " does not equal: " + 10' count == 10);
Magic Number,Lucene.Net.Analysis.Sinks,TokenRangeSinkTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Sinks\TokenRangeSinkTokenizerTest.cs,Test,The following statement contains a magic number: assertTrue(count + " does not equal: " + 10' count == 10);
Magic Number,Lucene.Net.Analysis.Sinks,TokenRangeSinkTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Sinks\TokenRangeSinkTokenizerTest.cs,Test,The following statement contains a magic number: assertTrue("rangeToks Size: " + sinkCount + " is not: " + 2' sinkCount == 2);
Magic Number,Lucene.Net.Analysis.Sinks,TokenRangeSinkTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Sinks\TokenRangeSinkTokenizerTest.cs,Test,The following statement contains a magic number: assertTrue("rangeToks Size: " + sinkCount + " is not: " + 2' sinkCount == 2);
Magic Number,Lucene.Net.Analysis.Sinks,TokenRangeSinkTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Sinks\TokenRangeSinkTokenizerTest.cs,TestIllegalArguments,The following statement contains a magic number: Assert.Throws<ArgumentOutOfRangeException>(() => {                  new TokenRangeSinkFilter(4' 2);              });
Magic Number,Lucene.Net.Analysis.Sinks,TokenRangeSinkTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Sinks\TokenRangeSinkTokenizerTest.cs,TestIllegalArguments,The following statement contains a magic number: Assert.Throws<ArgumentOutOfRangeException>(() => {                  new TokenRangeSinkFilter(4' 2);              });
Magic Number,Lucene.Net.Analysis.Snowball,TestSnowball,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Snowball\TestSnowball.cs,TestFilterTokens,The following statement contains a magic number: assertEquals(2' offsetAtt.StartOffset);
Magic Number,Lucene.Net.Analysis.Snowball,TestSnowball,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Snowball\TestSnowball.cs,TestFilterTokens,The following statement contains a magic number: assertEquals(7' offsetAtt.EndOffset);
Magic Number,Lucene.Net.Analysis.Snowball,TestSnowball,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Snowball\TestSnowball.cs,TestFilterTokens,The following statement contains a magic number: assertEquals(3' posIncAtt.PositionIncrement);
Magic Number,Lucene.Net.Analysis.Snowball,TestSnowball,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Snowball\TestSnowball.cs,TestFilterTokens,The following statement contains a magic number: assertEquals(77' flagsAtt.Flags);
Magic Number,Lucene.Net.Analysis.Snowball,TestSnowball,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Snowball\TestSnowball.cs,TestFilterTokens,The following statement contains a magic number: assertEquals(new BytesRef(new byte[] { 0' 1' 2' 3 })' payloadAtt.Payload);
Magic Number,Lucene.Net.Analysis.Snowball,TestSnowball,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Snowball\TestSnowball.cs,TestFilterTokens,The following statement contains a magic number: assertEquals(new BytesRef(new byte[] { 0' 1' 2' 3 })' payloadAtt.Payload);
Magic Number,Lucene.Net.Analysis.Snowball,TestSnowball,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Snowball\TestSnowball.cs,CheckRandomStrings,The following statement contains a magic number: CheckRandomData(Random' a' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.Snowball,TestTokenStream,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Snowball\TestSnowball.cs,IncrementToken,The following statement contains a magic number: offsetAtt.SetOffset(2' 7);
Magic Number,Lucene.Net.Analysis.Snowball,TestTokenStream,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Snowball\TestSnowball.cs,IncrementToken,The following statement contains a magic number: offsetAtt.SetOffset(2' 7);
Magic Number,Lucene.Net.Analysis.Snowball,TestTokenStream,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Snowball\TestSnowball.cs,IncrementToken,The following statement contains a magic number: posIncAtt.PositionIncrement = 3;
Magic Number,Lucene.Net.Analysis.Snowball,TestTokenStream,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Snowball\TestSnowball.cs,IncrementToken,The following statement contains a magic number: payloadAtt.Payload = new BytesRef(new byte[] { 0' 1' 2' 3 });
Magic Number,Lucene.Net.Analysis.Snowball,TestTokenStream,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Snowball\TestSnowball.cs,IncrementToken,The following statement contains a magic number: payloadAtt.Payload = new BytesRef(new byte[] { 0' 1' 2' 3 });
Magic Number,Lucene.Net.Analysis.Snowball,TestTokenStream,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Snowball\TestSnowball.cs,IncrementToken,The following statement contains a magic number: flagsAtt.Flags = 77;
Magic Number,Lucene.Net.Analysis.Standard,TestStandardFactories,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Standard\TestStandardFactories.cs,TestStandardTokenizerMaxTokenLength,The following statement contains a magic number: i < 100
Magic Number,Lucene.Net.Analysis.Standard,TestStandardFactories,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Standard\TestStandardFactories.cs,TestClassicTokenizerMaxTokenLength,The following statement contains a magic number: i < 100
Magic Number,Lucene.Net.Analysis.Standard,TestUAX29URLEmailTokenizerFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Standard\TestUAX29URLEmailTokenizerFactory.cs,TestMaxTokenLength,The following statement contains a magic number: i < 100
Magic Number,Lucene.Net.Analysis.Sv,TestSwedishAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Sv\TestSwedishAnalyzer.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' new SwedishAnalyzer(TEST_VERSION_CURRENT)' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.Sv,TestSwedishLightStemFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Sv\TestSwedishLightStemFilter.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' analyzer' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.Synonym,TestSlowSynonymFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSlowSynonymFilter.cs,TestMapMerge,The following statement contains a magic number: AssertTokenizesTo(map' "a"' new string[] { "a3"' "a5" }' new int[] { 1' 2 });
Magic Number,Lucene.Net.Analysis.Synonym,TestSlowSynonymFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSlowSynonymFilter.cs,TestMapMerge,The following statement contains a magic number: AssertTokenizesTo(map' "b"' new string[] { "b3"' "b5" }' new int[] { 1' 2 });
Magic Number,Lucene.Net.Analysis.Synonym,TestSlowSynonymFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSlowSynonymFilter.cs,TestMapMerge,The following statement contains a magic number: AssertTokenizesTo(map' "a"' new string[] { "a3"' "A3"' "a5"' "A5" }' new int[] { 1' 0' 2' 0 });
Magic Number,Lucene.Net.Analysis.Synonym,TestSlowSynonymFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSlowSynonymFilter.cs,TestMapMerge,The following statement contains a magic number: AssertTokenizesTo(map' "a"' new string[] { "a1"' "a3"' "A3"' "a5"' "A5" }' new int[] { 1' 2' 0' 2' 0 });
Magic Number,Lucene.Net.Analysis.Synonym,TestSlowSynonymFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSlowSynonymFilter.cs,TestMapMerge,The following statement contains a magic number: AssertTokenizesTo(map' "a"' new string[] { "a1"' "a3"' "A3"' "a5"' "A5" }' new int[] { 1' 2' 0' 2' 0 });
Magic Number,Lucene.Net.Analysis.Synonym,TestSlowSynonymFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSlowSynonymFilter.cs,TestOverlap,The following statement contains a magic number: AssertTokenizesTo(map' "a"' new string[] { "a3"' "a5"' "a7"' "a8"' "a9"' "a10"' "a11"' "a111" }' new int[] { 1' 2' 2' 1' 1' 1' 1' 100 });
Magic Number,Lucene.Net.Analysis.Synonym,TestSlowSynonymFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSlowSynonymFilter.cs,TestOverlap,The following statement contains a magic number: AssertTokenizesTo(map' "a"' new string[] { "a3"' "a5"' "a7"' "a8"' "a9"' "a10"' "a11"' "a111" }' new int[] { 1' 2' 2' 1' 1' 1' 1' 100 });
Magic Number,Lucene.Net.Analysis.Synonym,TestSlowSynonymFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSlowSynonymFilter.cs,TestOverlap,The following statement contains a magic number: AssertTokenizesTo(map' "a"' new string[] { "a3"' "a5"' "a7"' "a8"' "a9"' "a10"' "a11"' "a111" }' new int[] { 1' 2' 2' 1' 1' 1' 1' 100 });
Magic Number,Lucene.Net.Analysis.Synonym,TestSlowSynonymFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSlowSynonymFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertTokenizesTo(map' Tokens("a'5")' new string[] { "aa" }' new int[] { 5 });
Magic Number,Lucene.Net.Analysis.Synonym,TestSlowSynonymFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSlowSynonymFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertTokenizesTo(map' Tokens("b'5")' new string[] { "bb" }' new int[] { 5 });
Magic Number,Lucene.Net.Analysis.Synonym,TestSlowSynonymFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSlowSynonymFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertTokenizesTo(map' Tokens("c'5")' new string[] { "cc"' "c2" }' new int[] { 5' 2 });
Magic Number,Lucene.Net.Analysis.Synonym,TestSlowSynonymFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSlowSynonymFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertTokenizesTo(map' Tokens("c'5")' new string[] { "cc"' "c2" }' new int[] { 5' 2 });
Magic Number,Lucene.Net.Analysis.Synonym,TestSlowSynonymFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSlowSynonymFilter.cs,TestPositionIncrements,The following statement contains a magic number: AssertTokenizesTo(map' Tokens("d'1 c'0")' new string[] { "d"' "cc"' "c2" }' new int[] { 1' 0' 2 });
Magic Number,Lucene.Net.Analysis.Synonym,TestSlowSynonymFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSlowSynonymFilter.cs,TestPositionIncrementsWithOrig,The following statement contains a magic number: AssertTokenizesTo(map' Tokens("a'5")' new string[] { "a"' "aa" }' new int[] { 5' 0 });
Magic Number,Lucene.Net.Analysis.Synonym,TestSlowSynonymFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSlowSynonymFilter.cs,TestPositionIncrementsWithOrig,The following statement contains a magic number: AssertTokenizesTo(map' Tokens("b'5")' new string[] { "b"' "bb" }' new int[] { 5' 0 });
Magic Number,Lucene.Net.Analysis.Synonym,TestSlowSynonymFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSlowSynonymFilter.cs,TestPositionIncrementsWithOrig,The following statement contains a magic number: AssertTokenizesTo(map' Tokens("c'5")' new string[] { "c"' "cc"' "c2" }' new int[] { 5' 0' 2 });
Magic Number,Lucene.Net.Analysis.Synonym,TestSlowSynonymFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSlowSynonymFilter.cs,TestPositionIncrementsWithOrig,The following statement contains a magic number: AssertTokenizesTo(map' Tokens("c'5")' new string[] { "c"' "cc"' "c2" }' new int[] { 5' 0' 2 });
Magic Number,Lucene.Net.Analysis.Synonym,TestSlowSynonymFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSlowSynonymFilter.cs,TestPositionIncrementsWithOrig,The following statement contains a magic number: AssertTokenizesTo(map' Tokens("d'1 c'0")' new string[] { "d"' "c"' "cc"' "c2" }' new int[] { 1' 0' 0' 2 });
Magic Number,Lucene.Net.Analysis.Synonym,TestSlowSynonymFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSlowSynonymFilter.cs,TestOffsetBug,The following statement contains a magic number: AssertTokenizesTo(map' Tokens("a'1'0'1 a'1'2'3 x'1'4'5")' new string[] { "b"' "y" }' new int[] { 0' 4 }' new int[] { 3' 5 }' new int[] { 1' 1 });
Magic Number,Lucene.Net.Analysis.Synonym,TestSlowSynonymFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSlowSynonymFilter.cs,TestOffsetBug,The following statement contains a magic number: AssertTokenizesTo(map' Tokens("a'1'0'1 a'1'2'3 x'1'4'5")' new string[] { "b"' "y" }' new int[] { 0' 4 }' new int[] { 3' 5 }' new int[] { 1' 1 });
Magic Number,Lucene.Net.Analysis.Synonym,TestSlowSynonymFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSlowSynonymFilter.cs,TestOffsetBug,The following statement contains a magic number: AssertTokenizesTo(map' Tokens("a'1'0'1 a'1'2'3 x'1'4'5")' new string[] { "b"' "y" }' new int[] { 0' 4 }' new int[] { 3' 5 }' new int[] { 1' 1 });
Magic Number,Lucene.Net.Analysis.Synonym,TestSlowSynonymFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSlowSynonymFilter.cs,Tokens,The following statement contains a magic number: start = int.Parse(@params[2]' CultureInfo.InvariantCulture);
Magic Number,Lucene.Net.Analysis.Synonym,TestSlowSynonymFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSlowSynonymFilter.cs,Tokens,The following statement contains a magic number: @params.Length > 2
Magic Number,Lucene.Net.Analysis.Synonym,TestSlowSynonymFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSlowSynonymFilter.cs,Tokens,The following statement contains a magic number: end = int.Parse(@params[3]' CultureInfo.InvariantCulture);
Magic Number,Lucene.Net.Analysis.Synonym,TestSlowSynonymFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSlowSynonymFilter.cs,Tokens,The following statement contains a magic number: @params.Length > 3
Magic Number,Lucene.Net.Analysis.Synonym,TestSynonymFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymFilterFactory.cs,TestMultiwordOffsetsOld,The following statement contains a magic number: AssertTokenStreamContents(stream' new string[] { "national"' "nhl"' "hockey"' "league" }' new int[] { 0' 0' 0' 0 }' new int[] { 22' 22' 22' 22 }' new int[] { 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Synonym,TestSynonymFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymFilterFactory.cs,TestMultiwordOffsetsOld,The following statement contains a magic number: AssertTokenStreamContents(stream' new string[] { "national"' "nhl"' "hockey"' "league" }' new int[] { 0' 0' 0' 0 }' new int[] { 22' 22' 22' 22 }' new int[] { 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Synonym,TestSynonymFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymFilterFactory.cs,TestMultiwordOffsetsOld,The following statement contains a magic number: AssertTokenStreamContents(stream' new string[] { "national"' "nhl"' "hockey"' "league" }' new int[] { 0' 0' 0' 0 }' new int[] { 22' 22' 22' 22 }' new int[] { 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Synonym,TestSynonymFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymFilterFactory.cs,TestMultiwordOffsetsOld,The following statement contains a magic number: AssertTokenStreamContents(stream' new string[] { "national"' "nhl"' "hockey"' "league" }' new int[] { 0' 0' 0' 0 }' new int[] { 22' 22' 22' 22 }' new int[] { 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Synonym,TestSynonymMap,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymMap.cs,TestReadMappingRules,The following statement contains a magic number: assertEquals(2' synMap.Submap.size());
Magic Number,Lucene.Net.Analysis.Synonym,TestSynonymMap,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymMap.cs,TestReadMappingRules,The following statement contains a magic number: assertEquals(2' GetSubSynonymMap(synMap' "a").Submap.size());
Magic Number,Lucene.Net.Analysis.Synonym,TestSynonymMap,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymMap.cs,TestReadMappingRules,The following statement contains a magic number: assertEquals(2' synMap.Submap.size());
Magic Number,Lucene.Net.Analysis.Synonym,TestSynonymMap,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymMap.cs,TestRead1waySynonymRules,The following statement contains a magic number: assertEquals(2' synMap.Submap.size());
Magic Number,Lucene.Net.Analysis.Synonym,TestSynonymMap,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymMap.cs,TestRead1waySynonymRules,The following statement contains a magic number: assertEquals(3' synMap.Submap.size());
Magic Number,Lucene.Net.Analysis.Synonym,TestSynonymMap,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymMap.cs,TestRead1waySynonymRules,The following statement contains a magic number: assertEquals(2' synMap.Submap.size());
Magic Number,Lucene.Net.Analysis.Synonym,TestSynonymMap,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymMap.cs,TestRead1waySynonymRules,The following statement contains a magic number: assertEquals(2' synMap.Submap.size());
Magic Number,Lucene.Net.Analysis.Synonym,TestSynonymMap,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymMap.cs,TestRead2waySynonymRules,The following statement contains a magic number: assertEquals(2' synMap.Submap.size());
Magic Number,Lucene.Net.Analysis.Synonym,TestSynonymMap,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymMap.cs,TestRead2waySynonymRules,The following statement contains a magic number: assertEquals(3' synMap.Submap.size());
Magic Number,Lucene.Net.Analysis.Synonym,TestSynonymMap,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymMap.cs,TestRead2waySynonymRules,The following statement contains a magic number: assertEquals(2' synMap.Submap.size());
Magic Number,Lucene.Net.Analysis.Synonym,TestSynonymMap,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymMap.cs,TestRead2waySynonymRules,The following statement contains a magic number: assertEquals(2' synMap.Submap.size());
Magic Number,Lucene.Net.Analysis.Synonym,TestSynonymMap,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymMap.cs,TestLoadRules,The following statement contains a magic number: assertEquals(2' synMap.Submap.size());
Magic Number,Lucene.Net.Analysis.Synonym,TestSynonymMapFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymMapFilter.cs,TestDontKeepOrig,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "a b c"'                               new string[] { "foo"' "c" }'                               new int[] { 0' 4 }'                               new int[] { 3' 5 }'                               null'                               new int[] { 1' 1 }'                               new int[] { 1' 1 }'                               true);
Magic Number,Lucene.Net.Analysis.Synonym,TestSynonymMapFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymMapFilter.cs,TestDontKeepOrig,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "a b c"'                               new string[] { "foo"' "c" }'                               new int[] { 0' 4 }'                               new int[] { 3' 5 }'                               null'                               new int[] { 1' 1 }'                               new int[] { 1' 1 }'                               true);
Magic Number,Lucene.Net.Analysis.Synonym,TestSynonymMapFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymMapFilter.cs,TestDontKeepOrig,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "a b c"'                               new string[] { "foo"' "c" }'                               new int[] { 0' 4 }'                               new int[] { 3' 5 }'                               null'                               new int[] { 1' 1 }'                               new int[] { 1' 1 }'                               true);
Magic Number,Lucene.Net.Analysis.Synonym,TestSynonymMapFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymMapFilter.cs,TestDoKeepOrig,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "a b c"'                               new string[] { "a"' "foo"' "b"' "c" }'                               new int[] { 0' 0' 2' 4 }'                               new int[] { 1' 3' 3' 5 }'                               null'                               new int[] { 1' 0' 1' 1 }'                               new int[] { 1' 2' 1' 1 }'                               true);
Magic Number,Lucene.Net.Analysis.Synonym,TestSynonymMapFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymMapFilter.cs,TestDoKeepOrig,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "a b c"'                               new string[] { "a"' "foo"' "b"' "c" }'                               new int[] { 0' 0' 2' 4 }'                               new int[] { 1' 3' 3' 5 }'                               null'                               new int[] { 1' 0' 1' 1 }'                               new int[] { 1' 2' 1' 1 }'                               true);
Magic Number,Lucene.Net.Analysis.Synonym,TestSynonymMapFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymMapFilter.cs,TestDoKeepOrig,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "a b c"'                               new string[] { "a"' "foo"' "b"' "c" }'                               new int[] { 0' 0' 2' 4 }'                               new int[] { 1' 3' 3' 5 }'                               null'                               new int[] { 1' 0' 1' 1 }'                               new int[] { 1' 2' 1' 1 }'                               true);
Magic Number,Lucene.Net.Analysis.Synonym,TestSynonymMapFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymMapFilter.cs,TestDoKeepOrig,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "a b c"'                               new string[] { "a"' "foo"' "b"' "c" }'                               new int[] { 0' 0' 2' 4 }'                               new int[] { 1' 3' 3' 5 }'                               null'                               new int[] { 1' 0' 1' 1 }'                               new int[] { 1' 2' 1' 1 }'                               true);
Magic Number,Lucene.Net.Analysis.Synonym,TestSynonymMapFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymMapFilter.cs,TestDoKeepOrig,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "a b c"'                               new string[] { "a"' "foo"' "b"' "c" }'                               new int[] { 0' 0' 2' 4 }'                               new int[] { 1' 3' 3' 5 }'                               null'                               new int[] { 1' 0' 1' 1 }'                               new int[] { 1' 2' 1' 1 }'                               true);
Magic Number,Lucene.Net.Analysis.Synonym,TestSynonymMapFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymMapFilter.cs,TestDoKeepOrig,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "a b c"'                               new string[] { "a"' "foo"' "b"' "c" }'                               new int[] { 0' 0' 2' 4 }'                               new int[] { 1' 3' 3' 5 }'                               null'                               new int[] { 1' 0' 1' 1 }'                               new int[] { 1' 2' 1' 1 }'                               true);
Magic Number,Lucene.Net.Analysis.Synonym,TestSynonymMapFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymMapFilter.cs,GetRandomString,The following statement contains a magic number: Debug.Assert(alphabetSize <= 26);
Magic Number,Lucene.Net.Analysis.Synonym,TestSynonymMapFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymMapFilter.cs,GetRandomString,The following statement contains a magic number: char[] s = new char[2 * length];
Magic Number,Lucene.Net.Analysis.Synonym,TestSynonymMapFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymMapFilter.cs,GetRandomString,The following statement contains a magic number: s[2 * charIDX] = (char)(start + Random.Next(alphabetSize));
Magic Number,Lucene.Net.Analysis.Synonym,TestSynonymMapFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymMapFilter.cs,GetRandomString,The following statement contains a magic number: s[2 * charIDX + 1] = ' ';
Magic Number,Lucene.Net.Analysis.Synonym,TestSynonymMapFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymMapFilter.cs,SlowSynMatcher,The following statement contains a magic number: assertTrue(doc.Length % 2 == 0);
Magic Number,Lucene.Net.Analysis.Synonym,TestSynonymMapFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymMapFilter.cs,SlowSynMatcher,The following statement contains a magic number: int numInputs = doc.Length / 2;
Magic Number,Lucene.Net.Analysis.Synonym,TestSynonymMapFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymMapFilter.cs,SlowSynMatcher,The following statement contains a magic number: assertTrue(idx % 2 == 0);
Magic Number,Lucene.Net.Analysis.Synonym,TestSynonymMapFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymMapFilter.cs,SlowSynMatcher,The following statement contains a magic number: int matchIDX = idx / 2;
Magic Number,Lucene.Net.Analysis.Synonym,TestSynonymMapFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymMapFilter.cs,SlowSynMatcher,The following statement contains a magic number: assertTrue(syn.@in.Length % 2 == 1);
Magic Number,Lucene.Net.Analysis.Synonym,TestSynonymMapFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymMapFilter.cs,SlowSynMatcher,The following statement contains a magic number: int synInLength = (1 + match.@in.Length) / 2;
Magic Number,Lucene.Net.Analysis.Synonym,TestSynonymMapFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymMapFilter.cs,SlowSynMatcher,The following statement contains a magic number: idx < (1 + syn.@in.Length) / 2
Magic Number,Lucene.Net.Analysis.Synonym,TestSynonymMapFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymMapFilter.cs,SlowSynMatcher,The following statement contains a magic number: assertEquals(synOutputs.Length' (1 + synOut.Length) / 2);
Magic Number,Lucene.Net.Analysis.Synonym,TestSynonymMapFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymMapFilter.cs,SlowSynMatcher,The following statement contains a magic number: endOffset = (inputIDX * 2) + syn.@in.Length;
Magic Number,Lucene.Net.Analysis.Synonym,TestSynonymMapFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymMapFilter.cs,SlowSynMatcher,The following statement contains a magic number: posLen = syn.keepOrig ? (1 + syn.@in.Length) / 2 : 1;
Magic Number,Lucene.Net.Analysis.Synonym,TestSynonymMapFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymMapFilter.cs,TestRandom,The following statement contains a magic number: int alphabetSize = TestUtil.NextInt32(Random' 2' 7);
Magic Number,Lucene.Net.Analysis.Synonym,TestSynonymMapFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymMapFilter.cs,TestRandom,The following statement contains a magic number: int alphabetSize = TestUtil.NextInt32(Random' 2' 7);
Magic Number,Lucene.Net.Analysis.Synonym,TestSynonymMapFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymMapFilter.cs,TestRandom,The following statement contains a magic number: int docLen = AtLeast(3000);
Magic Number,Lucene.Net.Analysis.Synonym,TestSynonymMapFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymMapFilter.cs,TestRandom,The following statement contains a magic number: int numSyn = AtLeast(5);
Magic Number,Lucene.Net.Analysis.Synonym,TestSynonymMapFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymMapFilter.cs,TestRandom,The following statement contains a magic number: string synIn = GetRandomString('a'' alphabetSize' TestUtil.NextInt32(Random' 1' 5)).Trim();
Magic Number,Lucene.Net.Analysis.Synonym,TestSynonymMapFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymMapFilter.cs,TestRandom,The following statement contains a magic number: string synOut = GetRandomString('0'' 10' TestUtil.NextInt32(Random' 1' 5)).Trim();
Magic Number,Lucene.Net.Analysis.Synonym,TestSynonymMapFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymMapFilter.cs,TestRandom,The following statement contains a magic number: string synOut = GetRandomString('0'' 10' TestUtil.NextInt32(Random' 1' 5)).Trim();
Magic Number,Lucene.Net.Analysis.Synonym,TestSynonymMapFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymMapFilter.cs,TestRandom,The following statement contains a magic number: string expected = SlowSynMatcher(document' syns' 5);
Magic Number,Lucene.Net.Analysis.Synonym,TestSynonymMapFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymMapFilter.cs,TestRandom2,The following statement contains a magic number: int numIters = AtLeast(3);
Magic Number,Lucene.Net.Analysis.Synonym,TestSynonymMapFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymMapFilter.cs,TestRandom2,The following statement contains a magic number: int numEntries = AtLeast(10);
Magic Number,Lucene.Net.Analysis.Synonym,TestSynonymMapFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymMapFilter.cs,TestRandom2,The following statement contains a magic number: CheckRandomData(Random' analyzer' 100);
Magic Number,Lucene.Net.Analysis.Synonym,TestSynonymMapFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymMapFilter.cs,TestRandom2GraphAfter,The following statement contains a magic number: int numIters = AtLeast(3);
Magic Number,Lucene.Net.Analysis.Synonym,TestSynonymMapFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymMapFilter.cs,TestRandom2GraphAfter,The following statement contains a magic number: int numEntries = AtLeast(10);
Magic Number,Lucene.Net.Analysis.Synonym,TestSynonymMapFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymMapFilter.cs,TestRandom2GraphAfter,The following statement contains a magic number: CheckRandomData(random' analyzer' 100);
Magic Number,Lucene.Net.Analysis.Synonym,TestSynonymMapFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymMapFilter.cs,TestEmptyTerm,The following statement contains a magic number: int numIters = AtLeast(10);
Magic Number,Lucene.Net.Analysis.Synonym,TestSynonymMapFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymMapFilter.cs,TestEmptyTerm,The following statement contains a magic number: int numEntries = AtLeast(10);
Magic Number,Lucene.Net.Analysis.Synonym,TestSynonymMapFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymMapFilter.cs,TestRandomHuge,The following statement contains a magic number: int numIters = AtLeast(3);
Magic Number,Lucene.Net.Analysis.Synonym,TestSynonymMapFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymMapFilter.cs,TestRandomHuge,The following statement contains a magic number: int numEntries = AtLeast(10);
Magic Number,Lucene.Net.Analysis.Synonym,TestSynonymMapFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymMapFilter.cs,TestRandomHuge,The following statement contains a magic number: CheckRandomData(random' analyzer' 100' 1024);
Magic Number,Lucene.Net.Analysis.Synonym,TestSynonymMapFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymMapFilter.cs,TestRandomHuge,The following statement contains a magic number: CheckRandomData(random' analyzer' 100' 1024);
Magic Number,Lucene.Net.Analysis.Synonym,TestSynonymMapFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymMapFilter.cs,TestMultiwordOffsets,The following statement contains a magic number: AssertAnalyzesTo(a' "national hockey league"' new string[] { "national"' "nhl"' "hockey"' "league" }' new int[] { 0' 0' 9' 16 }' new int[] { 8' 22' 15' 22 }' new int[] { 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Synonym,TestSynonymMapFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymMapFilter.cs,TestMultiwordOffsets,The following statement contains a magic number: AssertAnalyzesTo(a' "national hockey league"' new string[] { "national"' "nhl"' "hockey"' "league" }' new int[] { 0' 0' 9' 16 }' new int[] { 8' 22' 15' 22 }' new int[] { 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Synonym,TestSynonymMapFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymMapFilter.cs,TestMultiwordOffsets,The following statement contains a magic number: AssertAnalyzesTo(a' "national hockey league"' new string[] { "national"' "nhl"' "hockey"' "league" }' new int[] { 0' 0' 9' 16 }' new int[] { 8' 22' 15' 22 }' new int[] { 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Synonym,TestSynonymMapFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymMapFilter.cs,TestMultiwordOffsets,The following statement contains a magic number: AssertAnalyzesTo(a' "national hockey league"' new string[] { "national"' "nhl"' "hockey"' "league" }' new int[] { 0' 0' 9' 16 }' new int[] { 8' 22' 15' 22 }' new int[] { 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Synonym,TestSynonymMapFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymMapFilter.cs,TestMultiwordOffsets,The following statement contains a magic number: AssertAnalyzesTo(a' "national hockey league"' new string[] { "national"' "nhl"' "hockey"' "league" }' new int[] { 0' 0' 9' 16 }' new int[] { 8' 22' 15' 22 }' new int[] { 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Synonym,TestSynonymMapFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestSynonymMapFilter.cs,TestMultiwordOffsets,The following statement contains a magic number: AssertAnalyzesTo(a' "national hockey league"' new string[] { "national"' "nhl"' "hockey"' "league" }' new int[] { 0' 0' 9' 16 }' new int[] { 8' 22' 15' 22 }' new int[] { 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Synonym,TestWordnetSynonymParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestWordnetSynonymParser.cs,TestSynonyms,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "Lost in the woods"' new string[] { "Lost"' "in"' "the"' "woods"' "wood"' "forest" }' new int[] { 0' 5' 8' 12' 12' 12 }' new int[] { 4' 7' 11' 17' 17' 17 }' new int[] { 1' 1' 1' 1' 0' 0 });
Magic Number,Lucene.Net.Analysis.Synonym,TestWordnetSynonymParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestWordnetSynonymParser.cs,TestSynonyms,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "Lost in the woods"' new string[] { "Lost"' "in"' "the"' "woods"' "wood"' "forest" }' new int[] { 0' 5' 8' 12' 12' 12 }' new int[] { 4' 7' 11' 17' 17' 17 }' new int[] { 1' 1' 1' 1' 0' 0 });
Magic Number,Lucene.Net.Analysis.Synonym,TestWordnetSynonymParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestWordnetSynonymParser.cs,TestSynonyms,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "Lost in the woods"' new string[] { "Lost"' "in"' "the"' "woods"' "wood"' "forest" }' new int[] { 0' 5' 8' 12' 12' 12 }' new int[] { 4' 7' 11' 17' 17' 17 }' new int[] { 1' 1' 1' 1' 0' 0 });
Magic Number,Lucene.Net.Analysis.Synonym,TestWordnetSynonymParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestWordnetSynonymParser.cs,TestSynonyms,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "Lost in the woods"' new string[] { "Lost"' "in"' "the"' "woods"' "wood"' "forest" }' new int[] { 0' 5' 8' 12' 12' 12 }' new int[] { 4' 7' 11' 17' 17' 17 }' new int[] { 1' 1' 1' 1' 0' 0 });
Magic Number,Lucene.Net.Analysis.Synonym,TestWordnetSynonymParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestWordnetSynonymParser.cs,TestSynonyms,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "Lost in the woods"' new string[] { "Lost"' "in"' "the"' "woods"' "wood"' "forest" }' new int[] { 0' 5' 8' 12' 12' 12 }' new int[] { 4' 7' 11' 17' 17' 17 }' new int[] { 1' 1' 1' 1' 0' 0 });
Magic Number,Lucene.Net.Analysis.Synonym,TestWordnetSynonymParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestWordnetSynonymParser.cs,TestSynonyms,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "Lost in the woods"' new string[] { "Lost"' "in"' "the"' "woods"' "wood"' "forest" }' new int[] { 0' 5' 8' 12' 12' 12 }' new int[] { 4' 7' 11' 17' 17' 17 }' new int[] { 1' 1' 1' 1' 0' 0 });
Magic Number,Lucene.Net.Analysis.Synonym,TestWordnetSynonymParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestWordnetSynonymParser.cs,TestSynonyms,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "Lost in the woods"' new string[] { "Lost"' "in"' "the"' "woods"' "wood"' "forest" }' new int[] { 0' 5' 8' 12' 12' 12 }' new int[] { 4' 7' 11' 17' 17' 17 }' new int[] { 1' 1' 1' 1' 0' 0 });
Magic Number,Lucene.Net.Analysis.Synonym,TestWordnetSynonymParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestWordnetSynonymParser.cs,TestSynonyms,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "Lost in the woods"' new string[] { "Lost"' "in"' "the"' "woods"' "wood"' "forest" }' new int[] { 0' 5' 8' 12' 12' 12 }' new int[] { 4' 7' 11' 17' 17' 17 }' new int[] { 1' 1' 1' 1' 0' 0 });
Magic Number,Lucene.Net.Analysis.Synonym,TestWordnetSynonymParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestWordnetSynonymParser.cs,TestSynonyms,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "Lost in the woods"' new string[] { "Lost"' "in"' "the"' "woods"' "wood"' "forest" }' new int[] { 0' 5' 8' 12' 12' 12 }' new int[] { 4' 7' 11' 17' 17' 17 }' new int[] { 1' 1' 1' 1' 0' 0 });
Magic Number,Lucene.Net.Analysis.Synonym,TestWordnetSynonymParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestWordnetSynonymParser.cs,TestSynonyms,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "Lost in the woods"' new string[] { "Lost"' "in"' "the"' "woods"' "wood"' "forest" }' new int[] { 0' 5' 8' 12' 12' 12 }' new int[] { 4' 7' 11' 17' 17' 17 }' new int[] { 1' 1' 1' 1' 0' 0 });
Magic Number,Lucene.Net.Analysis.Synonym,TestWordnetSynonymParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Synonym\TestWordnetSynonymParser.cs,TestSynonyms,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "Lost in the woods"' new string[] { "Lost"' "in"' "the"' "woods"' "wood"' "forest" }' new int[] { 0' 5' 8' 12' 12' 12 }' new int[] { 4' 7' 11' 17' 17' 17 }' new int[] { 1' 1' 1' 1' 0' 0 });
Magic Number,Lucene.Net.Analysis.Tr,TestTurkishAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Tr\TestTurkishAnalyzer.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' new TurkishAnalyzer(TEST_VERSION_CURRENT)' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.Util,BaseTokenStreamFactoryTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\BaseTokenStreamFactoryTestCase.cs,AnalysisFactory,The following statement contains a magic number: keysAndValues.Length % 2 == 1
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_MarkI,The following statement contains a magic number: br.Skip(500);
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_MarkI,The following statement contains a magic number: br.Mark(1000);
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_MarkI,The following statement contains a magic number: br.Skip(250);
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_MarkI,The following statement contains a magic number: br.Read(buf' 0' 500);
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_MarkI,The following statement contains a magic number: assertTrue("Failed to set mark properly"' testString.Substring(500'                      1000 - 500).Equals(new string(buf' 0' 500)' StringComparison.Ordinal));
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_MarkI,The following statement contains a magic number: assertTrue("Failed to set mark properly"' testString.Substring(500'                      1000 - 500).Equals(new string(buf' 0' 500)' StringComparison.Ordinal));
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_MarkI,The following statement contains a magic number: assertTrue("Failed to set mark properly"' testString.Substring(500'                      1000 - 500).Equals(new string(buf' 0' 500)' StringComparison.Ordinal));
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_MarkI,The following statement contains a magic number: assertTrue("Failed to set mark properly"' testString.Substring(500'                      1000 - 500).Equals(new string(buf' 0' 500)' StringComparison.Ordinal));
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_MarkI,The following statement contains a magic number: br = new BufferedCharFilter(new StringReader(testString)' 800);
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_MarkI,The following statement contains a magic number: br.Skip(500);
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_MarkI,The following statement contains a magic number: br.Mark(250);
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_MarkI,The following statement contains a magic number: br.Read(buf' 0' 1000);
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_MarkI,The following statement contains a magic number: char[] chars = new char[256];
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_MarkI,The following statement contains a magic number: i < 256
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_MarkI,The following statement contains a magic number: BufferedCharFilter @in = new BufferedCharFilter(new StringReader(new String(                      chars))' 12);
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_MarkI,The following statement contains a magic number: @in.Skip(6);
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_MarkI,The following statement contains a magic number: @in.Mark(14);
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_MarkI,The following statement contains a magic number: @in.Read(new char[14]' 0' 14);
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_MarkI,The following statement contains a magic number: @in.Read(new char[14]' 0' 14);
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_MarkI,The following statement contains a magic number: assertTrue("Wrong chars"' @in.Read() == (char)6                      && @in.Read() == (char)7);
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_MarkI,The following statement contains a magic number: assertTrue("Wrong chars"' @in.Read() == (char)6                      && @in.Read() == (char)7);
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_MarkI,The following statement contains a magic number: @in = new BufferedCharFilter(new StringReader(new String(chars))' 12);
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_MarkI,The following statement contains a magic number: @in.Skip(6);
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_MarkI,The following statement contains a magic number: @in.Mark(8);
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_MarkI,The following statement contains a magic number: @in.Skip(7);
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_MarkI,The following statement contains a magic number: assertTrue("Wrong chars 2"' @in.Read() == (char)6                      && @in.Read() == (char)7);
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_MarkI,The following statement contains a magic number: assertTrue("Wrong chars 2"' @in.Read() == (char)6                      && @in.Read() == (char)7);
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_MarkI,The following statement contains a magic number: BufferedCharFilter br2 = new BufferedCharFilter(new StringReader("01234")' 2);
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_MarkI,The following statement contains a magic number: br2.Mark(3);
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_MarkI,The following statement contains a magic number: char[] carray = new char[3];
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_MarkI,The following statement contains a magic number: assertEquals(3' result);
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_MarkI,The following statement contains a magic number: assertEquals("Assert 2:"' '2'' carray[2]);
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_MarkI,The following statement contains a magic number: br2 = new BufferedCharFilter(new StringReader("01234")' 2);
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_MarkI,The following statement contains a magic number: br2.Mark(3);
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_MarkI,The following statement contains a magic number: carray = new char[4];
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_MarkI,The following statement contains a magic number: assertEquals("Assert 4:"' 4' result);
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_MarkI,The following statement contains a magic number: assertEquals("Assert 7:"' '2'' carray[2]);
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_MarkI,The following statement contains a magic number: assertEquals("Assert 8:"' '3'' carray[3]);
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_Read,The following statement contains a magic number: char[] chars = new char[256];
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_Read,The following statement contains a magic number: i < 256
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_Read,The following statement contains a magic number: BufferedCharFilter @in = new BufferedCharFilter(new StringReader(new String(                  chars))' 12);
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_Read,The following statement contains a magic number: char[] buf = new char[14];
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_Read,The following statement contains a magic number: @in.Read(buf' 0' 14);
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_Read,The following statement contains a magic number: assertTrue("Wrong block read data"' new string(buf)                          .Equals(new string(chars' 1' 14)' StringComparison.Ordinal));
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_Read,The following statement contains a magic number: assertEquals("Wrong chars"' 15' @in.Read());
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_Read,The following statement contains a magic number: assertTrue(new BufferedCharFilter(new StringReader(new string(new char[5]' 1' 0))' 2).Read() == -1);
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_Read,The following statement contains a magic number: assertTrue(new BufferedCharFilter(new StringReader(new string(new char[5]' 1' 0))' 2).Read() == -1);
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_ReadCII,The following statement contains a magic number: char[] ca = new char[2];
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_ReadCII,The following statement contains a magic number: toRet.Read(ca' 1' 5);
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_ReadCII,The following statement contains a magic number: toRet = new BufferedCharFilter(new StreamReader(                        new MemoryStream(new byte[2])));
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_ReadCII,The following statement contains a magic number: assertEquals("Emptying the reader should return two bytes"' 2'                          toRet.Read(ca' 0' 2));
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_ReadCII,The following statement contains a magic number: assertEquals("Emptying the reader should return two bytes"' 2'                          toRet.Read(ca' 0' 2));
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_ReadCII,The following statement contains a magic number: assertEquals("EOF on a reader should be 0"' 0' toRet.Read(ca' 0'                          2));
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_ReadCII,The following statement contains a magic number: br.Read(buf' 50' 500);
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_ReadCII,The following statement contains a magic number: br.Read(buf' 50' 500);
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_ReadCII,The following statement contains a magic number: assertTrue("Chars read improperly"' new string(buf' 50' 500)                          .Equals(testString.Substring(0' 500 - 0)' StringComparison.Ordinal));
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_ReadCII,The following statement contains a magic number: assertTrue("Chars read improperly"' new string(buf' 50' 500)                          .Equals(testString.Substring(0' 500 - 0)' StringComparison.Ordinal));
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_ReadCII,The following statement contains a magic number: assertTrue("Chars read improperly"' new string(buf' 50' 500)                          .Equals(testString.Substring(0' 500 - 0)' StringComparison.Ordinal));
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_ReadCII,The following statement contains a magic number: int result = bufin.Read(new char[2]' 0' 2);
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_ReadCII,The following statement contains a magic number: int result = bufin.Read(new char[2]' 0' 2);
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_ReadCII,The following statement contains a magic number: new BufferedCharFilter(new StringReader("")' 9).Read(new char[] { }' 7' 0);
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_ReadCII,The following statement contains a magic number: new BufferedCharFilter(new StringReader("")' 9).Read(new char[] { }' 7' 0);
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_ReadCII,The following statement contains a magic number: reader.Read(ch' 0' 42);
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_Reset,The following statement contains a magic number: br.Skip(500);
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_Reset,The following statement contains a magic number: br.Mark(900);
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_Reset,The following statement contains a magic number: br.Skip(500);
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_Reset,The following statement contains a magic number: br.Read(buf' 0' 500);
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_Reset,The following statement contains a magic number: assertTrue("Failed to reset properly"' testString.Substring(500'                          1000 - 500).Equals(new string(buf' 0' 500)' StringComparison.Ordinal));
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_Reset,The following statement contains a magic number: assertTrue("Failed to reset properly"' testString.Substring(500'                          1000 - 500).Equals(new string(buf' 0' 500)' StringComparison.Ordinal));
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_Reset,The following statement contains a magic number: assertTrue("Failed to reset properly"' testString.Substring(500'                          1000 - 500).Equals(new string(buf' 0' 500)' StringComparison.Ordinal));
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_Reset,The following statement contains a magic number: assertTrue("Failed to reset properly"' testString.Substring(500'                          1000 - 500).Equals(new string(buf' 0' 500)' StringComparison.Ordinal));
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_Reset,The following statement contains a magic number: br.Skip(500);
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_Reset_IOException,The following statement contains a magic number: br = new BufferedCharFilter(new StringReader("1234567890")' 9);
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_Reset_IOException,The following statement contains a magic number: br.Mark(9);
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_Reset_IOException,The following statement contains a magic number: i < 11
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_Reset_IOException,The following statement contains a magic number: i < 11
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_Reset_IOException,The following statement contains a magic number: br.Mark(10);
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_Reset_IOException,The following statement contains a magic number: i < 10
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_Reset_IOException,The following statement contains a magic number: i < 11
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_SkipJ,The following statement contains a magic number: br.Skip(500);
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_SkipJ,The following statement contains a magic number: br.Read(buf' 0' 500);
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_SkipJ,The following statement contains a magic number: assertTrue("Failed to set skip properly"' testString.Substring(500'                          1000 - 500).Equals(new string(buf' 0' 500)' StringComparison.Ordinal));
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_SkipJ,The following statement contains a magic number: assertTrue("Failed to set skip properly"' testString.Substring(500'                          1000 - 500).Equals(new string(buf' 0' 500)' StringComparison.Ordinal));
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_SkipJ,The following statement contains a magic number: assertTrue("Failed to set skip properly"' testString.Substring(500'                          1000 - 500).Equals(new string(buf' 0' 500)' StringComparison.Ordinal));
Magic Number,Lucene.Net.Analysis.Util,TestBufferedCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestBufferedCharFilter.cs,Test_SkipJ,The following statement contains a magic number: assertTrue("Failed to set skip properly"' testString.Substring(500'                          1000 - 500).Equals(new string(buf' 0' 500)' StringComparison.Ordinal));
Magic Number,Lucene.Net.Analysis.Util,TestCharacterUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharacterUtils.cs,TestCodePointAtCharSequenceInt,The following statement contains a magic number: assertEquals((int)'\ud801'' java4.CodePointAt(cpAt3' 3));
Magic Number,Lucene.Net.Analysis.Util,TestCharacterUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharacterUtils.cs,TestCodePointAtCharSequenceInt,The following statement contains a magic number: assertEquals((int)'\ud801'' java4.CodePointAt(highSurrogateAt3' 3));
Magic Number,Lucene.Net.Analysis.Util,TestCharacterUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharacterUtils.cs,TestCodePointAtCharSequenceInt,The following statement contains a magic number: java4.CodePointAt(highSurrogateAt3' 4);
Magic Number,Lucene.Net.Analysis.Util,TestCharacterUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharacterUtils.cs,TestCodePointAtCharSequenceInt,The following statement contains a magic number: assertEquals(Character.CodePointAt('\ud801'' '\udc1c')' java5.CodePointAt(cpAt3' 3));
Magic Number,Lucene.Net.Analysis.Util,TestCharacterUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharacterUtils.cs,TestCodePointAtCharSequenceInt,The following statement contains a magic number: assertEquals((int)'\ud801'' java5.CodePointAt(highSurrogateAt3' 3));
Magic Number,Lucene.Net.Analysis.Util,TestCharacterUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharacterUtils.cs,TestCodePointAtCharSequenceInt,The following statement contains a magic number: java5.CodePointAt(highSurrogateAt3' 4);
Magic Number,Lucene.Net.Analysis.Util,TestCharacterUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharacterUtils.cs,TestCodePointAtCharArrayIntInt,The following statement contains a magic number: assertEquals((int)'A'' java4.CodePointAt(cpAt3' 0' 2));
Magic Number,Lucene.Net.Analysis.Util,TestCharacterUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharacterUtils.cs,TestCodePointAtCharArrayIntInt,The following statement contains a magic number: assertEquals((int)'\ud801'' java4.CodePointAt(cpAt3' 3' 5));
Magic Number,Lucene.Net.Analysis.Util,TestCharacterUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharacterUtils.cs,TestCodePointAtCharArrayIntInt,The following statement contains a magic number: assertEquals((int)'\ud801'' java4.CodePointAt(cpAt3' 3' 5));
Magic Number,Lucene.Net.Analysis.Util,TestCharacterUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharacterUtils.cs,TestCodePointAtCharArrayIntInt,The following statement contains a magic number: assertEquals((int)'\ud801'' java4.CodePointAt(highSurrogateAt3' 3' 4));
Magic Number,Lucene.Net.Analysis.Util,TestCharacterUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharacterUtils.cs,TestCodePointAtCharArrayIntInt,The following statement contains a magic number: assertEquals((int)'\ud801'' java4.CodePointAt(highSurrogateAt3' 3' 4));
Magic Number,Lucene.Net.Analysis.Util,TestCharacterUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharacterUtils.cs,TestCodePointAtCharArrayIntInt,The following statement contains a magic number: assertEquals((int)'A'' java5.CodePointAt(cpAt3' 0' 2));
Magic Number,Lucene.Net.Analysis.Util,TestCharacterUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharacterUtils.cs,TestCodePointAtCharArrayIntInt,The following statement contains a magic number: assertEquals(Character.ToCodePoint('\ud801'' '\udc1c')' java5.CodePointAt(cpAt3' 3' 5));
Magic Number,Lucene.Net.Analysis.Util,TestCharacterUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharacterUtils.cs,TestCodePointAtCharArrayIntInt,The following statement contains a magic number: assertEquals(Character.ToCodePoint('\ud801'' '\udc1c')' java5.CodePointAt(cpAt3' 3' 5));
Magic Number,Lucene.Net.Analysis.Util,TestCharacterUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharacterUtils.cs,TestCodePointAtCharArrayIntInt,The following statement contains a magic number: assertEquals((int)'\ud801'' java5.CodePointAt(highSurrogateAt3' 3' 4));
Magic Number,Lucene.Net.Analysis.Util,TestCharacterUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharacterUtils.cs,TestCodePointAtCharArrayIntInt,The following statement contains a magic number: assertEquals((int)'\ud801'' java5.CodePointAt(highSurrogateAt3' 3' 4));
Magic Number,Lucene.Net.Analysis.Util,TestCharacterUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharacterUtils.cs,TestOffsetByCodePoint,The following statement contains a magic number: var offset = Random.Next(7) - 3;
Magic Number,Lucene.Net.Analysis.Util,TestCharacterUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharacterUtils.cs,TestOffsetByCodePoint,The following statement contains a magic number: var offset = Random.Next(7) - 3;
Magic Number,Lucene.Net.Analysis.Util,TestCharacterUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharacterUtils.cs,TestOffsetByCodePoint,The following statement contains a magic number: i < 10
Magic Number,Lucene.Net.Analysis.Util,TestCharacterUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharacterUtils.cs,TestConversions,The following statement contains a magic number: var orig = TestUtil.RandomUnicodeString(Random' 100).toCharArray();
Magic Number,Lucene.Net.Analysis.Util,TestCharacterUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharacterUtils.cs,TestConversions,The following statement contains a magic number: var o1 = TestUtil.NextInt32(Random' 0' Math.Min(5' orig.Length));
Magic Number,Lucene.Net.Analysis.Util,TestCharacterUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharacterUtils.cs,TestNewCharacterBuffer,The following statement contains a magic number: var newCharacterBuffer = CharacterUtils.NewCharacterBuffer(1024);
Magic Number,Lucene.Net.Analysis.Util,TestCharacterUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharacterUtils.cs,TestNewCharacterBuffer,The following statement contains a magic number: assertEquals(1024' newCharacterBuffer.Buffer.Length);
Magic Number,Lucene.Net.Analysis.Util,TestCharacterUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharacterUtils.cs,TestNewCharacterBuffer,The following statement contains a magic number: newCharacterBuffer = CharacterUtils.NewCharacterBuffer(2);
Magic Number,Lucene.Net.Analysis.Util,TestCharacterUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharacterUtils.cs,TestNewCharacterBuffer,The following statement contains a magic number: assertEquals(2' newCharacterBuffer.Buffer.Length);
Magic Number,Lucene.Net.Analysis.Util,TestCharacterUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharacterUtils.cs,TestFillNoHighSurrogate,The following statement contains a magic number: var buffer = CharacterUtils.NewCharacterBuffer(6);
Magic Number,Lucene.Net.Analysis.Util,TestCharacterUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharacterUtils.cs,TestFillNoHighSurrogate,The following statement contains a magic number: assertEquals(6' buffer.Length);
Magic Number,Lucene.Net.Analysis.Util,TestCharacterUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharacterUtils.cs,TestFillNoHighSurrogate,The following statement contains a magic number: assertEquals(4' buffer.Length);
Magic Number,Lucene.Net.Analysis.Util,TestCharacterUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharacterUtils.cs,TestFillJava15,The following statement contains a magic number: var buffer = CharacterUtils.NewCharacterBuffer(5);
Magic Number,Lucene.Net.Analysis.Util,TestCharacterUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharacterUtils.cs,TestFillJava15,The following statement contains a magic number: assertEquals(4' buffer.Length);
Magic Number,Lucene.Net.Analysis.Util,TestCharacterUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharacterUtils.cs,TestFillJava15,The following statement contains a magic number: assertEquals(5' buffer.Length);
Magic Number,Lucene.Net.Analysis.Util,TestCharacterUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharacterUtils.cs,TestFillJava15,The following statement contains a magic number: assertEquals(4' buffer.Length);
Magic Number,Lucene.Net.Analysis.Util,TestCharacterUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharacterUtils.cs,TestFillJava15,The following statement contains a magic number: assertEquals(3' buffer.Length);
Magic Number,Lucene.Net.Analysis.Util,TestCharacterUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharacterUtils.cs,TestFillJava14,The following statement contains a magic number: var buffer = CharacterUtils.NewCharacterBuffer(5);
Magic Number,Lucene.Net.Analysis.Util,TestCharacterUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharacterUtils.cs,TestFillJava14,The following statement contains a magic number: assertEquals(5' buffer.Length);
Magic Number,Lucene.Net.Analysis.Util,TestCharacterUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharacterUtils.cs,TestFillJava14,The following statement contains a magic number: assertEquals(5' buffer.Length);
Magic Number,Lucene.Net.Analysis.Util,TestCharacterUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharacterUtils.cs,TestFillJava14,The following statement contains a magic number: buffer = CharacterUtils.NewCharacterBuffer(6);
Magic Number,Lucene.Net.Analysis.Util,TestCharacterUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharacterUtils.cs,TestFillJava14,The following statement contains a magic number: assertEquals(6' buffer.Length);
Magic Number,Lucene.Net.Analysis.Util,TestCharArrayMap_,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArrayMap.cs,DoRandom,The following statement contains a magic number: int len = Random.Next(5);
Magic Number,Lucene.Net.Analysis.Util,TestCharArrayMap_,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArrayMap.cs,DoRandom,The following statement contains a magic number: key[j] = (char)Random.Next(127);
Magic Number,Lucene.Net.Analysis.Util,TestCharArrayMap_,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArrayMap.cs,TestCharArrayMap,The following statement contains a magic number: int num = 5 * RANDOM_MULTIPLIER;
Magic Number,Lucene.Net.Analysis.Util,TestCharArrayMap_,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArrayMap.cs,TestCharArrayMap,The following statement contains a magic number: DoRandom(1000' false);
Magic Number,Lucene.Net.Analysis.Util,TestCharArrayMap_,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArrayMap.cs,TestCharArrayMap,The following statement contains a magic number: DoRandom(1000' true);
Magic Number,Lucene.Net.Analysis.Util,TestCharArrayMap_,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArrayMap.cs,TestMethods,The following statement contains a magic number: CharArrayMap<int?> cm = new CharArrayMap<int?>(TEST_VERSION_CURRENT' 2' false);
Magic Number,Lucene.Net.Analysis.Util,TestCharArrayMap_,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArrayMap.cs,TestMethods,The following statement contains a magic number: hm["bar"] = 2;
Magic Number,Lucene.Net.Analysis.Util,TestCharArrayMap_,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArrayMap.cs,TestMethods,The following statement contains a magic number: hm["baz"] = 3;
Magic Number,Lucene.Net.Analysis.Util,TestCharArrayMap_,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArrayMap.cs,TestMethods,The following statement contains a magic number: ((CharArrayMap<int?>.EntryIterator)iter1).SetValue(val * 100);
Magic Number,Lucene.Net.Analysis.Util,TestCharArrayMap_,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArrayMap.cs,TestMethods,The following statement contains a magic number: assertEquals(val * 100' (int)cm.Get(key));
Magic Number,Lucene.Net.Analysis.Util,TestCharArrayMap_,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArrayMap.cs,TestMethods,The following statement contains a magic number: iter2.SetValue(val * 100);
Magic Number,Lucene.Net.Analysis.Util,TestCharArrayMap_,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArrayMap.cs,TestMethods,The following statement contains a magic number: assertEquals(val * 100' (int)cm.Get(keyc));
Magic Number,Lucene.Net.Analysis.Util,TestCharArrayMap_,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArrayMap.cs,TestModifyOnUnmodifiable,The following statement contains a magic number: CharArrayMap<int?> map = new CharArrayMap<int?>(TEST_VERSION_CURRENT' 2' false);
Magic Number,Lucene.Net.Analysis.Util,TestCharArrayMap_,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArrayMap.cs,TestModifyOnUnmodifiable,The following statement contains a magic number: map.Put("bar"' 2);
Magic Number,Lucene.Net.Analysis.Util,TestCharArrayMap_,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArrayMap.cs,TestModifyOnUnmodifiable,The following statement contains a magic number: assertEquals(2' size);
Magic Number,Lucene.Net.Analysis.Util,TestCharArrayMap_,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArrayMap.cs,TestModifyOnUnmodifiable,The following statement contains a magic number: assertEquals(2' map.Get("bar"));
Magic Number,Lucene.Net.Analysis.Util,TestCharArrayMap_,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArrayMap.cs,TestModifyOnUnmodifiable,The following statement contains a magic number: map.Put(NOT_IN_MAP.ToCharArray()' 3);
Magic Number,Lucene.Net.Analysis.Util,TestCharArrayMap_,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArrayMap.cs,TestModifyOnUnmodifiable,The following statement contains a magic number: map.Put(NOT_IN_MAP' 3);
Magic Number,Lucene.Net.Analysis.Util,TestCharArrayMap_,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArrayMap.cs,TestModifyOnUnmodifiable,The following statement contains a magic number: map.Put(new StringBuilder(NOT_IN_MAP)' 3);
Magic Number,Lucene.Net.Analysis.Util,TestCharArrayMap_,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArrayMap.cs,TestModifyOnUnmodifiable,The following statement contains a magic number: map.Add(NOT_IN_MAP' 3);
Magic Number,Lucene.Net.Analysis.Util,TestCharArrayMap_,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArrayMap.cs,TestModifyOnUnmodifiable,The following statement contains a magic number: map.Add(new KeyValuePair<string' int?>(NOT_IN_MAP' 3));
Magic Number,Lucene.Net.Analysis.Util,TestCharArrayMap_,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArrayMap.cs,TestModifyOnUnmodifiable,The following statement contains a magic number: map[new StringBuilder(NOT_IN_MAP)] = 3;
Magic Number,Lucene.Net.Analysis.Util,TestCharArrayMap_,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArrayMap.cs,TestModifyOnUnmodifiable,The following statement contains a magic number: map.Put((object)NOT_IN_MAP' 3);
Magic Number,Lucene.Net.Analysis.Util,TestCharArrayMap_,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArrayMap.cs,TestModifyOnUnmodifiable,The following statement contains a magic number: map.PutAll(Collections.SingletonMap<string' int?>(NOT_IN_MAP' 3));
Magic Number,Lucene.Net.Analysis.Util,TestCharArrayMap_,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArrayMap.cs,TestModifyOnUnmodifiable,The following statement contains a magic number: assertEquals(2' map.Get("bar"));
Magic Number,Lucene.Net.Analysis.Util,TestCharArrayMap_,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArrayMap.cs,TestToString,The following statement contains a magic number: cm.Put("test2"' 2);
Magic Number,Lucene.Net.Analysis.Util,TestCharArraySet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArraySet.cs,TestNonZeroOffset,The following statement contains a magic number: CharArraySet set = new CharArraySet(TEST_VERSION_CURRENT' 10' true);
Magic Number,Lucene.Net.Analysis.Util,TestCharArraySet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArraySet.cs,TestNonZeroOffset,The following statement contains a magic number: assertTrue(set.Contains(findme' 1' 4));
Magic Number,Lucene.Net.Analysis.Util,TestCharArraySet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArraySet.cs,TestNonZeroOffset,The following statement contains a magic number: assertTrue(set.Contains(new string(findme' 1' 4)));
Magic Number,Lucene.Net.Analysis.Util,TestCharArraySet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArraySet.cs,TestNonZeroOffset,The following statement contains a magic number: assertTrue(set.Contains(findme' 1' 4));
Magic Number,Lucene.Net.Analysis.Util,TestCharArraySet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArraySet.cs,TestNonZeroOffset,The following statement contains a magic number: assertTrue(set.Contains(new string(findme' 1' 4)));
Magic Number,Lucene.Net.Analysis.Util,TestCharArraySet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArraySet.cs,TestObjectContains,The following statement contains a magic number: CharArraySet set = new CharArraySet(TEST_VERSION_CURRENT' 10' true);
Magic Number,Lucene.Net.Analysis.Util,TestCharArraySet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArraySet.cs,TestClear,The following statement contains a magic number: var set = new CharArraySet(TEST_VERSION_CURRENT' 10' true);
Magic Number,Lucene.Net.Analysis.Util,TestCharArraySet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArraySet.cs,TestModifyOnUnmodifiable,The following statement contains a magic number: CharArraySet set = new CharArraySet(TEST_VERSION_CURRENT' 10' true);
Magic Number,Lucene.Net.Analysis.Util,TestCharArraySet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArraySet.cs,TestUnmodifiableSet,The following statement contains a magic number: var set = new CharArraySet(TEST_VERSION_CURRENT' 10' true);
Magic Number,Lucene.Net.Analysis.Util,TestCharArraySet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArraySet.cs,TestCopyCharArraySetBWCompat,The following statement contains a magic number: CharArraySet setIngoreCase = new CharArraySet(TEST_VERSION_CURRENT' 10' true);
Magic Number,Lucene.Net.Analysis.Util,TestCharArraySet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArraySet.cs,TestCopyCharArraySetBWCompat,The following statement contains a magic number: CharArraySet setCaseSensitive = new CharArraySet(TEST_VERSION_CURRENT' 10' false);
Magic Number,Lucene.Net.Analysis.Util,TestCharArraySet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArraySet.cs,TestCopyCharArraySet,The following statement contains a magic number: CharArraySet setIngoreCase = new CharArraySet(TEST_VERSION_CURRENT' 10' true);
Magic Number,Lucene.Net.Analysis.Util,TestCharArraySet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArraySet.cs,TestCopyCharArraySet,The following statement contains a magic number: CharArraySet setCaseSensitive = new CharArraySet(TEST_VERSION_CURRENT' 10' false);
Magic Number,Lucene.Net.Analysis.Util,TestCharArraySet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArraySet.cs,TestEmptySet,The following statement contains a magic number: assertFalse(CharArraySet.EMPTY_SET.Contains("foo".ToCharArray()' 0' 3));
Magic Number,Lucene.Net.Analysis.Util,TestCharArraySet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArraySet.cs,TestContainsWithNull,The following statement contains a magic number: set.Contains((char[])null' 0' 10);
Magic Number,Lucene.Net.Analysis.Util,TestCharArraySet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArraySet.cs,TestUnionWithObject,The following statement contains a magic number: var nonExistingMixedTypes = new object[] { true' (byte)55' (short)44' (int)33' (sbyte)22' (long)11' (char)'\n'' "hurray"' (uint)99' (ulong)89' (ushort)79' new char[] { 't'' 'w'' 'o' }' new StringCharSequenceWrapper("testing") };
Magic Number,Lucene.Net.Analysis.Util,TestCharArraySet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArraySet.cs,TestUnionWithObject,The following statement contains a magic number: var nonExistingMixedTypes = new object[] { true' (byte)55' (short)44' (int)33' (sbyte)22' (long)11' (char)'\n'' "hurray"' (uint)99' (ulong)89' (ushort)79' new char[] { 't'' 'w'' 'o' }' new StringCharSequenceWrapper("testing") };
Magic Number,Lucene.Net.Analysis.Util,TestCharArraySet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArraySet.cs,TestUnionWithObject,The following statement contains a magic number: var nonExistingMixedTypes = new object[] { true' (byte)55' (short)44' (int)33' (sbyte)22' (long)11' (char)'\n'' "hurray"' (uint)99' (ulong)89' (ushort)79' new char[] { 't'' 'w'' 'o' }' new StringCharSequenceWrapper("testing") };
Magic Number,Lucene.Net.Analysis.Util,TestCharArraySet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArraySet.cs,TestUnionWithObject,The following statement contains a magic number: var nonExistingMixedTypes = new object[] { true' (byte)55' (short)44' (int)33' (sbyte)22' (long)11' (char)'\n'' "hurray"' (uint)99' (ulong)89' (ushort)79' new char[] { 't'' 'w'' 'o' }' new StringCharSequenceWrapper("testing") };
Magic Number,Lucene.Net.Analysis.Util,TestCharArraySet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArraySet.cs,TestUnionWithObject,The following statement contains a magic number: var nonExistingMixedTypes = new object[] { true' (byte)55' (short)44' (int)33' (sbyte)22' (long)11' (char)'\n'' "hurray"' (uint)99' (ulong)89' (ushort)79' new char[] { 't'' 'w'' 'o' }' new StringCharSequenceWrapper("testing") };
Magic Number,Lucene.Net.Analysis.Util,TestCharArraySet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArraySet.cs,TestUnionWithObject,The following statement contains a magic number: var nonExistingMixedTypes = new object[] { true' (byte)55' (short)44' (int)33' (sbyte)22' (long)11' (char)'\n'' "hurray"' (uint)99' (ulong)89' (ushort)79' new char[] { 't'' 'w'' 'o' }' new StringCharSequenceWrapper("testing") };
Magic Number,Lucene.Net.Analysis.Util,TestCharArraySet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArraySet.cs,TestUnionWithObject,The following statement contains a magic number: var nonExistingMixedTypes = new object[] { true' (byte)55' (short)44' (int)33' (sbyte)22' (long)11' (char)'\n'' "hurray"' (uint)99' (ulong)89' (ushort)79' new char[] { 't'' 'w'' 'o' }' new StringCharSequenceWrapper("testing") };
Magic Number,Lucene.Net.Analysis.Util,TestCharArraySet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArraySet.cs,TestUnionWithObject,The following statement contains a magic number: var nonExistingMixedTypes = new object[] { true' (byte)55' (short)44' (int)33' (sbyte)22' (long)11' (char)'\n'' "hurray"' (uint)99' (ulong)89' (ushort)79' new char[] { 't'' 'w'' 'o' }' new StringCharSequenceWrapper("testing") };
Magic Number,Lucene.Net.Analysis.Util,TestCharArraySet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArraySet.cs,TestUnionWithObject,The following statement contains a magic number: assertEquals(7' target.Count);
Magic Number,Lucene.Net.Analysis.Util,TestCharArraySet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArraySet.cs,TestUnionWithObject,The following statement contains a magic number: assertEquals(13' target.Count);
Magic Number,Lucene.Net.Analysis.Util,TestCharArraySet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArraySet.cs,TestUnionWithObject,The following statement contains a magic number: assertEquals(20' target.Count);
Magic Number,Lucene.Net.Analysis.Util,TestCharArraySet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArraySet.cs,TestUnionWithObject,The following statement contains a magic number: assertTrue(target.Contains((byte)55));
Magic Number,Lucene.Net.Analysis.Util,TestCharArraySet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArraySet.cs,TestUnionWithObject,The following statement contains a magic number: assertTrue(target.Contains((short)44));
Magic Number,Lucene.Net.Analysis.Util,TestCharArraySet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArraySet.cs,TestUnionWithObject,The following statement contains a magic number: assertTrue(target.Contains((int)33));
Magic Number,Lucene.Net.Analysis.Util,TestCharArraySet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArraySet.cs,TestUnionWithObject,The following statement contains a magic number: assertTrue(target.Contains((sbyte)22));
Magic Number,Lucene.Net.Analysis.Util,TestCharArraySet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArraySet.cs,TestUnionWithObject,The following statement contains a magic number: assertTrue(target.Contains((long)11));
Magic Number,Lucene.Net.Analysis.Util,TestCharArraySet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArraySet.cs,TestUnionWithObject,The following statement contains a magic number: assertTrue(target.Contains((uint)99));
Magic Number,Lucene.Net.Analysis.Util,TestCharArraySet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArraySet.cs,TestUnionWithObject,The following statement contains a magic number: assertTrue(target.Contains((ulong)89));
Magic Number,Lucene.Net.Analysis.Util,TestCharArraySet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArraySet.cs,TestUnionWithObject,The following statement contains a magic number: assertTrue(target.Contains((ushort)79));
Magic Number,Lucene.Net.Analysis.Util,TestCharArraySet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArraySet.cs,TestUnionWithCharArray,The following statement contains a magic number: assertEquals(7' target.Count);
Magic Number,Lucene.Net.Analysis.Util,TestCharArraySet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArraySet.cs,TestUnionWithCharArray,The following statement contains a magic number: assertEquals(13' target.Count);
Magic Number,Lucene.Net.Analysis.Util,TestCharArraySet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArraySet.cs,TestUnionWithString,The following statement contains a magic number: assertEquals(7' target.Count);
Magic Number,Lucene.Net.Analysis.Util,TestCharArraySet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArraySet.cs,TestUnionWithString,The following statement contains a magic number: assertEquals(13' target.Count);
Magic Number,Lucene.Net.Analysis.Util,TestCharArraySet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArraySet.cs,TestUnionWithCharSequence,The following statement contains a magic number: assertEquals(7' target.Count);
Magic Number,Lucene.Net.Analysis.Util,TestCharArraySet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharArraySet.cs,TestUnionWithCharSequence,The following statement contains a magic number: assertEquals(13' target.Count);
Magic Number,Lucene.Net.Analysis.Util,TestCharTokenizers,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharTokenizers.cs,TestReadSupplementaryChars,The following statement contains a magic number: var num = 1024 + Random.Next(1024);
Magic Number,Lucene.Net.Analysis.Util,TestCharTokenizers,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharTokenizers.cs,TestReadSupplementaryChars,The following statement contains a magic number: var num = 1024 + Random.Next(1024);
Magic Number,Lucene.Net.Analysis.Util,TestCharTokenizers,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharTokenizers.cs,TestReadSupplementaryChars,The following statement contains a magic number: (i % 10) == 0
Magic Number,Lucene.Net.Analysis.Util,TestCharTokenizers,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharTokenizers.cs,TestReadSupplementaryChars,The following statement contains a magic number: builder.Insert(1023' "\ud801\udc1c");
Magic Number,Lucene.Net.Analysis.Util,TestCharTokenizers,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharTokenizers.cs,TestExtendCharBuffer,The following statement contains a magic number: i < 40
Magic Number,Lucene.Net.Analysis.Util,TestCharTokenizers,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharTokenizers.cs,TestMaxWordLength,The following statement contains a magic number: i < 255
Magic Number,Lucene.Net.Analysis.Util,TestCharTokenizers,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharTokenizers.cs,TestMaxWordLengthWithSupplementary,The following statement contains a magic number: i < 254
Magic Number,Lucene.Net.Analysis.Util,TestCharTokenizers,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharTokenizers.cs,TestCrossPlaneNormalization,The following statement contains a magic number: var num = 1000 * RANDOM_MULTIPLIER;
Magic Number,Lucene.Net.Analysis.Util,TestCharTokenizers,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharTokenizers.cs,TestCrossPlaneNormalization2,The following statement contains a magic number: var num = 1000 * RANDOM_MULTIPLIER;
Magic Number,Lucene.Net.Analysis.Util,TestCharTokenizers,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharTokenizers.cs,TestSurrogates,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "bar 123" + (char)55404 + (char)56321 + "34 5te 987"' new string[] { "123𫀁34"' "5"' "987" });
Magic Number,Lucene.Net.Analysis.Util,TestCharTokenizers,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharTokenizers.cs,TestSurrogates,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "bar 123" + (char)55404 + (char)56321 + "34 5te 987"' new string[] { "123𫀁34"' "5"' "987" });
Magic Number,Lucene.Net.Analysis.Util,TestCharTokenizers,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharTokenizers.cs,TestSurrogates,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "787 " + (char)55297 + (char)56388 + "6" + (char)55404 + (char)56321 + " art true 734"' new string[] { "787"' "𐑄6𫀁"' "734" });
Magic Number,Lucene.Net.Analysis.Util,TestCharTokenizers,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharTokenizers.cs,TestSurrogates,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "787 " + (char)55297 + (char)56388 + "6" + (char)55404 + (char)56321 + " art true 734"' new string[] { "787"' "𐑄6𫀁"' "734" });
Magic Number,Lucene.Net.Analysis.Util,TestCharTokenizers,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharTokenizers.cs,TestSurrogates,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "787 " + (char)55297 + (char)56388 + "6" + (char)55404 + (char)56321 + " art true 734"' new string[] { "787"' "𐑄6𫀁"' "734" });
Magic Number,Lucene.Net.Analysis.Util,TestCharTokenizers,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestCharTokenizers.cs,TestSurrogates,The following statement contains a magic number: AssertAnalyzesTo(analyzer' "787 " + (char)55297 + (char)56388 + "6" + (char)55404 + (char)56321 + " art true 734"' new string[] { "787"' "𐑄6𫀁"' "734" });
Magic Number,Lucene.Net.Analysis.Util,TestElision,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestElision.cs,TestElision_,The following statement contains a magic number: assertEquals("embrouille"' tas[4]);
Magic Number,Lucene.Net.Analysis.Util,TestElision,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestElision.cs,TestElision_,The following statement contains a magic number: assertEquals("O'brian"' tas[6]);
Magic Number,Lucene.Net.Analysis.Util,TestElision,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestElision.cs,TestElision_,The following statement contains a magic number: assertEquals("enfin"' tas[7]);
Magic Number,Lucene.Net.Analysis.Util,TestRollingCharBuffer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestRollingCharBuffer.cs,Test,The following statement contains a magic number: var ITERS = AtLeast(1000);
Magic Number,Lucene.Net.Analysis.Util,TestRollingCharBuffer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestRollingCharBuffer.cs,Test,The following statement contains a magic number: var stringLen = random.NextBoolean() ? random.Next(50) : random.Next(20000);
Magic Number,Lucene.Net.Analysis.Util,TestRollingCharBuffer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestRollingCharBuffer.cs,Test,The following statement contains a magic number: var stringLen = random.NextBoolean() ? random.Next(50) : random.Next(20000);
Magic Number,Lucene.Net.Analysis.Util,TestRollingCharBuffer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestRollingCharBuffer.cs,Test,The following statement contains a magic number: availCount > 0 && random.Next(20) == 17
Magic Number,Lucene.Net.Analysis.Util,TestRollingCharBuffer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestRollingCharBuffer.cs,Test,The following statement contains a magic number: availCount > 0 && random.Next(20) == 17
Magic Number,Lucene.Net.Analysis.Util,TestWordlistLoader,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestWordlistLoader.cs,CheckSet,The following statement contains a magic number: assertEquals(3' wordset.size());
Magic Number,Lucene.Net.Analysis.Util,TestWordlistLoader,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Util\TestWordlistLoader.cs,TestSnowballListLoading,The following statement contains a magic number: assertEquals(7' wordset.size());
Magic Number,Lucene.Net.Analysis.Wikipedia,TestWikipediaTokenizerFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\TestWikipediaTokenizerFactory.cs,TestTokenizer,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "This"' "is"' "a"' "foo" }' new int[] { 0' 5' 8' 21 }' new int[] { 4' 7' 9' 24 }' new string[] { "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' WikipediaTokenizer.CATEGORY }' new int[] { 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,TestWikipediaTokenizerFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\TestWikipediaTokenizerFactory.cs,TestTokenizer,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "This"' "is"' "a"' "foo" }' new int[] { 0' 5' 8' 21 }' new int[] { 4' 7' 9' 24 }' new string[] { "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' WikipediaTokenizer.CATEGORY }' new int[] { 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,TestWikipediaTokenizerFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\TestWikipediaTokenizerFactory.cs,TestTokenizer,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "This"' "is"' "a"' "foo" }' new int[] { 0' 5' 8' 21 }' new int[] { 4' 7' 9' 24 }' new string[] { "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' WikipediaTokenizer.CATEGORY }' new int[] { 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,TestWikipediaTokenizerFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\TestWikipediaTokenizerFactory.cs,TestTokenizer,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "This"' "is"' "a"' "foo" }' new int[] { 0' 5' 8' 21 }' new int[] { 4' 7' 9' 24 }' new string[] { "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' WikipediaTokenizer.CATEGORY }' new int[] { 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,TestWikipediaTokenizerFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\TestWikipediaTokenizerFactory.cs,TestTokenizer,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "This"' "is"' "a"' "foo" }' new int[] { 0' 5' 8' 21 }' new int[] { 4' 7' 9' 24 }' new string[] { "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' WikipediaTokenizer.CATEGORY }' new int[] { 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,TestWikipediaTokenizerFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\TestWikipediaTokenizerFactory.cs,TestTokenizer,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "This"' "is"' "a"' "foo" }' new int[] { 0' 5' 8' 21 }' new int[] { 4' 7' 9' 24 }' new string[] { "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' WikipediaTokenizer.CATEGORY }' new int[] { 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,TestWikipediaTokenizerFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\TestWikipediaTokenizerFactory.cs,TestTokenizer,The following statement contains a magic number: AssertTokenStreamContents(tokenizer' new string[] { "This"' "is"' "a"' "foo" }' new int[] { 0' 5' 8' 21 }' new int[] { 4' 7' 9' 24 }' new string[] { "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' WikipediaTokenizer.CATEGORY }' new int[] { 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestSimple,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "This"' "is"' "a"' "foo" }' new int[] { 0' 5' 8' 21 }' new int[] { 4' 7' 9' 24 }' new string[] { "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' WikipediaTokenizer.CATEGORY }' new int[] { 1' 1' 1' 1 }' text.Length);
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestSimple,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "This"' "is"' "a"' "foo" }' new int[] { 0' 5' 8' 21 }' new int[] { 4' 7' 9' 24 }' new string[] { "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' WikipediaTokenizer.CATEGORY }' new int[] { 1' 1' 1' 1 }' text.Length);
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestSimple,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "This"' "is"' "a"' "foo" }' new int[] { 0' 5' 8' 21 }' new int[] { 4' 7' 9' 24 }' new string[] { "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' WikipediaTokenizer.CATEGORY }' new int[] { 1' 1' 1' 1 }' text.Length);
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestSimple,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "This"' "is"' "a"' "foo" }' new int[] { 0' 5' 8' 21 }' new int[] { 4' 7' 9' 24 }' new string[] { "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' WikipediaTokenizer.CATEGORY }' new int[] { 1' 1' 1' 1 }' text.Length);
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestSimple,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "This"' "is"' "a"' "foo" }' new int[] { 0' 5' 8' 21 }' new int[] { 4' 7' 9' 24 }' new string[] { "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' WikipediaTokenizer.CATEGORY }' new int[] { 1' 1' 1' 1 }' text.Length);
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestSimple,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "This"' "is"' "a"' "foo" }' new int[] { 0' 5' 8' 21 }' new int[] { 4' 7' 9' 24 }' new string[] { "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' WikipediaTokenizer.CATEGORY }' new int[] { 1' 1' 1' 1 }' text.Length);
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestSimple,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "This"' "is"' "a"' "foo" }' new int[] { 0' 5' 8' 21 }' new int[] { 4' 7' 9' 24 }' new string[] { "<ALPHANUM>"' "<ALPHANUM>"' "<ALPHANUM>"' WikipediaTokenizer.CATEGORY }' new int[] { 1' 1' 1' 1 }' text.Length);
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestLucene1133,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "a b c d"' "e f g"' "link"' "here"' "link"' "there"' "italics here"' "something"' "more italics"' "h   i   j" }' new int[] { 11' 32' 42' 47' 56' 61' 71' 86' 98' 124 }' new int[] { 18' 37' 46' 51' 60' 66' 83' 95' 110' 133 }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestLucene1133,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "a b c d"' "e f g"' "link"' "here"' "link"' "there"' "italics here"' "something"' "more italics"' "h   i   j" }' new int[] { 11' 32' 42' 47' 56' 61' 71' 86' 98' 124 }' new int[] { 18' 37' 46' 51' 60' 66' 83' 95' 110' 133 }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestLucene1133,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "a b c d"' "e f g"' "link"' "here"' "link"' "there"' "italics here"' "something"' "more italics"' "h   i   j" }' new int[] { 11' 32' 42' 47' 56' 61' 71' 86' 98' 124 }' new int[] { 18' 37' 46' 51' 60' 66' 83' 95' 110' 133 }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestLucene1133,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "a b c d"' "e f g"' "link"' "here"' "link"' "there"' "italics here"' "something"' "more italics"' "h   i   j" }' new int[] { 11' 32' 42' 47' 56' 61' 71' 86' 98' 124 }' new int[] { 18' 37' 46' 51' 60' 66' 83' 95' 110' 133 }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestLucene1133,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "a b c d"' "e f g"' "link"' "here"' "link"' "there"' "italics here"' "something"' "more italics"' "h   i   j" }' new int[] { 11' 32' 42' 47' 56' 61' 71' 86' 98' 124 }' new int[] { 18' 37' 46' 51' 60' 66' 83' 95' 110' 133 }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestLucene1133,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "a b c d"' "e f g"' "link"' "here"' "link"' "there"' "italics here"' "something"' "more italics"' "h   i   j" }' new int[] { 11' 32' 42' 47' 56' 61' 71' 86' 98' 124 }' new int[] { 18' 37' 46' 51' 60' 66' 83' 95' 110' 133 }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestLucene1133,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "a b c d"' "e f g"' "link"' "here"' "link"' "there"' "italics here"' "something"' "more italics"' "h   i   j" }' new int[] { 11' 32' 42' 47' 56' 61' 71' 86' 98' 124 }' new int[] { 18' 37' 46' 51' 60' 66' 83' 95' 110' 133 }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestLucene1133,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "a b c d"' "e f g"' "link"' "here"' "link"' "there"' "italics here"' "something"' "more italics"' "h   i   j" }' new int[] { 11' 32' 42' 47' 56' 61' 71' 86' 98' 124 }' new int[] { 18' 37' 46' 51' 60' 66' 83' 95' 110' 133 }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestLucene1133,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "a b c d"' "e f g"' "link"' "here"' "link"' "there"' "italics here"' "something"' "more italics"' "h   i   j" }' new int[] { 11' 32' 42' 47' 56' 61' 71' 86' 98' 124 }' new int[] { 18' 37' 46' 51' 60' 66' 83' 95' 110' 133 }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestLucene1133,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "a b c d"' "e f g"' "link"' "here"' "link"' "there"' "italics here"' "something"' "more italics"' "h   i   j" }' new int[] { 11' 32' 42' 47' 56' 61' 71' 86' 98' 124 }' new int[] { 18' 37' 46' 51' 60' 66' 83' 95' 110' 133 }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestLucene1133,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "a b c d"' "e f g"' "link"' "here"' "link"' "there"' "italics here"' "something"' "more italics"' "h   i   j" }' new int[] { 11' 32' 42' 47' 56' 61' 71' 86' 98' 124 }' new int[] { 18' 37' 46' 51' 60' 66' 83' 95' 110' 133 }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestLucene1133,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "a b c d"' "e f g"' "link"' "here"' "link"' "there"' "italics here"' "something"' "more italics"' "h   i   j" }' new int[] { 11' 32' 42' 47' 56' 61' 71' 86' 98' 124 }' new int[] { 18' 37' 46' 51' 60' 66' 83' 95' 110' 133 }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestLucene1133,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "a b c d"' "e f g"' "link"' "here"' "link"' "there"' "italics here"' "something"' "more italics"' "h   i   j" }' new int[] { 11' 32' 42' 47' 56' 61' 71' 86' 98' 124 }' new int[] { 18' 37' 46' 51' 60' 66' 83' 95' 110' 133 }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestLucene1133,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "a b c d"' "e f g"' "link"' "here"' "link"' "there"' "italics here"' "something"' "more italics"' "h   i   j" }' new int[] { 11' 32' 42' 47' 56' 61' 71' 86' 98' 124 }' new int[] { 18' 37' 46' 51' 60' 66' 83' 95' 110' 133 }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestLucene1133,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "a b c d"' "e f g"' "link"' "here"' "link"' "there"' "italics here"' "something"' "more italics"' "h   i   j" }' new int[] { 11' 32' 42' 47' 56' 61' 71' 86' 98' 124 }' new int[] { 18' 37' 46' 51' 60' 66' 83' 95' 110' 133 }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestLucene1133,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "a b c d"' "e f g"' "link"' "here"' "link"' "there"' "italics here"' "something"' "more italics"' "h   i   j" }' new int[] { 11' 32' 42' 47' 56' 61' 71' 86' 98' 124 }' new int[] { 18' 37' 46' 51' 60' 66' 83' 95' 110' 133 }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestLucene1133,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "a b c d"' "e f g"' "link"' "here"' "link"' "there"' "italics here"' "something"' "more italics"' "h   i   j" }' new int[] { 11' 32' 42' 47' 56' 61' 71' 86' 98' 124 }' new int[] { 18' 37' 46' 51' 60' 66' 83' 95' 110' 133 }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestLucene1133,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "a b c d"' "e f g"' "link"' "here"' "link"' "there"' "italics here"' "something"' "more italics"' "h   i   j" }' new int[] { 11' 32' 42' 47' 56' 61' 71' 86' 98' 124 }' new int[] { 18' 37' 46' 51' 60' 66' 83' 95' 110' 133 }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestLucene1133,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "a b c d"' "e f g"' "link"' "here"' "link"' "there"' "italics here"' "something"' "more italics"' "h   i   j" }' new int[] { 11' 32' 42' 47' 56' 61' 71' 86' 98' 124 }' new int[] { 18' 37' 46' 51' 60' 66' 83' 95' 110' 133 }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestLucene1133,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "a b c d"' "e f g"' "link"' "here"' "link"' "there"' "italics here"' "something"' "more italics"' "h   i   j" }' new int[] { 11' 32' 42' 47' 56' 61' 71' 86' 98' 124 }' new int[] { 18' 37' 46' 51' 60' 66' 83' 95' 110' 133 }' new int[] { 1' 1' 1' 1' 1' 1' 1' 1' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestBoth,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "a b c d"' "a"' "b"' "c"' "d"' "e f g"' "e"' "f"' "g"' "link"' "here"' "link"' "there"' "italics here"' "italics"' "here"' "something"' "more italics"' "more"' "italics"' "h   i   j"' "h"' "i"' "j" }' new int[] { 11' 11' 13' 15' 17' 32' 32' 34' 36' 42' 47' 56' 61' 71' 71' 79' 86' 98' 98' 103' 124' 124' 128' 132 }' new int[] { 18' 12' 14' 16' 18' 37' 33' 35' 37' 46' 51' 60' 66' 83' 78' 83' 95' 110' 102' 110' 133' 125' 129' 133 }' new int[] { 1' 0' 1' 1' 1' 1' 0' 1' 1' 1' 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestBoth,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "a b c d"' "a"' "b"' "c"' "d"' "e f g"' "e"' "f"' "g"' "link"' "here"' "link"' "there"' "italics here"' "italics"' "here"' "something"' "more italics"' "more"' "italics"' "h   i   j"' "h"' "i"' "j" }' new int[] { 11' 11' 13' 15' 17' 32' 32' 34' 36' 42' 47' 56' 61' 71' 71' 79' 86' 98' 98' 103' 124' 124' 128' 132 }' new int[] { 18' 12' 14' 16' 18' 37' 33' 35' 37' 46' 51' 60' 66' 83' 78' 83' 95' 110' 102' 110' 133' 125' 129' 133 }' new int[] { 1' 0' 1' 1' 1' 1' 0' 1' 1' 1' 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestBoth,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "a b c d"' "a"' "b"' "c"' "d"' "e f g"' "e"' "f"' "g"' "link"' "here"' "link"' "there"' "italics here"' "italics"' "here"' "something"' "more italics"' "more"' "italics"' "h   i   j"' "h"' "i"' "j" }' new int[] { 11' 11' 13' 15' 17' 32' 32' 34' 36' 42' 47' 56' 61' 71' 71' 79' 86' 98' 98' 103' 124' 124' 128' 132 }' new int[] { 18' 12' 14' 16' 18' 37' 33' 35' 37' 46' 51' 60' 66' 83' 78' 83' 95' 110' 102' 110' 133' 125' 129' 133 }' new int[] { 1' 0' 1' 1' 1' 1' 0' 1' 1' 1' 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestBoth,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "a b c d"' "a"' "b"' "c"' "d"' "e f g"' "e"' "f"' "g"' "link"' "here"' "link"' "there"' "italics here"' "italics"' "here"' "something"' "more italics"' "more"' "italics"' "h   i   j"' "h"' "i"' "j" }' new int[] { 11' 11' 13' 15' 17' 32' 32' 34' 36' 42' 47' 56' 61' 71' 71' 79' 86' 98' 98' 103' 124' 124' 128' 132 }' new int[] { 18' 12' 14' 16' 18' 37' 33' 35' 37' 46' 51' 60' 66' 83' 78' 83' 95' 110' 102' 110' 133' 125' 129' 133 }' new int[] { 1' 0' 1' 1' 1' 1' 0' 1' 1' 1' 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestBoth,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "a b c d"' "a"' "b"' "c"' "d"' "e f g"' "e"' "f"' "g"' "link"' "here"' "link"' "there"' "italics here"' "italics"' "here"' "something"' "more italics"' "more"' "italics"' "h   i   j"' "h"' "i"' "j" }' new int[] { 11' 11' 13' 15' 17' 32' 32' 34' 36' 42' 47' 56' 61' 71' 71' 79' 86' 98' 98' 103' 124' 124' 128' 132 }' new int[] { 18' 12' 14' 16' 18' 37' 33' 35' 37' 46' 51' 60' 66' 83' 78' 83' 95' 110' 102' 110' 133' 125' 129' 133 }' new int[] { 1' 0' 1' 1' 1' 1' 0' 1' 1' 1' 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestBoth,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "a b c d"' "a"' "b"' "c"' "d"' "e f g"' "e"' "f"' "g"' "link"' "here"' "link"' "there"' "italics here"' "italics"' "here"' "something"' "more italics"' "more"' "italics"' "h   i   j"' "h"' "i"' "j" }' new int[] { 11' 11' 13' 15' 17' 32' 32' 34' 36' 42' 47' 56' 61' 71' 71' 79' 86' 98' 98' 103' 124' 124' 128' 132 }' new int[] { 18' 12' 14' 16' 18' 37' 33' 35' 37' 46' 51' 60' 66' 83' 78' 83' 95' 110' 102' 110' 133' 125' 129' 133 }' new int[] { 1' 0' 1' 1' 1' 1' 0' 1' 1' 1' 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestBoth,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "a b c d"' "a"' "b"' "c"' "d"' "e f g"' "e"' "f"' "g"' "link"' "here"' "link"' "there"' "italics here"' "italics"' "here"' "something"' "more italics"' "more"' "italics"' "h   i   j"' "h"' "i"' "j" }' new int[] { 11' 11' 13' 15' 17' 32' 32' 34' 36' 42' 47' 56' 61' 71' 71' 79' 86' 98' 98' 103' 124' 124' 128' 132 }' new int[] { 18' 12' 14' 16' 18' 37' 33' 35' 37' 46' 51' 60' 66' 83' 78' 83' 95' 110' 102' 110' 133' 125' 129' 133 }' new int[] { 1' 0' 1' 1' 1' 1' 0' 1' 1' 1' 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestBoth,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "a b c d"' "a"' "b"' "c"' "d"' "e f g"' "e"' "f"' "g"' "link"' "here"' "link"' "there"' "italics here"' "italics"' "here"' "something"' "more italics"' "more"' "italics"' "h   i   j"' "h"' "i"' "j" }' new int[] { 11' 11' 13' 15' 17' 32' 32' 34' 36' 42' 47' 56' 61' 71' 71' 79' 86' 98' 98' 103' 124' 124' 128' 132 }' new int[] { 18' 12' 14' 16' 18' 37' 33' 35' 37' 46' 51' 60' 66' 83' 78' 83' 95' 110' 102' 110' 133' 125' 129' 133 }' new int[] { 1' 0' 1' 1' 1' 1' 0' 1' 1' 1' 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestBoth,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "a b c d"' "a"' "b"' "c"' "d"' "e f g"' "e"' "f"' "g"' "link"' "here"' "link"' "there"' "italics here"' "italics"' "here"' "something"' "more italics"' "more"' "italics"' "h   i   j"' "h"' "i"' "j" }' new int[] { 11' 11' 13' 15' 17' 32' 32' 34' 36' 42' 47' 56' 61' 71' 71' 79' 86' 98' 98' 103' 124' 124' 128' 132 }' new int[] { 18' 12' 14' 16' 18' 37' 33' 35' 37' 46' 51' 60' 66' 83' 78' 83' 95' 110' 102' 110' 133' 125' 129' 133 }' new int[] { 1' 0' 1' 1' 1' 1' 0' 1' 1' 1' 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestBoth,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "a b c d"' "a"' "b"' "c"' "d"' "e f g"' "e"' "f"' "g"' "link"' "here"' "link"' "there"' "italics here"' "italics"' "here"' "something"' "more italics"' "more"' "italics"' "h   i   j"' "h"' "i"' "j" }' new int[] { 11' 11' 13' 15' 17' 32' 32' 34' 36' 42' 47' 56' 61' 71' 71' 79' 86' 98' 98' 103' 124' 124' 128' 132 }' new int[] { 18' 12' 14' 16' 18' 37' 33' 35' 37' 46' 51' 60' 66' 83' 78' 83' 95' 110' 102' 110' 133' 125' 129' 133 }' new int[] { 1' 0' 1' 1' 1' 1' 0' 1' 1' 1' 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestBoth,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "a b c d"' "a"' "b"' "c"' "d"' "e f g"' "e"' "f"' "g"' "link"' "here"' "link"' "there"' "italics here"' "italics"' "here"' "something"' "more italics"' "more"' "italics"' "h   i   j"' "h"' "i"' "j" }' new int[] { 11' 11' 13' 15' 17' 32' 32' 34' 36' 42' 47' 56' 61' 71' 71' 79' 86' 98' 98' 103' 124' 124' 128' 132 }' new int[] { 18' 12' 14' 16' 18' 37' 33' 35' 37' 46' 51' 60' 66' 83' 78' 83' 95' 110' 102' 110' 133' 125' 129' 133 }' new int[] { 1' 0' 1' 1' 1' 1' 0' 1' 1' 1' 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestBoth,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "a b c d"' "a"' "b"' "c"' "d"' "e f g"' "e"' "f"' "g"' "link"' "here"' "link"' "there"' "italics here"' "italics"' "here"' "something"' "more italics"' "more"' "italics"' "h   i   j"' "h"' "i"' "j" }' new int[] { 11' 11' 13' 15' 17' 32' 32' 34' 36' 42' 47' 56' 61' 71' 71' 79' 86' 98' 98' 103' 124' 124' 128' 132 }' new int[] { 18' 12' 14' 16' 18' 37' 33' 35' 37' 46' 51' 60' 66' 83' 78' 83' 95' 110' 102' 110' 133' 125' 129' 133 }' new int[] { 1' 0' 1' 1' 1' 1' 0' 1' 1' 1' 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestBoth,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "a b c d"' "a"' "b"' "c"' "d"' "e f g"' "e"' "f"' "g"' "link"' "here"' "link"' "there"' "italics here"' "italics"' "here"' "something"' "more italics"' "more"' "italics"' "h   i   j"' "h"' "i"' "j" }' new int[] { 11' 11' 13' 15' 17' 32' 32' 34' 36' 42' 47' 56' 61' 71' 71' 79' 86' 98' 98' 103' 124' 124' 128' 132 }' new int[] { 18' 12' 14' 16' 18' 37' 33' 35' 37' 46' 51' 60' 66' 83' 78' 83' 95' 110' 102' 110' 133' 125' 129' 133 }' new int[] { 1' 0' 1' 1' 1' 1' 0' 1' 1' 1' 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestBoth,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "a b c d"' "a"' "b"' "c"' "d"' "e f g"' "e"' "f"' "g"' "link"' "here"' "link"' "there"' "italics here"' "italics"' "here"' "something"' "more italics"' "more"' "italics"' "h   i   j"' "h"' "i"' "j" }' new int[] { 11' 11' 13' 15' 17' 32' 32' 34' 36' 42' 47' 56' 61' 71' 71' 79' 86' 98' 98' 103' 124' 124' 128' 132 }' new int[] { 18' 12' 14' 16' 18' 37' 33' 35' 37' 46' 51' 60' 66' 83' 78' 83' 95' 110' 102' 110' 133' 125' 129' 133 }' new int[] { 1' 0' 1' 1' 1' 1' 0' 1' 1' 1' 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestBoth,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "a b c d"' "a"' "b"' "c"' "d"' "e f g"' "e"' "f"' "g"' "link"' "here"' "link"' "there"' "italics here"' "italics"' "here"' "something"' "more italics"' "more"' "italics"' "h   i   j"' "h"' "i"' "j" }' new int[] { 11' 11' 13' 15' 17' 32' 32' 34' 36' 42' 47' 56' 61' 71' 71' 79' 86' 98' 98' 103' 124' 124' 128' 132 }' new int[] { 18' 12' 14' 16' 18' 37' 33' 35' 37' 46' 51' 60' 66' 83' 78' 83' 95' 110' 102' 110' 133' 125' 129' 133 }' new int[] { 1' 0' 1' 1' 1' 1' 0' 1' 1' 1' 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestBoth,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "a b c d"' "a"' "b"' "c"' "d"' "e f g"' "e"' "f"' "g"' "link"' "here"' "link"' "there"' "italics here"' "italics"' "here"' "something"' "more italics"' "more"' "italics"' "h   i   j"' "h"' "i"' "j" }' new int[] { 11' 11' 13' 15' 17' 32' 32' 34' 36' 42' 47' 56' 61' 71' 71' 79' 86' 98' 98' 103' 124' 124' 128' 132 }' new int[] { 18' 12' 14' 16' 18' 37' 33' 35' 37' 46' 51' 60' 66' 83' 78' 83' 95' 110' 102' 110' 133' 125' 129' 133 }' new int[] { 1' 0' 1' 1' 1' 1' 0' 1' 1' 1' 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestBoth,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "a b c d"' "a"' "b"' "c"' "d"' "e f g"' "e"' "f"' "g"' "link"' "here"' "link"' "there"' "italics here"' "italics"' "here"' "something"' "more italics"' "more"' "italics"' "h   i   j"' "h"' "i"' "j" }' new int[] { 11' 11' 13' 15' 17' 32' 32' 34' 36' 42' 47' 56' 61' 71' 71' 79' 86' 98' 98' 103' 124' 124' 128' 132 }' new int[] { 18' 12' 14' 16' 18' 37' 33' 35' 37' 46' 51' 60' 66' 83' 78' 83' 95' 110' 102' 110' 133' 125' 129' 133 }' new int[] { 1' 0' 1' 1' 1' 1' 0' 1' 1' 1' 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestBoth,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "a b c d"' "a"' "b"' "c"' "d"' "e f g"' "e"' "f"' "g"' "link"' "here"' "link"' "there"' "italics here"' "italics"' "here"' "something"' "more italics"' "more"' "italics"' "h   i   j"' "h"' "i"' "j" }' new int[] { 11' 11' 13' 15' 17' 32' 32' 34' 36' 42' 47' 56' 61' 71' 71' 79' 86' 98' 98' 103' 124' 124' 128' 132 }' new int[] { 18' 12' 14' 16' 18' 37' 33' 35' 37' 46' 51' 60' 66' 83' 78' 83' 95' 110' 102' 110' 133' 125' 129' 133 }' new int[] { 1' 0' 1' 1' 1' 1' 0' 1' 1' 1' 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestBoth,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "a b c d"' "a"' "b"' "c"' "d"' "e f g"' "e"' "f"' "g"' "link"' "here"' "link"' "there"' "italics here"' "italics"' "here"' "something"' "more italics"' "more"' "italics"' "h   i   j"' "h"' "i"' "j" }' new int[] { 11' 11' 13' 15' 17' 32' 32' 34' 36' 42' 47' 56' 61' 71' 71' 79' 86' 98' 98' 103' 124' 124' 128' 132 }' new int[] { 18' 12' 14' 16' 18' 37' 33' 35' 37' 46' 51' 60' 66' 83' 78' 83' 95' 110' 102' 110' 133' 125' 129' 133 }' new int[] { 1' 0' 1' 1' 1' 1' 0' 1' 1' 1' 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestBoth,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "a b c d"' "a"' "b"' "c"' "d"' "e f g"' "e"' "f"' "g"' "link"' "here"' "link"' "there"' "italics here"' "italics"' "here"' "something"' "more italics"' "more"' "italics"' "h   i   j"' "h"' "i"' "j" }' new int[] { 11' 11' 13' 15' 17' 32' 32' 34' 36' 42' 47' 56' 61' 71' 71' 79' 86' 98' 98' 103' 124' 124' 128' 132 }' new int[] { 18' 12' 14' 16' 18' 37' 33' 35' 37' 46' 51' 60' 66' 83' 78' 83' 95' 110' 102' 110' 133' 125' 129' 133 }' new int[] { 1' 0' 1' 1' 1' 1' 0' 1' 1' 1' 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestBoth,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "a b c d"' "a"' "b"' "c"' "d"' "e f g"' "e"' "f"' "g"' "link"' "here"' "link"' "there"' "italics here"' "italics"' "here"' "something"' "more italics"' "more"' "italics"' "h   i   j"' "h"' "i"' "j" }' new int[] { 11' 11' 13' 15' 17' 32' 32' 34' 36' 42' 47' 56' 61' 71' 71' 79' 86' 98' 98' 103' 124' 124' 128' 132 }' new int[] { 18' 12' 14' 16' 18' 37' 33' 35' 37' 46' 51' 60' 66' 83' 78' 83' 95' 110' 102' 110' 133' 125' 129' 133 }' new int[] { 1' 0' 1' 1' 1' 1' 0' 1' 1' 1' 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestBoth,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "a b c d"' "a"' "b"' "c"' "d"' "e f g"' "e"' "f"' "g"' "link"' "here"' "link"' "there"' "italics here"' "italics"' "here"' "something"' "more italics"' "more"' "italics"' "h   i   j"' "h"' "i"' "j" }' new int[] { 11' 11' 13' 15' 17' 32' 32' 34' 36' 42' 47' 56' 61' 71' 71' 79' 86' 98' 98' 103' 124' 124' 128' 132 }' new int[] { 18' 12' 14' 16' 18' 37' 33' 35' 37' 46' 51' 60' 66' 83' 78' 83' 95' 110' 102' 110' 133' 125' 129' 133 }' new int[] { 1' 0' 1' 1' 1' 1' 0' 1' 1' 1' 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestBoth,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "a b c d"' "a"' "b"' "c"' "d"' "e f g"' "e"' "f"' "g"' "link"' "here"' "link"' "there"' "italics here"' "italics"' "here"' "something"' "more italics"' "more"' "italics"' "h   i   j"' "h"' "i"' "j" }' new int[] { 11' 11' 13' 15' 17' 32' 32' 34' 36' 42' 47' 56' 61' 71' 71' 79' 86' 98' 98' 103' 124' 124' 128' 132 }' new int[] { 18' 12' 14' 16' 18' 37' 33' 35' 37' 46' 51' 60' 66' 83' 78' 83' 95' 110' 102' 110' 133' 125' 129' 133 }' new int[] { 1' 0' 1' 1' 1' 1' 0' 1' 1' 1' 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestBoth,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "a b c d"' "a"' "b"' "c"' "d"' "e f g"' "e"' "f"' "g"' "link"' "here"' "link"' "there"' "italics here"' "italics"' "here"' "something"' "more italics"' "more"' "italics"' "h   i   j"' "h"' "i"' "j" }' new int[] { 11' 11' 13' 15' 17' 32' 32' 34' 36' 42' 47' 56' 61' 71' 71' 79' 86' 98' 98' 103' 124' 124' 128' 132 }' new int[] { 18' 12' 14' 16' 18' 37' 33' 35' 37' 46' 51' 60' 66' 83' 78' 83' 95' 110' 102' 110' 133' 125' 129' 133 }' new int[] { 1' 0' 1' 1' 1' 1' 0' 1' 1' 1' 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestBoth,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "a b c d"' "a"' "b"' "c"' "d"' "e f g"' "e"' "f"' "g"' "link"' "here"' "link"' "there"' "italics here"' "italics"' "here"' "something"' "more italics"' "more"' "italics"' "h   i   j"' "h"' "i"' "j" }' new int[] { 11' 11' 13' 15' 17' 32' 32' 34' 36' 42' 47' 56' 61' 71' 71' 79' 86' 98' 98' 103' 124' 124' 128' 132 }' new int[] { 18' 12' 14' 16' 18' 37' 33' 35' 37' 46' 51' 60' 66' 83' 78' 83' 95' 110' 102' 110' 133' 125' 129' 133 }' new int[] { 1' 0' 1' 1' 1' 1' 0' 1' 1' 1' 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestBoth,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "a b c d"' "a"' "b"' "c"' "d"' "e f g"' "e"' "f"' "g"' "link"' "here"' "link"' "there"' "italics here"' "italics"' "here"' "something"' "more italics"' "more"' "italics"' "h   i   j"' "h"' "i"' "j" }' new int[] { 11' 11' 13' 15' 17' 32' 32' 34' 36' 42' 47' 56' 61' 71' 71' 79' 86' 98' 98' 103' 124' 124' 128' 132 }' new int[] { 18' 12' 14' 16' 18' 37' 33' 35' 37' 46' 51' 60' 66' 83' 78' 83' 95' 110' 102' 110' 133' 125' 129' 133 }' new int[] { 1' 0' 1' 1' 1' 1' 0' 1' 1' 1' 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestBoth,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "a b c d"' "a"' "b"' "c"' "d"' "e f g"' "e"' "f"' "g"' "link"' "here"' "link"' "there"' "italics here"' "italics"' "here"' "something"' "more italics"' "more"' "italics"' "h   i   j"' "h"' "i"' "j" }' new int[] { 11' 11' 13' 15' 17' 32' 32' 34' 36' 42' 47' 56' 61' 71' 71' 79' 86' 98' 98' 103' 124' 124' 128' 132 }' new int[] { 18' 12' 14' 16' 18' 37' 33' 35' 37' 46' 51' 60' 66' 83' 78' 83' 95' 110' 102' 110' 133' 125' 129' 133 }' new int[] { 1' 0' 1' 1' 1' 1' 0' 1' 1' 1' 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestBoth,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "a b c d"' "a"' "b"' "c"' "d"' "e f g"' "e"' "f"' "g"' "link"' "here"' "link"' "there"' "italics here"' "italics"' "here"' "something"' "more italics"' "more"' "italics"' "h   i   j"' "h"' "i"' "j" }' new int[] { 11' 11' 13' 15' 17' 32' 32' 34' 36' 42' 47' 56' 61' 71' 71' 79' 86' 98' 98' 103' 124' 124' 128' 132 }' new int[] { 18' 12' 14' 16' 18' 37' 33' 35' 37' 46' 51' 60' 66' 83' 78' 83' 95' 110' 102' 110' 133' 125' 129' 133 }' new int[] { 1' 0' 1' 1' 1' 1' 0' 1' 1' 1' 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestBoth,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "a b c d"' "a"' "b"' "c"' "d"' "e f g"' "e"' "f"' "g"' "link"' "here"' "link"' "there"' "italics here"' "italics"' "here"' "something"' "more italics"' "more"' "italics"' "h   i   j"' "h"' "i"' "j" }' new int[] { 11' 11' 13' 15' 17' 32' 32' 34' 36' 42' 47' 56' 61' 71' 71' 79' 86' 98' 98' 103' 124' 124' 128' 132 }' new int[] { 18' 12' 14' 16' 18' 37' 33' 35' 37' 46' 51' 60' 66' 83' 78' 83' 95' 110' 102' 110' 133' 125' 129' 133 }' new int[] { 1' 0' 1' 1' 1' 1' 0' 1' 1' 1' 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestBoth,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "a b c d"' "a"' "b"' "c"' "d"' "e f g"' "e"' "f"' "g"' "link"' "here"' "link"' "there"' "italics here"' "italics"' "here"' "something"' "more italics"' "more"' "italics"' "h   i   j"' "h"' "i"' "j" }' new int[] { 11' 11' 13' 15' 17' 32' 32' 34' 36' 42' 47' 56' 61' 71' 71' 79' 86' 98' 98' 103' 124' 124' 128' 132 }' new int[] { 18' 12' 14' 16' 18' 37' 33' 35' 37' 46' 51' 60' 66' 83' 78' 83' 95' 110' 102' 110' 133' 125' 129' 133 }' new int[] { 1' 0' 1' 1' 1' 1' 0' 1' 1' 1' 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestBoth,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "a b c d"' "a"' "b"' "c"' "d"' "e f g"' "e"' "f"' "g"' "link"' "here"' "link"' "there"' "italics here"' "italics"' "here"' "something"' "more italics"' "more"' "italics"' "h   i   j"' "h"' "i"' "j" }' new int[] { 11' 11' 13' 15' 17' 32' 32' 34' 36' 42' 47' 56' 61' 71' 71' 79' 86' 98' 98' 103' 124' 124' 128' 132 }' new int[] { 18' 12' 14' 16' 18' 37' 33' 35' 37' 46' 51' 60' 66' 83' 78' 83' 95' 110' 102' 110' 133' 125' 129' 133 }' new int[] { 1' 0' 1' 1' 1' 1' 0' 1' 1' 1' 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestBoth,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "a b c d"' "a"' "b"' "c"' "d"' "e f g"' "e"' "f"' "g"' "link"' "here"' "link"' "there"' "italics here"' "italics"' "here"' "something"' "more italics"' "more"' "italics"' "h   i   j"' "h"' "i"' "j" }' new int[] { 11' 11' 13' 15' 17' 32' 32' 34' 36' 42' 47' 56' 61' 71' 71' 79' 86' 98' 98' 103' 124' 124' 128' 132 }' new int[] { 18' 12' 14' 16' 18' 37' 33' 35' 37' 46' 51' 60' 66' 83' 78' 83' 95' 110' 102' 110' 133' 125' 129' 133 }' new int[] { 1' 0' 1' 1' 1' 1' 0' 1' 1' 1' 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestBoth,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "a b c d"' "a"' "b"' "c"' "d"' "e f g"' "e"' "f"' "g"' "link"' "here"' "link"' "there"' "italics here"' "italics"' "here"' "something"' "more italics"' "more"' "italics"' "h   i   j"' "h"' "i"' "j" }' new int[] { 11' 11' 13' 15' 17' 32' 32' 34' 36' 42' 47' 56' 61' 71' 71' 79' 86' 98' 98' 103' 124' 124' 128' 132 }' new int[] { 18' 12' 14' 16' 18' 37' 33' 35' 37' 46' 51' 60' 66' 83' 78' 83' 95' 110' 102' 110' 133' 125' 129' 133 }' new int[] { 1' 0' 1' 1' 1' 1' 0' 1' 1' 1' 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestBoth,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "a b c d"' "a"' "b"' "c"' "d"' "e f g"' "e"' "f"' "g"' "link"' "here"' "link"' "there"' "italics here"' "italics"' "here"' "something"' "more italics"' "more"' "italics"' "h   i   j"' "h"' "i"' "j" }' new int[] { 11' 11' 13' 15' 17' 32' 32' 34' 36' 42' 47' 56' 61' 71' 71' 79' 86' 98' 98' 103' 124' 124' 128' 132 }' new int[] { 18' 12' 14' 16' 18' 37' 33' 35' 37' 46' 51' 60' 66' 83' 78' 83' 95' 110' 102' 110' 133' 125' 129' 133 }' new int[] { 1' 0' 1' 1' 1' 1' 0' 1' 1' 1' 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestBoth,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "a b c d"' "a"' "b"' "c"' "d"' "e f g"' "e"' "f"' "g"' "link"' "here"' "link"' "there"' "italics here"' "italics"' "here"' "something"' "more italics"' "more"' "italics"' "h   i   j"' "h"' "i"' "j" }' new int[] { 11' 11' 13' 15' 17' 32' 32' 34' 36' 42' 47' 56' 61' 71' 71' 79' 86' 98' 98' 103' 124' 124' 128' 132 }' new int[] { 18' 12' 14' 16' 18' 37' 33' 35' 37' 46' 51' 60' 66' 83' 78' 83' 95' 110' 102' 110' 133' 125' 129' 133 }' new int[] { 1' 0' 1' 1' 1' 1' 0' 1' 1' 1' 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestBoth,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "a b c d"' "a"' "b"' "c"' "d"' "e f g"' "e"' "f"' "g"' "link"' "here"' "link"' "there"' "italics here"' "italics"' "here"' "something"' "more italics"' "more"' "italics"' "h   i   j"' "h"' "i"' "j" }' new int[] { 11' 11' 13' 15' 17' 32' 32' 34' 36' 42' 47' 56' 61' 71' 71' 79' 86' 98' 98' 103' 124' 124' 128' 132 }' new int[] { 18' 12' 14' 16' 18' 37' 33' 35' 37' 46' 51' 60' 66' 83' 78' 83' 95' 110' 102' 110' 133' 125' 129' 133 }' new int[] { 1' 0' 1' 1' 1' 1' 0' 1' 1' 1' 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestBoth,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "a b c d"' "a"' "b"' "c"' "d"' "e f g"' "e"' "f"' "g"' "link"' "here"' "link"' "there"' "italics here"' "italics"' "here"' "something"' "more italics"' "more"' "italics"' "h   i   j"' "h"' "i"' "j" }' new int[] { 11' 11' 13' 15' 17' 32' 32' 34' 36' 42' 47' 56' 61' 71' 71' 79' 86' 98' 98' 103' 124' 124' 128' 132 }' new int[] { 18' 12' 14' 16' 18' 37' 33' 35' 37' 46' 51' 60' 66' 83' 78' 83' 95' 110' 102' 110' 133' 125' 129' 133 }' new int[] { 1' 0' 1' 1' 1' 1' 0' 1' 1' 1' 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestBoth,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "a b c d"' "a"' "b"' "c"' "d"' "e f g"' "e"' "f"' "g"' "link"' "here"' "link"' "there"' "italics here"' "italics"' "here"' "something"' "more italics"' "more"' "italics"' "h   i   j"' "h"' "i"' "j" }' new int[] { 11' 11' 13' 15' 17' 32' 32' 34' 36' 42' 47' 56' 61' 71' 71' 79' 86' 98' 98' 103' 124' 124' 128' 132 }' new int[] { 18' 12' 14' 16' 18' 37' 33' 35' 37' 46' 51' 60' 66' 83' 78' 83' 95' 110' 102' 110' 133' 125' 129' 133 }' new int[] { 1' 0' 1' 1' 1' 1' 0' 1' 1' 1' 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestBoth,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "a b c d"' "a"' "b"' "c"' "d"' "e f g"' "e"' "f"' "g"' "link"' "here"' "link"' "there"' "italics here"' "italics"' "here"' "something"' "more italics"' "more"' "italics"' "h   i   j"' "h"' "i"' "j" }' new int[] { 11' 11' 13' 15' 17' 32' 32' 34' 36' 42' 47' 56' 61' 71' 71' 79' 86' 98' 98' 103' 124' 124' 128' 132 }' new int[] { 18' 12' 14' 16' 18' 37' 33' 35' 37' 46' 51' 60' 66' 83' 78' 83' 95' 110' 102' 110' 133' 125' 129' 133 }' new int[] { 1' 0' 1' 1' 1' 1' 0' 1' 1' 1' 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestBoth,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "a b c d"' "a"' "b"' "c"' "d"' "e f g"' "e"' "f"' "g"' "link"' "here"' "link"' "there"' "italics here"' "italics"' "here"' "something"' "more italics"' "more"' "italics"' "h   i   j"' "h"' "i"' "j" }' new int[] { 11' 11' 13' 15' 17' 32' 32' 34' 36' 42' 47' 56' 61' 71' 71' 79' 86' 98' 98' 103' 124' 124' 128' 132 }' new int[] { 18' 12' 14' 16' 18' 37' 33' 35' 37' 46' 51' 60' 66' 83' 78' 83' 95' 110' 102' 110' 133' 125' 129' 133 }' new int[] { 1' 0' 1' 1' 1' 1' 0' 1' 1' 1' 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestBoth,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "a b c d"' "a"' "b"' "c"' "d"' "e f g"' "e"' "f"' "g"' "link"' "here"' "link"' "there"' "italics here"' "italics"' "here"' "something"' "more italics"' "more"' "italics"' "h   i   j"' "h"' "i"' "j" }' new int[] { 11' 11' 13' 15' 17' 32' 32' 34' 36' 42' 47' 56' 61' 71' 71' 79' 86' 98' 98' 103' 124' 124' 128' 132 }' new int[] { 18' 12' 14' 16' 18' 37' 33' 35' 37' 46' 51' 60' 66' 83' 78' 83' 95' 110' 102' 110' 133' 125' 129' 133 }' new int[] { 1' 0' 1' 1' 1' 1' 0' 1' 1' 1' 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestBoth,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "a b c d"' "a"' "b"' "c"' "d"' "e f g"' "e"' "f"' "g"' "link"' "here"' "link"' "there"' "italics here"' "italics"' "here"' "something"' "more italics"' "more"' "italics"' "h   i   j"' "h"' "i"' "j" }' new int[] { 11' 11' 13' 15' 17' 32' 32' 34' 36' 42' 47' 56' 61' 71' 71' 79' 86' 98' 98' 103' 124' 124' 128' 132 }' new int[] { 18' 12' 14' 16' 18' 37' 33' 35' 37' 46' 51' 60' 66' 83' 78' 83' 95' 110' 102' 110' 133' 125' 129' 133 }' new int[] { 1' 0' 1' 1' 1' 1' 0' 1' 1' 1' 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestBoth,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "a b c d"' "a"' "b"' "c"' "d"' "e f g"' "e"' "f"' "g"' "link"' "here"' "link"' "there"' "italics here"' "italics"' "here"' "something"' "more italics"' "more"' "italics"' "h   i   j"' "h"' "i"' "j" }' new int[] { 11' 11' 13' 15' 17' 32' 32' 34' 36' 42' 47' 56' 61' 71' 71' 79' 86' 98' 98' 103' 124' 124' 128' 132 }' new int[] { 18' 12' 14' 16' 18' 37' 33' 35' 37' 46' 51' 60' 66' 83' 78' 83' 95' 110' 102' 110' 133' 125' 129' 133 }' new int[] { 1' 0' 1' 1' 1' 1' 0' 1' 1' 1' 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestBoth,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "a b c d"' "a"' "b"' "c"' "d"' "e f g"' "e"' "f"' "g"' "link"' "here"' "link"' "there"' "italics here"' "italics"' "here"' "something"' "more italics"' "more"' "italics"' "h   i   j"' "h"' "i"' "j" }' new int[] { 11' 11' 13' 15' 17' 32' 32' 34' 36' 42' 47' 56' 61' 71' 71' 79' 86' 98' 98' 103' 124' 124' 128' 132 }' new int[] { 18' 12' 14' 16' 18' 37' 33' 35' 37' 46' 51' 60' 66' 83' 78' 83' 95' 110' 102' 110' 133' 125' 129' 133 }' new int[] { 1' 0' 1' 1' 1' 1' 0' 1' 1' 1' 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestBoth,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "a b c d"' "a"' "b"' "c"' "d"' "e f g"' "e"' "f"' "g"' "link"' "here"' "link"' "there"' "italics here"' "italics"' "here"' "something"' "more italics"' "more"' "italics"' "h   i   j"' "h"' "i"' "j" }' new int[] { 11' 11' 13' 15' 17' 32' 32' 34' 36' 42' 47' 56' 61' 71' 71' 79' 86' 98' 98' 103' 124' 124' 128' 132 }' new int[] { 18' 12' 14' 16' 18' 37' 33' 35' 37' 46' 51' 60' 66' 83' 78' 83' 95' 110' 102' 110' 133' 125' 129' 133 }' new int[] { 1' 0' 1' 1' 1' 1' 0' 1' 1' 1' 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestBoth,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "a b c d"' "a"' "b"' "c"' "d"' "e f g"' "e"' "f"' "g"' "link"' "here"' "link"' "there"' "italics here"' "italics"' "here"' "something"' "more italics"' "more"' "italics"' "h   i   j"' "h"' "i"' "j" }' new int[] { 11' 11' 13' 15' 17' 32' 32' 34' 36' 42' 47' 56' 61' 71' 71' 79' 86' 98' 98' 103' 124' 124' 128' 132 }' new int[] { 18' 12' 14' 16' 18' 37' 33' 35' 37' 46' 51' 60' 66' 83' 78' 83' 95' 110' 102' 110' 133' 125' 129' 133 }' new int[] { 1' 0' 1' 1' 1' 1' 0' 1' 1' 1' 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestBoth,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "a b c d"' "a"' "b"' "c"' "d"' "e f g"' "e"' "f"' "g"' "link"' "here"' "link"' "there"' "italics here"' "italics"' "here"' "something"' "more italics"' "more"' "italics"' "h   i   j"' "h"' "i"' "j" }' new int[] { 11' 11' 13' 15' 17' 32' 32' 34' 36' 42' 47' 56' 61' 71' 71' 79' 86' 98' 98' 103' 124' 124' 128' 132 }' new int[] { 18' 12' 14' 16' 18' 37' 33' 35' 37' 46' 51' 60' 66' 83' 78' 83' 95' 110' 102' 110' 133' 125' 129' 133 }' new int[] { 1' 0' 1' 1' 1' 1' 0' 1' 1' 1' 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestBoth,The following statement contains a magic number: AssertTokenStreamContents(tf' new string[] { "a b c d"' "a"' "b"' "c"' "d"' "e f g"' "e"' "f"' "g"' "link"' "here"' "link"' "there"' "italics here"' "italics"' "here"' "something"' "more italics"' "more"' "italics"' "h   i   j"' "h"' "i"' "j" }' new int[] { 11' 11' 13' 15' 17' 32' 32' 34' 36' 42' 47' 56' 61' 71' 71' 79' 86' 98' 98' 103' 124' 124' 128' 132 }' new int[] { 18' 12' 14' 16' 18' 37' 33' 35' 37' 46' 51' 60' 66' 83' 78' 83' 95' 110' 102' 110' 133' 125' 129' 133 }' new int[] { 1' 0' 1' 1' 1' 1' 0' 1' 1' 1' 1' 1' 1' 1' 0' 1' 1' 1' 0' 1' 1' 0' 1' 1 });
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestRandomStrings,The following statement contains a magic number: CheckRandomData(Random' a' 1000 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestRandomHugeStrings,The following statement contains a magic number: CheckRandomData(random' a' 100 * RANDOM_MULTIPLIER' 8192);
Magic Number,Lucene.Net.Analysis.Wikipedia,WikipediaTokenizerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Analysis.Common\Analysis\Wikipedia\WikipediaTokenizerTest.cs,TestRandomHugeStrings,The following statement contains a magic number: CheckRandomData(random' a' 100 * RANDOM_MULTIPLIER' 8192);
