Implementation smell,Namespace,Class,File,Method,Description
Long Method,Lucene.Net.Codecs.Memory,MemoryDocValuesConsumer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\MemoryDocValuesConsumer.cs,AddNumericField,The method has 106 lines of code.
Complex Method,Lucene.Net.Codecs.BlockTerms,FixedGapTermsIndexReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\BlockTerms\FixedGapTermsIndexReader.cs,FixedGapTermsIndexReader,Cyclomatic complexity of the method is 9
Complex Method,Lucene.Net.Codecs.Memory,DirectDocValuesConsumer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\DirectDocValuesConsumer.cs,AddNumericFieldValues,Cyclomatic complexity of the method is 20
Complex Method,Lucene.Net.Codecs.Memory,DirectDocValuesProducer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\DirectDocValuesProducer.cs,LoadNumeric,Cyclomatic complexity of the method is 13
Complex Method,Lucene.Net.Codecs.Memory,DirectDocValuesProducer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\DirectDocValuesProducer.cs,GetDocsWithField,Cyclomatic complexity of the method is 8
Complex Method,Lucene.Net.Codecs.Memory,FSTTermOutputs,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\FSTTermOutputs.cs,Common,Cyclomatic complexity of the method is 8
Complex Method,Lucene.Net.Codecs.Memory,FSTTermOutputs,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\FSTTermOutputs.cs,Write,Cyclomatic complexity of the method is 9
Complex Method,Lucene.Net.Codecs.Memory,FSTTermOutputs,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\FSTTermOutputs.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,Lucene.Net.Codecs.Memory,MemoryDocValuesConsumer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\MemoryDocValuesConsumer.cs,AddNumericField,Cyclomatic complexity of the method is 19
Complex Method,Lucene.Net.Codecs.Memory,MemoryDocValuesConsumer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\MemoryDocValuesConsumer.cs,AddBinaryField,Cyclomatic complexity of the method is 9
Complex Method,Lucene.Net.Codecs.Memory,MemoryDocValuesProducer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\MemoryDocValuesProducer.cs,ReadFields,Cyclomatic complexity of the method is 15
Complex Method,Lucene.Net.Codecs.Memory,MemoryDocValuesProducer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\MemoryDocValuesProducer.cs,LoadNumeric,Cyclomatic complexity of the method is 27
Complex Method,Lucene.Net.Codecs.Memory,MemoryDocValuesProducer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\MemoryDocValuesProducer.cs,GetDocsWithField,Cyclomatic complexity of the method is 8
Complex Method,Lucene.Net.Codecs.Pulsing,PulsingPostingsWriter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Pulsing\PulsingPostingsWriter.cs,FinishTerm,Cyclomatic complexity of the method is 16
Complex Method,Lucene.Net.Codecs.Sep,SepPostingsReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Sep\SepPostingsReader.cs,DecodeTerm,Cyclomatic complexity of the method is 8
Complex Method,Lucene.Net.Codecs.Sep,SepPostingsWriter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Sep\SepPostingsWriter.cs,EncodeTerm,Cyclomatic complexity of the method is 8
Complex Method,Lucene.Net.Codecs.SimpleText,SimpleTextDocValuesWriter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\SimpleText\SimpleTextDocValuesWriter.cs,AddSortedSetField,Cyclomatic complexity of the method is 13
Complex Method,Lucene.Net.Codecs.SimpleText,SimpleTextStoredFieldsReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\SimpleText\SimpleTextStoredFieldsReader.cs,VisitDocument,Cyclomatic complexity of the method is 15
Complex Method,Lucene.Net.Codecs.SimpleText,SimpleTextStoredFieldsWriter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\SimpleText\SimpleTextStoredFieldsWriter.cs,WriteField,Cyclomatic complexity of the method is 8
Complex Method,Lucene.Net.Codecs.SimpleText,SimpleTextTermVectorsReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\SimpleText\SimpleTextTermVectorsReader.cs,Get,Cyclomatic complexity of the method is 13
Long Parameter List,Lucene.Net.Codecs.Appending,AppendingTermsReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Appending\AppendingTermsReader.cs,AppendingTermsReader,The method has 7 parameters.
Long Parameter List,Lucene.Net.Codecs.BlockTerms,BlockTermsReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\BlockTerms\BlockTermsReader.cs,BlockTermsReader,The method has 7 parameters.
Long Parameter List,Lucene.Net.Codecs.BlockTerms,FixedGapTermsIndexReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\BlockTerms\FixedGapTermsIndexReader.cs,FixedGapTermsIndexReader,The method has 7 parameters.
Long Parameter List,Lucene.Net.Codecs.BlockTerms,VariableGapTermsIndexReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\BlockTerms\VariableGapTermsIndexReader.cs,VariableGapTermsIndexReader,The method has 6 parameters.
Long Parameter List,Lucene.Net.Codecs.DiskDV,DiskDocValuesProducer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\DiskDV\DiskDocValuesProducer.cs,DiskDocValuesProducer,The method has 5 parameters.
Long Parameter List,Lucene.Net.Codecs.Memory,DirectDocValuesConsumer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\DirectDocValuesConsumer.cs,DirectDocValuesConsumer,The method has 5 parameters.
Long Parameter List,Lucene.Net.Codecs.Memory,DirectDocValuesProducer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\DirectDocValuesProducer.cs,DirectDocValuesProducer,The method has 5 parameters.
Long Parameter List,Lucene.Net.Codecs.Memory,FSTOrdTermsReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\FSTOrdTermsReader.cs,CheckFieldSummary,The method has 5 parameters.
Long Parameter List,Lucene.Net.Codecs.Memory,MemoryDocValuesConsumer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\MemoryDocValuesConsumer.cs,MemoryDocValuesConsumer,The method has 6 parameters.
Long Parameter List,Lucene.Net.Codecs.Memory,MemoryDocValuesProducer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\MemoryDocValuesProducer.cs,MemoryDocValuesProducer,The method has 5 parameters.
Long Parameter List,Lucene.Net.Codecs.Pulsing,PulsingPostingsReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Pulsing\PulsingPostingsReader.cs,DecodeTerm,The method has 5 parameters.
Long Parameter List,Lucene.Net.Codecs.Pulsing,PulsingPostingsReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Pulsing\PulsingPostingsReader.cs,Docs,The method has 5 parameters.
Long Parameter List,Lucene.Net.Codecs.Pulsing,PulsingPostingsReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Pulsing\PulsingPostingsReader.cs,DocsAndPositions,The method has 5 parameters.
Long Parameter List,Lucene.Net.Codecs.Pulsing,PulsingPostingsWriter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Pulsing\PulsingPostingsWriter.cs,EncodeTerm,The method has 5 parameters.
Long Parameter List,Lucene.Net.Codecs.Sep,SepPostingsReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Sep\SepPostingsReader.cs,SepPostingsReader,The method has 6 parameters.
Long Parameter List,Lucene.Net.Codecs.Sep,SepPostingsReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Sep\SepPostingsReader.cs,DecodeTerm,The method has 5 parameters.
Long Parameter List,Lucene.Net.Codecs.Sep,SepPostingsReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Sep\SepPostingsReader.cs,Docs,The method has 5 parameters.
Long Parameter List,Lucene.Net.Codecs.Sep,SepPostingsReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Sep\SepPostingsReader.cs,DocsAndPositions,The method has 5 parameters.
Long Parameter List,Lucene.Net.Codecs.Sep,SepPostingsWriter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Sep\SepPostingsWriter.cs,EncodeTerm,The method has 5 parameters.
Long Parameter List,Lucene.Net.Codecs.Sep,SepSkipListReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Sep\SepSkipListReader.cs,SepSkipListReader,The method has 6 parameters.
Long Parameter List,Lucene.Net.Codecs.Sep,SepSkipListReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Sep\SepSkipListReader.cs,Init,The method has 7 parameters.
Long Parameter List,Lucene.Net.Codecs.Sep,SepSkipListWriter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Sep\SepSkipListWriter.cs,SepSkipListWriter,The method has 7 parameters.
Long Parameter List,Lucene.Net.Codecs.SimpleText,SimpleTextFieldInfosWriter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\SimpleText\SimpleTextFieldInfosWriter.cs,Write,The method has 5 parameters.
Long Parameter List,Lucene.Net.Codecs.SimpleText,SimpleTextLiveDocsFormat,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\SimpleText\SimpleTextLiveDocsFormat.cs,WriteLiveDocs,The method has 5 parameters.
Long Parameter List,Lucene.Net.Codecs.SimpleText,SimpleTextTermVectorsWriter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\SimpleText\SimpleTextTermVectorsWriter.cs,StartField,The method has 5 parameters.
Long Statement,Lucene.Net.Codecs.Appending,AppendingPostingsFormat,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Appending\AppendingPostingsFormat.cs,FieldsProducer,The length of the statement  "	using (var postings = new Lucene40PostingsReader (state.Directory' state.FieldInfos' state.SegmentInfo' state.Context' state.SegmentSuffix)) { " is 142.
Long Statement,Lucene.Net.Codecs.Appending,AppendingPostingsFormat,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Appending\AppendingPostingsFormat.cs,FieldsProducer,The length of the statement  "		var ret = new AppendingTermsReader (state.Directory' state.FieldInfos' state.SegmentInfo' postings' state.Context' state.SegmentSuffix' state.TermsIndexDivisor); " is 161.
Long Statement,Lucene.Net.Codecs.Appending,AppendingTermsReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Appending\AppendingTermsReader.cs,ReadHeader,The length of the statement  "	return CodecUtil.CheckHeader (input' APPENDING_TERMS_CODEC_NAME' BlockTreeTermsWriter.VERSION_START' BlockTreeTermsWriter.VERSION_CURRENT); " is 139.
Long Statement,Lucene.Net.Codecs.Appending,AppendingTermsReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Appending\AppendingTermsReader.cs,ReadIndexHeader,The length of the statement  "	return CodecUtil.CheckHeader (input' APPENDING_TERMS_INDEX_CODEC_NAME' BlockTreeTermsWriter.VERSION_START' BlockTreeTermsWriter.VERSION_CURRENT); " is 145.
Long Statement,Lucene.Net.Codecs.BlockTerms,BlockTermsReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\BlockTerms\BlockTermsReader.cs,ReadHeader,The length of the statement  "	int version = CodecUtil.CheckHeader (input' BlockTermsWriter.CODEC_NAME' BlockTermsWriter.VERSION_START' BlockTermsWriter.VERSION_CURRENT); " is 139.
Long Statement,Lucene.Net.Codecs.BlockTerms,FixedGapTermsIndexReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\BlockTerms\FixedGapTermsIndexReader.cs,ReadHeader,The length of the statement  "	int version = CodecUtil.CheckHeader (input' FixedGapTermsIndexWriter.CODEC_NAME' FixedGapTermsIndexWriter.VERSION_START' FixedGapTermsIndexWriter.VERSION_CURRENT); " is 163.
Long Statement,Lucene.Net.Codecs.BlockTerms,FixedGapTermsIndexReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\BlockTerms\FixedGapTermsIndexReader.cs,RamBytesUsed,The length of the statement  "	long sizeInBytes = ((termBytes != null) ? termBytes.RamBytesUsed () : 0) + ((termBytesReader != null) ? termBytesReader.RamBytesUsed () : 0); " is 141.
Long Statement,Lucene.Net.Codecs.BlockTerms,VariableGapTermsIndexReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\BlockTerms\VariableGapTermsIndexReader.cs,ReadHeader,The length of the statement  "	int version = CodecUtil.CheckHeader (input' VariableGapTermsIndexWriter.CODEC_NAME' VariableGapTermsIndexWriter.VERSION_START' VariableGapTermsIndexWriter.VERSION_CURRENT); " is 172.
Long Statement,Lucene.Net.Codecs.Bloom,FuzzySet,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Bloom\FuzzySet.cs,Downsize,The length of the statement  "	//Hopefully find a smaller size bitset into which we can project accumulated values while maintaining desired saturation level " is 126.
Long Statement,Lucene.Net.Codecs.DiskDV,DiskDocValuesProducer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\DiskDV\DiskDocValuesProducer.cs,GetAddressInstance,The length of the statement  "	return new MonotonicBlockPackedReader ((IndexInput)data.Clone ()' bytes.PackedInt32sVersion' bytes.BlockSize' bytes.Count' true); " is 129.
Long Statement,Lucene.Net.Codecs.DiskDV,DiskDocValuesProducer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\DiskDV\DiskDocValuesProducer.cs,GetOrdIndexInstance,The length of the statement  "	return new MonotonicBlockPackedReader ((IndexInput)data.Clone ()' entry.PackedInt32sVersion' entry.BlockSize' entry.Count' true); " is 129.
Long Statement,Lucene.Net.Codecs.Memory,DirectDocValuesConsumer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\DirectDocValuesConsumer.cs,AddNumericFieldValues,The length of the statement  "			throw new ArgumentException ("DocValuesField \"" + field.Name + "\" is too large' must be <= " + DirectDocValuesFormat.MAX_SORTED_SET_ORDS + " values/total ords"); " is 163.
Long Statement,Lucene.Net.Codecs.Memory,DirectDocValuesConsumer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\DirectDocValuesConsumer.cs,AddBinaryFieldValues,The length of the statement  "				throw new ArgumentException ("DocValuesField \"" + field.Name + "\" is too large' cannot have more than DirectDocValuesFormat.MAX_TOTAL_BYTES_LENGTH (" + DirectDocValuesFormat.MAX_TOTAL_BYTES_LENGTH + ") bytes"); " is 212.
Long Statement,Lucene.Net.Codecs.Memory,FSTOrdPostingsFormat,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\FSTOrdPostingsFormat.cs,FieldsProducer,The length of the statement  "	PostingsReaderBase postingsReader = new Lucene41PostingsReader (state.Directory' state.FieldInfos' state.SegmentInfo' state.Context' state.SegmentSuffix); " is 154.
Long Statement,Lucene.Net.Codecs.Memory,FSTOrdTermsReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\FSTOrdTermsReader.cs,ReadHeader,The length of the statement  "	return CodecUtil.CheckHeader (@in' FSTOrdTermsWriter.TERMS_CODEC_NAME' FSTOrdTermsWriter.TERMS_VERSION_START' FSTOrdTermsWriter.TERMS_VERSION_CURRENT); " is 151.
Long Statement,Lucene.Net.Codecs.Memory,FSTOrdTermsReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\FSTOrdTermsReader.cs,CheckFieldSummary,The length of the statement  "		throw new CorruptIndexException ("invalid docCount: " + field.docCount + " maxDoc: " + info.DocCount + " (resource=" + indexIn + "' " + blockIn + ")"); " is 151.
Long Statement,Lucene.Net.Codecs.Memory,FSTOrdTermsReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\FSTOrdTermsReader.cs,CheckFieldSummary,The length of the statement  "		throw new CorruptIndexException ("invalid sumDocFreq: " + field.sumDocFreq + " docCount: " + field.docCount + " (resource=" + indexIn + "' " + blockIn + ")"); " is 158.
Long Statement,Lucene.Net.Codecs.Memory,FSTOrdTermsReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\FSTOrdTermsReader.cs,CheckFieldSummary,The length of the statement  "		throw new CorruptIndexException ("invalid sumTotalTermFreq: " + field.sumTotalTermFreq + " sumDocFreq: " + field.sumDocFreq + " (resource=" + indexIn + "' " + blockIn + ")"); " is 174.
Long Statement,Lucene.Net.Codecs.Memory,FSTOrdTermsReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\FSTOrdTermsReader.cs,CheckFieldSummary,The length of the statement  "		throw new CorruptIndexException ("duplicate fields: " + field.fieldInfo.Name + " (resource=" + indexIn + "' " + blockIn + ")"); " is 127.
Long Statement,Lucene.Net.Codecs.Memory,FSTPostingsFormat,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\FSTPostingsFormat.cs,FieldsProducer,The length of the statement  "	PostingsReaderBase postingsReader = new Lucene41PostingsReader (state.Directory' state.FieldInfos' state.SegmentInfo' state.Context' state.SegmentSuffix); " is 154.
Long Statement,Lucene.Net.Codecs.Memory,FSTTermsReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\FSTTermsReader.cs,ReadHeader,The length of the statement  "	return CodecUtil.CheckHeader (@in' FSTTermsWriter.TERMS_CODEC_NAME' FSTTermsWriter.TERMS_VERSION_START' FSTTermsWriter.TERMS_VERSION_CURRENT); " is 142.
Long Statement,Lucene.Net.Codecs.Memory,FSTTermsReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\FSTTermsReader.cs,CheckFieldSummary,The length of the statement  "		throw new CorruptIndexException ("invalid docCount: " + field.docCount + " maxDoc: " + info.DocCount + " (resource=" + @in + ")"); " is 130.
Long Statement,Lucene.Net.Codecs.Memory,FSTTermsReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\FSTTermsReader.cs,CheckFieldSummary,The length of the statement  "		throw new CorruptIndexException ("invalid sumDocFreq: " + field.sumDocFreq + " docCount: " + field.docCount + " (resource=" + @in + ")"); " is 137.
Long Statement,Lucene.Net.Codecs.Memory,FSTTermsReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\FSTTermsReader.cs,CheckFieldSummary,The length of the statement  "		throw new CorruptIndexException ("invalid sumTotalTermFreq: " + field.sumTotalTermFreq + " sumDocFreq: " + field.sumDocFreq + " (resource=" + @in + ")"); " is 153.
Long Statement,Lucene.Net.Codecs.Memory,MemoryDocValuesConsumer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\MemoryDocValuesConsumer.cs,AddNumericField,The length of the statement  "			PackedInt32s.Writer writer = PackedInt32s.GetWriterNoHeader (data' formatAndBits.Format' maxDoc' formatAndBits.BitsPerValue' PackedInt32s.DEFAULT_BUFFER_SIZE); " is 159.
Long Statement,Lucene.Net.Codecs.Memory,MemoryDocValuesConsumer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\MemoryDocValuesConsumer.cs,AddBinaryField,The length of the statement  "			throw new ArgumentException ("DocValuesField \"" + field.Name + "\" is too large' must be <= " + MemoryDocValuesFormat.MAX_BINARY_FIELD_LENGTH); " is 144.
Long Statement,Lucene.Net.Codecs.Memory,MemoryDocValuesFormat,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\MemoryDocValuesFormat.cs,FieldsConsumer,The length of the statement  "	return new MemoryDocValuesConsumer (state' DATA_CODEC' DATA_EXTENSION' METADATA_CODEC' METADATA_EXTENSION' acceptableOverheadRatio); " is 132.
Long Statement,Lucene.Net.Codecs.Memory,MemoryDocValuesProducer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\MemoryDocValuesProducer.cs,LoadNumeric,The length of the statement  "		var ordsReader = PackedInt32s.GetReaderNoHeader (data' PackedInt32s.Format.ById (formatID)' entry.packedIntsVersion' maxDoc' bitsPerValue); " is 139.
Long Statement,Lucene.Net.Codecs.Memory,MemoryDocValuesProducer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\MemoryDocValuesProducer.cs,GetSorted,The length of the statement  "	return new SortedDocValuesAnonymousInnerClassHelper (entry' docToOrd' fst' @in' firstArc' scratchArc' scratchInts' fstEnum); " is 124.
Long Statement,Lucene.Net.Codecs.Memory,MemoryDocValuesProducer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\MemoryDocValuesProducer.cs,GetSortedSet,The length of the statement  "	return new SortedSetDocValuesAnonymousInnerClassHelper (entry' docToOrds' fst' @in' firstArc' scratchArc' scratchInts' fstEnum' @ref' input); " is 141.
Long Statement,Lucene.Net.Codecs.Pulsing,PulsingPostingsFormat,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Pulsing\PulsingPostingsFormat.cs,ToString,The length of the statement  "	return string.Format ("{0} (freqCutoff={1}' minBlockSize={2}' maxBlockSize={3})"' Name' _freqCutoff' _minBlockSize' _maxBlockSize); " is 131.
Long Statement,Lucene.Net.Codecs.Pulsing,PulsingPostingsFormat,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Pulsing\PulsingPostingsFormat.cs,FieldsProducer,The length of the statement  "		FieldsProducer ret = new BlockTreeTermsReader (state.Directory' state.FieldInfos' state.SegmentInfo' pulsingReader' state.Context' state.SegmentSuffix' state.TermsIndexDivisor); " is 177.
Long Statement,Lucene.Net.Codecs.Pulsing,PulsingPostingsReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Pulsing\PulsingPostingsReader.cs,Init,The length of the statement  "	_version = CodecUtil.CheckHeader (termsIn' PulsingPostingsWriter.CODEC' PulsingPostingsWriter.VERSION_START' PulsingPostingsWriter.VERSION_CURRENT); " is 148.
Long Statement,Lucene.Net.Codecs.Pulsing,PulsingPostingsReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Pulsing\PulsingPostingsReader.cs,Init,The length of the statement  "		var summaryFileName = IndexFileNames.SegmentFileName (_segmentState.SegmentInfo.Name' _segmentState.SegmentSuffix' PulsingPostingsWriter.SUMMARY_EXTENSION); " is 156.
Long Statement,Lucene.Net.Codecs.Pulsing,PulsingPostingsReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Pulsing\PulsingPostingsReader.cs,DecodeTerm,The length of the statement  "	long count = fieldInfo.IndexOptions.CompareTo (IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 ? termState2.TotalTermFreq : termState2.DocFreq; " is 143.
Long Statement,Lucene.Net.Codecs.Pulsing,PulsingPostingsReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Pulsing\PulsingPostingsReader.cs,DecodeTerm,The length of the statement  "		_wrappedPostingsReader.DecodeTerm (termState2.Int64s' input' fieldInfo' termState2.WrappedTermState' termState2.Absolute); " is 122.
Long Statement,Lucene.Net.Codecs.Pulsing,PulsingPostingsReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Pulsing\PulsingPostingsReader.cs,DocsAndPositions,The length of the statement  "	var wrapped = _wrappedPostingsReader.DocsAndPositions (field' termState2.WrappedTermState' liveDocs' (DocsAndPositionsEnum)GetOther (reuse)' flags); " is 148.
Long Statement,Lucene.Net.Codecs.Pulsing,PulsingPostingsWriter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Pulsing\PulsingPostingsWriter.cs,Dispose,The length of the statement  "	var summaryFileName = IndexFileNames.SegmentFileName (_segmentState.SegmentInfo.Name' _segmentState.SegmentSuffix' SUMMARY_EXTENSION); " is 134.
Long Statement,Lucene.Net.Codecs.Sep,SepPostingsReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Sep\SepPostingsReader.cs,Init,The length of the statement  "	CodecUtil.CheckHeader (termsIn' SepPostingsWriter.CODEC' SepPostingsWriter.VERSION_START' SepPostingsWriter.VERSION_START); " is 123.
Long Statement,Lucene.Net.Codecs.SimpleText,SimpleTextDocValuesWriter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\SimpleText\SimpleTextDocValuesWriter.cs,AddSortedField,The length of the statement  "		SimpleTextUtil.Write (data' (ord + 1).GetValueOrDefault ().ToString (ordEncoderFormat' CultureInfo.InvariantCulture)' scratch); " is 127.
Long Statement,Lucene.Net.Codecs.SimpleText,SimpleTextFieldInfosReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\SimpleText\SimpleTextFieldInfosReader.cs,Read,The length of the statement  "	var fileName = IndexFileNames.SegmentFileName (segmentName' segmentSuffix' SimpleTextFieldInfosWriter.FIELD_INFOS_EXTENSION); " is 125.
Long Statement,Lucene.Net.Codecs.SimpleText,SimpleTextFieldInfosReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\SimpleText\SimpleTextFieldInfosReader.cs,Read,The length of the statement  "		var size = Convert.ToInt32 (ReadString (SimpleTextFieldInfosWriter.NUMFIELDS.Length' scratch)' CultureInfo.InvariantCulture); " is 125.
Long Statement,Lucene.Net.Codecs.SimpleText,SimpleTextFieldInfosReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\SimpleText\SimpleTextFieldInfosReader.cs,Read,The length of the statement  "			int fieldNumber = Convert.ToInt32 (ReadString (SimpleTextFieldInfosWriter.NUMBER.Length' scratch)' CultureInfo.InvariantCulture); " is 129.
Long Statement,Lucene.Net.Codecs.SimpleText,SimpleTextFieldInfosReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\SimpleText\SimpleTextFieldInfosReader.cs,Read,The length of the statement  "			bool isIndexed = Convert.ToBoolean (ReadString (SimpleTextFieldInfosWriter.ISINDEXED.Length' scratch)' CultureInfo.InvariantCulture); " is 133.
Long Statement,Lucene.Net.Codecs.SimpleText,SimpleTextFieldInfosReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\SimpleText\SimpleTextFieldInfosReader.cs,Read,The length of the statement  "				indexOptions = (IndexOptions)Enum.Parse (typeof(IndexOptions)' ReadString (SimpleTextFieldInfosWriter.INDEXOPTIONS.Length' scratch)); " is 133.
Long Statement,Lucene.Net.Codecs.SimpleText,SimpleTextFieldInfosReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\SimpleText\SimpleTextFieldInfosReader.cs,Read,The length of the statement  "			bool storeTermVector = Convert.ToBoolean (ReadString (SimpleTextFieldInfosWriter.STORETV.Length' scratch)' CultureInfo.InvariantCulture); " is 137.
Long Statement,Lucene.Net.Codecs.SimpleText,SimpleTextFieldInfosReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\SimpleText\SimpleTextFieldInfosReader.cs,Read,The length of the statement  "			bool storePayloads = Convert.ToBoolean (ReadString (SimpleTextFieldInfosWriter.PAYLOADS.Length' scratch)' CultureInfo.InvariantCulture); " is 136.
Long Statement,Lucene.Net.Codecs.SimpleText,SimpleTextFieldInfosReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\SimpleText\SimpleTextFieldInfosReader.cs,Read,The length of the statement  "			bool omitNorms = !Convert.ToBoolean (ReadString (SimpleTextFieldInfosWriter.NORMS.Length' scratch)' CultureInfo.InvariantCulture); " is 130.
Long Statement,Lucene.Net.Codecs.SimpleText,SimpleTextFieldInfosReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\SimpleText\SimpleTextFieldInfosReader.cs,Read,The length of the statement  "			long dvGen = Convert.ToInt64 (ReadString (SimpleTextFieldInfosWriter.DOCVALUES_GEN.Length' scratch)' CultureInfo.InvariantCulture); " is 131.
Long Statement,Lucene.Net.Codecs.SimpleText,SimpleTextFieldInfosReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\SimpleText\SimpleTextFieldInfosReader.cs,Read,The length of the statement  "			int numAtts = Convert.ToInt32 (ReadString (SimpleTextFieldInfosWriter.NUM_ATTS.Length' scratch)' CultureInfo.InvariantCulture); " is 127.
Long Statement,Lucene.Net.Codecs.SimpleText,SimpleTextFieldInfosReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\SimpleText\SimpleTextFieldInfosReader.cs,Read,The length of the statement  "			infos [i] = new FieldInfo (name' isIndexed' fieldNumber' storeTermVector' omitNorms' storePayloads' indexOptions' docValuesType' normsType' new ReadOnlyDictionary<string' string> (atts)) { " is 188.
Long Statement,Lucene.Net.Codecs.SimpleText,SimpleTextFieldInfosReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\SimpleText\SimpleTextFieldInfosReader.cs,DocValuesType,The length of the statement  "	return "false".Equals (dvType) ? Index.DocValuesType.NONE : (Index.DocValuesType)Enum.Parse (typeof(Index.DocValuesType)' dvType' true); " is 136.
Long Statement,Lucene.Net.Codecs.SimpleText,SimpleTextFieldInfosWriter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\SimpleText\SimpleTextFieldInfosWriter.cs,Write,The length of the statement  "				SimpleTextUtil.Write (output' fi.IndexOptions != IndexOptions.NONE ? fi.IndexOptions.ToString () : string.Empty' scratch); " is 122.
Long Statement,Lucene.Net.Codecs.SimpleText,SimpleTextFieldsReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\SimpleText\SimpleTextFieldsReader.cs,ReadFields,The length of the statement  "			var fieldName = Encoding.UTF8.GetString (scratch.Bytes' scratch.Offset + SimpleTextFieldsWriter.FIELD.Length' scratch.Length - SimpleTextFieldsWriter.FIELD.Length); " is 164.
Long Statement,Lucene.Net.Codecs.SimpleText,SimpleTextSegmentInfoReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\SimpleText\SimpleTextSegmentInfoReader.cs,Read,The length of the statement  "		int docCount = Convert.ToInt32 (ReadString (SimpleTextSegmentInfoWriter.SI_DOCCOUNT.Length' scratch)' CultureInfo.InvariantCulture); " is 132.
Long Statement,Lucene.Net.Codecs.SimpleText,SimpleTextSegmentInfoReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\SimpleText\SimpleTextSegmentInfoReader.cs,Read,The length of the statement  "		bool isCompoundFile = Convert.ToBoolean (ReadString (SimpleTextSegmentInfoWriter.SI_USECOMPOUND.Length' scratch)' CultureInfo.InvariantCulture); " is 144.
Long Statement,Lucene.Net.Codecs.SimpleText,SimpleTextSegmentInfoReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\SimpleText\SimpleTextSegmentInfoReader.cs,Read,The length of the statement  "		int numDiag = Convert.ToInt32 (ReadString (SimpleTextSegmentInfoWriter.SI_NUM_DIAG.Length' scratch)' CultureInfo.InvariantCulture); " is 131.
Long Statement,Lucene.Net.Codecs.SimpleText,SimpleTextSegmentInfoReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\SimpleText\SimpleTextSegmentInfoReader.cs,Read,The length of the statement  "		int numFiles = Convert.ToInt32 (ReadString (SimpleTextSegmentInfoWriter.SI_NUM_FILES.Length' scratch)' CultureInfo.InvariantCulture); " is 133.
Long Statement,Lucene.Net.Codecs.SimpleText,SimpleTextSegmentInfoWriter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\SimpleText\SimpleTextSegmentInfoWriter.cs,Write,The length of the statement  "		SimpleTextUtil.Write (output' Convert.ToString (si.UseCompoundFile' CultureInfo.InvariantCulture).ToLowerInvariant ()' scratch); " is 128.
Long Statement,Lucene.Net.Codecs.SimpleText,SimpleTextStoredFieldsReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\SimpleText\SimpleTextStoredFieldsReader.cs,ReadField,The length of the statement  "		visitor.StringField (fieldInfo' Encoding.UTF8.GetString (_scratch.Bytes' _scratch.Offset + SimpleTextStoredFieldsWriter.VALUE.Length' _scratch.Length - SimpleTextStoredFieldsWriter.VALUE.Length)); " is 196.
Long Statement,Lucene.Net.Codecs.SimpleText,SimpleTextStoredFieldsReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\SimpleText\SimpleTextStoredFieldsReader.cs,ReadField,The length of the statement  "		UnicodeUtil.UTF8toUTF16 (_scratch.Bytes' _scratch.Offset + SimpleTextStoredFieldsWriter.VALUE.Length' _scratch.Length - SimpleTextStoredFieldsWriter.VALUE.Length' _scratchUtf16); " is 178.
Long Statement,Lucene.Net.Codecs.SimpleText,SimpleTextStoredFieldsReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\SimpleText\SimpleTextStoredFieldsReader.cs,ReadField,The length of the statement  "		UnicodeUtil.UTF8toUTF16 (_scratch.Bytes' _scratch.Offset + SimpleTextStoredFieldsWriter.VALUE.Length' _scratch.Length - SimpleTextStoredFieldsWriter.VALUE.Length' _scratchUtf16); " is 178.
Long Statement,Lucene.Net.Codecs.SimpleText,SimpleTextStoredFieldsReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\SimpleText\SimpleTextStoredFieldsReader.cs,ReadField,The length of the statement  "		UnicodeUtil.UTF8toUTF16 (_scratch.Bytes' _scratch.Offset + SimpleTextStoredFieldsWriter.VALUE.Length' _scratch.Length - SimpleTextStoredFieldsWriter.VALUE.Length' _scratchUtf16); " is 178.
Long Statement,Lucene.Net.Codecs.SimpleText,SimpleTextStoredFieldsReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\SimpleText\SimpleTextStoredFieldsReader.cs,ReadField,The length of the statement  "		UnicodeUtil.UTF8toUTF16 (_scratch.Bytes' _scratch.Offset + SimpleTextStoredFieldsWriter.VALUE.Length' _scratch.Length - SimpleTextStoredFieldsWriter.VALUE.Length' _scratchUtf16); " is 178.
Long Statement,Lucene.Net.Codecs.SimpleText,SimpleTextStoredFieldsReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\SimpleText\SimpleTextStoredFieldsReader.cs,EqualsAt,The length of the statement  "	return a.Length == b.Length - bOffset && ArrayUtil.Equals (a.Bytes' a.Offset' b.Bytes' b.Offset + bOffset' b.Length - bOffset); " is 127.
Long Statement,Lucene.Net.Codecs.SimpleText,SimpleTextStoredFieldsWriter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\SimpleText\SimpleTextStoredFieldsWriter.cs,WriteField,The length of the statement  "			throw new ArgumentException ("field " + field.Name + " is stored but does not have binaryValue' stringValue nor numericValue"); " is 127.
Long Statement,Lucene.Net.Codecs.SimpleText,SimpleTextStoredFieldsWriter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\SimpleText\SimpleTextStoredFieldsWriter.cs,Finish,The length of the statement  "		throw new Exception ("mergeFields produced an invalid result: docCount is " + numDocs + " but only saw " + _numDocsWritten + " file=" + _output + "; now aborting this merge to prevent index corruption"); " is 203.
Long Statement,Lucene.Net.Codecs.SimpleText,SimpleTextTermVectorsReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\SimpleText\SimpleTextTermVectorsReader.cs,Get,The length of the statement  "		var positions = Convert.ToBoolean (ReadString (SimpleTextTermVectorsWriter.FIELDPOSITIONS.Length' _scratch)' CultureInfo.InvariantCulture); " is 139.
Long Statement,Lucene.Net.Codecs.SimpleText,SimpleTextTermVectorsReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\SimpleText\SimpleTextTermVectorsReader.cs,Get,The length of the statement  "		var offsets = Convert.ToBoolean (ReadString (SimpleTextTermVectorsWriter.FIELDOFFSETS.Length' _scratch)' CultureInfo.InvariantCulture); " is 135.
Long Statement,Lucene.Net.Codecs.SimpleText,SimpleTextTermVectorsReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\SimpleText\SimpleTextTermVectorsReader.cs,Get,The length of the statement  "		var payloads = Convert.ToBoolean (ReadString (SimpleTextTermVectorsWriter.FIELDPAYLOADS.Length' _scratch)' CultureInfo.InvariantCulture); " is 137.
Long Statement,Lucene.Net.Codecs.SimpleText,SimpleTextTermVectorsReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\SimpleText\SimpleTextTermVectorsReader.cs,Get,The length of the statement  "			Array.Copy (_scratch.Bytes' _scratch.Offset + SimpleTextTermVectorsWriter.TERMTEXT.Length' term.Bytes' term.Offset' termLength); " is 128.
Long Statement,Lucene.Net.Codecs.SimpleText,SimpleTextTermVectorsReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\SimpleText\SimpleTextTermVectorsReader.cs,Get,The length of the statement  "							Array.Copy (_scratch.Bytes' _scratch.Offset + SimpleTextTermVectorsWriter.PAYLOAD.Length' payloadBytes' 0' payloadBytes.Length); " is 128.
Long Statement,Lucene.Net.Codecs.SimpleText,SimpleTextTermVectorsWriter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\SimpleText\SimpleTextTermVectorsWriter.cs,Finish,The length of the statement  "		throw new Exception ("mergeVectors produced an invalid result: mergedDocs is " + numDocs + " but vec numDocs is " + _numDocsWritten + " file=" + _output + "; now aborting this merge to prevent index corruption"); " is 212.
Long Statement,Lucene.Net.Codecs.SimpleText,SimpleTextUtil,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\SimpleText\SimpleTextUtil.cs,CheckFooter,The length of the statement  "		throw new CorruptIndexException ("SimpleText failure: expected checksum line but got " + scratch.Utf8ToString () + " (resource=" + input + ")"); " is 144.
Long Statement,Lucene.Net.Codecs.SimpleText,SimpleTextUtil,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\SimpleText\SimpleTextUtil.cs,CheckFooter,The length of the statement  "		throw new CorruptIndexException ("SimpleText checksum failure: " + actualChecksum + " != " + expectedChecksum + " (resource=" + input + ")"); " is 141.
Long Statement,Lucene.Net.Codecs.SimpleText,SimpleTextUtil,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\SimpleText\SimpleTextUtil.cs,CheckFooter,The length of the statement  "		throw new CorruptIndexException ("Unexpected stuff at the end of file' please be careful with your text editor! (resource=" + input + ")"); " is 139.
Virtual Method Call from Constructor,Lucene.Net.Codecs.Sep,SepPostingsReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Sep\SepPostingsReader.cs,SepPostingsReader,The constructor "SepPostingsReader" calls a virtual method "OpenInput".
Virtual Method Call from Constructor,Lucene.Net.Codecs.Sep,SepPostingsReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Sep\SepPostingsReader.cs,SepPostingsReader,The constructor "SepPostingsReader" calls a virtual method "OpenInput".
Virtual Method Call from Constructor,Lucene.Net.Codecs.Sep,SepPostingsReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Sep\SepPostingsReader.cs,SepPostingsReader,The constructor "SepPostingsReader" calls a virtual method "OpenInput".
Virtual Method Call from Constructor,Lucene.Net.Codecs.Sep,SepPostingsWriter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Sep\SepPostingsWriter.cs,SepPostingsWriter,The constructor "SepPostingsWriter" calls a virtual method "CreateOutput".
Virtual Method Call from Constructor,Lucene.Net.Codecs.Sep,SepPostingsWriter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Sep\SepPostingsWriter.cs,SepPostingsWriter,The constructor "SepPostingsWriter" calls a virtual method "GetIndex".
Virtual Method Call from Constructor,Lucene.Net.Codecs.Sep,SepPostingsWriter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Sep\SepPostingsWriter.cs,SepPostingsWriter,The constructor "SepPostingsWriter" calls a virtual method "CreateOutput".
Virtual Method Call from Constructor,Lucene.Net.Codecs.Sep,SepPostingsWriter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Sep\SepPostingsWriter.cs,SepPostingsWriter,The constructor "SepPostingsWriter" calls a virtual method "GetIndex".
Virtual Method Call from Constructor,Lucene.Net.Codecs.Sep,SepPostingsWriter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Sep\SepPostingsWriter.cs,SepPostingsWriter,The constructor "SepPostingsWriter" calls a virtual method "CreateOutput".
Virtual Method Call from Constructor,Lucene.Net.Codecs.Sep,SepPostingsWriter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Sep\SepPostingsWriter.cs,SepPostingsWriter,The constructor "SepPostingsWriter" calls a virtual method "GetIndex".
Virtual Method Call from Constructor,Lucene.Net.Codecs.Sep,SepSkipListReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Sep\SepSkipListReader.cs,SepSkipListReader,The constructor "SepSkipListReader" calls a virtual method "GetIndex".
Virtual Method Call from Constructor,Lucene.Net.Codecs.Sep,SepSkipListReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Sep\SepSkipListReader.cs,SepSkipListReader,The constructor "SepSkipListReader" calls a virtual method "GetIndex".
Virtual Method Call from Constructor,Lucene.Net.Codecs.Sep,SepSkipListReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Sep\SepSkipListReader.cs,SepSkipListReader,The constructor "SepSkipListReader" calls a virtual method "GetIndex".
Virtual Method Call from Constructor,Lucene.Net.Codecs.Sep,SepSkipListReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Sep\SepSkipListReader.cs,SepSkipListReader,The constructor "SepSkipListReader" calls a virtual method "GetIndex".
Virtual Method Call from Constructor,Lucene.Net.Codecs.Sep,SepSkipListReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Sep\SepSkipListReader.cs,SepSkipListReader,The constructor "SepSkipListReader" calls a virtual method "GetIndex".
Virtual Method Call from Constructor,Lucene.Net.Codecs.Sep,SepSkipListReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Sep\SepSkipListReader.cs,SepSkipListReader,The constructor "SepSkipListReader" calls a virtual method "GetIndex".
Virtual Method Call from Constructor,Lucene.Net.Codecs.Sep,SepSkipListWriter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Sep\SepSkipListWriter.cs,SepSkipListWriter,The constructor "SepSkipListWriter" calls a virtual method "GetIndex".
Virtual Method Call from Constructor,Lucene.Net.Codecs.Sep,SepSkipListWriter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Sep\SepSkipListWriter.cs,SepSkipListWriter,The constructor "SepSkipListWriter" calls a virtual method "GetIndex".
Virtual Method Call from Constructor,Lucene.Net.Codecs.Sep,SepSkipListWriter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Sep\SepSkipListWriter.cs,SepSkipListWriter,The constructor "SepSkipListWriter" calls a virtual method "GetIndex".
Empty Catch Block,Lucene.Net.Codecs.SimpleText,SimpleTextSegmentInfoWriter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\SimpleText\SimpleTextSegmentInfoWriter.cs,Write,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Codecs.SimpleText,SimpleTextStoredFieldsReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\SimpleText\SimpleTextStoredFieldsReader.cs,SimpleTextStoredFieldsReader,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Codecs.SimpleText,SimpleTextTermVectorsReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\SimpleText\SimpleTextTermVectorsReader.cs,SimpleTextTermVectorsReader,The method has an empty catch block.
Magic Number,Lucene.Net.Codecs.Appending,AppendingTermsReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Appending\AppendingTermsReader.cs,SeekDir,The following statement contains a magic number: input.Seek (input.Length - sizeof(long) / 8);  
Magic Number,Lucene.Net.Codecs.BlockTerms,BlockTermsReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\BlockTerms\BlockTermsReader.cs,SeekDir,The following statement contains a magic number: if (version >= BlockTermsWriter.VERSION_CHECKSUM) {  	input.Seek (input.Length - CodecUtil.FooterLength () - 8);  	dirOffset = input.ReadInt64 ();  } else if (version >= BlockTermsWriter.VERSION_APPEND_ONLY) {  	input.Seek (input.Length - 8);  	dirOffset = input.ReadInt64 ();  }  
Magic Number,Lucene.Net.Codecs.BlockTerms,BlockTermsReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\BlockTerms\BlockTermsReader.cs,SeekDir,The following statement contains a magic number: if (version >= BlockTermsWriter.VERSION_CHECKSUM) {  	input.Seek (input.Length - CodecUtil.FooterLength () - 8);  	dirOffset = input.ReadInt64 ();  } else if (version >= BlockTermsWriter.VERSION_APPEND_ONLY) {  	input.Seek (input.Length - 8);  	dirOffset = input.ReadInt64 ();  }  
Magic Number,Lucene.Net.Codecs.BlockTerms,BlockTermsReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\BlockTerms\BlockTermsReader.cs,SeekDir,The following statement contains a magic number: input.Seek (input.Length - CodecUtil.FooterLength () - 8);  
Magic Number,Lucene.Net.Codecs.BlockTerms,BlockTermsReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\BlockTerms\BlockTermsReader.cs,SeekDir,The following statement contains a magic number: if (version >= BlockTermsWriter.VERSION_APPEND_ONLY) {  	input.Seek (input.Length - 8);  	dirOffset = input.ReadInt64 ();  }  
Magic Number,Lucene.Net.Codecs.BlockTerms,BlockTermsReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\BlockTerms\BlockTermsReader.cs,SeekDir,The following statement contains a magic number: input.Seek (input.Length - 8);  
Magic Number,Lucene.Net.Codecs.BlockTerms,FixedGapTermsIndexReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\BlockTerms\FixedGapTermsIndexReader.cs,SeekDir,The following statement contains a magic number: if (version >= FixedGapTermsIndexWriter.VERSION_CHECKSUM) {  	input.Seek (input.Length - CodecUtil.FooterLength () - 8);  	dirOffset = input.ReadInt64 ();  } else if (version >= FixedGapTermsIndexWriter.VERSION_APPEND_ONLY) {  	input.Seek (input.Length - 8);  	dirOffset = input.ReadInt64 ();  }  
Magic Number,Lucene.Net.Codecs.BlockTerms,FixedGapTermsIndexReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\BlockTerms\FixedGapTermsIndexReader.cs,SeekDir,The following statement contains a magic number: if (version >= FixedGapTermsIndexWriter.VERSION_CHECKSUM) {  	input.Seek (input.Length - CodecUtil.FooterLength () - 8);  	dirOffset = input.ReadInt64 ();  } else if (version >= FixedGapTermsIndexWriter.VERSION_APPEND_ONLY) {  	input.Seek (input.Length - 8);  	dirOffset = input.ReadInt64 ();  }  
Magic Number,Lucene.Net.Codecs.BlockTerms,FixedGapTermsIndexReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\BlockTerms\FixedGapTermsIndexReader.cs,SeekDir,The following statement contains a magic number: input.Seek (input.Length - CodecUtil.FooterLength () - 8);  
Magic Number,Lucene.Net.Codecs.BlockTerms,FixedGapTermsIndexReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\BlockTerms\FixedGapTermsIndexReader.cs,SeekDir,The following statement contains a magic number: if (version >= FixedGapTermsIndexWriter.VERSION_APPEND_ONLY) {  	input.Seek (input.Length - 8);  	dirOffset = input.ReadInt64 ();  }  
Magic Number,Lucene.Net.Codecs.BlockTerms,FixedGapTermsIndexReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\BlockTerms\FixedGapTermsIndexReader.cs,SeekDir,The following statement contains a magic number: input.Seek (input.Length - 8);  
Magic Number,Lucene.Net.Codecs.BlockTerms,VariableGapTermsIndexReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\BlockTerms\VariableGapTermsIndexReader.cs,SeekDir,The following statement contains a magic number: if (version >= VariableGapTermsIndexWriter.VERSION_CHECKSUM) {  	input.Seek (input.Length - CodecUtil.FooterLength () - 8);  	dirOffset = input.ReadInt64 ();  } else if (version >= VariableGapTermsIndexWriter.VERSION_APPEND_ONLY) {  	input.Seek (input.Length - 8);  	dirOffset = input.ReadInt64 ();  }  
Magic Number,Lucene.Net.Codecs.BlockTerms,VariableGapTermsIndexReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\BlockTerms\VariableGapTermsIndexReader.cs,SeekDir,The following statement contains a magic number: if (version >= VariableGapTermsIndexWriter.VERSION_CHECKSUM) {  	input.Seek (input.Length - CodecUtil.FooterLength () - 8);  	dirOffset = input.ReadInt64 ();  } else if (version >= VariableGapTermsIndexWriter.VERSION_APPEND_ONLY) {  	input.Seek (input.Length - 8);  	dirOffset = input.ReadInt64 ();  }  
Magic Number,Lucene.Net.Codecs.BlockTerms,VariableGapTermsIndexReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\BlockTerms\VariableGapTermsIndexReader.cs,SeekDir,The following statement contains a magic number: input.Seek (input.Length - CodecUtil.FooterLength () - 8);  
Magic Number,Lucene.Net.Codecs.BlockTerms,VariableGapTermsIndexReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\BlockTerms\VariableGapTermsIndexReader.cs,SeekDir,The following statement contains a magic number: if (version >= VariableGapTermsIndexWriter.VERSION_APPEND_ONLY) {  	input.Seek (input.Length - 8);  	dirOffset = input.ReadInt64 ();  }  
Magic Number,Lucene.Net.Codecs.BlockTerms,VariableGapTermsIndexReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\BlockTerms\VariableGapTermsIndexReader.cs,SeekDir,The following statement contains a magic number: input.Seek (input.Length - 8);  
Magic Number,Lucene.Net.Codecs.Bloom,FuzzySet,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Bloom\FuzzySet.cs,FuzzySet,The following statement contains a magic number: _usableBitSetSizes = new int[30];  
Magic Number,Lucene.Net.Codecs.Bloom,MurmurHash2,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Bloom\MurmurHash2.cs,Hash,The following statement contains a magic number: for (int i = 0; i < len_4; i++) {  	int i_4 = offset + (i << 2);  	int k = data [i_4 + 3];  	k = k << 8;  	k = k | (data [i_4 + 2] & 0xff);  	k = k << 8;  	k = k | (data [i_4 + 1] & 0xff);  	k = k << 8;  	k = k | (data [i_4 + 0] & 0xff);  	k *= m;  	k ^= k >> r;  	k *= m;  	h *= m;  	h ^= k;  }  
Magic Number,Lucene.Net.Codecs.Bloom,MurmurHash2,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Bloom\MurmurHash2.cs,Hash,The following statement contains a magic number: for (int i = 0; i < len_4; i++) {  	int i_4 = offset + (i << 2);  	int k = data [i_4 + 3];  	k = k << 8;  	k = k | (data [i_4 + 2] & 0xff);  	k = k << 8;  	k = k | (data [i_4 + 1] & 0xff);  	k = k << 8;  	k = k | (data [i_4 + 0] & 0xff);  	k *= m;  	k ^= k >> r;  	k *= m;  	h *= m;  	h ^= k;  }  
Magic Number,Lucene.Net.Codecs.Bloom,MurmurHash2,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Bloom\MurmurHash2.cs,Hash,The following statement contains a magic number: for (int i = 0; i < len_4; i++) {  	int i_4 = offset + (i << 2);  	int k = data [i_4 + 3];  	k = k << 8;  	k = k | (data [i_4 + 2] & 0xff);  	k = k << 8;  	k = k | (data [i_4 + 1] & 0xff);  	k = k << 8;  	k = k | (data [i_4 + 0] & 0xff);  	k *= m;  	k ^= k >> r;  	k *= m;  	h *= m;  	h ^= k;  }  
Magic Number,Lucene.Net.Codecs.Bloom,MurmurHash2,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Bloom\MurmurHash2.cs,Hash,The following statement contains a magic number: for (int i = 0; i < len_4; i++) {  	int i_4 = offset + (i << 2);  	int k = data [i_4 + 3];  	k = k << 8;  	k = k | (data [i_4 + 2] & 0xff);  	k = k << 8;  	k = k | (data [i_4 + 1] & 0xff);  	k = k << 8;  	k = k | (data [i_4 + 0] & 0xff);  	k *= m;  	k ^= k >> r;  	k *= m;  	h *= m;  	h ^= k;  }  
Magic Number,Lucene.Net.Codecs.Bloom,MurmurHash2,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Bloom\MurmurHash2.cs,Hash,The following statement contains a magic number: for (int i = 0; i < len_4; i++) {  	int i_4 = offset + (i << 2);  	int k = data [i_4 + 3];  	k = k << 8;  	k = k | (data [i_4 + 2] & 0xff);  	k = k << 8;  	k = k | (data [i_4 + 1] & 0xff);  	k = k << 8;  	k = k | (data [i_4 + 0] & 0xff);  	k *= m;  	k ^= k >> r;  	k *= m;  	h *= m;  	h ^= k;  }  
Magic Number,Lucene.Net.Codecs.Bloom,MurmurHash2,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Bloom\MurmurHash2.cs,Hash,The following statement contains a magic number: for (int i = 0; i < len_4; i++) {  	int i_4 = offset + (i << 2);  	int k = data [i_4 + 3];  	k = k << 8;  	k = k | (data [i_4 + 2] & 0xff);  	k = k << 8;  	k = k | (data [i_4 + 1] & 0xff);  	k = k << 8;  	k = k | (data [i_4 + 0] & 0xff);  	k *= m;  	k ^= k >> r;  	k *= m;  	h *= m;  	h ^= k;  }  
Magic Number,Lucene.Net.Codecs.Bloom,MurmurHash2,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Bloom\MurmurHash2.cs,Hash,The following statement contains a magic number: k = k << 8;  
Magic Number,Lucene.Net.Codecs.Bloom,MurmurHash2,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Bloom\MurmurHash2.cs,Hash,The following statement contains a magic number: k = k | (data [i_4 + 2] & 0xff);  
Magic Number,Lucene.Net.Codecs.Bloom,MurmurHash2,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Bloom\MurmurHash2.cs,Hash,The following statement contains a magic number: k = k << 8;  
Magic Number,Lucene.Net.Codecs.Bloom,MurmurHash2,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Bloom\MurmurHash2.cs,Hash,The following statement contains a magic number: k = k << 8;  
Magic Number,Lucene.Net.Codecs.Bloom,MurmurHash2,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Bloom\MurmurHash2.cs,Hash,The following statement contains a magic number: if (left != 0) {  	if (left >= 3) {  		h ^= data [offset + len - 3] << 16;  	}  	if (left >= 2) {  		h ^= data [offset + len - 2] << 8;  	}  	if (left >= 1) {  		h ^= data [offset + len - 1];  	}  	h *= m;  }  
Magic Number,Lucene.Net.Codecs.Bloom,MurmurHash2,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Bloom\MurmurHash2.cs,Hash,The following statement contains a magic number: if (left != 0) {  	if (left >= 3) {  		h ^= data [offset + len - 3] << 16;  	}  	if (left >= 2) {  		h ^= data [offset + len - 2] << 8;  	}  	if (left >= 1) {  		h ^= data [offset + len - 1];  	}  	h *= m;  }  
Magic Number,Lucene.Net.Codecs.Bloom,MurmurHash2,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Bloom\MurmurHash2.cs,Hash,The following statement contains a magic number: if (left != 0) {  	if (left >= 3) {  		h ^= data [offset + len - 3] << 16;  	}  	if (left >= 2) {  		h ^= data [offset + len - 2] << 8;  	}  	if (left >= 1) {  		h ^= data [offset + len - 1];  	}  	h *= m;  }  
Magic Number,Lucene.Net.Codecs.Bloom,MurmurHash2,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Bloom\MurmurHash2.cs,Hash,The following statement contains a magic number: if (left != 0) {  	if (left >= 3) {  		h ^= data [offset + len - 3] << 16;  	}  	if (left >= 2) {  		h ^= data [offset + len - 2] << 8;  	}  	if (left >= 1) {  		h ^= data [offset + len - 1];  	}  	h *= m;  }  
Magic Number,Lucene.Net.Codecs.Bloom,MurmurHash2,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Bloom\MurmurHash2.cs,Hash,The following statement contains a magic number: if (left != 0) {  	if (left >= 3) {  		h ^= data [offset + len - 3] << 16;  	}  	if (left >= 2) {  		h ^= data [offset + len - 2] << 8;  	}  	if (left >= 1) {  		h ^= data [offset + len - 1];  	}  	h *= m;  }  
Magic Number,Lucene.Net.Codecs.Bloom,MurmurHash2,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Bloom\MurmurHash2.cs,Hash,The following statement contains a magic number: if (left != 0) {  	if (left >= 3) {  		h ^= data [offset + len - 3] << 16;  	}  	if (left >= 2) {  		h ^= data [offset + len - 2] << 8;  	}  	if (left >= 1) {  		h ^= data [offset + len - 1];  	}  	h *= m;  }  
Magic Number,Lucene.Net.Codecs.Bloom,MurmurHash2,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Bloom\MurmurHash2.cs,Hash,The following statement contains a magic number: if (left >= 3) {  	h ^= data [offset + len - 3] << 16;  }  
Magic Number,Lucene.Net.Codecs.Bloom,MurmurHash2,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Bloom\MurmurHash2.cs,Hash,The following statement contains a magic number: if (left >= 3) {  	h ^= data [offset + len - 3] << 16;  }  
Magic Number,Lucene.Net.Codecs.Bloom,MurmurHash2,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Bloom\MurmurHash2.cs,Hash,The following statement contains a magic number: if (left >= 3) {  	h ^= data [offset + len - 3] << 16;  }  
Magic Number,Lucene.Net.Codecs.Bloom,MurmurHash2,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Bloom\MurmurHash2.cs,Hash,The following statement contains a magic number: h ^= data [offset + len - 3] << 16;  
Magic Number,Lucene.Net.Codecs.Bloom,MurmurHash2,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Bloom\MurmurHash2.cs,Hash,The following statement contains a magic number: h ^= data [offset + len - 3] << 16;  
Magic Number,Lucene.Net.Codecs.Bloom,MurmurHash2,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Bloom\MurmurHash2.cs,Hash,The following statement contains a magic number: if (left >= 2) {  	h ^= data [offset + len - 2] << 8;  }  
Magic Number,Lucene.Net.Codecs.Bloom,MurmurHash2,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Bloom\MurmurHash2.cs,Hash,The following statement contains a magic number: if (left >= 2) {  	h ^= data [offset + len - 2] << 8;  }  
Magic Number,Lucene.Net.Codecs.Bloom,MurmurHash2,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Bloom\MurmurHash2.cs,Hash,The following statement contains a magic number: if (left >= 2) {  	h ^= data [offset + len - 2] << 8;  }  
Magic Number,Lucene.Net.Codecs.Bloom,MurmurHash2,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Bloom\MurmurHash2.cs,Hash,The following statement contains a magic number: h ^= data [offset + len - 2] << 8;  
Magic Number,Lucene.Net.Codecs.Bloom,MurmurHash2,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Bloom\MurmurHash2.cs,Hash,The following statement contains a magic number: h ^= data [offset + len - 2] << 8;  
Magic Number,Lucene.Net.Codecs.Bloom,MurmurHash2,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Bloom\MurmurHash2.cs,Hash,The following statement contains a magic number: h ^= h >> 13;  
Magic Number,Lucene.Net.Codecs.Bloom,MurmurHash2,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Bloom\MurmurHash2.cs,Hash,The following statement contains a magic number: h ^= h >> 15;  
Magic Number,Lucene.Net.Codecs.Memory,DirectDocValuesConsumer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\DirectDocValuesConsumer.cs,AddNumericFieldValues,The following statement contains a magic number: if (minValue >= sbyte.MinValue && maxValue <= sbyte.MaxValue) {  	byteWidth = 1;  } else if (minValue >= short.MinValue && maxValue <= short.MaxValue) {  	byteWidth = 2;  } else if (minValue >= int.MinValue && maxValue <= int.MaxValue) {  	byteWidth = 4;  } else {  	byteWidth = 8;  }  
Magic Number,Lucene.Net.Codecs.Memory,DirectDocValuesConsumer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\DirectDocValuesConsumer.cs,AddNumericFieldValues,The following statement contains a magic number: if (minValue >= sbyte.MinValue && maxValue <= sbyte.MaxValue) {  	byteWidth = 1;  } else if (minValue >= short.MinValue && maxValue <= short.MaxValue) {  	byteWidth = 2;  } else if (minValue >= int.MinValue && maxValue <= int.MaxValue) {  	byteWidth = 4;  } else {  	byteWidth = 8;  }  
Magic Number,Lucene.Net.Codecs.Memory,DirectDocValuesConsumer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\DirectDocValuesConsumer.cs,AddNumericFieldValues,The following statement contains a magic number: if (minValue >= sbyte.MinValue && maxValue <= sbyte.MaxValue) {  	byteWidth = 1;  } else if (minValue >= short.MinValue && maxValue <= short.MaxValue) {  	byteWidth = 2;  } else if (minValue >= int.MinValue && maxValue <= int.MaxValue) {  	byteWidth = 4;  } else {  	byteWidth = 8;  }  
Magic Number,Lucene.Net.Codecs.Memory,DirectDocValuesConsumer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\DirectDocValuesConsumer.cs,AddNumericFieldValues,The following statement contains a magic number: if (minValue >= short.MinValue && maxValue <= short.MaxValue) {  	byteWidth = 2;  } else if (minValue >= int.MinValue && maxValue <= int.MaxValue) {  	byteWidth = 4;  } else {  	byteWidth = 8;  }  
Magic Number,Lucene.Net.Codecs.Memory,DirectDocValuesConsumer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\DirectDocValuesConsumer.cs,AddNumericFieldValues,The following statement contains a magic number: if (minValue >= short.MinValue && maxValue <= short.MaxValue) {  	byteWidth = 2;  } else if (minValue >= int.MinValue && maxValue <= int.MaxValue) {  	byteWidth = 4;  } else {  	byteWidth = 8;  }  
Magic Number,Lucene.Net.Codecs.Memory,DirectDocValuesConsumer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\DirectDocValuesConsumer.cs,AddNumericFieldValues,The following statement contains a magic number: if (minValue >= short.MinValue && maxValue <= short.MaxValue) {  	byteWidth = 2;  } else if (minValue >= int.MinValue && maxValue <= int.MaxValue) {  	byteWidth = 4;  } else {  	byteWidth = 8;  }  
Magic Number,Lucene.Net.Codecs.Memory,DirectDocValuesConsumer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\DirectDocValuesConsumer.cs,AddNumericFieldValues,The following statement contains a magic number: byteWidth = 2;  
Magic Number,Lucene.Net.Codecs.Memory,DirectDocValuesConsumer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\DirectDocValuesConsumer.cs,AddNumericFieldValues,The following statement contains a magic number: if (minValue >= int.MinValue && maxValue <= int.MaxValue) {  	byteWidth = 4;  } else {  	byteWidth = 8;  }  
Magic Number,Lucene.Net.Codecs.Memory,DirectDocValuesConsumer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\DirectDocValuesConsumer.cs,AddNumericFieldValues,The following statement contains a magic number: if (minValue >= int.MinValue && maxValue <= int.MaxValue) {  	byteWidth = 4;  } else {  	byteWidth = 8;  }  
Magic Number,Lucene.Net.Codecs.Memory,DirectDocValuesConsumer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\DirectDocValuesConsumer.cs,AddNumericFieldValues,The following statement contains a magic number: byteWidth = 4;  
Magic Number,Lucene.Net.Codecs.Memory,DirectDocValuesConsumer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\DirectDocValuesConsumer.cs,AddNumericFieldValues,The following statement contains a magic number: byteWidth = 8;  
Magic Number,Lucene.Net.Codecs.Memory,DirectDocValuesConsumer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\DirectDocValuesConsumer.cs,AddNumericFieldValues,The following statement contains a magic number: foreach (var nv in values) {  	long v = nv.GetValueOrDefault ();  	switch (byteWidth) {  	case 1:  		data.WriteByte ((byte)(sbyte)v);  		break;  	case 2:  		data.WriteInt16 ((short)v);  		break;  	case 4:  		data.WriteInt32 ((int)v);  		break;  	case 8:  		data.WriteInt64 (v);  		break;  	}  }  
Magic Number,Lucene.Net.Codecs.Memory,DirectDocValuesConsumer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\DirectDocValuesConsumer.cs,AddNumericFieldValues,The following statement contains a magic number: foreach (var nv in values) {  	long v = nv.GetValueOrDefault ();  	switch (byteWidth) {  	case 1:  		data.WriteByte ((byte)(sbyte)v);  		break;  	case 2:  		data.WriteInt16 ((short)v);  		break;  	case 4:  		data.WriteInt32 ((int)v);  		break;  	case 8:  		data.WriteInt64 (v);  		break;  	}  }  
Magic Number,Lucene.Net.Codecs.Memory,DirectDocValuesConsumer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\DirectDocValuesConsumer.cs,AddNumericFieldValues,The following statement contains a magic number: foreach (var nv in values) {  	long v = nv.GetValueOrDefault ();  	switch (byteWidth) {  	case 1:  		data.WriteByte ((byte)(sbyte)v);  		break;  	case 2:  		data.WriteInt16 ((short)v);  		break;  	case 4:  		data.WriteInt32 ((int)v);  		break;  	case 8:  		data.WriteInt64 (v);  		break;  	}  }  
Magic Number,Lucene.Net.Codecs.Memory,DirectDocValuesConsumer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\DirectDocValuesConsumer.cs,AddNumericFieldValues,The following statement contains a magic number: switch (byteWidth) {  case 1:  	data.WriteByte ((byte)(sbyte)v);  	break;  case 2:  	data.WriteInt16 ((short)v);  	break;  case 4:  	data.WriteInt32 ((int)v);  	break;  case 8:  	data.WriteInt64 (v);  	break;  }  
Magic Number,Lucene.Net.Codecs.Memory,DirectDocValuesConsumer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\DirectDocValuesConsumer.cs,AddNumericFieldValues,The following statement contains a magic number: switch (byteWidth) {  case 1:  	data.WriteByte ((byte)(sbyte)v);  	break;  case 2:  	data.WriteInt16 ((short)v);  	break;  case 4:  	data.WriteInt32 ((int)v);  	break;  case 8:  	data.WriteInt64 (v);  	break;  }  
Magic Number,Lucene.Net.Codecs.Memory,DirectDocValuesConsumer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\DirectDocValuesConsumer.cs,AddNumericFieldValues,The following statement contains a magic number: switch (byteWidth) {  case 1:  	data.WriteByte ((byte)(sbyte)v);  	break;  case 2:  	data.WriteInt16 ((short)v);  	break;  case 4:  	data.WriteInt32 ((int)v);  	break;  case 8:  	data.WriteInt64 (v);  	break;  }  
Magic Number,Lucene.Net.Codecs.Memory,DirectDocValuesConsumer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\DirectDocValuesConsumer.cs,WriteMissingBitset,The following statement contains a magic number: foreach (object v in values) {  	if (count == 64) {  		data.WriteInt64 (bits);  		count = 0;  		bits = 0;  	}  	if (v != null) {  		bits |= 1L << (count & 0x3f);  	}  	count++;  }  
Magic Number,Lucene.Net.Codecs.Memory,DirectDocValuesConsumer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\DirectDocValuesConsumer.cs,WriteMissingBitset,The following statement contains a magic number: if (count == 64) {  	data.WriteInt64 (bits);  	count = 0;  	bits = 0;  }  
Magic Number,Lucene.Net.Codecs.Memory,DirectDocValuesProducer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\DirectDocValuesProducer.cs,DirectDocValuesProducer,The following statement contains a magic number: try {  	version = CodecUtil.CheckHeader (@in' metaCodec' VERSION_START' VERSION_CURRENT);  	ReadFields (@in);  	if (version >= VERSION_CHECKSUM) {  		CodecUtil.CheckFooter (@in);  	} else {  		#pragma  		CodecUtil.CheckEOF (@in);  		#pragma  	}  	success = true;  } finally {  	if (success) {  		IOUtils.Close (@in);  	} else {  		IOUtils.CloseWhileHandlingException (@in);  	}  }  
Magic Number,Lucene.Net.Codecs.Memory,DirectDocValuesProducer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\DirectDocValuesProducer.cs,DirectDocValuesProducer,The following statement contains a magic number: try {  	version = CodecUtil.CheckHeader (@in' metaCodec' VERSION_START' VERSION_CURRENT);  	ReadFields (@in);  	if (version >= VERSION_CHECKSUM) {  		CodecUtil.CheckFooter (@in);  	} else {  		#pragma  		CodecUtil.CheckEOF (@in);  		#pragma  	}  	success = true;  } finally {  	if (success) {  		IOUtils.Close (@in);  	} else {  		IOUtils.CloseWhileHandlingException (@in);  	}  }  
Magic Number,Lucene.Net.Codecs.Memory,DirectDocValuesProducer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\DirectDocValuesProducer.cs,DirectDocValuesProducer,The following statement contains a magic number: try {  	version = CodecUtil.CheckHeader (@in' metaCodec' VERSION_START' VERSION_CURRENT);  	ReadFields (@in);  	if (version >= VERSION_CHECKSUM) {  		CodecUtil.CheckFooter (@in);  	} else {  		#pragma  		CodecUtil.CheckEOF (@in);  		#pragma  	}  	success = true;  } finally {  	if (success) {  		IOUtils.Close (@in);  	} else {  		IOUtils.CloseWhileHandlingException (@in);  	}  }  
Magic Number,Lucene.Net.Codecs.Memory,DirectDocValuesProducer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\DirectDocValuesProducer.cs,DirectDocValuesProducer,The following statement contains a magic number: try {  	version = CodecUtil.CheckHeader (@in' metaCodec' VERSION_START' VERSION_CURRENT);  	ReadFields (@in);  	if (version >= VERSION_CHECKSUM) {  		CodecUtil.CheckFooter (@in);  	} else {  		#pragma  		CodecUtil.CheckEOF (@in);  		#pragma  	}  	success = true;  } finally {  	if (success) {  		IOUtils.Close (@in);  	} else {  		IOUtils.CloseWhileHandlingException (@in);  	}  }  
Magic Number,Lucene.Net.Codecs.Memory,DirectDocValuesProducer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\DirectDocValuesProducer.cs,DirectDocValuesProducer,The following statement contains a magic number: if (version >= VERSION_CHECKSUM) {  	CodecUtil.CheckFooter (@in);  } else {  	#pragma  	CodecUtil.CheckEOF (@in);  	#pragma  }  
Magic Number,Lucene.Net.Codecs.Memory,DirectDocValuesProducer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\DirectDocValuesProducer.cs,DirectDocValuesProducer,The following statement contains a magic number: if (version >= VERSION_CHECKSUM) {  	CodecUtil.CheckFooter (@in);  } else {  	#pragma  	CodecUtil.CheckEOF (@in);  	#pragma  }  
Magic Number,Lucene.Net.Codecs.Memory,DirectDocValuesProducer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\DirectDocValuesProducer.cs,DirectDocValuesProducer,The following statement contains a magic number: if (version >= VERSION_CHECKSUM) {  	CodecUtil.CheckFooter (@in);  } else {  	#pragma  	CodecUtil.CheckEOF (@in);  	#pragma  }  
Magic Number,Lucene.Net.Codecs.Memory,DirectDocValuesProducer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\DirectDocValuesProducer.cs,DirectDocValuesProducer,The following statement contains a magic number: if (version >= VERSION_CHECKSUM) {  	CodecUtil.CheckFooter (@in);  } else {  	#pragma  	CodecUtil.CheckEOF (@in);  	#pragma  }  
Magic Number,Lucene.Net.Codecs.Memory,DirectDocValuesProducer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\DirectDocValuesProducer.cs,LoadNumeric,The following statement contains a magic number: switch (entry.byteWidth) {  case 1: {  	var values = new byte[entry.count];  	data.ReadBytes (values' 0' entry.count);  	ramBytesUsed.AddAndGet (RamUsageEstimator.SizeOf (values));  	// LUCENENET: IMPORTANT - some bytes are negative here' so we need to pass as sbyte  	return new NumericDocValuesAnonymousInnerClassHelper ((sbyte[])(Array)values);  }  case 2: {  	var values = new short[entry.count];  	for (int i = 0; i < entry.count; i++) {  		values [i] = data.ReadInt16 ();  	}  	ramBytesUsed.AddAndGet (RamUsageEstimator.SizeOf (values));  	return new NumericDocValuesAnonymousInnerClassHelper2 (this' values);  }  case 4: {  	var values = new int[entry.count];  	for (var i = 0; i < entry.count; i++) {  		values [i] = data.ReadInt32 ();  	}  	ramBytesUsed.AddAndGet (RamUsageEstimator.SizeOf (values));  	return new NumericDocValuesAnonymousInnerClassHelper3 (values);  }  case 8: {  	var values = new long[entry.count];  	for (int i = 0; i < entry.count; i++) {  		values [i] = data.ReadInt64 ();  	}  	ramBytesUsed.AddAndGet (RamUsageEstimator.SizeOf (values));  	return new NumericDocValuesAnonymousInnerClassHelper4 (values);  }  default:  	throw new System.InvalidOperationException ();  }  
Magic Number,Lucene.Net.Codecs.Memory,DirectDocValuesProducer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\DirectDocValuesProducer.cs,LoadNumeric,The following statement contains a magic number: switch (entry.byteWidth) {  case 1: {  	var values = new byte[entry.count];  	data.ReadBytes (values' 0' entry.count);  	ramBytesUsed.AddAndGet (RamUsageEstimator.SizeOf (values));  	// LUCENENET: IMPORTANT - some bytes are negative here' so we need to pass as sbyte  	return new NumericDocValuesAnonymousInnerClassHelper ((sbyte[])(Array)values);  }  case 2: {  	var values = new short[entry.count];  	for (int i = 0; i < entry.count; i++) {  		values [i] = data.ReadInt16 ();  	}  	ramBytesUsed.AddAndGet (RamUsageEstimator.SizeOf (values));  	return new NumericDocValuesAnonymousInnerClassHelper2 (this' values);  }  case 4: {  	var values = new int[entry.count];  	for (var i = 0; i < entry.count; i++) {  		values [i] = data.ReadInt32 ();  	}  	ramBytesUsed.AddAndGet (RamUsageEstimator.SizeOf (values));  	return new NumericDocValuesAnonymousInnerClassHelper3 (values);  }  case 8: {  	var values = new long[entry.count];  	for (int i = 0; i < entry.count; i++) {  		values [i] = data.ReadInt64 ();  	}  	ramBytesUsed.AddAndGet (RamUsageEstimator.SizeOf (values));  	return new NumericDocValuesAnonymousInnerClassHelper4 (values);  }  default:  	throw new System.InvalidOperationException ();  }  
Magic Number,Lucene.Net.Codecs.Memory,DirectDocValuesProducer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\DirectDocValuesProducer.cs,LoadNumeric,The following statement contains a magic number: switch (entry.byteWidth) {  case 1: {  	var values = new byte[entry.count];  	data.ReadBytes (values' 0' entry.count);  	ramBytesUsed.AddAndGet (RamUsageEstimator.SizeOf (values));  	// LUCENENET: IMPORTANT - some bytes are negative here' so we need to pass as sbyte  	return new NumericDocValuesAnonymousInnerClassHelper ((sbyte[])(Array)values);  }  case 2: {  	var values = new short[entry.count];  	for (int i = 0; i < entry.count; i++) {  		values [i] = data.ReadInt16 ();  	}  	ramBytesUsed.AddAndGet (RamUsageEstimator.SizeOf (values));  	return new NumericDocValuesAnonymousInnerClassHelper2 (this' values);  }  case 4: {  	var values = new int[entry.count];  	for (var i = 0; i < entry.count; i++) {  		values [i] = data.ReadInt32 ();  	}  	ramBytesUsed.AddAndGet (RamUsageEstimator.SizeOf (values));  	return new NumericDocValuesAnonymousInnerClassHelper3 (values);  }  case 8: {  	var values = new long[entry.count];  	for (int i = 0; i < entry.count; i++) {  		values [i] = data.ReadInt64 ();  	}  	ramBytesUsed.AddAndGet (RamUsageEstimator.SizeOf (values));  	return new NumericDocValuesAnonymousInnerClassHelper4 (values);  }  default:  	throw new System.InvalidOperationException ();  }  
Magic Number,Lucene.Net.Codecs.Memory,DirectDocValuesProducer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\DirectDocValuesProducer.cs,GetMissingBits,The following statement contains a magic number: if (offset == -1) {  	return new Bits.MatchAllBits (maxDoc);  } else {  	IBits instance;  	lock (this) {  		if (!docsWithFieldInstances.TryGetValue (fieldNumber' out instance)) {  			var data = (IndexInput)this.data.Clone ();  			data.Seek (offset);  			Debug.Assert (length % 8 == 0);  			var bits = new long[(int)length >> 3];  			for (var i = 0; i < bits.Length; i++) {  				bits [i] = data.ReadInt64 ();  			}  			instance = new FixedBitSet (bits' maxDoc);  			docsWithFieldInstances [fieldNumber] = instance;  		}  	}  	return instance;  }  
Magic Number,Lucene.Net.Codecs.Memory,DirectDocValuesProducer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\DirectDocValuesProducer.cs,GetMissingBits,The following statement contains a magic number: if (offset == -1) {  	return new Bits.MatchAllBits (maxDoc);  } else {  	IBits instance;  	lock (this) {  		if (!docsWithFieldInstances.TryGetValue (fieldNumber' out instance)) {  			var data = (IndexInput)this.data.Clone ();  			data.Seek (offset);  			Debug.Assert (length % 8 == 0);  			var bits = new long[(int)length >> 3];  			for (var i = 0; i < bits.Length; i++) {  				bits [i] = data.ReadInt64 ();  			}  			instance = new FixedBitSet (bits' maxDoc);  			docsWithFieldInstances [fieldNumber] = instance;  		}  	}  	return instance;  }  
Magic Number,Lucene.Net.Codecs.Memory,DirectDocValuesProducer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\DirectDocValuesProducer.cs,GetMissingBits,The following statement contains a magic number: lock (this) {  	if (!docsWithFieldInstances.TryGetValue (fieldNumber' out instance)) {  		var data = (IndexInput)this.data.Clone ();  		data.Seek (offset);  		Debug.Assert (length % 8 == 0);  		var bits = new long[(int)length >> 3];  		for (var i = 0; i < bits.Length; i++) {  			bits [i] = data.ReadInt64 ();  		}  		instance = new FixedBitSet (bits' maxDoc);  		docsWithFieldInstances [fieldNumber] = instance;  	}  }  
Magic Number,Lucene.Net.Codecs.Memory,DirectDocValuesProducer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\DirectDocValuesProducer.cs,GetMissingBits,The following statement contains a magic number: lock (this) {  	if (!docsWithFieldInstances.TryGetValue (fieldNumber' out instance)) {  		var data = (IndexInput)this.data.Clone ();  		data.Seek (offset);  		Debug.Assert (length % 8 == 0);  		var bits = new long[(int)length >> 3];  		for (var i = 0; i < bits.Length; i++) {  			bits [i] = data.ReadInt64 ();  		}  		instance = new FixedBitSet (bits' maxDoc);  		docsWithFieldInstances [fieldNumber] = instance;  	}  }  
Magic Number,Lucene.Net.Codecs.Memory,DirectDocValuesProducer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\DirectDocValuesProducer.cs,GetMissingBits,The following statement contains a magic number: if (!docsWithFieldInstances.TryGetValue (fieldNumber' out instance)) {  	var data = (IndexInput)this.data.Clone ();  	data.Seek (offset);  	Debug.Assert (length % 8 == 0);  	var bits = new long[(int)length >> 3];  	for (var i = 0; i < bits.Length; i++) {  		bits [i] = data.ReadInt64 ();  	}  	instance = new FixedBitSet (bits' maxDoc);  	docsWithFieldInstances [fieldNumber] = instance;  }  
Magic Number,Lucene.Net.Codecs.Memory,DirectDocValuesProducer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\DirectDocValuesProducer.cs,GetMissingBits,The following statement contains a magic number: if (!docsWithFieldInstances.TryGetValue (fieldNumber' out instance)) {  	var data = (IndexInput)this.data.Clone ();  	data.Seek (offset);  	Debug.Assert (length % 8 == 0);  	var bits = new long[(int)length >> 3];  	for (var i = 0; i < bits.Length; i++) {  		bits [i] = data.ReadInt64 ();  	}  	instance = new FixedBitSet (bits' maxDoc);  	docsWithFieldInstances [fieldNumber] = instance;  }  
Magic Number,Lucene.Net.Codecs.Memory,DirectDocValuesProducer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\DirectDocValuesProducer.cs,GetMissingBits,The following statement contains a magic number: Debug.Assert (length % 8 == 0);  
Magic Number,Lucene.Net.Codecs.Memory,FSTOrdTermsReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\FSTOrdTermsReader.cs,FSTOrdTermsReader,The following statement contains a magic number: try {  	indexIn = state.Directory.OpenChecksumInput (termsIndexFileName' state.Context);  	blockIn = state.Directory.OpenInput (termsBlockFileName' state.Context);  	version = ReadHeader (indexIn);  	ReadHeader (blockIn);  	if (version >= FSTOrdTermsWriter.TERMS_VERSION_CHECKSUM) {  		CodecUtil.ChecksumEntireFile (blockIn);  	}  	this.postingsReader.Init (blockIn);  	SeekDir (blockIn);  	FieldInfos fieldInfos = state.FieldInfos;  	int numFields = blockIn.ReadVInt32 ();  	for (int i = 0; i < numFields; i++) {  		FieldInfo fieldInfo = fieldInfos.FieldInfo (blockIn.ReadVInt32 ());  		bool hasFreq = fieldInfo.IndexOptions != IndexOptions.DOCS_ONLY;  		long numTerms = blockIn.ReadVInt64 ();  		long sumTotalTermFreq = hasFreq ? blockIn.ReadVInt64 () : -1;  		long sumDocFreq = blockIn.ReadVInt64 ();  		int docCount = blockIn.ReadVInt32 ();  		int longsSize = blockIn.ReadVInt32 ();  		var index = new FST<long?> (indexIn' PositiveInt32Outputs.Singleton);  		var current = new TermsReader (this' fieldInfo' blockIn' numTerms' sumTotalTermFreq' sumDocFreq' docCount' longsSize' index);  		TermsReader previous;  		// LUCENENET NOTE: This simulates a put operation in Java'  		// getting the prior value first before setting it.  		fields.TryGetValue (fieldInfo.Name' out previous);  		fields [fieldInfo.Name] = current;  		CheckFieldSummary (state.SegmentInfo' indexIn' blockIn' current' previous);  	}  	if (version >= FSTOrdTermsWriter.TERMS_VERSION_CHECKSUM) {  		CodecUtil.CheckFooter (indexIn);  	} else {  		#pragma  		CodecUtil.CheckEOF (indexIn);  		#pragma  	}  	success = true;  } finally {  	if (success) {  		IOUtils.Close (indexIn' blockIn);  	} else {  		IOUtils.CloseWhileHandlingException (indexIn' blockIn);  	}  }  
Magic Number,Lucene.Net.Codecs.Memory,FSTOrdTermsReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\FSTOrdTermsReader.cs,FSTOrdTermsReader,The following statement contains a magic number: try {  	indexIn = state.Directory.OpenChecksumInput (termsIndexFileName' state.Context);  	blockIn = state.Directory.OpenInput (termsBlockFileName' state.Context);  	version = ReadHeader (indexIn);  	ReadHeader (blockIn);  	if (version >= FSTOrdTermsWriter.TERMS_VERSION_CHECKSUM) {  		CodecUtil.ChecksumEntireFile (blockIn);  	}  	this.postingsReader.Init (blockIn);  	SeekDir (blockIn);  	FieldInfos fieldInfos = state.FieldInfos;  	int numFields = blockIn.ReadVInt32 ();  	for (int i = 0; i < numFields; i++) {  		FieldInfo fieldInfo = fieldInfos.FieldInfo (blockIn.ReadVInt32 ());  		bool hasFreq = fieldInfo.IndexOptions != IndexOptions.DOCS_ONLY;  		long numTerms = blockIn.ReadVInt64 ();  		long sumTotalTermFreq = hasFreq ? blockIn.ReadVInt64 () : -1;  		long sumDocFreq = blockIn.ReadVInt64 ();  		int docCount = blockIn.ReadVInt32 ();  		int longsSize = blockIn.ReadVInt32 ();  		var index = new FST<long?> (indexIn' PositiveInt32Outputs.Singleton);  		var current = new TermsReader (this' fieldInfo' blockIn' numTerms' sumTotalTermFreq' sumDocFreq' docCount' longsSize' index);  		TermsReader previous;  		// LUCENENET NOTE: This simulates a put operation in Java'  		// getting the prior value first before setting it.  		fields.TryGetValue (fieldInfo.Name' out previous);  		fields [fieldInfo.Name] = current;  		CheckFieldSummary (state.SegmentInfo' indexIn' blockIn' current' previous);  	}  	if (version >= FSTOrdTermsWriter.TERMS_VERSION_CHECKSUM) {  		CodecUtil.CheckFooter (indexIn);  	} else {  		#pragma  		CodecUtil.CheckEOF (indexIn);  		#pragma  	}  	success = true;  } finally {  	if (success) {  		IOUtils.Close (indexIn' blockIn);  	} else {  		IOUtils.CloseWhileHandlingException (indexIn' blockIn);  	}  }  
Magic Number,Lucene.Net.Codecs.Memory,FSTOrdTermsReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\FSTOrdTermsReader.cs,FSTOrdTermsReader,The following statement contains a magic number: try {  	indexIn = state.Directory.OpenChecksumInput (termsIndexFileName' state.Context);  	blockIn = state.Directory.OpenInput (termsBlockFileName' state.Context);  	version = ReadHeader (indexIn);  	ReadHeader (blockIn);  	if (version >= FSTOrdTermsWriter.TERMS_VERSION_CHECKSUM) {  		CodecUtil.ChecksumEntireFile (blockIn);  	}  	this.postingsReader.Init (blockIn);  	SeekDir (blockIn);  	FieldInfos fieldInfos = state.FieldInfos;  	int numFields = blockIn.ReadVInt32 ();  	for (int i = 0; i < numFields; i++) {  		FieldInfo fieldInfo = fieldInfos.FieldInfo (blockIn.ReadVInt32 ());  		bool hasFreq = fieldInfo.IndexOptions != IndexOptions.DOCS_ONLY;  		long numTerms = blockIn.ReadVInt64 ();  		long sumTotalTermFreq = hasFreq ? blockIn.ReadVInt64 () : -1;  		long sumDocFreq = blockIn.ReadVInt64 ();  		int docCount = blockIn.ReadVInt32 ();  		int longsSize = blockIn.ReadVInt32 ();  		var index = new FST<long?> (indexIn' PositiveInt32Outputs.Singleton);  		var current = new TermsReader (this' fieldInfo' blockIn' numTerms' sumTotalTermFreq' sumDocFreq' docCount' longsSize' index);  		TermsReader previous;  		// LUCENENET NOTE: This simulates a put operation in Java'  		// getting the prior value first before setting it.  		fields.TryGetValue (fieldInfo.Name' out previous);  		fields [fieldInfo.Name] = current;  		CheckFieldSummary (state.SegmentInfo' indexIn' blockIn' current' previous);  	}  	if (version >= FSTOrdTermsWriter.TERMS_VERSION_CHECKSUM) {  		CodecUtil.CheckFooter (indexIn);  	} else {  		#pragma  		CodecUtil.CheckEOF (indexIn);  		#pragma  	}  	success = true;  } finally {  	if (success) {  		IOUtils.Close (indexIn' blockIn);  	} else {  		IOUtils.CloseWhileHandlingException (indexIn' blockIn);  	}  }  
Magic Number,Lucene.Net.Codecs.Memory,FSTOrdTermsReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\FSTOrdTermsReader.cs,FSTOrdTermsReader,The following statement contains a magic number: try {  	indexIn = state.Directory.OpenChecksumInput (termsIndexFileName' state.Context);  	blockIn = state.Directory.OpenInput (termsBlockFileName' state.Context);  	version = ReadHeader (indexIn);  	ReadHeader (blockIn);  	if (version >= FSTOrdTermsWriter.TERMS_VERSION_CHECKSUM) {  		CodecUtil.ChecksumEntireFile (blockIn);  	}  	this.postingsReader.Init (blockIn);  	SeekDir (blockIn);  	FieldInfos fieldInfos = state.FieldInfos;  	int numFields = blockIn.ReadVInt32 ();  	for (int i = 0; i < numFields; i++) {  		FieldInfo fieldInfo = fieldInfos.FieldInfo (blockIn.ReadVInt32 ());  		bool hasFreq = fieldInfo.IndexOptions != IndexOptions.DOCS_ONLY;  		long numTerms = blockIn.ReadVInt64 ();  		long sumTotalTermFreq = hasFreq ? blockIn.ReadVInt64 () : -1;  		long sumDocFreq = blockIn.ReadVInt64 ();  		int docCount = blockIn.ReadVInt32 ();  		int longsSize = blockIn.ReadVInt32 ();  		var index = new FST<long?> (indexIn' PositiveInt32Outputs.Singleton);  		var current = new TermsReader (this' fieldInfo' blockIn' numTerms' sumTotalTermFreq' sumDocFreq' docCount' longsSize' index);  		TermsReader previous;  		// LUCENENET NOTE: This simulates a put operation in Java'  		// getting the prior value first before setting it.  		fields.TryGetValue (fieldInfo.Name' out previous);  		fields [fieldInfo.Name] = current;  		CheckFieldSummary (state.SegmentInfo' indexIn' blockIn' current' previous);  	}  	if (version >= FSTOrdTermsWriter.TERMS_VERSION_CHECKSUM) {  		CodecUtil.CheckFooter (indexIn);  	} else {  		#pragma  		CodecUtil.CheckEOF (indexIn);  		#pragma  	}  	success = true;  } finally {  	if (success) {  		IOUtils.Close (indexIn' blockIn);  	} else {  		IOUtils.CloseWhileHandlingException (indexIn' blockIn);  	}  }  
Magic Number,Lucene.Net.Codecs.Memory,FSTOrdTermsReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\FSTOrdTermsReader.cs,FSTOrdTermsReader,The following statement contains a magic number: if (version >= FSTOrdTermsWriter.TERMS_VERSION_CHECKSUM) {  	CodecUtil.CheckFooter (indexIn);  } else {  	#pragma  	CodecUtil.CheckEOF (indexIn);  	#pragma  }  
Magic Number,Lucene.Net.Codecs.Memory,FSTOrdTermsReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\FSTOrdTermsReader.cs,FSTOrdTermsReader,The following statement contains a magic number: if (version >= FSTOrdTermsWriter.TERMS_VERSION_CHECKSUM) {  	CodecUtil.CheckFooter (indexIn);  } else {  	#pragma  	CodecUtil.CheckEOF (indexIn);  	#pragma  }  
Magic Number,Lucene.Net.Codecs.Memory,FSTOrdTermsReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\FSTOrdTermsReader.cs,FSTOrdTermsReader,The following statement contains a magic number: if (version >= FSTOrdTermsWriter.TERMS_VERSION_CHECKSUM) {  	CodecUtil.CheckFooter (indexIn);  } else {  	#pragma  	CodecUtil.CheckEOF (indexIn);  	#pragma  }  
Magic Number,Lucene.Net.Codecs.Memory,FSTOrdTermsReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\FSTOrdTermsReader.cs,FSTOrdTermsReader,The following statement contains a magic number: if (version >= FSTOrdTermsWriter.TERMS_VERSION_CHECKSUM) {  	CodecUtil.CheckFooter (indexIn);  } else {  	#pragma  	CodecUtil.CheckEOF (indexIn);  	#pragma  }  
Magic Number,Lucene.Net.Codecs.Memory,FSTOrdTermsReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\FSTOrdTermsReader.cs,SeekDir,The following statement contains a magic number: if (version >= FSTOrdTermsWriter.TERMS_VERSION_CHECKSUM) {  	@in.Seek (@in.Length - CodecUtil.FooterLength () - 8);  } else {  	@in.Seek (@in.Length - 8);  }  
Magic Number,Lucene.Net.Codecs.Memory,FSTOrdTermsReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\FSTOrdTermsReader.cs,SeekDir,The following statement contains a magic number: if (version >= FSTOrdTermsWriter.TERMS_VERSION_CHECKSUM) {  	@in.Seek (@in.Length - CodecUtil.FooterLength () - 8);  } else {  	@in.Seek (@in.Length - 8);  }  
Magic Number,Lucene.Net.Codecs.Memory,FSTOrdTermsReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\FSTOrdTermsReader.cs,SeekDir,The following statement contains a magic number: @in.Seek (@in.Length - CodecUtil.FooterLength () - 8);  
Magic Number,Lucene.Net.Codecs.Memory,FSTOrdTermsReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\FSTOrdTermsReader.cs,SeekDir,The following statement contains a magic number: @in.Seek (@in.Length - 8);  
Magic Number,Lucene.Net.Codecs.Memory,FSTTermOutputs,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\FSTTermOutputs.cs,Write,The following statement contains a magic number: if (bit1 > 0)// determine extra length   {  	if (data.bytes.Length < 32) {  		bits |= (data.bytes.Length << 3);  		output.WriteByte ((byte)bits);  	} else {  		output.WriteByte ((byte)bits);  		output.WriteVInt32 (data.bytes.Length);  	}  } else {  	output.WriteByte ((byte)bits);  }  
Magic Number,Lucene.Net.Codecs.Memory,FSTTermOutputs,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\FSTTermOutputs.cs,Write,The following statement contains a magic number: if (bit1 > 0)// determine extra length   {  	if (data.bytes.Length < 32) {  		bits |= (data.bytes.Length << 3);  		output.WriteByte ((byte)bits);  	} else {  		output.WriteByte ((byte)bits);  		output.WriteVInt32 (data.bytes.Length);  	}  } else {  	output.WriteByte ((byte)bits);  }  
Magic Number,Lucene.Net.Codecs.Memory,FSTTermOutputs,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\FSTTermOutputs.cs,Write,The following statement contains a magic number: if (data.bytes.Length < 32) {  	bits |= (data.bytes.Length << 3);  	output.WriteByte ((byte)bits);  } else {  	output.WriteByte ((byte)bits);  	output.WriteVInt32 (data.bytes.Length);  }  
Magic Number,Lucene.Net.Codecs.Memory,FSTTermOutputs,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\FSTTermOutputs.cs,Write,The following statement contains a magic number: if (data.bytes.Length < 32) {  	bits |= (data.bytes.Length << 3);  	output.WriteByte ((byte)bits);  } else {  	output.WriteByte ((byte)bits);  	output.WriteVInt32 (data.bytes.Length);  }  
Magic Number,Lucene.Net.Codecs.Memory,FSTTermOutputs,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\FSTTermOutputs.cs,Write,The following statement contains a magic number: bits |= (data.bytes.Length << 3);  
Magic Number,Lucene.Net.Codecs.Memory,FSTTermsReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\FSTTermsReader.cs,SeekDir,The following statement contains a magic number: if (version >= FSTTermsWriter.TERMS_VERSION_CHECKSUM) {  	@in.Seek (@in.Length - CodecUtil.FooterLength () - 8);  } else {  	@in.Seek (@in.Length - 8);  }  
Magic Number,Lucene.Net.Codecs.Memory,FSTTermsReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\FSTTermsReader.cs,SeekDir,The following statement contains a magic number: if (version >= FSTTermsWriter.TERMS_VERSION_CHECKSUM) {  	@in.Seek (@in.Length - CodecUtil.FooterLength () - 8);  } else {  	@in.Seek (@in.Length - 8);  }  
Magic Number,Lucene.Net.Codecs.Memory,FSTTermsReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\FSTTermsReader.cs,SeekDir,The following statement contains a magic number: @in.Seek (@in.Length - CodecUtil.FooterLength () - 8);  
Magic Number,Lucene.Net.Codecs.Memory,FSTTermsReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\FSTTermsReader.cs,SeekDir,The following statement contains a magic number: @in.Seek (@in.Length - 8);  
Magic Number,Lucene.Net.Codecs.Memory,MemoryDocValuesConsumer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\MemoryDocValuesConsumer.cs,AddNumericField,The following statement contains a magic number: if (optimizeStorage) {  	uniqueValues = new HashSet<long?> ();  	long count = 0;  	foreach (var nv in values) {  		long v;  		if (nv == null) {  			v = 0;  			missing = true;  		} else {  			v = nv.Value;  		}  		if (gcd != 1) {  			if (v < long.MinValue / 2 || v > long.MaxValue / 2) {  				// in that case v - minValue might overflow and make the GCD computation return  				// wrong results. Since these extreme values are unlikely' we just discard  				// GCD computation for them  				gcd = 1;  			} // minValue needs to be set first  			else if (count != 0) {  				gcd = MathUtil.Gcd (gcd' v - minValue);  			}  		}  		minValue = Math.Min (minValue' v);  		maxValue = Math.Max (maxValue' v);  		if (uniqueValues != null) {  			if (uniqueValues.Add (v)) {  				if (uniqueValues.Count > 256) {  					uniqueValues = null;  				}  			}  		}  		++count;  	}  	Debug.Assert (count == maxDoc);  }  
Magic Number,Lucene.Net.Codecs.Memory,MemoryDocValuesConsumer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\MemoryDocValuesConsumer.cs,AddNumericField,The following statement contains a magic number: if (optimizeStorage) {  	uniqueValues = new HashSet<long?> ();  	long count = 0;  	foreach (var nv in values) {  		long v;  		if (nv == null) {  			v = 0;  			missing = true;  		} else {  			v = nv.Value;  		}  		if (gcd != 1) {  			if (v < long.MinValue / 2 || v > long.MaxValue / 2) {  				// in that case v - minValue might overflow and make the GCD computation return  				// wrong results. Since these extreme values are unlikely' we just discard  				// GCD computation for them  				gcd = 1;  			} // minValue needs to be set first  			else if (count != 0) {  				gcd = MathUtil.Gcd (gcd' v - minValue);  			}  		}  		minValue = Math.Min (minValue' v);  		maxValue = Math.Max (maxValue' v);  		if (uniqueValues != null) {  			if (uniqueValues.Add (v)) {  				if (uniqueValues.Count > 256) {  					uniqueValues = null;  				}  			}  		}  		++count;  	}  	Debug.Assert (count == maxDoc);  }  
Magic Number,Lucene.Net.Codecs.Memory,MemoryDocValuesConsumer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\MemoryDocValuesConsumer.cs,AddNumericField,The following statement contains a magic number: if (optimizeStorage) {  	uniqueValues = new HashSet<long?> ();  	long count = 0;  	foreach (var nv in values) {  		long v;  		if (nv == null) {  			v = 0;  			missing = true;  		} else {  			v = nv.Value;  		}  		if (gcd != 1) {  			if (v < long.MinValue / 2 || v > long.MaxValue / 2) {  				// in that case v - minValue might overflow and make the GCD computation return  				// wrong results. Since these extreme values are unlikely' we just discard  				// GCD computation for them  				gcd = 1;  			} // minValue needs to be set first  			else if (count != 0) {  				gcd = MathUtil.Gcd (gcd' v - minValue);  			}  		}  		minValue = Math.Min (minValue' v);  		maxValue = Math.Max (maxValue' v);  		if (uniqueValues != null) {  			if (uniqueValues.Add (v)) {  				if (uniqueValues.Count > 256) {  					uniqueValues = null;  				}  			}  		}  		++count;  	}  	Debug.Assert (count == maxDoc);  }  
Magic Number,Lucene.Net.Codecs.Memory,MemoryDocValuesConsumer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\MemoryDocValuesConsumer.cs,AddNumericField,The following statement contains a magic number: foreach (var nv in values) {  	long v;  	if (nv == null) {  		v = 0;  		missing = true;  	} else {  		v = nv.Value;  	}  	if (gcd != 1) {  		if (v < long.MinValue / 2 || v > long.MaxValue / 2) {  			// in that case v - minValue might overflow and make the GCD computation return  			// wrong results. Since these extreme values are unlikely' we just discard  			// GCD computation for them  			gcd = 1;  		} // minValue needs to be set first  		else if (count != 0) {  			gcd = MathUtil.Gcd (gcd' v - minValue);  		}  	}  	minValue = Math.Min (minValue' v);  	maxValue = Math.Max (maxValue' v);  	if (uniqueValues != null) {  		if (uniqueValues.Add (v)) {  			if (uniqueValues.Count > 256) {  				uniqueValues = null;  			}  		}  	}  	++count;  }  
Magic Number,Lucene.Net.Codecs.Memory,MemoryDocValuesConsumer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\MemoryDocValuesConsumer.cs,AddNumericField,The following statement contains a magic number: foreach (var nv in values) {  	long v;  	if (nv == null) {  		v = 0;  		missing = true;  	} else {  		v = nv.Value;  	}  	if (gcd != 1) {  		if (v < long.MinValue / 2 || v > long.MaxValue / 2) {  			// in that case v - minValue might overflow and make the GCD computation return  			// wrong results. Since these extreme values are unlikely' we just discard  			// GCD computation for them  			gcd = 1;  		} // minValue needs to be set first  		else if (count != 0) {  			gcd = MathUtil.Gcd (gcd' v - minValue);  		}  	}  	minValue = Math.Min (minValue' v);  	maxValue = Math.Max (maxValue' v);  	if (uniqueValues != null) {  		if (uniqueValues.Add (v)) {  			if (uniqueValues.Count > 256) {  				uniqueValues = null;  			}  		}  	}  	++count;  }  
Magic Number,Lucene.Net.Codecs.Memory,MemoryDocValuesConsumer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\MemoryDocValuesConsumer.cs,AddNumericField,The following statement contains a magic number: foreach (var nv in values) {  	long v;  	if (nv == null) {  		v = 0;  		missing = true;  	} else {  		v = nv.Value;  	}  	if (gcd != 1) {  		if (v < long.MinValue / 2 || v > long.MaxValue / 2) {  			// in that case v - minValue might overflow and make the GCD computation return  			// wrong results. Since these extreme values are unlikely' we just discard  			// GCD computation for them  			gcd = 1;  		} // minValue needs to be set first  		else if (count != 0) {  			gcd = MathUtil.Gcd (gcd' v - minValue);  		}  	}  	minValue = Math.Min (minValue' v);  	maxValue = Math.Max (maxValue' v);  	if (uniqueValues != null) {  		if (uniqueValues.Add (v)) {  			if (uniqueValues.Count > 256) {  				uniqueValues = null;  			}  		}  	}  	++count;  }  
Magic Number,Lucene.Net.Codecs.Memory,MemoryDocValuesConsumer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\MemoryDocValuesConsumer.cs,AddNumericField,The following statement contains a magic number: if (gcd != 1) {  	if (v < long.MinValue / 2 || v > long.MaxValue / 2) {  		// in that case v - minValue might overflow and make the GCD computation return  		// wrong results. Since these extreme values are unlikely' we just discard  		// GCD computation for them  		gcd = 1;  	} // minValue needs to be set first  	else if (count != 0) {  		gcd = MathUtil.Gcd (gcd' v - minValue);  	}  }  
Magic Number,Lucene.Net.Codecs.Memory,MemoryDocValuesConsumer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\MemoryDocValuesConsumer.cs,AddNumericField,The following statement contains a magic number: if (gcd != 1) {  	if (v < long.MinValue / 2 || v > long.MaxValue / 2) {  		// in that case v - minValue might overflow and make the GCD computation return  		// wrong results. Since these extreme values are unlikely' we just discard  		// GCD computation for them  		gcd = 1;  	} // minValue needs to be set first  	else if (count != 0) {  		gcd = MathUtil.Gcd (gcd' v - minValue);  	}  }  
Magic Number,Lucene.Net.Codecs.Memory,MemoryDocValuesConsumer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\MemoryDocValuesConsumer.cs,AddNumericField,The following statement contains a magic number: if (v < long.MinValue / 2 || v > long.MaxValue / 2) {  	// in that case v - minValue might overflow and make the GCD computation return  	// wrong results. Since these extreme values are unlikely' we just discard  	// GCD computation for them  	gcd = 1;  } // minValue needs to be set first  else if (count != 0) {  	gcd = MathUtil.Gcd (gcd' v - minValue);  }  
Magic Number,Lucene.Net.Codecs.Memory,MemoryDocValuesConsumer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\MemoryDocValuesConsumer.cs,AddNumericField,The following statement contains a magic number: if (v < long.MinValue / 2 || v > long.MaxValue / 2) {  	// in that case v - minValue might overflow and make the GCD computation return  	// wrong results. Since these extreme values are unlikely' we just discard  	// GCD computation for them  	gcd = 1;  } // minValue needs to be set first  else if (count != 0) {  	gcd = MathUtil.Gcd (gcd' v - minValue);  }  
Magic Number,Lucene.Net.Codecs.Memory,MemoryDocValuesConsumer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\MemoryDocValuesConsumer.cs,AddNumericField,The following statement contains a magic number: if (uniqueValues != null) {  	if (uniqueValues.Add (v)) {  		if (uniqueValues.Count > 256) {  			uniqueValues = null;  		}  	}  }  
Magic Number,Lucene.Net.Codecs.Memory,MemoryDocValuesConsumer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\MemoryDocValuesConsumer.cs,AddNumericField,The following statement contains a magic number: if (uniqueValues.Add (v)) {  	if (uniqueValues.Count > 256) {  		uniqueValues = null;  	}  }  
Magic Number,Lucene.Net.Codecs.Memory,MemoryDocValuesConsumer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\MemoryDocValuesConsumer.cs,AddNumericField,The following statement contains a magic number: if (uniqueValues.Count > 256) {  	uniqueValues = null;  }  
Magic Number,Lucene.Net.Codecs.Memory,MemoryDocValuesConsumer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\MemoryDocValuesConsumer.cs,AddNumericField,The following statement contains a magic number: if (uniqueValues != null) {  	// small number of unique values  	int bitsPerValue = PackedInt32s.BitsRequired (uniqueValues.Count - 1);  	FormatAndBits formatAndBits = PackedInt32s.FastestFormatAndBits (maxDoc' bitsPerValue' acceptableOverheadRatio);  	if (formatAndBits.BitsPerValue == 8 && minValue >= sbyte.MinValue && maxValue <= sbyte.MaxValue) {  		meta.WriteByte (MemoryDocValuesProducer.UNCOMPRESSED);  		// uncompressed  		foreach (var nv in values) {  			data.WriteByte ((byte)nv.GetValueOrDefault ());  		}  	} else {  		meta.WriteByte (MemoryDocValuesProducer.TABLE_COMPRESSED);  		// table-compressed  		long?[] decode = uniqueValues.ToArray ();  		var encode = new Dictionary<long?' int?> ();  		data.WriteVInt32 (decode.Length);  		for (int i = 0; i < decode.Length; i++) {  			data.WriteInt64 (decode [i].Value);  			encode [decode [i]] = i;  		}  		meta.WriteVInt32 (PackedInt32s.VERSION_CURRENT);  		data.WriteVInt32 (formatAndBits.Format.Id);  		data.WriteVInt32 (formatAndBits.BitsPerValue);  		PackedInt32s.Writer writer = PackedInt32s.GetWriterNoHeader (data' formatAndBits.Format' maxDoc' formatAndBits.BitsPerValue' PackedInt32s.DEFAULT_BUFFER_SIZE);  		foreach (var nv in values) {  			var v = encode [nv.GetValueOrDefault ()];  			writer.Add ((long)v);  		}  		writer.Finish ();  	}  } else if (gcd != 0 && gcd != 1) {  	meta.WriteByte (MemoryDocValuesProducer.GCD_COMPRESSED);  	meta.WriteVInt32 (PackedInt32s.VERSION_CURRENT);  	data.WriteInt64 (minValue);  	data.WriteInt64 (gcd);  	data.WriteVInt32 (MemoryDocValuesProducer.BLOCK_SIZE);  	var writer = new BlockPackedWriter (data' MemoryDocValuesProducer.BLOCK_SIZE);  	foreach (var nv in values) {  		writer.Add ((nv.GetValueOrDefault () - minValue) / gcd);  	}  	writer.Finish ();  } else {  	meta.WriteByte (MemoryDocValuesProducer.DELTA_COMPRESSED);  	// delta-compressed  	meta.WriteVInt32 (PackedInt32s.VERSION_CURRENT);  	data.WriteVInt32 (MemoryDocValuesProducer.BLOCK_SIZE);  	var writer = new BlockPackedWriter (data' MemoryDocValuesProducer.BLOCK_SIZE);  	foreach (var nv in values) {  		writer.Add (nv.GetValueOrDefault ());  	}  	writer.Finish ();  }  
Magic Number,Lucene.Net.Codecs.Memory,MemoryDocValuesConsumer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\MemoryDocValuesConsumer.cs,AddNumericField,The following statement contains a magic number: if (formatAndBits.BitsPerValue == 8 && minValue >= sbyte.MinValue && maxValue <= sbyte.MaxValue) {  	meta.WriteByte (MemoryDocValuesProducer.UNCOMPRESSED);  	// uncompressed  	foreach (var nv in values) {  		data.WriteByte ((byte)nv.GetValueOrDefault ());  	}  } else {  	meta.WriteByte (MemoryDocValuesProducer.TABLE_COMPRESSED);  	// table-compressed  	long?[] decode = uniqueValues.ToArray ();  	var encode = new Dictionary<long?' int?> ();  	data.WriteVInt32 (decode.Length);  	for (int i = 0; i < decode.Length; i++) {  		data.WriteInt64 (decode [i].Value);  		encode [decode [i]] = i;  	}  	meta.WriteVInt32 (PackedInt32s.VERSION_CURRENT);  	data.WriteVInt32 (formatAndBits.Format.Id);  	data.WriteVInt32 (formatAndBits.BitsPerValue);  	PackedInt32s.Writer writer = PackedInt32s.GetWriterNoHeader (data' formatAndBits.Format' maxDoc' formatAndBits.BitsPerValue' PackedInt32s.DEFAULT_BUFFER_SIZE);  	foreach (var nv in values) {  		var v = encode [nv.GetValueOrDefault ()];  		writer.Add ((long)v);  	}  	writer.Finish ();  }  
Magic Number,Lucene.Net.Codecs.Memory,MemoryDocValuesConsumer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\MemoryDocValuesConsumer.cs,WriteMissingBitset,The following statement contains a magic number: foreach (object v in values) {  	if (count == 64) {  		data.WriteInt64 (bits);  		count = 0;  		bits = 0;  	}  	if (v != null) {  		bits |= 1L << (count & 0x3f);  	}  	count++;  }  
Magic Number,Lucene.Net.Codecs.Memory,MemoryDocValuesConsumer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\MemoryDocValuesConsumer.cs,WriteMissingBitset,The following statement contains a magic number: if (count == 64) {  	data.WriteInt64 (bits);  	count = 0;  	bits = 0;  }  
Magic Number,Lucene.Net.Codecs.Memory,MemoryDocValuesProducer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\MemoryDocValuesProducer.cs,MemoryDocValuesProducer,The following statement contains a magic number: try {  	version = CodecUtil.CheckHeader (@in' metaCodec' VERSION_START' VERSION_CURRENT);  	numerics = new Dictionary<int?' NumericEntry> ();  	binaries = new Dictionary<int?' BinaryEntry> ();  	fsts = new Dictionary<int?' FSTEntry> ();  	ReadFields (@in' state.FieldInfos);  	if (version >= VERSION_CHECKSUM) {  		CodecUtil.CheckFooter (@in);  	} else {  		#pragma  		CodecUtil.CheckEOF (@in);  		#pragma  	}  	ramBytesUsed = new AtomicInt64 (RamUsageEstimator.ShallowSizeOfInstance (this.GetType ()));  	success = true;  } finally {  	if (success) {  		IOUtils.Close (@in);  	} else {  		IOUtils.CloseWhileHandlingException (@in);  	}  }  
Magic Number,Lucene.Net.Codecs.Memory,MemoryDocValuesProducer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\MemoryDocValuesProducer.cs,MemoryDocValuesProducer,The following statement contains a magic number: try {  	version = CodecUtil.CheckHeader (@in' metaCodec' VERSION_START' VERSION_CURRENT);  	numerics = new Dictionary<int?' NumericEntry> ();  	binaries = new Dictionary<int?' BinaryEntry> ();  	fsts = new Dictionary<int?' FSTEntry> ();  	ReadFields (@in' state.FieldInfos);  	if (version >= VERSION_CHECKSUM) {  		CodecUtil.CheckFooter (@in);  	} else {  		#pragma  		CodecUtil.CheckEOF (@in);  		#pragma  	}  	ramBytesUsed = new AtomicInt64 (RamUsageEstimator.ShallowSizeOfInstance (this.GetType ()));  	success = true;  } finally {  	if (success) {  		IOUtils.Close (@in);  	} else {  		IOUtils.CloseWhileHandlingException (@in);  	}  }  
Magic Number,Lucene.Net.Codecs.Memory,MemoryDocValuesProducer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\MemoryDocValuesProducer.cs,MemoryDocValuesProducer,The following statement contains a magic number: try {  	version = CodecUtil.CheckHeader (@in' metaCodec' VERSION_START' VERSION_CURRENT);  	numerics = new Dictionary<int?' NumericEntry> ();  	binaries = new Dictionary<int?' BinaryEntry> ();  	fsts = new Dictionary<int?' FSTEntry> ();  	ReadFields (@in' state.FieldInfos);  	if (version >= VERSION_CHECKSUM) {  		CodecUtil.CheckFooter (@in);  	} else {  		#pragma  		CodecUtil.CheckEOF (@in);  		#pragma  	}  	ramBytesUsed = new AtomicInt64 (RamUsageEstimator.ShallowSizeOfInstance (this.GetType ()));  	success = true;  } finally {  	if (success) {  		IOUtils.Close (@in);  	} else {  		IOUtils.CloseWhileHandlingException (@in);  	}  }  
Magic Number,Lucene.Net.Codecs.Memory,MemoryDocValuesProducer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\MemoryDocValuesProducer.cs,MemoryDocValuesProducer,The following statement contains a magic number: try {  	version = CodecUtil.CheckHeader (@in' metaCodec' VERSION_START' VERSION_CURRENT);  	numerics = new Dictionary<int?' NumericEntry> ();  	binaries = new Dictionary<int?' BinaryEntry> ();  	fsts = new Dictionary<int?' FSTEntry> ();  	ReadFields (@in' state.FieldInfos);  	if (version >= VERSION_CHECKSUM) {  		CodecUtil.CheckFooter (@in);  	} else {  		#pragma  		CodecUtil.CheckEOF (@in);  		#pragma  	}  	ramBytesUsed = new AtomicInt64 (RamUsageEstimator.ShallowSizeOfInstance (this.GetType ()));  	success = true;  } finally {  	if (success) {  		IOUtils.Close (@in);  	} else {  		IOUtils.CloseWhileHandlingException (@in);  	}  }  
Magic Number,Lucene.Net.Codecs.Memory,MemoryDocValuesProducer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\MemoryDocValuesProducer.cs,MemoryDocValuesProducer,The following statement contains a magic number: if (version >= VERSION_CHECKSUM) {  	CodecUtil.CheckFooter (@in);  } else {  	#pragma  	CodecUtil.CheckEOF (@in);  	#pragma  }  
Magic Number,Lucene.Net.Codecs.Memory,MemoryDocValuesProducer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\MemoryDocValuesProducer.cs,MemoryDocValuesProducer,The following statement contains a magic number: if (version >= VERSION_CHECKSUM) {  	CodecUtil.CheckFooter (@in);  } else {  	#pragma  	CodecUtil.CheckEOF (@in);  	#pragma  }  
Magic Number,Lucene.Net.Codecs.Memory,MemoryDocValuesProducer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\MemoryDocValuesProducer.cs,MemoryDocValuesProducer,The following statement contains a magic number: if (version >= VERSION_CHECKSUM) {  	CodecUtil.CheckFooter (@in);  } else {  	#pragma  	CodecUtil.CheckEOF (@in);  	#pragma  }  
Magic Number,Lucene.Net.Codecs.Memory,MemoryDocValuesProducer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\MemoryDocValuesProducer.cs,MemoryDocValuesProducer,The following statement contains a magic number: if (version >= VERSION_CHECKSUM) {  	CodecUtil.CheckFooter (@in);  } else {  	#pragma  	CodecUtil.CheckEOF (@in);  	#pragma  }  
Magic Number,Lucene.Net.Codecs.Memory,MemoryDocValuesProducer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\MemoryDocValuesProducer.cs,LoadNumeric,The following statement contains a magic number: switch (entry.format) {  case TABLE_COMPRESSED:  	int size = data.ReadVInt32 ();  	if (size > 256) {  		throw new CorruptIndexException ("TABLE_COMPRESSED cannot have more than 256 distinct values' input=" + data);  	}  	var decode = new long[size];  	for (int i = 0; i < decode.Length; i++) {  		decode [i] = data.ReadInt64 ();  	}  	int formatID = data.ReadVInt32 ();  	int bitsPerValue = data.ReadVInt32 ();  	var ordsReader = PackedInt32s.GetReaderNoHeader (data' PackedInt32s.Format.ById (formatID)' entry.packedIntsVersion' maxDoc' bitsPerValue);  	ramBytesUsed.AddAndGet (RamUsageEstimator.SizeOf (decode) + ordsReader.RamBytesUsed ());  	return new NumericDocValuesAnonymousInnerClassHelper (this' decode' ordsReader);  case DELTA_COMPRESSED:  	int blockSize = data.ReadVInt32 ();  	var reader = new BlockPackedReader (data' entry.packedIntsVersion' blockSize' maxDoc' false);  	ramBytesUsed.AddAndGet (reader.RamBytesUsed ());  	return reader;  case UNCOMPRESSED:  	var bytes = new byte[maxDoc];  	data.ReadBytes (bytes' 0' bytes.Length);  	ramBytesUsed.AddAndGet (RamUsageEstimator.SizeOf (bytes));  	// LUCENENET: IMPORTANT - some bytes are negative here' so we need to pass as sbyte  	return new NumericDocValuesAnonymousInnerClassHelper2 (this' (sbyte[])(Array)bytes);  case GCD_COMPRESSED:  	long min = data.ReadInt64 ();  	long mult = data.ReadInt64 ();  	int quotientBlockSize = data.ReadVInt32 ();  	var quotientReader = new BlockPackedReader (data' entry.packedIntsVersion' quotientBlockSize' maxDoc' false);  	ramBytesUsed.AddAndGet (quotientReader.RamBytesUsed ());  	return new NumericDocValuesAnonymousInnerClassHelper3 (this' min' mult' quotientReader);  default:  	throw new InvalidOperationException ();  }  
Magic Number,Lucene.Net.Codecs.Memory,MemoryDocValuesProducer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\MemoryDocValuesProducer.cs,LoadNumeric,The following statement contains a magic number: if (size > 256) {  	throw new CorruptIndexException ("TABLE_COMPRESSED cannot have more than 256 distinct values' input=" + data);  }  
Magic Number,Lucene.Net.Codecs.Memory,MemoryDocValuesProducer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\MemoryDocValuesProducer.cs,GetMissingBits,The following statement contains a magic number: if (offset == -1) {  	return new Bits.MatchAllBits (maxDoc);  } else {  	IBits instance;  	lock (this) {  		if (!docsWithFieldInstances.TryGetValue (fieldNumber' out instance)) {  			var data = (IndexInput)this.data.Clone ();  			data.Seek (offset);  			Debug.Assert (length % 8 == 0);  			var bits = new long[(int)length >> 3];  			for (var i = 0; i < bits.Length; i++) {  				bits [i] = data.ReadInt64 ();  			}  			instance = new FixedBitSet (bits' maxDoc);  			docsWithFieldInstances [fieldNumber] = instance;  		}  	}  	return instance;  }  
Magic Number,Lucene.Net.Codecs.Memory,MemoryDocValuesProducer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\MemoryDocValuesProducer.cs,GetMissingBits,The following statement contains a magic number: if (offset == -1) {  	return new Bits.MatchAllBits (maxDoc);  } else {  	IBits instance;  	lock (this) {  		if (!docsWithFieldInstances.TryGetValue (fieldNumber' out instance)) {  			var data = (IndexInput)this.data.Clone ();  			data.Seek (offset);  			Debug.Assert (length % 8 == 0);  			var bits = new long[(int)length >> 3];  			for (var i = 0; i < bits.Length; i++) {  				bits [i] = data.ReadInt64 ();  			}  			instance = new FixedBitSet (bits' maxDoc);  			docsWithFieldInstances [fieldNumber] = instance;  		}  	}  	return instance;  }  
Magic Number,Lucene.Net.Codecs.Memory,MemoryDocValuesProducer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\MemoryDocValuesProducer.cs,GetMissingBits,The following statement contains a magic number: lock (this) {  	if (!docsWithFieldInstances.TryGetValue (fieldNumber' out instance)) {  		var data = (IndexInput)this.data.Clone ();  		data.Seek (offset);  		Debug.Assert (length % 8 == 0);  		var bits = new long[(int)length >> 3];  		for (var i = 0; i < bits.Length; i++) {  			bits [i] = data.ReadInt64 ();  		}  		instance = new FixedBitSet (bits' maxDoc);  		docsWithFieldInstances [fieldNumber] = instance;  	}  }  
Magic Number,Lucene.Net.Codecs.Memory,MemoryDocValuesProducer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\MemoryDocValuesProducer.cs,GetMissingBits,The following statement contains a magic number: lock (this) {  	if (!docsWithFieldInstances.TryGetValue (fieldNumber' out instance)) {  		var data = (IndexInput)this.data.Clone ();  		data.Seek (offset);  		Debug.Assert (length % 8 == 0);  		var bits = new long[(int)length >> 3];  		for (var i = 0; i < bits.Length; i++) {  			bits [i] = data.ReadInt64 ();  		}  		instance = new FixedBitSet (bits' maxDoc);  		docsWithFieldInstances [fieldNumber] = instance;  	}  }  
Magic Number,Lucene.Net.Codecs.Memory,MemoryDocValuesProducer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\MemoryDocValuesProducer.cs,GetMissingBits,The following statement contains a magic number: if (!docsWithFieldInstances.TryGetValue (fieldNumber' out instance)) {  	var data = (IndexInput)this.data.Clone ();  	data.Seek (offset);  	Debug.Assert (length % 8 == 0);  	var bits = new long[(int)length >> 3];  	for (var i = 0; i < bits.Length; i++) {  		bits [i] = data.ReadInt64 ();  	}  	instance = new FixedBitSet (bits' maxDoc);  	docsWithFieldInstances [fieldNumber] = instance;  }  
Magic Number,Lucene.Net.Codecs.Memory,MemoryDocValuesProducer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\MemoryDocValuesProducer.cs,GetMissingBits,The following statement contains a magic number: if (!docsWithFieldInstances.TryGetValue (fieldNumber' out instance)) {  	var data = (IndexInput)this.data.Clone ();  	data.Seek (offset);  	Debug.Assert (length % 8 == 0);  	var bits = new long[(int)length >> 3];  	for (var i = 0; i < bits.Length; i++) {  		bits [i] = data.ReadInt64 ();  	}  	instance = new FixedBitSet (bits' maxDoc);  	docsWithFieldInstances [fieldNumber] = instance;  }  
Magic Number,Lucene.Net.Codecs.Memory,MemoryDocValuesProducer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\MemoryDocValuesProducer.cs,GetMissingBits,The following statement contains a magic number: Debug.Assert (length % 8 == 0);  
Magic Number,Lucene.Net.Codecs.SimpleText,SimpleTextDocValuesReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\SimpleText\SimpleTextDocValuesReader.cs,SimpleTextDocValuesReader,The following statement contains a magic number: while (true) {  	ReadLine ();  	if (scratch.Equals (SimpleTextDocValuesWriter.END)) {  		break;  	}  	Debug.Assert (StartsWith (SimpleTextDocValuesWriter.FIELD)' scratch.Utf8ToString ());  	var fieldName = StripPrefix (SimpleTextDocValuesWriter.FIELD);  	var field = new OneField ();  	fields [fieldName] = field;  	ReadLine ();  	Debug.Assert (StartsWith (SimpleTextDocValuesWriter.TYPE)' scratch.Utf8ToString ());  	var dvType = (DocValuesType)Enum.Parse (typeof(DocValuesType)' StripPrefix (SimpleTextDocValuesWriter.TYPE));  	if (dvType == DocValuesType.NUMERIC) {  		ReadLine ();  		Debug.Assert (StartsWith (SimpleTextDocValuesWriter.MINVALUE)' "got " + scratch.Utf8ToString () + " field=" + fieldName + " ext=" + ext);  		field.MinValue = Convert.ToInt64 (StripPrefix (SimpleTextDocValuesWriter.MINVALUE)' CultureInfo.InvariantCulture);  		ReadLine ();  		Debug.Assert (StartsWith (SimpleTextDocValuesWriter.PATTERN));  		field.Pattern = StripPrefix (SimpleTextDocValuesWriter.PATTERN);  		field.DataStartFilePointer = data.GetFilePointer ();  		data.Seek (data.GetFilePointer () + (1 + field.Pattern.Length + 2) * maxDoc);  	} else if (dvType == DocValuesType.BINARY) {  		ReadLine ();  		Debug.Assert (StartsWith (SimpleTextDocValuesWriter.MAXLENGTH));  		field.MaxLength = Convert.ToInt32 (StripPrefix (SimpleTextDocValuesWriter.MAXLENGTH)' CultureInfo.InvariantCulture);  		ReadLine ();  		Debug.Assert (StartsWith (SimpleTextDocValuesWriter.PATTERN));  		field.Pattern = StripPrefix (SimpleTextDocValuesWriter.PATTERN);  		field.DataStartFilePointer = data.GetFilePointer ();  		data.Seek (data.GetFilePointer () + (9 + field.Pattern.Length + field.MaxLength + 2) * maxDoc);  	} else if (dvType == DocValuesType.SORTED || dvType == DocValuesType.SORTED_SET) {  		ReadLine ();  		Debug.Assert (StartsWith (SimpleTextDocValuesWriter.NUMVALUES));  		field.NumValues = Convert.ToInt64 (StripPrefix (SimpleTextDocValuesWriter.NUMVALUES)' CultureInfo.InvariantCulture);  		ReadLine ();  		Debug.Assert (StartsWith (SimpleTextDocValuesWriter.MAXLENGTH));  		field.MaxLength = Convert.ToInt32 (StripPrefix (SimpleTextDocValuesWriter.MAXLENGTH)' CultureInfo.InvariantCulture);  		ReadLine ();  		Debug.Assert (StartsWith (SimpleTextDocValuesWriter.PATTERN));  		field.Pattern = StripPrefix (SimpleTextDocValuesWriter.PATTERN);  		ReadLine ();  		Debug.Assert (StartsWith (SimpleTextDocValuesWriter.ORDPATTERN));  		field.OrdPattern = StripPrefix (SimpleTextDocValuesWriter.ORDPATTERN);  		field.DataStartFilePointer = data.GetFilePointer ();  		data.Seek (data.GetFilePointer () + (9 + field.Pattern.Length + field.MaxLength) * field.NumValues + (1 + field.OrdPattern.Length) * maxDoc);  	} else {  		throw new ArgumentOutOfRangeException ();  	}  }  
Magic Number,Lucene.Net.Codecs.SimpleText,SimpleTextDocValuesReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\SimpleText\SimpleTextDocValuesReader.cs,SimpleTextDocValuesReader,The following statement contains a magic number: while (true) {  	ReadLine ();  	if (scratch.Equals (SimpleTextDocValuesWriter.END)) {  		break;  	}  	Debug.Assert (StartsWith (SimpleTextDocValuesWriter.FIELD)' scratch.Utf8ToString ());  	var fieldName = StripPrefix (SimpleTextDocValuesWriter.FIELD);  	var field = new OneField ();  	fields [fieldName] = field;  	ReadLine ();  	Debug.Assert (StartsWith (SimpleTextDocValuesWriter.TYPE)' scratch.Utf8ToString ());  	var dvType = (DocValuesType)Enum.Parse (typeof(DocValuesType)' StripPrefix (SimpleTextDocValuesWriter.TYPE));  	if (dvType == DocValuesType.NUMERIC) {  		ReadLine ();  		Debug.Assert (StartsWith (SimpleTextDocValuesWriter.MINVALUE)' "got " + scratch.Utf8ToString () + " field=" + fieldName + " ext=" + ext);  		field.MinValue = Convert.ToInt64 (StripPrefix (SimpleTextDocValuesWriter.MINVALUE)' CultureInfo.InvariantCulture);  		ReadLine ();  		Debug.Assert (StartsWith (SimpleTextDocValuesWriter.PATTERN));  		field.Pattern = StripPrefix (SimpleTextDocValuesWriter.PATTERN);  		field.DataStartFilePointer = data.GetFilePointer ();  		data.Seek (data.GetFilePointer () + (1 + field.Pattern.Length + 2) * maxDoc);  	} else if (dvType == DocValuesType.BINARY) {  		ReadLine ();  		Debug.Assert (StartsWith (SimpleTextDocValuesWriter.MAXLENGTH));  		field.MaxLength = Convert.ToInt32 (StripPrefix (SimpleTextDocValuesWriter.MAXLENGTH)' CultureInfo.InvariantCulture);  		ReadLine ();  		Debug.Assert (StartsWith (SimpleTextDocValuesWriter.PATTERN));  		field.Pattern = StripPrefix (SimpleTextDocValuesWriter.PATTERN);  		field.DataStartFilePointer = data.GetFilePointer ();  		data.Seek (data.GetFilePointer () + (9 + field.Pattern.Length + field.MaxLength + 2) * maxDoc);  	} else if (dvType == DocValuesType.SORTED || dvType == DocValuesType.SORTED_SET) {  		ReadLine ();  		Debug.Assert (StartsWith (SimpleTextDocValuesWriter.NUMVALUES));  		field.NumValues = Convert.ToInt64 (StripPrefix (SimpleTextDocValuesWriter.NUMVALUES)' CultureInfo.InvariantCulture);  		ReadLine ();  		Debug.Assert (StartsWith (SimpleTextDocValuesWriter.MAXLENGTH));  		field.MaxLength = Convert.ToInt32 (StripPrefix (SimpleTextDocValuesWriter.MAXLENGTH)' CultureInfo.InvariantCulture);  		ReadLine ();  		Debug.Assert (StartsWith (SimpleTextDocValuesWriter.PATTERN));  		field.Pattern = StripPrefix (SimpleTextDocValuesWriter.PATTERN);  		ReadLine ();  		Debug.Assert (StartsWith (SimpleTextDocValuesWriter.ORDPATTERN));  		field.OrdPattern = StripPrefix (SimpleTextDocValuesWriter.ORDPATTERN);  		field.DataStartFilePointer = data.GetFilePointer ();  		data.Seek (data.GetFilePointer () + (9 + field.Pattern.Length + field.MaxLength) * field.NumValues + (1 + field.OrdPattern.Length) * maxDoc);  	} else {  		throw new ArgumentOutOfRangeException ();  	}  }  
Magic Number,Lucene.Net.Codecs.SimpleText,SimpleTextDocValuesReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\SimpleText\SimpleTextDocValuesReader.cs,SimpleTextDocValuesReader,The following statement contains a magic number: while (true) {  	ReadLine ();  	if (scratch.Equals (SimpleTextDocValuesWriter.END)) {  		break;  	}  	Debug.Assert (StartsWith (SimpleTextDocValuesWriter.FIELD)' scratch.Utf8ToString ());  	var fieldName = StripPrefix (SimpleTextDocValuesWriter.FIELD);  	var field = new OneField ();  	fields [fieldName] = field;  	ReadLine ();  	Debug.Assert (StartsWith (SimpleTextDocValuesWriter.TYPE)' scratch.Utf8ToString ());  	var dvType = (DocValuesType)Enum.Parse (typeof(DocValuesType)' StripPrefix (SimpleTextDocValuesWriter.TYPE));  	if (dvType == DocValuesType.NUMERIC) {  		ReadLine ();  		Debug.Assert (StartsWith (SimpleTextDocValuesWriter.MINVALUE)' "got " + scratch.Utf8ToString () + " field=" + fieldName + " ext=" + ext);  		field.MinValue = Convert.ToInt64 (StripPrefix (SimpleTextDocValuesWriter.MINVALUE)' CultureInfo.InvariantCulture);  		ReadLine ();  		Debug.Assert (StartsWith (SimpleTextDocValuesWriter.PATTERN));  		field.Pattern = StripPrefix (SimpleTextDocValuesWriter.PATTERN);  		field.DataStartFilePointer = data.GetFilePointer ();  		data.Seek (data.GetFilePointer () + (1 + field.Pattern.Length + 2) * maxDoc);  	} else if (dvType == DocValuesType.BINARY) {  		ReadLine ();  		Debug.Assert (StartsWith (SimpleTextDocValuesWriter.MAXLENGTH));  		field.MaxLength = Convert.ToInt32 (StripPrefix (SimpleTextDocValuesWriter.MAXLENGTH)' CultureInfo.InvariantCulture);  		ReadLine ();  		Debug.Assert (StartsWith (SimpleTextDocValuesWriter.PATTERN));  		field.Pattern = StripPrefix (SimpleTextDocValuesWriter.PATTERN);  		field.DataStartFilePointer = data.GetFilePointer ();  		data.Seek (data.GetFilePointer () + (9 + field.Pattern.Length + field.MaxLength + 2) * maxDoc);  	} else if (dvType == DocValuesType.SORTED || dvType == DocValuesType.SORTED_SET) {  		ReadLine ();  		Debug.Assert (StartsWith (SimpleTextDocValuesWriter.NUMVALUES));  		field.NumValues = Convert.ToInt64 (StripPrefix (SimpleTextDocValuesWriter.NUMVALUES)' CultureInfo.InvariantCulture);  		ReadLine ();  		Debug.Assert (StartsWith (SimpleTextDocValuesWriter.MAXLENGTH));  		field.MaxLength = Convert.ToInt32 (StripPrefix (SimpleTextDocValuesWriter.MAXLENGTH)' CultureInfo.InvariantCulture);  		ReadLine ();  		Debug.Assert (StartsWith (SimpleTextDocValuesWriter.PATTERN));  		field.Pattern = StripPrefix (SimpleTextDocValuesWriter.PATTERN);  		ReadLine ();  		Debug.Assert (StartsWith (SimpleTextDocValuesWriter.ORDPATTERN));  		field.OrdPattern = StripPrefix (SimpleTextDocValuesWriter.ORDPATTERN);  		field.DataStartFilePointer = data.GetFilePointer ();  		data.Seek (data.GetFilePointer () + (9 + field.Pattern.Length + field.MaxLength) * field.NumValues + (1 + field.OrdPattern.Length) * maxDoc);  	} else {  		throw new ArgumentOutOfRangeException ();  	}  }  
Magic Number,Lucene.Net.Codecs.SimpleText,SimpleTextDocValuesReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\SimpleText\SimpleTextDocValuesReader.cs,SimpleTextDocValuesReader,The following statement contains a magic number: while (true) {  	ReadLine ();  	if (scratch.Equals (SimpleTextDocValuesWriter.END)) {  		break;  	}  	Debug.Assert (StartsWith (SimpleTextDocValuesWriter.FIELD)' scratch.Utf8ToString ());  	var fieldName = StripPrefix (SimpleTextDocValuesWriter.FIELD);  	var field = new OneField ();  	fields [fieldName] = field;  	ReadLine ();  	Debug.Assert (StartsWith (SimpleTextDocValuesWriter.TYPE)' scratch.Utf8ToString ());  	var dvType = (DocValuesType)Enum.Parse (typeof(DocValuesType)' StripPrefix (SimpleTextDocValuesWriter.TYPE));  	if (dvType == DocValuesType.NUMERIC) {  		ReadLine ();  		Debug.Assert (StartsWith (SimpleTextDocValuesWriter.MINVALUE)' "got " + scratch.Utf8ToString () + " field=" + fieldName + " ext=" + ext);  		field.MinValue = Convert.ToInt64 (StripPrefix (SimpleTextDocValuesWriter.MINVALUE)' CultureInfo.InvariantCulture);  		ReadLine ();  		Debug.Assert (StartsWith (SimpleTextDocValuesWriter.PATTERN));  		field.Pattern = StripPrefix (SimpleTextDocValuesWriter.PATTERN);  		field.DataStartFilePointer = data.GetFilePointer ();  		data.Seek (data.GetFilePointer () + (1 + field.Pattern.Length + 2) * maxDoc);  	} else if (dvType == DocValuesType.BINARY) {  		ReadLine ();  		Debug.Assert (StartsWith (SimpleTextDocValuesWriter.MAXLENGTH));  		field.MaxLength = Convert.ToInt32 (StripPrefix (SimpleTextDocValuesWriter.MAXLENGTH)' CultureInfo.InvariantCulture);  		ReadLine ();  		Debug.Assert (StartsWith (SimpleTextDocValuesWriter.PATTERN));  		field.Pattern = StripPrefix (SimpleTextDocValuesWriter.PATTERN);  		field.DataStartFilePointer = data.GetFilePointer ();  		data.Seek (data.GetFilePointer () + (9 + field.Pattern.Length + field.MaxLength + 2) * maxDoc);  	} else if (dvType == DocValuesType.SORTED || dvType == DocValuesType.SORTED_SET) {  		ReadLine ();  		Debug.Assert (StartsWith (SimpleTextDocValuesWriter.NUMVALUES));  		field.NumValues = Convert.ToInt64 (StripPrefix (SimpleTextDocValuesWriter.NUMVALUES)' CultureInfo.InvariantCulture);  		ReadLine ();  		Debug.Assert (StartsWith (SimpleTextDocValuesWriter.MAXLENGTH));  		field.MaxLength = Convert.ToInt32 (StripPrefix (SimpleTextDocValuesWriter.MAXLENGTH)' CultureInfo.InvariantCulture);  		ReadLine ();  		Debug.Assert (StartsWith (SimpleTextDocValuesWriter.PATTERN));  		field.Pattern = StripPrefix (SimpleTextDocValuesWriter.PATTERN);  		ReadLine ();  		Debug.Assert (StartsWith (SimpleTextDocValuesWriter.ORDPATTERN));  		field.OrdPattern = StripPrefix (SimpleTextDocValuesWriter.ORDPATTERN);  		field.DataStartFilePointer = data.GetFilePointer ();  		data.Seek (data.GetFilePointer () + (9 + field.Pattern.Length + field.MaxLength) * field.NumValues + (1 + field.OrdPattern.Length) * maxDoc);  	} else {  		throw new ArgumentOutOfRangeException ();  	}  }  
Magic Number,Lucene.Net.Codecs.SimpleText,SimpleTextDocValuesReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\SimpleText\SimpleTextDocValuesReader.cs,SimpleTextDocValuesReader,The following statement contains a magic number: if (dvType == DocValuesType.NUMERIC) {  	ReadLine ();  	Debug.Assert (StartsWith (SimpleTextDocValuesWriter.MINVALUE)' "got " + scratch.Utf8ToString () + " field=" + fieldName + " ext=" + ext);  	field.MinValue = Convert.ToInt64 (StripPrefix (SimpleTextDocValuesWriter.MINVALUE)' CultureInfo.InvariantCulture);  	ReadLine ();  	Debug.Assert (StartsWith (SimpleTextDocValuesWriter.PATTERN));  	field.Pattern = StripPrefix (SimpleTextDocValuesWriter.PATTERN);  	field.DataStartFilePointer = data.GetFilePointer ();  	data.Seek (data.GetFilePointer () + (1 + field.Pattern.Length + 2) * maxDoc);  } else if (dvType == DocValuesType.BINARY) {  	ReadLine ();  	Debug.Assert (StartsWith (SimpleTextDocValuesWriter.MAXLENGTH));  	field.MaxLength = Convert.ToInt32 (StripPrefix (SimpleTextDocValuesWriter.MAXLENGTH)' CultureInfo.InvariantCulture);  	ReadLine ();  	Debug.Assert (StartsWith (SimpleTextDocValuesWriter.PATTERN));  	field.Pattern = StripPrefix (SimpleTextDocValuesWriter.PATTERN);  	field.DataStartFilePointer = data.GetFilePointer ();  	data.Seek (data.GetFilePointer () + (9 + field.Pattern.Length + field.MaxLength + 2) * maxDoc);  } else if (dvType == DocValuesType.SORTED || dvType == DocValuesType.SORTED_SET) {  	ReadLine ();  	Debug.Assert (StartsWith (SimpleTextDocValuesWriter.NUMVALUES));  	field.NumValues = Convert.ToInt64 (StripPrefix (SimpleTextDocValuesWriter.NUMVALUES)' CultureInfo.InvariantCulture);  	ReadLine ();  	Debug.Assert (StartsWith (SimpleTextDocValuesWriter.MAXLENGTH));  	field.MaxLength = Convert.ToInt32 (StripPrefix (SimpleTextDocValuesWriter.MAXLENGTH)' CultureInfo.InvariantCulture);  	ReadLine ();  	Debug.Assert (StartsWith (SimpleTextDocValuesWriter.PATTERN));  	field.Pattern = StripPrefix (SimpleTextDocValuesWriter.PATTERN);  	ReadLine ();  	Debug.Assert (StartsWith (SimpleTextDocValuesWriter.ORDPATTERN));  	field.OrdPattern = StripPrefix (SimpleTextDocValuesWriter.ORDPATTERN);  	field.DataStartFilePointer = data.GetFilePointer ();  	data.Seek (data.GetFilePointer () + (9 + field.Pattern.Length + field.MaxLength) * field.NumValues + (1 + field.OrdPattern.Length) * maxDoc);  } else {  	throw new ArgumentOutOfRangeException ();  }  
Magic Number,Lucene.Net.Codecs.SimpleText,SimpleTextDocValuesReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\SimpleText\SimpleTextDocValuesReader.cs,SimpleTextDocValuesReader,The following statement contains a magic number: if (dvType == DocValuesType.NUMERIC) {  	ReadLine ();  	Debug.Assert (StartsWith (SimpleTextDocValuesWriter.MINVALUE)' "got " + scratch.Utf8ToString () + " field=" + fieldName + " ext=" + ext);  	field.MinValue = Convert.ToInt64 (StripPrefix (SimpleTextDocValuesWriter.MINVALUE)' CultureInfo.InvariantCulture);  	ReadLine ();  	Debug.Assert (StartsWith (SimpleTextDocValuesWriter.PATTERN));  	field.Pattern = StripPrefix (SimpleTextDocValuesWriter.PATTERN);  	field.DataStartFilePointer = data.GetFilePointer ();  	data.Seek (data.GetFilePointer () + (1 + field.Pattern.Length + 2) * maxDoc);  } else if (dvType == DocValuesType.BINARY) {  	ReadLine ();  	Debug.Assert (StartsWith (SimpleTextDocValuesWriter.MAXLENGTH));  	field.MaxLength = Convert.ToInt32 (StripPrefix (SimpleTextDocValuesWriter.MAXLENGTH)' CultureInfo.InvariantCulture);  	ReadLine ();  	Debug.Assert (StartsWith (SimpleTextDocValuesWriter.PATTERN));  	field.Pattern = StripPrefix (SimpleTextDocValuesWriter.PATTERN);  	field.DataStartFilePointer = data.GetFilePointer ();  	data.Seek (data.GetFilePointer () + (9 + field.Pattern.Length + field.MaxLength + 2) * maxDoc);  } else if (dvType == DocValuesType.SORTED || dvType == DocValuesType.SORTED_SET) {  	ReadLine ();  	Debug.Assert (StartsWith (SimpleTextDocValuesWriter.NUMVALUES));  	field.NumValues = Convert.ToInt64 (StripPrefix (SimpleTextDocValuesWriter.NUMVALUES)' CultureInfo.InvariantCulture);  	ReadLine ();  	Debug.Assert (StartsWith (SimpleTextDocValuesWriter.MAXLENGTH));  	field.MaxLength = Convert.ToInt32 (StripPrefix (SimpleTextDocValuesWriter.MAXLENGTH)' CultureInfo.InvariantCulture);  	ReadLine ();  	Debug.Assert (StartsWith (SimpleTextDocValuesWriter.PATTERN));  	field.Pattern = StripPrefix (SimpleTextDocValuesWriter.PATTERN);  	ReadLine ();  	Debug.Assert (StartsWith (SimpleTextDocValuesWriter.ORDPATTERN));  	field.OrdPattern = StripPrefix (SimpleTextDocValuesWriter.ORDPATTERN);  	field.DataStartFilePointer = data.GetFilePointer ();  	data.Seek (data.GetFilePointer () + (9 + field.Pattern.Length + field.MaxLength) * field.NumValues + (1 + field.OrdPattern.Length) * maxDoc);  } else {  	throw new ArgumentOutOfRangeException ();  }  
Magic Number,Lucene.Net.Codecs.SimpleText,SimpleTextDocValuesReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\SimpleText\SimpleTextDocValuesReader.cs,SimpleTextDocValuesReader,The following statement contains a magic number: if (dvType == DocValuesType.NUMERIC) {  	ReadLine ();  	Debug.Assert (StartsWith (SimpleTextDocValuesWriter.MINVALUE)' "got " + scratch.Utf8ToString () + " field=" + fieldName + " ext=" + ext);  	field.MinValue = Convert.ToInt64 (StripPrefix (SimpleTextDocValuesWriter.MINVALUE)' CultureInfo.InvariantCulture);  	ReadLine ();  	Debug.Assert (StartsWith (SimpleTextDocValuesWriter.PATTERN));  	field.Pattern = StripPrefix (SimpleTextDocValuesWriter.PATTERN);  	field.DataStartFilePointer = data.GetFilePointer ();  	data.Seek (data.GetFilePointer () + (1 + field.Pattern.Length + 2) * maxDoc);  } else if (dvType == DocValuesType.BINARY) {  	ReadLine ();  	Debug.Assert (StartsWith (SimpleTextDocValuesWriter.MAXLENGTH));  	field.MaxLength = Convert.ToInt32 (StripPrefix (SimpleTextDocValuesWriter.MAXLENGTH)' CultureInfo.InvariantCulture);  	ReadLine ();  	Debug.Assert (StartsWith (SimpleTextDocValuesWriter.PATTERN));  	field.Pattern = StripPrefix (SimpleTextDocValuesWriter.PATTERN);  	field.DataStartFilePointer = data.GetFilePointer ();  	data.Seek (data.GetFilePointer () + (9 + field.Pattern.Length + field.MaxLength + 2) * maxDoc);  } else if (dvType == DocValuesType.SORTED || dvType == DocValuesType.SORTED_SET) {  	ReadLine ();  	Debug.Assert (StartsWith (SimpleTextDocValuesWriter.NUMVALUES));  	field.NumValues = Convert.ToInt64 (StripPrefix (SimpleTextDocValuesWriter.NUMVALUES)' CultureInfo.InvariantCulture);  	ReadLine ();  	Debug.Assert (StartsWith (SimpleTextDocValuesWriter.MAXLENGTH));  	field.MaxLength = Convert.ToInt32 (StripPrefix (SimpleTextDocValuesWriter.MAXLENGTH)' CultureInfo.InvariantCulture);  	ReadLine ();  	Debug.Assert (StartsWith (SimpleTextDocValuesWriter.PATTERN));  	field.Pattern = StripPrefix (SimpleTextDocValuesWriter.PATTERN);  	ReadLine ();  	Debug.Assert (StartsWith (SimpleTextDocValuesWriter.ORDPATTERN));  	field.OrdPattern = StripPrefix (SimpleTextDocValuesWriter.ORDPATTERN);  	field.DataStartFilePointer = data.GetFilePointer ();  	data.Seek (data.GetFilePointer () + (9 + field.Pattern.Length + field.MaxLength) * field.NumValues + (1 + field.OrdPattern.Length) * maxDoc);  } else {  	throw new ArgumentOutOfRangeException ();  }  
Magic Number,Lucene.Net.Codecs.SimpleText,SimpleTextDocValuesReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\SimpleText\SimpleTextDocValuesReader.cs,SimpleTextDocValuesReader,The following statement contains a magic number: if (dvType == DocValuesType.NUMERIC) {  	ReadLine ();  	Debug.Assert (StartsWith (SimpleTextDocValuesWriter.MINVALUE)' "got " + scratch.Utf8ToString () + " field=" + fieldName + " ext=" + ext);  	field.MinValue = Convert.ToInt64 (StripPrefix (SimpleTextDocValuesWriter.MINVALUE)' CultureInfo.InvariantCulture);  	ReadLine ();  	Debug.Assert (StartsWith (SimpleTextDocValuesWriter.PATTERN));  	field.Pattern = StripPrefix (SimpleTextDocValuesWriter.PATTERN);  	field.DataStartFilePointer = data.GetFilePointer ();  	data.Seek (data.GetFilePointer () + (1 + field.Pattern.Length + 2) * maxDoc);  } else if (dvType == DocValuesType.BINARY) {  	ReadLine ();  	Debug.Assert (StartsWith (SimpleTextDocValuesWriter.MAXLENGTH));  	field.MaxLength = Convert.ToInt32 (StripPrefix (SimpleTextDocValuesWriter.MAXLENGTH)' CultureInfo.InvariantCulture);  	ReadLine ();  	Debug.Assert (StartsWith (SimpleTextDocValuesWriter.PATTERN));  	field.Pattern = StripPrefix (SimpleTextDocValuesWriter.PATTERN);  	field.DataStartFilePointer = data.GetFilePointer ();  	data.Seek (data.GetFilePointer () + (9 + field.Pattern.Length + field.MaxLength + 2) * maxDoc);  } else if (dvType == DocValuesType.SORTED || dvType == DocValuesType.SORTED_SET) {  	ReadLine ();  	Debug.Assert (StartsWith (SimpleTextDocValuesWriter.NUMVALUES));  	field.NumValues = Convert.ToInt64 (StripPrefix (SimpleTextDocValuesWriter.NUMVALUES)' CultureInfo.InvariantCulture);  	ReadLine ();  	Debug.Assert (StartsWith (SimpleTextDocValuesWriter.MAXLENGTH));  	field.MaxLength = Convert.ToInt32 (StripPrefix (SimpleTextDocValuesWriter.MAXLENGTH)' CultureInfo.InvariantCulture);  	ReadLine ();  	Debug.Assert (StartsWith (SimpleTextDocValuesWriter.PATTERN));  	field.Pattern = StripPrefix (SimpleTextDocValuesWriter.PATTERN);  	ReadLine ();  	Debug.Assert (StartsWith (SimpleTextDocValuesWriter.ORDPATTERN));  	field.OrdPattern = StripPrefix (SimpleTextDocValuesWriter.ORDPATTERN);  	field.DataStartFilePointer = data.GetFilePointer ();  	data.Seek (data.GetFilePointer () + (9 + field.Pattern.Length + field.MaxLength) * field.NumValues + (1 + field.OrdPattern.Length) * maxDoc);  } else {  	throw new ArgumentOutOfRangeException ();  }  
Magic Number,Lucene.Net.Codecs.SimpleText,SimpleTextDocValuesReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\SimpleText\SimpleTextDocValuesReader.cs,SimpleTextDocValuesReader,The following statement contains a magic number: data.Seek (data.GetFilePointer () + (1 + field.Pattern.Length + 2) * maxDoc);  
Magic Number,Lucene.Net.Codecs.SimpleText,SimpleTextDocValuesReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\SimpleText\SimpleTextDocValuesReader.cs,SimpleTextDocValuesReader,The following statement contains a magic number: if (dvType == DocValuesType.BINARY) {  	ReadLine ();  	Debug.Assert (StartsWith (SimpleTextDocValuesWriter.MAXLENGTH));  	field.MaxLength = Convert.ToInt32 (StripPrefix (SimpleTextDocValuesWriter.MAXLENGTH)' CultureInfo.InvariantCulture);  	ReadLine ();  	Debug.Assert (StartsWith (SimpleTextDocValuesWriter.PATTERN));  	field.Pattern = StripPrefix (SimpleTextDocValuesWriter.PATTERN);  	field.DataStartFilePointer = data.GetFilePointer ();  	data.Seek (data.GetFilePointer () + (9 + field.Pattern.Length + field.MaxLength + 2) * maxDoc);  } else if (dvType == DocValuesType.SORTED || dvType == DocValuesType.SORTED_SET) {  	ReadLine ();  	Debug.Assert (StartsWith (SimpleTextDocValuesWriter.NUMVALUES));  	field.NumValues = Convert.ToInt64 (StripPrefix (SimpleTextDocValuesWriter.NUMVALUES)' CultureInfo.InvariantCulture);  	ReadLine ();  	Debug.Assert (StartsWith (SimpleTextDocValuesWriter.MAXLENGTH));  	field.MaxLength = Convert.ToInt32 (StripPrefix (SimpleTextDocValuesWriter.MAXLENGTH)' CultureInfo.InvariantCulture);  	ReadLine ();  	Debug.Assert (StartsWith (SimpleTextDocValuesWriter.PATTERN));  	field.Pattern = StripPrefix (SimpleTextDocValuesWriter.PATTERN);  	ReadLine ();  	Debug.Assert (StartsWith (SimpleTextDocValuesWriter.ORDPATTERN));  	field.OrdPattern = StripPrefix (SimpleTextDocValuesWriter.ORDPATTERN);  	field.DataStartFilePointer = data.GetFilePointer ();  	data.Seek (data.GetFilePointer () + (9 + field.Pattern.Length + field.MaxLength) * field.NumValues + (1 + field.OrdPattern.Length) * maxDoc);  } else {  	throw new ArgumentOutOfRangeException ();  }  
Magic Number,Lucene.Net.Codecs.SimpleText,SimpleTextDocValuesReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\SimpleText\SimpleTextDocValuesReader.cs,SimpleTextDocValuesReader,The following statement contains a magic number: if (dvType == DocValuesType.BINARY) {  	ReadLine ();  	Debug.Assert (StartsWith (SimpleTextDocValuesWriter.MAXLENGTH));  	field.MaxLength = Convert.ToInt32 (StripPrefix (SimpleTextDocValuesWriter.MAXLENGTH)' CultureInfo.InvariantCulture);  	ReadLine ();  	Debug.Assert (StartsWith (SimpleTextDocValuesWriter.PATTERN));  	field.Pattern = StripPrefix (SimpleTextDocValuesWriter.PATTERN);  	field.DataStartFilePointer = data.GetFilePointer ();  	data.Seek (data.GetFilePointer () + (9 + field.Pattern.Length + field.MaxLength + 2) * maxDoc);  } else if (dvType == DocValuesType.SORTED || dvType == DocValuesType.SORTED_SET) {  	ReadLine ();  	Debug.Assert (StartsWith (SimpleTextDocValuesWriter.NUMVALUES));  	field.NumValues = Convert.ToInt64 (StripPrefix (SimpleTextDocValuesWriter.NUMVALUES)' CultureInfo.InvariantCulture);  	ReadLine ();  	Debug.Assert (StartsWith (SimpleTextDocValuesWriter.MAXLENGTH));  	field.MaxLength = Convert.ToInt32 (StripPrefix (SimpleTextDocValuesWriter.MAXLENGTH)' CultureInfo.InvariantCulture);  	ReadLine ();  	Debug.Assert (StartsWith (SimpleTextDocValuesWriter.PATTERN));  	field.Pattern = StripPrefix (SimpleTextDocValuesWriter.PATTERN);  	ReadLine ();  	Debug.Assert (StartsWith (SimpleTextDocValuesWriter.ORDPATTERN));  	field.OrdPattern = StripPrefix (SimpleTextDocValuesWriter.ORDPATTERN);  	field.DataStartFilePointer = data.GetFilePointer ();  	data.Seek (data.GetFilePointer () + (9 + field.Pattern.Length + field.MaxLength) * field.NumValues + (1 + field.OrdPattern.Length) * maxDoc);  } else {  	throw new ArgumentOutOfRangeException ();  }  
Magic Number,Lucene.Net.Codecs.SimpleText,SimpleTextDocValuesReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\SimpleText\SimpleTextDocValuesReader.cs,SimpleTextDocValuesReader,The following statement contains a magic number: if (dvType == DocValuesType.BINARY) {  	ReadLine ();  	Debug.Assert (StartsWith (SimpleTextDocValuesWriter.MAXLENGTH));  	field.MaxLength = Convert.ToInt32 (StripPrefix (SimpleTextDocValuesWriter.MAXLENGTH)' CultureInfo.InvariantCulture);  	ReadLine ();  	Debug.Assert (StartsWith (SimpleTextDocValuesWriter.PATTERN));  	field.Pattern = StripPrefix (SimpleTextDocValuesWriter.PATTERN);  	field.DataStartFilePointer = data.GetFilePointer ();  	data.Seek (data.GetFilePointer () + (9 + field.Pattern.Length + field.MaxLength + 2) * maxDoc);  } else if (dvType == DocValuesType.SORTED || dvType == DocValuesType.SORTED_SET) {  	ReadLine ();  	Debug.Assert (StartsWith (SimpleTextDocValuesWriter.NUMVALUES));  	field.NumValues = Convert.ToInt64 (StripPrefix (SimpleTextDocValuesWriter.NUMVALUES)' CultureInfo.InvariantCulture);  	ReadLine ();  	Debug.Assert (StartsWith (SimpleTextDocValuesWriter.MAXLENGTH));  	field.MaxLength = Convert.ToInt32 (StripPrefix (SimpleTextDocValuesWriter.MAXLENGTH)' CultureInfo.InvariantCulture);  	ReadLine ();  	Debug.Assert (StartsWith (SimpleTextDocValuesWriter.PATTERN));  	field.Pattern = StripPrefix (SimpleTextDocValuesWriter.PATTERN);  	ReadLine ();  	Debug.Assert (StartsWith (SimpleTextDocValuesWriter.ORDPATTERN));  	field.OrdPattern = StripPrefix (SimpleTextDocValuesWriter.ORDPATTERN);  	field.DataStartFilePointer = data.GetFilePointer ();  	data.Seek (data.GetFilePointer () + (9 + field.Pattern.Length + field.MaxLength) * field.NumValues + (1 + field.OrdPattern.Length) * maxDoc);  } else {  	throw new ArgumentOutOfRangeException ();  }  
Magic Number,Lucene.Net.Codecs.SimpleText,SimpleTextDocValuesReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\SimpleText\SimpleTextDocValuesReader.cs,SimpleTextDocValuesReader,The following statement contains a magic number: data.Seek (data.GetFilePointer () + (9 + field.Pattern.Length + field.MaxLength + 2) * maxDoc);  
Magic Number,Lucene.Net.Codecs.SimpleText,SimpleTextDocValuesReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\SimpleText\SimpleTextDocValuesReader.cs,SimpleTextDocValuesReader,The following statement contains a magic number: data.Seek (data.GetFilePointer () + (9 + field.Pattern.Length + field.MaxLength + 2) * maxDoc);  
Magic Number,Lucene.Net.Codecs.SimpleText,SimpleTextDocValuesReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\SimpleText\SimpleTextDocValuesReader.cs,SimpleTextDocValuesReader,The following statement contains a magic number: if (dvType == DocValuesType.SORTED || dvType == DocValuesType.SORTED_SET) {  	ReadLine ();  	Debug.Assert (StartsWith (SimpleTextDocValuesWriter.NUMVALUES));  	field.NumValues = Convert.ToInt64 (StripPrefix (SimpleTextDocValuesWriter.NUMVALUES)' CultureInfo.InvariantCulture);  	ReadLine ();  	Debug.Assert (StartsWith (SimpleTextDocValuesWriter.MAXLENGTH));  	field.MaxLength = Convert.ToInt32 (StripPrefix (SimpleTextDocValuesWriter.MAXLENGTH)' CultureInfo.InvariantCulture);  	ReadLine ();  	Debug.Assert (StartsWith (SimpleTextDocValuesWriter.PATTERN));  	field.Pattern = StripPrefix (SimpleTextDocValuesWriter.PATTERN);  	ReadLine ();  	Debug.Assert (StartsWith (SimpleTextDocValuesWriter.ORDPATTERN));  	field.OrdPattern = StripPrefix (SimpleTextDocValuesWriter.ORDPATTERN);  	field.DataStartFilePointer = data.GetFilePointer ();  	data.Seek (data.GetFilePointer () + (9 + field.Pattern.Length + field.MaxLength) * field.NumValues + (1 + field.OrdPattern.Length) * maxDoc);  } else {  	throw new ArgumentOutOfRangeException ();  }  
Magic Number,Lucene.Net.Codecs.SimpleText,SimpleTextDocValuesReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\SimpleText\SimpleTextDocValuesReader.cs,SimpleTextDocValuesReader,The following statement contains a magic number: data.Seek (data.GetFilePointer () + (9 + field.Pattern.Length + field.MaxLength) * field.NumValues + (1 + field.OrdPattern.Length) * maxDoc);  
Missing Default,Lucene.Net.Codecs.Memory,DirectDocValuesConsumer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\Memory\DirectDocValuesConsumer.cs,AddNumericFieldValues,The following switch statement is missing a default case: switch (byteWidth) {  case 1:  	data.WriteByte ((byte)(sbyte)v);  	break;  case 2:  	data.WriteInt16 ((short)v);  	break;  case 4:  	data.WriteInt32 ((int)v);  	break;  case 8:  	data.WriteInt64 (v);  	break;  }  
Missing Default,Lucene.Net.Codecs.SimpleText,SimpleTextStoredFieldsReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Codecs\SimpleText\SimpleTextStoredFieldsReader.cs,VisitDocument,The following switch statement is missing a default case: switch (visitor.NeedsField (fieldInfo)) {  case StoredFieldVisitor.Status.YES:  	ReadField (type' fieldInfo' visitor);  	break;  case StoredFieldVisitor.Status.NO:  	ReadLine ();  	Debug.Assert (StringHelper.StartsWith (_scratch' SimpleTextStoredFieldsWriter.VALUE));  	break;  case StoredFieldVisitor.Status.STOP:  	return;  }  
