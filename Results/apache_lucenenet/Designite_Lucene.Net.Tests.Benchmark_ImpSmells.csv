Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Lucene.Net.Benchmarks.ByTask,TestPerfTasksLogic,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\TestPerfTasksLogic.cs,TestReadTokens,Cyclomatic complexity of the method is 8
Complex Method,Lucene.Net.Benchmarks.ByTask,TestPerfTasksParse,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\TestPerfTasksParse.cs,TestParseExamples,Cyclomatic complexity of the method is 10
Complex Method,Lucene.Net.Benchmarks.Quality,TestQualityRun,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\Quality\TestQualityRun.cs,TestTrecQuality,Cyclomatic complexity of the method is 11
Long Parameter List,Lucene.Net.Benchmarks.ByTask.Feeds,EnwikiContentSourceTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\Feeds\EnwikiContentSourceTest.cs,assertDocData,The method has 5 parameters. Parameters: dd' expName' expTitle' expBody' expDate
Long Parameter List,Lucene.Net.Benchmarks.ByTask.Feeds,TrecContentSourceTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\Feeds\TrecContentSourceTest.cs,assertDocData,The method has 5 parameters. Parameters: dd' expName' expTitle' expBody' expDate
Long Parameter List,Lucene.Net.Benchmarks.ByTask.Tasks,BenchmarkHighlighterAnonymousHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\Tasks\CountingHighlighterTestTask.cs,DoHighlight,The method has 6 parameters. Parameters: reader' doc' field' document' analyzer' text
Long Parameter List,Lucene.Net.Benchmarks.ByTask.Tasks,PerfTaskTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\Tasks\PerfTaskTest.cs,doLogStepTest,The method has 5 parameters. Parameters: setLogStep' logStepVal' setTaskLogStep' taskLogStepVal' expLogStepValue
Long Parameter List,Lucene.Net.Benchmarks.ByTask.Tasks,WriteEnwikiLineDocTaskTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\Tasks\WriteEnwikiLineDocTaskTest.cs,doReadTest,The method has 5 parameters. Parameters: n' file' expTitle' expDate' expBody
Long Parameter List,Lucene.Net.Benchmarks.ByTask.Tasks,WriteLineDocTaskTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\Tasks\WriteLineDocTaskTest.cs,doReadTest,The method has 5 parameters. Parameters: file' fileType' expTitle' expDate' expBody
Long Statement,Lucene.Net.Benchmarks,BenchmarkTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\BenchmarkTestCase.cs,copyToWorkDir,The length of the statement  "            Stream dest = new FileStream(System.IO.Path.Combine(getWorkDir().FullName' resourceName)' FileMode.Create' FileAccess.Write); " is 125.
Long Statement,Lucene.Net.Benchmarks.ByTask.Feeds,LineDocSourceTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\Feeds\LineDocSourceTest.cs,writeDocsToFile,The length of the statement  "            doc.append("title").append(WriteLineDocTask.SEP).append("date").append(WriteLineDocTask.SEP).append(DocMaker.BODY_FIELD); " is 121.
Long Statement,Lucene.Net.Benchmarks.ByTask.Feeds,TrecContentSourceTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\Feeds\TrecContentSourceTest.cs,TestTrecFeedDirAllTypes,The length of the statement  "            var pathTypes = ((ParsePathType[])Enum.GetValues(typeof(ParsePathType))).Where(x => x != ParsePathType.UNKNOWN).ToArray(); " is 122.
Long Statement,Lucene.Net.Benchmarks.ByTask.Tasks,CountingHighlighterTestTask,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\Tasks\CountingHighlighterTestTask.cs,GetBenchmarkHighlighter,The length of the statement  "            //  public int doHighlight(IndexReader reader' int doc' String field' Document document' Analyzer analyzer' String text)  " is 120.
Long Statement,Lucene.Net.Benchmarks.ByTask.Tasks,WriteLineDocTaskTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\Tasks\WriteLineDocTaskTest.cs,assertHeaderLine,The length of the statement  "            assertTrue("First line should be a header line"' line != null && line.StartsWith(WriteLineDocTask.FIELDS_HEADER_INDICATOR' StringComparison.Ordinal)); " is 150.
Long Statement,Lucene.Net.Benchmarks.ByTask.Tasks,WriteLineDocTaskTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\Tasks\WriteLineDocTaskTest.cs,TestJustDate,The length of the statement  "            TextReader br = new StreamReader(new FileStream(file.FullName' FileMode.Open' FileAccess.Read' FileShare.ReadWrite)' Encoding.UTF8); " is 132.
Long Statement,Lucene.Net.Benchmarks.ByTask.Tasks,WriteLineDocTaskTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\Tasks\WriteLineDocTaskTest.cs,TestLegalJustDate,The length of the statement  "            TextReader br = new StreamReader(new FileStream(file.FullName' FileMode.Open' FileAccess.Read' FileShare.ReadWrite)' Encoding.UTF8); " is 132.
Long Statement,Lucene.Net.Benchmarks.ByTask.Tasks,WriteLineDocTaskTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\Tasks\WriteLineDocTaskTest.cs,TestEmptyDoc,The length of the statement  "            TextReader br = new StreamReader(new FileStream(file.FullName' FileMode.Open' FileAccess.Read' FileShare.ReadWrite)' Encoding.UTF8); " is 132.
Long Statement,Lucene.Net.Benchmarks.ByTask.Tasks,WriteLineDocTaskTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\Tasks\WriteLineDocTaskTest.cs,TestMultiThreaded,The length of the statement  "            TextReader br = new StreamReader(new FileStream(file.FullName' FileMode.Open' FileAccess.Read' FileShare.None)' Encoding.UTF8); " is 127.
Long Statement,Lucene.Net.Benchmarks.ByTask.Tasks,WriteLineDocTaskTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\Tasks\WriteLineDocTaskTest.cs,TestMultiThreaded,The length of the statement  "                    assertNotNull($"line for index {i.ToString()} is missing"' line); // LUCENENET specific - ensure the line is there before splitting " is 131.
Long Statement,Lucene.Net.Benchmarks.ByTask,TestPerfTasksLogic,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\TestPerfTasksLogic.cs,TestHighlighting,The length of the statement  "            //pretty hard to figure out a priori how many docs are going to have highlighted fragments returned' but we can never have more than the number of docs " is 151.
Long Statement,Lucene.Net.Benchmarks.ByTask,TestPerfTasksLogic,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\TestPerfTasksLogic.cs,TestHighlighting,The length of the statement  "            assertTrue("TestSearchTask was supposed to be called!"' CountingHighlighterTestTask.numDocsRetrieved >= CountingHighlighterTestTask.numHighlightedResults && CountingHighlighterTestTask.numHighlightedResults > 0); " is 212.
Long Statement,Lucene.Net.Benchmarks.ByTask,TestPerfTasksLogic,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\TestPerfTasksLogic.cs,TestHighlighting,The length of the statement  "            IndexWriter iw = new IndexWriter(benchmark.RunData.Directory' new IndexWriterConfig(TEST_VERSION_CURRENT' new MockAnalyzer(Random)).SetOpenMode(OpenMode.APPEND)); " is 162.
Long Statement,Lucene.Net.Benchmarks.ByTask,TestPerfTasksLogic,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\TestPerfTasksLogic.cs,TestHighlightingTV,The length of the statement  "            //pretty hard to figure out a priori how many docs are going to have highlighted fragments returned' but we can never have more than the number of docs " is 151.
Long Statement,Lucene.Net.Benchmarks.ByTask,TestPerfTasksLogic,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\TestPerfTasksLogic.cs,TestHighlightingTV,The length of the statement  "            assertTrue("TestSearchTask was supposed to be called!"' CountingHighlighterTestTask.numDocsRetrieved >= CountingHighlighterTestTask.numHighlightedResults && CountingHighlighterTestTask.numHighlightedResults > 0); " is 212.
Long Statement,Lucene.Net.Benchmarks.ByTask,TestPerfTasksLogic,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\TestPerfTasksLogic.cs,TestHighlightingTV,The length of the statement  "            IndexWriter iw = new IndexWriter(benchmark.RunData.Directory' new IndexWriterConfig(TEST_VERSION_CURRENT' new MockAnalyzer(Random)).SetOpenMode(OpenMode.APPEND)); " is 162.
Long Statement,Lucene.Net.Benchmarks.ByTask,TestPerfTasksLogic,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\TestPerfTasksLogic.cs,TestExhaustContentSource,The length of the statement  "            IndexWriter iw = new IndexWriter(benchmark.RunData.Directory' new IndexWriterConfig(TEST_VERSION_CURRENT' new MockAnalyzer(Random)).SetOpenMode(OpenMode.APPEND)); " is 162.
Long Statement,Lucene.Net.Benchmarks.ByTask,TestPerfTasksLogic,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\TestPerfTasksLogic.cs,TestLineDocFile,The length of the statement  "            assertEquals("did not see the right number of docs; should be " + NUM_TRY_DOCS + " but was " + numLines' NUM_TRY_DOCS' numLines); " is 129.
Long Statement,Lucene.Net.Benchmarks.ByTask,TestPerfTasksLogic,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\TestPerfTasksLogic.cs,TestReadTokens,The length of the statement  "                if (fieldName.Equals(DocMaker.ID_FIELD' StringComparison.Ordinal) || fieldName.Equals(DocMaker.DATE_MSEC_FIELD' StringComparison.Ordinal) || fieldName.Equals(DocMaker.TIME_SEC_FIELD' StringComparison.Ordinal)) " is 209.
Long Statement,Lucene.Net.Benchmarks.ByTask,TestPerfTasksLogic,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\TestPerfTasksLogic.cs,TestMergePolicy,The length of the statement  "            assertTrue("did not use the specified MergePolicy"' ((MyMergePolicy)benchmark.RunData.IndexWriter.Config.MergePolicy).called); " is 126.
Long Statement,Lucene.Net.Benchmarks.ByTask,TestPerfTasksLogic,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\TestPerfTasksLogic.cs,TestIndexingWithFacets,The length of the statement  "            assertTrue("nothing was added to the taxnomy (expecting root and at least one addtional category)"' taxoReader.Count > 1); " is 122.
Long Statement,Lucene.Net.Benchmarks.ByTask,TestPerfTasksLogic,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\TestPerfTasksLogic.cs,TestCollator,The length of the statement  "            //expected = new ICUCollationKeyAnalyzer(TEST_VERSION_CURRENT' Collator.Create(new CultureInfo("no-NO"/*' "NY"*/)' Collator.Fallback.FallbackAllowed)); " is 151.
Long Statement,Lucene.Net.Benchmarks.ByTask,TestPerfTasksParse,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\TestPerfTasksParse.cs,TestParseExamples,The length of the statement  "                    Config config = new Config(new StreamReader(new FileStream(algFile.FullName' FileMode.Open' FileAccess.Read)' Encoding.UTF8)); " is 126.
Long Statement,Lucene.Net.Benchmarks.ByTask.Utils,StreamUtilsTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\Utils\StreamUtilsTest.cs,rawGzipFile,The length of the statement  "            using (Stream os = new GZipStream(new FileStream(f.FullName' FileMode.Create' FileAccess.Write)' CompressionMode.Compress)) //new CompressorStreamFactory().createCompressorOutputStream(CompressorStreamFactory.GZIP' new FileOutputStream(f)); " is 240.
Long Statement,Lucene.Net.Benchmarks.ByTask.Utils,StreamUtilsTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\Utils\StreamUtilsTest.cs,rawBzip2File,The length of the statement  "            Stream os = new BZip2OutputStream(new FileStream(f.FullName' FileMode.Create' FileAccess.Write));  // new CompressorStreamFactory().createCompressorOutputStream(CompressorStreamFactory.BZIP2' new FileOutputStream(f)); " is 217.
Long Statement,Lucene.Net.Support,TestEnglishNumberFormatExtensions,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\Support\TestEnglishNumberFormatExtensions.cs,TestToWords,The length of the statement  "            Assert.AreEqual("seven hundred forty-nine million one hundred thirty-two thousand one hundred forty-six"' 749132146.ToWords()); " is 127.
Long Statement,Lucene.Net.Support,TestEnglishNumberFormatExtensions,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\Support\TestEnglishNumberFormatExtensions.cs,TestToWords,The length of the statement  "            Assert.AreEqual("nine hundred ninety-nine billion seven hundred forty-nine million one hundred thirty-two thousand one hundred forty-six"' 999749132146.ToWords()); " is 163.
Empty Catch Block,Lucene.Net.Benchmarks.ByTask.Feeds,EnwikiContentSourceTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\Feeds\EnwikiContentSourceTest.cs,assertNoMoreDataException,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Benchmarks.ByTask.Feeds,LineDocSourceTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\Feeds\LineDocSourceTest.cs,TestInvalidFormat,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Benchmarks.ByTask.Tasks.Alt,AltPackageTaskTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\Tasks\Alt\AltPackageTaskTest.cs,TestWithoutAlt,The method has an empty catch block.
Magic Number,Lucene.Net.Benchmarks,BenchmarkTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\BenchmarkTestCase.cs,copyToWorkDir,The following statement contains a magic number: byte[] buffer = new byte[8192];
Magic Number,Lucene.Net.Benchmarks.ByTask.Feeds,DocMakerTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\Feeds\DocMakerTest.cs,doTestIndexProperties,The following statement contains a magic number: TopDocs td = searcher.Search(new TermQuery(new Term("key"' "value"))' 10);
Magic Number,Lucene.Net.Benchmarks.ByTask.Feeds,EnwikiContentSourceTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\Feeds\EnwikiContentSourceTest.cs,TestForever,The following statement contains a magic number: i < 3
Magic Number,Lucene.Net.Benchmarks.ByTask.Feeds,LineDocSourceTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\Feeds\LineDocSourceTest.cs,doIndexAndSearchTest,The following statement contains a magic number: doIndexAndSearchTestWithRepeats(file' lineParserClass' 2' storedField);
Magic Number,Lucene.Net.Benchmarks.ByTask.Feeds,LineDocSourceTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\Feeds\LineDocSourceTest.cs,doIndexAndSearchTest,The following statement contains a magic number: doIndexAndSearchTestWithRepeats(file' lineParserClass' 4' storedField);
Magic Number,Lucene.Net.Benchmarks.ByTask.Feeds,LineDocSourceTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\Feeds\LineDocSourceTest.cs,doIndexAndSearchTestWithRepeats,The following statement contains a magic number: TopDocs td = searcher.Search(new TermQuery(new Term("body"' "body"))' 10);
Magic Number,Lucene.Net.Benchmarks.ByTask.Feeds,TestHtmlParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\Feeds\TestHtmlParser.cs,TestMeta,The following statement contains a magic number: assertEquals(4' tags.size());
Magic Number,Lucene.Net.Benchmarks.ByTask.Feeds,TrecContentSourceTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\Feeds\TrecContentSourceTest.cs,TestTrecFeedDirAllTypes,The following statement contains a magic number: n < 100
Magic Number,Lucene.Net.Benchmarks.ByTask.Feeds,TrecContentSourceTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\Feeds\TrecContentSourceTest.cs,TestTrecFeedDirAllTypes,The following statement contains a magic number: assertEquals("Wrong number of documents created by source!"' 5' n);
Magic Number,Lucene.Net.Benchmarks.ByTask.Tasks,AddIndexesTaskTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\Tasks\AddIndexesTaskTest.cs,BeforeClass,The following statement contains a magic number: i < 10
Magic Number,Lucene.Net.Benchmarks.ByTask.Tasks,AddIndexesTaskTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\Tasks\AddIndexesTaskTest.cs,assertIndex,The following statement contains a magic number: assertEquals(10' r.NumDocs);
Magic Number,Lucene.Net.Benchmarks.ByTask.Tasks,PerfTaskTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\Tasks\PerfTaskTest.cs,TestLogStep,The following statement contains a magic number: doLogStepTest(true' 100' false' -1' 100);
Magic Number,Lucene.Net.Benchmarks.ByTask.Tasks,PerfTaskTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\Tasks\PerfTaskTest.cs,TestLogStep,The following statement contains a magic number: doLogStepTest(true' 100' false' -1' 100);
Magic Number,Lucene.Net.Benchmarks.ByTask.Tasks,PerfTaskTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\Tasks\PerfTaskTest.cs,TestLogStep,The following statement contains a magic number: doLogStepTest(false' -1' true' 100' 100);
Magic Number,Lucene.Net.Benchmarks.ByTask.Tasks,PerfTaskTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\Tasks\PerfTaskTest.cs,TestLogStep,The following statement contains a magic number: doLogStepTest(false' -1' true' 100' 100);
Magic Number,Lucene.Net.Benchmarks.ByTask.Tasks,WriteEnwikiLineDocTaskTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\Tasks\WriteEnwikiLineDocTaskTest.cs,doReadTest,The following statement contains a magic number: doReadTest(2' file' expTitle' expDate' expBody);
Magic Number,Lucene.Net.Benchmarks.ByTask.Tasks,WriteEnwikiLineDocTaskTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\Tasks\WriteEnwikiLineDocTaskTest.cs,doReadTest,The following statement contains a magic number: doReadTest(2' categoriesFile' "Category:" + expTitle' expDate' expBody);
Magic Number,Lucene.Net.Benchmarks.ByTask.Tasks,WriteEnwikiLineDocTaskTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\Tasks\WriteEnwikiLineDocTaskTest.cs,doReadTest,The following statement contains a magic number: int numExpParts = expBody == null ? 2 : 3;
Magic Number,Lucene.Net.Benchmarks.ByTask.Tasks,WriteEnwikiLineDocTaskTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\Tasks\WriteEnwikiLineDocTaskTest.cs,doReadTest,The following statement contains a magic number: int numExpParts = expBody == null ? 2 : 3;
Magic Number,Lucene.Net.Benchmarks.ByTask.Tasks,WriteEnwikiLineDocTaskTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\Tasks\WriteEnwikiLineDocTaskTest.cs,doReadTest,The following statement contains a magic number: assertEquals(expBody' parts[2]);
Magic Number,Lucene.Net.Benchmarks.ByTask.Tasks,WriteEnwikiLineDocTaskTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\Tasks\WriteEnwikiLineDocTaskTest.cs,TestCategoryLines,The following statement contains a magic number: i < 4
Magic Number,Lucene.Net.Benchmarks.ByTask.Tasks,WriteLineCategoryDocMaker,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\Tasks\WriteEnwikiLineDocTaskTest.cs,MakeDocument,The following statement contains a magic number: bool isCategory = (flip.IncrementAndGet() % 2 == 0);
Magic Number,Lucene.Net.Benchmarks.ByTask.Tasks,WriteLineDocTaskTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\Tasks\WriteLineDocTaskTest.cs,doReadTest,The following statement contains a magic number: int numExpParts = expBody == null ? 2 : 3;
Magic Number,Lucene.Net.Benchmarks.ByTask.Tasks,WriteLineDocTaskTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\Tasks\WriteLineDocTaskTest.cs,doReadTest,The following statement contains a magic number: int numExpParts = expBody == null ? 2 : 3;
Magic Number,Lucene.Net.Benchmarks.ByTask.Tasks,WriteLineDocTaskTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\Tasks\WriteLineDocTaskTest.cs,doReadTest,The following statement contains a magic number: assertEquals(expBody' parts[2]);
Magic Number,Lucene.Net.Benchmarks.ByTask.Tasks,WriteLineDocTaskTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\Tasks\WriteLineDocTaskTest.cs,TestMultiThreaded,The following statement contains a magic number: ThreadClass[] threads = new ThreadClass[10];
Magic Number,Lucene.Net.Benchmarks.ByTask.Tasks,WriteLineDocTaskTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\Tasks\WriteLineDocTaskTest.cs,TestMultiThreaded,The following statement contains a magic number: assertEquals(line' 3' parts.Length);
Magic Number,Lucene.Net.Benchmarks.ByTask.Tasks,WriteLineDocTaskTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\Tasks\WriteLineDocTaskTest.cs,TestMultiThreaded,The following statement contains a magic number: assertEquals(tname' parts[2].Substring(parts[2].IndexOf('_')));
Magic Number,Lucene.Net.Benchmarks.ByTask.Tasks,WriteLineDocTaskTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\Tasks\WriteLineDocTaskTest.cs,TestMultiThreaded,The following statement contains a magic number: assertEquals(tname' parts[2].Substring(parts[2].IndexOf('_')));
Magic Number,Lucene.Net.Benchmarks.ByTask,TestPerfTasksLogic,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\TestPerfTasksLogic.cs,TestIndexAndSearchTasks,The following statement contains a magic number: assertEquals("TestSearchTask was supposed to be called!"' 279' CountingSearchTestTask.numSearches);
Magic Number,Lucene.Net.Benchmarks.ByTask,TestPerfTasksLogic,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\TestPerfTasksLogic.cs,TestIndexAndSearchTasks,The following statement contains a magic number: assertEquals("1000 docs were added to the index' this is what we expect to find!"' 1000' ir.NumDocs);
Magic Number,Lucene.Net.Benchmarks.ByTask,TestPerfTasksLogic,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\TestPerfTasksLogic.cs,TestTimedSearchTask,The following statement contains a magic number: assertTrue("elapsed time was " + elapsed + " msec"' elapsed <= 1500);
Magic Number,Lucene.Net.Benchmarks.ByTask,TestPerfTasksLogic,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\TestPerfTasksLogic.cs,TestHighlighting,The following statement contains a magic number: assertEquals("TestSearchTask was supposed to be called!"' 92' CountingHighlighterTestTask.numDocsRetrieved);
Magic Number,Lucene.Net.Benchmarks.ByTask,TestPerfTasksLogic,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\TestPerfTasksLogic.cs,TestHighlighting,The following statement contains a magic number: assertEquals("100 docs were added to the index' this is what we expect to find!"' 100' ir.NumDocs);
Magic Number,Lucene.Net.Benchmarks.ByTask,TestPerfTasksLogic,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\TestPerfTasksLogic.cs,TestHighlightingTV,The following statement contains a magic number: assertEquals("TestSearchTask was supposed to be called!"' 92' CountingHighlighterTestTask.numDocsRetrieved);
Magic Number,Lucene.Net.Benchmarks.ByTask,TestPerfTasksLogic,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\TestPerfTasksLogic.cs,TestHighlightingTV,The following statement contains a magic number: assertEquals("1000 docs were added to the index' this is what we expect to find!"' 1000' ir.NumDocs);
Magic Number,Lucene.Net.Benchmarks.ByTask,TestPerfTasksLogic,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\TestPerfTasksLogic.cs,TestExhaustContentSource,The following statement contains a magic number: assertEquals("TestSearchTask was supposed to be called!"' 139' CountingSearchTestTask.numSearches);
Magic Number,Lucene.Net.Benchmarks.ByTask,TestPerfTasksLogic,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\TestPerfTasksLogic.cs,TestDocMakerThreadSafety,The following statement contains a magic number: assertEquals(1000' maxDoc);
Magic Number,Lucene.Net.Benchmarks.ByTask,TestPerfTasksLogic,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\TestPerfTasksLogic.cs,TestDocMakerThreadSafety,The following statement contains a magic number: i < 1000
Magic Number,Lucene.Net.Benchmarks.ByTask,TestPerfTasksLogic,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\TestPerfTasksLogic.cs,TestParallelDocMaker,The following statement contains a magic number: int ndocsExpected = 20;
Magic Number,Lucene.Net.Benchmarks.ByTask,TestPerfTasksLogic,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\TestPerfTasksLogic.cs,TestLineDocFile,The following statement contains a magic number: int NUM_TRY_DOCS = 50;
Magic Number,Lucene.Net.Benchmarks.ByTask,TestPerfTasksLogic,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\TestPerfTasksLogic.cs,TestReadTokens,The following statement contains a magic number: int NUM_DOCS = 20;
Magic Number,Lucene.Net.Benchmarks.ByTask,TestPerfTasksLogic,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\TestPerfTasksLogic.cs,TestParallelExhausted,The following statement contains a magic number: int ndocsExpected = 2 * 20;
Magic Number,Lucene.Net.Benchmarks.ByTask,TestPerfTasksLogic,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\TestPerfTasksLogic.cs,TestParallelExhausted,The following statement contains a magic number: int ndocsExpected = 2 * 20;
Magic Number,Lucene.Net.Benchmarks.ByTask,TestPerfTasksLogic,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\TestPerfTasksLogic.cs,TestExhaustedLooped,The following statement contains a magic number: int ndocsExpected = 20;
Magic Number,Lucene.Net.Benchmarks.ByTask,TestPerfTasksLogic,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\TestPerfTasksLogic.cs,TestCloseIndexFalse,The following statement contains a magic number: int ndocsExpected = 20;
Magic Number,Lucene.Net.Benchmarks.ByTask,TestPerfTasksLogic,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\TestPerfTasksLogic.cs,TestMergeScheduler,The following statement contains a magic number: int ndocsExpected = 20;
Magic Number,Lucene.Net.Benchmarks.ByTask,TestPerfTasksLogic,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\TestPerfTasksLogic.cs,TestMergePolicy,The following statement contains a magic number: int ndocsExpected = 20;
Magic Number,Lucene.Net.Benchmarks.ByTask,TestPerfTasksLogic,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\TestPerfTasksLogic.cs,TestIndexWriterSettings,The following statement contains a magic number: assertEquals(2' writer.Config.MaxBufferedDocs);
Magic Number,Lucene.Net.Benchmarks.ByTask,TestPerfTasksLogic,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\TestPerfTasksLogic.cs,TestIndexWriterSettings,The following statement contains a magic number: assertEquals(3' ((LogMergePolicy)writer.Config.MergePolicy).MergeFactor);
Magic Number,Lucene.Net.Benchmarks.ByTask,TestPerfTasksLogic,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\TestPerfTasksLogic.cs,TestForceMerge,The following statement contains a magic number: int ndocsExpected = 20;
Magic Number,Lucene.Net.Benchmarks.ByTask,TestPerfTasksLogic,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\TestPerfTasksLogic.cs,TestForceMerge,The following statement contains a magic number: assertEquals(3' infos.Count);
Magic Number,Lucene.Net.Benchmarks.ByTask,TestPerfTasksLogic,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\TestPerfTasksLogic.cs,doTestDisableCounting,The following statement contains a magic number: assertEquals("Wrong total count!"' 20 + 2 * n' stats.Count);
Magic Number,Lucene.Net.Benchmarks.ByTask,TestPerfTasksLogic,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\TestPerfTasksLogic.cs,doTestDisableCounting,The following statement contains a magic number: assertEquals("Wrong total count!"' 20 + 2 * n' stats.Count);
Magic Number,Lucene.Net.Benchmarks.ByTask,TestPerfTasksLogic,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\TestPerfTasksLogic.cs,doTestDisableCounting,The following statement contains a magic number: assertEquals("Missing some tasks to check!"' 3' nChecked);
Magic Number,Lucene.Net.Benchmarks.ByTask,TestPerfTasksParse,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\TestPerfTasksParse.cs,TestParseParallelTaskSequenceRepetition,The following statement contains a magic number: assertEquals("repetions should be 1000 for " + parsedTasks' 1000' ((TaskSequence)task).Repetitions);
Magic Number,Lucene.Net.Benchmarks.ByTask,TestPerfTasksParse,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\ByTask\TestPerfTasksParse.cs,TestParseTaskSequenceRepetition,The following statement contains a magic number: assertEquals("repetions should be 1000 for " + parsedTasks' 1000' ((TaskSequence)task).Repetitions);
Magic Number,Lucene.Net.Benchmarks.Quality,TestQualityRun,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\Quality\TestQualityRun.cs,TestTrecQuality,The following statement contains a magic number: int maxResults = 1000;
Magic Number,Lucene.Net.Benchmarks.Quality,TestQualityRun,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\Quality\TestQualityRun.cs,TestTrecQuality,The following statement contains a magic number: switch (i % 8)                  {                        case 0:                          assertTrue("avg-p should be hurt: " + s.GetAvp()' 1.0 > s.GetAvp());                          assertTrue("recall should be hurt: " + s.Recall' 1.0 > s.Recall);                          for (int j = 1; j <= QualityStats.MAX_POINTS; j++)                          {                              assertEquals("p_at_" + j + " should be perfect: " + s.GetPrecisionAt(j)' 1.0' s.GetPrecisionAt(j)' 1E-2);                          }                          break;                        case 1:                          assertTrue("avg-p should be hurt"' 1.0 > s.GetAvp());                          assertEquals("recall should be perfect: " + s.Recall' 1.0' s.Recall' 1E-2);                          for (int j = 1; j <= QualityStats.MAX_POINTS; j++)                          {                              assertTrue("p_at_" + j + " should be hurt: " + s.GetPrecisionAt(j)' 1.0 > s.GetPrecisionAt(j));                          }                          break;                        case 2:                          assertTrue("avg-p should be hurt: " + s.GetAvp()' 1.0 > s.GetAvp());                          assertTrue("recall should be hurt: " + s.Recall' 1.0 > s.Recall);                          for (int j = 1; j <= QualityStats.MAX_POINTS; j++)                          {                              assertTrue("p_at_" + j + " should be hurt: " + s.GetPrecisionAt(j)' 1.0 > s.GetPrecisionAt(j));                          }                          break;                        default:                          {                              assertEquals("avg-p should be perfect: " + s.GetAvp()' 1.0' s.GetAvp()' 1E-2);                              assertEquals("recall should be perfect: " + s.Recall' 1.0' s.Recall' 1E-2);                              for (int j = 1; j <= QualityStats.MAX_POINTS; j++)                              {                                  assertEquals("p_at_" + j + " should be perfect: " + s.GetPrecisionAt(j)' 1.0' s.GetPrecisionAt(j)' 1E-2);                              }                              break;                          }                    }
Magic Number,Lucene.Net.Benchmarks.Quality,TestQualityRun,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\Quality\TestQualityRun.cs,TestTrecQuality,The following statement contains a magic number: switch (i % 8)                  {                        case 0:                          assertTrue("avg-p should be hurt: " + s.GetAvp()' 1.0 > s.GetAvp());                          assertTrue("recall should be hurt: " + s.Recall' 1.0 > s.Recall);                          for (int j = 1; j <= QualityStats.MAX_POINTS; j++)                          {                              assertEquals("p_at_" + j + " should be perfect: " + s.GetPrecisionAt(j)' 1.0' s.GetPrecisionAt(j)' 1E-2);                          }                          break;                        case 1:                          assertTrue("avg-p should be hurt"' 1.0 > s.GetAvp());                          assertEquals("recall should be perfect: " + s.Recall' 1.0' s.Recall' 1E-2);                          for (int j = 1; j <= QualityStats.MAX_POINTS; j++)                          {                              assertTrue("p_at_" + j + " should be hurt: " + s.GetPrecisionAt(j)' 1.0 > s.GetPrecisionAt(j));                          }                          break;                        case 2:                          assertTrue("avg-p should be hurt: " + s.GetAvp()' 1.0 > s.GetAvp());                          assertTrue("recall should be hurt: " + s.Recall' 1.0 > s.Recall);                          for (int j = 1; j <= QualityStats.MAX_POINTS; j++)                          {                              assertTrue("p_at_" + j + " should be hurt: " + s.GetPrecisionAt(j)' 1.0 > s.GetPrecisionAt(j));                          }                          break;                        default:                          {                              assertEquals("avg-p should be perfect: " + s.GetAvp()' 1.0' s.GetAvp()' 1E-2);                              assertEquals("recall should be perfect: " + s.Recall' 1.0' s.Recall' 1E-2);                              for (int j = 1; j <= QualityStats.MAX_POINTS; j++)                              {                                  assertEquals("p_at_" + j + " should be perfect: " + s.GetPrecisionAt(j)' 1.0' s.GetPrecisionAt(j)' 1E-2);                              }                              break;                          }                    }
Magic Number,Lucene.Net.Benchmarks.Quality,TestQualityRun,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\Quality\TestQualityRun.cs,TestTrecQuality,The following statement contains a magic number: switch (i % 8)                  {                        case 0:                          assertTrue("avg-p should be hurt: " + s.GetAvp()' 1.0 > s.GetAvp());                          assertTrue("recall should be hurt: " + s.Recall' 1.0 > s.Recall);                          for (int j = 1; j <= QualityStats.MAX_POINTS; j++)                          {                              assertEquals("p_at_" + j + " should be perfect: " + s.GetPrecisionAt(j)' 1.0' s.GetPrecisionAt(j)' 1E-2);                          }                          break;                        case 1:                          assertTrue("avg-p should be hurt"' 1.0 > s.GetAvp());                          assertEquals("recall should be perfect: " + s.Recall' 1.0' s.Recall' 1E-2);                          for (int j = 1; j <= QualityStats.MAX_POINTS; j++)                          {                              assertTrue("p_at_" + j + " should be hurt: " + s.GetPrecisionAt(j)' 1.0 > s.GetPrecisionAt(j));                          }                          break;                        case 2:                          assertTrue("avg-p should be hurt: " + s.GetAvp()' 1.0 > s.GetAvp());                          assertTrue("recall should be hurt: " + s.Recall' 1.0 > s.Recall);                          for (int j = 1; j <= QualityStats.MAX_POINTS; j++)                          {                              assertTrue("p_at_" + j + " should be hurt: " + s.GetPrecisionAt(j)' 1.0 > s.GetPrecisionAt(j));                          }                          break;                        default:                          {                              assertEquals("avg-p should be perfect: " + s.GetAvp()' 1.0' s.GetAvp()' 1E-2);                              assertEquals("recall should be perfect: " + s.Recall' 1.0' s.Recall' 1E-2);                              for (int j = 1; j <= QualityStats.MAX_POINTS; j++)                              {                                  assertEquals("p_at_" + j + " should be perfect: " + s.GetPrecisionAt(j)' 1.0' s.GetPrecisionAt(j)' 1E-2);                              }                              break;                          }                    }
Magic Number,Lucene.Net.Benchmarks.Quality,TestQualityRun,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\Quality\TestQualityRun.cs,TestTrecQuality,The following statement contains a magic number: switch (i % 8)                  {                        case 0:                          assertTrue("avg-p should be hurt: " + s.GetAvp()' 1.0 > s.GetAvp());                          assertTrue("recall should be hurt: " + s.Recall' 1.0 > s.Recall);                          for (int j = 1; j <= QualityStats.MAX_POINTS; j++)                          {                              assertEquals("p_at_" + j + " should be perfect: " + s.GetPrecisionAt(j)' 1.0' s.GetPrecisionAt(j)' 1E-2);                          }                          break;                        case 1:                          assertTrue("avg-p should be hurt"' 1.0 > s.GetAvp());                          assertEquals("recall should be perfect: " + s.Recall' 1.0' s.Recall' 1E-2);                          for (int j = 1; j <= QualityStats.MAX_POINTS; j++)                          {                              assertTrue("p_at_" + j + " should be hurt: " + s.GetPrecisionAt(j)' 1.0 > s.GetPrecisionAt(j));                          }                          break;                        case 2:                          assertTrue("avg-p should be hurt: " + s.GetAvp()' 1.0 > s.GetAvp());                          assertTrue("recall should be hurt: " + s.Recall' 1.0 > s.Recall);                          for (int j = 1; j <= QualityStats.MAX_POINTS; j++)                          {                              assertTrue("p_at_" + j + " should be hurt: " + s.GetPrecisionAt(j)' 1.0 > s.GetPrecisionAt(j));                          }                          break;                        default:                          {                              assertEquals("avg-p should be perfect: " + s.GetAvp()' 1.0' s.GetAvp()' 1E-2);                              assertEquals("recall should be perfect: " + s.Recall' 1.0' s.Recall' 1E-2);                              for (int j = 1; j <= QualityStats.MAX_POINTS; j++)                              {                                  assertEquals("p_at_" + j + " should be perfect: " + s.GetPrecisionAt(j)' 1.0' s.GetPrecisionAt(j)' 1E-2);                              }                              break;                          }                    }
Magic Number,Lucene.Net.Benchmarks.Quality,TestQualityRun,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\Quality\TestQualityRun.cs,TestTrecQuality,The following statement contains a magic number: switch (i % 8)                  {                        case 0:                          assertTrue("avg-p should be hurt: " + s.GetAvp()' 1.0 > s.GetAvp());                          assertTrue("recall should be hurt: " + s.Recall' 1.0 > s.Recall);                          for (int j = 1; j <= QualityStats.MAX_POINTS; j++)                          {                              assertEquals("p_at_" + j + " should be perfect: " + s.GetPrecisionAt(j)' 1.0' s.GetPrecisionAt(j)' 1E-2);                          }                          break;                        case 1:                          assertTrue("avg-p should be hurt"' 1.0 > s.GetAvp());                          assertEquals("recall should be perfect: " + s.Recall' 1.0' s.Recall' 1E-2);                          for (int j = 1; j <= QualityStats.MAX_POINTS; j++)                          {                              assertTrue("p_at_" + j + " should be hurt: " + s.GetPrecisionAt(j)' 1.0 > s.GetPrecisionAt(j));                          }                          break;                        case 2:                          assertTrue("avg-p should be hurt: " + s.GetAvp()' 1.0 > s.GetAvp());                          assertTrue("recall should be hurt: " + s.Recall' 1.0 > s.Recall);                          for (int j = 1; j <= QualityStats.MAX_POINTS; j++)                          {                              assertTrue("p_at_" + j + " should be hurt: " + s.GetPrecisionAt(j)' 1.0 > s.GetPrecisionAt(j));                          }                          break;                        default:                          {                              assertEquals("avg-p should be perfect: " + s.GetAvp()' 1.0' s.GetAvp()' 1E-2);                              assertEquals("recall should be perfect: " + s.Recall' 1.0' s.Recall' 1E-2);                              for (int j = 1; j <= QualityStats.MAX_POINTS; j++)                              {                                  assertEquals("p_at_" + j + " should be perfect: " + s.GetPrecisionAt(j)' 1.0' s.GetPrecisionAt(j)' 1E-2);                              }                              break;                          }                    }
Magic Number,Lucene.Net.Benchmarks.Quality,TestQualityRun,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\Quality\TestQualityRun.cs,TestTrecQuality,The following statement contains a magic number: switch (i % 8)                  {                        case 0:                          assertTrue("avg-p should be hurt: " + s.GetAvp()' 1.0 > s.GetAvp());                          assertTrue("recall should be hurt: " + s.Recall' 1.0 > s.Recall);                          for (int j = 1; j <= QualityStats.MAX_POINTS; j++)                          {                              assertEquals("p_at_" + j + " should be perfect: " + s.GetPrecisionAt(j)' 1.0' s.GetPrecisionAt(j)' 1E-2);                          }                          break;                        case 1:                          assertTrue("avg-p should be hurt"' 1.0 > s.GetAvp());                          assertEquals("recall should be perfect: " + s.Recall' 1.0' s.Recall' 1E-2);                          for (int j = 1; j <= QualityStats.MAX_POINTS; j++)                          {                              assertTrue("p_at_" + j + " should be hurt: " + s.GetPrecisionAt(j)' 1.0 > s.GetPrecisionAt(j));                          }                          break;                        case 2:                          assertTrue("avg-p should be hurt: " + s.GetAvp()' 1.0 > s.GetAvp());                          assertTrue("recall should be hurt: " + s.Recall' 1.0 > s.Recall);                          for (int j = 1; j <= QualityStats.MAX_POINTS; j++)                          {                              assertTrue("p_at_" + j + " should be hurt: " + s.GetPrecisionAt(j)' 1.0 > s.GetPrecisionAt(j));                          }                          break;                        default:                          {                              assertEquals("avg-p should be perfect: " + s.GetAvp()' 1.0' s.GetAvp()' 1E-2);                              assertEquals("recall should be perfect: " + s.Recall' 1.0' s.Recall' 1E-2);                              for (int j = 1; j <= QualityStats.MAX_POINTS; j++)                              {                                  assertEquals("p_at_" + j + " should be perfect: " + s.GetPrecisionAt(j)' 1.0' s.GetPrecisionAt(j)' 1E-2);                              }                              break;                          }                    }
Magic Number,Lucene.Net.Benchmarks.Quality,TestQualityRun,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\Quality\TestQualityRun.cs,TestTrecQuality,The following statement contains a magic number: switch (i % 8)                  {                        case 0:                          assertTrue("avg-p should be hurt: " + s.GetAvp()' 1.0 > s.GetAvp());                          assertTrue("recall should be hurt: " + s.Recall' 1.0 > s.Recall);                          for (int j = 1; j <= QualityStats.MAX_POINTS; j++)                          {                              assertEquals("p_at_" + j + " should be perfect: " + s.GetPrecisionAt(j)' 1.0' s.GetPrecisionAt(j)' 1E-2);                          }                          break;                        case 1:                          assertTrue("avg-p should be hurt"' 1.0 > s.GetAvp());                          assertEquals("recall should be perfect: " + s.Recall' 1.0' s.Recall' 1E-2);                          for (int j = 1; j <= QualityStats.MAX_POINTS; j++)                          {                              assertTrue("p_at_" + j + " should be hurt: " + s.GetPrecisionAt(j)' 1.0 > s.GetPrecisionAt(j));                          }                          break;                        case 2:                          assertTrue("avg-p should be hurt: " + s.GetAvp()' 1.0 > s.GetAvp());                          assertTrue("recall should be hurt: " + s.Recall' 1.0 > s.Recall);                          for (int j = 1; j <= QualityStats.MAX_POINTS; j++)                          {                              assertTrue("p_at_" + j + " should be hurt: " + s.GetPrecisionAt(j)' 1.0 > s.GetPrecisionAt(j));                          }                          break;                        default:                          {                              assertEquals("avg-p should be perfect: " + s.GetAvp()' 1.0' s.GetAvp()' 1E-2);                              assertEquals("recall should be perfect: " + s.Recall' 1.0' s.Recall' 1E-2);                              for (int j = 1; j <= QualityStats.MAX_POINTS; j++)                              {                                  assertEquals("p_at_" + j + " should be perfect: " + s.GetPrecisionAt(j)' 1.0' s.GetPrecisionAt(j)' 1E-2);                              }                              break;                          }                    }
Magic Number,Lucene.Net.Benchmarks.Quality,TestQualityRun,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\Quality\TestQualityRun.cs,TestTrecTopicsReader,The following statement contains a magic number: assertEquals(20' qqs.Length);
Magic Number,Lucene.Net.Benchmarks.Quality,TestQualityRun,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\Quality\TestQualityRun.cs,TestTrecTopicsReader,The following statement contains a magic number: qq = qqs[19];
Magic Number,Lucene.Net.Support,TestEnglishNumberFormatExtensions,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\Support\TestEnglishNumberFormatExtensions.cs,TestToWords,The following statement contains a magic number: Assert.AreEqual("twenty-one"' 21.ToWords());
Magic Number,Lucene.Net.Support,TestEnglishNumberFormatExtensions,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\Support\TestEnglishNumberFormatExtensions.cs,TestToWords,The following statement contains a magic number: Assert.AreEqual("one thousand two hundred thirty-four"' 1234.ToWords());
Magic Number,Lucene.Net.Support,TestEnglishNumberFormatExtensions,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\Support\TestEnglishNumberFormatExtensions.cs,TestToWords,The following statement contains a magic number: Assert.AreEqual("six million four hundred ninety-one thousand three hundred forty-eight"' 6491348.ToWords());
Magic Number,Lucene.Net.Support,TestEnglishNumberFormatExtensions,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\Support\TestEnglishNumberFormatExtensions.cs,TestToWords,The following statement contains a magic number: Assert.AreEqual("one hundred thirty"' 130.ToWords());
Magic Number,Lucene.Net.Support,TestEnglishNumberFormatExtensions,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\Support\TestEnglishNumberFormatExtensions.cs,TestToWords,The following statement contains a magic number: Assert.AreEqual("one hundred thirty-seven"' 137.ToWords());
Magic Number,Lucene.Net.Support,TestEnglishNumberFormatExtensions,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\Support\TestEnglishNumberFormatExtensions.cs,TestToWords,The following statement contains a magic number: Assert.AreEqual("seven hundred forty-nine million one hundred thirty-two thousand one hundred forty-six"' 749132146.ToWords());
Magic Number,Lucene.Net.Support,TestEnglishNumberFormatExtensions,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Benchmark\Support\TestEnglishNumberFormatExtensions.cs,TestToWords,The following statement contains a magic number: Assert.AreEqual("nine hundred ninety-nine billion seven hundred forty-nine million one hundred thirty-two thousand one hundred forty-six"' 999749132146.ToWords());
