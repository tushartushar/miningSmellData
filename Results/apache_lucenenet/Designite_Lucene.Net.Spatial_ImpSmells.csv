Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Lucene.Net.Spatial.Prefix,WithinPrefixTreeFilter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\WithinPrefixTreeFilter.cs,BufferShape,Cyclomatic complexity of the method is 9
Complex Method,Lucene.Net.Spatial.Prefix.Tree,SpatialPrefixTree,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\Tree\SpatialPrefixTree.cs,RecursiveGetCells,Cyclomatic complexity of the method is 9
Complex Method,Lucene.Net.Spatial.Vector,PointVectorStrategy,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Vector\PointVectorStrategy.cs,MakeQueryDistanceScore,Cyclomatic complexity of the method is 9
Long Parameter List,Lucene.Net.Spatial.Prefix,AbstractVisitingPrefixTreeFilter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\AbstractVisitingPrefixTreeFilter.cs,AbstractVisitingPrefixTreeFilter,The method has 5 parameters.
Long Parameter List,Lucene.Net.Spatial.Prefix,ContainsPrefixTreeFilter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\ContainsPrefixTreeFilter.cs,ContainsPrefixTreeFilter,The method has 5 parameters.
Long Parameter List,Lucene.Net.Spatial.Prefix,IntersectsPrefixTreeFilter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\IntersectsPrefixTreeFilter.cs,IntersectsPrefixTreeFilter,The method has 6 parameters.
Long Parameter List,Lucene.Net.Spatial.Prefix,WithinPrefixTreeFilter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\WithinPrefixTreeFilter.cs,WithinPrefixTreeFilter,The method has 6 parameters.
Long Parameter List,Lucene.Net.Spatial.Prefix.Tree,QuadPrefixTree,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\Tree\QuadPrefixTree.cs,Build,The method has 7 parameters.
Long Parameter List,Lucene.Net.Spatial.Prefix.Tree,QuadPrefixTree,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\Tree\QuadPrefixTree.cs,CheckBattenberg,The method has 8 parameters.
Long Parameter List,Lucene.Net.Spatial.Prefix.Tree,SpatialPrefixTree,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\Tree\SpatialPrefixTree.cs,RecursiveGetCells,The method has 6 parameters.
Long Statement,Lucene.Net.Spatial.Prefix,PrefixTreeStrategy,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\PrefixTreeStrategy.cs,MakeDistanceValueSource,The length of the statement  "	var p = provider.GetOrAdd (FieldName' f => new PointPrefixTreeFieldCacheProvider (m_grid' FieldName' m_defaultFieldValuesArrayLen)); " is 132.
Long Statement,Lucene.Net.Spatial.Prefix.Tree,QuadPrefixTree,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\Tree\QuadPrefixTree.cs,PrintInfo,The length of the statement  "		@out.WriteLine (i + "]\t" + levelW [i].ToString (FORMAT_STR) + "\t" + levelH [i].ToString (FORMAT_STR) + "\t" + levelS [i] + "\t" + (levelS [i] * levelS [i])); " is 159.
Long Statement,Lucene.Net.Spatial.Serialized,SerializedDVStrategy,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Serialized\SerializedDVStrategy.cs,MakeQuery,The length of the statement  "	throw new NotSupportedException ("This strategy can't return a query that operates" + " efficiently. Instead try a Filter or ValueSource."); " is 140.
Long Statement,Lucene.Net.Spatial.Serialized,SerializedDVStrategy,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Serialized\SerializedDVStrategy.cs,MakeFilter,The length of the statement  "	ShapePredicateValueSource predicateValueSource = new ShapePredicateValueSource (shapeValueSource' args.Operation' args.Shape); " is 126.
Long Statement,Lucene.Net.Spatial.Vector,PointVectorStrategy,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Vector\PointVectorStrategy.cs,MakeQuery,The length of the statement  "		var vsf = new ValueSourceFilter (new QueryWrapperFilter (MakeWithin (bbox))' MakeDistanceValueSource (circle.Center)' 0' circle.Radius); " is 136.
Long Statement,Lucene.Net.Spatial.Vector,PointVectorStrategy,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Vector\PointVectorStrategy.cs,MakeQuery,The length of the statement  "	throw new NotSupportedException ("Only IRectangles and ICircles are currently supported' " + "found [" + shape.GetType ().Name + "]"); " is 134.
Long Statement,Lucene.Net.Spatial.Vector,PointVectorStrategy,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Vector\PointVectorStrategy.cs,MakeQueryDistanceScore,The length of the statement  "		throw new NotSupportedException ("Only Rectangles and Circles are currently supported' found [" + shape.GetType ().Name + "]"); " is 127.
Virtual Method Call from Constructor,Lucene.Net.Spatial,DisjointSpatialFilter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\DisjointSpatialFilter.cs,DisjointSpatialFilter,The constructor "DisjointSpatialFilter" calls a virtual method "MakeFilter".
Virtual Method Call from Constructor,Lucene.Net.Spatial.Prefix,WithinPrefixTreeFilter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\WithinPrefixTreeFilter.cs,WithinPrefixTreeFilter,The constructor "WithinPrefixTreeFilter" calls a virtual method "BufferShape".
Virtual Method Call from Constructor,Lucene.Net.Spatial.Prefix.Tree,Cell,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\Tree\Cell.cs,Cell,The constructor "Cell" calls a virtual method "SetLeaf".
Magic Number,Lucene.Net.Spatial,DisjointSpatialFilter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\DisjointSpatialFilter.cs,GetHashCode,The following statement contains a magic number: result = 31 * result + intersectsFilter.GetHashCode ();  
Magic Number,Lucene.Net.Spatial.Prefix,AbstractPrefixTreeFilter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\AbstractPrefixTreeFilter.cs,GetHashCode,The following statement contains a magic number: result = 31 * result + m_fieldName.GetHashCode ();  
Magic Number,Lucene.Net.Spatial.Prefix,AbstractPrefixTreeFilter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\AbstractPrefixTreeFilter.cs,GetHashCode,The following statement contains a magic number: result = 31 * result + m_detailLevel;  
Magic Number,Lucene.Net.Spatial.Prefix,RecursivePrefixTreeStrategy,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\RecursivePrefixTreeStrategy.cs,RecursivePrefixTreeStrategy,The following statement contains a magic number: prefixGridScanLevel = grid.MaxLevels - 4;  
Magic Number,Lucene.Net.Spatial.Prefix,WithinPrefixTreeFilter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\WithinPrefixTreeFilter.cs,BufferShape,The following statement contains a magic number: if (shape is IPoint) {  	return ctx.MakeCircle ((IPoint)shape' distErr);  } else if (shape is ICircle) {  	var circle = (ICircle)shape;  	double newDist = circle.Radius + distErr;  	if (ctx.IsGeo && newDist > 180) {  		newDist = 180;  	}  	return ctx.MakeCircle (circle.Center' newDist);  } else {  	IRectangle bbox = shape.BoundingBox;  	double newMinX = bbox.MinX - distErr;  	double newMaxX = bbox.MaxX + distErr;  	double newMinY = bbox.MinY - distErr;  	double newMaxY = bbox.MaxY + distErr;  	if (ctx.IsGeo) {  		if (newMinY < -90) {  			newMinY = -90;  		}  		if (newMaxY > 90) {  			newMaxY = 90;  		}  		if (newMinY == -90 || newMaxY == 90 || bbox.Width + 2 * distErr > 360) {  			newMinX = -180;  			newMaxX = 180;  		} else {  			newMinX = DistanceUtils.NormLonDEG (newMinX);  			newMaxX = DistanceUtils.NormLonDEG (newMaxX);  		}  	} else {  		//restrict to world bounds  		newMinX = Math.Max (newMinX' ctx.WorldBounds.MinX);  		newMaxX = Math.Min (newMaxX' ctx.WorldBounds.MaxX);  		newMinY = Math.Max (newMinY' ctx.WorldBounds.MinY);  		newMaxY = Math.Min (newMaxY' ctx.WorldBounds.MaxY);  	}  	return ctx.MakeRectangle (newMinX' newMaxX' newMinY' newMaxY);  }  
Magic Number,Lucene.Net.Spatial.Prefix,WithinPrefixTreeFilter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\WithinPrefixTreeFilter.cs,BufferShape,The following statement contains a magic number: if (shape is IPoint) {  	return ctx.MakeCircle ((IPoint)shape' distErr);  } else if (shape is ICircle) {  	var circle = (ICircle)shape;  	double newDist = circle.Radius + distErr;  	if (ctx.IsGeo && newDist > 180) {  		newDist = 180;  	}  	return ctx.MakeCircle (circle.Center' newDist);  } else {  	IRectangle bbox = shape.BoundingBox;  	double newMinX = bbox.MinX - distErr;  	double newMaxX = bbox.MaxX + distErr;  	double newMinY = bbox.MinY - distErr;  	double newMaxY = bbox.MaxY + distErr;  	if (ctx.IsGeo) {  		if (newMinY < -90) {  			newMinY = -90;  		}  		if (newMaxY > 90) {  			newMaxY = 90;  		}  		if (newMinY == -90 || newMaxY == 90 || bbox.Width + 2 * distErr > 360) {  			newMinX = -180;  			newMaxX = 180;  		} else {  			newMinX = DistanceUtils.NormLonDEG (newMinX);  			newMaxX = DistanceUtils.NormLonDEG (newMaxX);  		}  	} else {  		//restrict to world bounds  		newMinX = Math.Max (newMinX' ctx.WorldBounds.MinX);  		newMaxX = Math.Min (newMaxX' ctx.WorldBounds.MaxX);  		newMinY = Math.Max (newMinY' ctx.WorldBounds.MinY);  		newMaxY = Math.Min (newMaxY' ctx.WorldBounds.MaxY);  	}  	return ctx.MakeRectangle (newMinX' newMaxX' newMinY' newMaxY);  }  
Magic Number,Lucene.Net.Spatial.Prefix,WithinPrefixTreeFilter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\WithinPrefixTreeFilter.cs,BufferShape,The following statement contains a magic number: if (shape is IPoint) {  	return ctx.MakeCircle ((IPoint)shape' distErr);  } else if (shape is ICircle) {  	var circle = (ICircle)shape;  	double newDist = circle.Radius + distErr;  	if (ctx.IsGeo && newDist > 180) {  		newDist = 180;  	}  	return ctx.MakeCircle (circle.Center' newDist);  } else {  	IRectangle bbox = shape.BoundingBox;  	double newMinX = bbox.MinX - distErr;  	double newMaxX = bbox.MaxX + distErr;  	double newMinY = bbox.MinY - distErr;  	double newMaxY = bbox.MaxY + distErr;  	if (ctx.IsGeo) {  		if (newMinY < -90) {  			newMinY = -90;  		}  		if (newMaxY > 90) {  			newMaxY = 90;  		}  		if (newMinY == -90 || newMaxY == 90 || bbox.Width + 2 * distErr > 360) {  			newMinX = -180;  			newMaxX = 180;  		} else {  			newMinX = DistanceUtils.NormLonDEG (newMinX);  			newMaxX = DistanceUtils.NormLonDEG (newMaxX);  		}  	} else {  		//restrict to world bounds  		newMinX = Math.Max (newMinX' ctx.WorldBounds.MinX);  		newMaxX = Math.Min (newMaxX' ctx.WorldBounds.MaxX);  		newMinY = Math.Max (newMinY' ctx.WorldBounds.MinY);  		newMaxY = Math.Min (newMaxY' ctx.WorldBounds.MaxY);  	}  	return ctx.MakeRectangle (newMinX' newMaxX' newMinY' newMaxY);  }  
Magic Number,Lucene.Net.Spatial.Prefix,WithinPrefixTreeFilter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\WithinPrefixTreeFilter.cs,BufferShape,The following statement contains a magic number: if (shape is IPoint) {  	return ctx.MakeCircle ((IPoint)shape' distErr);  } else if (shape is ICircle) {  	var circle = (ICircle)shape;  	double newDist = circle.Radius + distErr;  	if (ctx.IsGeo && newDist > 180) {  		newDist = 180;  	}  	return ctx.MakeCircle (circle.Center' newDist);  } else {  	IRectangle bbox = shape.BoundingBox;  	double newMinX = bbox.MinX - distErr;  	double newMaxX = bbox.MaxX + distErr;  	double newMinY = bbox.MinY - distErr;  	double newMaxY = bbox.MaxY + distErr;  	if (ctx.IsGeo) {  		if (newMinY < -90) {  			newMinY = -90;  		}  		if (newMaxY > 90) {  			newMaxY = 90;  		}  		if (newMinY == -90 || newMaxY == 90 || bbox.Width + 2 * distErr > 360) {  			newMinX = -180;  			newMaxX = 180;  		} else {  			newMinX = DistanceUtils.NormLonDEG (newMinX);  			newMaxX = DistanceUtils.NormLonDEG (newMaxX);  		}  	} else {  		//restrict to world bounds  		newMinX = Math.Max (newMinX' ctx.WorldBounds.MinX);  		newMaxX = Math.Min (newMaxX' ctx.WorldBounds.MaxX);  		newMinY = Math.Max (newMinY' ctx.WorldBounds.MinY);  		newMaxY = Math.Min (newMaxY' ctx.WorldBounds.MaxY);  	}  	return ctx.MakeRectangle (newMinX' newMaxX' newMinY' newMaxY);  }  
Magic Number,Lucene.Net.Spatial.Prefix,WithinPrefixTreeFilter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\WithinPrefixTreeFilter.cs,BufferShape,The following statement contains a magic number: if (shape is IPoint) {  	return ctx.MakeCircle ((IPoint)shape' distErr);  } else if (shape is ICircle) {  	var circle = (ICircle)shape;  	double newDist = circle.Radius + distErr;  	if (ctx.IsGeo && newDist > 180) {  		newDist = 180;  	}  	return ctx.MakeCircle (circle.Center' newDist);  } else {  	IRectangle bbox = shape.BoundingBox;  	double newMinX = bbox.MinX - distErr;  	double newMaxX = bbox.MaxX + distErr;  	double newMinY = bbox.MinY - distErr;  	double newMaxY = bbox.MaxY + distErr;  	if (ctx.IsGeo) {  		if (newMinY < -90) {  			newMinY = -90;  		}  		if (newMaxY > 90) {  			newMaxY = 90;  		}  		if (newMinY == -90 || newMaxY == 90 || bbox.Width + 2 * distErr > 360) {  			newMinX = -180;  			newMaxX = 180;  		} else {  			newMinX = DistanceUtils.NormLonDEG (newMinX);  			newMaxX = DistanceUtils.NormLonDEG (newMaxX);  		}  	} else {  		//restrict to world bounds  		newMinX = Math.Max (newMinX' ctx.WorldBounds.MinX);  		newMaxX = Math.Min (newMaxX' ctx.WorldBounds.MaxX);  		newMinY = Math.Max (newMinY' ctx.WorldBounds.MinY);  		newMaxY = Math.Min (newMaxY' ctx.WorldBounds.MaxY);  	}  	return ctx.MakeRectangle (newMinX' newMaxX' newMinY' newMaxY);  }  
Magic Number,Lucene.Net.Spatial.Prefix,WithinPrefixTreeFilter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\WithinPrefixTreeFilter.cs,BufferShape,The following statement contains a magic number: if (shape is IPoint) {  	return ctx.MakeCircle ((IPoint)shape' distErr);  } else if (shape is ICircle) {  	var circle = (ICircle)shape;  	double newDist = circle.Radius + distErr;  	if (ctx.IsGeo && newDist > 180) {  		newDist = 180;  	}  	return ctx.MakeCircle (circle.Center' newDist);  } else {  	IRectangle bbox = shape.BoundingBox;  	double newMinX = bbox.MinX - distErr;  	double newMaxX = bbox.MaxX + distErr;  	double newMinY = bbox.MinY - distErr;  	double newMaxY = bbox.MaxY + distErr;  	if (ctx.IsGeo) {  		if (newMinY < -90) {  			newMinY = -90;  		}  		if (newMaxY > 90) {  			newMaxY = 90;  		}  		if (newMinY == -90 || newMaxY == 90 || bbox.Width + 2 * distErr > 360) {  			newMinX = -180;  			newMaxX = 180;  		} else {  			newMinX = DistanceUtils.NormLonDEG (newMinX);  			newMaxX = DistanceUtils.NormLonDEG (newMaxX);  		}  	} else {  		//restrict to world bounds  		newMinX = Math.Max (newMinX' ctx.WorldBounds.MinX);  		newMaxX = Math.Min (newMaxX' ctx.WorldBounds.MaxX);  		newMinY = Math.Max (newMinY' ctx.WorldBounds.MinY);  		newMaxY = Math.Min (newMaxY' ctx.WorldBounds.MaxY);  	}  	return ctx.MakeRectangle (newMinX' newMaxX' newMinY' newMaxY);  }  
Magic Number,Lucene.Net.Spatial.Prefix,WithinPrefixTreeFilter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\WithinPrefixTreeFilter.cs,BufferShape,The following statement contains a magic number: if (shape is IPoint) {  	return ctx.MakeCircle ((IPoint)shape' distErr);  } else if (shape is ICircle) {  	var circle = (ICircle)shape;  	double newDist = circle.Radius + distErr;  	if (ctx.IsGeo && newDist > 180) {  		newDist = 180;  	}  	return ctx.MakeCircle (circle.Center' newDist);  } else {  	IRectangle bbox = shape.BoundingBox;  	double newMinX = bbox.MinX - distErr;  	double newMaxX = bbox.MaxX + distErr;  	double newMinY = bbox.MinY - distErr;  	double newMaxY = bbox.MaxY + distErr;  	if (ctx.IsGeo) {  		if (newMinY < -90) {  			newMinY = -90;  		}  		if (newMaxY > 90) {  			newMaxY = 90;  		}  		if (newMinY == -90 || newMaxY == 90 || bbox.Width + 2 * distErr > 360) {  			newMinX = -180;  			newMaxX = 180;  		} else {  			newMinX = DistanceUtils.NormLonDEG (newMinX);  			newMaxX = DistanceUtils.NormLonDEG (newMaxX);  		}  	} else {  		//restrict to world bounds  		newMinX = Math.Max (newMinX' ctx.WorldBounds.MinX);  		newMaxX = Math.Min (newMaxX' ctx.WorldBounds.MaxX);  		newMinY = Math.Max (newMinY' ctx.WorldBounds.MinY);  		newMaxY = Math.Min (newMaxY' ctx.WorldBounds.MaxY);  	}  	return ctx.MakeRectangle (newMinX' newMaxX' newMinY' newMaxY);  }  
Magic Number,Lucene.Net.Spatial.Prefix,WithinPrefixTreeFilter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\WithinPrefixTreeFilter.cs,BufferShape,The following statement contains a magic number: if (shape is IPoint) {  	return ctx.MakeCircle ((IPoint)shape' distErr);  } else if (shape is ICircle) {  	var circle = (ICircle)shape;  	double newDist = circle.Radius + distErr;  	if (ctx.IsGeo && newDist > 180) {  		newDist = 180;  	}  	return ctx.MakeCircle (circle.Center' newDist);  } else {  	IRectangle bbox = shape.BoundingBox;  	double newMinX = bbox.MinX - distErr;  	double newMaxX = bbox.MaxX + distErr;  	double newMinY = bbox.MinY - distErr;  	double newMaxY = bbox.MaxY + distErr;  	if (ctx.IsGeo) {  		if (newMinY < -90) {  			newMinY = -90;  		}  		if (newMaxY > 90) {  			newMaxY = 90;  		}  		if (newMinY == -90 || newMaxY == 90 || bbox.Width + 2 * distErr > 360) {  			newMinX = -180;  			newMaxX = 180;  		} else {  			newMinX = DistanceUtils.NormLonDEG (newMinX);  			newMaxX = DistanceUtils.NormLonDEG (newMaxX);  		}  	} else {  		//restrict to world bounds  		newMinX = Math.Max (newMinX' ctx.WorldBounds.MinX);  		newMaxX = Math.Min (newMaxX' ctx.WorldBounds.MaxX);  		newMinY = Math.Max (newMinY' ctx.WorldBounds.MinY);  		newMaxY = Math.Min (newMaxY' ctx.WorldBounds.MaxY);  	}  	return ctx.MakeRectangle (newMinX' newMaxX' newMinY' newMaxY);  }  
Magic Number,Lucene.Net.Spatial.Prefix,WithinPrefixTreeFilter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\WithinPrefixTreeFilter.cs,BufferShape,The following statement contains a magic number: if (shape is IPoint) {  	return ctx.MakeCircle ((IPoint)shape' distErr);  } else if (shape is ICircle) {  	var circle = (ICircle)shape;  	double newDist = circle.Radius + distErr;  	if (ctx.IsGeo && newDist > 180) {  		newDist = 180;  	}  	return ctx.MakeCircle (circle.Center' newDist);  } else {  	IRectangle bbox = shape.BoundingBox;  	double newMinX = bbox.MinX - distErr;  	double newMaxX = bbox.MaxX + distErr;  	double newMinY = bbox.MinY - distErr;  	double newMaxY = bbox.MaxY + distErr;  	if (ctx.IsGeo) {  		if (newMinY < -90) {  			newMinY = -90;  		}  		if (newMaxY > 90) {  			newMaxY = 90;  		}  		if (newMinY == -90 || newMaxY == 90 || bbox.Width + 2 * distErr > 360) {  			newMinX = -180;  			newMaxX = 180;  		} else {  			newMinX = DistanceUtils.NormLonDEG (newMinX);  			newMaxX = DistanceUtils.NormLonDEG (newMaxX);  		}  	} else {  		//restrict to world bounds  		newMinX = Math.Max (newMinX' ctx.WorldBounds.MinX);  		newMaxX = Math.Min (newMaxX' ctx.WorldBounds.MaxX);  		newMinY = Math.Max (newMinY' ctx.WorldBounds.MinY);  		newMaxY = Math.Min (newMaxY' ctx.WorldBounds.MaxY);  	}  	return ctx.MakeRectangle (newMinX' newMaxX' newMinY' newMaxY);  }  
Magic Number,Lucene.Net.Spatial.Prefix,WithinPrefixTreeFilter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\WithinPrefixTreeFilter.cs,BufferShape,The following statement contains a magic number: if (shape is IPoint) {  	return ctx.MakeCircle ((IPoint)shape' distErr);  } else if (shape is ICircle) {  	var circle = (ICircle)shape;  	double newDist = circle.Radius + distErr;  	if (ctx.IsGeo && newDist > 180) {  		newDist = 180;  	}  	return ctx.MakeCircle (circle.Center' newDist);  } else {  	IRectangle bbox = shape.BoundingBox;  	double newMinX = bbox.MinX - distErr;  	double newMaxX = bbox.MaxX + distErr;  	double newMinY = bbox.MinY - distErr;  	double newMaxY = bbox.MaxY + distErr;  	if (ctx.IsGeo) {  		if (newMinY < -90) {  			newMinY = -90;  		}  		if (newMaxY > 90) {  			newMaxY = 90;  		}  		if (newMinY == -90 || newMaxY == 90 || bbox.Width + 2 * distErr > 360) {  			newMinX = -180;  			newMaxX = 180;  		} else {  			newMinX = DistanceUtils.NormLonDEG (newMinX);  			newMaxX = DistanceUtils.NormLonDEG (newMaxX);  		}  	} else {  		//restrict to world bounds  		newMinX = Math.Max (newMinX' ctx.WorldBounds.MinX);  		newMaxX = Math.Min (newMaxX' ctx.WorldBounds.MaxX);  		newMinY = Math.Max (newMinY' ctx.WorldBounds.MinY);  		newMaxY = Math.Min (newMaxY' ctx.WorldBounds.MaxY);  	}  	return ctx.MakeRectangle (newMinX' newMaxX' newMinY' newMaxY);  }  
Magic Number,Lucene.Net.Spatial.Prefix,WithinPrefixTreeFilter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\WithinPrefixTreeFilter.cs,BufferShape,The following statement contains a magic number: if (shape is IPoint) {  	return ctx.MakeCircle ((IPoint)shape' distErr);  } else if (shape is ICircle) {  	var circle = (ICircle)shape;  	double newDist = circle.Radius + distErr;  	if (ctx.IsGeo && newDist > 180) {  		newDist = 180;  	}  	return ctx.MakeCircle (circle.Center' newDist);  } else {  	IRectangle bbox = shape.BoundingBox;  	double newMinX = bbox.MinX - distErr;  	double newMaxX = bbox.MaxX + distErr;  	double newMinY = bbox.MinY - distErr;  	double newMaxY = bbox.MaxY + distErr;  	if (ctx.IsGeo) {  		if (newMinY < -90) {  			newMinY = -90;  		}  		if (newMaxY > 90) {  			newMaxY = 90;  		}  		if (newMinY == -90 || newMaxY == 90 || bbox.Width + 2 * distErr > 360) {  			newMinX = -180;  			newMaxX = 180;  		} else {  			newMinX = DistanceUtils.NormLonDEG (newMinX);  			newMaxX = DistanceUtils.NormLonDEG (newMaxX);  		}  	} else {  		//restrict to world bounds  		newMinX = Math.Max (newMinX' ctx.WorldBounds.MinX);  		newMaxX = Math.Min (newMaxX' ctx.WorldBounds.MaxX);  		newMinY = Math.Max (newMinY' ctx.WorldBounds.MinY);  		newMaxY = Math.Min (newMaxY' ctx.WorldBounds.MaxY);  	}  	return ctx.MakeRectangle (newMinX' newMaxX' newMinY' newMaxY);  }  
Magic Number,Lucene.Net.Spatial.Prefix,WithinPrefixTreeFilter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\WithinPrefixTreeFilter.cs,BufferShape,The following statement contains a magic number: if (shape is IPoint) {  	return ctx.MakeCircle ((IPoint)shape' distErr);  } else if (shape is ICircle) {  	var circle = (ICircle)shape;  	double newDist = circle.Radius + distErr;  	if (ctx.IsGeo && newDist > 180) {  		newDist = 180;  	}  	return ctx.MakeCircle (circle.Center' newDist);  } else {  	IRectangle bbox = shape.BoundingBox;  	double newMinX = bbox.MinX - distErr;  	double newMaxX = bbox.MaxX + distErr;  	double newMinY = bbox.MinY - distErr;  	double newMaxY = bbox.MaxY + distErr;  	if (ctx.IsGeo) {  		if (newMinY < -90) {  			newMinY = -90;  		}  		if (newMaxY > 90) {  			newMaxY = 90;  		}  		if (newMinY == -90 || newMaxY == 90 || bbox.Width + 2 * distErr > 360) {  			newMinX = -180;  			newMaxX = 180;  		} else {  			newMinX = DistanceUtils.NormLonDEG (newMinX);  			newMaxX = DistanceUtils.NormLonDEG (newMaxX);  		}  	} else {  		//restrict to world bounds  		newMinX = Math.Max (newMinX' ctx.WorldBounds.MinX);  		newMaxX = Math.Min (newMaxX' ctx.WorldBounds.MaxX);  		newMinY = Math.Max (newMinY' ctx.WorldBounds.MinY);  		newMaxY = Math.Min (newMaxY' ctx.WorldBounds.MaxY);  	}  	return ctx.MakeRectangle (newMinX' newMaxX' newMinY' newMaxY);  }  
Magic Number,Lucene.Net.Spatial.Prefix,WithinPrefixTreeFilter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\WithinPrefixTreeFilter.cs,BufferShape,The following statement contains a magic number: if (shape is ICircle) {  	var circle = (ICircle)shape;  	double newDist = circle.Radius + distErr;  	if (ctx.IsGeo && newDist > 180) {  		newDist = 180;  	}  	return ctx.MakeCircle (circle.Center' newDist);  } else {  	IRectangle bbox = shape.BoundingBox;  	double newMinX = bbox.MinX - distErr;  	double newMaxX = bbox.MaxX + distErr;  	double newMinY = bbox.MinY - distErr;  	double newMaxY = bbox.MaxY + distErr;  	if (ctx.IsGeo) {  		if (newMinY < -90) {  			newMinY = -90;  		}  		if (newMaxY > 90) {  			newMaxY = 90;  		}  		if (newMinY == -90 || newMaxY == 90 || bbox.Width + 2 * distErr > 360) {  			newMinX = -180;  			newMaxX = 180;  		} else {  			newMinX = DistanceUtils.NormLonDEG (newMinX);  			newMaxX = DistanceUtils.NormLonDEG (newMaxX);  		}  	} else {  		//restrict to world bounds  		newMinX = Math.Max (newMinX' ctx.WorldBounds.MinX);  		newMaxX = Math.Min (newMaxX' ctx.WorldBounds.MaxX);  		newMinY = Math.Max (newMinY' ctx.WorldBounds.MinY);  		newMaxY = Math.Min (newMaxY' ctx.WorldBounds.MaxY);  	}  	return ctx.MakeRectangle (newMinX' newMaxX' newMinY' newMaxY);  }  
Magic Number,Lucene.Net.Spatial.Prefix,WithinPrefixTreeFilter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\WithinPrefixTreeFilter.cs,BufferShape,The following statement contains a magic number: if (shape is ICircle) {  	var circle = (ICircle)shape;  	double newDist = circle.Radius + distErr;  	if (ctx.IsGeo && newDist > 180) {  		newDist = 180;  	}  	return ctx.MakeCircle (circle.Center' newDist);  } else {  	IRectangle bbox = shape.BoundingBox;  	double newMinX = bbox.MinX - distErr;  	double newMaxX = bbox.MaxX + distErr;  	double newMinY = bbox.MinY - distErr;  	double newMaxY = bbox.MaxY + distErr;  	if (ctx.IsGeo) {  		if (newMinY < -90) {  			newMinY = -90;  		}  		if (newMaxY > 90) {  			newMaxY = 90;  		}  		if (newMinY == -90 || newMaxY == 90 || bbox.Width + 2 * distErr > 360) {  			newMinX = -180;  			newMaxX = 180;  		} else {  			newMinX = DistanceUtils.NormLonDEG (newMinX);  			newMaxX = DistanceUtils.NormLonDEG (newMaxX);  		}  	} else {  		//restrict to world bounds  		newMinX = Math.Max (newMinX' ctx.WorldBounds.MinX);  		newMaxX = Math.Min (newMaxX' ctx.WorldBounds.MaxX);  		newMinY = Math.Max (newMinY' ctx.WorldBounds.MinY);  		newMaxY = Math.Min (newMaxY' ctx.WorldBounds.MaxY);  	}  	return ctx.MakeRectangle (newMinX' newMaxX' newMinY' newMaxY);  }  
Magic Number,Lucene.Net.Spatial.Prefix,WithinPrefixTreeFilter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\WithinPrefixTreeFilter.cs,BufferShape,The following statement contains a magic number: if (shape is ICircle) {  	var circle = (ICircle)shape;  	double newDist = circle.Radius + distErr;  	if (ctx.IsGeo && newDist > 180) {  		newDist = 180;  	}  	return ctx.MakeCircle (circle.Center' newDist);  } else {  	IRectangle bbox = shape.BoundingBox;  	double newMinX = bbox.MinX - distErr;  	double newMaxX = bbox.MaxX + distErr;  	double newMinY = bbox.MinY - distErr;  	double newMaxY = bbox.MaxY + distErr;  	if (ctx.IsGeo) {  		if (newMinY < -90) {  			newMinY = -90;  		}  		if (newMaxY > 90) {  			newMaxY = 90;  		}  		if (newMinY == -90 || newMaxY == 90 || bbox.Width + 2 * distErr > 360) {  			newMinX = -180;  			newMaxX = 180;  		} else {  			newMinX = DistanceUtils.NormLonDEG (newMinX);  			newMaxX = DistanceUtils.NormLonDEG (newMaxX);  		}  	} else {  		//restrict to world bounds  		newMinX = Math.Max (newMinX' ctx.WorldBounds.MinX);  		newMaxX = Math.Min (newMaxX' ctx.WorldBounds.MaxX);  		newMinY = Math.Max (newMinY' ctx.WorldBounds.MinY);  		newMaxY = Math.Min (newMaxY' ctx.WorldBounds.MaxY);  	}  	return ctx.MakeRectangle (newMinX' newMaxX' newMinY' newMaxY);  }  
Magic Number,Lucene.Net.Spatial.Prefix,WithinPrefixTreeFilter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\WithinPrefixTreeFilter.cs,BufferShape,The following statement contains a magic number: if (shape is ICircle) {  	var circle = (ICircle)shape;  	double newDist = circle.Radius + distErr;  	if (ctx.IsGeo && newDist > 180) {  		newDist = 180;  	}  	return ctx.MakeCircle (circle.Center' newDist);  } else {  	IRectangle bbox = shape.BoundingBox;  	double newMinX = bbox.MinX - distErr;  	double newMaxX = bbox.MaxX + distErr;  	double newMinY = bbox.MinY - distErr;  	double newMaxY = bbox.MaxY + distErr;  	if (ctx.IsGeo) {  		if (newMinY < -90) {  			newMinY = -90;  		}  		if (newMaxY > 90) {  			newMaxY = 90;  		}  		if (newMinY == -90 || newMaxY == 90 || bbox.Width + 2 * distErr > 360) {  			newMinX = -180;  			newMaxX = 180;  		} else {  			newMinX = DistanceUtils.NormLonDEG (newMinX);  			newMaxX = DistanceUtils.NormLonDEG (newMaxX);  		}  	} else {  		//restrict to world bounds  		newMinX = Math.Max (newMinX' ctx.WorldBounds.MinX);  		newMaxX = Math.Min (newMaxX' ctx.WorldBounds.MaxX);  		newMinY = Math.Max (newMinY' ctx.WorldBounds.MinY);  		newMaxY = Math.Min (newMaxY' ctx.WorldBounds.MaxY);  	}  	return ctx.MakeRectangle (newMinX' newMaxX' newMinY' newMaxY);  }  
Magic Number,Lucene.Net.Spatial.Prefix,WithinPrefixTreeFilter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\WithinPrefixTreeFilter.cs,BufferShape,The following statement contains a magic number: if (shape is ICircle) {  	var circle = (ICircle)shape;  	double newDist = circle.Radius + distErr;  	if (ctx.IsGeo && newDist > 180) {  		newDist = 180;  	}  	return ctx.MakeCircle (circle.Center' newDist);  } else {  	IRectangle bbox = shape.BoundingBox;  	double newMinX = bbox.MinX - distErr;  	double newMaxX = bbox.MaxX + distErr;  	double newMinY = bbox.MinY - distErr;  	double newMaxY = bbox.MaxY + distErr;  	if (ctx.IsGeo) {  		if (newMinY < -90) {  			newMinY = -90;  		}  		if (newMaxY > 90) {  			newMaxY = 90;  		}  		if (newMinY == -90 || newMaxY == 90 || bbox.Width + 2 * distErr > 360) {  			newMinX = -180;  			newMaxX = 180;  		} else {  			newMinX = DistanceUtils.NormLonDEG (newMinX);  			newMaxX = DistanceUtils.NormLonDEG (newMaxX);  		}  	} else {  		//restrict to world bounds  		newMinX = Math.Max (newMinX' ctx.WorldBounds.MinX);  		newMaxX = Math.Min (newMaxX' ctx.WorldBounds.MaxX);  		newMinY = Math.Max (newMinY' ctx.WorldBounds.MinY);  		newMaxY = Math.Min (newMaxY' ctx.WorldBounds.MaxY);  	}  	return ctx.MakeRectangle (newMinX' newMaxX' newMinY' newMaxY);  }  
Magic Number,Lucene.Net.Spatial.Prefix,WithinPrefixTreeFilter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\WithinPrefixTreeFilter.cs,BufferShape,The following statement contains a magic number: if (shape is ICircle) {  	var circle = (ICircle)shape;  	double newDist = circle.Radius + distErr;  	if (ctx.IsGeo && newDist > 180) {  		newDist = 180;  	}  	return ctx.MakeCircle (circle.Center' newDist);  } else {  	IRectangle bbox = shape.BoundingBox;  	double newMinX = bbox.MinX - distErr;  	double newMaxX = bbox.MaxX + distErr;  	double newMinY = bbox.MinY - distErr;  	double newMaxY = bbox.MaxY + distErr;  	if (ctx.IsGeo) {  		if (newMinY < -90) {  			newMinY = -90;  		}  		if (newMaxY > 90) {  			newMaxY = 90;  		}  		if (newMinY == -90 || newMaxY == 90 || bbox.Width + 2 * distErr > 360) {  			newMinX = -180;  			newMaxX = 180;  		} else {  			newMinX = DistanceUtils.NormLonDEG (newMinX);  			newMaxX = DistanceUtils.NormLonDEG (newMaxX);  		}  	} else {  		//restrict to world bounds  		newMinX = Math.Max (newMinX' ctx.WorldBounds.MinX);  		newMaxX = Math.Min (newMaxX' ctx.WorldBounds.MaxX);  		newMinY = Math.Max (newMinY' ctx.WorldBounds.MinY);  		newMaxY = Math.Min (newMaxY' ctx.WorldBounds.MaxY);  	}  	return ctx.MakeRectangle (newMinX' newMaxX' newMinY' newMaxY);  }  
Magic Number,Lucene.Net.Spatial.Prefix,WithinPrefixTreeFilter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\WithinPrefixTreeFilter.cs,BufferShape,The following statement contains a magic number: if (shape is ICircle) {  	var circle = (ICircle)shape;  	double newDist = circle.Radius + distErr;  	if (ctx.IsGeo && newDist > 180) {  		newDist = 180;  	}  	return ctx.MakeCircle (circle.Center' newDist);  } else {  	IRectangle bbox = shape.BoundingBox;  	double newMinX = bbox.MinX - distErr;  	double newMaxX = bbox.MaxX + distErr;  	double newMinY = bbox.MinY - distErr;  	double newMaxY = bbox.MaxY + distErr;  	if (ctx.IsGeo) {  		if (newMinY < -90) {  			newMinY = -90;  		}  		if (newMaxY > 90) {  			newMaxY = 90;  		}  		if (newMinY == -90 || newMaxY == 90 || bbox.Width + 2 * distErr > 360) {  			newMinX = -180;  			newMaxX = 180;  		} else {  			newMinX = DistanceUtils.NormLonDEG (newMinX);  			newMaxX = DistanceUtils.NormLonDEG (newMaxX);  		}  	} else {  		//restrict to world bounds  		newMinX = Math.Max (newMinX' ctx.WorldBounds.MinX);  		newMaxX = Math.Min (newMaxX' ctx.WorldBounds.MaxX);  		newMinY = Math.Max (newMinY' ctx.WorldBounds.MinY);  		newMaxY = Math.Min (newMaxY' ctx.WorldBounds.MaxY);  	}  	return ctx.MakeRectangle (newMinX' newMaxX' newMinY' newMaxY);  }  
Magic Number,Lucene.Net.Spatial.Prefix,WithinPrefixTreeFilter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\WithinPrefixTreeFilter.cs,BufferShape,The following statement contains a magic number: if (shape is ICircle) {  	var circle = (ICircle)shape;  	double newDist = circle.Radius + distErr;  	if (ctx.IsGeo && newDist > 180) {  		newDist = 180;  	}  	return ctx.MakeCircle (circle.Center' newDist);  } else {  	IRectangle bbox = shape.BoundingBox;  	double newMinX = bbox.MinX - distErr;  	double newMaxX = bbox.MaxX + distErr;  	double newMinY = bbox.MinY - distErr;  	double newMaxY = bbox.MaxY + distErr;  	if (ctx.IsGeo) {  		if (newMinY < -90) {  			newMinY = -90;  		}  		if (newMaxY > 90) {  			newMaxY = 90;  		}  		if (newMinY == -90 || newMaxY == 90 || bbox.Width + 2 * distErr > 360) {  			newMinX = -180;  			newMaxX = 180;  		} else {  			newMinX = DistanceUtils.NormLonDEG (newMinX);  			newMaxX = DistanceUtils.NormLonDEG (newMaxX);  		}  	} else {  		//restrict to world bounds  		newMinX = Math.Max (newMinX' ctx.WorldBounds.MinX);  		newMaxX = Math.Min (newMaxX' ctx.WorldBounds.MaxX);  		newMinY = Math.Max (newMinY' ctx.WorldBounds.MinY);  		newMaxY = Math.Min (newMaxY' ctx.WorldBounds.MaxY);  	}  	return ctx.MakeRectangle (newMinX' newMaxX' newMinY' newMaxY);  }  
Magic Number,Lucene.Net.Spatial.Prefix,WithinPrefixTreeFilter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\WithinPrefixTreeFilter.cs,BufferShape,The following statement contains a magic number: if (shape is ICircle) {  	var circle = (ICircle)shape;  	double newDist = circle.Radius + distErr;  	if (ctx.IsGeo && newDist > 180) {  		newDist = 180;  	}  	return ctx.MakeCircle (circle.Center' newDist);  } else {  	IRectangle bbox = shape.BoundingBox;  	double newMinX = bbox.MinX - distErr;  	double newMaxX = bbox.MaxX + distErr;  	double newMinY = bbox.MinY - distErr;  	double newMaxY = bbox.MaxY + distErr;  	if (ctx.IsGeo) {  		if (newMinY < -90) {  			newMinY = -90;  		}  		if (newMaxY > 90) {  			newMaxY = 90;  		}  		if (newMinY == -90 || newMaxY == 90 || bbox.Width + 2 * distErr > 360) {  			newMinX = -180;  			newMaxX = 180;  		} else {  			newMinX = DistanceUtils.NormLonDEG (newMinX);  			newMaxX = DistanceUtils.NormLonDEG (newMaxX);  		}  	} else {  		//restrict to world bounds  		newMinX = Math.Max (newMinX' ctx.WorldBounds.MinX);  		newMaxX = Math.Min (newMaxX' ctx.WorldBounds.MaxX);  		newMinY = Math.Max (newMinY' ctx.WorldBounds.MinY);  		newMaxY = Math.Min (newMaxY' ctx.WorldBounds.MaxY);  	}  	return ctx.MakeRectangle (newMinX' newMaxX' newMinY' newMaxY);  }  
Magic Number,Lucene.Net.Spatial.Prefix,WithinPrefixTreeFilter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\WithinPrefixTreeFilter.cs,BufferShape,The following statement contains a magic number: if (shape is ICircle) {  	var circle = (ICircle)shape;  	double newDist = circle.Radius + distErr;  	if (ctx.IsGeo && newDist > 180) {  		newDist = 180;  	}  	return ctx.MakeCircle (circle.Center' newDist);  } else {  	IRectangle bbox = shape.BoundingBox;  	double newMinX = bbox.MinX - distErr;  	double newMaxX = bbox.MaxX + distErr;  	double newMinY = bbox.MinY - distErr;  	double newMaxY = bbox.MaxY + distErr;  	if (ctx.IsGeo) {  		if (newMinY < -90) {  			newMinY = -90;  		}  		if (newMaxY > 90) {  			newMaxY = 90;  		}  		if (newMinY == -90 || newMaxY == 90 || bbox.Width + 2 * distErr > 360) {  			newMinX = -180;  			newMaxX = 180;  		} else {  			newMinX = DistanceUtils.NormLonDEG (newMinX);  			newMaxX = DistanceUtils.NormLonDEG (newMaxX);  		}  	} else {  		//restrict to world bounds  		newMinX = Math.Max (newMinX' ctx.WorldBounds.MinX);  		newMaxX = Math.Min (newMaxX' ctx.WorldBounds.MaxX);  		newMinY = Math.Max (newMinY' ctx.WorldBounds.MinY);  		newMaxY = Math.Min (newMaxY' ctx.WorldBounds.MaxY);  	}  	return ctx.MakeRectangle (newMinX' newMaxX' newMinY' newMaxY);  }  
Magic Number,Lucene.Net.Spatial.Prefix,WithinPrefixTreeFilter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\WithinPrefixTreeFilter.cs,BufferShape,The following statement contains a magic number: if (shape is ICircle) {  	var circle = (ICircle)shape;  	double newDist = circle.Radius + distErr;  	if (ctx.IsGeo && newDist > 180) {  		newDist = 180;  	}  	return ctx.MakeCircle (circle.Center' newDist);  } else {  	IRectangle bbox = shape.BoundingBox;  	double newMinX = bbox.MinX - distErr;  	double newMaxX = bbox.MaxX + distErr;  	double newMinY = bbox.MinY - distErr;  	double newMaxY = bbox.MaxY + distErr;  	if (ctx.IsGeo) {  		if (newMinY < -90) {  			newMinY = -90;  		}  		if (newMaxY > 90) {  			newMaxY = 90;  		}  		if (newMinY == -90 || newMaxY == 90 || bbox.Width + 2 * distErr > 360) {  			newMinX = -180;  			newMaxX = 180;  		} else {  			newMinX = DistanceUtils.NormLonDEG (newMinX);  			newMaxX = DistanceUtils.NormLonDEG (newMaxX);  		}  	} else {  		//restrict to world bounds  		newMinX = Math.Max (newMinX' ctx.WorldBounds.MinX);  		newMaxX = Math.Min (newMaxX' ctx.WorldBounds.MaxX);  		newMinY = Math.Max (newMinY' ctx.WorldBounds.MinY);  		newMaxY = Math.Min (newMaxY' ctx.WorldBounds.MaxY);  	}  	return ctx.MakeRectangle (newMinX' newMaxX' newMinY' newMaxY);  }  
Magic Number,Lucene.Net.Spatial.Prefix,WithinPrefixTreeFilter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\WithinPrefixTreeFilter.cs,BufferShape,The following statement contains a magic number: if (shape is ICircle) {  	var circle = (ICircle)shape;  	double newDist = circle.Radius + distErr;  	if (ctx.IsGeo && newDist > 180) {  		newDist = 180;  	}  	return ctx.MakeCircle (circle.Center' newDist);  } else {  	IRectangle bbox = shape.BoundingBox;  	double newMinX = bbox.MinX - distErr;  	double newMaxX = bbox.MaxX + distErr;  	double newMinY = bbox.MinY - distErr;  	double newMaxY = bbox.MaxY + distErr;  	if (ctx.IsGeo) {  		if (newMinY < -90) {  			newMinY = -90;  		}  		if (newMaxY > 90) {  			newMaxY = 90;  		}  		if (newMinY == -90 || newMaxY == 90 || bbox.Width + 2 * distErr > 360) {  			newMinX = -180;  			newMaxX = 180;  		} else {  			newMinX = DistanceUtils.NormLonDEG (newMinX);  			newMaxX = DistanceUtils.NormLonDEG (newMaxX);  		}  	} else {  		//restrict to world bounds  		newMinX = Math.Max (newMinX' ctx.WorldBounds.MinX);  		newMaxX = Math.Min (newMaxX' ctx.WorldBounds.MaxX);  		newMinY = Math.Max (newMinY' ctx.WorldBounds.MinY);  		newMaxY = Math.Min (newMaxY' ctx.WorldBounds.MaxY);  	}  	return ctx.MakeRectangle (newMinX' newMaxX' newMinY' newMaxY);  }  
Magic Number,Lucene.Net.Spatial.Prefix,WithinPrefixTreeFilter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\WithinPrefixTreeFilter.cs,BufferShape,The following statement contains a magic number: if (ctx.IsGeo && newDist > 180) {  	newDist = 180;  }  
Magic Number,Lucene.Net.Spatial.Prefix,WithinPrefixTreeFilter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\WithinPrefixTreeFilter.cs,BufferShape,The following statement contains a magic number: if (ctx.IsGeo && newDist > 180) {  	newDist = 180;  }  
Magic Number,Lucene.Net.Spatial.Prefix,WithinPrefixTreeFilter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\WithinPrefixTreeFilter.cs,BufferShape,The following statement contains a magic number: newDist = 180;  
Magic Number,Lucene.Net.Spatial.Prefix,WithinPrefixTreeFilter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\WithinPrefixTreeFilter.cs,BufferShape,The following statement contains a magic number: if (ctx.IsGeo) {  	if (newMinY < -90) {  		newMinY = -90;  	}  	if (newMaxY > 90) {  		newMaxY = 90;  	}  	if (newMinY == -90 || newMaxY == 90 || bbox.Width + 2 * distErr > 360) {  		newMinX = -180;  		newMaxX = 180;  	} else {  		newMinX = DistanceUtils.NormLonDEG (newMinX);  		newMaxX = DistanceUtils.NormLonDEG (newMaxX);  	}  } else {  	//restrict to world bounds  	newMinX = Math.Max (newMinX' ctx.WorldBounds.MinX);  	newMaxX = Math.Min (newMaxX' ctx.WorldBounds.MaxX);  	newMinY = Math.Max (newMinY' ctx.WorldBounds.MinY);  	newMaxY = Math.Min (newMaxY' ctx.WorldBounds.MaxY);  }  
Magic Number,Lucene.Net.Spatial.Prefix,WithinPrefixTreeFilter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\WithinPrefixTreeFilter.cs,BufferShape,The following statement contains a magic number: if (ctx.IsGeo) {  	if (newMinY < -90) {  		newMinY = -90;  	}  	if (newMaxY > 90) {  		newMaxY = 90;  	}  	if (newMinY == -90 || newMaxY == 90 || bbox.Width + 2 * distErr > 360) {  		newMinX = -180;  		newMaxX = 180;  	} else {  		newMinX = DistanceUtils.NormLonDEG (newMinX);  		newMaxX = DistanceUtils.NormLonDEG (newMaxX);  	}  } else {  	//restrict to world bounds  	newMinX = Math.Max (newMinX' ctx.WorldBounds.MinX);  	newMaxX = Math.Min (newMaxX' ctx.WorldBounds.MaxX);  	newMinY = Math.Max (newMinY' ctx.WorldBounds.MinY);  	newMaxY = Math.Min (newMaxY' ctx.WorldBounds.MaxY);  }  
Magic Number,Lucene.Net.Spatial.Prefix,WithinPrefixTreeFilter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\WithinPrefixTreeFilter.cs,BufferShape,The following statement contains a magic number: if (ctx.IsGeo) {  	if (newMinY < -90) {  		newMinY = -90;  	}  	if (newMaxY > 90) {  		newMaxY = 90;  	}  	if (newMinY == -90 || newMaxY == 90 || bbox.Width + 2 * distErr > 360) {  		newMinX = -180;  		newMaxX = 180;  	} else {  		newMinX = DistanceUtils.NormLonDEG (newMinX);  		newMaxX = DistanceUtils.NormLonDEG (newMaxX);  	}  } else {  	//restrict to world bounds  	newMinX = Math.Max (newMinX' ctx.WorldBounds.MinX);  	newMaxX = Math.Min (newMaxX' ctx.WorldBounds.MaxX);  	newMinY = Math.Max (newMinY' ctx.WorldBounds.MinY);  	newMaxY = Math.Min (newMaxY' ctx.WorldBounds.MaxY);  }  
Magic Number,Lucene.Net.Spatial.Prefix,WithinPrefixTreeFilter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\WithinPrefixTreeFilter.cs,BufferShape,The following statement contains a magic number: if (ctx.IsGeo) {  	if (newMinY < -90) {  		newMinY = -90;  	}  	if (newMaxY > 90) {  		newMaxY = 90;  	}  	if (newMinY == -90 || newMaxY == 90 || bbox.Width + 2 * distErr > 360) {  		newMinX = -180;  		newMaxX = 180;  	} else {  		newMinX = DistanceUtils.NormLonDEG (newMinX);  		newMaxX = DistanceUtils.NormLonDEG (newMaxX);  	}  } else {  	//restrict to world bounds  	newMinX = Math.Max (newMinX' ctx.WorldBounds.MinX);  	newMaxX = Math.Min (newMaxX' ctx.WorldBounds.MaxX);  	newMinY = Math.Max (newMinY' ctx.WorldBounds.MinY);  	newMaxY = Math.Min (newMaxY' ctx.WorldBounds.MaxY);  }  
Magic Number,Lucene.Net.Spatial.Prefix,WithinPrefixTreeFilter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\WithinPrefixTreeFilter.cs,BufferShape,The following statement contains a magic number: if (ctx.IsGeo) {  	if (newMinY < -90) {  		newMinY = -90;  	}  	if (newMaxY > 90) {  		newMaxY = 90;  	}  	if (newMinY == -90 || newMaxY == 90 || bbox.Width + 2 * distErr > 360) {  		newMinX = -180;  		newMaxX = 180;  	} else {  		newMinX = DistanceUtils.NormLonDEG (newMinX);  		newMaxX = DistanceUtils.NormLonDEG (newMaxX);  	}  } else {  	//restrict to world bounds  	newMinX = Math.Max (newMinX' ctx.WorldBounds.MinX);  	newMaxX = Math.Min (newMaxX' ctx.WorldBounds.MaxX);  	newMinY = Math.Max (newMinY' ctx.WorldBounds.MinY);  	newMaxY = Math.Min (newMaxY' ctx.WorldBounds.MaxY);  }  
Magic Number,Lucene.Net.Spatial.Prefix,WithinPrefixTreeFilter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\WithinPrefixTreeFilter.cs,BufferShape,The following statement contains a magic number: if (ctx.IsGeo) {  	if (newMinY < -90) {  		newMinY = -90;  	}  	if (newMaxY > 90) {  		newMaxY = 90;  	}  	if (newMinY == -90 || newMaxY == 90 || bbox.Width + 2 * distErr > 360) {  		newMinX = -180;  		newMaxX = 180;  	} else {  		newMinX = DistanceUtils.NormLonDEG (newMinX);  		newMaxX = DistanceUtils.NormLonDEG (newMaxX);  	}  } else {  	//restrict to world bounds  	newMinX = Math.Max (newMinX' ctx.WorldBounds.MinX);  	newMaxX = Math.Min (newMaxX' ctx.WorldBounds.MaxX);  	newMinY = Math.Max (newMinY' ctx.WorldBounds.MinY);  	newMaxY = Math.Min (newMaxY' ctx.WorldBounds.MaxY);  }  
Magic Number,Lucene.Net.Spatial.Prefix,WithinPrefixTreeFilter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\WithinPrefixTreeFilter.cs,BufferShape,The following statement contains a magic number: if (ctx.IsGeo) {  	if (newMinY < -90) {  		newMinY = -90;  	}  	if (newMaxY > 90) {  		newMaxY = 90;  	}  	if (newMinY == -90 || newMaxY == 90 || bbox.Width + 2 * distErr > 360) {  		newMinX = -180;  		newMaxX = 180;  	} else {  		newMinX = DistanceUtils.NormLonDEG (newMinX);  		newMaxX = DistanceUtils.NormLonDEG (newMaxX);  	}  } else {  	//restrict to world bounds  	newMinX = Math.Max (newMinX' ctx.WorldBounds.MinX);  	newMaxX = Math.Min (newMaxX' ctx.WorldBounds.MaxX);  	newMinY = Math.Max (newMinY' ctx.WorldBounds.MinY);  	newMaxY = Math.Min (newMaxY' ctx.WorldBounds.MaxY);  }  
Magic Number,Lucene.Net.Spatial.Prefix,WithinPrefixTreeFilter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\WithinPrefixTreeFilter.cs,BufferShape,The following statement contains a magic number: if (ctx.IsGeo) {  	if (newMinY < -90) {  		newMinY = -90;  	}  	if (newMaxY > 90) {  		newMaxY = 90;  	}  	if (newMinY == -90 || newMaxY == 90 || bbox.Width + 2 * distErr > 360) {  		newMinX = -180;  		newMaxX = 180;  	} else {  		newMinX = DistanceUtils.NormLonDEG (newMinX);  		newMaxX = DistanceUtils.NormLonDEG (newMaxX);  	}  } else {  	//restrict to world bounds  	newMinX = Math.Max (newMinX' ctx.WorldBounds.MinX);  	newMaxX = Math.Min (newMaxX' ctx.WorldBounds.MaxX);  	newMinY = Math.Max (newMinY' ctx.WorldBounds.MinY);  	newMaxY = Math.Min (newMaxY' ctx.WorldBounds.MaxY);  }  
Magic Number,Lucene.Net.Spatial.Prefix,WithinPrefixTreeFilter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\WithinPrefixTreeFilter.cs,BufferShape,The following statement contains a magic number: if (ctx.IsGeo) {  	if (newMinY < -90) {  		newMinY = -90;  	}  	if (newMaxY > 90) {  		newMaxY = 90;  	}  	if (newMinY == -90 || newMaxY == 90 || bbox.Width + 2 * distErr > 360) {  		newMinX = -180;  		newMaxX = 180;  	} else {  		newMinX = DistanceUtils.NormLonDEG (newMinX);  		newMaxX = DistanceUtils.NormLonDEG (newMaxX);  	}  } else {  	//restrict to world bounds  	newMinX = Math.Max (newMinX' ctx.WorldBounds.MinX);  	newMaxX = Math.Min (newMaxX' ctx.WorldBounds.MaxX);  	newMinY = Math.Max (newMinY' ctx.WorldBounds.MinY);  	newMaxY = Math.Min (newMaxY' ctx.WorldBounds.MaxY);  }  
Magic Number,Lucene.Net.Spatial.Prefix,WithinPrefixTreeFilter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\WithinPrefixTreeFilter.cs,BufferShape,The following statement contains a magic number: if (ctx.IsGeo) {  	if (newMinY < -90) {  		newMinY = -90;  	}  	if (newMaxY > 90) {  		newMaxY = 90;  	}  	if (newMinY == -90 || newMaxY == 90 || bbox.Width + 2 * distErr > 360) {  		newMinX = -180;  		newMaxX = 180;  	} else {  		newMinX = DistanceUtils.NormLonDEG (newMinX);  		newMaxX = DistanceUtils.NormLonDEG (newMaxX);  	}  } else {  	//restrict to world bounds  	newMinX = Math.Max (newMinX' ctx.WorldBounds.MinX);  	newMaxX = Math.Min (newMaxX' ctx.WorldBounds.MaxX);  	newMinY = Math.Max (newMinY' ctx.WorldBounds.MinY);  	newMaxY = Math.Min (newMaxY' ctx.WorldBounds.MaxY);  }  
Magic Number,Lucene.Net.Spatial.Prefix,WithinPrefixTreeFilter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\WithinPrefixTreeFilter.cs,BufferShape,The following statement contains a magic number: if (newMinY < -90) {  	newMinY = -90;  }  
Magic Number,Lucene.Net.Spatial.Prefix,WithinPrefixTreeFilter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\WithinPrefixTreeFilter.cs,BufferShape,The following statement contains a magic number: if (newMinY < -90) {  	newMinY = -90;  }  
Magic Number,Lucene.Net.Spatial.Prefix,WithinPrefixTreeFilter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\WithinPrefixTreeFilter.cs,BufferShape,The following statement contains a magic number: newMinY = -90;  
Magic Number,Lucene.Net.Spatial.Prefix,WithinPrefixTreeFilter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\WithinPrefixTreeFilter.cs,BufferShape,The following statement contains a magic number: if (newMaxY > 90) {  	newMaxY = 90;  }  
Magic Number,Lucene.Net.Spatial.Prefix,WithinPrefixTreeFilter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\WithinPrefixTreeFilter.cs,BufferShape,The following statement contains a magic number: if (newMaxY > 90) {  	newMaxY = 90;  }  
Magic Number,Lucene.Net.Spatial.Prefix,WithinPrefixTreeFilter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\WithinPrefixTreeFilter.cs,BufferShape,The following statement contains a magic number: newMaxY = 90;  
Magic Number,Lucene.Net.Spatial.Prefix,WithinPrefixTreeFilter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\WithinPrefixTreeFilter.cs,BufferShape,The following statement contains a magic number: if (newMinY == -90 || newMaxY == 90 || bbox.Width + 2 * distErr > 360) {  	newMinX = -180;  	newMaxX = 180;  } else {  	newMinX = DistanceUtils.NormLonDEG (newMinX);  	newMaxX = DistanceUtils.NormLonDEG (newMaxX);  }  
Magic Number,Lucene.Net.Spatial.Prefix,WithinPrefixTreeFilter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\WithinPrefixTreeFilter.cs,BufferShape,The following statement contains a magic number: if (newMinY == -90 || newMaxY == 90 || bbox.Width + 2 * distErr > 360) {  	newMinX = -180;  	newMaxX = 180;  } else {  	newMinX = DistanceUtils.NormLonDEG (newMinX);  	newMaxX = DistanceUtils.NormLonDEG (newMaxX);  }  
Magic Number,Lucene.Net.Spatial.Prefix,WithinPrefixTreeFilter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\WithinPrefixTreeFilter.cs,BufferShape,The following statement contains a magic number: if (newMinY == -90 || newMaxY == 90 || bbox.Width + 2 * distErr > 360) {  	newMinX = -180;  	newMaxX = 180;  } else {  	newMinX = DistanceUtils.NormLonDEG (newMinX);  	newMaxX = DistanceUtils.NormLonDEG (newMaxX);  }  
Magic Number,Lucene.Net.Spatial.Prefix,WithinPrefixTreeFilter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\WithinPrefixTreeFilter.cs,BufferShape,The following statement contains a magic number: if (newMinY == -90 || newMaxY == 90 || bbox.Width + 2 * distErr > 360) {  	newMinX = -180;  	newMaxX = 180;  } else {  	newMinX = DistanceUtils.NormLonDEG (newMinX);  	newMaxX = DistanceUtils.NormLonDEG (newMaxX);  }  
Magic Number,Lucene.Net.Spatial.Prefix,WithinPrefixTreeFilter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\WithinPrefixTreeFilter.cs,BufferShape,The following statement contains a magic number: if (newMinY == -90 || newMaxY == 90 || bbox.Width + 2 * distErr > 360) {  	newMinX = -180;  	newMaxX = 180;  } else {  	newMinX = DistanceUtils.NormLonDEG (newMinX);  	newMaxX = DistanceUtils.NormLonDEG (newMaxX);  }  
Magic Number,Lucene.Net.Spatial.Prefix,WithinPrefixTreeFilter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\WithinPrefixTreeFilter.cs,BufferShape,The following statement contains a magic number: if (newMinY == -90 || newMaxY == 90 || bbox.Width + 2 * distErr > 360) {  	newMinX = -180;  	newMaxX = 180;  } else {  	newMinX = DistanceUtils.NormLonDEG (newMinX);  	newMaxX = DistanceUtils.NormLonDEG (newMaxX);  }  
Magic Number,Lucene.Net.Spatial.Prefix,WithinPrefixTreeFilter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\WithinPrefixTreeFilter.cs,BufferShape,The following statement contains a magic number: newMinX = -180;  
Magic Number,Lucene.Net.Spatial.Prefix,WithinPrefixTreeFilter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\WithinPrefixTreeFilter.cs,BufferShape,The following statement contains a magic number: newMaxX = 180;  
Magic Number,Lucene.Net.Spatial.Prefix.Tree,GeohashPrefixTree,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\Tree\GeohashPrefixTree.cs,GeohashPrefixTree,The following statement contains a magic number: if (bounds.MinX != -180) {  	throw new ArgumentException ("Geohash only supports lat-lon world bounds. Got " + bounds);  }  
Magic Number,Lucene.Net.Spatial.Prefix.Tree,QuadPrefixTree,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\Tree\QuadPrefixTree.cs,QuadPrefixTree,The following statement contains a magic number: this.xmid = xmin + gridW / 2.0;  
Magic Number,Lucene.Net.Spatial.Prefix.Tree,QuadPrefixTree,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\Tree\QuadPrefixTree.cs,QuadPrefixTree,The following statement contains a magic number: this.ymid = ymin + gridH / 2.0;  
Magic Number,Lucene.Net.Spatial.Prefix.Tree,QuadPrefixTree,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\Tree\QuadPrefixTree.cs,QuadPrefixTree,The following statement contains a magic number: levelW [0] = gridW / 2.0;  
Magic Number,Lucene.Net.Spatial.Prefix.Tree,QuadPrefixTree,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\Tree\QuadPrefixTree.cs,QuadPrefixTree,The following statement contains a magic number: levelH [0] = gridH / 2.0;  
Magic Number,Lucene.Net.Spatial.Prefix.Tree,QuadPrefixTree,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\Tree\QuadPrefixTree.cs,QuadPrefixTree,The following statement contains a magic number: levelS [0] = 2;  
Magic Number,Lucene.Net.Spatial.Prefix.Tree,QuadPrefixTree,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\Tree\QuadPrefixTree.cs,QuadPrefixTree,The following statement contains a magic number: levelN [0] = 4;  
Magic Number,Lucene.Net.Spatial.Prefix.Tree,QuadPrefixTree,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\Tree\QuadPrefixTree.cs,QuadPrefixTree,The following statement contains a magic number: for (int i = 1; i < levelW.Length; i++) {  	levelW [i] = levelW [i - 1] / 2.0;  	levelH [i] = levelH [i - 1] / 2.0;  	levelS [i] = levelS [i - 1] * 2;  	levelN [i] = levelN [i - 1] * 4;  }  
Magic Number,Lucene.Net.Spatial.Prefix.Tree,QuadPrefixTree,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\Tree\QuadPrefixTree.cs,QuadPrefixTree,The following statement contains a magic number: for (int i = 1; i < levelW.Length; i++) {  	levelW [i] = levelW [i - 1] / 2.0;  	levelH [i] = levelH [i - 1] / 2.0;  	levelS [i] = levelS [i - 1] * 2;  	levelN [i] = levelN [i - 1] * 4;  }  
Magic Number,Lucene.Net.Spatial.Prefix.Tree,QuadPrefixTree,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\Tree\QuadPrefixTree.cs,QuadPrefixTree,The following statement contains a magic number: for (int i = 1; i < levelW.Length; i++) {  	levelW [i] = levelW [i - 1] / 2.0;  	levelH [i] = levelH [i - 1] / 2.0;  	levelS [i] = levelS [i - 1] * 2;  	levelN [i] = levelN [i - 1] * 4;  }  
Magic Number,Lucene.Net.Spatial.Prefix.Tree,QuadPrefixTree,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\Tree\QuadPrefixTree.cs,QuadPrefixTree,The following statement contains a magic number: for (int i = 1; i < levelW.Length; i++) {  	levelW [i] = levelW [i - 1] / 2.0;  	levelH [i] = levelH [i - 1] / 2.0;  	levelS [i] = levelS [i - 1] * 2;  	levelN [i] = levelN [i - 1] * 4;  }  
Magic Number,Lucene.Net.Spatial.Prefix.Tree,QuadPrefixTree,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\Tree\QuadPrefixTree.cs,QuadPrefixTree,The following statement contains a magic number: levelW [i] = levelW [i - 1] / 2.0;  
Magic Number,Lucene.Net.Spatial.Prefix.Tree,QuadPrefixTree,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\Tree\QuadPrefixTree.cs,QuadPrefixTree,The following statement contains a magic number: levelH [i] = levelH [i - 1] / 2.0;  
Magic Number,Lucene.Net.Spatial.Prefix.Tree,QuadPrefixTree,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\Tree\QuadPrefixTree.cs,QuadPrefixTree,The following statement contains a magic number: levelS [i] = levelS [i - 1] * 2;  
Magic Number,Lucene.Net.Spatial.Prefix.Tree,QuadPrefixTree,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Prefix\Tree\QuadPrefixTree.cs,QuadPrefixTree,The following statement contains a magic number: levelN [i] = levelN [i - 1] * 4;  
Magic Number,Lucene.Net.Spatial.Queries,SpatialArgs,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Query\SpatialArgs.cs,CalcDistanceFromErrPct,The following statement contains a magic number: if (distErrPct < 0 || distErrPct > 0.5) {  	throw new ArgumentException ("distErrPct " + distErrPct + " must be between [0 to 0.5]"' "distErrPct");  }  
Magic Number,Lucene.Net.Spatial.Util,DistanceToShapeValueSource,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Util\DistanceToShapeValueSource.cs,DistanceToShapeValueSource,The following statement contains a magic number: this.nullValue = (ctx.IsGeo ? 180 * multiplier : double.MaxValue);  
Magic Number,Lucene.Net.Spatial.Util,DistanceToShapeValueSource,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Util\DistanceToShapeValueSource.cs,GetHashCode,The following statement contains a magic number: result = 31 * result + queryPoint.GetHashCode ();  
Magic Number,Lucene.Net.Spatial.Util,DistanceToShapeValueSource,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Util\DistanceToShapeValueSource.cs,GetHashCode,The following statement contains a magic number: result = 31 * result + (int)(temp ^ ((long)((ulong)temp) >> 32));  
Magic Number,Lucene.Net.Spatial.Util,DistanceToShapeValueSource,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Util\DistanceToShapeValueSource.cs,GetHashCode,The following statement contains a magic number: result = 31 * result + (int)(temp ^ ((long)((ulong)temp) >> 32));  
Magic Number,Lucene.Net.Spatial.Util,ShapePredicateValueSource,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Util\ShapePredicateValueSource.cs,GetHashCode,The following statement contains a magic number: result = 31 * result + op.GetHashCode ();  
Magic Number,Lucene.Net.Spatial.Util,ShapePredicateValueSource,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Spatial\Util\ShapePredicateValueSource.cs,GetHashCode,The following statement contains a magic number: result = 31 * result + queryShape.GetHashCode ();  
