Implementation smell,Namespace,Class,File,Method,Description
Long Method,Egothor.Stemmer,Compile,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\Compile.cs,Main,The method has 126 lines of code.
Long Method,Egothor.Stemmer,Diff,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\Diff.cs,Exec,The method has 148 lines of code.
Complex Method,Egothor.Stemmer,Compile,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\Compile.cs,Main,Cyclomatic complexity of the method is 18
Complex Method,Egothor.Stemmer,Diff,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\Diff.cs,Exec,Cyclomatic complexity of the method is 23
Complex Method,Egothor.Stemmer,Lift,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\Lift.cs,LiftUp,Cyclomatic complexity of the method is 9
Complex Method,Egothor.Stemmer,MultiTrie2,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\MultiTrie2.cs,GetFully,Cyclomatic complexity of the method is 9
Complex Method,Egothor.Stemmer,MultiTrie2,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\MultiTrie2.cs,GetLastOnPath,Cyclomatic complexity of the method is 9
Complex Method,Egothor.Stemmer,MultiTrie2,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\MultiTrie2.cs,Add,Cyclomatic complexity of the method is 10
Complex Method,Egothor.Stemmer,Optimizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\Optimizer.cs,Merge,Cyclomatic complexity of the method is 9
Complex Method,Egothor.Stemmer,Row,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\Row.cs,UniformCmd,Cyclomatic complexity of the method is 8
Complex Method,Egothor.Stemmer,Trie,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\Trie.cs,GetAll,Cyclomatic complexity of the method is 14
Long Statement,Egothor.Stemmer,DiffIt,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\DiffIt.cs,Main,The length of the statement  "                using (TextReader input = new StreamReader(new FileStream(stemmerTable' FileMode.Open' FileAccess.Read)' Encoding.GetEncoding(charset))) " is 136.
Long Statement,Lucene.Net.Analysis.Pl,DefaultsHolder,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Pl\PolishAnalyzer.cs,LoadDefaultTable,The length of the statement  "                    return StempelStemmer.Load(typeof(PolishAnalyzer).GetTypeInfo().Assembly.FindAndGetManifestResourceStream(typeof(PolishAnalyzer)' DEFAULT_STEMMER_FILE)); " is 153.
Empty Catch Block,Egothor.Stemmer,Compile,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\Compile.cs,Main,The method has an empty catch block.
Empty Catch Block,Egothor.Stemmer,Diff,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\Diff.cs,Apply,The method has an empty catch block.
Empty Catch Block,Egothor.Stemmer,Diff,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\Diff.cs,Apply,The method has an empty catch block.
Empty Catch Block,Egothor.Stemmer,DiffIt,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\DiffIt.cs,Main,The method has an empty catch block.
Empty Catch Block,Egothor.Stemmer,MultiTrie2,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\MultiTrie2.cs,GetFully,The method has an empty catch block.
Empty Catch Block,Egothor.Stemmer,MultiTrie2,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\MultiTrie2.cs,GetLastOnPath,The method has an empty catch block.
Magic Number,Egothor.Stemmer,Diff,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\Diff.cs,Apply,The following statement contains a magic number: char cmd = diff[2 * i];
Magic Number,Egothor.Stemmer,Diff,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\Diff.cs,Apply,The following statement contains a magic number: char param = diff[2 * i + 1];
Magic Number,Egothor.Stemmer,Diff,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\Diff.cs,Apply,The following statement contains a magic number: i < diff.Length / 2
Magic Number,Egothor.Stemmer,Diff,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\Diff.cs,Exec,The following statement contains a magic number: int[] go = new int[4];
Magic Number,Egothor.Stemmer,Diff,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\Diff.cs,Exec,The following statement contains a magic number: const int Y = 2;
Magic Number,Egothor.Stemmer,Diff,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\Diff.cs,Exec,The following statement contains a magic number: const int R = 3;
Magic Number,Egothor.Stemmer,Diff,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\Diff.cs,Exec,The following statement contains a magic number: sizex = maxx + 8;
Magic Number,Egothor.Stemmer,Diff,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\Diff.cs,Exec,The following statement contains a magic number: sizey = maxy + 8;
Magic Number,Egothor.Stemmer,Diff,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\Diff.cs,Exec,The following statement contains a magic number: go[D] = net[x - 1][y - 1]                          + ((a[x - 1] == b[y - 1]) ? NOOP : 100);
Magic Number,Egothor.Stemmer,DiffIt,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\DiffIt.cs,Main,The following statement contains a magic number: int rep = Get(2' args[0]);
Magic Number,Egothor.Stemmer,DiffIt,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\DiffIt.cs,Main,The following statement contains a magic number: int nop = Get(3' args[0]);
Magic Number,Egothor.Stemmer,Gener,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\Gener.cs,Eat,The following statement contains a magic number: int frame = sum / 10;
Magic Number,Egothor.Stemmer,MultiTrie,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\MultiTrie.cs,GetFully,The following statement contains a magic number: StringBuilder result = new StringBuilder(m_tries.Count * 2);
Magic Number,Egothor.Stemmer,MultiTrie,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\MultiTrie.cs,GetLastOnPath,The following statement contains a magic number: StringBuilder result = new StringBuilder(m_tries.Count * 2);
Magic Number,Egothor.Stemmer,MultiTrie2,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\MultiTrie2.cs,GetFully,The following statement contains a magic number: StringBuilder result = new StringBuilder(m_tries.Count * 2);
Magic Number,Egothor.Stemmer,MultiTrie2,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\MultiTrie2.cs,GetLastOnPath,The following statement contains a magic number: StringBuilder result = new StringBuilder(m_tries.Count * 2);
Magic Number,Egothor.Stemmer,MultiTrie2,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\MultiTrie2.cs,Decompose,The following statement contains a magic number: i = next + 2;
Magic Number,Egothor.Stemmer,MultiTrie2,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\MultiTrie2.cs,Decompose,The following statement contains a magic number: part[x++] = cmd.Substring(i' 2);
Magic Number,Egothor.Stemmer,MultiTrie2,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\MultiTrie2.cs,Decompose,The following statement contains a magic number: i = next + 2;
Missing Default,Egothor.Stemmer,Diff,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\Diff.cs,Apply,The following switch statement is missing a default case: switch (cmd)                      {                          case '-':                              pos = pos - par_num + 1;                              break;                          case 'R':                              dest[pos] = param;                              break;                          case 'D':                              int o = pos;                              pos -= par_num - 1;                              /*                               * delete par_num chars from index pos                               */                              // String s = orig.toString();                              // s = s.substring( 0' pos ) + s.substring( o + 1 );                              // orig = new StringBuffer( s );                              dest.Remove(pos' (o + 1) - pos);                              break;                          case 'I':                              dest.Insert(pos += 1' param);                              break;                      }
Missing Default,Egothor.Stemmer,Diff,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\Diff.cs,Exec,The following switch statement is missing a default case: switch (way[x][y])                  {                      case X:                          if (equals != @base)                          {                              result.Append("-" + (equals));                              equals = @base;                          }                          deletes++;                          x--;                          break;                      // delete                      case Y:                          if (deletes != @base)                          {                              result.Append("D" + (deletes));                              deletes = @base;                          }                          if (equals != @base)                          {                              result.Append("-" + (equals));                              equals = @base;                          }                          result.Append('I');                          result.Append(b[--y]);                          break;                      // insert                      case R:                          if (deletes != @base)                          {                              result.Append("D" + (deletes));                              deletes = @base;                          }                          if (equals != @base)                          {                              result.Append("-" + (equals));                              equals = @base;                          }                          result.Append('R');                          result.Append(b[--y]);                          x--;                          break;                      // replace                      case D:                          if (deletes != @base)                          {                              result.Append("D" + (deletes));                              deletes = @base;                          }                          equals++;                          x--;                          y--;                          break;                          // no change                  }
Missing Default,Egothor.Stemmer,MultiTrie2,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\MultiTrie2.cs,CannotFollow,The following switch statement is missing a default case: switch (after)              {                  case '-':                  case 'D':                      return after == goes;              }
Missing Default,Egothor.Stemmer,MultiTrie2,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\MultiTrie2.cs,LengthPP,The following switch statement is missing a default case: switch (cmd[i++])                  {                      case '-':                      case 'D':                          len += cmd[i] - 'a' + 1;                          break;                      case 'R':                          len++; /* intentional fallthrough */                          goto case 'I';                      case 'I':                          break;                  }
