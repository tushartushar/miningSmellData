Implementation smell,Namespace,Class,File,Method,Description
Long Method,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestPhraseHighlightTest,The method has 121 lines of code.
Long Method,Lucene.Net.Search.VectorHighlight,SimpleFragmentsBuilderTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\SimpleFragmentsBuilderTest.cs,TestRandomDiscreteMultiValueHighlighting,The method has 107 lines of code.
Complex Method,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestConstantScoreMultiTermQuery,Cyclomatic complexity of the method is 8
Complex Method,Lucene.Net.Search.VectorHighlight,SimpleFragmentsBuilderTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\SimpleFragmentsBuilderTest.cs,TestRandomDiscreteMultiValueHighlighting,Cyclomatic complexity of the method is 12
Long Parameter List,Lucene.Net.Search.Highlight,TestHighlightRunner,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,DoStandardHighlights,The method has 5 parameters. Parameters: analyzer' searcher' hits' query' formatter
Long Parameter List,Lucene.Net.Search.Highlight,TestHighlightRunner,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,DoStandardHighlights,The method has 6 parameters. Parameters: analyzer' searcher' hits' query' formatter' expandMT
Long Parameter List,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,matchedFieldsTestCase,The method has 5 parameters. Parameters: useMatchedFields' fieldMatch' fieldValue' expected' queryClauses
Long Statement,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestHighlightingCommonTermsQuery,The length of the statement  "            assertEquals("Hello <B>this</B> is a piece of text that is <B>very</B> <B>long</B> and contains too much preamble and the meat is really here which says kennedy has been shot"' fragment); " is 187.
Long Statement,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestHighlightingCommonTermsQuery,The length of the statement  "            assertEquals("<B>This</B> piece of text refers to Kennedy at the beginning then has a longer piece of text that is <B>very</B>"' fragment); " is 139.
Long Statement,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestHighlightUnknowQueryAfterRewrite,The length of the statement  "            assertEquals("Hello <B>this</B> is a piece of text that is <B>very</B> <B>long</B> and contains too much preamble and the meat is really here which says kennedy has been shot"' fragment); " is 187.
Long Statement,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestHighlightUnknowQueryAfterRewrite,The length of the statement  "            assertEquals("<B>This</B> piece of text refers to Kennedy at the beginning then has a longer piece of text that is <B>very</B>"' fragment); " is 139.
Long Statement,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestNumericRangeQuery,The length of the statement  "                String text = searcher.Doc(hits.ScoreDocs[i].Doc).GetField(NUMERIC_FIELD_NAME).GetStringValue(CultureInfo.InvariantCulture); " is 124.
Long Statement,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,makeIndex,The length of the statement  "            IndexWriter writer = new IndexWriter(dir' new IndexWriterConfig(TEST_VERSION_CURRENT' new MockAnalyzer(Random' MockTokenizer.WHITESPACE' false))); " is 146.
Long Statement,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,deleteDocument,The length of the statement  "            IndexWriter writer = new IndexWriter(dir' new IndexWriterConfig(TEST_VERSION_CURRENT' new MockAnalyzer(Random' MockTokenizer.WHITESPACE' false)).SetOpenMode(OpenMode.APPEND)); " is 175.
Long Statement,Lucene.Net.Search.VectorHighlight,AbstractTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\AbstractTestCase.cs,makeIndexLongMV,The length of the statement  "            // 999999900000000001111111111222222222233333333334444444444555555555566666666667777777777888888888899999999990000000000111111111122 " is 132.
Long Statement,Lucene.Net.Search.VectorHighlight,AbstractTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\AbstractTestCase.cs,makeIndexLongMV,The length of the statement  "            // 345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901 " is 132.
Long Statement,Lucene.Net.Search.VectorHighlight,AbstractTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\AbstractTestCase.cs,makeIndexLongMV,The length of the statement  "            // The most search engines use only one of these methods. Even the search engines that says they can use the both methods basically " is 131.
Long Statement,Lucene.Net.Search.VectorHighlight,AbstractTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\AbstractTestCase.cs,makeIndexLongMV,The length of the statement  "            // 12  13  (14)   (15)     16  17   18  19 20    21       22   23 (24)   (25)     26   27   28   29  30  31  32   33      34 " is 124.
Long Statement,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestPhraseHighlightLongTextTest,The length of the statement  "                "Netscape was the general name for a series of web browsers originally produced by Netscape Communications Corporation' now a subsidiary of AOL The original browser was once the dominant browser in terms of usage share' but as a result of the first browser war it lost virtually all of its share to Internet Explorer Netscape was discontinued and support for all Netscape browsers and client products was terminated on March 1' 2008 Netscape Navigator was the name of Netscape\u0027s web browser from versions 1.0 through 4.8 The first beta release versions of the browser were released in 1994 and known as Mosaic and then Mosaic Netscape until a legal challenge from the National Center for Supercomputing Applications (makers of NCSA Mosaic' which many of Netscape\u0027s founders used to develop)' led to the name change to Netscape Navigator The company\u0027s name also changed from Mosaic Communications Corporation to Netscape Communications Corporation The browser was easily the most advanced..."' type); " is 1014.
Long Statement,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestPhraseHighlightLongTextTest,The length of the statement  "                assertEquals("first browser war it lost virtually all of its share to <b>Internet</b> <b>Explorer</b> Netscape was discontinued and support for all Netscape browsers"' bestFragments[0]); " is 186.
Long Statement,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestPhraseHighlightLongTextTest,The length of the statement  "                assertEquals("first browser war it lost virtually all of its share to <b>Internet Explorer</b> Netscape was discontinued and support for all Netscape browsers"' bestFragments[0]); " is 179.
Long Statement,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestPhraseHighlightTest,The length of the statement  "            Field longTermField = new Field("long_term"' "This is a test thisisaverylongwordandmakessurethisfails where foo is highlighed and should be highlighted"' type); " is 160.
Long Statement,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestPhraseHighlightTest,The length of the statement  "            Field noLongTermField = new Field("no_long_term"' "This is a test where foo is highlighed and should be highlighted"' type); " is 124.
Long Statement,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestBoostedPhraseHighlightTest,The length of the statement  "            assertEquals("junk junk junk junk junk junk junk junk <b>highlight words together</b> junk junk junk junk junk junk junk junk"' fragment); " is 138.
Long Statement,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestCommonTermsQueryHighlight,The length of the statement  "            IndexWriter writer = new IndexWriter(dir' NewIndexWriterConfig(TEST_VERSION_CURRENT' new MockAnalyzer(Random' MockTokenizer.SIMPLE' true' MockTokenFilter.ENGLISH_STOPSET))); " is 173.
Long Statement,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestCommonTermsQueryHighlight,The length of the statement  "                "Hello this is a piece of text that is very long and contains too much preamble and the meat is really here which says kennedy has been shot"' " is 142.
Long Statement,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestCommonTermsQueryHighlight,The length of the statement  "                "This piece of text refers to Kennedy at the beginning then has a longer piece of text that is very long in the middle and finally ends with another reference to Kennedy"' " is 171.
Long Statement,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestCommonTermsQueryHighlight,The length of the statement  "                "wordx wordy wordz wordx wordy wordx worda wordb wordy wordc"' "y z x y z a b"' "lets is a the lets is a the lets is a the lets" }; " is 131.
Long Statement,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestCommonTermsQueryHighlight,The length of the statement  "            assertEquals("This piece of <b>text</b> refers to Kennedy at the beginning then has a longer piece of <b>text</b> that is <b>very</b> <b>long</b> in the middle and finally ends with another reference to Kennedy"' bestFragments[0]); " is 231.
Long Statement,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestCommonTermsQueryHighlight,The length of the statement  "            assertEquals("Hello this is a piece of <b>text</b> that is <b>very</b> <b>long</b> and contains too much preamble and the meat is really here which says kennedy has been shot"' bestFragments[0]); " is 195.
Long Statement,Lucene.Net.Search.VectorHighlight,SimpleFragListBuilderTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\SimpleFragListBuilderTest.cs,TestSmallerFragSizeThanTermQuery,The length of the statement  "            FieldFragList ffl = sflb.CreateFieldFragList(fpl(new TermQuery(new Term(F' "abcdefghijklmnopqrs"))' "abcdefghijklmnopqrs")' sflb.minFragCharSize); " is 146.
Long Statement,Lucene.Net.Search.VectorHighlight,SimpleFragListBuilderTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\SimpleFragListBuilderTest.cs,Test2TermsIndex2Frags,The length of the statement  "            FieldFragList ffl = sflb.CreateFieldFragList(fpl(new TermQuery(new Term(F' "a"))' "a b b b b b b b b b b b b b a")' 20); " is 120.
Long Statement,Lucene.Net.Search.VectorHighlight,SimpleFragmentsBuilderTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\SimpleFragmentsBuilderTest.cs,Test1PhraseLongMV,The length of the statement  "            assertEquals("customization: The most <b>search engines</b> use only one of these methods. Even the <b>search engines</b> that says they can"' " is 142.
Long Statement,Lucene.Net.Search.VectorHighlight,SimpleFragmentsBuilderTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\SimpleFragmentsBuilderTest.cs,Test1PhraseLongMVB,The length of the statement  "            assertEquals("additional hardware. \nWhen you talk about processing <b>speed</b>' the"' sfb.CreateFragment(reader' 0' F' ffl)); " is 127.
Long Statement,Lucene.Net.Search.VectorHighlight,SimpleFragmentsBuilderTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\SimpleFragmentsBuilderTest.cs,TestRandomDiscreteMultiValueHighlighting,The length of the statement  "                String[][] fields = RectangularArrays.ReturnRectangularArray<string>(numFields' numTerms); //new String[numFields][numTerms]; " is 125.
Long Statement,Lucene.Net.Search.VectorHighlight,SingleFragListBuilderTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\SingleFragListBuilderTest.cs,TestLongFieldFragList,The length of the statement  "            FieldFragList ffl = sflb.CreateFieldFragList(fpl(new TermQuery(new Term(F' "a"))' "a b c d"' "a b c d e f g h i"' "j k l m n o p q r s t u v w x y z a b c"' "d e f g")' 100); " is 174.
Empty Catch Block,Lucene.Net.Search.Highlight,TokenSourcesTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\TokenSourcesTest.cs,TestTermVectorWithoutOffsetsThrowsException,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Search.VectorHighlight,SimpleFragListBuilderTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\SimpleFragListBuilderTest.cs,TestTooSmallFragSize,The method has an empty catch block.
Magic Number,Lucene.Net.Search.Highlight.Custom,CustomQuery,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\Custom\HighlightCustomQueryTest.cs,GetHashCode,The following statement contains a magic number: int prime = 31;
Magic Number,Lucene.Net.Search.Highlight,TokenStreamSparse,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterPhraseTest.cs,Reset,The following statement contains a magic number: this.tokens = new Token[] {                      new Token(new char[] { 't'' 'h'' 'e' }' 0' 3' 0' 3)'                      new Token(new char[] { 'f'' 'o'' 'x' }' 0' 3' 4' 7)'                      new Token(new char[] { 'd'' 'i'' 'd' }' 0' 3' 8' 11)'                      new Token(new char[] { 'j'' 'u'' 'm'' 'p' }' 0' 4' 16' 20) };
Magic Number,Lucene.Net.Search.Highlight,TokenStreamSparse,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterPhraseTest.cs,Reset,The following statement contains a magic number: this.tokens = new Token[] {                      new Token(new char[] { 't'' 'h'' 'e' }' 0' 3' 0' 3)'                      new Token(new char[] { 'f'' 'o'' 'x' }' 0' 3' 4' 7)'                      new Token(new char[] { 'd'' 'i'' 'd' }' 0' 3' 8' 11)'                      new Token(new char[] { 'j'' 'u'' 'm'' 'p' }' 0' 4' 16' 20) };
Magic Number,Lucene.Net.Search.Highlight,TokenStreamSparse,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterPhraseTest.cs,Reset,The following statement contains a magic number: this.tokens = new Token[] {                      new Token(new char[] { 't'' 'h'' 'e' }' 0' 3' 0' 3)'                      new Token(new char[] { 'f'' 'o'' 'x' }' 0' 3' 4' 7)'                      new Token(new char[] { 'd'' 'i'' 'd' }' 0' 3' 8' 11)'                      new Token(new char[] { 'j'' 'u'' 'm'' 'p' }' 0' 4' 16' 20) };
Magic Number,Lucene.Net.Search.Highlight,TokenStreamSparse,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterPhraseTest.cs,Reset,The following statement contains a magic number: this.tokens = new Token[] {                      new Token(new char[] { 't'' 'h'' 'e' }' 0' 3' 0' 3)'                      new Token(new char[] { 'f'' 'o'' 'x' }' 0' 3' 4' 7)'                      new Token(new char[] { 'd'' 'i'' 'd' }' 0' 3' 8' 11)'                      new Token(new char[] { 'j'' 'u'' 'm'' 'p' }' 0' 4' 16' 20) };
Magic Number,Lucene.Net.Search.Highlight,TokenStreamSparse,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterPhraseTest.cs,Reset,The following statement contains a magic number: this.tokens = new Token[] {                      new Token(new char[] { 't'' 'h'' 'e' }' 0' 3' 0' 3)'                      new Token(new char[] { 'f'' 'o'' 'x' }' 0' 3' 4' 7)'                      new Token(new char[] { 'd'' 'i'' 'd' }' 0' 3' 8' 11)'                      new Token(new char[] { 'j'' 'u'' 'm'' 'p' }' 0' 4' 16' 20) };
Magic Number,Lucene.Net.Search.Highlight,TokenStreamSparse,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterPhraseTest.cs,Reset,The following statement contains a magic number: this.tokens = new Token[] {                      new Token(new char[] { 't'' 'h'' 'e' }' 0' 3' 0' 3)'                      new Token(new char[] { 'f'' 'o'' 'x' }' 0' 3' 4' 7)'                      new Token(new char[] { 'd'' 'i'' 'd' }' 0' 3' 8' 11)'                      new Token(new char[] { 'j'' 'u'' 'm'' 'p' }' 0' 4' 16' 20) };
Magic Number,Lucene.Net.Search.Highlight,TokenStreamSparse,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterPhraseTest.cs,Reset,The following statement contains a magic number: this.tokens = new Token[] {                      new Token(new char[] { 't'' 'h'' 'e' }' 0' 3' 0' 3)'                      new Token(new char[] { 'f'' 'o'' 'x' }' 0' 3' 4' 7)'                      new Token(new char[] { 'd'' 'i'' 'd' }' 0' 3' 8' 11)'                      new Token(new char[] { 'j'' 'u'' 'm'' 'p' }' 0' 4' 16' 20) };
Magic Number,Lucene.Net.Search.Highlight,TokenStreamSparse,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterPhraseTest.cs,Reset,The following statement contains a magic number: this.tokens = new Token[] {                      new Token(new char[] { 't'' 'h'' 'e' }' 0' 3' 0' 3)'                      new Token(new char[] { 'f'' 'o'' 'x' }' 0' 3' 4' 7)'                      new Token(new char[] { 'd'' 'i'' 'd' }' 0' 3' 8' 11)'                      new Token(new char[] { 'j'' 'u'' 'm'' 'p' }' 0' 4' 16' 20) };
Magic Number,Lucene.Net.Search.Highlight,TokenStreamSparse,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterPhraseTest.cs,Reset,The following statement contains a magic number: this.tokens = new Token[] {                      new Token(new char[] { 't'' 'h'' 'e' }' 0' 3' 0' 3)'                      new Token(new char[] { 'f'' 'o'' 'x' }' 0' 3' 4' 7)'                      new Token(new char[] { 'd'' 'i'' 'd' }' 0' 3' 8' 11)'                      new Token(new char[] { 'j'' 'u'' 'm'' 'p' }' 0' 4' 16' 20) };
Magic Number,Lucene.Net.Search.Highlight,TokenStreamSparse,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterPhraseTest.cs,Reset,The following statement contains a magic number: this.tokens = new Token[] {                      new Token(new char[] { 't'' 'h'' 'e' }' 0' 3' 0' 3)'                      new Token(new char[] { 'f'' 'o'' 'x' }' 0' 3' 4' 7)'                      new Token(new char[] { 'd'' 'i'' 'd' }' 0' 3' 8' 11)'                      new Token(new char[] { 'j'' 'u'' 'm'' 'p' }' 0' 4' 16' 20) };
Magic Number,Lucene.Net.Search.Highlight,TokenStreamSparse,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterPhraseTest.cs,Reset,The following statement contains a magic number: this.tokens = new Token[] {                      new Token(new char[] { 't'' 'h'' 'e' }' 0' 3' 0' 3)'                      new Token(new char[] { 'f'' 'o'' 'x' }' 0' 3' 4' 7)'                      new Token(new char[] { 'd'' 'i'' 'd' }' 0' 3' 8' 11)'                      new Token(new char[] { 'j'' 'u'' 'm'' 'p' }' 0' 4' 16' 20) };
Magic Number,Lucene.Net.Search.Highlight,TokenStreamSparse,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterPhraseTest.cs,Reset,The following statement contains a magic number: this.tokens[3].PositionIncrement = (2);
Magic Number,Lucene.Net.Search.Highlight,TokenStreamSparse,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterPhraseTest.cs,Reset,The following statement contains a magic number: this.tokens[3].PositionIncrement = (2);
Magic Number,Lucene.Net.Search.Highlight,TokenStreamConcurrent,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterPhraseTest.cs,Reset,The following statement contains a magic number: this.tokens = new Token[] {                      new Token(new char[] { 't'' 'h'' 'e' }' 0' 3' 0' 3)'                      new Token(new char[] { 'f'' 'o'' 'x' }' 0' 3' 4' 7)'                      new Token(new char[] { 'j'' 'u'' 'm'' 'p' }' 0' 4' 8' 14)'                      new Token(new char[] { 'j'' 'u'' 'm'' 'p'' 'e'' 'd' }' 0' 6' 8' 14) };
Magic Number,Lucene.Net.Search.Highlight,TokenStreamConcurrent,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterPhraseTest.cs,Reset,The following statement contains a magic number: this.tokens = new Token[] {                      new Token(new char[] { 't'' 'h'' 'e' }' 0' 3' 0' 3)'                      new Token(new char[] { 'f'' 'o'' 'x' }' 0' 3' 4' 7)'                      new Token(new char[] { 'j'' 'u'' 'm'' 'p' }' 0' 4' 8' 14)'                      new Token(new char[] { 'j'' 'u'' 'm'' 'p'' 'e'' 'd' }' 0' 6' 8' 14) };
Magic Number,Lucene.Net.Search.Highlight,TokenStreamConcurrent,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterPhraseTest.cs,Reset,The following statement contains a magic number: this.tokens = new Token[] {                      new Token(new char[] { 't'' 'h'' 'e' }' 0' 3' 0' 3)'                      new Token(new char[] { 'f'' 'o'' 'x' }' 0' 3' 4' 7)'                      new Token(new char[] { 'j'' 'u'' 'm'' 'p' }' 0' 4' 8' 14)'                      new Token(new char[] { 'j'' 'u'' 'm'' 'p'' 'e'' 'd' }' 0' 6' 8' 14) };
Magic Number,Lucene.Net.Search.Highlight,TokenStreamConcurrent,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterPhraseTest.cs,Reset,The following statement contains a magic number: this.tokens = new Token[] {                      new Token(new char[] { 't'' 'h'' 'e' }' 0' 3' 0' 3)'                      new Token(new char[] { 'f'' 'o'' 'x' }' 0' 3' 4' 7)'                      new Token(new char[] { 'j'' 'u'' 'm'' 'p' }' 0' 4' 8' 14)'                      new Token(new char[] { 'j'' 'u'' 'm'' 'p'' 'e'' 'd' }' 0' 6' 8' 14) };
Magic Number,Lucene.Net.Search.Highlight,TokenStreamConcurrent,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterPhraseTest.cs,Reset,The following statement contains a magic number: this.tokens = new Token[] {                      new Token(new char[] { 't'' 'h'' 'e' }' 0' 3' 0' 3)'                      new Token(new char[] { 'f'' 'o'' 'x' }' 0' 3' 4' 7)'                      new Token(new char[] { 'j'' 'u'' 'm'' 'p' }' 0' 4' 8' 14)'                      new Token(new char[] { 'j'' 'u'' 'm'' 'p'' 'e'' 'd' }' 0' 6' 8' 14) };
Magic Number,Lucene.Net.Search.Highlight,TokenStreamConcurrent,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterPhraseTest.cs,Reset,The following statement contains a magic number: this.tokens = new Token[] {                      new Token(new char[] { 't'' 'h'' 'e' }' 0' 3' 0' 3)'                      new Token(new char[] { 'f'' 'o'' 'x' }' 0' 3' 4' 7)'                      new Token(new char[] { 'j'' 'u'' 'm'' 'p' }' 0' 4' 8' 14)'                      new Token(new char[] { 'j'' 'u'' 'm'' 'p'' 'e'' 'd' }' 0' 6' 8' 14) };
Magic Number,Lucene.Net.Search.Highlight,TokenStreamConcurrent,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterPhraseTest.cs,Reset,The following statement contains a magic number: this.tokens = new Token[] {                      new Token(new char[] { 't'' 'h'' 'e' }' 0' 3' 0' 3)'                      new Token(new char[] { 'f'' 'o'' 'x' }' 0' 3' 4' 7)'                      new Token(new char[] { 'j'' 'u'' 'm'' 'p' }' 0' 4' 8' 14)'                      new Token(new char[] { 'j'' 'u'' 'm'' 'p'' 'e'' 'd' }' 0' 6' 8' 14) };
Magic Number,Lucene.Net.Search.Highlight,TokenStreamConcurrent,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterPhraseTest.cs,Reset,The following statement contains a magic number: this.tokens = new Token[] {                      new Token(new char[] { 't'' 'h'' 'e' }' 0' 3' 0' 3)'                      new Token(new char[] { 'f'' 'o'' 'x' }' 0' 3' 4' 7)'                      new Token(new char[] { 'j'' 'u'' 'm'' 'p' }' 0' 4' 8' 14)'                      new Token(new char[] { 'j'' 'u'' 'm'' 'p'' 'e'' 'd' }' 0' 6' 8' 14) };
Magic Number,Lucene.Net.Search.Highlight,TokenStreamConcurrent,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterPhraseTest.cs,Reset,The following statement contains a magic number: this.tokens = new Token[] {                      new Token(new char[] { 't'' 'h'' 'e' }' 0' 3' 0' 3)'                      new Token(new char[] { 'f'' 'o'' 'x' }' 0' 3' 4' 7)'                      new Token(new char[] { 'j'' 'u'' 'm'' 'p' }' 0' 4' 8' 14)'                      new Token(new char[] { 'j'' 'u'' 'm'' 'p'' 'e'' 'd' }' 0' 6' 8' 14) };
Magic Number,Lucene.Net.Search.Highlight,TokenStreamConcurrent,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterPhraseTest.cs,Reset,The following statement contains a magic number: this.tokens = new Token[] {                      new Token(new char[] { 't'' 'h'' 'e' }' 0' 3' 0' 3)'                      new Token(new char[] { 'f'' 'o'' 'x' }' 0' 3' 4' 7)'                      new Token(new char[] { 'j'' 'u'' 'm'' 'p' }' 0' 4' 8' 14)'                      new Token(new char[] { 'j'' 'u'' 'm'' 'p'' 'e'' 'd' }' 0' 6' 8' 14) };
Magic Number,Lucene.Net.Search.Highlight,TokenStreamConcurrent,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterPhraseTest.cs,Reset,The following statement contains a magic number: this.tokens = new Token[] {                      new Token(new char[] { 't'' 'h'' 'e' }' 0' 3' 0' 3)'                      new Token(new char[] { 'f'' 'o'' 'x' }' 0' 3' 4' 7)'                      new Token(new char[] { 'j'' 'u'' 'm'' 'p' }' 0' 4' 8' 14)'                      new Token(new char[] { 'j'' 'u'' 'm'' 'p'' 'e'' 'd' }' 0' 6' 8' 14) };
Magic Number,Lucene.Net.Search.Highlight,TokenStreamConcurrent,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterPhraseTest.cs,Reset,The following statement contains a magic number: this.tokens[3].PositionIncrement = (0);
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestQueryScorerHits,The following statement contains a magic number: TopDocs hits = searcher.Search(query' 10);
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestHighlightingCommonTermsQuery,The following statement contains a magic number: CommonTermsQuery query = new CommonTermsQuery(Occur.MUST' Occur.SHOULD' 3);
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestHighlightingCommonTermsQuery,The following statement contains a magic number: TopDocs hits = searcher.Search(query' 10);
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestHighlightingCommonTermsQuery,The following statement contains a magic number: assertEquals(2' hits.TotalHits);
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestHighlightUnknowQueryAfterRewrite,The following statement contains a magic number: TopDocs hits = searcher.Search(query' 10);
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestHighlightUnknowQueryAfterRewrite,The following statement contains a magic number: assertEquals(2' hits.TotalHits);
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestHighlightingWithDefaultField,The following statement contains a magic number: q.Slop = (3);
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestHighlightingWithDefaultField,The following statement contains a magic number: q.Slop = (3);
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestSimpleSpanHighlighter,The following statement contains a magic number: int maxNumFragmentsRequired = 2;
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestSimpleSpanHighlighter,The following statement contains a magic number: highlighter.TextFragmenter = (new SimpleFragmenter(40));
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestRepeatingTermsInMultBooleans,The following statement contains a magic number: assertTrue("Failed to find correct number of highlights " + numHighlights + " found"'                  numHighlights == 7);
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestSimpleQueryScorerPhraseHighlighting,The following statement contains a magic number: phraseQuery.Add(new Term(FIELD_NAME' "contains")' 3);
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestSimpleQueryScorerPhraseHighlighting,The following statement contains a magic number: int maxNumFragmentsRequired = 2;
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestSimpleQueryScorerPhraseHighlighting,The following statement contains a magic number: highlighter.TextFragmenter = (new SimpleFragmenter(40));
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestSimpleQueryScorerPhraseHighlighting,The following statement contains a magic number: assertTrue("Failed to find correct number of highlights " + numHighlights + " found"'                  numHighlights == 3);
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestSimpleQueryScorerPhraseHighlighting,The following statement contains a magic number: phraseQuery.Add(new Term(FIELD_NAME' "text")' 3);
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestSimpleQueryScorerPhraseHighlighting,The following statement contains a magic number: phraseQuery.Add(new Term(FIELD_NAME' "refers")' 4);
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestSimpleQueryScorerPhraseHighlighting,The following statement contains a magic number: phraseQuery.Add(new Term(FIELD_NAME' "kennedy")' 6);
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestSimpleQueryScorerPhraseHighlighting,The following statement contains a magic number: maxNumFragmentsRequired = 2;
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestSimpleQueryScorerPhraseHighlighting,The following statement contains a magic number: highlighter.TextFragmenter = (new SimpleFragmenter(40));
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestSimpleQueryScorerPhraseHighlighting,The following statement contains a magic number: assertTrue("Failed to find correct number of highlights " + numHighlights + " found"'                  numHighlights == 4);
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestSimpleQueryScorerPhraseHighlighting,The following statement contains a magic number: phraseQuery.Add(new Term(FIELD_NAME' "lets")' 4);
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestSimpleQueryScorerPhraseHighlighting,The following statement contains a magic number: phraseQuery.Add(new Term(FIELD_NAME' "lets")' 8);
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestSimpleQueryScorerPhraseHighlighting,The following statement contains a magic number: phraseQuery.Add(new Term(FIELD_NAME' "lets")' 12);
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestSimpleQueryScorerPhraseHighlighting,The following statement contains a magic number: maxNumFragmentsRequired = 2;
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestSimpleQueryScorerPhraseHighlighting,The following statement contains a magic number: highlighter.TextFragmenter = (new SimpleFragmenter(40));
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestSimpleQueryScorerPhraseHighlighting,The following statement contains a magic number: assertTrue("Failed to find correct number of highlights " + numHighlights + " found"'                  numHighlights == 4);
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestSpanRegexQuery,The following statement contains a magic number: hits = searcher.Search(query' 100);
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestSpanRegexQuery,The following statement contains a magic number: int maxNumFragmentsRequired = 2;
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestSpanRegexQuery,The following statement contains a magic number: highlighter.TextFragmenter = (new SimpleFragmenter(40));
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestSpanRegexQuery,The following statement contains a magic number: assertTrue("Failed to find correct number of highlights " + numHighlights + " found"'                  numHighlights == 5);
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestRegexQuery,The following statement contains a magic number: hits = searcher.Search(query' 100);
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestRegexQuery,The following statement contains a magic number: int maxNumFragmentsRequired = 2;
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestRegexQuery,The following statement contains a magic number: highlighter.TextFragmenter = (new SimpleFragmenter(40));
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestRegexQuery,The following statement contains a magic number: assertTrue("Failed to find correct number of highlights " + numHighlights + " found"'                  numHighlights == 5);
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestExternalReader,The following statement contains a magic number: hits = searcher.Search(query' 100);
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestExternalReader,The following statement contains a magic number: int maxNumFragmentsRequired = 2;
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestExternalReader,The following statement contains a magic number: highlighter.TextFragmenter = (new SimpleFragmenter(40));
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestExternalReader,The following statement contains a magic number: assertTrue("Failed to find correct number of highlights " + numHighlights + " found"'                  numHighlights == 5);
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestNumericRangeQuery,The following statement contains a magic number: query = NumericRangeQuery.NewInt32Range(NUMERIC_FIELD_NAME' 2' 6' true' true);
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestNumericRangeQuery,The following statement contains a magic number: query = NumericRangeQuery.NewInt32Range(NUMERIC_FIELD_NAME' 2' 6' true' true);
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestNumericRangeQuery,The following statement contains a magic number: hits = searcher.Search(query' 100);
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestNumericRangeQuery,The following statement contains a magic number: int maxNumFragmentsRequired = 2;
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestNumericRangeQuery,The following statement contains a magic number: highlighter.TextFragmenter = (new SimpleFragmenter(40));
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestSimpleQueryScorerPhraseHighlighting2,The following statement contains a magic number: phraseQuery.Slop = (5);
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestSimpleQueryScorerPhraseHighlighting2,The following statement contains a magic number: int maxNumFragmentsRequired = 2;
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestSimpleQueryScorerPhraseHighlighting2,The following statement contains a magic number: highlighter.TextFragmenter = (new SimpleFragmenter(40));
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestSimpleQueryScorerPhraseHighlighting2,The following statement contains a magic number: assertTrue("Failed to find correct number of highlights " + numHighlights + " found"'                  numHighlights == 6);
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestSimpleQueryScorerPhraseHighlighting3,The following statement contains a magic number: int maxNumFragmentsRequired = 2;
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestSimpleQueryScorerPhraseHighlighting3,The following statement contains a magic number: highlighter.TextFragmenter = (new SimpleFragmenter(40));
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestSimpleQueryScorerPhraseHighlighting3,The following statement contains a magic number: assertTrue("Failed to find correct number of highlights " + numHighlights + " found"'                      numHighlights == 3);
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestSimpleSpanFragmenter,The following statement contains a magic number: phraseQuery.Add(new Term(FIELD_NAME' "text")' 2);
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestSimpleSpanFragmenter,The following statement contains a magic number: phraseQuery.Add(new Term(FIELD_NAME' "very")' 5);
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestSimpleSpanFragmenter,The following statement contains a magic number: phraseQuery.Add(new Term(FIELD_NAME' "long")' 6);
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestSimpleSpanFragmenter,The following statement contains a magic number: int maxNumFragmentsRequired = 2;
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestSimpleSpanFragmenter,The following statement contains a magic number: highlighter.TextFragmenter = (new SimpleSpanFragmenter(scorer' 5));
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestSimpleSpanFragmenter,The following statement contains a magic number: maxNumFragmentsRequired = 2;
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestSimpleSpanFragmenter,The following statement contains a magic number: highlighter.TextFragmenter = (new SimpleSpanFragmenter(scorer' 20));
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestPosTermStdTerm,The following statement contains a magic number: int maxNumFragmentsRequired = 2;
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestPosTermStdTerm,The following statement contains a magic number: highlighter.TextFragmenter = (new SimpleFragmenter(40));
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestPosTermStdTerm,The following statement contains a magic number: assertTrue("Failed to find correct number of highlights " + numHighlights + " found"'                      numHighlights == 4);
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestQueryScorerMultiPhraseQueryHighlighting,The following statement contains a magic number: int maxNumFragmentsRequired = 2;
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestQueryScorerMultiPhraseQueryHighlighting,The following statement contains a magic number: assertExpectedHighlightCount(maxNumFragmentsRequired' 6);
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestQueryScorerMultiPhraseQueryHighlightingWithGap,The following statement contains a magic number: mpq.Add(new Term[] { new Term(FIELD_NAME' "wordz") }' 2);
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestQueryScorerMultiPhraseQueryHighlightingWithGap,The following statement contains a magic number: int expectedHighlights = 2;
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestNearSpanSimpleQuery,The following statement contains a magic number: doSearching(new SpanNearQuery(new SpanQuery[] {                  new SpanTermQuery(new Term(FIELD_NAME' "beginning"))'                  new SpanTermQuery(new Term(FIELD_NAME' "kennedy")) }' 3' false));
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestNearSpanSimpleQuery,The following statement contains a magic number: assertTrue("Failed to find correct number of highlights " + numHighlights + " found"'                  numHighlights == 2);
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestSimpleQueryTermScorerHighlighter,The following statement contains a magic number: highlighter.TextFragmenter = (new SimpleFragmenter(40));
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestSimpleQueryTermScorerHighlighter,The following statement contains a magic number: int maxNumFragmentsRequired = 2;
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestSpanHighlighting,The following statement contains a magic number: assertTrue("Failed to find correct number of highlights " + numHighlights + " found"'                  numHighlights == 7);
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestNotSpanSimpleQuery,The following statement contains a magic number: doSearching(new SpanNotQuery(new SpanNearQuery(new SpanQuery[] {                  new SpanTermQuery(new Term(FIELD_NAME' "shot"))'                  new SpanTermQuery(new Term(FIELD_NAME' "kennedy")) }' 3' false)' new SpanTermQuery(                  new Term(FIELD_NAME' "john"))));
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestNotSpanSimpleQuery,The following statement contains a magic number: assertTrue("Failed to find correct number of highlights " + numHighlights + " found"'                  numHighlights == 4);
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestGetBestFragmentsSimpleQuery,The following statement contains a magic number: TestHighlightRunner helper = new TestHighlightRunner((instance) =>              {                  numHighlights = 0;                  doSearching(new TermQuery(new Term(FIELD_NAME' "kennedy")));                    instance.DoStandardHighlights(analyzer' searcher' hits' query' this);                  assertTrue("Failed to find correct number of highlights " + numHighlights + " found"'                      numHighlights == 4);              });
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestGetBestFragmentsConstantScore,The following statement contains a magic number: TestHighlightRunner helper = new TestHighlightRunner((instance) =>              {                  numHighlights = 0;                  if (Random.nextBoolean())                  {                      BooleanQuery bq = new BooleanQuery();                      bq.Add(new ConstantScoreQuery(new QueryWrapperFilter(new TermQuery(                          new Term(FIELD_NAME' "kennedy"))))' Occur.MUST);                      bq.Add(new ConstantScoreQuery(new TermQuery(new Term(FIELD_NAME' "kennedy")))' Occur.MUST);                      doSearching(bq);                  }                  else                  {                      doSearching(new ConstantScoreQuery(new TermQuery(new Term(FIELD_NAME'                          "kennedy"))));                  }                  instance.DoStandardHighlights(analyzer' searcher' hits' query' this);                  assertTrue("Failed to find correct number of highlights " + numHighlights + " found"'                          numHighlights == 4);              });
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestGetFuzzyFragments,The following statement contains a magic number: TestHighlightRunner helper = new TestHighlightRunner((instance) =>              {                  numHighlights = 0;                  FuzzyQuery fuzzyQuery = new FuzzyQuery(new Term(FIELD_NAME' "kinnedy")' 2);                  fuzzyQuery.MultiTermRewriteMethod = MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE;                  doSearching(fuzzyQuery);                  instance.DoStandardHighlights(analyzer' searcher' hits' query' this' true);                  assertTrue("Failed to find correct number of highlights " + numHighlights + " found"'                      numHighlights == 4);              });
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestGetFuzzyFragments,The following statement contains a magic number: TestHighlightRunner helper = new TestHighlightRunner((instance) =>              {                  numHighlights = 0;                  FuzzyQuery fuzzyQuery = new FuzzyQuery(new Term(FIELD_NAME' "kinnedy")' 2);                  fuzzyQuery.MultiTermRewriteMethod = MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE;                  doSearching(fuzzyQuery);                  instance.DoStandardHighlights(analyzer' searcher' hits' query' this' true);                  assertTrue("Failed to find correct number of highlights " + numHighlights + " found"'                      numHighlights == 4);              });
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestGetWildCardFragments,The following statement contains a magic number: TestHighlightRunner helper = new TestHighlightRunner((instance) =>              {                  numHighlights = 0;                  WildcardQuery wildcardQuery = new WildcardQuery(new Term(FIELD_NAME' "k?nnedy"));                  wildcardQuery.MultiTermRewriteMethod = MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE;                  doSearching(wildcardQuery);                  instance.DoStandardHighlights(analyzer' searcher' hits' query' this);                  assertTrue("Failed to find correct number of highlights " + numHighlights + " found"'                      numHighlights == 4);              });
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestGetMidWildCardFragments,The following statement contains a magic number: TestHighlightRunner helper = new TestHighlightRunner((instance) =>              {                  numHighlights = 0;                  WildcardQuery wildcardQuery = new WildcardQuery(new Term(FIELD_NAME' "k*dy"));                  wildcardQuery.MultiTermRewriteMethod = MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE;                  doSearching(wildcardQuery);                  instance.DoStandardHighlights(analyzer' searcher' hits' query' this);                  assertTrue("Failed to find correct number of highlights " + numHighlights + " found"'                      numHighlights == 5);              });
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestGetRangeFragments,The following statement contains a magic number: TestHighlightRunner helper = new TestHighlightRunner((instance) =>              {                  numHighlights = 0;                    // Need to explicitly set the QueryParser property to use TermRangeQuery                  // rather                  // than RangeFilters                    TermRangeQuery rangeQuery = new TermRangeQuery(                      FIELD_NAME'                          new BytesRef("kannedy")'                          new BytesRef("kznnedy")'                          true' true);                  rangeQuery.MultiTermRewriteMethod = MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE;                    query = rangeQuery;                  doSearching(query);                    instance.DoStandardHighlights(analyzer' searcher' hits' query' this);                  assertTrue("Failed to find correct number of highlights " + numHighlights + " found"'                      numHighlights == 5);              });
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestConstantScoreMultiTermQuery,The following statement contains a magic number: hits = searcher.Search(query' null' 1000);
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestConstantScoreMultiTermQuery,The following statement contains a magic number: int maxNumFragmentsRequired = 2;
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestConstantScoreMultiTermQuery,The following statement contains a magic number: highlighter.TextFragmenter = (new SimpleFragmenter(20));
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestConstantScoreMultiTermQuery,The following statement contains a magic number: assertTrue("Failed to find correct number of highlights " + numHighlights + " found"'                  numHighlights == 5);
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestConstantScoreMultiTermQuery,The following statement contains a magic number: hits = searcher.Search(query' null' 1000);
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestConstantScoreMultiTermQuery,The following statement contains a magic number: int maxNumFragmentsRequired = 2;
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestConstantScoreMultiTermQuery,The following statement contains a magic number: highlighter.TextFragmenter = (new SimpleFragmenter(20));
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestConstantScoreMultiTermQuery,The following statement contains a magic number: assertTrue("Failed to find correct number of highlights " + numHighlights + " found"'                  numHighlights == 5);
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestConstantScoreMultiTermQuery,The following statement contains a magic number: hits = searcher.Search(query' null' 1000);
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestConstantScoreMultiTermQuery,The following statement contains a magic number: int maxNumFragmentsRequired = 2;
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestConstantScoreMultiTermQuery,The following statement contains a magic number: highlighter.TextFragmenter = (new SimpleFragmenter(20));
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestConstantScoreMultiTermQuery,The following statement contains a magic number: assertTrue("Failed to find correct number of highlights " + numHighlights + " found"'                  numHighlights == 5);
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestGetBestFragmentsPhrase,The following statement contains a magic number: TestHighlightRunner helper = new TestHighlightRunner((instance) =>              {                  numHighlights = 0;                  PhraseQuery phraseQuery = new PhraseQuery();                  phraseQuery.Add(new Term(FIELD_NAME' "john"));                  phraseQuery.Add(new Term(FIELD_NAME' "kennedy"));                  doSearching(phraseQuery);                  instance.DoStandardHighlights(analyzer' searcher' hits' query' this);                  // Currently highlights "John" and "Kennedy" separately                  assertTrue("Failed to find correct number of highlights " + numHighlights + " found"'                      numHighlights == 2);              });
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestGetBestFragmentsQueryScorer,The following statement contains a magic number: TestHighlightRunner helper = new TestHighlightRunner((instance) =>              {                  numHighlights = 0;                  SpanQuery[] clauses = {                          new SpanTermQuery(new Term("contents"' "john"))'                              new SpanTermQuery(new Term("contents"' "kennedy"))' };                    SpanNearQuery snq = new SpanNearQuery(clauses' 1' true);                  doSearching(snq);                  instance.DoStandardHighlights(analyzer' searcher' hits' query' this);                  // Currently highlights "John" and "Kennedy" separately                  assertTrue("Failed to find correct number of highlights " + numHighlights + " found"'                      numHighlights == 2);              });
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestGetBestFragmentsFilteredQuery,The following statement contains a magic number: TestHighlightRunner helper = new TestHighlightRunner((instance) =>              {                  numHighlights = 0;                  TermRangeFilter rf = TermRangeFilter.NewStringRange("contents"' "john"' "john"' true' true);                  SpanQuery[] clauses = {                          new SpanTermQuery(new Term("contents"' "john"))'                              new SpanTermQuery(new Term("contents"' "kennedy"))' };                  SpanNearQuery snq = new SpanNearQuery(clauses' 1' true);                  FilteredQuery fq = new FilteredQuery(snq' rf);                    doSearching(fq);                  instance.DoStandardHighlights(analyzer' searcher' hits' query' this);                  // Currently highlights "John" and "Kennedy" separately                  assertTrue("Failed to find correct number of highlights " + numHighlights + " found"'                      numHighlights == 2);              });
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestGetBestFragmentsFilteredPhraseQuery,The following statement contains a magic number: TestHighlightRunner helper = new TestHighlightRunner((instance) =>              {                  numHighlights = 0;                  TermRangeFilter rf = TermRangeFilter.NewStringRange("contents"' "john"' "john"' true' true);                  PhraseQuery pq = new PhraseQuery();                  pq.Add(new Term("contents"' "john"));                  pq.Add(new Term("contents"' "kennedy"));                  FilteredQuery fq = new FilteredQuery(pq' rf);                    doSearching(fq);                  instance.DoStandardHighlights(analyzer' searcher' hits' query' this);                  // Currently highlights "John" and "Kennedy" separately                  assertTrue("Failed to find correct number of highlights " + numHighlights + " found"'                      numHighlights == 2);              });
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestGetBestFragmentsMultiTerm,The following statement contains a magic number: TestHighlightRunner helper = new TestHighlightRunner((instance) =>              {                  numHighlights = 0;                  BooleanQuery booleanQuery = new BooleanQuery();                  booleanQuery.Add(new TermQuery(new Term(FIELD_NAME' "john"))' Occur.SHOULD);                  PrefixQuery prefixQuery = new PrefixQuery(new Term(FIELD_NAME' "kenn"));                  prefixQuery.MultiTermRewriteMethod = MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE;                  booleanQuery.Add(prefixQuery' Occur.SHOULD);                    doSearching(booleanQuery);                  instance.DoStandardHighlights(analyzer' searcher' hits' query' this);                  assertTrue("Failed to find correct number of highlights " + numHighlights + " found"'                      numHighlights == 5);              });
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestGetBestFragmentsWithOr,The following statement contains a magic number: TestHighlightRunner helper = new TestHighlightRunner((instance) =>              {                  numHighlights = 0;                    BooleanQuery query = new BooleanQuery();                  query.Add(new TermQuery(new Term(FIELD_NAME' "jfk"))' Occur.SHOULD);                  query.Add(new TermQuery(new Term(FIELD_NAME' "kennedy"))' Occur.SHOULD);                    doSearching(query);                  instance.DoStandardHighlights(analyzer' searcher' hits' query' this);                  assertTrue("Failed to find correct number of highlights " + numHighlights + " found"'                      numHighlights == 5);              });
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestGetBestSingleFragment,The following statement contains a magic number: TestHighlightRunner helper = new TestHighlightRunner((instance) =>              {                  doSearching(new TermQuery(new Term(FIELD_NAME' "kennedy")));                  numHighlights = 0;                  for (int i = 0; i < hits.TotalHits; i++)                  {                      String text = searcher.Doc(hits.ScoreDocs[i].Doc).Get(FIELD_NAME);                      TokenStream tokenStream = analyzer.GetTokenStream(FIELD_NAME' text);                        Highlighter highlighter = instance.GetHighlighter(query' FIELD_NAME'                          this);                      highlighter.TextFragmenter = (new SimpleFragmenter(40));                      String result = highlighter.GetBestFragment(tokenStream' text);                      if (VERBOSE) Console.WriteLine("\t" + result);                  }                  assertTrue("Failed to find correct number of highlights " + numHighlights + " found"'                      numHighlights == 4);                    numHighlights = 0;                  for (int i = 0; i < hits.TotalHits; i++)                  {                      String text = searcher.Doc(hits.ScoreDocs[i].Doc).Get(FIELD_NAME);                      Highlighter highlighter = instance.GetHighlighter(query' FIELD_NAME'                          this);                      highlighter.GetBestFragment(analyzer' FIELD_NAME' text);                  }                  assertTrue("Failed to find correct number of highlights " + numHighlights + " found"'                      numHighlights == 4);                    numHighlights = 0;                  for (int i = 0; i < hits.TotalHits; i++)                  {                      String text = searcher.Doc(hits.ScoreDocs[i].Doc).Get(FIELD_NAME);                        Highlighter highlighter = instance.GetHighlighter(query' FIELD_NAME'                          this);                      highlighter.GetBestFragments(analyzer' FIELD_NAME' text' 10);                  }                  assertTrue("Failed to find correct number of highlights " + numHighlights + " found"'                      numHighlights == 4);              });
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestGetBestSingleFragment,The following statement contains a magic number: TestHighlightRunner helper = new TestHighlightRunner((instance) =>              {                  doSearching(new TermQuery(new Term(FIELD_NAME' "kennedy")));                  numHighlights = 0;                  for (int i = 0; i < hits.TotalHits; i++)                  {                      String text = searcher.Doc(hits.ScoreDocs[i].Doc).Get(FIELD_NAME);                      TokenStream tokenStream = analyzer.GetTokenStream(FIELD_NAME' text);                        Highlighter highlighter = instance.GetHighlighter(query' FIELD_NAME'                          this);                      highlighter.TextFragmenter = (new SimpleFragmenter(40));                      String result = highlighter.GetBestFragment(tokenStream' text);                      if (VERBOSE) Console.WriteLine("\t" + result);                  }                  assertTrue("Failed to find correct number of highlights " + numHighlights + " found"'                      numHighlights == 4);                    numHighlights = 0;                  for (int i = 0; i < hits.TotalHits; i++)                  {                      String text = searcher.Doc(hits.ScoreDocs[i].Doc).Get(FIELD_NAME);                      Highlighter highlighter = instance.GetHighlighter(query' FIELD_NAME'                          this);                      highlighter.GetBestFragment(analyzer' FIELD_NAME' text);                  }                  assertTrue("Failed to find correct number of highlights " + numHighlights + " found"'                      numHighlights == 4);                    numHighlights = 0;                  for (int i = 0; i < hits.TotalHits; i++)                  {                      String text = searcher.Doc(hits.ScoreDocs[i].Doc).Get(FIELD_NAME);                        Highlighter highlighter = instance.GetHighlighter(query' FIELD_NAME'                          this);                      highlighter.GetBestFragments(analyzer' FIELD_NAME' text' 10);                  }                  assertTrue("Failed to find correct number of highlights " + numHighlights + " found"'                      numHighlights == 4);              });
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestGetBestSingleFragment,The following statement contains a magic number: TestHighlightRunner helper = new TestHighlightRunner((instance) =>              {                  doSearching(new TermQuery(new Term(FIELD_NAME' "kennedy")));                  numHighlights = 0;                  for (int i = 0; i < hits.TotalHits; i++)                  {                      String text = searcher.Doc(hits.ScoreDocs[i].Doc).Get(FIELD_NAME);                      TokenStream tokenStream = analyzer.GetTokenStream(FIELD_NAME' text);                        Highlighter highlighter = instance.GetHighlighter(query' FIELD_NAME'                          this);                      highlighter.TextFragmenter = (new SimpleFragmenter(40));                      String result = highlighter.GetBestFragment(tokenStream' text);                      if (VERBOSE) Console.WriteLine("\t" + result);                  }                  assertTrue("Failed to find correct number of highlights " + numHighlights + " found"'                      numHighlights == 4);                    numHighlights = 0;                  for (int i = 0; i < hits.TotalHits; i++)                  {                      String text = searcher.Doc(hits.ScoreDocs[i].Doc).Get(FIELD_NAME);                      Highlighter highlighter = instance.GetHighlighter(query' FIELD_NAME'                          this);                      highlighter.GetBestFragment(analyzer' FIELD_NAME' text);                  }                  assertTrue("Failed to find correct number of highlights " + numHighlights + " found"'                      numHighlights == 4);                    numHighlights = 0;                  for (int i = 0; i < hits.TotalHits; i++)                  {                      String text = searcher.Doc(hits.ScoreDocs[i].Doc).Get(FIELD_NAME);                        Highlighter highlighter = instance.GetHighlighter(query' FIELD_NAME'                          this);                      highlighter.GetBestFragments(analyzer' FIELD_NAME' text' 10);                  }                  assertTrue("Failed to find correct number of highlights " + numHighlights + " found"'                      numHighlights == 4);              });
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestGetBestSingleFragment,The following statement contains a magic number: TestHighlightRunner helper = new TestHighlightRunner((instance) =>              {                  doSearching(new TermQuery(new Term(FIELD_NAME' "kennedy")));                  numHighlights = 0;                  for (int i = 0; i < hits.TotalHits; i++)                  {                      String text = searcher.Doc(hits.ScoreDocs[i].Doc).Get(FIELD_NAME);                      TokenStream tokenStream = analyzer.GetTokenStream(FIELD_NAME' text);                        Highlighter highlighter = instance.GetHighlighter(query' FIELD_NAME'                          this);                      highlighter.TextFragmenter = (new SimpleFragmenter(40));                      String result = highlighter.GetBestFragment(tokenStream' text);                      if (VERBOSE) Console.WriteLine("\t" + result);                  }                  assertTrue("Failed to find correct number of highlights " + numHighlights + " found"'                      numHighlights == 4);                    numHighlights = 0;                  for (int i = 0; i < hits.TotalHits; i++)                  {                      String text = searcher.Doc(hits.ScoreDocs[i].Doc).Get(FIELD_NAME);                      Highlighter highlighter = instance.GetHighlighter(query' FIELD_NAME'                          this);                      highlighter.GetBestFragment(analyzer' FIELD_NAME' text);                  }                  assertTrue("Failed to find correct number of highlights " + numHighlights + " found"'                      numHighlights == 4);                    numHighlights = 0;                  for (int i = 0; i < hits.TotalHits; i++)                  {                      String text = searcher.Doc(hits.ScoreDocs[i].Doc).Get(FIELD_NAME);                        Highlighter highlighter = instance.GetHighlighter(query' FIELD_NAME'                          this);                      highlighter.GetBestFragments(analyzer' FIELD_NAME' text' 10);                  }                  assertTrue("Failed to find correct number of highlights " + numHighlights + " found"'                      numHighlights == 4);              });
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestGetBestSingleFragment,The following statement contains a magic number: TestHighlightRunner helper = new TestHighlightRunner((instance) =>              {                  doSearching(new TermQuery(new Term(FIELD_NAME' "kennedy")));                  numHighlights = 0;                  for (int i = 0; i < hits.TotalHits; i++)                  {                      String text = searcher.Doc(hits.ScoreDocs[i].Doc).Get(FIELD_NAME);                      TokenStream tokenStream = analyzer.GetTokenStream(FIELD_NAME' text);                        Highlighter highlighter = instance.GetHighlighter(query' FIELD_NAME'                          this);                      highlighter.TextFragmenter = (new SimpleFragmenter(40));                      String result = highlighter.GetBestFragment(tokenStream' text);                      if (VERBOSE) Console.WriteLine("\t" + result);                  }                  assertTrue("Failed to find correct number of highlights " + numHighlights + " found"'                      numHighlights == 4);                    numHighlights = 0;                  for (int i = 0; i < hits.TotalHits; i++)                  {                      String text = searcher.Doc(hits.ScoreDocs[i].Doc).Get(FIELD_NAME);                      Highlighter highlighter = instance.GetHighlighter(query' FIELD_NAME'                          this);                      highlighter.GetBestFragment(analyzer' FIELD_NAME' text);                  }                  assertTrue("Failed to find correct number of highlights " + numHighlights + " found"'                      numHighlights == 4);                    numHighlights = 0;                  for (int i = 0; i < hits.TotalHits; i++)                  {                      String text = searcher.Doc(hits.ScoreDocs[i].Doc).Get(FIELD_NAME);                        Highlighter highlighter = instance.GetHighlighter(query' FIELD_NAME'                          this);                      highlighter.GetBestFragments(analyzer' FIELD_NAME' text' 10);                  }                  assertTrue("Failed to find correct number of highlights " + numHighlights + " found"'                      numHighlights == 4);              });
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestGetBestSingleFragmentWithWeights,The following statement contains a magic number: TestHighlightRunner helper = new TestHighlightRunner((instance) =>              {                  WeightedSpanTerm[]                  wTerms = new WeightedSpanTerm[2];                  wTerms[0] = new WeightedSpanTerm(10f' "hello");                    List<PositionSpan> positionSpans = new List<PositionSpan>();                  positionSpans.Add(new PositionSpan(0' 0));                  wTerms[0].AddPositionSpans(positionSpans);                    wTerms[1] = new WeightedSpanTerm(1f' "kennedy");                  positionSpans = new List<PositionSpan>();                  positionSpans.Add(new PositionSpan(14' 14));                  wTerms[1].AddPositionSpans(positionSpans);                    Highlighter highlighter = instance.GetHighlighter(wTerms' this);// new                                                                                  // Highlighter(new                                                                                  // QueryTermScorer(wTerms));                  TokenStream tokenStream = analyzer.GetTokenStream(FIELD_NAME' texts[0]);                  highlighter.TextFragmenter = (new SimpleFragmenter(2));                    String result = highlighter.GetBestFragment(tokenStream' texts[0]).Trim();                  assertTrue("Failed to find best section using weighted terms. Found: [" + result + "]"'                      "<B>Hello</B>".Equals(result' StringComparison.Ordinal));                    // readjust weights                  wTerms[1].Weight = (50f);                  tokenStream = analyzer.GetTokenStream(FIELD_NAME' texts[0]);                  highlighter = instance.GetHighlighter(wTerms' this);                  highlighter.TextFragmenter = (new SimpleFragmenter(2));                    result = highlighter.GetBestFragment(tokenStream' texts[0]).Trim();                  assertTrue("Failed to find best section using weighted terms. Found: " + result'                      "<B>kennedy</B>".Equals(result' StringComparison.Ordinal));              });
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestGetBestSingleFragmentWithWeights,The following statement contains a magic number: TestHighlightRunner helper = new TestHighlightRunner((instance) =>              {                  WeightedSpanTerm[]                  wTerms = new WeightedSpanTerm[2];                  wTerms[0] = new WeightedSpanTerm(10f' "hello");                    List<PositionSpan> positionSpans = new List<PositionSpan>();                  positionSpans.Add(new PositionSpan(0' 0));                  wTerms[0].AddPositionSpans(positionSpans);                    wTerms[1] = new WeightedSpanTerm(1f' "kennedy");                  positionSpans = new List<PositionSpan>();                  positionSpans.Add(new PositionSpan(14' 14));                  wTerms[1].AddPositionSpans(positionSpans);                    Highlighter highlighter = instance.GetHighlighter(wTerms' this);// new                                                                                  // Highlighter(new                                                                                  // QueryTermScorer(wTerms));                  TokenStream tokenStream = analyzer.GetTokenStream(FIELD_NAME' texts[0]);                  highlighter.TextFragmenter = (new SimpleFragmenter(2));                    String result = highlighter.GetBestFragment(tokenStream' texts[0]).Trim();                  assertTrue("Failed to find best section using weighted terms. Found: [" + result + "]"'                      "<B>Hello</B>".Equals(result' StringComparison.Ordinal));                    // readjust weights                  wTerms[1].Weight = (50f);                  tokenStream = analyzer.GetTokenStream(FIELD_NAME' texts[0]);                  highlighter = instance.GetHighlighter(wTerms' this);                  highlighter.TextFragmenter = (new SimpleFragmenter(2));                    result = highlighter.GetBestFragment(tokenStream' texts[0]).Trim();                  assertTrue("Failed to find best section using weighted terms. Found: " + result'                      "<B>kennedy</B>".Equals(result' StringComparison.Ordinal));              });
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestGetBestSingleFragmentWithWeights,The following statement contains a magic number: TestHighlightRunner helper = new TestHighlightRunner((instance) =>              {                  WeightedSpanTerm[]                  wTerms = new WeightedSpanTerm[2];                  wTerms[0] = new WeightedSpanTerm(10f' "hello");                    List<PositionSpan> positionSpans = new List<PositionSpan>();                  positionSpans.Add(new PositionSpan(0' 0));                  wTerms[0].AddPositionSpans(positionSpans);                    wTerms[1] = new WeightedSpanTerm(1f' "kennedy");                  positionSpans = new List<PositionSpan>();                  positionSpans.Add(new PositionSpan(14' 14));                  wTerms[1].AddPositionSpans(positionSpans);                    Highlighter highlighter = instance.GetHighlighter(wTerms' this);// new                                                                                  // Highlighter(new                                                                                  // QueryTermScorer(wTerms));                  TokenStream tokenStream = analyzer.GetTokenStream(FIELD_NAME' texts[0]);                  highlighter.TextFragmenter = (new SimpleFragmenter(2));                    String result = highlighter.GetBestFragment(tokenStream' texts[0]).Trim();                  assertTrue("Failed to find best section using weighted terms. Found: [" + result + "]"'                      "<B>Hello</B>".Equals(result' StringComparison.Ordinal));                    // readjust weights                  wTerms[1].Weight = (50f);                  tokenStream = analyzer.GetTokenStream(FIELD_NAME' texts[0]);                  highlighter = instance.GetHighlighter(wTerms' this);                  highlighter.TextFragmenter = (new SimpleFragmenter(2));                    result = highlighter.GetBestFragment(tokenStream' texts[0]).Trim();                  assertTrue("Failed to find best section using weighted terms. Found: " + result'                      "<B>kennedy</B>".Equals(result' StringComparison.Ordinal));              });
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestGetBestSingleFragmentWithWeights,The following statement contains a magic number: TestHighlightRunner helper = new TestHighlightRunner((instance) =>              {                  WeightedSpanTerm[]                  wTerms = new WeightedSpanTerm[2];                  wTerms[0] = new WeightedSpanTerm(10f' "hello");                    List<PositionSpan> positionSpans = new List<PositionSpan>();                  positionSpans.Add(new PositionSpan(0' 0));                  wTerms[0].AddPositionSpans(positionSpans);                    wTerms[1] = new WeightedSpanTerm(1f' "kennedy");                  positionSpans = new List<PositionSpan>();                  positionSpans.Add(new PositionSpan(14' 14));                  wTerms[1].AddPositionSpans(positionSpans);                    Highlighter highlighter = instance.GetHighlighter(wTerms' this);// new                                                                                  // Highlighter(new                                                                                  // QueryTermScorer(wTerms));                  TokenStream tokenStream = analyzer.GetTokenStream(FIELD_NAME' texts[0]);                  highlighter.TextFragmenter = (new SimpleFragmenter(2));                    String result = highlighter.GetBestFragment(tokenStream' texts[0]).Trim();                  assertTrue("Failed to find best section using weighted terms. Found: [" + result + "]"'                      "<B>Hello</B>".Equals(result' StringComparison.Ordinal));                    // readjust weights                  wTerms[1].Weight = (50f);                  tokenStream = analyzer.GetTokenStream(FIELD_NAME' texts[0]);                  highlighter = instance.GetHighlighter(wTerms' this);                  highlighter.TextFragmenter = (new SimpleFragmenter(2));                    result = highlighter.GetBestFragment(tokenStream' texts[0]).Trim();                  assertTrue("Failed to find best section using weighted terms. Found: " + result'                      "<B>kennedy</B>".Equals(result' StringComparison.Ordinal));              });
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestGetBestSingleFragmentWithWeights,The following statement contains a magic number: TestHighlightRunner helper = new TestHighlightRunner((instance) =>              {                  WeightedSpanTerm[]                  wTerms = new WeightedSpanTerm[2];                  wTerms[0] = new WeightedSpanTerm(10f' "hello");                    List<PositionSpan> positionSpans = new List<PositionSpan>();                  positionSpans.Add(new PositionSpan(0' 0));                  wTerms[0].AddPositionSpans(positionSpans);                    wTerms[1] = new WeightedSpanTerm(1f' "kennedy");                  positionSpans = new List<PositionSpan>();                  positionSpans.Add(new PositionSpan(14' 14));                  wTerms[1].AddPositionSpans(positionSpans);                    Highlighter highlighter = instance.GetHighlighter(wTerms' this);// new                                                                                  // Highlighter(new                                                                                  // QueryTermScorer(wTerms));                  TokenStream tokenStream = analyzer.GetTokenStream(FIELD_NAME' texts[0]);                  highlighter.TextFragmenter = (new SimpleFragmenter(2));                    String result = highlighter.GetBestFragment(tokenStream' texts[0]).Trim();                  assertTrue("Failed to find best section using weighted terms. Found: [" + result + "]"'                      "<B>Hello</B>".Equals(result' StringComparison.Ordinal));                    // readjust weights                  wTerms[1].Weight = (50f);                  tokenStream = analyzer.GetTokenStream(FIELD_NAME' texts[0]);                  highlighter = instance.GetHighlighter(wTerms' this);                  highlighter.TextFragmenter = (new SimpleFragmenter(2));                    result = highlighter.GetBestFragment(tokenStream' texts[0]).Trim();                  assertTrue("Failed to find best section using weighted terms. Found: " + result'                      "<B>kennedy</B>".Equals(result' StringComparison.Ordinal));              });
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestGetBestSingleFragmentWithWeights,The following statement contains a magic number: TestHighlightRunner helper = new TestHighlightRunner((instance) =>              {                  WeightedSpanTerm[]                  wTerms = new WeightedSpanTerm[2];                  wTerms[0] = new WeightedSpanTerm(10f' "hello");                    List<PositionSpan> positionSpans = new List<PositionSpan>();                  positionSpans.Add(new PositionSpan(0' 0));                  wTerms[0].AddPositionSpans(positionSpans);                    wTerms[1] = new WeightedSpanTerm(1f' "kennedy");                  positionSpans = new List<PositionSpan>();                  positionSpans.Add(new PositionSpan(14' 14));                  wTerms[1].AddPositionSpans(positionSpans);                    Highlighter highlighter = instance.GetHighlighter(wTerms' this);// new                                                                                  // Highlighter(new                                                                                  // QueryTermScorer(wTerms));                  TokenStream tokenStream = analyzer.GetTokenStream(FIELD_NAME' texts[0]);                  highlighter.TextFragmenter = (new SimpleFragmenter(2));                    String result = highlighter.GetBestFragment(tokenStream' texts[0]).Trim();                  assertTrue("Failed to find best section using weighted terms. Found: [" + result + "]"'                      "<B>Hello</B>".Equals(result' StringComparison.Ordinal));                    // readjust weights                  wTerms[1].Weight = (50f);                  tokenStream = analyzer.GetTokenStream(FIELD_NAME' texts[0]);                  highlighter = instance.GetHighlighter(wTerms' this);                  highlighter.TextFragmenter = (new SimpleFragmenter(2));                    result = highlighter.GetBestFragment(tokenStream' texts[0]).Trim();                  assertTrue("Failed to find best section using weighted terms. Found: " + result'                      "<B>kennedy</B>".Equals(result' StringComparison.Ordinal));              });
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestGetBestSingleFragmentWithWeights,The following statement contains a magic number: TestHighlightRunner helper = new TestHighlightRunner((instance) =>              {                  WeightedSpanTerm[]                  wTerms = new WeightedSpanTerm[2];                  wTerms[0] = new WeightedSpanTerm(10f' "hello");                    List<PositionSpan> positionSpans = new List<PositionSpan>();                  positionSpans.Add(new PositionSpan(0' 0));                  wTerms[0].AddPositionSpans(positionSpans);                    wTerms[1] = new WeightedSpanTerm(1f' "kennedy");                  positionSpans = new List<PositionSpan>();                  positionSpans.Add(new PositionSpan(14' 14));                  wTerms[1].AddPositionSpans(positionSpans);                    Highlighter highlighter = instance.GetHighlighter(wTerms' this);// new                                                                                  // Highlighter(new                                                                                  // QueryTermScorer(wTerms));                  TokenStream tokenStream = analyzer.GetTokenStream(FIELD_NAME' texts[0]);                  highlighter.TextFragmenter = (new SimpleFragmenter(2));                    String result = highlighter.GetBestFragment(tokenStream' texts[0]).Trim();                  assertTrue("Failed to find best section using weighted terms. Found: [" + result + "]"'                      "<B>Hello</B>".Equals(result' StringComparison.Ordinal));                    // readjust weights                  wTerms[1].Weight = (50f);                  tokenStream = analyzer.GetTokenStream(FIELD_NAME' texts[0]);                  highlighter = instance.GetHighlighter(wTerms' this);                  highlighter.TextFragmenter = (new SimpleFragmenter(2));                    result = highlighter.GetBestFragment(tokenStream' texts[0]).Trim();                  assertTrue("Failed to find best section using weighted terms. Found: " + result'                      "<B>kennedy</B>".Equals(result' StringComparison.Ordinal));              });
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestOverlapAnalyzer,The following statement contains a magic number: TestHighlightRunner helper = new TestHighlightRunner((instance) =>              {                  HashMap<String' String> synonyms = new HashMap<String' String>();                  synonyms.Put("football"' "soccer'footie");                  Analyzer analyzer = new SynonymAnalyzer(synonyms);                    String s = "football-soccer in the euro 2004 footie competition";                    BooleanQuery query = new BooleanQuery();                  query.Add(new TermQuery(new Term("bookid"' "football"))' Occur.SHOULD);                  query.Add(new TermQuery(new Term("bookid"' "soccer"))' Occur.SHOULD);                  query.Add(new TermQuery(new Term("bookid"' "footie"))' Occur.SHOULD);                    Highlighter highlighter = instance.GetHighlighter(query' null' this);                    // Get 3 best fragments and separate with a "..."                  TokenStream tokenStream = analyzer.GetTokenStream(null' s);                    String result = highlighter.GetBestFragments(tokenStream' s' 3' "...");                  String expectedResult = "<B>football</B>-<B>soccer</B> in the euro 2004 <B>footie</B> competition";                  assertTrue("overlapping analyzer should handle highlights OK' expected:" + expectedResult                      + " actual:" + result' expectedResult.Equals(result' StringComparison.Ordinal));              });
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestGetSimpleHighlight,The following statement contains a magic number: TestHighlightRunner helper = new TestHighlightRunner((instance) =>              {                  numHighlights = 0;                  doSearching(new TermQuery(new Term(FIELD_NAME' "kennedy")));                  // new Highlighter(HighlighterTest.this' new QueryTermScorer(query));                    for (int i = 0; i < hits.TotalHits; i++)                  {                      String text = searcher.Doc(hits.ScoreDocs[i].Doc).Get(FIELD_NAME);                      TokenStream tokenStream = analyzer.GetTokenStream(FIELD_NAME' text);                      Highlighter highlighter = instance.GetHighlighter(query' FIELD_NAME'                          this);                      String result = highlighter.GetBestFragment(tokenStream' text);                      if (VERBOSE) Console.WriteLine("\t" + result);                  }                  assertTrue("Failed to find correct number of highlights " + numHighlights + " found"'                      numHighlights == 4);              });
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestGetTextFragments,The following statement contains a magic number: TestHighlightRunner helper = new TestHighlightRunner((instance) =>              {                  doSearching(new TermQuery(new Term(FIELD_NAME' "kennedy")));                    for (int i = 0; i < hits.TotalHits; i++)                  {                      String text = searcher.Doc(hits.ScoreDocs[i].Doc).Get(FIELD_NAME);                      TokenStream tokenStream = analyzer.GetTokenStream(FIELD_NAME' text);                        Highlighter highlighter = instance.GetHighlighter(query' FIELD_NAME'                          this);// new Highlighter(this' new                                // QueryTermScorer(query));                      highlighter.TextFragmenter = (new SimpleFragmenter(20));                      String[] stringResults = highlighter.GetBestFragments(tokenStream' text' 10);                        tokenStream = analyzer.GetTokenStream(FIELD_NAME' text);                      TextFragment[] fragmentResults = highlighter.GetBestTextFragments(tokenStream' text'                          true' 10);                        assertTrue("Failed to find correct number of text Fragments: " + fragmentResults.Length                          + " vs " + stringResults.Length' fragmentResults.Length == stringResults.Length);                      for (int j = 0; j < stringResults.Length; j++)                      {                          if (VERBOSE) Console.WriteLine(fragmentResults[j]);                          assertTrue("Failed to find same text Fragments: " + fragmentResults[j] + " found"'                              fragmentResults[j].toString().Equals(stringResults[j]' StringComparison.Ordinal));                        }                  }              });
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestGetTextFragments,The following statement contains a magic number: TestHighlightRunner helper = new TestHighlightRunner((instance) =>              {                  doSearching(new TermQuery(new Term(FIELD_NAME' "kennedy")));                    for (int i = 0; i < hits.TotalHits; i++)                  {                      String text = searcher.Doc(hits.ScoreDocs[i].Doc).Get(FIELD_NAME);                      TokenStream tokenStream = analyzer.GetTokenStream(FIELD_NAME' text);                        Highlighter highlighter = instance.GetHighlighter(query' FIELD_NAME'                          this);// new Highlighter(this' new                                // QueryTermScorer(query));                      highlighter.TextFragmenter = (new SimpleFragmenter(20));                      String[] stringResults = highlighter.GetBestFragments(tokenStream' text' 10);                        tokenStream = analyzer.GetTokenStream(FIELD_NAME' text);                      TextFragment[] fragmentResults = highlighter.GetBestTextFragments(tokenStream' text'                          true' 10);                        assertTrue("Failed to find correct number of text Fragments: " + fragmentResults.Length                          + " vs " + stringResults.Length' fragmentResults.Length == stringResults.Length);                      for (int j = 0; j < stringResults.Length; j++)                      {                          if (VERBOSE) Console.WriteLine(fragmentResults[j]);                          assertTrue("Failed to find same text Fragments: " + fragmentResults[j] + " found"'                              fragmentResults[j].toString().Equals(stringResults[j]' StringComparison.Ordinal));                        }                  }              });
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestGetTextFragments,The following statement contains a magic number: TestHighlightRunner helper = new TestHighlightRunner((instance) =>              {                  doSearching(new TermQuery(new Term(FIELD_NAME' "kennedy")));                    for (int i = 0; i < hits.TotalHits; i++)                  {                      String text = searcher.Doc(hits.ScoreDocs[i].Doc).Get(FIELD_NAME);                      TokenStream tokenStream = analyzer.GetTokenStream(FIELD_NAME' text);                        Highlighter highlighter = instance.GetHighlighter(query' FIELD_NAME'                          this);// new Highlighter(this' new                                // QueryTermScorer(query));                      highlighter.TextFragmenter = (new SimpleFragmenter(20));                      String[] stringResults = highlighter.GetBestFragments(tokenStream' text' 10);                        tokenStream = analyzer.GetTokenStream(FIELD_NAME' text);                      TextFragment[] fragmentResults = highlighter.GetBestTextFragments(tokenStream' text'                          true' 10);                        assertTrue("Failed to find correct number of text Fragments: " + fragmentResults.Length                          + " vs " + stringResults.Length' fragmentResults.Length == stringResults.Length);                      for (int j = 0; j < stringResults.Length; j++)                      {                          if (VERBOSE) Console.WriteLine(fragmentResults[j]);                          assertTrue("Failed to find same text Fragments: " + fragmentResults[j] + " found"'                              fragmentResults[j].toString().Equals(stringResults[j]' StringComparison.Ordinal));                        }                  }              });
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestMaxSizeHighlight,The following statement contains a magic number: TestHighlightRunner helper = new TestHighlightRunner((instance) =>              {                  numHighlights = 0;                  doSearching(new TermQuery(new Term(FIELD_NAME' "meat")));                  TokenStream tokenStream = analyzer.GetTokenStream(FIELD_NAME' texts[0]);                  Highlighter highlighter = instance.GetHighlighter(query' FIELD_NAME'                      this);// new Highlighter(this' new                            // QueryTermScorer(query));                  highlighter.MaxDocCharsToAnalyze = (30);                    highlighter.GetBestFragment(tokenStream' texts[0]);                  assertTrue("Setting MaxDocBytesToAnalyze should have prevented "                      + "us from finding matches for this record: " + numHighlights + " found"'                      numHighlights == 0);              });
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestMaxSizeHighlightTruncates,The following statement contains a magic number: TestHighlightRunner helper = new TestHighlightRunner((instance) =>              {                  String goodWord = "goodtoken";                  CharacterRunAutomaton stopWords = new CharacterRunAutomaton(BasicAutomata.MakeString("stoppedtoken"));                  // we disable MockTokenizer checks because we will forcefully limit the                   // tokenstream and call end() before incrementToken() returns false.                  MockAnalyzer analyzer = new MockAnalyzer(Random' MockTokenizer.SIMPLE' true' stopWords);                  analyzer.EnableChecks = (false);                  TermQuery query = new TermQuery(new Term("data"' goodWord));                    String match;                  StringBuilder sb = new StringBuilder();                  sb.append(goodWord);                  for (int i = 0; i < 10000; i++)                  {                      sb.append(" ");                      // only one stopword                      sb.append("stoppedtoken");                  }                  SimpleHTMLFormatter fm = new SimpleHTMLFormatter();                  Highlighter hg = instance.GetHighlighter(query' "data"' fm);// new Highlighter(fm'                                                                              // new                                                                              // QueryTermScorer(query));                  hg.TextFragmenter = (new NullFragmenter());                  hg.MaxDocCharsToAnalyze = (100);                  match = hg.GetBestFragment(analyzer' "data"' sb.toString());                  assertTrue("Matched text should be no more than 100 chars in length "' match.Length < hg                      .MaxDocCharsToAnalyze);                    // add another tokenized word to the overrall length - but set way                  // beyond                  // the length of text under consideration (after a large slug of stop                  // words                  // + whitespace)                  sb.append(" ");                  sb.append(goodWord);                  match = hg.GetBestFragment(analyzer' "data"' sb.toString());                  assertTrue("Matched text should be no more than 100 chars in length "' match.Length < hg                      .MaxDocCharsToAnalyze);              });
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestMaxSizeHighlightTruncates,The following statement contains a magic number: TestHighlightRunner helper = new TestHighlightRunner((instance) =>              {                  String goodWord = "goodtoken";                  CharacterRunAutomaton stopWords = new CharacterRunAutomaton(BasicAutomata.MakeString("stoppedtoken"));                  // we disable MockTokenizer checks because we will forcefully limit the                   // tokenstream and call end() before incrementToken() returns false.                  MockAnalyzer analyzer = new MockAnalyzer(Random' MockTokenizer.SIMPLE' true' stopWords);                  analyzer.EnableChecks = (false);                  TermQuery query = new TermQuery(new Term("data"' goodWord));                    String match;                  StringBuilder sb = new StringBuilder();                  sb.append(goodWord);                  for (int i = 0; i < 10000; i++)                  {                      sb.append(" ");                      // only one stopword                      sb.append("stoppedtoken");                  }                  SimpleHTMLFormatter fm = new SimpleHTMLFormatter();                  Highlighter hg = instance.GetHighlighter(query' "data"' fm);// new Highlighter(fm'                                                                              // new                                                                              // QueryTermScorer(query));                  hg.TextFragmenter = (new NullFragmenter());                  hg.MaxDocCharsToAnalyze = (100);                  match = hg.GetBestFragment(analyzer' "data"' sb.toString());                  assertTrue("Matched text should be no more than 100 chars in length "' match.Length < hg                      .MaxDocCharsToAnalyze);                    // add another tokenized word to the overrall length - but set way                  // beyond                  // the length of text under consideration (after a large slug of stop                  // words                  // + whitespace)                  sb.append(" ");                  sb.append(goodWord);                  match = hg.GetBestFragment(analyzer' "data"' sb.toString());                  assertTrue("Matched text should be no more than 100 chars in length "' match.Length < hg                      .MaxDocCharsToAnalyze);              });
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestMaxSizeEndHighlight,The following statement contains a magic number: TestHighlightRunner helper = new TestHighlightRunner((instance) =>              {                  CharacterRunAutomaton stopWords = new CharacterRunAutomaton(new RegExp("i[nt]").ToAutomaton());                  TermQuery query = new TermQuery(new Term("text"' "searchterm"));                    String text = "this is a text with searchterm in it";                  SimpleHTMLFormatter fm = new SimpleHTMLFormatter();                  Highlighter hg = instance.GetHighlighter(query' "text"' fm);                  hg.TextFragmenter = (new NullFragmenter());                  hg.MaxDocCharsToAnalyze = (36);                  String match = hg.GetBestFragment(new MockAnalyzer(Random' MockTokenizer.SIMPLE' true' stopWords)' "text"' text);                  assertTrue(                      "Matched text should contain remainder of text after highlighted query "'                      match.EndsWith("in it"' StringComparison.Ordinal));              });
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestUnRewrittenQuery,The following statement contains a magic number: TestHighlightRunner helper = new TestHighlightRunner((instance) =>              {                  numHighlights = 0;                  // test to show how rewritten query can still be used                  searcher = NewSearcher(reader);                  Analyzer analyzer = new MockAnalyzer(Random' MockTokenizer.SIMPLE' true' MockTokenFilter.ENGLISH_STOPSET);                    BooleanQuery query = new BooleanQuery();                  query.Add(new WildcardQuery(new Term(FIELD_NAME' "jf?"))' Occur.SHOULD);                  query.Add(new WildcardQuery(new Term(FIELD_NAME' "kenned*"))' Occur.SHOULD);                    if (VERBOSE) Console.WriteLine("Searching with primitive query");                  // forget to set this and...                  // query=query.rewrite(reader);                  TopDocs hits = searcher.Search(query' null' 1000);                    // create an instance of the highlighter with the tags used to surround                  // highlighted text                  // QueryHighlightExtractor highlighter = new                  // QueryHighlightExtractor(this'                  // query' new StandardAnalyzer(TEST_VERSION));                    int maxNumFragmentsRequired = 3;                    for (int i = 0; i < hits.TotalHits; i++)                  {                      String text = searcher.Doc(hits.ScoreDocs[i].Doc).Get(FIELD_NAME);                      TokenStream tokenStream = analyzer.GetTokenStream(FIELD_NAME' text);                      Highlighter highlighter = instance.GetHighlighter(query' FIELD_NAME' this' false);                        highlighter.TextFragmenter = (new SimpleFragmenter(40));                        String highlightedText = highlighter.GetBestFragments(tokenStream' text'                          maxNumFragmentsRequired' "...");                        if (VERBOSE) Console.WriteLine(highlightedText);                  }                  // We expect to have zero highlights if the query is multi-terms and is                  // not                  // rewritten!                  assertTrue("Failed to find correct number of highlights " + numHighlights + " found"'                      numHighlights == 0);              });
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestUnRewrittenQuery,The following statement contains a magic number: TestHighlightRunner helper = new TestHighlightRunner((instance) =>              {                  numHighlights = 0;                  // test to show how rewritten query can still be used                  searcher = NewSearcher(reader);                  Analyzer analyzer = new MockAnalyzer(Random' MockTokenizer.SIMPLE' true' MockTokenFilter.ENGLISH_STOPSET);                    BooleanQuery query = new BooleanQuery();                  query.Add(new WildcardQuery(new Term(FIELD_NAME' "jf?"))' Occur.SHOULD);                  query.Add(new WildcardQuery(new Term(FIELD_NAME' "kenned*"))' Occur.SHOULD);                    if (VERBOSE) Console.WriteLine("Searching with primitive query");                  // forget to set this and...                  // query=query.rewrite(reader);                  TopDocs hits = searcher.Search(query' null' 1000);                    // create an instance of the highlighter with the tags used to surround                  // highlighted text                  // QueryHighlightExtractor highlighter = new                  // QueryHighlightExtractor(this'                  // query' new StandardAnalyzer(TEST_VERSION));                    int maxNumFragmentsRequired = 3;                    for (int i = 0; i < hits.TotalHits; i++)                  {                      String text = searcher.Doc(hits.ScoreDocs[i].Doc).Get(FIELD_NAME);                      TokenStream tokenStream = analyzer.GetTokenStream(FIELD_NAME' text);                      Highlighter highlighter = instance.GetHighlighter(query' FIELD_NAME' this' false);                        highlighter.TextFragmenter = (new SimpleFragmenter(40));                        String highlightedText = highlighter.GetBestFragments(tokenStream' text'                          maxNumFragmentsRequired' "...");                        if (VERBOSE) Console.WriteLine(highlightedText);                  }                  // We expect to have zero highlights if the query is multi-terms and is                  // not                  // rewritten!                  assertTrue("Failed to find correct number of highlights " + numHighlights + " found"'                      numHighlights == 0);              });
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestUnRewrittenQuery,The following statement contains a magic number: TestHighlightRunner helper = new TestHighlightRunner((instance) =>              {                  numHighlights = 0;                  // test to show how rewritten query can still be used                  searcher = NewSearcher(reader);                  Analyzer analyzer = new MockAnalyzer(Random' MockTokenizer.SIMPLE' true' MockTokenFilter.ENGLISH_STOPSET);                    BooleanQuery query = new BooleanQuery();                  query.Add(new WildcardQuery(new Term(FIELD_NAME' "jf?"))' Occur.SHOULD);                  query.Add(new WildcardQuery(new Term(FIELD_NAME' "kenned*"))' Occur.SHOULD);                    if (VERBOSE) Console.WriteLine("Searching with primitive query");                  // forget to set this and...                  // query=query.rewrite(reader);                  TopDocs hits = searcher.Search(query' null' 1000);                    // create an instance of the highlighter with the tags used to surround                  // highlighted text                  // QueryHighlightExtractor highlighter = new                  // QueryHighlightExtractor(this'                  // query' new StandardAnalyzer(TEST_VERSION));                    int maxNumFragmentsRequired = 3;                    for (int i = 0; i < hits.TotalHits; i++)                  {                      String text = searcher.Doc(hits.ScoreDocs[i].Doc).Get(FIELD_NAME);                      TokenStream tokenStream = analyzer.GetTokenStream(FIELD_NAME' text);                      Highlighter highlighter = instance.GetHighlighter(query' FIELD_NAME' this' false);                        highlighter.TextFragmenter = (new SimpleFragmenter(40));                        String highlightedText = highlighter.GetBestFragments(tokenStream' text'                          maxNumFragmentsRequired' "...");                        if (VERBOSE) Console.WriteLine(highlightedText);                  }                  // We expect to have zero highlights if the query is multi-terms and is                  // not                  // rewritten!                  assertTrue("Failed to find correct number of highlights " + numHighlights + " found"'                      numHighlights == 0);              });
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestEncoding,The following statement contains a magic number: highlighter.TextFragmenter = (new SimpleFragmenter(2000));
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestOverlapAnalyzer2,The following statement contains a magic number: TestHighlightRunner helper = new TestHighlightRunner((instance) =>              {                  String s = "Hi-Speed10 foo";                    Query query;                  Highlighter highlighter;                  String result;                    query = new TermQuery(new Term("text"' "foo"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2()' s' 3' "...");                  assertEquals("Hi-Speed10 <B>foo</B>"' result);                    query = new TermQuery(new Term("text"' "10"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2()' s' 3' "...");                  assertEquals("Hi-Speed<B>10</B> foo"' result);                    query = new TermQuery(new Term("text"' "hi"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2()' s' 3' "...");                  assertEquals("<B>Hi</B>-Speed10 foo"' result);                    query = new TermQuery(new Term("text"' "speed"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2()' s' 3' "...");                  assertEquals("Hi-<B>Speed</B>10 foo"' result);                    query = new TermQuery(new Term("text"' "hispeed"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2()' s' 3' "...");                  assertEquals("<B>Hi-Speed</B>10 foo"' result);                    BooleanQuery booleanQuery = new BooleanQuery();                  booleanQuery.Add(new TermQuery(new Term("text"' "hi"))' Occur.SHOULD);                  booleanQuery.Add(new TermQuery(new Term("text"' "speed"))' Occur.SHOULD);                    query = booleanQuery;                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2()' s' 3' "...");                  assertEquals("<B>Hi-Speed</B>10 foo"' result);                    // ///////////////// same tests' just put the bigger overlapping token                  // first                  query = new TermQuery(new Term("text"' "foo"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2a()' s' 3' "...");                  assertEquals("Hi-Speed10 <B>foo</B>"' result);                    query = new TermQuery(new Term("text"' "10"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2a()' s' 3' "...");                  assertEquals("Hi-Speed<B>10</B> foo"' result);                    query = new TermQuery(new Term("text"' "hi"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2a()' s' 3' "...");                  assertEquals("<B>Hi</B>-Speed10 foo"' result);                    query = new TermQuery(new Term("text"' "speed"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2a()' s' 3' "...");                  assertEquals("Hi-<B>Speed</B>10 foo"' result);                    query = new TermQuery(new Term("text"' "hispeed"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2a()' s' 3' "...");                  assertEquals("<B>Hi-Speed</B>10 foo"' result);                    query = booleanQuery;                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2a()' s' 3' "...");                  assertEquals("<B>Hi-Speed</B>10 foo"' result);              });
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestOverlapAnalyzer2,The following statement contains a magic number: TestHighlightRunner helper = new TestHighlightRunner((instance) =>              {                  String s = "Hi-Speed10 foo";                    Query query;                  Highlighter highlighter;                  String result;                    query = new TermQuery(new Term("text"' "foo"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2()' s' 3' "...");                  assertEquals("Hi-Speed10 <B>foo</B>"' result);                    query = new TermQuery(new Term("text"' "10"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2()' s' 3' "...");                  assertEquals("Hi-Speed<B>10</B> foo"' result);                    query = new TermQuery(new Term("text"' "hi"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2()' s' 3' "...");                  assertEquals("<B>Hi</B>-Speed10 foo"' result);                    query = new TermQuery(new Term("text"' "speed"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2()' s' 3' "...");                  assertEquals("Hi-<B>Speed</B>10 foo"' result);                    query = new TermQuery(new Term("text"' "hispeed"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2()' s' 3' "...");                  assertEquals("<B>Hi-Speed</B>10 foo"' result);                    BooleanQuery booleanQuery = new BooleanQuery();                  booleanQuery.Add(new TermQuery(new Term("text"' "hi"))' Occur.SHOULD);                  booleanQuery.Add(new TermQuery(new Term("text"' "speed"))' Occur.SHOULD);                    query = booleanQuery;                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2()' s' 3' "...");                  assertEquals("<B>Hi-Speed</B>10 foo"' result);                    // ///////////////// same tests' just put the bigger overlapping token                  // first                  query = new TermQuery(new Term("text"' "foo"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2a()' s' 3' "...");                  assertEquals("Hi-Speed10 <B>foo</B>"' result);                    query = new TermQuery(new Term("text"' "10"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2a()' s' 3' "...");                  assertEquals("Hi-Speed<B>10</B> foo"' result);                    query = new TermQuery(new Term("text"' "hi"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2a()' s' 3' "...");                  assertEquals("<B>Hi</B>-Speed10 foo"' result);                    query = new TermQuery(new Term("text"' "speed"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2a()' s' 3' "...");                  assertEquals("Hi-<B>Speed</B>10 foo"' result);                    query = new TermQuery(new Term("text"' "hispeed"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2a()' s' 3' "...");                  assertEquals("<B>Hi-Speed</B>10 foo"' result);                    query = booleanQuery;                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2a()' s' 3' "...");                  assertEquals("<B>Hi-Speed</B>10 foo"' result);              });
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestOverlapAnalyzer2,The following statement contains a magic number: TestHighlightRunner helper = new TestHighlightRunner((instance) =>              {                  String s = "Hi-Speed10 foo";                    Query query;                  Highlighter highlighter;                  String result;                    query = new TermQuery(new Term("text"' "foo"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2()' s' 3' "...");                  assertEquals("Hi-Speed10 <B>foo</B>"' result);                    query = new TermQuery(new Term("text"' "10"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2()' s' 3' "...");                  assertEquals("Hi-Speed<B>10</B> foo"' result);                    query = new TermQuery(new Term("text"' "hi"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2()' s' 3' "...");                  assertEquals("<B>Hi</B>-Speed10 foo"' result);                    query = new TermQuery(new Term("text"' "speed"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2()' s' 3' "...");                  assertEquals("Hi-<B>Speed</B>10 foo"' result);                    query = new TermQuery(new Term("text"' "hispeed"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2()' s' 3' "...");                  assertEquals("<B>Hi-Speed</B>10 foo"' result);                    BooleanQuery booleanQuery = new BooleanQuery();                  booleanQuery.Add(new TermQuery(new Term("text"' "hi"))' Occur.SHOULD);                  booleanQuery.Add(new TermQuery(new Term("text"' "speed"))' Occur.SHOULD);                    query = booleanQuery;                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2()' s' 3' "...");                  assertEquals("<B>Hi-Speed</B>10 foo"' result);                    // ///////////////// same tests' just put the bigger overlapping token                  // first                  query = new TermQuery(new Term("text"' "foo"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2a()' s' 3' "...");                  assertEquals("Hi-Speed10 <B>foo</B>"' result);                    query = new TermQuery(new Term("text"' "10"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2a()' s' 3' "...");                  assertEquals("Hi-Speed<B>10</B> foo"' result);                    query = new TermQuery(new Term("text"' "hi"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2a()' s' 3' "...");                  assertEquals("<B>Hi</B>-Speed10 foo"' result);                    query = new TermQuery(new Term("text"' "speed"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2a()' s' 3' "...");                  assertEquals("Hi-<B>Speed</B>10 foo"' result);                    query = new TermQuery(new Term("text"' "hispeed"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2a()' s' 3' "...");                  assertEquals("<B>Hi-Speed</B>10 foo"' result);                    query = booleanQuery;                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2a()' s' 3' "...");                  assertEquals("<B>Hi-Speed</B>10 foo"' result);              });
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestOverlapAnalyzer2,The following statement contains a magic number: TestHighlightRunner helper = new TestHighlightRunner((instance) =>              {                  String s = "Hi-Speed10 foo";                    Query query;                  Highlighter highlighter;                  String result;                    query = new TermQuery(new Term("text"' "foo"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2()' s' 3' "...");                  assertEquals("Hi-Speed10 <B>foo</B>"' result);                    query = new TermQuery(new Term("text"' "10"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2()' s' 3' "...");                  assertEquals("Hi-Speed<B>10</B> foo"' result);                    query = new TermQuery(new Term("text"' "hi"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2()' s' 3' "...");                  assertEquals("<B>Hi</B>-Speed10 foo"' result);                    query = new TermQuery(new Term("text"' "speed"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2()' s' 3' "...");                  assertEquals("Hi-<B>Speed</B>10 foo"' result);                    query = new TermQuery(new Term("text"' "hispeed"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2()' s' 3' "...");                  assertEquals("<B>Hi-Speed</B>10 foo"' result);                    BooleanQuery booleanQuery = new BooleanQuery();                  booleanQuery.Add(new TermQuery(new Term("text"' "hi"))' Occur.SHOULD);                  booleanQuery.Add(new TermQuery(new Term("text"' "speed"))' Occur.SHOULD);                    query = booleanQuery;                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2()' s' 3' "...");                  assertEquals("<B>Hi-Speed</B>10 foo"' result);                    // ///////////////// same tests' just put the bigger overlapping token                  // first                  query = new TermQuery(new Term("text"' "foo"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2a()' s' 3' "...");                  assertEquals("Hi-Speed10 <B>foo</B>"' result);                    query = new TermQuery(new Term("text"' "10"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2a()' s' 3' "...");                  assertEquals("Hi-Speed<B>10</B> foo"' result);                    query = new TermQuery(new Term("text"' "hi"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2a()' s' 3' "...");                  assertEquals("<B>Hi</B>-Speed10 foo"' result);                    query = new TermQuery(new Term("text"' "speed"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2a()' s' 3' "...");                  assertEquals("Hi-<B>Speed</B>10 foo"' result);                    query = new TermQuery(new Term("text"' "hispeed"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2a()' s' 3' "...");                  assertEquals("<B>Hi-Speed</B>10 foo"' result);                    query = booleanQuery;                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2a()' s' 3' "...");                  assertEquals("<B>Hi-Speed</B>10 foo"' result);              });
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestOverlapAnalyzer2,The following statement contains a magic number: TestHighlightRunner helper = new TestHighlightRunner((instance) =>              {                  String s = "Hi-Speed10 foo";                    Query query;                  Highlighter highlighter;                  String result;                    query = new TermQuery(new Term("text"' "foo"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2()' s' 3' "...");                  assertEquals("Hi-Speed10 <B>foo</B>"' result);                    query = new TermQuery(new Term("text"' "10"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2()' s' 3' "...");                  assertEquals("Hi-Speed<B>10</B> foo"' result);                    query = new TermQuery(new Term("text"' "hi"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2()' s' 3' "...");                  assertEquals("<B>Hi</B>-Speed10 foo"' result);                    query = new TermQuery(new Term("text"' "speed"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2()' s' 3' "...");                  assertEquals("Hi-<B>Speed</B>10 foo"' result);                    query = new TermQuery(new Term("text"' "hispeed"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2()' s' 3' "...");                  assertEquals("<B>Hi-Speed</B>10 foo"' result);                    BooleanQuery booleanQuery = new BooleanQuery();                  booleanQuery.Add(new TermQuery(new Term("text"' "hi"))' Occur.SHOULD);                  booleanQuery.Add(new TermQuery(new Term("text"' "speed"))' Occur.SHOULD);                    query = booleanQuery;                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2()' s' 3' "...");                  assertEquals("<B>Hi-Speed</B>10 foo"' result);                    // ///////////////// same tests' just put the bigger overlapping token                  // first                  query = new TermQuery(new Term("text"' "foo"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2a()' s' 3' "...");                  assertEquals("Hi-Speed10 <B>foo</B>"' result);                    query = new TermQuery(new Term("text"' "10"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2a()' s' 3' "...");                  assertEquals("Hi-Speed<B>10</B> foo"' result);                    query = new TermQuery(new Term("text"' "hi"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2a()' s' 3' "...");                  assertEquals("<B>Hi</B>-Speed10 foo"' result);                    query = new TermQuery(new Term("text"' "speed"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2a()' s' 3' "...");                  assertEquals("Hi-<B>Speed</B>10 foo"' result);                    query = new TermQuery(new Term("text"' "hispeed"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2a()' s' 3' "...");                  assertEquals("<B>Hi-Speed</B>10 foo"' result);                    query = booleanQuery;                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2a()' s' 3' "...");                  assertEquals("<B>Hi-Speed</B>10 foo"' result);              });
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestOverlapAnalyzer2,The following statement contains a magic number: TestHighlightRunner helper = new TestHighlightRunner((instance) =>              {                  String s = "Hi-Speed10 foo";                    Query query;                  Highlighter highlighter;                  String result;                    query = new TermQuery(new Term("text"' "foo"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2()' s' 3' "...");                  assertEquals("Hi-Speed10 <B>foo</B>"' result);                    query = new TermQuery(new Term("text"' "10"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2()' s' 3' "...");                  assertEquals("Hi-Speed<B>10</B> foo"' result);                    query = new TermQuery(new Term("text"' "hi"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2()' s' 3' "...");                  assertEquals("<B>Hi</B>-Speed10 foo"' result);                    query = new TermQuery(new Term("text"' "speed"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2()' s' 3' "...");                  assertEquals("Hi-<B>Speed</B>10 foo"' result);                    query = new TermQuery(new Term("text"' "hispeed"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2()' s' 3' "...");                  assertEquals("<B>Hi-Speed</B>10 foo"' result);                    BooleanQuery booleanQuery = new BooleanQuery();                  booleanQuery.Add(new TermQuery(new Term("text"' "hi"))' Occur.SHOULD);                  booleanQuery.Add(new TermQuery(new Term("text"' "speed"))' Occur.SHOULD);                    query = booleanQuery;                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2()' s' 3' "...");                  assertEquals("<B>Hi-Speed</B>10 foo"' result);                    // ///////////////// same tests' just put the bigger overlapping token                  // first                  query = new TermQuery(new Term("text"' "foo"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2a()' s' 3' "...");                  assertEquals("Hi-Speed10 <B>foo</B>"' result);                    query = new TermQuery(new Term("text"' "10"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2a()' s' 3' "...");                  assertEquals("Hi-Speed<B>10</B> foo"' result);                    query = new TermQuery(new Term("text"' "hi"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2a()' s' 3' "...");                  assertEquals("<B>Hi</B>-Speed10 foo"' result);                    query = new TermQuery(new Term("text"' "speed"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2a()' s' 3' "...");                  assertEquals("Hi-<B>Speed</B>10 foo"' result);                    query = new TermQuery(new Term("text"' "hispeed"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2a()' s' 3' "...");                  assertEquals("<B>Hi-Speed</B>10 foo"' result);                    query = booleanQuery;                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2a()' s' 3' "...");                  assertEquals("<B>Hi-Speed</B>10 foo"' result);              });
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestOverlapAnalyzer2,The following statement contains a magic number: TestHighlightRunner helper = new TestHighlightRunner((instance) =>              {                  String s = "Hi-Speed10 foo";                    Query query;                  Highlighter highlighter;                  String result;                    query = new TermQuery(new Term("text"' "foo"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2()' s' 3' "...");                  assertEquals("Hi-Speed10 <B>foo</B>"' result);                    query = new TermQuery(new Term("text"' "10"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2()' s' 3' "...");                  assertEquals("Hi-Speed<B>10</B> foo"' result);                    query = new TermQuery(new Term("text"' "hi"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2()' s' 3' "...");                  assertEquals("<B>Hi</B>-Speed10 foo"' result);                    query = new TermQuery(new Term("text"' "speed"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2()' s' 3' "...");                  assertEquals("Hi-<B>Speed</B>10 foo"' result);                    query = new TermQuery(new Term("text"' "hispeed"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2()' s' 3' "...");                  assertEquals("<B>Hi-Speed</B>10 foo"' result);                    BooleanQuery booleanQuery = new BooleanQuery();                  booleanQuery.Add(new TermQuery(new Term("text"' "hi"))' Occur.SHOULD);                  booleanQuery.Add(new TermQuery(new Term("text"' "speed"))' Occur.SHOULD);                    query = booleanQuery;                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2()' s' 3' "...");                  assertEquals("<B>Hi-Speed</B>10 foo"' result);                    // ///////////////// same tests' just put the bigger overlapping token                  // first                  query = new TermQuery(new Term("text"' "foo"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2a()' s' 3' "...");                  assertEquals("Hi-Speed10 <B>foo</B>"' result);                    query = new TermQuery(new Term("text"' "10"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2a()' s' 3' "...");                  assertEquals("Hi-Speed<B>10</B> foo"' result);                    query = new TermQuery(new Term("text"' "hi"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2a()' s' 3' "...");                  assertEquals("<B>Hi</B>-Speed10 foo"' result);                    query = new TermQuery(new Term("text"' "speed"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2a()' s' 3' "...");                  assertEquals("Hi-<B>Speed</B>10 foo"' result);                    query = new TermQuery(new Term("text"' "hispeed"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2a()' s' 3' "...");                  assertEquals("<B>Hi-Speed</B>10 foo"' result);                    query = booleanQuery;                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2a()' s' 3' "...");                  assertEquals("<B>Hi-Speed</B>10 foo"' result);              });
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestOverlapAnalyzer2,The following statement contains a magic number: TestHighlightRunner helper = new TestHighlightRunner((instance) =>              {                  String s = "Hi-Speed10 foo";                    Query query;                  Highlighter highlighter;                  String result;                    query = new TermQuery(new Term("text"' "foo"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2()' s' 3' "...");                  assertEquals("Hi-Speed10 <B>foo</B>"' result);                    query = new TermQuery(new Term("text"' "10"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2()' s' 3' "...");                  assertEquals("Hi-Speed<B>10</B> foo"' result);                    query = new TermQuery(new Term("text"' "hi"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2()' s' 3' "...");                  assertEquals("<B>Hi</B>-Speed10 foo"' result);                    query = new TermQuery(new Term("text"' "speed"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2()' s' 3' "...");                  assertEquals("Hi-<B>Speed</B>10 foo"' result);                    query = new TermQuery(new Term("text"' "hispeed"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2()' s' 3' "...");                  assertEquals("<B>Hi-Speed</B>10 foo"' result);                    BooleanQuery booleanQuery = new BooleanQuery();                  booleanQuery.Add(new TermQuery(new Term("text"' "hi"))' Occur.SHOULD);                  booleanQuery.Add(new TermQuery(new Term("text"' "speed"))' Occur.SHOULD);                    query = booleanQuery;                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2()' s' 3' "...");                  assertEquals("<B>Hi-Speed</B>10 foo"' result);                    // ///////////////// same tests' just put the bigger overlapping token                  // first                  query = new TermQuery(new Term("text"' "foo"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2a()' s' 3' "...");                  assertEquals("Hi-Speed10 <B>foo</B>"' result);                    query = new TermQuery(new Term("text"' "10"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2a()' s' 3' "...");                  assertEquals("Hi-Speed<B>10</B> foo"' result);                    query = new TermQuery(new Term("text"' "hi"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2a()' s' 3' "...");                  assertEquals("<B>Hi</B>-Speed10 foo"' result);                    query = new TermQuery(new Term("text"' "speed"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2a()' s' 3' "...");                  assertEquals("Hi-<B>Speed</B>10 foo"' result);                    query = new TermQuery(new Term("text"' "hispeed"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2a()' s' 3' "...");                  assertEquals("<B>Hi-Speed</B>10 foo"' result);                    query = booleanQuery;                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2a()' s' 3' "...");                  assertEquals("<B>Hi-Speed</B>10 foo"' result);              });
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestOverlapAnalyzer2,The following statement contains a magic number: TestHighlightRunner helper = new TestHighlightRunner((instance) =>              {                  String s = "Hi-Speed10 foo";                    Query query;                  Highlighter highlighter;                  String result;                    query = new TermQuery(new Term("text"' "foo"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2()' s' 3' "...");                  assertEquals("Hi-Speed10 <B>foo</B>"' result);                    query = new TermQuery(new Term("text"' "10"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2()' s' 3' "...");                  assertEquals("Hi-Speed<B>10</B> foo"' result);                    query = new TermQuery(new Term("text"' "hi"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2()' s' 3' "...");                  assertEquals("<B>Hi</B>-Speed10 foo"' result);                    query = new TermQuery(new Term("text"' "speed"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2()' s' 3' "...");                  assertEquals("Hi-<B>Speed</B>10 foo"' result);                    query = new TermQuery(new Term("text"' "hispeed"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2()' s' 3' "...");                  assertEquals("<B>Hi-Speed</B>10 foo"' result);                    BooleanQuery booleanQuery = new BooleanQuery();                  booleanQuery.Add(new TermQuery(new Term("text"' "hi"))' Occur.SHOULD);                  booleanQuery.Add(new TermQuery(new Term("text"' "speed"))' Occur.SHOULD);                    query = booleanQuery;                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2()' s' 3' "...");                  assertEquals("<B>Hi-Speed</B>10 foo"' result);                    // ///////////////// same tests' just put the bigger overlapping token                  // first                  query = new TermQuery(new Term("text"' "foo"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2a()' s' 3' "...");                  assertEquals("Hi-Speed10 <B>foo</B>"' result);                    query = new TermQuery(new Term("text"' "10"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2a()' s' 3' "...");                  assertEquals("Hi-Speed<B>10</B> foo"' result);                    query = new TermQuery(new Term("text"' "hi"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2a()' s' 3' "...");                  assertEquals("<B>Hi</B>-Speed10 foo"' result);                    query = new TermQuery(new Term("text"' "speed"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2a()' s' 3' "...");                  assertEquals("Hi-<B>Speed</B>10 foo"' result);                    query = new TermQuery(new Term("text"' "hispeed"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2a()' s' 3' "...");                  assertEquals("<B>Hi-Speed</B>10 foo"' result);                    query = booleanQuery;                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2a()' s' 3' "...");                  assertEquals("<B>Hi-Speed</B>10 foo"' result);              });
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestOverlapAnalyzer2,The following statement contains a magic number: TestHighlightRunner helper = new TestHighlightRunner((instance) =>              {                  String s = "Hi-Speed10 foo";                    Query query;                  Highlighter highlighter;                  String result;                    query = new TermQuery(new Term("text"' "foo"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2()' s' 3' "...");                  assertEquals("Hi-Speed10 <B>foo</B>"' result);                    query = new TermQuery(new Term("text"' "10"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2()' s' 3' "...");                  assertEquals("Hi-Speed<B>10</B> foo"' result);                    query = new TermQuery(new Term("text"' "hi"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2()' s' 3' "...");                  assertEquals("<B>Hi</B>-Speed10 foo"' result);                    query = new TermQuery(new Term("text"' "speed"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2()' s' 3' "...");                  assertEquals("Hi-<B>Speed</B>10 foo"' result);                    query = new TermQuery(new Term("text"' "hispeed"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2()' s' 3' "...");                  assertEquals("<B>Hi-Speed</B>10 foo"' result);                    BooleanQuery booleanQuery = new BooleanQuery();                  booleanQuery.Add(new TermQuery(new Term("text"' "hi"))' Occur.SHOULD);                  booleanQuery.Add(new TermQuery(new Term("text"' "speed"))' Occur.SHOULD);                    query = booleanQuery;                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2()' s' 3' "...");                  assertEquals("<B>Hi-Speed</B>10 foo"' result);                    // ///////////////// same tests' just put the bigger overlapping token                  // first                  query = new TermQuery(new Term("text"' "foo"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2a()' s' 3' "...");                  assertEquals("Hi-Speed10 <B>foo</B>"' result);                    query = new TermQuery(new Term("text"' "10"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2a()' s' 3' "...");                  assertEquals("Hi-Speed<B>10</B> foo"' result);                    query = new TermQuery(new Term("text"' "hi"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2a()' s' 3' "...");                  assertEquals("<B>Hi</B>-Speed10 foo"' result);                    query = new TermQuery(new Term("text"' "speed"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2a()' s' 3' "...");                  assertEquals("Hi-<B>Speed</B>10 foo"' result);                    query = new TermQuery(new Term("text"' "hispeed"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2a()' s' 3' "...");                  assertEquals("<B>Hi-Speed</B>10 foo"' result);                    query = booleanQuery;                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2a()' s' 3' "...");                  assertEquals("<B>Hi-Speed</B>10 foo"' result);              });
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestOverlapAnalyzer2,The following statement contains a magic number: TestHighlightRunner helper = new TestHighlightRunner((instance) =>              {                  String s = "Hi-Speed10 foo";                    Query query;                  Highlighter highlighter;                  String result;                    query = new TermQuery(new Term("text"' "foo"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2()' s' 3' "...");                  assertEquals("Hi-Speed10 <B>foo</B>"' result);                    query = new TermQuery(new Term("text"' "10"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2()' s' 3' "...");                  assertEquals("Hi-Speed<B>10</B> foo"' result);                    query = new TermQuery(new Term("text"' "hi"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2()' s' 3' "...");                  assertEquals("<B>Hi</B>-Speed10 foo"' result);                    query = new TermQuery(new Term("text"' "speed"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2()' s' 3' "...");                  assertEquals("Hi-<B>Speed</B>10 foo"' result);                    query = new TermQuery(new Term("text"' "hispeed"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2()' s' 3' "...");                  assertEquals("<B>Hi-Speed</B>10 foo"' result);                    BooleanQuery booleanQuery = new BooleanQuery();                  booleanQuery.Add(new TermQuery(new Term("text"' "hi"))' Occur.SHOULD);                  booleanQuery.Add(new TermQuery(new Term("text"' "speed"))' Occur.SHOULD);                    query = booleanQuery;                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2()' s' 3' "...");                  assertEquals("<B>Hi-Speed</B>10 foo"' result);                    // ///////////////// same tests' just put the bigger overlapping token                  // first                  query = new TermQuery(new Term("text"' "foo"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2a()' s' 3' "...");                  assertEquals("Hi-Speed10 <B>foo</B>"' result);                    query = new TermQuery(new Term("text"' "10"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2a()' s' 3' "...");                  assertEquals("Hi-Speed<B>10</B> foo"' result);                    query = new TermQuery(new Term("text"' "hi"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2a()' s' 3' "...");                  assertEquals("<B>Hi</B>-Speed10 foo"' result);                    query = new TermQuery(new Term("text"' "speed"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2a()' s' 3' "...");                  assertEquals("Hi-<B>Speed</B>10 foo"' result);                    query = new TermQuery(new Term("text"' "hispeed"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2a()' s' 3' "...");                  assertEquals("<B>Hi-Speed</B>10 foo"' result);                    query = booleanQuery;                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2a()' s' 3' "...");                  assertEquals("<B>Hi-Speed</B>10 foo"' result);              });
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestOverlapAnalyzer2,The following statement contains a magic number: TestHighlightRunner helper = new TestHighlightRunner((instance) =>              {                  String s = "Hi-Speed10 foo";                    Query query;                  Highlighter highlighter;                  String result;                    query = new TermQuery(new Term("text"' "foo"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2()' s' 3' "...");                  assertEquals("Hi-Speed10 <B>foo</B>"' result);                    query = new TermQuery(new Term("text"' "10"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2()' s' 3' "...");                  assertEquals("Hi-Speed<B>10</B> foo"' result);                    query = new TermQuery(new Term("text"' "hi"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2()' s' 3' "...");                  assertEquals("<B>Hi</B>-Speed10 foo"' result);                    query = new TermQuery(new Term("text"' "speed"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2()' s' 3' "...");                  assertEquals("Hi-<B>Speed</B>10 foo"' result);                    query = new TermQuery(new Term("text"' "hispeed"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2()' s' 3' "...");                  assertEquals("<B>Hi-Speed</B>10 foo"' result);                    BooleanQuery booleanQuery = new BooleanQuery();                  booleanQuery.Add(new TermQuery(new Term("text"' "hi"))' Occur.SHOULD);                  booleanQuery.Add(new TermQuery(new Term("text"' "speed"))' Occur.SHOULD);                    query = booleanQuery;                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2()' s' 3' "...");                  assertEquals("<B>Hi-Speed</B>10 foo"' result);                    // ///////////////// same tests' just put the bigger overlapping token                  // first                  query = new TermQuery(new Term("text"' "foo"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2a()' s' 3' "...");                  assertEquals("Hi-Speed10 <B>foo</B>"' result);                    query = new TermQuery(new Term("text"' "10"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2a()' s' 3' "...");                  assertEquals("Hi-Speed<B>10</B> foo"' result);                    query = new TermQuery(new Term("text"' "hi"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2a()' s' 3' "...");                  assertEquals("<B>Hi</B>-Speed10 foo"' result);                    query = new TermQuery(new Term("text"' "speed"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2a()' s' 3' "...");                  assertEquals("Hi-<B>Speed</B>10 foo"' result);                    query = new TermQuery(new Term("text"' "hispeed"));                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2a()' s' 3' "...");                  assertEquals("<B>Hi-Speed</B>10 foo"' result);                    query = booleanQuery;                  highlighter = instance.GetHighlighter(query' "text"' this);                  result = highlighter.GetBestFragments(getTS2a()' s' 3' "...");                  assertEquals("<B>Hi-Speed</B>10 foo"' result);              });
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,searchIndex,The following statement contains a magic number: TopDocs hits = searcher.Search(query' null' 10);
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,doSearching,The following statement contains a magic number: hits = searcher.Search(query' null' 1000);
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,assertExpectedHighlightCount,The following statement contains a magic number: highlighter.TextFragmenter = (new SimpleFragmenter(40));
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,SetUp,The following statement contains a magic number: doc.Add(new Int32Field(NUMERIC_FIELD_NAME' 3' Field.Store.NO));
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,SetUp,The following statement contains a magic number: doc.Add(new StoredField(NUMERIC_FIELD_NAME' 3));
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,SetUp,The following statement contains a magic number: doc.Add(new Int32Field(NUMERIC_FIELD_NAME' 5' Field.Store.NO));
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,SetUp,The following statement contains a magic number: doc.Add(new StoredField(NUMERIC_FIELD_NAME' 5));
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,SetUp,The following statement contains a magic number: doc.Add(new Int32Field(NUMERIC_FIELD_NAME' 7' Field.Store.NO));
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,SetUp,The following statement contains a magic number: doc.Add(new StoredField(NUMERIC_FIELD_NAME' 7));
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestGradientHighlighterHexToInt,The following statement contains a magic number: int result = GradientFormatter.HexToInt32("#CFFFFF".Substring(1' 3 - 1));
Magic Number,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestGradientHighlighterHexToInt,The following statement contains a magic number: assertEquals(207' result);
Magic Number,Lucene.Net.Search.Highlight,TestHighlightUnknowQueryAnonymousHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,Rewrite,The following statement contains a magic number: CommonTermsQuery query = new CommonTermsQuery(Occur.MUST' Occur.SHOULD' 3);
Magic Number,Lucene.Net.Search.Highlight,TestHighlightUnknowQueryAnonymousHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,GetHashCode,The following statement contains a magic number: return 31 * base.GetHashCode();
Magic Number,Lucene.Net.Search.Highlight,TS2TokenStreamAnonymousHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TS2TokenStreamAnonymousHelper,The following statement contains a magic number: t = createToken("hi"' 0' 2);
Magic Number,Lucene.Net.Search.Highlight,TS2TokenStreamAnonymousHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TS2TokenStreamAnonymousHelper,The following statement contains a magic number: t = createToken("hispeed"' 0' 8);
Magic Number,Lucene.Net.Search.Highlight,TS2TokenStreamAnonymousHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TS2TokenStreamAnonymousHelper,The following statement contains a magic number: t = createToken("speed"' 3' 8);
Magic Number,Lucene.Net.Search.Highlight,TS2TokenStreamAnonymousHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TS2TokenStreamAnonymousHelper,The following statement contains a magic number: t = createToken("speed"' 3' 8);
Magic Number,Lucene.Net.Search.Highlight,TS2TokenStreamAnonymousHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TS2TokenStreamAnonymousHelper,The following statement contains a magic number: t = createToken("10"' 8' 10);
Magic Number,Lucene.Net.Search.Highlight,TS2TokenStreamAnonymousHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TS2TokenStreamAnonymousHelper,The following statement contains a magic number: t = createToken("10"' 8' 10);
Magic Number,Lucene.Net.Search.Highlight,TS2TokenStreamAnonymousHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TS2TokenStreamAnonymousHelper,The following statement contains a magic number: t = createToken("foo"' 11' 14);
Magic Number,Lucene.Net.Search.Highlight,TS2TokenStreamAnonymousHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TS2TokenStreamAnonymousHelper,The following statement contains a magic number: t = createToken("foo"' 11' 14);
Magic Number,Lucene.Net.Search.Highlight,TS2aTokenStreamAnonymousHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TS2aTokenStreamAnonymousHelper,The following statement contains a magic number: t = createToken("hispeed"' 0' 8);
Magic Number,Lucene.Net.Search.Highlight,TS2aTokenStreamAnonymousHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TS2aTokenStreamAnonymousHelper,The following statement contains a magic number: t = createToken("hi"' 0' 2);
Magic Number,Lucene.Net.Search.Highlight,TS2aTokenStreamAnonymousHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TS2aTokenStreamAnonymousHelper,The following statement contains a magic number: t = createToken("speed"' 3' 8);
Magic Number,Lucene.Net.Search.Highlight,TS2aTokenStreamAnonymousHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TS2aTokenStreamAnonymousHelper,The following statement contains a magic number: t = createToken("speed"' 3' 8);
Magic Number,Lucene.Net.Search.Highlight,TS2aTokenStreamAnonymousHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TS2aTokenStreamAnonymousHelper,The following statement contains a magic number: t = createToken("10"' 8' 10);
Magic Number,Lucene.Net.Search.Highlight,TS2aTokenStreamAnonymousHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TS2aTokenStreamAnonymousHelper,The following statement contains a magic number: t = createToken("10"' 8' 10);
Magic Number,Lucene.Net.Search.Highlight,TS2aTokenStreamAnonymousHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TS2aTokenStreamAnonymousHelper,The following statement contains a magic number: t = createToken("foo"' 11' 14);
Magic Number,Lucene.Net.Search.Highlight,TS2aTokenStreamAnonymousHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TS2aTokenStreamAnonymousHelper,The following statement contains a magic number: t = createToken("foo"' 11' 14);
Magic Number,Lucene.Net.Search.Highlight,TestHighlightRunner,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,DoStandardHighlights,The following statement contains a magic number: int maxNumFragmentsRequired = 2;
Magic Number,Lucene.Net.Search.Highlight,OffsetLimitTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\OffsetLimitTokenFilterTest.cs,TestFilter,The following statement contains a magic number: OffsetLimitTokenFilter filter = new OffsetLimitTokenFilter(stream' 10);
Magic Number,Lucene.Net.Search.Highlight,OffsetLimitTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\OffsetLimitTokenFilterTest.cs,TestFilter,The following statement contains a magic number: filter = new OffsetLimitTokenFilter(stream' 12);
Magic Number,Lucene.Net.Search.Highlight,OffsetLimitTokenFilterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\OffsetLimitTokenFilterTest.cs,TestFilter,The following statement contains a magic number: filter = new OffsetLimitTokenFilter(stream' 30);
Magic Number,Lucene.Net.Search.Highlight,AnalyzerAnonymousHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\OffsetLimitTokenFilterTest.cs,CreateComponents,The following statement contains a magic number: return new TokenStreamComponents(tokenizer' new OffsetLimitTokenFilter(tokenizer' 10));
Magic Number,Lucene.Net.Search.Highlight,TokenSourcesTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\TokenSourcesTest.cs,TestPayloads,The following statement contains a magic number: i < 2
Magic Number,Lucene.Net.Search.Highlight,OverlappingTokenStream,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\TokenSourcesTest.cs,Reset,The following statement contains a magic number: this.tokens = new Token[] {                  new Token(new char[] {'t'' 'h'' 'e'}' 0' 3' 0' 3)'                  new Token(new char[] {'{'' 'f'' 'o'' 'x'' '}'}' 0' 5' 0' 7)'                  new Token(new char[] {'f'' 'o'' 'x'}' 0' 3' 4' 7)'                  new Token(new char[] {'d'' 'i'' 'd'}' 0' 3' 8' 11)'                  new Token(new char[] {'n'' 'o'' 't'}' 0' 3' 12' 15)'                  new Token(new char[] {'j'' 'u'' 'm'' 'p'}' 0' 4' 16' 20)};
Magic Number,Lucene.Net.Search.Highlight,OverlappingTokenStream,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\TokenSourcesTest.cs,Reset,The following statement contains a magic number: this.tokens = new Token[] {                  new Token(new char[] {'t'' 'h'' 'e'}' 0' 3' 0' 3)'                  new Token(new char[] {'{'' 'f'' 'o'' 'x'' '}'}' 0' 5' 0' 7)'                  new Token(new char[] {'f'' 'o'' 'x'}' 0' 3' 4' 7)'                  new Token(new char[] {'d'' 'i'' 'd'}' 0' 3' 8' 11)'                  new Token(new char[] {'n'' 'o'' 't'}' 0' 3' 12' 15)'                  new Token(new char[] {'j'' 'u'' 'm'' 'p'}' 0' 4' 16' 20)};
Magic Number,Lucene.Net.Search.Highlight,OverlappingTokenStream,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\TokenSourcesTest.cs,Reset,The following statement contains a magic number: this.tokens = new Token[] {                  new Token(new char[] {'t'' 'h'' 'e'}' 0' 3' 0' 3)'                  new Token(new char[] {'{'' 'f'' 'o'' 'x'' '}'}' 0' 5' 0' 7)'                  new Token(new char[] {'f'' 'o'' 'x'}' 0' 3' 4' 7)'                  new Token(new char[] {'d'' 'i'' 'd'}' 0' 3' 8' 11)'                  new Token(new char[] {'n'' 'o'' 't'}' 0' 3' 12' 15)'                  new Token(new char[] {'j'' 'u'' 'm'' 'p'}' 0' 4' 16' 20)};
Magic Number,Lucene.Net.Search.Highlight,OverlappingTokenStream,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\TokenSourcesTest.cs,Reset,The following statement contains a magic number: this.tokens = new Token[] {                  new Token(new char[] {'t'' 'h'' 'e'}' 0' 3' 0' 3)'                  new Token(new char[] {'{'' 'f'' 'o'' 'x'' '}'}' 0' 5' 0' 7)'                  new Token(new char[] {'f'' 'o'' 'x'}' 0' 3' 4' 7)'                  new Token(new char[] {'d'' 'i'' 'd'}' 0' 3' 8' 11)'                  new Token(new char[] {'n'' 'o'' 't'}' 0' 3' 12' 15)'                  new Token(new char[] {'j'' 'u'' 'm'' 'p'}' 0' 4' 16' 20)};
Magic Number,Lucene.Net.Search.Highlight,OverlappingTokenStream,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\TokenSourcesTest.cs,Reset,The following statement contains a magic number: this.tokens = new Token[] {                  new Token(new char[] {'t'' 'h'' 'e'}' 0' 3' 0' 3)'                  new Token(new char[] {'{'' 'f'' 'o'' 'x'' '}'}' 0' 5' 0' 7)'                  new Token(new char[] {'f'' 'o'' 'x'}' 0' 3' 4' 7)'                  new Token(new char[] {'d'' 'i'' 'd'}' 0' 3' 8' 11)'                  new Token(new char[] {'n'' 'o'' 't'}' 0' 3' 12' 15)'                  new Token(new char[] {'j'' 'u'' 'm'' 'p'}' 0' 4' 16' 20)};
Magic Number,Lucene.Net.Search.Highlight,OverlappingTokenStream,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\TokenSourcesTest.cs,Reset,The following statement contains a magic number: this.tokens = new Token[] {                  new Token(new char[] {'t'' 'h'' 'e'}' 0' 3' 0' 3)'                  new Token(new char[] {'{'' 'f'' 'o'' 'x'' '}'}' 0' 5' 0' 7)'                  new Token(new char[] {'f'' 'o'' 'x'}' 0' 3' 4' 7)'                  new Token(new char[] {'d'' 'i'' 'd'}' 0' 3' 8' 11)'                  new Token(new char[] {'n'' 'o'' 't'}' 0' 3' 12' 15)'                  new Token(new char[] {'j'' 'u'' 'm'' 'p'}' 0' 4' 16' 20)};
Magic Number,Lucene.Net.Search.Highlight,OverlappingTokenStream,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\TokenSourcesTest.cs,Reset,The following statement contains a magic number: this.tokens = new Token[] {                  new Token(new char[] {'t'' 'h'' 'e'}' 0' 3' 0' 3)'                  new Token(new char[] {'{'' 'f'' 'o'' 'x'' '}'}' 0' 5' 0' 7)'                  new Token(new char[] {'f'' 'o'' 'x'}' 0' 3' 4' 7)'                  new Token(new char[] {'d'' 'i'' 'd'}' 0' 3' 8' 11)'                  new Token(new char[] {'n'' 'o'' 't'}' 0' 3' 12' 15)'                  new Token(new char[] {'j'' 'u'' 'm'' 'p'}' 0' 4' 16' 20)};
Magic Number,Lucene.Net.Search.Highlight,OverlappingTokenStream,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\TokenSourcesTest.cs,Reset,The following statement contains a magic number: this.tokens = new Token[] {                  new Token(new char[] {'t'' 'h'' 'e'}' 0' 3' 0' 3)'                  new Token(new char[] {'{'' 'f'' 'o'' 'x'' '}'}' 0' 5' 0' 7)'                  new Token(new char[] {'f'' 'o'' 'x'}' 0' 3' 4' 7)'                  new Token(new char[] {'d'' 'i'' 'd'}' 0' 3' 8' 11)'                  new Token(new char[] {'n'' 'o'' 't'}' 0' 3' 12' 15)'                  new Token(new char[] {'j'' 'u'' 'm'' 'p'}' 0' 4' 16' 20)};
Magic Number,Lucene.Net.Search.Highlight,OverlappingTokenStream,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\TokenSourcesTest.cs,Reset,The following statement contains a magic number: this.tokens = new Token[] {                  new Token(new char[] {'t'' 'h'' 'e'}' 0' 3' 0' 3)'                  new Token(new char[] {'{'' 'f'' 'o'' 'x'' '}'}' 0' 5' 0' 7)'                  new Token(new char[] {'f'' 'o'' 'x'}' 0' 3' 4' 7)'                  new Token(new char[] {'d'' 'i'' 'd'}' 0' 3' 8' 11)'                  new Token(new char[] {'n'' 'o'' 't'}' 0' 3' 12' 15)'                  new Token(new char[] {'j'' 'u'' 'm'' 'p'}' 0' 4' 16' 20)};
Magic Number,Lucene.Net.Search.Highlight,OverlappingTokenStream,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\TokenSourcesTest.cs,Reset,The following statement contains a magic number: this.tokens = new Token[] {                  new Token(new char[] {'t'' 'h'' 'e'}' 0' 3' 0' 3)'                  new Token(new char[] {'{'' 'f'' 'o'' 'x'' '}'}' 0' 5' 0' 7)'                  new Token(new char[] {'f'' 'o'' 'x'}' 0' 3' 4' 7)'                  new Token(new char[] {'d'' 'i'' 'd'}' 0' 3' 8' 11)'                  new Token(new char[] {'n'' 'o'' 't'}' 0' 3' 12' 15)'                  new Token(new char[] {'j'' 'u'' 'm'' 'p'}' 0' 4' 16' 20)};
Magic Number,Lucene.Net.Search.Highlight,OverlappingTokenStream,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\TokenSourcesTest.cs,Reset,The following statement contains a magic number: this.tokens = new Token[] {                  new Token(new char[] {'t'' 'h'' 'e'}' 0' 3' 0' 3)'                  new Token(new char[] {'{'' 'f'' 'o'' 'x'' '}'}' 0' 5' 0' 7)'                  new Token(new char[] {'f'' 'o'' 'x'}' 0' 3' 4' 7)'                  new Token(new char[] {'d'' 'i'' 'd'}' 0' 3' 8' 11)'                  new Token(new char[] {'n'' 'o'' 't'}' 0' 3' 12' 15)'                  new Token(new char[] {'j'' 'u'' 'm'' 'p'}' 0' 4' 16' 20)};
Magic Number,Lucene.Net.Search.Highlight,OverlappingTokenStream,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\TokenSourcesTest.cs,Reset,The following statement contains a magic number: this.tokens = new Token[] {                  new Token(new char[] {'t'' 'h'' 'e'}' 0' 3' 0' 3)'                  new Token(new char[] {'{'' 'f'' 'o'' 'x'' '}'}' 0' 5' 0' 7)'                  new Token(new char[] {'f'' 'o'' 'x'}' 0' 3' 4' 7)'                  new Token(new char[] {'d'' 'i'' 'd'}' 0' 3' 8' 11)'                  new Token(new char[] {'n'' 'o'' 't'}' 0' 3' 12' 15)'                  new Token(new char[] {'j'' 'u'' 'm'' 'p'}' 0' 4' 16' 20)};
Magic Number,Lucene.Net.Search.Highlight,OverlappingTokenStream,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\TokenSourcesTest.cs,Reset,The following statement contains a magic number: this.tokens = new Token[] {                  new Token(new char[] {'t'' 'h'' 'e'}' 0' 3' 0' 3)'                  new Token(new char[] {'{'' 'f'' 'o'' 'x'' '}'}' 0' 5' 0' 7)'                  new Token(new char[] {'f'' 'o'' 'x'}' 0' 3' 4' 7)'                  new Token(new char[] {'d'' 'i'' 'd'}' 0' 3' 8' 11)'                  new Token(new char[] {'n'' 'o'' 't'}' 0' 3' 12' 15)'                  new Token(new char[] {'j'' 'u'' 'm'' 'p'}' 0' 4' 16' 20)};
Magic Number,Lucene.Net.Search.Highlight,OverlappingTokenStream,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\TokenSourcesTest.cs,Reset,The following statement contains a magic number: this.tokens = new Token[] {                  new Token(new char[] {'t'' 'h'' 'e'}' 0' 3' 0' 3)'                  new Token(new char[] {'{'' 'f'' 'o'' 'x'' '}'}' 0' 5' 0' 7)'                  new Token(new char[] {'f'' 'o'' 'x'}' 0' 3' 4' 7)'                  new Token(new char[] {'d'' 'i'' 'd'}' 0' 3' 8' 11)'                  new Token(new char[] {'n'' 'o'' 't'}' 0' 3' 12' 15)'                  new Token(new char[] {'j'' 'u'' 'm'' 'p'}' 0' 4' 16' 20)};
Magic Number,Lucene.Net.Search.Highlight,OverlappingTokenStream,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\TokenSourcesTest.cs,Reset,The following statement contains a magic number: this.tokens = new Token[] {                  new Token(new char[] {'t'' 'h'' 'e'}' 0' 3' 0' 3)'                  new Token(new char[] {'{'' 'f'' 'o'' 'x'' '}'}' 0' 5' 0' 7)'                  new Token(new char[] {'f'' 'o'' 'x'}' 0' 3' 4' 7)'                  new Token(new char[] {'d'' 'i'' 'd'}' 0' 3' 8' 11)'                  new Token(new char[] {'n'' 'o'' 't'}' 0' 3' 12' 15)'                  new Token(new char[] {'j'' 'u'' 'm'' 'p'}' 0' 4' 16' 20)};
Magic Number,Lucene.Net.Search.Highlight,OverlappingTokenStream,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\TokenSourcesTest.cs,Reset,The following statement contains a magic number: this.tokens = new Token[] {                  new Token(new char[] {'t'' 'h'' 'e'}' 0' 3' 0' 3)'                  new Token(new char[] {'{'' 'f'' 'o'' 'x'' '}'}' 0' 5' 0' 7)'                  new Token(new char[] {'f'' 'o'' 'x'}' 0' 3' 4' 7)'                  new Token(new char[] {'d'' 'i'' 'd'}' 0' 3' 8' 11)'                  new Token(new char[] {'n'' 'o'' 't'}' 0' 3' 12' 15)'                  new Token(new char[] {'j'' 'u'' 'm'' 'p'}' 0' 4' 16' 20)};
Magic Number,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestSimpleHighlightTest,The following statement contains a magic number: String[] bestFragments = highlighter.GetBestFragments(fieldQuery' reader' docId' "field"' 54' 1);
Magic Number,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestSimpleHighlightTest,The following statement contains a magic number: bestFragments = highlighter.GetBestFragments(fieldQuery' reader' docId' "field"' 52' 1);
Magic Number,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestSimpleHighlightTest,The following statement contains a magic number: bestFragments = highlighter.GetBestFragments(fieldQuery' reader' docId' "field"' 30' 1);
Magic Number,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestPhraseHighlightLongTextTest,The following statement contains a magic number: String[] bestFragments = highlighter.GetBestFragments(fieldQuery' reader'                      docId' field' 128' 1);
Magic Number,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestPhraseHighlightLongTextTest,The following statement contains a magic number: String[] bestFragments = highlighter.GetBestFragments(fieldQuery' reader'                      docId' field' 128' 1);
Magic Number,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestPhraseHighlightTest,The following statement contains a magic number: String[] bestFragments = highlighter.GetBestFragments(fieldQuery' reader'                      docId' field' 18' 1);
Magic Number,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestPhraseHighlightTest,The following statement contains a magic number: pq.Slop = (5);
Magic Number,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestPhraseHighlightTest,The following statement contains a magic number: String[] bestFragments = highlighter.GetBestFragments(fieldQuery' reader'                      docId' field' 18' 1);
Magic Number,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestPhraseHighlightTest,The following statement contains a magic number: bestFragments = highlighter.GetBestFragments(fieldQuery' reader'                            docId' field' 30' 1);
Magic Number,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestPhraseHighlightTest,The following statement contains a magic number: query.Slop = (3);
Magic Number,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestPhraseHighlightTest,The following statement contains a magic number: String[] bestFragments = highlighter.GetBestFragments(fieldQuery' reader'                      docId' field' 18' 1);
Magic Number,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestPhraseHighlightTest,The following statement contains a magic number: bestFragments = highlighter.GetBestFragments(fieldQuery' reader'                            docId' field' 30' 1);
Magic Number,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestPhraseHighlightTest,The following statement contains a magic number: query.Slop = (30);
Magic Number,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestPhraseHighlightTest,The following statement contains a magic number: String[] bestFragments = highlighter.GetBestFragments(fieldQuery' reader'                      docId' field' 18' 1);
Magic Number,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestPhraseHighlightTest,The following statement contains a magic number: pq.Slop = (5);
Magic Number,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestPhraseHighlightTest,The following statement contains a magic number: String[] bestFragments = highlighter.GetBestFragments(fieldQuery' reader'                      docId' field' 18' 1);
Magic Number,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestPhraseHighlightTest,The following statement contains a magic number: bestFragments = highlighter.GetBestFragments(fieldQuery' reader'                            docId' field' 30' 1);
Magic Number,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestPhraseHighlightTest,The following statement contains a magic number: String[] bestFragments = highlighter.GetBestFragments(fieldQuery' reader'                      docId' field' 18' 1);
Magic Number,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestBoostedPhraseHighlightTest,The following statement contains a magic number: i < 10
Magic Number,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestBoostedPhraseHighlightTest,The following statement contains a magic number: i < 10
Magic Number,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestBoostedPhraseHighlightTest,The following statement contains a magic number: phrase.Boost = (100);
Magic Number,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestBoostedPhraseHighlightTest,The following statement contains a magic number: String fragment = highlighter.GetBestFragment(fieldQuery' reader' 0' "text"' 100);
Magic Number,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestCommonTermsQueryHighlight,The following statement contains a magic number: CommonTermsQuery query = new CommonTermsQuery(Occur.MUST' Occur.SHOULD' 2);
Magic Number,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestCommonTermsQueryHighlight,The following statement contains a magic number: TopDocs hits = searcher.Search(query' 10);
Magic Number,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestCommonTermsQueryHighlight,The following statement contains a magic number: assertEquals(2' hits.TotalHits);
Magic Number,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestCommonTermsQueryHighlight,The following statement contains a magic number: String[] bestFragments = highlighter.GetBestFragments(fieldQuery' reader' hits.ScoreDocs[0].Doc' "field"' 1000' 1);
Magic Number,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestCommonTermsQueryHighlight,The following statement contains a magic number: bestFragments = highlighter.GetBestFragments(fieldQuery' reader' hits.ScoreDocs[1].Doc' "field"' 1000' 1);
Magic Number,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestMatchedFields,The following statement contains a magic number: matchedFieldsTestCase("a match"' "<b>a</b> <b>match</b>"'                clause("field_exact"' 5' "a")' clause("field"' "match"));
Magic Number,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestMatchedFields,The following statement contains a magic number: matchedFieldsTestCase("cat cat junk junk junk junk junk junk junk a cat junk junk"'                "junk junk <b>a cat</b> junk junk"'                clause("field"' "cat")' clause("field_exact"' 5' "a"' "cat"));
Magic Number,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestMatchedFields,The following statement contains a magic number: matchedFieldsTestCase("cat cat CAT junk junk junk junk junk junk junk a cat junk junk"'                "junk junk <b>a cat</b> junk junk"'                clause("field"' "cat")' clause("field_exact"' 200' "a"' "cat")' clause("field_super_exact"' 5' "CAT"));
Magic Number,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestMatchedFields,The following statement contains a magic number: matchedFieldsTestCase("cat cat CAT junk junk junk junk junk junk junk a cat junk junk"'                "junk junk <b>a cat</b> junk junk"'                clause("field"' "cat")' clause("field_exact"' 200' "a"' "cat")' clause("field_super_exact"' 5' "CAT"));
Magic Number,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestMatchedFields,The following statement contains a magic number: matchedFieldsTestCase("a cat cat junk junk junk junk junk junk junk a CAT junk junk"'                "junk junk <b>a CAT</b> junk junk"'                clause("field"' "cat")' clause("field_exact"' 5' "a"' "cat")' clause("field_super_exact"' 200' "a"' "CAT"));
Magic Number,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestMatchedFields,The following statement contains a magic number: matchedFieldsTestCase("a cat cat junk junk junk junk junk junk junk a CAT junk junk"'                "junk junk <b>a CAT</b> junk junk"'                clause("field"' "cat")' clause("field_exact"' 5' "a"' "cat")' clause("field_super_exact"' 200' "a"' "CAT"));
Magic Number,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestMatchedFields,The following statement contains a magic number: matchedFieldsTestCase("cat cat junk junk junk junk junk junk junk a cat junk junk"'                "junk junk <b>a cat</b> junk junk"'                clause("field_exact"' 5' "a"' "cat")' clause("field_characters"' "c"));
Magic Number,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestMatchedFields,The following statement contains a magic number: matchedFieldsTestCase("cat cat junk junk junk junk junk junk junk a cat junk junk"'                "<b>cat</b> <b>cat</b> junk junk junk junk"' // See how the phrases are joined?                clause("field"' "cat")' clause("field_characters"' 5' "c"));
Magic Number,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestMatchedFields,The following statement contains a magic number: matchedFieldsTestCase("cat cat junk junk junk junk junk junk junk a cat junk junk"'                "junk junk <b>a cat</b> junk junk"'                clause("field"' "cat")' clause("field_characters"' 5' "a"' " "' "c"' "a"' "t"));
Magic Number,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestMatchedFields,The following statement contains a magic number: matchedFieldsTestCase(true' false' "cat cat junk junk junk junk junk junk junk a cat junk junk"'                "junk junk <b>a cat</b> junk junk"'                clause("field"' "cat")' clause("field_characters"' 10' "a"' " "' "c"' "a"' "t"));
Magic Number,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestMatchedFields,The following statement contains a magic number: matchedFieldsTestCase(true' false' "a cat cat junk junk junk junk junk junk junk a CAT junk junk"'                "junk junk <b>a CAT</b> junk junk"'                clause("field"' "cat")' clause("field_exact"' 5' "a"' "cat")' clause("field_super_exact"' 200' "a"' "CAT"));
Magic Number,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestMatchedFields,The following statement contains a magic number: matchedFieldsTestCase(true' false' "a cat cat junk junk junk junk junk junk junk a CAT junk junk"'                "junk junk <b>a CAT</b> junk junk"'                clause("field"' "cat")' clause("field_exact"' 5' "a"' "cat")' clause("field_super_exact"' 200' "a"' "CAT"));
Magic Number,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestMatchedFields,The following statement contains a magic number: matchedFieldsTestCase(true' false' "cat cat CAT junk junk junk junk junk junk junk a cat junk junk"'                "junk junk <b>a cat</b> junk junk"'                clause("field"' "cat")' clause("field_exact"' 200' "a"' "cat")' clause("field_super_exact"' 5' "CAT"));
Magic Number,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestMatchedFields,The following statement contains a magic number: matchedFieldsTestCase(true' false' "cat cat CAT junk junk junk junk junk junk junk a cat junk junk"'                "junk junk <b>a cat</b> junk junk"'                clause("field"' "cat")' clause("field_exact"' 200' "a"' "cat")' clause("field_super_exact"' 5' "CAT"));
Magic Number,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestMatchedFields,The following statement contains a magic number: matchedFieldsTestCase(true' false' "cat cat junk junk junk junk junk junk junk a cat junk junk"'                "<b>cat</b> <b>cat</b> junk junk junk junk"'                clause("field"' "cat")' clause("field_characters"' 4' "a"' " "' "c"' "a"' "t"));
Magic Number,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestMatchedFields,The following statement contains a magic number: matchedFieldsTestCase("cat cat junk junk junk junk junk junk junk a cat junk junk"'                "<b>cat</b> <b>cat</b> junk junk junk junk"'                clause("field"' "cat")' clause("field_sliced"' "cat")' clause("field_exact"' 2' "a"' "cat"));
Magic Number,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestMatchedFields,The following statement contains a magic number: matchedFieldsTestCase("cat cat junk junk junk junk junk junk junk a cat junk junk"'                "junk junk <b>a cat</b> junk junk"'                clause("field"' "cat")' clause("field_sliced"' "cat")' clause("field_exact"' 4' "a"' "cat"));
Magic Number,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestMatchedFields,The following statement contains a magic number: matchedFieldsTestCase("cat cat junk junk junk junk junk junk junk a cat junk junk"'                "<b>cat</b> cat junk junk junk junk"'                clause("field_der_red"' 2' "der")' clause("field_exact"' "a"' "cat"));
Magic Number,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestMatchedFields,The following statement contains a magic number: matchedFieldsTestCase("cat cat junk junk junk junk junk junk junk a cat junk junk"'                "<b>cat</b> cat junk junk junk junk"'                clause("field_der_red"' 2' "red")' clause("field_exact"' "a"' "cat"));
Magic Number,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestMultiValuedSortByScore,The following statement contains a magic number: String[] bestFragments = highlighter.GetBestFragments(fieldQuery' reader' docId' "field"' 20' 1'                      fragListBuilder' fragmentsBuilder' preTags' postTags' encoder);
Magic Number,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestMultiValuedSortByScore,The following statement contains a magic number: bestFragments = highlighter.GetBestFragments(fieldQuery' reader' docId' "field"' 28' 1'                            fragListBuilder' fragmentsBuilder' preTags' postTags' encoder);
Magic Number,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestMultiValuedSortByScore,The following statement contains a magic number: bestFragments = highlighter.GetBestFragments(fieldQuery' reader' docId' "field"' 30000' 1'                            fragListBuilder' fragmentsBuilder' preTags' postTags' encoder);
Magic Number,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestBooleanPhraseWithSynonym,The following statement contains a magic number: Token syn = new Token("httpwwwfacebookcom"' 6' 29);
Magic Number,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestBooleanPhraseWithSynonym,The following statement contains a magic number: Token syn = new Token("httpwwwfacebookcom"' 6' 29);
Magic Number,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestBooleanPhraseWithSynonym,The following statement contains a magic number: CannedTokenStream ts = new CannedTokenStream(                  new Token("test"' 0' 4)'                  new Token("http"' 6' 10)'                  syn'                  new Token("www"' 13' 16)'                  new Token("facebook"' 17' 25)'                  new Token("com"' 26' 29)              );
Magic Number,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestBooleanPhraseWithSynonym,The following statement contains a magic number: CannedTokenStream ts = new CannedTokenStream(                  new Token("test"' 0' 4)'                  new Token("http"' 6' 10)'                  syn'                  new Token("www"' 13' 16)'                  new Token("facebook"' 17' 25)'                  new Token("com"' 26' 29)              );
Magic Number,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestBooleanPhraseWithSynonym,The following statement contains a magic number: CannedTokenStream ts = new CannedTokenStream(                  new Token("test"' 0' 4)'                  new Token("http"' 6' 10)'                  syn'                  new Token("www"' 13' 16)'                  new Token("facebook"' 17' 25)'                  new Token("com"' 26' 29)              );
Magic Number,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestBooleanPhraseWithSynonym,The following statement contains a magic number: CannedTokenStream ts = new CannedTokenStream(                  new Token("test"' 0' 4)'                  new Token("http"' 6' 10)'                  syn'                  new Token("www"' 13' 16)'                  new Token("facebook"' 17' 25)'                  new Token("com"' 26' 29)              );
Magic Number,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestBooleanPhraseWithSynonym,The following statement contains a magic number: CannedTokenStream ts = new CannedTokenStream(                  new Token("test"' 0' 4)'                  new Token("http"' 6' 10)'                  syn'                  new Token("www"' 13' 16)'                  new Token("facebook"' 17' 25)'                  new Token("com"' 26' 29)              );
Magic Number,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestBooleanPhraseWithSynonym,The following statement contains a magic number: CannedTokenStream ts = new CannedTokenStream(                  new Token("test"' 0' 4)'                  new Token("http"' 6' 10)'                  syn'                  new Token("www"' 13' 16)'                  new Token("facebook"' 17' 25)'                  new Token("com"' 26' 29)              );
Magic Number,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestBooleanPhraseWithSynonym,The following statement contains a magic number: CannedTokenStream ts = new CannedTokenStream(                  new Token("test"' 0' 4)'                  new Token("http"' 6' 10)'                  syn'                  new Token("www"' 13' 16)'                  new Token("facebook"' 17' 25)'                  new Token("com"' 26' 29)              );
Magic Number,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestBooleanPhraseWithSynonym,The following statement contains a magic number: CannedTokenStream ts = new CannedTokenStream(                  new Token("test"' 0' 4)'                  new Token("http"' 6' 10)'                  syn'                  new Token("www"' 13' 16)'                  new Token("facebook"' 17' 25)'                  new Token("com"' 26' 29)              );
Magic Number,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestBooleanPhraseWithSynonym,The following statement contains a magic number: CannedTokenStream ts = new CannedTokenStream(                  new Token("test"' 0' 4)'                  new Token("http"' 6' 10)'                  syn'                  new Token("www"' 13' 16)'                  new Token("facebook"' 17' 25)'                  new Token("com"' 26' 29)              );
Magic Number,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestBooleanPhraseWithSynonym,The following statement contains a magic number: String[] bestFragments = highlighter.GetBestFragments(fieldQuery' reader' docId' "field"' 54' 1);
Magic Number,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestBooleanPhraseWithSynonym,The following statement contains a magic number: bestFragments = highlighter.GetBestFragments(fieldQuery' reader' docId' "field"' 54' 1);
Magic Number,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,TestBooleanPhraseWithSynonym,The following statement contains a magic number: bestFragments = highlighter.GetBestFragments(fieldQuery' reader' docId' "field"' 54' 1);
Magic Number,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,matchedFieldsTestCase,The following statement contains a magic number: doc.Add(new Field("field_sliced"' fieldValue.Substring(0'       // Sliced at 10 chars then analyzed just like field                Math.Min(fieldValue.Length - 1' 10) - 0)' matched));
Magic Number,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,matchedFieldsTestCase,The following statement contains a magic number: doc.Add(new Field("field_der_red"' new CannedTokenStream(        // Hacky field containing "der" and "red" at pos = 0                    token("der"' 1' 0' 3)'                    token("red"' 0' 0' 3)                  )' matched));
Magic Number,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,matchedFieldsTestCase,The following statement contains a magic number: doc.Add(new Field("field_der_red"' new CannedTokenStream(        // Hacky field containing "der" and "red" at pos = 0                    token("der"' 1' 0' 3)'                    token("red"' 0' 0' 3)                  )' matched));
Magic Number,Lucene.Net.Search.VectorHighlight,FastVectorHighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FastVectorHighlighterTest.cs,matchedFieldsTestCase,The following statement contains a magic number: bestFragments = highlighter.GetBestFragments(fieldQuery' reader' docId' "field"' matchedFields' 25' 1'                    fragListBuilder' fragmentsBuilder' preTags' postTags' encoder);
Magic Number,Lucene.Net.Search.VectorHighlight,FieldPhraseListTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldPhraseListTest.cs,Test2TermsIndex,The following statement contains a magic number: assertEquals(2' fpl.PhraseList.size());
Magic Number,Lucene.Net.Search.VectorHighlight,FieldPhraseListTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldPhraseListTest.cs,Test2ConcatTermsIndexB,The following statement contains a magic number: assertEquals(2' fpl.PhraseList.size());
Magic Number,Lucene.Net.Search.VectorHighlight,FieldPhraseListTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldPhraseListTest.cs,Test2Terms1PhraseIndex,The following statement contains a magic number: assertEquals(2' fpl.PhraseList.size());
Magic Number,Lucene.Net.Search.VectorHighlight,FieldPhraseListTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldPhraseListTest.cs,TestPhraseSlop,The following statement contains a magic number: FieldQuery fq = new FieldQuery(pqF(2F' 1' "a"' "c")' true' true);
Magic Number,Lucene.Net.Search.VectorHighlight,FieldPhraseListTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldPhraseListTest.cs,TestPhraseSlop,The following statement contains a magic number: assertEquals(4' fpl.PhraseList[0].StartOffset);
Magic Number,Lucene.Net.Search.VectorHighlight,FieldPhraseListTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldPhraseListTest.cs,TestPhraseSlop,The following statement contains a magic number: assertEquals(9' fpl.PhraseList[0].EndOffset);
Magic Number,Lucene.Net.Search.VectorHighlight,FieldPhraseListTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldPhraseListTest.cs,TestSearchLongestPhrase,The following statement contains a magic number: assertEquals(2' fpl.PhraseList.size());
Magic Number,Lucene.Net.Search.VectorHighlight,FieldPhraseListTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldPhraseListTest.cs,Test1PhraseLongMV,The following statement contains a magic number: assertEquals(2' fpl.PhraseList.size());
Magic Number,Lucene.Net.Search.VectorHighlight,FieldPhraseListTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldPhraseListTest.cs,TestWeightedPhraseInfoComparisonConsistency,The following statement contains a magic number: WeightedPhraseInfo b = newInfo(1' 2' 1);
Magic Number,Lucene.Net.Search.VectorHighlight,FieldPhraseListTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldPhraseListTest.cs,TestWeightedPhraseInfoComparisonConsistency,The following statement contains a magic number: WeightedPhraseInfo c = newInfo(2' 3' 1);
Magic Number,Lucene.Net.Search.VectorHighlight,FieldPhraseListTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldPhraseListTest.cs,TestWeightedPhraseInfoComparisonConsistency,The following statement contains a magic number: WeightedPhraseInfo c = newInfo(2' 3' 1);
Magic Number,Lucene.Net.Search.VectorHighlight,FieldPhraseListTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldPhraseListTest.cs,TestWeightedPhraseInfoComparisonConsistency,The following statement contains a magic number: WeightedPhraseInfo e = newInfo(0' 0' 2);
Magic Number,Lucene.Net.Search.VectorHighlight,FieldPhraseListTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldPhraseListTest.cs,TestToffsComparisonConsistency,The following statement contains a magic number: Toffs b = new Toffs(1' 2);
Magic Number,Lucene.Net.Search.VectorHighlight,FieldPhraseListTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldPhraseListTest.cs,TestToffsComparisonConsistency,The following statement contains a magic number: Toffs c = new Toffs(2' 3);
Magic Number,Lucene.Net.Search.VectorHighlight,FieldPhraseListTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldPhraseListTest.cs,TestToffsComparisonConsistency,The following statement contains a magic number: Toffs c = new Toffs(2' 3);
Magic Number,Lucene.Net.Search.VectorHighlight,FieldQueryTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldQueryTest.cs,initBoost,The following statement contains a magic number: boost = Usually() ? 1F : ((float)(Random.NextDouble() / 2)) * 10000;
Magic Number,Lucene.Net.Search.VectorHighlight,FieldQueryTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldQueryTest.cs,initBoost,The following statement contains a magic number: boost = Usually() ? 1F : ((float)(Random.NextDouble() / 2)) * 10000;
Magic Number,Lucene.Net.Search.VectorHighlight,FieldQueryTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldQueryTest.cs,TestGetTermSet,The following statement contains a magic number: assertEquals(2' fq.termSetMap.size());
Magic Number,Lucene.Net.Search.VectorHighlight,FieldQueryTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldQueryTest.cs,TestGetTermSet,The following statement contains a magic number: assertEquals(2' termSet.size());
Magic Number,Lucene.Net.Search.VectorHighlight,FieldQueryTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldQueryTest.cs,TestQueryPhraseMap1Term,The following statement contains a magic number: query = tq(2' "a");
Magic Number,Lucene.Net.Search.VectorHighlight,FieldQueryTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldQueryTest.cs,TestQueryPhraseMap1Term,The following statement contains a magic number: assertEquals(2F' qpm.subMap["a"].boost' 0);
Magic Number,Lucene.Net.Search.VectorHighlight,FieldQueryTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldQueryTest.cs,TestQueryPhraseMap1Phrase,The following statement contains a magic number: assertEquals(2' qpm.subMap.size());
Magic Number,Lucene.Net.Search.VectorHighlight,FieldQueryTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldQueryTest.cs,TestQueryPhraseMap1Phrase,The following statement contains a magic number: assertEquals(2' qpm.subMap.size());
Magic Number,Lucene.Net.Search.VectorHighlight,FieldQueryTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldQueryTest.cs,TestQueryPhraseMap1Phrase,The following statement contains a magic number: query = pqF(2' "a"' "b");
Magic Number,Lucene.Net.Search.VectorHighlight,FieldQueryTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldQueryTest.cs,TestQueryPhraseMap1Phrase,The following statement contains a magic number: assertEquals(2F' qpm2.boost' 0);
Magic Number,Lucene.Net.Search.VectorHighlight,FieldQueryTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldQueryTest.cs,TestQueryPhraseMap1Phrase,The following statement contains a magic number: assertEquals(2F' qpm3.boost' 0);
Magic Number,Lucene.Net.Search.VectorHighlight,FieldQueryTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldQueryTest.cs,TestQueryPhraseMap1Phrase,The following statement contains a magic number: assertEquals(2F' qpm2.boost' 0);
Magic Number,Lucene.Net.Search.VectorHighlight,FieldQueryTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldQueryTest.cs,TestQueryPhraseMap2Phrases,The following statement contains a magic number: query.Add(pqF(2' "c"' "d")' Occur.SHOULD);
Magic Number,Lucene.Net.Search.VectorHighlight,FieldQueryTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldQueryTest.cs,TestQueryPhraseMap2Phrases,The following statement contains a magic number: assertEquals(2' qpm.subMap.size());
Magic Number,Lucene.Net.Search.VectorHighlight,FieldQueryTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldQueryTest.cs,TestQueryPhraseMap2Phrases,The following statement contains a magic number: assertEquals(2F' qpm3.boost' 0);
Magic Number,Lucene.Net.Search.VectorHighlight,FieldQueryTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldQueryTest.cs,TestQueryPhraseMap2PhrasesFields,The following statement contains a magic number: query.Add(pq(2F' F2' "c"' "d")' Occur.SHOULD);
Magic Number,Lucene.Net.Search.VectorHighlight,FieldQueryTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldQueryTest.cs,TestQueryPhraseMap2PhrasesFields,The following statement contains a magic number: assertEquals(2' map.size());
Magic Number,Lucene.Net.Search.VectorHighlight,FieldQueryTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldQueryTest.cs,TestQueryPhraseMap2PhrasesFields,The following statement contains a magic number: assertEquals(2F' qpm3.boost' 0);
Magic Number,Lucene.Net.Search.VectorHighlight,FieldQueryTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldQueryTest.cs,TestQueryPhraseMap2PhrasesFields,The following statement contains a magic number: assertEquals(2' qpm.subMap.size());
Magic Number,Lucene.Net.Search.VectorHighlight,FieldQueryTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldQueryTest.cs,TestQueryPhraseMap2PhrasesFields,The following statement contains a magic number: assertEquals(2F' qpm3.boost' 0);
Magic Number,Lucene.Net.Search.VectorHighlight,FieldQueryTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldQueryTest.cs,TestQueryPhraseMapOverlapPhrases,The following statement contains a magic number: query.Add(pqF(2' "b"' "c"' "d")' Occur.SHOULD);
Magic Number,Lucene.Net.Search.VectorHighlight,FieldQueryTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldQueryTest.cs,TestQueryPhraseMapOverlapPhrases,The following statement contains a magic number: query.Add(pqF(3' "b"' "d")' Occur.SHOULD);
Magic Number,Lucene.Net.Search.VectorHighlight,FieldQueryTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldQueryTest.cs,TestQueryPhraseMapOverlapPhrases,The following statement contains a magic number: assertEquals(2' qpm.subMap.size());
Magic Number,Lucene.Net.Search.VectorHighlight,FieldQueryTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldQueryTest.cs,TestQueryPhraseMapOverlapPhrases,The following statement contains a magic number: assertEquals(2' qpm2.subMap.size());
Magic Number,Lucene.Net.Search.VectorHighlight,FieldQueryTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldQueryTest.cs,TestQueryPhraseMapOverlapPhrases,The following statement contains a magic number: assertEquals(2F' qpm4.boost' 0);
Magic Number,Lucene.Net.Search.VectorHighlight,FieldQueryTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldQueryTest.cs,TestQueryPhraseMapOverlapPhrases,The following statement contains a magic number: assertEquals(3F' qpm3.boost' 0);
Magic Number,Lucene.Net.Search.VectorHighlight,FieldQueryTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldQueryTest.cs,TestQueryPhraseMapOverlapPhrases2,The following statement contains a magic number: query.Add(pqF(2' "a"' "b"' "c")' Occur.SHOULD);
Magic Number,Lucene.Net.Search.VectorHighlight,FieldQueryTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldQueryTest.cs,TestQueryPhraseMapOverlapPhrases2,The following statement contains a magic number: assertEquals(2F' qpm4.boost' 0);
Magic Number,Lucene.Net.Search.VectorHighlight,FieldQueryTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldQueryTest.cs,TestQueryPhraseMapOverlapPhrases3,The following statement contains a magic number: query.Add(pqF(2' "a"' "a"' "a")' Occur.SHOULD);
Magic Number,Lucene.Net.Search.VectorHighlight,FieldQueryTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldQueryTest.cs,TestQueryPhraseMapOverlap2gram,The following statement contains a magic number: assertEquals(2' qpm.subMap.size());
Magic Number,Lucene.Net.Search.VectorHighlight,FieldQueryTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldQueryTest.cs,TestQueryPhraseMapOverlap2gram,The following statement contains a magic number: assertEquals(3' qpm.subMap.size());
Magic Number,Lucene.Net.Search.VectorHighlight,FieldQueryTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldQueryTest.cs,TestSearchPhrase,The following statement contains a magic number: phraseCandidate.Add(new TermInfo("b"' 2' 3' 1' 1));
Magic Number,Lucene.Net.Search.VectorHighlight,FieldQueryTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldQueryTest.cs,TestSearchPhrase,The following statement contains a magic number: phraseCandidate.Add(new TermInfo("b"' 2' 3' 1' 1));
Magic Number,Lucene.Net.Search.VectorHighlight,FieldQueryTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldQueryTest.cs,TestSearchPhrase,The following statement contains a magic number: phraseCandidate.Add(new TermInfo("c"' 4' 5' 2' 1));
Magic Number,Lucene.Net.Search.VectorHighlight,FieldQueryTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldQueryTest.cs,TestSearchPhrase,The following statement contains a magic number: phraseCandidate.Add(new TermInfo("c"' 4' 5' 2' 1));
Magic Number,Lucene.Net.Search.VectorHighlight,FieldQueryTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldQueryTest.cs,TestSearchPhrase,The following statement contains a magic number: phraseCandidate.Add(new TermInfo("c"' 4' 5' 2' 1));
Magic Number,Lucene.Net.Search.VectorHighlight,FieldQueryTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldQueryTest.cs,TestSearchPhrase,The following statement contains a magic number: phraseCandidate.Add(new TermInfo("b"' 2' 3' 1' 1));
Magic Number,Lucene.Net.Search.VectorHighlight,FieldQueryTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldQueryTest.cs,TestSearchPhrase,The following statement contains a magic number: phraseCandidate.Add(new TermInfo("b"' 2' 3' 1' 1));
Magic Number,Lucene.Net.Search.VectorHighlight,FieldQueryTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldQueryTest.cs,TestSearchPhrase,The following statement contains a magic number: phraseCandidate.Add(new TermInfo("c"' 4' 5' 2' 1));
Magic Number,Lucene.Net.Search.VectorHighlight,FieldQueryTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldQueryTest.cs,TestSearchPhrase,The following statement contains a magic number: phraseCandidate.Add(new TermInfo("c"' 4' 5' 2' 1));
Magic Number,Lucene.Net.Search.VectorHighlight,FieldQueryTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldQueryTest.cs,TestSearchPhrase,The following statement contains a magic number: phraseCandidate.Add(new TermInfo("c"' 4' 5' 2' 1));
Magic Number,Lucene.Net.Search.VectorHighlight,FieldQueryTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldQueryTest.cs,TestSearchPhraseSlop,The following statement contains a magic number: phraseCandidate.Add(new TermInfo("b"' 2' 3' 2' 1));
Magic Number,Lucene.Net.Search.VectorHighlight,FieldQueryTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldQueryTest.cs,TestSearchPhraseSlop,The following statement contains a magic number: phraseCandidate.Add(new TermInfo("b"' 2' 3' 2' 1));
Magic Number,Lucene.Net.Search.VectorHighlight,FieldQueryTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldQueryTest.cs,TestSearchPhraseSlop,The following statement contains a magic number: phraseCandidate.Add(new TermInfo("b"' 2' 3' 2' 1));
Magic Number,Lucene.Net.Search.VectorHighlight,FieldQueryTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldQueryTest.cs,TestSearchPhraseSlop,The following statement contains a magic number: phraseCandidate.Add(new TermInfo("c"' 4' 5' 4' 1));
Magic Number,Lucene.Net.Search.VectorHighlight,FieldQueryTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldQueryTest.cs,TestSearchPhraseSlop,The following statement contains a magic number: phraseCandidate.Add(new TermInfo("c"' 4' 5' 4' 1));
Magic Number,Lucene.Net.Search.VectorHighlight,FieldQueryTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldQueryTest.cs,TestSearchPhraseSlop,The following statement contains a magic number: phraseCandidate.Add(new TermInfo("c"' 4' 5' 4' 1));
Magic Number,Lucene.Net.Search.VectorHighlight,FieldQueryTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldQueryTest.cs,TestSearchPhraseSlop,The following statement contains a magic number: phraseCandidate.Add(new TermInfo("b"' 2' 3' 3' 1));
Magic Number,Lucene.Net.Search.VectorHighlight,FieldQueryTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldQueryTest.cs,TestSearchPhraseSlop,The following statement contains a magic number: phraseCandidate.Add(new TermInfo("b"' 2' 3' 3' 1));
Magic Number,Lucene.Net.Search.VectorHighlight,FieldQueryTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldQueryTest.cs,TestSearchPhraseSlop,The following statement contains a magic number: phraseCandidate.Add(new TermInfo("b"' 2' 3' 3' 1));
Magic Number,Lucene.Net.Search.VectorHighlight,FieldQueryTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldQueryTest.cs,TestSearchPhraseSlop,The following statement contains a magic number: phraseCandidate.Add(new TermInfo("c"' 4' 5' 6' 1));
Magic Number,Lucene.Net.Search.VectorHighlight,FieldQueryTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldQueryTest.cs,TestSearchPhraseSlop,The following statement contains a magic number: phraseCandidate.Add(new TermInfo("c"' 4' 5' 6' 1));
Magic Number,Lucene.Net.Search.VectorHighlight,FieldQueryTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldQueryTest.cs,TestSearchPhraseSlop,The following statement contains a magic number: phraseCandidate.Add(new TermInfo("c"' 4' 5' 6' 1));
Magic Number,Lucene.Net.Search.VectorHighlight,FieldQueryTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldQueryTest.cs,defgMultiTermQueryTest,The following statement contains a magic number: phraseCandidate.Add(new TermInfo("defg"' 0' 12' 0' 1));
Magic Number,Lucene.Net.Search.VectorHighlight,FieldTermStackTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldTermStackTest.cs,Test1Term,The following statement contains a magic number: assertEquals(6' stack.termList.size());
Magic Number,Lucene.Net.Search.VectorHighlight,FieldTermStackTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldTermStackTest.cs,Test2Terms,The following statement contains a magic number: assertEquals(8' stack.termList.size());
Magic Number,Lucene.Net.Search.VectorHighlight,FieldTermStackTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldTermStackTest.cs,Test1Phrase,The following statement contains a magic number: assertEquals(3' stack.termList.size());
Magic Number,Lucene.Net.Search.VectorHighlight,FieldTermStackTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldTermStackTest.cs,Test1TermB,The following statement contains a magic number: assertEquals(2' stack.termList.size());
Magic Number,Lucene.Net.Search.VectorHighlight,FieldTermStackTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldTermStackTest.cs,Test2TermsB,The following statement contains a magic number: assertEquals(3' stack.termList.size());
Magic Number,Lucene.Net.Search.VectorHighlight,FieldTermStackTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldTermStackTest.cs,Test1PhraseB,The following statement contains a magic number: assertEquals(4' stack.termList.size());
Magic Number,Lucene.Net.Search.VectorHighlight,FieldTermStackTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldTermStackTest.cs,Test1PhraseLongMV,The following statement contains a magic number: assertEquals(4' stack.termList.size());
Magic Number,Lucene.Net.Search.VectorHighlight,FieldTermStackTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldTermStackTest.cs,Test1PhraseMVB,The following statement contains a magic number: assertEquals(4' stack.termList.size());
Magic Number,Lucene.Net.Search.VectorHighlight,FieldTermStackTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldTermStackTest.cs,TestWildcard,The following statement contains a magic number: assertEquals(4' stack.termList.size());
Magic Number,Lucene.Net.Search.VectorHighlight,FieldTermStackTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\FieldTermStackTest.cs,TestTermInfoComparisonConsistency,The following statement contains a magic number: TermInfo c = new TermInfo(TestUtil.RandomUnicodeString(Random)' 0' 0' 2' 1);
Magic Number,Lucene.Net.Search.VectorHighlight,IndexTimeSynonymTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\IndexTimeSynonymTest.cs,TestFieldTermStackIndex1w2wSearch1phrase,The following statement contains a magic number: assertEquals(2' stack.termList.size());
Magic Number,Lucene.Net.Search.VectorHighlight,IndexTimeSynonymTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\IndexTimeSynonymTest.cs,TestFieldTermStackIndex1w2wSearch1term1phrase,The following statement contains a magic number: assertEquals(2' stack.termList.size());
Magic Number,Lucene.Net.Search.VectorHighlight,IndexTimeSynonymTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\IndexTimeSynonymTest.cs,TestFieldTermStackIndex2w1wSearch1phrase,The following statement contains a magic number: assertEquals(2' stack.termList.size());
Magic Number,Lucene.Net.Search.VectorHighlight,IndexTimeSynonymTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\IndexTimeSynonymTest.cs,TestFieldTermStackIndex2w1wSearch1term1phrase,The following statement contains a magic number: assertEquals(2' stack.termList.size());
Magic Number,Lucene.Net.Search.VectorHighlight,IndexTimeSynonymTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\IndexTimeSynonymTest.cs,TestFieldPhraseListIndex1w2wSearch1phrase,The following statement contains a magic number: assertEquals(3' fpl.PhraseList[0].StartOffset);
Magic Number,Lucene.Net.Search.VectorHighlight,IndexTimeSynonymTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\IndexTimeSynonymTest.cs,TestFieldPhraseListIndex1w2wSearch1phrase,The following statement contains a magic number: assertEquals(5' fpl.PhraseList[0].EndOffset);
Magic Number,Lucene.Net.Search.VectorHighlight,IndexTimeSynonymTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\IndexTimeSynonymTest.cs,TestFieldPhraseListIndex1w2wSearch1partial,The following statement contains a magic number: assertEquals(3' fpl.PhraseList[0].StartOffset);
Magic Number,Lucene.Net.Search.VectorHighlight,IndexTimeSynonymTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\IndexTimeSynonymTest.cs,TestFieldPhraseListIndex1w2wSearch1partial,The following statement contains a magic number: assertEquals(5' fpl.PhraseList[0].EndOffset);
Magic Number,Lucene.Net.Search.VectorHighlight,IndexTimeSynonymTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\IndexTimeSynonymTest.cs,TestFieldPhraseListIndex1w2wSearch1term1phrase,The following statement contains a magic number: assertEquals(3' fpl.PhraseList[0].StartOffset);
Magic Number,Lucene.Net.Search.VectorHighlight,IndexTimeSynonymTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\IndexTimeSynonymTest.cs,TestFieldPhraseListIndex1w2wSearch1term1phrase,The following statement contains a magic number: assertEquals(5' fpl.PhraseList[0].EndOffset);
Magic Number,Lucene.Net.Search.VectorHighlight,IndexTimeSynonymTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\IndexTimeSynonymTest.cs,TestFieldPhraseListIndex2w1wSearch1term,The following statement contains a magic number: assertEquals(3' fpl.PhraseList[0].StartOffset);
Magic Number,Lucene.Net.Search.VectorHighlight,IndexTimeSynonymTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\IndexTimeSynonymTest.cs,TestFieldPhraseListIndex2w1wSearch1term,The following statement contains a magic number: assertEquals(20' fpl.PhraseList[0].EndOffset);
Magic Number,Lucene.Net.Search.VectorHighlight,IndexTimeSynonymTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\IndexTimeSynonymTest.cs,TestFieldPhraseListIndex2w1wSearch1phrase,The following statement contains a magic number: assertEquals(3' fpl.PhraseList[0].StartOffset);
Magic Number,Lucene.Net.Search.VectorHighlight,IndexTimeSynonymTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\IndexTimeSynonymTest.cs,TestFieldPhraseListIndex2w1wSearch1phrase,The following statement contains a magic number: assertEquals(20' fpl.PhraseList[0].EndOffset);
Magic Number,Lucene.Net.Search.VectorHighlight,IndexTimeSynonymTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\IndexTimeSynonymTest.cs,TestFieldPhraseListIndex2w1wSearch1partial,The following statement contains a magic number: assertEquals(3' fpl.PhraseList[0].StartOffset);
Magic Number,Lucene.Net.Search.VectorHighlight,IndexTimeSynonymTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\IndexTimeSynonymTest.cs,TestFieldPhraseListIndex2w1wSearch1partial,The following statement contains a magic number: assertEquals(20' fpl.PhraseList[0].EndOffset);
Magic Number,Lucene.Net.Search.VectorHighlight,IndexTimeSynonymTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\IndexTimeSynonymTest.cs,TestFieldPhraseListIndex2w1wSearch1term1phrase,The following statement contains a magic number: assertEquals(3' fpl.PhraseList[0].StartOffset);
Magic Number,Lucene.Net.Search.VectorHighlight,IndexTimeSynonymTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\IndexTimeSynonymTest.cs,TestFieldPhraseListIndex2w1wSearch1term1phrase,The following statement contains a magic number: assertEquals(20' fpl.PhraseList[0].EndOffset);
Magic Number,Lucene.Net.Search.VectorHighlight,IndexTimeSynonymTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\IndexTimeSynonymTest.cs,makeIndex1w,The following statement contains a magic number: makeSynonymIndex("I'll buy a Macintosh"'                  t("I'll"' 0' 4)'                  t("buy"' 5' 8)'                  t("a"' 9' 10)'                  t("Macintosh"' 11' 20)' t("Mac"' 11' 20' 0)' t("MacBook"' 11' 20' 0));
Magic Number,Lucene.Net.Search.VectorHighlight,IndexTimeSynonymTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\IndexTimeSynonymTest.cs,makeIndex1w,The following statement contains a magic number: makeSynonymIndex("I'll buy a Macintosh"'                  t("I'll"' 0' 4)'                  t("buy"' 5' 8)'                  t("a"' 9' 10)'                  t("Macintosh"' 11' 20)' t("Mac"' 11' 20' 0)' t("MacBook"' 11' 20' 0));
Magic Number,Lucene.Net.Search.VectorHighlight,IndexTimeSynonymTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\IndexTimeSynonymTest.cs,makeIndex1w,The following statement contains a magic number: makeSynonymIndex("I'll buy a Macintosh"'                  t("I'll"' 0' 4)'                  t("buy"' 5' 8)'                  t("a"' 9' 10)'                  t("Macintosh"' 11' 20)' t("Mac"' 11' 20' 0)' t("MacBook"' 11' 20' 0));
Magic Number,Lucene.Net.Search.VectorHighlight,IndexTimeSynonymTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\IndexTimeSynonymTest.cs,makeIndex1w,The following statement contains a magic number: makeSynonymIndex("I'll buy a Macintosh"'                  t("I'll"' 0' 4)'                  t("buy"' 5' 8)'                  t("a"' 9' 10)'                  t("Macintosh"' 11' 20)' t("Mac"' 11' 20' 0)' t("MacBook"' 11' 20' 0));
Magic Number,Lucene.Net.Search.VectorHighlight,IndexTimeSynonymTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\IndexTimeSynonymTest.cs,makeIndex1w,The following statement contains a magic number: makeSynonymIndex("I'll buy a Macintosh"'                  t("I'll"' 0' 4)'                  t("buy"' 5' 8)'                  t("a"' 9' 10)'                  t("Macintosh"' 11' 20)' t("Mac"' 11' 20' 0)' t("MacBook"' 11' 20' 0));
Magic Number,Lucene.Net.Search.VectorHighlight,IndexTimeSynonymTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\IndexTimeSynonymTest.cs,makeIndex1w,The following statement contains a magic number: makeSynonymIndex("I'll buy a Macintosh"'                  t("I'll"' 0' 4)'                  t("buy"' 5' 8)'                  t("a"' 9' 10)'                  t("Macintosh"' 11' 20)' t("Mac"' 11' 20' 0)' t("MacBook"' 11' 20' 0));
Magic Number,Lucene.Net.Search.VectorHighlight,IndexTimeSynonymTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\IndexTimeSynonymTest.cs,makeIndex1w,The following statement contains a magic number: makeSynonymIndex("I'll buy a Macintosh"'                  t("I'll"' 0' 4)'                  t("buy"' 5' 8)'                  t("a"' 9' 10)'                  t("Macintosh"' 11' 20)' t("Mac"' 11' 20' 0)' t("MacBook"' 11' 20' 0));
Magic Number,Lucene.Net.Search.VectorHighlight,IndexTimeSynonymTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\IndexTimeSynonymTest.cs,makeIndex1w,The following statement contains a magic number: makeSynonymIndex("I'll buy a Macintosh"'                  t("I'll"' 0' 4)'                  t("buy"' 5' 8)'                  t("a"' 9' 10)'                  t("Macintosh"' 11' 20)' t("Mac"' 11' 20' 0)' t("MacBook"' 11' 20' 0));
Magic Number,Lucene.Net.Search.VectorHighlight,IndexTimeSynonymTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\IndexTimeSynonymTest.cs,makeIndex1w,The following statement contains a magic number: makeSynonymIndex("I'll buy a Macintosh"'                  t("I'll"' 0' 4)'                  t("buy"' 5' 8)'                  t("a"' 9' 10)'                  t("Macintosh"' 11' 20)' t("Mac"' 11' 20' 0)' t("MacBook"' 11' 20' 0));
Magic Number,Lucene.Net.Search.VectorHighlight,IndexTimeSynonymTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\IndexTimeSynonymTest.cs,makeIndex1w,The following statement contains a magic number: makeSynonymIndex("I'll buy a Macintosh"'                  t("I'll"' 0' 4)'                  t("buy"' 5' 8)'                  t("a"' 9' 10)'                  t("Macintosh"' 11' 20)' t("Mac"' 11' 20' 0)' t("MacBook"' 11' 20' 0));
Magic Number,Lucene.Net.Search.VectorHighlight,IndexTimeSynonymTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\IndexTimeSynonymTest.cs,makeIndex1w,The following statement contains a magic number: makeSynonymIndex("I'll buy a Macintosh"'                  t("I'll"' 0' 4)'                  t("buy"' 5' 8)'                  t("a"' 9' 10)'                  t("Macintosh"' 11' 20)' t("Mac"' 11' 20' 0)' t("MacBook"' 11' 20' 0));
Magic Number,Lucene.Net.Search.VectorHighlight,IndexTimeSynonymTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\IndexTimeSynonymTest.cs,makeIndex1w2w,The following statement contains a magic number: makeSynonymIndex("My pc was broken"'                  t("My"' 0' 2)'                  t("pc"' 3' 5)' t("personal"' 3' 5' 0)' t("computer"' 3' 5)'                  t("was"' 6' 9)'                  t("broken"' 10' 16));
Magic Number,Lucene.Net.Search.VectorHighlight,IndexTimeSynonymTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\IndexTimeSynonymTest.cs,makeIndex1w2w,The following statement contains a magic number: makeSynonymIndex("My pc was broken"'                  t("My"' 0' 2)'                  t("pc"' 3' 5)' t("personal"' 3' 5' 0)' t("computer"' 3' 5)'                  t("was"' 6' 9)'                  t("broken"' 10' 16));
Magic Number,Lucene.Net.Search.VectorHighlight,IndexTimeSynonymTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\IndexTimeSynonymTest.cs,makeIndex1w2w,The following statement contains a magic number: makeSynonymIndex("My pc was broken"'                  t("My"' 0' 2)'                  t("pc"' 3' 5)' t("personal"' 3' 5' 0)' t("computer"' 3' 5)'                  t("was"' 6' 9)'                  t("broken"' 10' 16));
Magic Number,Lucene.Net.Search.VectorHighlight,IndexTimeSynonymTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\IndexTimeSynonymTest.cs,makeIndex1w2w,The following statement contains a magic number: makeSynonymIndex("My pc was broken"'                  t("My"' 0' 2)'                  t("pc"' 3' 5)' t("personal"' 3' 5' 0)' t("computer"' 3' 5)'                  t("was"' 6' 9)'                  t("broken"' 10' 16));
Magic Number,Lucene.Net.Search.VectorHighlight,IndexTimeSynonymTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\IndexTimeSynonymTest.cs,makeIndex1w2w,The following statement contains a magic number: makeSynonymIndex("My pc was broken"'                  t("My"' 0' 2)'                  t("pc"' 3' 5)' t("personal"' 3' 5' 0)' t("computer"' 3' 5)'                  t("was"' 6' 9)'                  t("broken"' 10' 16));
Magic Number,Lucene.Net.Search.VectorHighlight,IndexTimeSynonymTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\IndexTimeSynonymTest.cs,makeIndex1w2w,The following statement contains a magic number: makeSynonymIndex("My pc was broken"'                  t("My"' 0' 2)'                  t("pc"' 3' 5)' t("personal"' 3' 5' 0)' t("computer"' 3' 5)'                  t("was"' 6' 9)'                  t("broken"' 10' 16));
Magic Number,Lucene.Net.Search.VectorHighlight,IndexTimeSynonymTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\IndexTimeSynonymTest.cs,makeIndex1w2w,The following statement contains a magic number: makeSynonymIndex("My pc was broken"'                  t("My"' 0' 2)'                  t("pc"' 3' 5)' t("personal"' 3' 5' 0)' t("computer"' 3' 5)'                  t("was"' 6' 9)'                  t("broken"' 10' 16));
Magic Number,Lucene.Net.Search.VectorHighlight,IndexTimeSynonymTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\IndexTimeSynonymTest.cs,makeIndex1w2w,The following statement contains a magic number: makeSynonymIndex("My pc was broken"'                  t("My"' 0' 2)'                  t("pc"' 3' 5)' t("personal"' 3' 5' 0)' t("computer"' 3' 5)'                  t("was"' 6' 9)'                  t("broken"' 10' 16));
Magic Number,Lucene.Net.Search.VectorHighlight,IndexTimeSynonymTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\IndexTimeSynonymTest.cs,makeIndex1w2w,The following statement contains a magic number: makeSynonymIndex("My pc was broken"'                  t("My"' 0' 2)'                  t("pc"' 3' 5)' t("personal"' 3' 5' 0)' t("computer"' 3' 5)'                  t("was"' 6' 9)'                  t("broken"' 10' 16));
Magic Number,Lucene.Net.Search.VectorHighlight,IndexTimeSynonymTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\IndexTimeSynonymTest.cs,makeIndex1w2w,The following statement contains a magic number: makeSynonymIndex("My pc was broken"'                  t("My"' 0' 2)'                  t("pc"' 3' 5)' t("personal"' 3' 5' 0)' t("computer"' 3' 5)'                  t("was"' 6' 9)'                  t("broken"' 10' 16));
Magic Number,Lucene.Net.Search.VectorHighlight,IndexTimeSynonymTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\IndexTimeSynonymTest.cs,makeIndex1w2w,The following statement contains a magic number: makeSynonymIndex("My pc was broken"'                  t("My"' 0' 2)'                  t("pc"' 3' 5)' t("personal"' 3' 5' 0)' t("computer"' 3' 5)'                  t("was"' 6' 9)'                  t("broken"' 10' 16));
Magic Number,Lucene.Net.Search.VectorHighlight,IndexTimeSynonymTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\IndexTimeSynonymTest.cs,makeIndex2w1w,The following statement contains a magic number: makeSynonymIndex("My personal computer was broken"'                  t("My"' 0' 2)'                  t("personal"' 3' 20)' t("pc"' 3' 20' 0)' t("computer"' 3' 20)'                  t("was"' 21' 24)'                  t("broken"' 25' 31));
Magic Number,Lucene.Net.Search.VectorHighlight,IndexTimeSynonymTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\IndexTimeSynonymTest.cs,makeIndex2w1w,The following statement contains a magic number: makeSynonymIndex("My personal computer was broken"'                  t("My"' 0' 2)'                  t("personal"' 3' 20)' t("pc"' 3' 20' 0)' t("computer"' 3' 20)'                  t("was"' 21' 24)'                  t("broken"' 25' 31));
Magic Number,Lucene.Net.Search.VectorHighlight,IndexTimeSynonymTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\IndexTimeSynonymTest.cs,makeIndex2w1w,The following statement contains a magic number: makeSynonymIndex("My personal computer was broken"'                  t("My"' 0' 2)'                  t("personal"' 3' 20)' t("pc"' 3' 20' 0)' t("computer"' 3' 20)'                  t("was"' 21' 24)'                  t("broken"' 25' 31));
Magic Number,Lucene.Net.Search.VectorHighlight,IndexTimeSynonymTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\IndexTimeSynonymTest.cs,makeIndex2w1w,The following statement contains a magic number: makeSynonymIndex("My personal computer was broken"'                  t("My"' 0' 2)'                  t("personal"' 3' 20)' t("pc"' 3' 20' 0)' t("computer"' 3' 20)'                  t("was"' 21' 24)'                  t("broken"' 25' 31));
Magic Number,Lucene.Net.Search.VectorHighlight,IndexTimeSynonymTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\IndexTimeSynonymTest.cs,makeIndex2w1w,The following statement contains a magic number: makeSynonymIndex("My personal computer was broken"'                  t("My"' 0' 2)'                  t("personal"' 3' 20)' t("pc"' 3' 20' 0)' t("computer"' 3' 20)'                  t("was"' 21' 24)'                  t("broken"' 25' 31));
Magic Number,Lucene.Net.Search.VectorHighlight,IndexTimeSynonymTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\IndexTimeSynonymTest.cs,makeIndex2w1w,The following statement contains a magic number: makeSynonymIndex("My personal computer was broken"'                  t("My"' 0' 2)'                  t("personal"' 3' 20)' t("pc"' 3' 20' 0)' t("computer"' 3' 20)'                  t("was"' 21' 24)'                  t("broken"' 25' 31));
Magic Number,Lucene.Net.Search.VectorHighlight,IndexTimeSynonymTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\IndexTimeSynonymTest.cs,makeIndex2w1w,The following statement contains a magic number: makeSynonymIndex("My personal computer was broken"'                  t("My"' 0' 2)'                  t("personal"' 3' 20)' t("pc"' 3' 20' 0)' t("computer"' 3' 20)'                  t("was"' 21' 24)'                  t("broken"' 25' 31));
Magic Number,Lucene.Net.Search.VectorHighlight,IndexTimeSynonymTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\IndexTimeSynonymTest.cs,makeIndex2w1w,The following statement contains a magic number: makeSynonymIndex("My personal computer was broken"'                  t("My"' 0' 2)'                  t("personal"' 3' 20)' t("pc"' 3' 20' 0)' t("computer"' 3' 20)'                  t("was"' 21' 24)'                  t("broken"' 25' 31));
Magic Number,Lucene.Net.Search.VectorHighlight,IndexTimeSynonymTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\IndexTimeSynonymTest.cs,makeIndex2w1w,The following statement contains a magic number: makeSynonymIndex("My personal computer was broken"'                  t("My"' 0' 2)'                  t("personal"' 3' 20)' t("pc"' 3' 20' 0)' t("computer"' 3' 20)'                  t("was"' 21' 24)'                  t("broken"' 25' 31));
Magic Number,Lucene.Net.Search.VectorHighlight,IndexTimeSynonymTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\IndexTimeSynonymTest.cs,makeIndex2w1w,The following statement contains a magic number: makeSynonymIndex("My personal computer was broken"'                  t("My"' 0' 2)'                  t("personal"' 3' 20)' t("pc"' 3' 20' 0)' t("computer"' 3' 20)'                  t("was"' 21' 24)'                  t("broken"' 25' 31));
Magic Number,Lucene.Net.Search.VectorHighlight,IndexTimeSynonymTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\IndexTimeSynonymTest.cs,makeIndex2w1w,The following statement contains a magic number: makeSynonymIndex("My personal computer was broken"'                  t("My"' 0' 2)'                  t("personal"' 3' 20)' t("pc"' 3' 20' 0)' t("computer"' 3' 20)'                  t("was"' 21' 24)'                  t("broken"' 25' 31));
Magic Number,Lucene.Net.Search.VectorHighlight,ScoreOrderFragmentsBuilderTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\ScoreOrderFragmentsBuilderTest.cs,Test3Frags,The following statement contains a magic number: String[] f = sofb.CreateFragments(reader' 0' F' ffl' 3);
Magic Number,Lucene.Net.Search.VectorHighlight,ScoreOrderFragmentsBuilderTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\ScoreOrderFragmentsBuilderTest.cs,Test3Frags,The following statement contains a magic number: assertEquals(3' f.Length);
Magic Number,Lucene.Net.Search.VectorHighlight,ScoreOrderFragmentsBuilderTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\ScoreOrderFragmentsBuilderTest.cs,Test3Frags,The following statement contains a magic number: assertEquals("<b>a</b> b b b b b b b b b b"' f[2]);
Magic Number,Lucene.Net.Search.VectorHighlight,ScoreOrderFragmentsBuilderTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\ScoreOrderFragmentsBuilderTest.cs,Ffl,The following statement contains a magic number: return new SimpleFragListBuilder().CreateFieldFragList(fpl' 20);
Magic Number,Lucene.Net.Search.VectorHighlight,SimpleFragListBuilderTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\SimpleFragListBuilderTest.cs,TestNullFieldFragList,The following statement contains a magic number: FieldFragList ffl = sflb.CreateFieldFragList(fpl(new TermQuery(new Term(F' "a"))' "b c d")' 100);
Magic Number,Lucene.Net.Search.VectorHighlight,SimpleFragListBuilderTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\SimpleFragListBuilderTest.cs,Test1TermIndex,The following statement contains a magic number: FieldFragList ffl = sflb.CreateFieldFragList(fpl(new TermQuery(new Term(F' "a"))' "a")' 100);
Magic Number,Lucene.Net.Search.VectorHighlight,SimpleFragListBuilderTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\SimpleFragListBuilderTest.cs,Test2TermsIndex1Frag,The following statement contains a magic number: FieldFragList ffl = sflb.CreateFieldFragList(fpl(new TermQuery(new Term(F' "a"))' "a a")' 100);
Magic Number,Lucene.Net.Search.VectorHighlight,SimpleFragListBuilderTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\SimpleFragListBuilderTest.cs,Test2TermsIndex1Frag,The following statement contains a magic number: ffl = sflb.CreateFieldFragList(fpl(new TermQuery(new Term(F' "a"))' "a b b b b b b b b a")' 20);
Magic Number,Lucene.Net.Search.VectorHighlight,SimpleFragListBuilderTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\SimpleFragListBuilderTest.cs,Test2TermsIndex1Frag,The following statement contains a magic number: ffl = sflb.CreateFieldFragList(fpl(new TermQuery(new Term(F' "a"))' "b b b b a b b b b a")' 20);
Magic Number,Lucene.Net.Search.VectorHighlight,SimpleFragListBuilderTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\SimpleFragListBuilderTest.cs,Test2TermsIndex2Frags,The following statement contains a magic number: FieldFragList ffl = sflb.CreateFieldFragList(fpl(new TermQuery(new Term(F' "a"))' "a b b b b b b b b b b b b b a")' 20);
Magic Number,Lucene.Net.Search.VectorHighlight,SimpleFragListBuilderTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\SimpleFragListBuilderTest.cs,Test2TermsIndex2Frags,The following statement contains a magic number: assertEquals(2' ffl.FragInfos.size());
Magic Number,Lucene.Net.Search.VectorHighlight,SimpleFragListBuilderTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\SimpleFragListBuilderTest.cs,Test2TermsIndex2Frags,The following statement contains a magic number: ffl = sflb.CreateFieldFragList(fpl(new TermQuery(new Term(F' "a"))' "a b b b b b b b b b b b b a")' 20);
Magic Number,Lucene.Net.Search.VectorHighlight,SimpleFragListBuilderTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\SimpleFragListBuilderTest.cs,Test2TermsIndex2Frags,The following statement contains a magic number: assertEquals(2' ffl.FragInfos.size());
Magic Number,Lucene.Net.Search.VectorHighlight,SimpleFragListBuilderTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\SimpleFragListBuilderTest.cs,Test2TermsIndex2Frags,The following statement contains a magic number: ffl = sflb.CreateFieldFragList(fpl(new TermQuery(new Term(F' "a"))' "a b b b b b b b b b a")' 20);
Magic Number,Lucene.Net.Search.VectorHighlight,SimpleFragListBuilderTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\SimpleFragListBuilderTest.cs,Test2TermsIndex2Frags,The following statement contains a magic number: assertEquals(2' ffl.FragInfos.size());
Magic Number,Lucene.Net.Search.VectorHighlight,SimpleFragListBuilderTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\SimpleFragListBuilderTest.cs,Test2TermsQuery,The following statement contains a magic number: FieldFragList ffl = sflb.CreateFieldFragList(fpl(booleanQuery' "c d e")' 20);
Magic Number,Lucene.Net.Search.VectorHighlight,SimpleFragListBuilderTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\SimpleFragListBuilderTest.cs,Test2TermsQuery,The following statement contains a magic number: ffl = sflb.CreateFieldFragList(fpl(booleanQuery' "d b c")' 20);
Magic Number,Lucene.Net.Search.VectorHighlight,SimpleFragListBuilderTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\SimpleFragListBuilderTest.cs,Test2TermsQuery,The following statement contains a magic number: ffl = sflb.CreateFieldFragList(fpl(booleanQuery' "a b c")' 20);
Magic Number,Lucene.Net.Search.VectorHighlight,SimpleFragListBuilderTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\SimpleFragListBuilderTest.cs,TestPhraseQuery,The following statement contains a magic number: FieldFragList ffl = sflb.CreateFieldFragList(fpl(phraseQuery' "c d e")' 20);
Magic Number,Lucene.Net.Search.VectorHighlight,SimpleFragListBuilderTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\SimpleFragListBuilderTest.cs,TestPhraseQuery,The following statement contains a magic number: ffl = sflb.CreateFieldFragList(fpl(phraseQuery' "a c b")' 20);
Magic Number,Lucene.Net.Search.VectorHighlight,SimpleFragListBuilderTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\SimpleFragListBuilderTest.cs,TestPhraseQuery,The following statement contains a magic number: ffl = sflb.CreateFieldFragList(fpl(phraseQuery' "a b c")' 20);
Magic Number,Lucene.Net.Search.VectorHighlight,SimpleFragListBuilderTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\SimpleFragListBuilderTest.cs,TestPhraseQuerySlop,The following statement contains a magic number: FieldFragList ffl = sflb.CreateFieldFragList(fpl(phraseQuery' "a c b")' 20);
Magic Number,Lucene.Net.Search.VectorHighlight,SimpleFragListBuilderTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\SimpleFragListBuilderTest.cs,Test1PhraseShortMV,The following statement contains a magic number: FieldFragList ffl = sflb.CreateFieldFragList(fpl' 100);
Magic Number,Lucene.Net.Search.VectorHighlight,SimpleFragListBuilderTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\SimpleFragListBuilderTest.cs,Test1PhraseLongMV,The following statement contains a magic number: FieldFragList ffl = sflb.CreateFieldFragList(fpl' 100);
Magic Number,Lucene.Net.Search.VectorHighlight,SimpleFragListBuilderTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\SimpleFragListBuilderTest.cs,Test1PhraseLongMVB,The following statement contains a magic number: FieldFragList ffl = sflb.CreateFieldFragList(fpl' 100);
Magic Number,Lucene.Net.Search.VectorHighlight,SimpleFragmentsBuilderTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\SimpleFragmentsBuilderTest.cs,Test2Frags,The following statement contains a magic number: String[] f = sfb.CreateFragments(reader' 0' F' ffl' 3);
Magic Number,Lucene.Net.Search.VectorHighlight,SimpleFragmentsBuilderTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\SimpleFragmentsBuilderTest.cs,Test2Frags,The following statement contains a magic number: assertEquals(2' f.Length);
Magic Number,Lucene.Net.Search.VectorHighlight,SimpleFragmentsBuilderTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\SimpleFragmentsBuilderTest.cs,Test3Frags,The following statement contains a magic number: String[] f = sfb.CreateFragments(reader' 0' F' ffl' 3);
Magic Number,Lucene.Net.Search.VectorHighlight,SimpleFragmentsBuilderTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\SimpleFragmentsBuilderTest.cs,Test3Frags,The following statement contains a magic number: assertEquals(3' f.Length);
Magic Number,Lucene.Net.Search.VectorHighlight,SimpleFragmentsBuilderTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\SimpleFragmentsBuilderTest.cs,Test3Frags,The following statement contains a magic number: assertEquals("<b>c</b> <b>a</b> <b>a</b> b b"' f[2]);
Magic Number,Lucene.Net.Search.VectorHighlight,SimpleFragmentsBuilderTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\SimpleFragmentsBuilderTest.cs,Ffl,The following statement contains a magic number: return new SimpleFragListBuilder().CreateFieldFragList(fpl' 20);
Magic Number,Lucene.Net.Search.VectorHighlight,SimpleFragmentsBuilderTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\SimpleFragmentsBuilderTest.cs,Test1PhraseShortMV,The following statement contains a magic number: FieldFragList ffl = sflb.CreateFieldFragList(fpl' 100);
Magic Number,Lucene.Net.Search.VectorHighlight,SimpleFragmentsBuilderTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\SimpleFragmentsBuilderTest.cs,Test1PhraseLongMV,The following statement contains a magic number: FieldFragList ffl = sflb.CreateFieldFragList(fpl' 100);
Magic Number,Lucene.Net.Search.VectorHighlight,SimpleFragmentsBuilderTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\SimpleFragmentsBuilderTest.cs,Test1PhraseLongMVB,The following statement contains a magic number: FieldFragList ffl = sflb.CreateFieldFragList(fpl' 100);
Magic Number,Lucene.Net.Search.VectorHighlight,SimpleFragmentsBuilderTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\SimpleFragmentsBuilderTest.cs,TestUnstoredField,The following statement contains a magic number: FieldFragList ffl = sflb.CreateFieldFragList(fpl' 100);
Magic Number,Lucene.Net.Search.VectorHighlight,SimpleFragmentsBuilderTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\SimpleFragmentsBuilderTest.cs,Test1StrMV,The following statement contains a magic number: FieldFragList ffl = sflb.CreateFieldFragList(fpl' 100);
Magic Number,Lucene.Net.Search.VectorHighlight,SimpleFragmentsBuilderTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\SimpleFragmentsBuilderTest.cs,TestMVSeparator,The following statement contains a magic number: FieldFragList ffl = sflb.CreateFieldFragList(fpl' 100);
Magic Number,Lucene.Net.Search.VectorHighlight,SimpleFragmentsBuilderTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\SimpleFragmentsBuilderTest.cs,TestDiscreteMultiValueHighlighting,The following statement contains a magic number: FieldFragList ffl = sflb.CreateFieldFragList(fpl' 100);
Magic Number,Lucene.Net.Search.VectorHighlight,SimpleFragmentsBuilderTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\SimpleFragmentsBuilderTest.cs,TestDiscreteMultiValueHighlighting,The following statement contains a magic number: ffl = sflb.CreateFieldFragList(fpl' 32);
Magic Number,Lucene.Net.Search.VectorHighlight,SimpleFragmentsBuilderTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\SimpleFragmentsBuilderTest.cs,TestDiscreteMultiValueHighlighting,The following statement contains a magic number: String[] result = sfb.CreateFragments(reader' 0' F' ffl' 3);
Magic Number,Lucene.Net.Search.VectorHighlight,SimpleFragmentsBuilderTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\SimpleFragmentsBuilderTest.cs,TestDiscreteMultiValueHighlighting,The following statement contains a magic number: assertEquals(2' result.Length);
Magic Number,Lucene.Net.Search.VectorHighlight,SimpleFragmentsBuilderTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\SimpleFragmentsBuilderTest.cs,TestDiscreteMultiValueHighlighting,The following statement contains a magic number: ffl = sflb.CreateFieldFragList(fpl' 32);
Magic Number,Lucene.Net.Search.VectorHighlight,SimpleFragmentsBuilderTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\SimpleFragmentsBuilderTest.cs,TestDiscreteMultiValueHighlighting,The following statement contains a magic number: result = sfb.CreateFragments(reader' 0' F' ffl' 3);
Magic Number,Lucene.Net.Search.VectorHighlight,SimpleFragmentsBuilderTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\SimpleFragmentsBuilderTest.cs,TestDiscreteMultiValueHighlighting,The following statement contains a magic number: assertEquals(2' result.Length);
Magic Number,Lucene.Net.Search.VectorHighlight,SimpleFragmentsBuilderTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\SimpleFragmentsBuilderTest.cs,TestRandomDiscreteMultiValueHighlighting,The following statement contains a magic number: String[]              randomValues = new String[3 + Random.nextInt(10 * RANDOM_MULTIPLIER)];
Magic Number,Lucene.Net.Search.VectorHighlight,SimpleFragmentsBuilderTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\SimpleFragmentsBuilderTest.cs,TestRandomDiscreteMultiValueHighlighting,The following statement contains a magic number: String[]              randomValues = new String[3 + Random.nextInt(10 * RANDOM_MULTIPLIER)];
Magic Number,Lucene.Net.Search.VectorHighlight,SimpleFragmentsBuilderTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\SimpleFragmentsBuilderTest.cs,TestRandomDiscreteMultiValueHighlighting,The following statement contains a magic number: int numDocs = randomValues.Length * 5;
Magic Number,Lucene.Net.Search.VectorHighlight,SimpleFragmentsBuilderTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\SimpleFragmentsBuilderTest.cs,TestRandomDiscreteMultiValueHighlighting,The following statement contains a magic number: int numFields = 2 + Random.nextInt(5);
Magic Number,Lucene.Net.Search.VectorHighlight,SimpleFragmentsBuilderTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\SimpleFragmentsBuilderTest.cs,TestRandomDiscreteMultiValueHighlighting,The following statement contains a magic number: int numFields = 2 + Random.nextInt(5);
Magic Number,Lucene.Net.Search.VectorHighlight,SimpleFragmentsBuilderTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\SimpleFragmentsBuilderTest.cs,TestRandomDiscreteMultiValueHighlighting,The following statement contains a magic number: int numTerms = 2 + Random.nextInt(3);
Magic Number,Lucene.Net.Search.VectorHighlight,SimpleFragmentsBuilderTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\SimpleFragmentsBuilderTest.cs,TestRandomDiscreteMultiValueHighlighting,The following statement contains a magic number: int numTerms = 2 + Random.nextInt(3);
Magic Number,Lucene.Net.Search.VectorHighlight,SimpleFragmentsBuilderTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\SimpleFragmentsBuilderTest.cs,TestRandomDiscreteMultiValueHighlighting,The following statement contains a magic number: int highlightIters = 1 + Random.nextInt(120 * RANDOM_MULTIPLIER);
Magic Number,Lucene.Net.Search.VectorHighlight,SimpleFragmentsBuilderTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\SimpleFragmentsBuilderTest.cs,TestRandomDiscreteMultiValueHighlighting,The following statement contains a magic number: SimpleFragListBuilder sflb = new SimpleFragListBuilder(100);
Magic Number,Lucene.Net.Search.VectorHighlight,SimpleFragmentsBuilderTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\SimpleFragmentsBuilderTest.cs,TestRandomDiscreteMultiValueHighlighting,The following statement contains a magic number: FieldFragList ffl = sflb.CreateFieldFragList(fpl' 300);
Magic Number,Lucene.Net.Search.VectorHighlight,SingleFragListBuilderTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\SingleFragListBuilderTest.cs,TestNullFieldFragList,The following statement contains a magic number: FieldFragList ffl = sflb.CreateFieldFragList(fpl(new TermQuery(new Term(F' "a"))' "b c d")' 100);
Magic Number,Lucene.Net.Search.VectorHighlight,SingleFragListBuilderTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\SingleFragListBuilderTest.cs,TestShortFieldFragList,The following statement contains a magic number: FieldFragList ffl = sflb.CreateFieldFragList(fpl(new TermQuery(new Term(F' "a"))' "a b c d")' 100);
Magic Number,Lucene.Net.Search.VectorHighlight,SingleFragListBuilderTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\SingleFragListBuilderTest.cs,TestLongFieldFragList,The following statement contains a magic number: FieldFragList ffl = sflb.CreateFieldFragList(fpl(new TermQuery(new Term(F' "a"))' "a b c d"' "a b c d e f g h i"' "j k l m n o p q r s t u v w x y z a b c"' "d e f g")' 100);
Magic Number,Lucene.Net.Search.VectorHighlight,WeightedFragListBuilderTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\WeightedFragListBuilderTest.cs,Test2WeightedFragList,The following statement contains a magic number: TestCase(pqF("the"' "both")' 100'                  "subInfos=(theboth((195'203)))/0.8679108(149'249)"'                  0.8679108);
Magic Number,Lucene.Net.Search.VectorHighlight,WeightedFragListBuilderTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\WeightedFragListBuilderTest.cs,Test2WeightedFragList,The following statement contains a magic number: TestCase(pqF("the"' "both")' 100'                  "subInfos=(theboth((195'203)))/0.8679108(149'249)"'                  0.8679108);
Magic Number,Lucene.Net.Search.VectorHighlight,WeightedFragListBuilderTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\WeightedFragListBuilderTest.cs,Test2SubInfos,The following statement contains a magic number: TestCase(query' 1000'                  "subInfos=(examples((19'27))examples((66'74))theboth((195'203)))/1.8411169(0'1000)"'                  1.8411169);
Magic Number,Lucene.Net.Search.VectorHighlight,WeightedFragListBuilderTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\WeightedFragListBuilderTest.cs,Test2SubInfos,The following statement contains a magic number: TestCase(query' 1000'                  "subInfos=(examples((19'27))examples((66'74))theboth((195'203)))/1.8411169(0'1000)"'                  1.8411169);
Magic Number,Lucene.Net.Search.VectorHighlight,WeightedFragListBuilderTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\VectorHighlight\WeightedFragListBuilderTest.cs,TestCase,The following statement contains a magic number: assertEquals(expectedTotalSubInfoBoost' totalSubInfoBoost' .0000001);
Duplicate Code,Lucene.Net.Search.Highlight,HighlighterTest,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests.Highlighter\Highlight\HighlighterTest.cs,TestSimpleQueryScorerPhraseHighlighting,The method contains a code clone-set at the following line numbers (starting from the method definition): ((35' 57)' (65' 87))
