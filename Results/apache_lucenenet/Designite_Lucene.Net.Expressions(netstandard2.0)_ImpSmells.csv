Implementation smell,Namespace,Class,File,Method,Description
Long Method,Lucene.Net.Expressions.JS,JavascriptCompiler,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptCompiler.cs,RecursiveCompile,The method has 240 lines of code.
Long Method,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MDECIMAL,The method has 160 lines of code.
Long Method,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MHEX,The method has 111 lines of code.
Long Method,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The method has 484 lines of code.
Long Method,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,GetReadableTokenString,The method has 129 lines of code.
Long Method,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Postfix,The method has 124 lines of code.
Complex Method,Lucene.Net.Expressions,ExpressionValueSource,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\ExpressionValueSource.cs,ExpressionValueSource,Cyclomatic complexity of the method is 8
Complex Method,Lucene.Net.Expressions,ExpressionValueSource,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\ExpressionValueSource.cs,Equals,Cyclomatic complexity of the method is 9
Complex Method,Lucene.Net.Expressions,SimpleBindings,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\SimpleBindings.cs,GetValueSource,Cyclomatic complexity of the method is 8
Complex Method,Lucene.Net.Expressions.JS,JavascriptCompiler,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptCompiler.cs,RecursiveCompile,Cyclomatic complexity of the method is 35
Complex Method,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MDECIMAL,Cyclomatic complexity of the method is 15
Complex Method,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MHEX,Cyclomatic complexity of the method is 10
Complex Method,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MDECIMALINTEGER,Cyclomatic complexity of the method is 8
Complex Method,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MEXPONENT,Cyclomatic complexity of the method is 9
Complex Method,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,Cyclomatic complexity of the method is 66
Complex Method,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,GetReadableTokenString,Cyclomatic complexity of the method is 31
Long Identifier,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,,The length of the parameter FOLLOW_conditional_in_expression737 is 35.
Long Identifier,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,,The length of the parameter FOLLOW_logical_or_in_conditional757 is 35.
Long Identifier,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,,The length of the parameter FOLLOW_AT_COND_QUE_in_conditional760 is 36.
Long Identifier,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,,The length of the parameter FOLLOW_conditional_in_conditional763 is 36.
Long Identifier,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,,The length of the parameter FOLLOW_AT_COLON_in_conditional765 is 33.
Long Identifier,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,,The length of the parameter FOLLOW_conditional_in_conditional768 is 36.
Long Identifier,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,,The length of the parameter FOLLOW_logical_and_in_logical_or787 is 35.
Long Identifier,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,,The length of the parameter FOLLOW_AT_BOOL_OR_in_logical_or790 is 34.
Long Identifier,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,,The length of the parameter FOLLOW_logical_and_in_logical_or793 is 35.
Long Identifier,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,,The length of the parameter FOLLOW_bitwise_or_in_logical_and812 is 35.
Long Identifier,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,,The length of the parameter FOLLOW_AT_BOOL_AND_in_logical_and815 is 36.
Long Identifier,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,,The length of the parameter FOLLOW_bitwise_or_in_logical_and818 is 35.
Long Identifier,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,,The length of the parameter FOLLOW_bitwise_xor_in_bitwise_or837 is 35.
Long Identifier,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,,The length of the parameter FOLLOW_AT_BIT_OR_in_bitwise_or840 is 33.
Long Identifier,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,,The length of the parameter FOLLOW_bitwise_xor_in_bitwise_or843 is 35.
Long Identifier,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,,The length of the parameter FOLLOW_bitwise_and_in_bitwise_xor862 is 36.
Long Identifier,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,,The length of the parameter FOLLOW_AT_BIT_XOR_in_bitwise_xor865 is 35.
Long Identifier,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,,The length of the parameter FOLLOW_bitwise_and_in_bitwise_xor868 is 36.
Long Identifier,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,,The length of the parameter FOLLOW_equality_in_bitwise_and888 is 33.
Long Identifier,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,,The length of the parameter FOLLOW_AT_BIT_AND_in_bitwise_and891 is 35.
Long Identifier,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,,The length of the parameter FOLLOW_equality_in_bitwise_and894 is 33.
Long Identifier,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,,The length of the parameter FOLLOW_relational_in_equality913 is 32.
Long Identifier,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,,The length of the parameter FOLLOW_relational_in_equality925 is 32.
Long Identifier,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,,The length of the parameter FOLLOW_multiplicative_in_additive1018 is 37.
Long Identifier,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,,The length of the parameter FOLLOW_multiplicative_in_additive1030 is 37.
Long Identifier,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,,The length of the parameter FOLLOW_unary_in_multiplicative1049 is 34.
Long Identifier,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,,The length of the parameter FOLLOW_set_in_multiplicative1052 is 32.
Long Identifier,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,,The length of the parameter FOLLOW_unary_in_multiplicative1065 is 34.
Long Identifier,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,,The length of the parameter FOLLOW_unary_operator_in_unary1103 is 34.
Long Identifier,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,,The length of the parameter FOLLOW_AT_SUBTRACT_in_unary_operator1123 is 40.
Long Identifier,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,,The length of the parameter FOLLOW_AT_BIT_NOT_in_unary_operator1135 is 39.
Long Identifier,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,,The length of the parameter FOLLOW_AT_BOOL_NOT_in_unary_operator1143 is 40.
Long Identifier,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,,The length of the parameter FOLLOW_NAMESPACE_ID_in_postfix1168 is 34.
Long Identifier,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,,The length of the parameter FOLLOW_arguments_in_postfix1170 is 31.
Long Identifier,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,,The length of the parameter FOLLOW_NAMESPACE_ID_in_primary1198 is 34.
Long Identifier,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,,The length of the parameter FOLLOW_AT_LPAREN_in_primary1214 is 31.
Long Identifier,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,,The length of the parameter FOLLOW_conditional_in_primary1217 is 33.
Long Identifier,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,,The length of the parameter FOLLOW_AT_RPAREN_in_primary1219 is 31.
Long Identifier,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,,The length of the parameter FOLLOW_AT_LPAREN_in_arguments1237 is 33.
Long Identifier,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,,The length of the parameter FOLLOW_conditional_in_arguments1241 is 35.
Long Identifier,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,,The length of the parameter FOLLOW_AT_COMMA_in_arguments1244 is 32.
Long Identifier,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,,The length of the parameter FOLLOW_conditional_in_arguments1247 is 35.
Long Identifier,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,,The length of the parameter FOLLOW_AT_RPAREN_in_arguments1253 is 33.
Long Statement,Lucene.Net.Expressions.JS,JavascriptCompiler,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptCompiler.cs,GetDefaultSettings,The length of the statement  "            using (var reader = new StreamReader(assembly.FindAndGetManifestResourceStream(type' type.GetTypeInfo().Name + ".properties"))) " is 127.
Long Statement,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MID,The length of the statement  "					// src/java/org/apache/lucene/expressions/js/Javascript.g:340:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* ) " is 150.
Long Statement,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MID,The length of the statement  "					// src/java/org/apache/lucene/expressions/js/Javascript.g:340:7: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* " is 146.
Long Statement,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MDECIMAL,The length of the statement  "		        // src/java/org/apache/lucene/expressions/js/Javascript.g:347:5: ( DECIMALINTEGER AT_DOT ( DECIMALDIGIT )* ( EXPONENT )? | AT_DOT ( DECIMALDIGIT )+ ( EXPONENT )? | DECIMALINTEGER ( EXPONENT )? ) " is 194.
Long Statement,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The length of the statement  "			// src/java/org/apache/lucene/expressions/js/Javascript.g:1:8: ( AT_ADD | AT_BIT_AND | AT_BIT_NOT | AT_BIT_OR | AT_BIT_SHL | AT_BIT_SHR | AT_BIT_SHU | AT_BIT_XOR | AT_BOOL_AND | AT_BOOL_NOT | AT_BOOL_OR | AT_COLON | AT_COMMA | AT_COMP_EQ | AT_COMP_GT | AT_COMP_GTE | AT_COMP_LT | AT_COMP_LTE | AT_COMP_NEQ | AT_COND_QUE | AT_DIVIDE | AT_DOT | AT_LPAREN | AT_MODULO | AT_MULTIPLY | AT_RPAREN | AT_SUBTRACT | NAMESPACE_ID | WS | DECIMAL | OCTAL | HEX ) " is 450.
Long Statement,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Conditional,The length of the statement  "                    // src/java/org/apache/lucene/expressions/js/Javascript.g:255:5: ( logical_or ( AT_COND_QUE ^ conditional AT_COLON ! conditional )? ) " is 133.
Long Statement,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Conditional,The length of the statement  "                    // src/java/org/apache/lucene/expressions/js/Javascript.g:255:7: logical_or ( AT_COND_QUE ^ conditional AT_COLON ! conditional )? " is 129.
Long Statement,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Equality,The length of the statement  "                    // src/java/org/apache/lucene/expressions/js/Javascript.g:279:5: ( relational ( ( AT_COMP_EQ | AT_COMP_NEQ ) ^ relational )* ) " is 126.
Long Statement,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Equality,The length of the statement  "                    // src/java/org/apache/lucene/expressions/js/Javascript.g:279:7: relational ( ( AT_COMP_EQ | AT_COMP_NEQ ) ^ relational )* " is 122.
Long Statement,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Relational,The length of the statement  "                    // src/java/org/apache/lucene/expressions/js/Javascript.g:283:5: ( shift ( ( AT_COMP_LT | AT_COMP_GT | AT_COMP_LTE | AT_COMP_GTE ) ^ shift )* ) " is 143.
Long Statement,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Relational,The length of the statement  "                    // src/java/org/apache/lucene/expressions/js/Javascript.g:283:7: shift ( ( AT_COMP_LT | AT_COMP_GT | AT_COMP_LTE | AT_COMP_GTE ) ^ shift )* " is 139.
Long Statement,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Relational,The length of the statement  "                    // src/java/org/apache/lucene/expressions/js/Javascript.g:283:13: ( ( AT_COMP_LT | AT_COMP_GT | AT_COMP_LTE | AT_COMP_GTE ) ^ shift )* " is 134.
Long Statement,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Relational,The length of the statement  "                                    // src/java/org/apache/lucene/expressions/js/Javascript.g:283:14: ( AT_COMP_LT | AT_COMP_GT | AT_COMP_LTE | AT_COMP_GTE ) ^ shift " is 129.
Long Statement,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Shift,The length of the statement  "                    // src/java/org/apache/lucene/expressions/js/Javascript.g:287:5: ( additive ( ( AT_BIT_SHL | AT_BIT_SHR | AT_BIT_SHU ) ^ additive )* ) " is 134.
Long Statement,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Shift,The length of the statement  "                    // src/java/org/apache/lucene/expressions/js/Javascript.g:287:7: additive ( ( AT_BIT_SHL | AT_BIT_SHR | AT_BIT_SHU ) ^ additive )* " is 130.
Long Statement,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Shift,The length of the statement  "                    // src/java/org/apache/lucene/expressions/js/Javascript.g:287:16: ( ( AT_BIT_SHL | AT_BIT_SHR | AT_BIT_SHU ) ^ additive )* " is 122.
Long Statement,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Additive,The length of the statement  "                    // src/java/org/apache/lucene/expressions/js/Javascript.g:291:5: ( multiplicative ( ( AT_ADD | AT_SUBTRACT ) ^ multiplicative )* ) " is 130.
Long Statement,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Additive,The length of the statement  "                    // src/java/org/apache/lucene/expressions/js/Javascript.g:291:7: multiplicative ( ( AT_ADD | AT_SUBTRACT ) ^ multiplicative )* " is 126.
Long Statement,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Multiplicative,The length of the statement  "                    // src/java/org/apache/lucene/expressions/js/Javascript.g:295:5: ( unary ( ( AT_MULTIPLY | AT_DIVIDE | AT_MODULO ) ^ unary )* ) " is 127.
Long Statement,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Multiplicative,The length of the statement  "                    // src/java/org/apache/lucene/expressions/js/Javascript.g:295:7: unary ( ( AT_MULTIPLY | AT_DIVIDE | AT_MODULO ) ^ unary )* " is 123.
Long Statement,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Unary_Operator,The length of the statement  "                // src/java/org/apache/lucene/expressions/js/Javascript.g:305:5: ( AT_SUBTRACT -> AT_NEGATE | AT_BIT_NOT | AT_BOOL_NOT ) " is 120.
Long Statement,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Postfix,The length of the statement  "                // src/java/org/apache/lucene/expressions/js/Javascript.g:311:5: ( primary | NAMESPACE_ID arguments -> ^( AT_CALL NAMESPACE_ID ( arguments )? ) ) " is 145.
Long Statement,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Primary,The length of the statement  "                // src/java/org/apache/lucene/expressions/js/Javascript.g:316:5: ( NAMESPACE_ID | numeric | AT_LPAREN ! conditional AT_RPAREN !) " is 128.
Long Statement,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Arguments,The length of the statement  "                    // src/java/org/apache/lucene/expressions/js/Javascript.g:322:5: ( AT_LPAREN ! ( conditional ( AT_COMMA ! conditional )* )? AT_RPAREN !) " is 136.
Long Statement,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Arguments,The length of the statement  "                    // src/java/org/apache/lucene/expressions/js/Javascript.g:322:7: AT_LPAREN ! ( conditional ( AT_COMMA ! conditional )* )? AT_RPAREN ! " is 133.
Complex Conditional,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MID,The conditional expression  "(input.LA(1) >= 'A' && input.LA(1) <= 'Z') || input.LA(1) == '_' || (input.LA  						(1) >= 'a' && input.LA(1) <= 'z')"  is complex.
Complex Conditional,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MID,The conditional expression  "((LA2_0 >= '0' && LA2_0 <= '9') || (LA2_0 >= 'A' && LA2_0 <= 'Z') || LA2_0 ==  							 '_' || (LA2_0 >= 'a' && LA2_0 <= 'z'))"  is complex.
Complex Conditional,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MID,The conditional expression  "(input.LA(1) >= '0' && input.LA(1) <= '9') || (input.LA(1) >= 'A' && input.LA  									(1) <= 'Z') || input.LA(1) == '_' || (input.LA(1) >= 'a' && input.LA(1) <= 'z')"  is complex.
Complex Conditional,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MWS,The conditional expression  "((LA3_0 >= '\t' && LA3_0 <= '\n') || LA3_0 == '\r' || LA3_0 == ' ')"  is complex.
Complex Conditional,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MWS,The conditional expression  "(input.LA(1) >= '\t' && input.LA(1) <= '\n') || input.LA(1) == '\r' || input.  									LA(1) == ' '"  is complex.
Complex Conditional,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MHEX,The conditional expression  "((LA12_0 >= '0' && LA12_0 <= '9') || (LA12_0 >= 'A' && LA12_0 <= 'F') || (LA12_0  							 >= 'a' && LA12_0 <= 'f'))"  is complex.
Complex Conditional,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MHEX,The conditional expression  "(input.LA(1) >= '0' && input.LA(1) <= '9') || (input.LA(1) >= 'A' && input.LA  									(1) <= 'F') || (input.LA(1) >= 'a' && input.LA(1) <= 'f')"  is complex.
Complex Conditional,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MHEXDIGIT,The conditional expression  "(input.LA(1) >= '0' && input.LA(1) <= '9') || (input.LA(1) >= 'A' && input.LA  						(1) <= 'F') || (input.LA(1) >= 'a' && input.LA(1) <= 'f')"  is complex.
Complex Conditional,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Postfix,The conditional expression  "(LA14_1 == EOF || (LA14_1 >= AT_ADD && LA14_1 <= AT_BIT_AND) || (LA14_1 >= AT_BIT_OR                           && LA14_1 <= AT_BOOL_AND) || LA14_1 == AT_BOOL_OR || (LA14_1 >= AT_COLON && LA14_1                           <= AT_DIVIDE) || (LA14_1 >= AT_MODULO && LA14_1 <= AT_MULTIPLY) || (LA14_1 >= AT_RPAREN                           && LA14_1 <= AT_SUBTRACT))"  is complex.
Complex Conditional,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Postfix,The conditional expression  "(LA14_0 == AT_LPAREN || LA14_0 == DECIMAL || LA14_0 == HEX || LA14_0 == OCTAL                          )"  is complex.
Complex Conditional,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Arguments,The conditional expression  "(LA17_0 == AT_ADD || LA17_0 == AT_BIT_NOT || LA17_0 == AT_BOOL_NOT || LA17_0                          == AT_LPAREN || (LA17_0 >= AT_SUBTRACT && LA17_0 <= DECIMAL) || LA17_0 == HEX ||                           (LA17_0 >= NAMESPACE_ID && LA17_0 <= OCTAL))"  is complex.
Virtual Method Call from Constructor,Lucene.Net.Expressions,ExpressionRescorer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\ExpressionRescorer.cs,ExpressionRescorer,The constructor "ExpressionRescorer" calls a virtual method "GetSortField".
Virtual Method Call from Constructor,Lucene.Net.Expressions,ExpressionValueSource,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\ExpressionValueSource.cs,ExpressionValueSource,The constructor "ExpressionValueSource" calls a virtual method "GetValueSource".
Magic Number,Lucene.Net.Expressions,ExpressionSortField,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\ExpressionSortField.cs,GetHashCode,The following statement contains a magic number: int prime = 31;
Magic Number,Lucene.Net.Expressions,ExpressionValueSource,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\ExpressionValueSource.cs,GetHashCode,The following statement contains a magic number: int prime = 31;
Magic Number,Lucene.Net.Expressions,ExpressionValueSource,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\ExpressionValueSource.cs,GetHashCode,The following statement contains a magic number: result = prime * result + (needsScores ? 1231 : 1237);
Magic Number,Lucene.Net.Expressions,ExpressionValueSource,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\ExpressionValueSource.cs,GetHashCode,The following statement contains a magic number: result = prime * result + (needsScores ? 1231 : 1237);
Magic Number,Lucene.Net.Expressions.JS,JavascriptCompiler,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptCompiler.cs,UnusedTestCompile,The following statement contains a magic number: double ret = f.DoubleVal(2);
Magic Number,Lucene.Net.Expressions.JS,JavascriptCompiler,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptCompiler.cs,RecursiveCompile,The following statement contains a magic number: switch (type)              {                  case JavascriptParser.AT_CALL:                      {                          ITree identifier = current.GetChild(0);                          string call = identifier.Text;                          int arguments = current.ChildCount - 1;                          MethodInfo method;                          if (!functions.TryGetValue(call' out method) || method == null)                          {                              throw new ArgumentException("Unrecognized method call (" + call + ").");                          }                          int arity = method.GetParameters().Length;                          if (arguments != arity)                          {                              throw new ArgumentException("Expected (" + arity + ") arguments for method call ("                                                          + call + ")' but found (" + arguments + ").");                          }                          for (int argument = 1; argument <= arguments; ++argument)                          {                              RecursiveCompile(current.GetChild(argument)' typeof(double));                          }                          gen.Emit(OpCodes.Call' method);                          break;                      }                  case JavascriptParser.NAMESPACE_ID:                      {                          int index;                          if (externalsMap.ContainsKey(text))                          {                              index = externalsMap[text];                          }                          else                          {                              index = externalsMap.Count;                              externalsMap[text] = index;                          }                          gen.Emit(OpCodes.Nop);                            gen.Emit(OpCodes.Ldarg_2);                          gen.Emit(OpCodes.Ldc_I4' index);                            gen.Emit(OpCodes.Ldelem_Ref);                          gen.Emit(OpCodes.Ldarg_1);                          gen.Emit(OpCodes.Callvirt' DOUBLE_VAL_METHOD);                          break;                      }                  case JavascriptParser.HEX:                      {                          PushInt64(Convert.ToInt64(text' 16));                          break;                      }                  case JavascriptParser.OCTAL:                      {                          PushInt64(Convert.ToInt64(text' 8));                          break;                      }                    case JavascriptParser.DECIMAL:                      {                          //.NET Port. This is a bit hack-y but was needed since .NET can't perform bitwise ops on longs & doubles                          var bitwiseOps = new[]{ ">>"'"<<"'"&"'"~"'"|"'"^"};                            if (bitwiseOps.Any(s => sourceText.Contains(s)))                          {                              int val;                              if (int.TryParse(text' NumberStyles.Integer' CultureInfo.InvariantCulture' out val))                              {                                  gen.Emit(OpCodes.Ldc_I4' val);                              }                              else                              {                                  gen.Emit(OpCodes.Ldc_I8'long.Parse(text' CultureInfo.InvariantCulture));                                  gen.Emit(OpCodes.Conv_Ovf_U4_Un);                              }                          }                          else                          {                              gen.Emit(OpCodes.Ldc_R8' double.Parse(text' CultureInfo.InvariantCulture));                          }                          break;                      }                    case JavascriptParser.AT_NEGATE:                      {                          RecursiveCompile(current.GetChild(0)' typeof(double));                          gen.Emit(OpCodes.Neg);                          break;                      }                    case JavascriptParser.AT_ADD:                      {                          PushArith(OpCodes.Add' current' expected);                          break;                      }                    case JavascriptParser.AT_SUBTRACT:                      {                          PushArith(OpCodes.Sub' current' expected);                          break;                      }                    case JavascriptParser.AT_MULTIPLY:                      {                          PushArith(OpCodes.Mul' current' expected);                          break;                      }                    case JavascriptParser.AT_DIVIDE:                      {                          PushArith(OpCodes.Div' current' expected);                          break;                      }                    case JavascriptParser.AT_MODULO:                      {                          PushArith(OpCodes.Rem' current' expected);                          break;                      }                    case JavascriptParser.AT_BIT_SHL:                      {                          PushShift(OpCodes.Shl' current);                          break;                      }                    case JavascriptParser.AT_BIT_SHR:                      {                          PushShift(OpCodes.Shr' current);                          break;                      }                    case JavascriptParser.AT_BIT_SHU:                      {                          PushShift(OpCodes.Shr_Un' current);                          break;                      }                    case JavascriptParser.AT_BIT_AND:                      {                          PushBitwise(OpCodes.And' current);                          break;                      }                    case JavascriptParser.AT_BIT_OR:                      {                          PushBitwise(OpCodes.Or' current);                          break;                      }                    case JavascriptParser.AT_BIT_XOR:                      {                          PushBitwise(OpCodes.Xor' current);                          break;                      }                    case JavascriptParser.AT_BIT_NOT:                      {                          RecursiveCompile(current.GetChild(0)' typeof(long));                          gen.Emit(OpCodes.Not);                          gen.Emit(OpCodes.Conv_R8);                          break;                      }                    case JavascriptParser.AT_COMP_EQ:                      {                          PushCond(OpCodes.Ceq' current' expected);                          break;                      }                    case JavascriptParser.AT_COMP_NEQ:                      {                          PushCondEq(OpCodes.Ceq' current' expected);                          break;                      }                    case JavascriptParser.AT_COMP_LT:                      {                          PushCond(OpCodes.Clt' current' expected);                          break;                      }                    case JavascriptParser.AT_COMP_GT:                      {                          PushCond(OpCodes.Cgt' current' expected);                          break;                      }                    case JavascriptParser.AT_COMP_LTE:                      {                          PushCondEq(OpCodes.Cgt' current' expected);                          break;                      }                    case JavascriptParser.AT_COMP_GTE:                      {                          PushCondEq(OpCodes.Clt' current' expected);                          break;                      }                    case JavascriptParser.AT_BOOL_NOT:                      {                          RecursiveCompile(current.GetChild(0)' typeof(int));                          gen.Emit(OpCodes.Ldc_I4_0);                          gen.Emit(OpCodes.Ceq);                          gen.Emit(OpCodes.Conv_R8);                          break;                      }                    case JavascriptParser.AT_BOOL_AND:                      {                            RecursiveCompile(current.GetChild(0)' typeof(int));                          gen.Emit(OpCodes.Ldc_I4_0);                          gen.Emit(OpCodes.Ceq);                          RecursiveCompile(current.GetChild(1)' typeof(int));                            gen.Emit(OpCodes.Ldc_I4_0);                          gen.Emit(OpCodes.Ceq);                            gen.Emit(OpCodes.Or);                            gen.Emit(OpCodes.Ldc_I4_0);                          gen.Emit(OpCodes.Ceq);                            gen.Emit(OpCodes.Conv_R8);                              break;                      }                    case JavascriptParser.AT_BOOL_OR:                      {                          RecursiveCompile(current.GetChild(0)' typeof(int));                          gen.Emit(OpCodes.Ldc_I4_0);                          gen.Emit(OpCodes.Ceq);                          gen.Emit(OpCodes.Ldc_I4_1);                          gen.Emit(OpCodes.Xor);                          RecursiveCompile(current.GetChild(1)' typeof(int));                            gen.Emit(OpCodes.Ldc_I4_0);                          gen.Emit(OpCodes.Ceq);                          gen.Emit(OpCodes.Ldc_I4_1);                          gen.Emit(OpCodes.Xor);                          gen.Emit(OpCodes.Or);                            gen.Emit(OpCodes.Ldc_I4_1);                          gen.Emit(OpCodes.Ceq);                            gen.Emit(OpCodes.Conv_R8);                          break;                      }                    case JavascriptParser.AT_COND_QUE:                      {                          Label condFalse = gen.DefineLabel();                          Label condEnd = gen.DefineLabel();                          RecursiveCompile(current.GetChild(0)' typeof(int));                          gen.Emit(OpCodes.Ldc_I4_0);                          gen.Emit(OpCodes.Beq'condFalse);                          RecursiveCompile(current.GetChild(1)' expected);                          gen.Emit(OpCodes.Br_S'condEnd);                          gen.MarkLabel(condFalse);                          RecursiveCompile(current.GetChild(2)' expected);                          gen.MarkLabel(condEnd);                          break;                      }                    default:                      {                          throw new InvalidOperationException("Unknown operation specified: (" + current.Text + ").");                      }              }
Magic Number,Lucene.Net.Expressions.JS,JavascriptCompiler,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptCompiler.cs,RecursiveCompile,The following statement contains a magic number: switch (type)              {                  case JavascriptParser.AT_CALL:                      {                          ITree identifier = current.GetChild(0);                          string call = identifier.Text;                          int arguments = current.ChildCount - 1;                          MethodInfo method;                          if (!functions.TryGetValue(call' out method) || method == null)                          {                              throw new ArgumentException("Unrecognized method call (" + call + ").");                          }                          int arity = method.GetParameters().Length;                          if (arguments != arity)                          {                              throw new ArgumentException("Expected (" + arity + ") arguments for method call ("                                                          + call + ")' but found (" + arguments + ").");                          }                          for (int argument = 1; argument <= arguments; ++argument)                          {                              RecursiveCompile(current.GetChild(argument)' typeof(double));                          }                          gen.Emit(OpCodes.Call' method);                          break;                      }                  case JavascriptParser.NAMESPACE_ID:                      {                          int index;                          if (externalsMap.ContainsKey(text))                          {                              index = externalsMap[text];                          }                          else                          {                              index = externalsMap.Count;                              externalsMap[text] = index;                          }                          gen.Emit(OpCodes.Nop);                            gen.Emit(OpCodes.Ldarg_2);                          gen.Emit(OpCodes.Ldc_I4' index);                            gen.Emit(OpCodes.Ldelem_Ref);                          gen.Emit(OpCodes.Ldarg_1);                          gen.Emit(OpCodes.Callvirt' DOUBLE_VAL_METHOD);                          break;                      }                  case JavascriptParser.HEX:                      {                          PushInt64(Convert.ToInt64(text' 16));                          break;                      }                  case JavascriptParser.OCTAL:                      {                          PushInt64(Convert.ToInt64(text' 8));                          break;                      }                    case JavascriptParser.DECIMAL:                      {                          //.NET Port. This is a bit hack-y but was needed since .NET can't perform bitwise ops on longs & doubles                          var bitwiseOps = new[]{ ">>"'"<<"'"&"'"~"'"|"'"^"};                            if (bitwiseOps.Any(s => sourceText.Contains(s)))                          {                              int val;                              if (int.TryParse(text' NumberStyles.Integer' CultureInfo.InvariantCulture' out val))                              {                                  gen.Emit(OpCodes.Ldc_I4' val);                              }                              else                              {                                  gen.Emit(OpCodes.Ldc_I8'long.Parse(text' CultureInfo.InvariantCulture));                                  gen.Emit(OpCodes.Conv_Ovf_U4_Un);                              }                          }                          else                          {                              gen.Emit(OpCodes.Ldc_R8' double.Parse(text' CultureInfo.InvariantCulture));                          }                          break;                      }                    case JavascriptParser.AT_NEGATE:                      {                          RecursiveCompile(current.GetChild(0)' typeof(double));                          gen.Emit(OpCodes.Neg);                          break;                      }                    case JavascriptParser.AT_ADD:                      {                          PushArith(OpCodes.Add' current' expected);                          break;                      }                    case JavascriptParser.AT_SUBTRACT:                      {                          PushArith(OpCodes.Sub' current' expected);                          break;                      }                    case JavascriptParser.AT_MULTIPLY:                      {                          PushArith(OpCodes.Mul' current' expected);                          break;                      }                    case JavascriptParser.AT_DIVIDE:                      {                          PushArith(OpCodes.Div' current' expected);                          break;                      }                    case JavascriptParser.AT_MODULO:                      {                          PushArith(OpCodes.Rem' current' expected);                          break;                      }                    case JavascriptParser.AT_BIT_SHL:                      {                          PushShift(OpCodes.Shl' current);                          break;                      }                    case JavascriptParser.AT_BIT_SHR:                      {                          PushShift(OpCodes.Shr' current);                          break;                      }                    case JavascriptParser.AT_BIT_SHU:                      {                          PushShift(OpCodes.Shr_Un' current);                          break;                      }                    case JavascriptParser.AT_BIT_AND:                      {                          PushBitwise(OpCodes.And' current);                          break;                      }                    case JavascriptParser.AT_BIT_OR:                      {                          PushBitwise(OpCodes.Or' current);                          break;                      }                    case JavascriptParser.AT_BIT_XOR:                      {                          PushBitwise(OpCodes.Xor' current);                          break;                      }                    case JavascriptParser.AT_BIT_NOT:                      {                          RecursiveCompile(current.GetChild(0)' typeof(long));                          gen.Emit(OpCodes.Not);                          gen.Emit(OpCodes.Conv_R8);                          break;                      }                    case JavascriptParser.AT_COMP_EQ:                      {                          PushCond(OpCodes.Ceq' current' expected);                          break;                      }                    case JavascriptParser.AT_COMP_NEQ:                      {                          PushCondEq(OpCodes.Ceq' current' expected);                          break;                      }                    case JavascriptParser.AT_COMP_LT:                      {                          PushCond(OpCodes.Clt' current' expected);                          break;                      }                    case JavascriptParser.AT_COMP_GT:                      {                          PushCond(OpCodes.Cgt' current' expected);                          break;                      }                    case JavascriptParser.AT_COMP_LTE:                      {                          PushCondEq(OpCodes.Cgt' current' expected);                          break;                      }                    case JavascriptParser.AT_COMP_GTE:                      {                          PushCondEq(OpCodes.Clt' current' expected);                          break;                      }                    case JavascriptParser.AT_BOOL_NOT:                      {                          RecursiveCompile(current.GetChild(0)' typeof(int));                          gen.Emit(OpCodes.Ldc_I4_0);                          gen.Emit(OpCodes.Ceq);                          gen.Emit(OpCodes.Conv_R8);                          break;                      }                    case JavascriptParser.AT_BOOL_AND:                      {                            RecursiveCompile(current.GetChild(0)' typeof(int));                          gen.Emit(OpCodes.Ldc_I4_0);                          gen.Emit(OpCodes.Ceq);                          RecursiveCompile(current.GetChild(1)' typeof(int));                            gen.Emit(OpCodes.Ldc_I4_0);                          gen.Emit(OpCodes.Ceq);                            gen.Emit(OpCodes.Or);                            gen.Emit(OpCodes.Ldc_I4_0);                          gen.Emit(OpCodes.Ceq);                            gen.Emit(OpCodes.Conv_R8);                              break;                      }                    case JavascriptParser.AT_BOOL_OR:                      {                          RecursiveCompile(current.GetChild(0)' typeof(int));                          gen.Emit(OpCodes.Ldc_I4_0);                          gen.Emit(OpCodes.Ceq);                          gen.Emit(OpCodes.Ldc_I4_1);                          gen.Emit(OpCodes.Xor);                          RecursiveCompile(current.GetChild(1)' typeof(int));                            gen.Emit(OpCodes.Ldc_I4_0);                          gen.Emit(OpCodes.Ceq);                          gen.Emit(OpCodes.Ldc_I4_1);                          gen.Emit(OpCodes.Xor);                          gen.Emit(OpCodes.Or);                            gen.Emit(OpCodes.Ldc_I4_1);                          gen.Emit(OpCodes.Ceq);                            gen.Emit(OpCodes.Conv_R8);                          break;                      }                    case JavascriptParser.AT_COND_QUE:                      {                          Label condFalse = gen.DefineLabel();                          Label condEnd = gen.DefineLabel();                          RecursiveCompile(current.GetChild(0)' typeof(int));                          gen.Emit(OpCodes.Ldc_I4_0);                          gen.Emit(OpCodes.Beq'condFalse);                          RecursiveCompile(current.GetChild(1)' expected);                          gen.Emit(OpCodes.Br_S'condEnd);                          gen.MarkLabel(condFalse);                          RecursiveCompile(current.GetChild(2)' expected);                          gen.MarkLabel(condEnd);                          break;                      }                    default:                      {                          throw new InvalidOperationException("Unknown operation specified: (" + current.Text + ").");                      }              }
Magic Number,Lucene.Net.Expressions.JS,JavascriptCompiler,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptCompiler.cs,RecursiveCompile,The following statement contains a magic number: switch (type)              {                  case JavascriptParser.AT_CALL:                      {                          ITree identifier = current.GetChild(0);                          string call = identifier.Text;                          int arguments = current.ChildCount - 1;                          MethodInfo method;                          if (!functions.TryGetValue(call' out method) || method == null)                          {                              throw new ArgumentException("Unrecognized method call (" + call + ").");                          }                          int arity = method.GetParameters().Length;                          if (arguments != arity)                          {                              throw new ArgumentException("Expected (" + arity + ") arguments for method call ("                                                          + call + ")' but found (" + arguments + ").");                          }                          for (int argument = 1; argument <= arguments; ++argument)                          {                              RecursiveCompile(current.GetChild(argument)' typeof(double));                          }                          gen.Emit(OpCodes.Call' method);                          break;                      }                  case JavascriptParser.NAMESPACE_ID:                      {                          int index;                          if (externalsMap.ContainsKey(text))                          {                              index = externalsMap[text];                          }                          else                          {                              index = externalsMap.Count;                              externalsMap[text] = index;                          }                          gen.Emit(OpCodes.Nop);                            gen.Emit(OpCodes.Ldarg_2);                          gen.Emit(OpCodes.Ldc_I4' index);                            gen.Emit(OpCodes.Ldelem_Ref);                          gen.Emit(OpCodes.Ldarg_1);                          gen.Emit(OpCodes.Callvirt' DOUBLE_VAL_METHOD);                          break;                      }                  case JavascriptParser.HEX:                      {                          PushInt64(Convert.ToInt64(text' 16));                          break;                      }                  case JavascriptParser.OCTAL:                      {                          PushInt64(Convert.ToInt64(text' 8));                          break;                      }                    case JavascriptParser.DECIMAL:                      {                          //.NET Port. This is a bit hack-y but was needed since .NET can't perform bitwise ops on longs & doubles                          var bitwiseOps = new[]{ ">>"'"<<"'"&"'"~"'"|"'"^"};                            if (bitwiseOps.Any(s => sourceText.Contains(s)))                          {                              int val;                              if (int.TryParse(text' NumberStyles.Integer' CultureInfo.InvariantCulture' out val))                              {                                  gen.Emit(OpCodes.Ldc_I4' val);                              }                              else                              {                                  gen.Emit(OpCodes.Ldc_I8'long.Parse(text' CultureInfo.InvariantCulture));                                  gen.Emit(OpCodes.Conv_Ovf_U4_Un);                              }                          }                          else                          {                              gen.Emit(OpCodes.Ldc_R8' double.Parse(text' CultureInfo.InvariantCulture));                          }                          break;                      }                    case JavascriptParser.AT_NEGATE:                      {                          RecursiveCompile(current.GetChild(0)' typeof(double));                          gen.Emit(OpCodes.Neg);                          break;                      }                    case JavascriptParser.AT_ADD:                      {                          PushArith(OpCodes.Add' current' expected);                          break;                      }                    case JavascriptParser.AT_SUBTRACT:                      {                          PushArith(OpCodes.Sub' current' expected);                          break;                      }                    case JavascriptParser.AT_MULTIPLY:                      {                          PushArith(OpCodes.Mul' current' expected);                          break;                      }                    case JavascriptParser.AT_DIVIDE:                      {                          PushArith(OpCodes.Div' current' expected);                          break;                      }                    case JavascriptParser.AT_MODULO:                      {                          PushArith(OpCodes.Rem' current' expected);                          break;                      }                    case JavascriptParser.AT_BIT_SHL:                      {                          PushShift(OpCodes.Shl' current);                          break;                      }                    case JavascriptParser.AT_BIT_SHR:                      {                          PushShift(OpCodes.Shr' current);                          break;                      }                    case JavascriptParser.AT_BIT_SHU:                      {                          PushShift(OpCodes.Shr_Un' current);                          break;                      }                    case JavascriptParser.AT_BIT_AND:                      {                          PushBitwise(OpCodes.And' current);                          break;                      }                    case JavascriptParser.AT_BIT_OR:                      {                          PushBitwise(OpCodes.Or' current);                          break;                      }                    case JavascriptParser.AT_BIT_XOR:                      {                          PushBitwise(OpCodes.Xor' current);                          break;                      }                    case JavascriptParser.AT_BIT_NOT:                      {                          RecursiveCompile(current.GetChild(0)' typeof(long));                          gen.Emit(OpCodes.Not);                          gen.Emit(OpCodes.Conv_R8);                          break;                      }                    case JavascriptParser.AT_COMP_EQ:                      {                          PushCond(OpCodes.Ceq' current' expected);                          break;                      }                    case JavascriptParser.AT_COMP_NEQ:                      {                          PushCondEq(OpCodes.Ceq' current' expected);                          break;                      }                    case JavascriptParser.AT_COMP_LT:                      {                          PushCond(OpCodes.Clt' current' expected);                          break;                      }                    case JavascriptParser.AT_COMP_GT:                      {                          PushCond(OpCodes.Cgt' current' expected);                          break;                      }                    case JavascriptParser.AT_COMP_LTE:                      {                          PushCondEq(OpCodes.Cgt' current' expected);                          break;                      }                    case JavascriptParser.AT_COMP_GTE:                      {                          PushCondEq(OpCodes.Clt' current' expected);                          break;                      }                    case JavascriptParser.AT_BOOL_NOT:                      {                          RecursiveCompile(current.GetChild(0)' typeof(int));                          gen.Emit(OpCodes.Ldc_I4_0);                          gen.Emit(OpCodes.Ceq);                          gen.Emit(OpCodes.Conv_R8);                          break;                      }                    case JavascriptParser.AT_BOOL_AND:                      {                            RecursiveCompile(current.GetChild(0)' typeof(int));                          gen.Emit(OpCodes.Ldc_I4_0);                          gen.Emit(OpCodes.Ceq);                          RecursiveCompile(current.GetChild(1)' typeof(int));                            gen.Emit(OpCodes.Ldc_I4_0);                          gen.Emit(OpCodes.Ceq);                            gen.Emit(OpCodes.Or);                            gen.Emit(OpCodes.Ldc_I4_0);                          gen.Emit(OpCodes.Ceq);                            gen.Emit(OpCodes.Conv_R8);                              break;                      }                    case JavascriptParser.AT_BOOL_OR:                      {                          RecursiveCompile(current.GetChild(0)' typeof(int));                          gen.Emit(OpCodes.Ldc_I4_0);                          gen.Emit(OpCodes.Ceq);                          gen.Emit(OpCodes.Ldc_I4_1);                          gen.Emit(OpCodes.Xor);                          RecursiveCompile(current.GetChild(1)' typeof(int));                            gen.Emit(OpCodes.Ldc_I4_0);                          gen.Emit(OpCodes.Ceq);                          gen.Emit(OpCodes.Ldc_I4_1);                          gen.Emit(OpCodes.Xor);                          gen.Emit(OpCodes.Or);                            gen.Emit(OpCodes.Ldc_I4_1);                          gen.Emit(OpCodes.Ceq);                            gen.Emit(OpCodes.Conv_R8);                          break;                      }                    case JavascriptParser.AT_COND_QUE:                      {                          Label condFalse = gen.DefineLabel();                          Label condEnd = gen.DefineLabel();                          RecursiveCompile(current.GetChild(0)' typeof(int));                          gen.Emit(OpCodes.Ldc_I4_0);                          gen.Emit(OpCodes.Beq'condFalse);                          RecursiveCompile(current.GetChild(1)' expected);                          gen.Emit(OpCodes.Br_S'condEnd);                          gen.MarkLabel(condFalse);                          RecursiveCompile(current.GetChild(2)' expected);                          gen.MarkLabel(condEnd);                          break;                      }                    default:                      {                          throw new InvalidOperationException("Unknown operation specified: (" + current.Text + ").");                      }              }
Magic Number,Lucene.Net.Expressions.JS,JavascriptCompiler,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptCompiler.cs,LoadDefaultFunctions,The following statement contains a magic number: vals.Length != 3
Magic Number,Lucene.Net.Expressions.JS,JavascriptCompiler,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptCompiler.cs,LoadDefaultFunctions,The following statement contains a magic number: int arity = int.Parse(vals[2]' CultureInfo.InvariantCulture);
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MNAMESPACE_ID,The following statement contains a magic number: int alt1 = 2;
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MID,The following statement contains a magic number: int alt2 = 2;
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MWS,The following statement contains a magic number: int alt3 = 2;
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MDECIMAL,The following statement contains a magic number: int alt9 = 3;
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MDECIMAL,The following statement contains a magic number: switch (alt9)  		        {  		            case 1:  		            {  		                // src/java/org/apache/lucene/expressions/js/Javascript.g:347:7: DECIMALINTEGER AT_DOT ( DECIMALDIGIT )* ( EXPONENT )?  		                MDECIMALINTEGER();  		                MAT_DOT();  		                // src/java/org/apache/lucene/expressions/js/Javascript.g:347:29: ( DECIMALDIGIT )*  		                while (true)  		                {  		                    int alt4 = 2;  		                    int LA4_0 = input.LA(1);  		                    if (((LA4_0 >= '0' && LA4_0 <= '9')))  		                    {  		                        alt4 = 1;  		                    }  		                    switch (alt4)  		                    {  		                        case 1:  		                        {  		                            // src/java/org/apache/lucene/expressions/js/Javascript.g:  		                            if ((input.LA(1) >= '0' && input.LA(1) <= '9'))  		                            {  		                                input.Consume();  		                            }  		                            else  		                            {  		                                MismatchedSetException mse = new MismatchedSetException(null' input);  		                                Recover(mse);  		                                throw mse;  		                            }  		                            break;  		                        }    		                        default:  		                        {  		                            goto loop4_break;  		                        }  		                    }                                  //loop4_continue: ; // LUCENENET NOTE: Not used                          }                          loop4_break: ;  		                // src/java/org/apache/lucene/expressions/js/Javascript.g:347:43: ( EXPONENT )?  		                int alt5 = 2;  		                int LA5_0 = input.LA(1);  		                if ((LA5_0 == 'E' || LA5_0 == 'e'))  		                {  		                    alt5 = 1;  		                }  		                switch (alt5)  		                {  		                    case 1:  		                    {  		                        // src/java/org/apache/lucene/expressions/js/Javascript.g:347:43: EXPONENT  		                        MEXPONENT();  		                        break;  		                    }  		                }  		                break;  		            }    		            case 2:  		            {  		                // src/java/org/apache/lucene/expressions/js/Javascript.g:348:7: AT_DOT ( DECIMALDIGIT )+ ( EXPONENT )?  		                MAT_DOT();  		                // src/java/org/apache/lucene/expressions/js/Javascript.g:348:14: ( DECIMALDIGIT )+  		                int cnt6 = 0;  		                while (true)  		                {  		                    int alt6 = 2;  		                    int LA6_0 = input.LA(1);  		                    if (((LA6_0 >= '0' && LA6_0 <= '9')))  		                    {  		                        alt6 = 1;  		                    }  		                    switch (alt6)  		                    {  		                        case 1:  		                        {  		                            // src/java/org/apache/lucene/expressions/js/Javascript.g:  		                            if ((input.LA(1) >= '0' && input.LA(1) <= '9'))  		                            {  		                                input.Consume();  		                            }  		                            else  		                            {  		                                MismatchedSetException mse = new MismatchedSetException(null' input);  		                                Recover(mse);  		                                throw mse;  		                            }  		                            break;  		                        }    		                        default:  		                        {  		                            if (cnt6 >= 1)  		                            {  		                                goto loop6_break;  		                            }  		                            EarlyExitException eee = new EarlyExitException(6' input);  		                            throw eee;  		                        }  		                    }  		                    cnt6++;                                  //loop6_continue: ; // LUCENENET NOTE: Not used                              }                              loop6_break: ;  		                // src/java/org/apache/lucene/expressions/js/Javascript.g:348:28: ( EXPONENT )?  		                int alt7 = 2;  		                int LA7_0 = input.LA(1);  		                if ((LA7_0 == 'E' || LA7_0 == 'e'))  		                {  		                    alt7 = 1;  		                }  		                switch (alt7)  		                {  		                    case 1:  		                    {  		                        // src/java/org/apache/lucene/expressions/js/Javascript.g:348:28: EXPONENT  		                        MEXPONENT();  		                        break;  		                    }  		                }  		                break;  		            }    		            case 3:  		            {  		                // src/java/org/apache/lucene/expressions/js/Javascript.g:349:7: DECIMALINTEGER ( EXPONENT )?  		                MDECIMALINTEGER();  		                // src/java/org/apache/lucene/expressions/js/Javascript.g:349:22: ( EXPONENT )?  		                int alt8 = 2;  		                int LA8_0 = input.LA(1);  		                if ((LA8_0 == 'E' || LA8_0 == 'e'))  		                {  		                    alt8 = 1;  		                }  		                switch (alt8)  		                {  		                    case 1:  		                    {  		                        // src/java/org/apache/lucene/expressions/js/Javascript.g:349:22: EXPONENT  		                        MEXPONENT();  		                        break;  		                    }  		                }  		                break;  		            }  		        }
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MDECIMAL,The following statement contains a magic number: switch (alt9)  		        {  		            case 1:  		            {  		                // src/java/org/apache/lucene/expressions/js/Javascript.g:347:7: DECIMALINTEGER AT_DOT ( DECIMALDIGIT )* ( EXPONENT )?  		                MDECIMALINTEGER();  		                MAT_DOT();  		                // src/java/org/apache/lucene/expressions/js/Javascript.g:347:29: ( DECIMALDIGIT )*  		                while (true)  		                {  		                    int alt4 = 2;  		                    int LA4_0 = input.LA(1);  		                    if (((LA4_0 >= '0' && LA4_0 <= '9')))  		                    {  		                        alt4 = 1;  		                    }  		                    switch (alt4)  		                    {  		                        case 1:  		                        {  		                            // src/java/org/apache/lucene/expressions/js/Javascript.g:  		                            if ((input.LA(1) >= '0' && input.LA(1) <= '9'))  		                            {  		                                input.Consume();  		                            }  		                            else  		                            {  		                                MismatchedSetException mse = new MismatchedSetException(null' input);  		                                Recover(mse);  		                                throw mse;  		                            }  		                            break;  		                        }    		                        default:  		                        {  		                            goto loop4_break;  		                        }  		                    }                                  //loop4_continue: ; // LUCENENET NOTE: Not used                          }                          loop4_break: ;  		                // src/java/org/apache/lucene/expressions/js/Javascript.g:347:43: ( EXPONENT )?  		                int alt5 = 2;  		                int LA5_0 = input.LA(1);  		                if ((LA5_0 == 'E' || LA5_0 == 'e'))  		                {  		                    alt5 = 1;  		                }  		                switch (alt5)  		                {  		                    case 1:  		                    {  		                        // src/java/org/apache/lucene/expressions/js/Javascript.g:347:43: EXPONENT  		                        MEXPONENT();  		                        break;  		                    }  		                }  		                break;  		            }    		            case 2:  		            {  		                // src/java/org/apache/lucene/expressions/js/Javascript.g:348:7: AT_DOT ( DECIMALDIGIT )+ ( EXPONENT )?  		                MAT_DOT();  		                // src/java/org/apache/lucene/expressions/js/Javascript.g:348:14: ( DECIMALDIGIT )+  		                int cnt6 = 0;  		                while (true)  		                {  		                    int alt6 = 2;  		                    int LA6_0 = input.LA(1);  		                    if (((LA6_0 >= '0' && LA6_0 <= '9')))  		                    {  		                        alt6 = 1;  		                    }  		                    switch (alt6)  		                    {  		                        case 1:  		                        {  		                            // src/java/org/apache/lucene/expressions/js/Javascript.g:  		                            if ((input.LA(1) >= '0' && input.LA(1) <= '9'))  		                            {  		                                input.Consume();  		                            }  		                            else  		                            {  		                                MismatchedSetException mse = new MismatchedSetException(null' input);  		                                Recover(mse);  		                                throw mse;  		                            }  		                            break;  		                        }    		                        default:  		                        {  		                            if (cnt6 >= 1)  		                            {  		                                goto loop6_break;  		                            }  		                            EarlyExitException eee = new EarlyExitException(6' input);  		                            throw eee;  		                        }  		                    }  		                    cnt6++;                                  //loop6_continue: ; // LUCENENET NOTE: Not used                              }                              loop6_break: ;  		                // src/java/org/apache/lucene/expressions/js/Javascript.g:348:28: ( EXPONENT )?  		                int alt7 = 2;  		                int LA7_0 = input.LA(1);  		                if ((LA7_0 == 'E' || LA7_0 == 'e'))  		                {  		                    alt7 = 1;  		                }  		                switch (alt7)  		                {  		                    case 1:  		                    {  		                        // src/java/org/apache/lucene/expressions/js/Javascript.g:348:28: EXPONENT  		                        MEXPONENT();  		                        break;  		                    }  		                }  		                break;  		            }    		            case 3:  		            {  		                // src/java/org/apache/lucene/expressions/js/Javascript.g:349:7: DECIMALINTEGER ( EXPONENT )?  		                MDECIMALINTEGER();  		                // src/java/org/apache/lucene/expressions/js/Javascript.g:349:22: ( EXPONENT )?  		                int alt8 = 2;  		                int LA8_0 = input.LA(1);  		                if ((LA8_0 == 'E' || LA8_0 == 'e'))  		                {  		                    alt8 = 1;  		                }  		                switch (alt8)  		                {  		                    case 1:  		                    {  		                        // src/java/org/apache/lucene/expressions/js/Javascript.g:349:22: EXPONENT  		                        MEXPONENT();  		                        break;  		                    }  		                }  		                break;  		            }  		        }
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MDECIMAL,The following statement contains a magic number: switch (alt9)  		        {  		            case 1:  		            {  		                // src/java/org/apache/lucene/expressions/js/Javascript.g:347:7: DECIMALINTEGER AT_DOT ( DECIMALDIGIT )* ( EXPONENT )?  		                MDECIMALINTEGER();  		                MAT_DOT();  		                // src/java/org/apache/lucene/expressions/js/Javascript.g:347:29: ( DECIMALDIGIT )*  		                while (true)  		                {  		                    int alt4 = 2;  		                    int LA4_0 = input.LA(1);  		                    if (((LA4_0 >= '0' && LA4_0 <= '9')))  		                    {  		                        alt4 = 1;  		                    }  		                    switch (alt4)  		                    {  		                        case 1:  		                        {  		                            // src/java/org/apache/lucene/expressions/js/Javascript.g:  		                            if ((input.LA(1) >= '0' && input.LA(1) <= '9'))  		                            {  		                                input.Consume();  		                            }  		                            else  		                            {  		                                MismatchedSetException mse = new MismatchedSetException(null' input);  		                                Recover(mse);  		                                throw mse;  		                            }  		                            break;  		                        }    		                        default:  		                        {  		                            goto loop4_break;  		                        }  		                    }                                  //loop4_continue: ; // LUCENENET NOTE: Not used                          }                          loop4_break: ;  		                // src/java/org/apache/lucene/expressions/js/Javascript.g:347:43: ( EXPONENT )?  		                int alt5 = 2;  		                int LA5_0 = input.LA(1);  		                if ((LA5_0 == 'E' || LA5_0 == 'e'))  		                {  		                    alt5 = 1;  		                }  		                switch (alt5)  		                {  		                    case 1:  		                    {  		                        // src/java/org/apache/lucene/expressions/js/Javascript.g:347:43: EXPONENT  		                        MEXPONENT();  		                        break;  		                    }  		                }  		                break;  		            }    		            case 2:  		            {  		                // src/java/org/apache/lucene/expressions/js/Javascript.g:348:7: AT_DOT ( DECIMALDIGIT )+ ( EXPONENT )?  		                MAT_DOT();  		                // src/java/org/apache/lucene/expressions/js/Javascript.g:348:14: ( DECIMALDIGIT )+  		                int cnt6 = 0;  		                while (true)  		                {  		                    int alt6 = 2;  		                    int LA6_0 = input.LA(1);  		                    if (((LA6_0 >= '0' && LA6_0 <= '9')))  		                    {  		                        alt6 = 1;  		                    }  		                    switch (alt6)  		                    {  		                        case 1:  		                        {  		                            // src/java/org/apache/lucene/expressions/js/Javascript.g:  		                            if ((input.LA(1) >= '0' && input.LA(1) <= '9'))  		                            {  		                                input.Consume();  		                            }  		                            else  		                            {  		                                MismatchedSetException mse = new MismatchedSetException(null' input);  		                                Recover(mse);  		                                throw mse;  		                            }  		                            break;  		                        }    		                        default:  		                        {  		                            if (cnt6 >= 1)  		                            {  		                                goto loop6_break;  		                            }  		                            EarlyExitException eee = new EarlyExitException(6' input);  		                            throw eee;  		                        }  		                    }  		                    cnt6++;                                  //loop6_continue: ; // LUCENENET NOTE: Not used                              }                              loop6_break: ;  		                // src/java/org/apache/lucene/expressions/js/Javascript.g:348:28: ( EXPONENT )?  		                int alt7 = 2;  		                int LA7_0 = input.LA(1);  		                if ((LA7_0 == 'E' || LA7_0 == 'e'))  		                {  		                    alt7 = 1;  		                }  		                switch (alt7)  		                {  		                    case 1:  		                    {  		                        // src/java/org/apache/lucene/expressions/js/Javascript.g:348:28: EXPONENT  		                        MEXPONENT();  		                        break;  		                    }  		                }  		                break;  		            }    		            case 3:  		            {  		                // src/java/org/apache/lucene/expressions/js/Javascript.g:349:7: DECIMALINTEGER ( EXPONENT )?  		                MDECIMALINTEGER();  		                // src/java/org/apache/lucene/expressions/js/Javascript.g:349:22: ( EXPONENT )?  		                int alt8 = 2;  		                int LA8_0 = input.LA(1);  		                if ((LA8_0 == 'E' || LA8_0 == 'e'))  		                {  		                    alt8 = 1;  		                }  		                switch (alt8)  		                {  		                    case 1:  		                    {  		                        // src/java/org/apache/lucene/expressions/js/Javascript.g:349:22: EXPONENT  		                        MEXPONENT();  		                        break;  		                    }  		                }  		                break;  		            }  		        }
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MDECIMAL,The following statement contains a magic number: switch (alt9)  		        {  		            case 1:  		            {  		                // src/java/org/apache/lucene/expressions/js/Javascript.g:347:7: DECIMALINTEGER AT_DOT ( DECIMALDIGIT )* ( EXPONENT )?  		                MDECIMALINTEGER();  		                MAT_DOT();  		                // src/java/org/apache/lucene/expressions/js/Javascript.g:347:29: ( DECIMALDIGIT )*  		                while (true)  		                {  		                    int alt4 = 2;  		                    int LA4_0 = input.LA(1);  		                    if (((LA4_0 >= '0' && LA4_0 <= '9')))  		                    {  		                        alt4 = 1;  		                    }  		                    switch (alt4)  		                    {  		                        case 1:  		                        {  		                            // src/java/org/apache/lucene/expressions/js/Javascript.g:  		                            if ((input.LA(1) >= '0' && input.LA(1) <= '9'))  		                            {  		                                input.Consume();  		                            }  		                            else  		                            {  		                                MismatchedSetException mse = new MismatchedSetException(null' input);  		                                Recover(mse);  		                                throw mse;  		                            }  		                            break;  		                        }    		                        default:  		                        {  		                            goto loop4_break;  		                        }  		                    }                                  //loop4_continue: ; // LUCENENET NOTE: Not used                          }                          loop4_break: ;  		                // src/java/org/apache/lucene/expressions/js/Javascript.g:347:43: ( EXPONENT )?  		                int alt5 = 2;  		                int LA5_0 = input.LA(1);  		                if ((LA5_0 == 'E' || LA5_0 == 'e'))  		                {  		                    alt5 = 1;  		                }  		                switch (alt5)  		                {  		                    case 1:  		                    {  		                        // src/java/org/apache/lucene/expressions/js/Javascript.g:347:43: EXPONENT  		                        MEXPONENT();  		                        break;  		                    }  		                }  		                break;  		            }    		            case 2:  		            {  		                // src/java/org/apache/lucene/expressions/js/Javascript.g:348:7: AT_DOT ( DECIMALDIGIT )+ ( EXPONENT )?  		                MAT_DOT();  		                // src/java/org/apache/lucene/expressions/js/Javascript.g:348:14: ( DECIMALDIGIT )+  		                int cnt6 = 0;  		                while (true)  		                {  		                    int alt6 = 2;  		                    int LA6_0 = input.LA(1);  		                    if (((LA6_0 >= '0' && LA6_0 <= '9')))  		                    {  		                        alt6 = 1;  		                    }  		                    switch (alt6)  		                    {  		                        case 1:  		                        {  		                            // src/java/org/apache/lucene/expressions/js/Javascript.g:  		                            if ((input.LA(1) >= '0' && input.LA(1) <= '9'))  		                            {  		                                input.Consume();  		                            }  		                            else  		                            {  		                                MismatchedSetException mse = new MismatchedSetException(null' input);  		                                Recover(mse);  		                                throw mse;  		                            }  		                            break;  		                        }    		                        default:  		                        {  		                            if (cnt6 >= 1)  		                            {  		                                goto loop6_break;  		                            }  		                            EarlyExitException eee = new EarlyExitException(6' input);  		                            throw eee;  		                        }  		                    }  		                    cnt6++;                                  //loop6_continue: ; // LUCENENET NOTE: Not used                              }                              loop6_break: ;  		                // src/java/org/apache/lucene/expressions/js/Javascript.g:348:28: ( EXPONENT )?  		                int alt7 = 2;  		                int LA7_0 = input.LA(1);  		                if ((LA7_0 == 'E' || LA7_0 == 'e'))  		                {  		                    alt7 = 1;  		                }  		                switch (alt7)  		                {  		                    case 1:  		                    {  		                        // src/java/org/apache/lucene/expressions/js/Javascript.g:348:28: EXPONENT  		                        MEXPONENT();  		                        break;  		                    }  		                }  		                break;  		            }    		            case 3:  		            {  		                // src/java/org/apache/lucene/expressions/js/Javascript.g:349:7: DECIMALINTEGER ( EXPONENT )?  		                MDECIMALINTEGER();  		                // src/java/org/apache/lucene/expressions/js/Javascript.g:349:22: ( EXPONENT )?  		                int alt8 = 2;  		                int LA8_0 = input.LA(1);  		                if ((LA8_0 == 'E' || LA8_0 == 'e'))  		                {  		                    alt8 = 1;  		                }  		                switch (alt8)  		                {  		                    case 1:  		                    {  		                        // src/java/org/apache/lucene/expressions/js/Javascript.g:349:22: EXPONENT  		                        MEXPONENT();  		                        break;  		                    }  		                }  		                break;  		            }  		        }
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MDECIMAL,The following statement contains a magic number: switch (alt9)  		        {  		            case 1:  		            {  		                // src/java/org/apache/lucene/expressions/js/Javascript.g:347:7: DECIMALINTEGER AT_DOT ( DECIMALDIGIT )* ( EXPONENT )?  		                MDECIMALINTEGER();  		                MAT_DOT();  		                // src/java/org/apache/lucene/expressions/js/Javascript.g:347:29: ( DECIMALDIGIT )*  		                while (true)  		                {  		                    int alt4 = 2;  		                    int LA4_0 = input.LA(1);  		                    if (((LA4_0 >= '0' && LA4_0 <= '9')))  		                    {  		                        alt4 = 1;  		                    }  		                    switch (alt4)  		                    {  		                        case 1:  		                        {  		                            // src/java/org/apache/lucene/expressions/js/Javascript.g:  		                            if ((input.LA(1) >= '0' && input.LA(1) <= '9'))  		                            {  		                                input.Consume();  		                            }  		                            else  		                            {  		                                MismatchedSetException mse = new MismatchedSetException(null' input);  		                                Recover(mse);  		                                throw mse;  		                            }  		                            break;  		                        }    		                        default:  		                        {  		                            goto loop4_break;  		                        }  		                    }                                  //loop4_continue: ; // LUCENENET NOTE: Not used                          }                          loop4_break: ;  		                // src/java/org/apache/lucene/expressions/js/Javascript.g:347:43: ( EXPONENT )?  		                int alt5 = 2;  		                int LA5_0 = input.LA(1);  		                if ((LA5_0 == 'E' || LA5_0 == 'e'))  		                {  		                    alt5 = 1;  		                }  		                switch (alt5)  		                {  		                    case 1:  		                    {  		                        // src/java/org/apache/lucene/expressions/js/Javascript.g:347:43: EXPONENT  		                        MEXPONENT();  		                        break;  		                    }  		                }  		                break;  		            }    		            case 2:  		            {  		                // src/java/org/apache/lucene/expressions/js/Javascript.g:348:7: AT_DOT ( DECIMALDIGIT )+ ( EXPONENT )?  		                MAT_DOT();  		                // src/java/org/apache/lucene/expressions/js/Javascript.g:348:14: ( DECIMALDIGIT )+  		                int cnt6 = 0;  		                while (true)  		                {  		                    int alt6 = 2;  		                    int LA6_0 = input.LA(1);  		                    if (((LA6_0 >= '0' && LA6_0 <= '9')))  		                    {  		                        alt6 = 1;  		                    }  		                    switch (alt6)  		                    {  		                        case 1:  		                        {  		                            // src/java/org/apache/lucene/expressions/js/Javascript.g:  		                            if ((input.LA(1) >= '0' && input.LA(1) <= '9'))  		                            {  		                                input.Consume();  		                            }  		                            else  		                            {  		                                MismatchedSetException mse = new MismatchedSetException(null' input);  		                                Recover(mse);  		                                throw mse;  		                            }  		                            break;  		                        }    		                        default:  		                        {  		                            if (cnt6 >= 1)  		                            {  		                                goto loop6_break;  		                            }  		                            EarlyExitException eee = new EarlyExitException(6' input);  		                            throw eee;  		                        }  		                    }  		                    cnt6++;                                  //loop6_continue: ; // LUCENENET NOTE: Not used                              }                              loop6_break: ;  		                // src/java/org/apache/lucene/expressions/js/Javascript.g:348:28: ( EXPONENT )?  		                int alt7 = 2;  		                int LA7_0 = input.LA(1);  		                if ((LA7_0 == 'E' || LA7_0 == 'e'))  		                {  		                    alt7 = 1;  		                }  		                switch (alt7)  		                {  		                    case 1:  		                    {  		                        // src/java/org/apache/lucene/expressions/js/Javascript.g:348:28: EXPONENT  		                        MEXPONENT();  		                        break;  		                    }  		                }  		                break;  		            }    		            case 3:  		            {  		                // src/java/org/apache/lucene/expressions/js/Javascript.g:349:7: DECIMALINTEGER ( EXPONENT )?  		                MDECIMALINTEGER();  		                // src/java/org/apache/lucene/expressions/js/Javascript.g:349:22: ( EXPONENT )?  		                int alt8 = 2;  		                int LA8_0 = input.LA(1);  		                if ((LA8_0 == 'E' || LA8_0 == 'e'))  		                {  		                    alt8 = 1;  		                }  		                switch (alt8)  		                {  		                    case 1:  		                    {  		                        // src/java/org/apache/lucene/expressions/js/Javascript.g:349:22: EXPONENT  		                        MEXPONENT();  		                        break;  		                    }  		                }  		                break;  		            }  		        }
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MDECIMAL,The following statement contains a magic number: switch (alt9)  		        {  		            case 1:  		            {  		                // src/java/org/apache/lucene/expressions/js/Javascript.g:347:7: DECIMALINTEGER AT_DOT ( DECIMALDIGIT )* ( EXPONENT )?  		                MDECIMALINTEGER();  		                MAT_DOT();  		                // src/java/org/apache/lucene/expressions/js/Javascript.g:347:29: ( DECIMALDIGIT )*  		                while (true)  		                {  		                    int alt4 = 2;  		                    int LA4_0 = input.LA(1);  		                    if (((LA4_0 >= '0' && LA4_0 <= '9')))  		                    {  		                        alt4 = 1;  		                    }  		                    switch (alt4)  		                    {  		                        case 1:  		                        {  		                            // src/java/org/apache/lucene/expressions/js/Javascript.g:  		                            if ((input.LA(1) >= '0' && input.LA(1) <= '9'))  		                            {  		                                input.Consume();  		                            }  		                            else  		                            {  		                                MismatchedSetException mse = new MismatchedSetException(null' input);  		                                Recover(mse);  		                                throw mse;  		                            }  		                            break;  		                        }    		                        default:  		                        {  		                            goto loop4_break;  		                        }  		                    }                                  //loop4_continue: ; // LUCENENET NOTE: Not used                          }                          loop4_break: ;  		                // src/java/org/apache/lucene/expressions/js/Javascript.g:347:43: ( EXPONENT )?  		                int alt5 = 2;  		                int LA5_0 = input.LA(1);  		                if ((LA5_0 == 'E' || LA5_0 == 'e'))  		                {  		                    alt5 = 1;  		                }  		                switch (alt5)  		                {  		                    case 1:  		                    {  		                        // src/java/org/apache/lucene/expressions/js/Javascript.g:347:43: EXPONENT  		                        MEXPONENT();  		                        break;  		                    }  		                }  		                break;  		            }    		            case 2:  		            {  		                // src/java/org/apache/lucene/expressions/js/Javascript.g:348:7: AT_DOT ( DECIMALDIGIT )+ ( EXPONENT )?  		                MAT_DOT();  		                // src/java/org/apache/lucene/expressions/js/Javascript.g:348:14: ( DECIMALDIGIT )+  		                int cnt6 = 0;  		                while (true)  		                {  		                    int alt6 = 2;  		                    int LA6_0 = input.LA(1);  		                    if (((LA6_0 >= '0' && LA6_0 <= '9')))  		                    {  		                        alt6 = 1;  		                    }  		                    switch (alt6)  		                    {  		                        case 1:  		                        {  		                            // src/java/org/apache/lucene/expressions/js/Javascript.g:  		                            if ((input.LA(1) >= '0' && input.LA(1) <= '9'))  		                            {  		                                input.Consume();  		                            }  		                            else  		                            {  		                                MismatchedSetException mse = new MismatchedSetException(null' input);  		                                Recover(mse);  		                                throw mse;  		                            }  		                            break;  		                        }    		                        default:  		                        {  		                            if (cnt6 >= 1)  		                            {  		                                goto loop6_break;  		                            }  		                            EarlyExitException eee = new EarlyExitException(6' input);  		                            throw eee;  		                        }  		                    }  		                    cnt6++;                                  //loop6_continue: ; // LUCENENET NOTE: Not used                              }                              loop6_break: ;  		                // src/java/org/apache/lucene/expressions/js/Javascript.g:348:28: ( EXPONENT )?  		                int alt7 = 2;  		                int LA7_0 = input.LA(1);  		                if ((LA7_0 == 'E' || LA7_0 == 'e'))  		                {  		                    alt7 = 1;  		                }  		                switch (alt7)  		                {  		                    case 1:  		                    {  		                        // src/java/org/apache/lucene/expressions/js/Javascript.g:348:28: EXPONENT  		                        MEXPONENT();  		                        break;  		                    }  		                }  		                break;  		            }    		            case 3:  		            {  		                // src/java/org/apache/lucene/expressions/js/Javascript.g:349:7: DECIMALINTEGER ( EXPONENT )?  		                MDECIMALINTEGER();  		                // src/java/org/apache/lucene/expressions/js/Javascript.g:349:22: ( EXPONENT )?  		                int alt8 = 2;  		                int LA8_0 = input.LA(1);  		                if ((LA8_0 == 'E' || LA8_0 == 'e'))  		                {  		                    alt8 = 1;  		                }  		                switch (alt8)  		                {  		                    case 1:  		                    {  		                        // src/java/org/apache/lucene/expressions/js/Javascript.g:349:22: EXPONENT  		                        MEXPONENT();  		                        break;  		                    }  		                }  		                break;  		            }  		        }
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MDECIMAL,The following statement contains a magic number: switch (alt9)  		        {  		            case 1:  		            {  		                // src/java/org/apache/lucene/expressions/js/Javascript.g:347:7: DECIMALINTEGER AT_DOT ( DECIMALDIGIT )* ( EXPONENT )?  		                MDECIMALINTEGER();  		                MAT_DOT();  		                // src/java/org/apache/lucene/expressions/js/Javascript.g:347:29: ( DECIMALDIGIT )*  		                while (true)  		                {  		                    int alt4 = 2;  		                    int LA4_0 = input.LA(1);  		                    if (((LA4_0 >= '0' && LA4_0 <= '9')))  		                    {  		                        alt4 = 1;  		                    }  		                    switch (alt4)  		                    {  		                        case 1:  		                        {  		                            // src/java/org/apache/lucene/expressions/js/Javascript.g:  		                            if ((input.LA(1) >= '0' && input.LA(1) <= '9'))  		                            {  		                                input.Consume();  		                            }  		                            else  		                            {  		                                MismatchedSetException mse = new MismatchedSetException(null' input);  		                                Recover(mse);  		                                throw mse;  		                            }  		                            break;  		                        }    		                        default:  		                        {  		                            goto loop4_break;  		                        }  		                    }                                  //loop4_continue: ; // LUCENENET NOTE: Not used                          }                          loop4_break: ;  		                // src/java/org/apache/lucene/expressions/js/Javascript.g:347:43: ( EXPONENT )?  		                int alt5 = 2;  		                int LA5_0 = input.LA(1);  		                if ((LA5_0 == 'E' || LA5_0 == 'e'))  		                {  		                    alt5 = 1;  		                }  		                switch (alt5)  		                {  		                    case 1:  		                    {  		                        // src/java/org/apache/lucene/expressions/js/Javascript.g:347:43: EXPONENT  		                        MEXPONENT();  		                        break;  		                    }  		                }  		                break;  		            }    		            case 2:  		            {  		                // src/java/org/apache/lucene/expressions/js/Javascript.g:348:7: AT_DOT ( DECIMALDIGIT )+ ( EXPONENT )?  		                MAT_DOT();  		                // src/java/org/apache/lucene/expressions/js/Javascript.g:348:14: ( DECIMALDIGIT )+  		                int cnt6 = 0;  		                while (true)  		                {  		                    int alt6 = 2;  		                    int LA6_0 = input.LA(1);  		                    if (((LA6_0 >= '0' && LA6_0 <= '9')))  		                    {  		                        alt6 = 1;  		                    }  		                    switch (alt6)  		                    {  		                        case 1:  		                        {  		                            // src/java/org/apache/lucene/expressions/js/Javascript.g:  		                            if ((input.LA(1) >= '0' && input.LA(1) <= '9'))  		                            {  		                                input.Consume();  		                            }  		                            else  		                            {  		                                MismatchedSetException mse = new MismatchedSetException(null' input);  		                                Recover(mse);  		                                throw mse;  		                            }  		                            break;  		                        }    		                        default:  		                        {  		                            if (cnt6 >= 1)  		                            {  		                                goto loop6_break;  		                            }  		                            EarlyExitException eee = new EarlyExitException(6' input);  		                            throw eee;  		                        }  		                    }  		                    cnt6++;                                  //loop6_continue: ; // LUCENENET NOTE: Not used                              }                              loop6_break: ;  		                // src/java/org/apache/lucene/expressions/js/Javascript.g:348:28: ( EXPONENT )?  		                int alt7 = 2;  		                int LA7_0 = input.LA(1);  		                if ((LA7_0 == 'E' || LA7_0 == 'e'))  		                {  		                    alt7 = 1;  		                }  		                switch (alt7)  		                {  		                    case 1:  		                    {  		                        // src/java/org/apache/lucene/expressions/js/Javascript.g:348:28: EXPONENT  		                        MEXPONENT();  		                        break;  		                    }  		                }  		                break;  		            }    		            case 3:  		            {  		                // src/java/org/apache/lucene/expressions/js/Javascript.g:349:7: DECIMALINTEGER ( EXPONENT )?  		                MDECIMALINTEGER();  		                // src/java/org/apache/lucene/expressions/js/Javascript.g:349:22: ( EXPONENT )?  		                int alt8 = 2;  		                int LA8_0 = input.LA(1);  		                if ((LA8_0 == 'E' || LA8_0 == 'e'))  		                {  		                    alt8 = 1;  		                }  		                switch (alt8)  		                {  		                    case 1:  		                    {  		                        // src/java/org/apache/lucene/expressions/js/Javascript.g:349:22: EXPONENT  		                        MEXPONENT();  		                        break;  		                    }  		                }  		                break;  		            }  		        }
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MDECIMAL,The following statement contains a magic number: switch (alt9)  		        {  		            case 1:  		            {  		                // src/java/org/apache/lucene/expressions/js/Javascript.g:347:7: DECIMALINTEGER AT_DOT ( DECIMALDIGIT )* ( EXPONENT )?  		                MDECIMALINTEGER();  		                MAT_DOT();  		                // src/java/org/apache/lucene/expressions/js/Javascript.g:347:29: ( DECIMALDIGIT )*  		                while (true)  		                {  		                    int alt4 = 2;  		                    int LA4_0 = input.LA(1);  		                    if (((LA4_0 >= '0' && LA4_0 <= '9')))  		                    {  		                        alt4 = 1;  		                    }  		                    switch (alt4)  		                    {  		                        case 1:  		                        {  		                            // src/java/org/apache/lucene/expressions/js/Javascript.g:  		                            if ((input.LA(1) >= '0' && input.LA(1) <= '9'))  		                            {  		                                input.Consume();  		                            }  		                            else  		                            {  		                                MismatchedSetException mse = new MismatchedSetException(null' input);  		                                Recover(mse);  		                                throw mse;  		                            }  		                            break;  		                        }    		                        default:  		                        {  		                            goto loop4_break;  		                        }  		                    }                                  //loop4_continue: ; // LUCENENET NOTE: Not used                          }                          loop4_break: ;  		                // src/java/org/apache/lucene/expressions/js/Javascript.g:347:43: ( EXPONENT )?  		                int alt5 = 2;  		                int LA5_0 = input.LA(1);  		                if ((LA5_0 == 'E' || LA5_0 == 'e'))  		                {  		                    alt5 = 1;  		                }  		                switch (alt5)  		                {  		                    case 1:  		                    {  		                        // src/java/org/apache/lucene/expressions/js/Javascript.g:347:43: EXPONENT  		                        MEXPONENT();  		                        break;  		                    }  		                }  		                break;  		            }    		            case 2:  		            {  		                // src/java/org/apache/lucene/expressions/js/Javascript.g:348:7: AT_DOT ( DECIMALDIGIT )+ ( EXPONENT )?  		                MAT_DOT();  		                // src/java/org/apache/lucene/expressions/js/Javascript.g:348:14: ( DECIMALDIGIT )+  		                int cnt6 = 0;  		                while (true)  		                {  		                    int alt6 = 2;  		                    int LA6_0 = input.LA(1);  		                    if (((LA6_0 >= '0' && LA6_0 <= '9')))  		                    {  		                        alt6 = 1;  		                    }  		                    switch (alt6)  		                    {  		                        case 1:  		                        {  		                            // src/java/org/apache/lucene/expressions/js/Javascript.g:  		                            if ((input.LA(1) >= '0' && input.LA(1) <= '9'))  		                            {  		                                input.Consume();  		                            }  		                            else  		                            {  		                                MismatchedSetException mse = new MismatchedSetException(null' input);  		                                Recover(mse);  		                                throw mse;  		                            }  		                            break;  		                        }    		                        default:  		                        {  		                            if (cnt6 >= 1)  		                            {  		                                goto loop6_break;  		                            }  		                            EarlyExitException eee = new EarlyExitException(6' input);  		                            throw eee;  		                        }  		                    }  		                    cnt6++;                                  //loop6_continue: ; // LUCENENET NOTE: Not used                              }                              loop6_break: ;  		                // src/java/org/apache/lucene/expressions/js/Javascript.g:348:28: ( EXPONENT )?  		                int alt7 = 2;  		                int LA7_0 = input.LA(1);  		                if ((LA7_0 == 'E' || LA7_0 == 'e'))  		                {  		                    alt7 = 1;  		                }  		                switch (alt7)  		                {  		                    case 1:  		                    {  		                        // src/java/org/apache/lucene/expressions/js/Javascript.g:348:28: EXPONENT  		                        MEXPONENT();  		                        break;  		                    }  		                }  		                break;  		            }    		            case 3:  		            {  		                // src/java/org/apache/lucene/expressions/js/Javascript.g:349:7: DECIMALINTEGER ( EXPONENT )?  		                MDECIMALINTEGER();  		                // src/java/org/apache/lucene/expressions/js/Javascript.g:349:22: ( EXPONENT )?  		                int alt8 = 2;  		                int LA8_0 = input.LA(1);  		                if ((LA8_0 == 'E' || LA8_0 == 'e'))  		                {  		                    alt8 = 1;  		                }  		                switch (alt8)  		                {  		                    case 1:  		                    {  		                        // src/java/org/apache/lucene/expressions/js/Javascript.g:349:22: EXPONENT  		                        MEXPONENT();  		                        break;  		                    }  		                }  		                break;  		            }  		        }
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MOCTAL,The following statement contains a magic number: int alt10 = 2;
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MHEX,The following statement contains a magic number: int alt11 = 2;
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MHEX,The following statement contains a magic number: int LA11_1 = input.LA(2);
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MHEX,The following statement contains a magic number: int alt12 = 2;
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MDECIMALINTEGER,The following statement contains a magic number: int alt14 = 2;
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MDECIMALINTEGER,The following statement contains a magic number: switch (alt14)  				{  					case 1:  					{  						// src/java/org/apache/lucene/expressions/js/Javascript.g:363:7: '0'  						Match('0');  						break;  					}    					case 2:  					{  						// src/java/org/apache/lucene/expressions/js/Javascript.g:364:7: '1' .. '9' ( DECIMALDIGIT )*  						MatchRange('1'' '9');  						// src/java/org/apache/lucene/expressions/js/Javascript.g:364:16: ( DECIMALDIGIT )*  						while (true)  						{  							int alt13 = 2;  							int LA13_0 = input.LA(1);  							if (((LA13_0 >= '0' && LA13_0 <= '9')))  							{  								alt13 = 1;  							}  							switch (alt13)  							{  								case 1:  								{  									// src/java/org/apache/lucene/expressions/js/Javascript.g:  									if ((input.LA(1) >= '0' && input.LA(1) <= '9'))  									{  										input.Consume();  									}  									else  									{  										MismatchedSetException mse = new MismatchedSetException(null' input);  										Recover(mse);  										throw mse;  									}  									break;  								}    								default:  								{  									goto loop13_break;  								}  							}                                  //loop13_continue: ; // LUCENENET NOTE: Not used                              }                              loop13_break: ;  						break;  					}  				}
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MDECIMALINTEGER,The following statement contains a magic number: switch (alt14)  				{  					case 1:  					{  						// src/java/org/apache/lucene/expressions/js/Javascript.g:363:7: '0'  						Match('0');  						break;  					}    					case 2:  					{  						// src/java/org/apache/lucene/expressions/js/Javascript.g:364:7: '1' .. '9' ( DECIMALDIGIT )*  						MatchRange('1'' '9');  						// src/java/org/apache/lucene/expressions/js/Javascript.g:364:16: ( DECIMALDIGIT )*  						while (true)  						{  							int alt13 = 2;  							int LA13_0 = input.LA(1);  							if (((LA13_0 >= '0' && LA13_0 <= '9')))  							{  								alt13 = 1;  							}  							switch (alt13)  							{  								case 1:  								{  									// src/java/org/apache/lucene/expressions/js/Javascript.g:  									if ((input.LA(1) >= '0' && input.LA(1) <= '9'))  									{  										input.Consume();  									}  									else  									{  										MismatchedSetException mse = new MismatchedSetException(null' input);  										Recover(mse);  										throw mse;  									}  									break;  								}    								default:  								{  									goto loop13_break;  								}  							}                                  //loop13_continue: ; // LUCENENET NOTE: Not used                              }                              loop13_break: ;  						break;  					}  				}
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MEXPONENT,The following statement contains a magic number: int alt15 = 2;
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MEXPONENT,The following statement contains a magic number: int alt16 = 2;
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: int alt17 = 32;
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA(1))  			{  				case '+':  				{  					alt17 = 1;  					break;  				}    				case '&':  				{  					int LA17_2 = input.LA(2);  					if ((LA17_2 == '&'))  					{  						alt17 = 9;  					}  					else  					{  						alt17 = 2;  					}  					break;  				}    				case '~':  				{  					alt17 = 3;  					break;  				}    				case '|':  				{  					int LA17_4 = input.LA(2);  					if ((LA17_4 == '|'))  					{  						alt17 = 11;  					}  					else  					{  						alt17 = 4;  					}  					break;  				}    				case '<':  				{  					switch (input.LA(2))  					{  						case '<':  						{  							alt17 = 5;  							break;  						}    						case '=':  						{  							alt17 = 18;  							break;  						}    						default:  						{  							alt17 = 17;  							break;  						}  					}  					break;  				}    				case '>':  				{  					switch (input.LA(2))  					{  						case '>':  						{  							int LA17_31 = input.LA(3);  							if ((LA17_31 == '>'))  							{  								alt17 = 7;  							}  							else  							{  								alt17 = 6;  							}  							break;  						}    						case '=':  						{  							alt17 = 16;  							break;  						}    						default:  						{  							alt17 = 15;  							break;  						}  					}  					break;  				}    				case '^':  				{  					alt17 = 8;  					break;  				}    				case '!':  				{  					int LA17_8 = input.LA(2);  					if ((LA17_8 == '='))  					{  						alt17 = 19;  					}  					else  					{  						alt17 = 10;  					}  					break;  				}    				case ':':  				{  					alt17 = 12;  					break;  				}    				case ''':  				{  					alt17 = 13;  					break;  				}    				case '=':  				{  					alt17 = 14;  					break;  				}    				case '?':  				{  					alt17 = 20;  					break;  				}    				case '/':  				{  					alt17 = 21;  					break;  				}    				case '.':  				{  					int LA17_14 = input.LA(2);  					if (((LA17_14 >= '0' && LA17_14 <= '9')))  					{  						alt17 = 30;  					}  					else  					{  						alt17 = 22;  					}  					break;  				}    				case '(':  				{  					alt17 = 23;  					break;  				}    				case '%':  				{  					alt17 = 24;  					break;  				}    				case '*':  				{  					alt17 = 25;  					break;  				}    				case ')':  				{  					alt17 = 26;  					break;  				}    				case '-':  				{  					alt17 = 27;  					break;  				}    				case 'A':  				case 'B':  				case 'C':  				case 'D':  				case 'E':  				case 'F':  				case 'G':  				case 'H':  				case 'I':  				case 'J':  				case 'K':  				case 'L':  				case 'M':  				case 'N':  				case 'O':  				case 'P':  				case 'Q':  				case 'R':  				case 'S':  				case 'T':  				case 'U':  				case 'V':  				case 'W':  				case 'X':  				case 'Y':  				case 'Z':  				case '_':  				case 'a':  				case 'b':  				case 'c':  				case 'd':  				case 'e':  				case 'f':  				case 'g':  				case 'h':  				case 'i':  				case 'j':  				case 'k':  				case 'l':  				case 'm':  				case 'n':  				case 'o':  				case 'p':  				case 'q':  				case 'r':  				case 's':  				case 't':  				case 'u':  				case 'v':  				case 'w':  				case 'x':  				case 'y':  				case 'z':  				{  					alt17 = 28;  					break;  				}    				case '\t':  				case '\n':  				case '\r':  				case ' ':  				{  					alt17 = 29;  					break;  				}    				case '0':  				{  					switch (input.LA(2))  					{  						case 'X':  						case 'x':  						{  							alt17 = 32;  							break;  						}    						case '0':  						case '1':  						case '2':  						case '3':  						case '4':  						case '5':  						case '6':  						case '7':  						{  							alt17 = 31;  							break;  						}    						default:  						{  							alt17 = 30;  							break;  						}  					}  					break;  				}    				case '1':  				case '2':  				case '3':  				case '4':  				case '5':  				case '6':  				case '7':  				case '8':  				case '9':  				{  					alt17 = 30;  					break;  				}    				default:  				{  					NoViableAltException nvae = new NoViableAltException(string.Empty' 17' 0' input);  					throw nvae;  				}  			}
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA(1))  			{  				case '+':  				{  					alt17 = 1;  					break;  				}    				case '&':  				{  					int LA17_2 = input.LA(2);  					if ((LA17_2 == '&'))  					{  						alt17 = 9;  					}  					else  					{  						alt17 = 2;  					}  					break;  				}    				case '~':  				{  					alt17 = 3;  					break;  				}    				case '|':  				{  					int LA17_4 = input.LA(2);  					if ((LA17_4 == '|'))  					{  						alt17 = 11;  					}  					else  					{  						alt17 = 4;  					}  					break;  				}    				case '<':  				{  					switch (input.LA(2))  					{  						case '<':  						{  							alt17 = 5;  							break;  						}    						case '=':  						{  							alt17 = 18;  							break;  						}    						default:  						{  							alt17 = 17;  							break;  						}  					}  					break;  				}    				case '>':  				{  					switch (input.LA(2))  					{  						case '>':  						{  							int LA17_31 = input.LA(3);  							if ((LA17_31 == '>'))  							{  								alt17 = 7;  							}  							else  							{  								alt17 = 6;  							}  							break;  						}    						case '=':  						{  							alt17 = 16;  							break;  						}    						default:  						{  							alt17 = 15;  							break;  						}  					}  					break;  				}    				case '^':  				{  					alt17 = 8;  					break;  				}    				case '!':  				{  					int LA17_8 = input.LA(2);  					if ((LA17_8 == '='))  					{  						alt17 = 19;  					}  					else  					{  						alt17 = 10;  					}  					break;  				}    				case ':':  				{  					alt17 = 12;  					break;  				}    				case ''':  				{  					alt17 = 13;  					break;  				}    				case '=':  				{  					alt17 = 14;  					break;  				}    				case '?':  				{  					alt17 = 20;  					break;  				}    				case '/':  				{  					alt17 = 21;  					break;  				}    				case '.':  				{  					int LA17_14 = input.LA(2);  					if (((LA17_14 >= '0' && LA17_14 <= '9')))  					{  						alt17 = 30;  					}  					else  					{  						alt17 = 22;  					}  					break;  				}    				case '(':  				{  					alt17 = 23;  					break;  				}    				case '%':  				{  					alt17 = 24;  					break;  				}    				case '*':  				{  					alt17 = 25;  					break;  				}    				case ')':  				{  					alt17 = 26;  					break;  				}    				case '-':  				{  					alt17 = 27;  					break;  				}    				case 'A':  				case 'B':  				case 'C':  				case 'D':  				case 'E':  				case 'F':  				case 'G':  				case 'H':  				case 'I':  				case 'J':  				case 'K':  				case 'L':  				case 'M':  				case 'N':  				case 'O':  				case 'P':  				case 'Q':  				case 'R':  				case 'S':  				case 'T':  				case 'U':  				case 'V':  				case 'W':  				case 'X':  				case 'Y':  				case 'Z':  				case '_':  				case 'a':  				case 'b':  				case 'c':  				case 'd':  				case 'e':  				case 'f':  				case 'g':  				case 'h':  				case 'i':  				case 'j':  				case 'k':  				case 'l':  				case 'm':  				case 'n':  				case 'o':  				case 'p':  				case 'q':  				case 'r':  				case 's':  				case 't':  				case 'u':  				case 'v':  				case 'w':  				case 'x':  				case 'y':  				case 'z':  				{  					alt17 = 28;  					break;  				}    				case '\t':  				case '\n':  				case '\r':  				case ' ':  				{  					alt17 = 29;  					break;  				}    				case '0':  				{  					switch (input.LA(2))  					{  						case 'X':  						case 'x':  						{  							alt17 = 32;  							break;  						}    						case '0':  						case '1':  						case '2':  						case '3':  						case '4':  						case '5':  						case '6':  						case '7':  						{  							alt17 = 31;  							break;  						}    						default:  						{  							alt17 = 30;  							break;  						}  					}  					break;  				}    				case '1':  				case '2':  				case '3':  				case '4':  				case '5':  				case '6':  				case '7':  				case '8':  				case '9':  				{  					alt17 = 30;  					break;  				}    				default:  				{  					NoViableAltException nvae = new NoViableAltException(string.Empty' 17' 0' input);  					throw nvae;  				}  			}
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA(1))  			{  				case '+':  				{  					alt17 = 1;  					break;  				}    				case '&':  				{  					int LA17_2 = input.LA(2);  					if ((LA17_2 == '&'))  					{  						alt17 = 9;  					}  					else  					{  						alt17 = 2;  					}  					break;  				}    				case '~':  				{  					alt17 = 3;  					break;  				}    				case '|':  				{  					int LA17_4 = input.LA(2);  					if ((LA17_4 == '|'))  					{  						alt17 = 11;  					}  					else  					{  						alt17 = 4;  					}  					break;  				}    				case '<':  				{  					switch (input.LA(2))  					{  						case '<':  						{  							alt17 = 5;  							break;  						}    						case '=':  						{  							alt17 = 18;  							break;  						}    						default:  						{  							alt17 = 17;  							break;  						}  					}  					break;  				}    				case '>':  				{  					switch (input.LA(2))  					{  						case '>':  						{  							int LA17_31 = input.LA(3);  							if ((LA17_31 == '>'))  							{  								alt17 = 7;  							}  							else  							{  								alt17 = 6;  							}  							break;  						}    						case '=':  						{  							alt17 = 16;  							break;  						}    						default:  						{  							alt17 = 15;  							break;  						}  					}  					break;  				}    				case '^':  				{  					alt17 = 8;  					break;  				}    				case '!':  				{  					int LA17_8 = input.LA(2);  					if ((LA17_8 == '='))  					{  						alt17 = 19;  					}  					else  					{  						alt17 = 10;  					}  					break;  				}    				case ':':  				{  					alt17 = 12;  					break;  				}    				case ''':  				{  					alt17 = 13;  					break;  				}    				case '=':  				{  					alt17 = 14;  					break;  				}    				case '?':  				{  					alt17 = 20;  					break;  				}    				case '/':  				{  					alt17 = 21;  					break;  				}    				case '.':  				{  					int LA17_14 = input.LA(2);  					if (((LA17_14 >= '0' && LA17_14 <= '9')))  					{  						alt17 = 30;  					}  					else  					{  						alt17 = 22;  					}  					break;  				}    				case '(':  				{  					alt17 = 23;  					break;  				}    				case '%':  				{  					alt17 = 24;  					break;  				}    				case '*':  				{  					alt17 = 25;  					break;  				}    				case ')':  				{  					alt17 = 26;  					break;  				}    				case '-':  				{  					alt17 = 27;  					break;  				}    				case 'A':  				case 'B':  				case 'C':  				case 'D':  				case 'E':  				case 'F':  				case 'G':  				case 'H':  				case 'I':  				case 'J':  				case 'K':  				case 'L':  				case 'M':  				case 'N':  				case 'O':  				case 'P':  				case 'Q':  				case 'R':  				case 'S':  				case 'T':  				case 'U':  				case 'V':  				case 'W':  				case 'X':  				case 'Y':  				case 'Z':  				case '_':  				case 'a':  				case 'b':  				case 'c':  				case 'd':  				case 'e':  				case 'f':  				case 'g':  				case 'h':  				case 'i':  				case 'j':  				case 'k':  				case 'l':  				case 'm':  				case 'n':  				case 'o':  				case 'p':  				case 'q':  				case 'r':  				case 's':  				case 't':  				case 'u':  				case 'v':  				case 'w':  				case 'x':  				case 'y':  				case 'z':  				{  					alt17 = 28;  					break;  				}    				case '\t':  				case '\n':  				case '\r':  				case ' ':  				{  					alt17 = 29;  					break;  				}    				case '0':  				{  					switch (input.LA(2))  					{  						case 'X':  						case 'x':  						{  							alt17 = 32;  							break;  						}    						case '0':  						case '1':  						case '2':  						case '3':  						case '4':  						case '5':  						case '6':  						case '7':  						{  							alt17 = 31;  							break;  						}    						default:  						{  							alt17 = 30;  							break;  						}  					}  					break;  				}    				case '1':  				case '2':  				case '3':  				case '4':  				case '5':  				case '6':  				case '7':  				case '8':  				case '9':  				{  					alt17 = 30;  					break;  				}    				default:  				{  					NoViableAltException nvae = new NoViableAltException(string.Empty' 17' 0' input);  					throw nvae;  				}  			}
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA(1))  			{  				case '+':  				{  					alt17 = 1;  					break;  				}    				case '&':  				{  					int LA17_2 = input.LA(2);  					if ((LA17_2 == '&'))  					{  						alt17 = 9;  					}  					else  					{  						alt17 = 2;  					}  					break;  				}    				case '~':  				{  					alt17 = 3;  					break;  				}    				case '|':  				{  					int LA17_4 = input.LA(2);  					if ((LA17_4 == '|'))  					{  						alt17 = 11;  					}  					else  					{  						alt17 = 4;  					}  					break;  				}    				case '<':  				{  					switch (input.LA(2))  					{  						case '<':  						{  							alt17 = 5;  							break;  						}    						case '=':  						{  							alt17 = 18;  							break;  						}    						default:  						{  							alt17 = 17;  							break;  						}  					}  					break;  				}    				case '>':  				{  					switch (input.LA(2))  					{  						case '>':  						{  							int LA17_31 = input.LA(3);  							if ((LA17_31 == '>'))  							{  								alt17 = 7;  							}  							else  							{  								alt17 = 6;  							}  							break;  						}    						case '=':  						{  							alt17 = 16;  							break;  						}    						default:  						{  							alt17 = 15;  							break;  						}  					}  					break;  				}    				case '^':  				{  					alt17 = 8;  					break;  				}    				case '!':  				{  					int LA17_8 = input.LA(2);  					if ((LA17_8 == '='))  					{  						alt17 = 19;  					}  					else  					{  						alt17 = 10;  					}  					break;  				}    				case ':':  				{  					alt17 = 12;  					break;  				}    				case ''':  				{  					alt17 = 13;  					break;  				}    				case '=':  				{  					alt17 = 14;  					break;  				}    				case '?':  				{  					alt17 = 20;  					break;  				}    				case '/':  				{  					alt17 = 21;  					break;  				}    				case '.':  				{  					int LA17_14 = input.LA(2);  					if (((LA17_14 >= '0' && LA17_14 <= '9')))  					{  						alt17 = 30;  					}  					else  					{  						alt17 = 22;  					}  					break;  				}    				case '(':  				{  					alt17 = 23;  					break;  				}    				case '%':  				{  					alt17 = 24;  					break;  				}    				case '*':  				{  					alt17 = 25;  					break;  				}    				case ')':  				{  					alt17 = 26;  					break;  				}    				case '-':  				{  					alt17 = 27;  					break;  				}    				case 'A':  				case 'B':  				case 'C':  				case 'D':  				case 'E':  				case 'F':  				case 'G':  				case 'H':  				case 'I':  				case 'J':  				case 'K':  				case 'L':  				case 'M':  				case 'N':  				case 'O':  				case 'P':  				case 'Q':  				case 'R':  				case 'S':  				case 'T':  				case 'U':  				case 'V':  				case 'W':  				case 'X':  				case 'Y':  				case 'Z':  				case '_':  				case 'a':  				case 'b':  				case 'c':  				case 'd':  				case 'e':  				case 'f':  				case 'g':  				case 'h':  				case 'i':  				case 'j':  				case 'k':  				case 'l':  				case 'm':  				case 'n':  				case 'o':  				case 'p':  				case 'q':  				case 'r':  				case 's':  				case 't':  				case 'u':  				case 'v':  				case 'w':  				case 'x':  				case 'y':  				case 'z':  				{  					alt17 = 28;  					break;  				}    				case '\t':  				case '\n':  				case '\r':  				case ' ':  				{  					alt17 = 29;  					break;  				}    				case '0':  				{  					switch (input.LA(2))  					{  						case 'X':  						case 'x':  						{  							alt17 = 32;  							break;  						}    						case '0':  						case '1':  						case '2':  						case '3':  						case '4':  						case '5':  						case '6':  						case '7':  						{  							alt17 = 31;  							break;  						}    						default:  						{  							alt17 = 30;  							break;  						}  					}  					break;  				}    				case '1':  				case '2':  				case '3':  				case '4':  				case '5':  				case '6':  				case '7':  				case '8':  				case '9':  				{  					alt17 = 30;  					break;  				}    				default:  				{  					NoViableAltException nvae = new NoViableAltException(string.Empty' 17' 0' input);  					throw nvae;  				}  			}
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA(1))  			{  				case '+':  				{  					alt17 = 1;  					break;  				}    				case '&':  				{  					int LA17_2 = input.LA(2);  					if ((LA17_2 == '&'))  					{  						alt17 = 9;  					}  					else  					{  						alt17 = 2;  					}  					break;  				}    				case '~':  				{  					alt17 = 3;  					break;  				}    				case '|':  				{  					int LA17_4 = input.LA(2);  					if ((LA17_4 == '|'))  					{  						alt17 = 11;  					}  					else  					{  						alt17 = 4;  					}  					break;  				}    				case '<':  				{  					switch (input.LA(2))  					{  						case '<':  						{  							alt17 = 5;  							break;  						}    						case '=':  						{  							alt17 = 18;  							break;  						}    						default:  						{  							alt17 = 17;  							break;  						}  					}  					break;  				}    				case '>':  				{  					switch (input.LA(2))  					{  						case '>':  						{  							int LA17_31 = input.LA(3);  							if ((LA17_31 == '>'))  							{  								alt17 = 7;  							}  							else  							{  								alt17 = 6;  							}  							break;  						}    						case '=':  						{  							alt17 = 16;  							break;  						}    						default:  						{  							alt17 = 15;  							break;  						}  					}  					break;  				}    				case '^':  				{  					alt17 = 8;  					break;  				}    				case '!':  				{  					int LA17_8 = input.LA(2);  					if ((LA17_8 == '='))  					{  						alt17 = 19;  					}  					else  					{  						alt17 = 10;  					}  					break;  				}    				case ':':  				{  					alt17 = 12;  					break;  				}    				case ''':  				{  					alt17 = 13;  					break;  				}    				case '=':  				{  					alt17 = 14;  					break;  				}    				case '?':  				{  					alt17 = 20;  					break;  				}    				case '/':  				{  					alt17 = 21;  					break;  				}    				case '.':  				{  					int LA17_14 = input.LA(2);  					if (((LA17_14 >= '0' && LA17_14 <= '9')))  					{  						alt17 = 30;  					}  					else  					{  						alt17 = 22;  					}  					break;  				}    				case '(':  				{  					alt17 = 23;  					break;  				}    				case '%':  				{  					alt17 = 24;  					break;  				}    				case '*':  				{  					alt17 = 25;  					break;  				}    				case ')':  				{  					alt17 = 26;  					break;  				}    				case '-':  				{  					alt17 = 27;  					break;  				}    				case 'A':  				case 'B':  				case 'C':  				case 'D':  				case 'E':  				case 'F':  				case 'G':  				case 'H':  				case 'I':  				case 'J':  				case 'K':  				case 'L':  				case 'M':  				case 'N':  				case 'O':  				case 'P':  				case 'Q':  				case 'R':  				case 'S':  				case 'T':  				case 'U':  				case 'V':  				case 'W':  				case 'X':  				case 'Y':  				case 'Z':  				case '_':  				case 'a':  				case 'b':  				case 'c':  				case 'd':  				case 'e':  				case 'f':  				case 'g':  				case 'h':  				case 'i':  				case 'j':  				case 'k':  				case 'l':  				case 'm':  				case 'n':  				case 'o':  				case 'p':  				case 'q':  				case 'r':  				case 's':  				case 't':  				case 'u':  				case 'v':  				case 'w':  				case 'x':  				case 'y':  				case 'z':  				{  					alt17 = 28;  					break;  				}    				case '\t':  				case '\n':  				case '\r':  				case ' ':  				{  					alt17 = 29;  					break;  				}    				case '0':  				{  					switch (input.LA(2))  					{  						case 'X':  						case 'x':  						{  							alt17 = 32;  							break;  						}    						case '0':  						case '1':  						case '2':  						case '3':  						case '4':  						case '5':  						case '6':  						case '7':  						{  							alt17 = 31;  							break;  						}    						default:  						{  							alt17 = 30;  							break;  						}  					}  					break;  				}    				case '1':  				case '2':  				case '3':  				case '4':  				case '5':  				case '6':  				case '7':  				case '8':  				case '9':  				{  					alt17 = 30;  					break;  				}    				default:  				{  					NoViableAltException nvae = new NoViableAltException(string.Empty' 17' 0' input);  					throw nvae;  				}  			}
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA(1))  			{  				case '+':  				{  					alt17 = 1;  					break;  				}    				case '&':  				{  					int LA17_2 = input.LA(2);  					if ((LA17_2 == '&'))  					{  						alt17 = 9;  					}  					else  					{  						alt17 = 2;  					}  					break;  				}    				case '~':  				{  					alt17 = 3;  					break;  				}    				case '|':  				{  					int LA17_4 = input.LA(2);  					if ((LA17_4 == '|'))  					{  						alt17 = 11;  					}  					else  					{  						alt17 = 4;  					}  					break;  				}    				case '<':  				{  					switch (input.LA(2))  					{  						case '<':  						{  							alt17 = 5;  							break;  						}    						case '=':  						{  							alt17 = 18;  							break;  						}    						default:  						{  							alt17 = 17;  							break;  						}  					}  					break;  				}    				case '>':  				{  					switch (input.LA(2))  					{  						case '>':  						{  							int LA17_31 = input.LA(3);  							if ((LA17_31 == '>'))  							{  								alt17 = 7;  							}  							else  							{  								alt17 = 6;  							}  							break;  						}    						case '=':  						{  							alt17 = 16;  							break;  						}    						default:  						{  							alt17 = 15;  							break;  						}  					}  					break;  				}    				case '^':  				{  					alt17 = 8;  					break;  				}    				case '!':  				{  					int LA17_8 = input.LA(2);  					if ((LA17_8 == '='))  					{  						alt17 = 19;  					}  					else  					{  						alt17 = 10;  					}  					break;  				}    				case ':':  				{  					alt17 = 12;  					break;  				}    				case ''':  				{  					alt17 = 13;  					break;  				}    				case '=':  				{  					alt17 = 14;  					break;  				}    				case '?':  				{  					alt17 = 20;  					break;  				}    				case '/':  				{  					alt17 = 21;  					break;  				}    				case '.':  				{  					int LA17_14 = input.LA(2);  					if (((LA17_14 >= '0' && LA17_14 <= '9')))  					{  						alt17 = 30;  					}  					else  					{  						alt17 = 22;  					}  					break;  				}    				case '(':  				{  					alt17 = 23;  					break;  				}    				case '%':  				{  					alt17 = 24;  					break;  				}    				case '*':  				{  					alt17 = 25;  					break;  				}    				case ')':  				{  					alt17 = 26;  					break;  				}    				case '-':  				{  					alt17 = 27;  					break;  				}    				case 'A':  				case 'B':  				case 'C':  				case 'D':  				case 'E':  				case 'F':  				case 'G':  				case 'H':  				case 'I':  				case 'J':  				case 'K':  				case 'L':  				case 'M':  				case 'N':  				case 'O':  				case 'P':  				case 'Q':  				case 'R':  				case 'S':  				case 'T':  				case 'U':  				case 'V':  				case 'W':  				case 'X':  				case 'Y':  				case 'Z':  				case '_':  				case 'a':  				case 'b':  				case 'c':  				case 'd':  				case 'e':  				case 'f':  				case 'g':  				case 'h':  				case 'i':  				case 'j':  				case 'k':  				case 'l':  				case 'm':  				case 'n':  				case 'o':  				case 'p':  				case 'q':  				case 'r':  				case 's':  				case 't':  				case 'u':  				case 'v':  				case 'w':  				case 'x':  				case 'y':  				case 'z':  				{  					alt17 = 28;  					break;  				}    				case '\t':  				case '\n':  				case '\r':  				case ' ':  				{  					alt17 = 29;  					break;  				}    				case '0':  				{  					switch (input.LA(2))  					{  						case 'X':  						case 'x':  						{  							alt17 = 32;  							break;  						}    						case '0':  						case '1':  						case '2':  						case '3':  						case '4':  						case '5':  						case '6':  						case '7':  						{  							alt17 = 31;  							break;  						}    						default:  						{  							alt17 = 30;  							break;  						}  					}  					break;  				}    				case '1':  				case '2':  				case '3':  				case '4':  				case '5':  				case '6':  				case '7':  				case '8':  				case '9':  				{  					alt17 = 30;  					break;  				}    				default:  				{  					NoViableAltException nvae = new NoViableAltException(string.Empty' 17' 0' input);  					throw nvae;  				}  			}
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA(1))  			{  				case '+':  				{  					alt17 = 1;  					break;  				}    				case '&':  				{  					int LA17_2 = input.LA(2);  					if ((LA17_2 == '&'))  					{  						alt17 = 9;  					}  					else  					{  						alt17 = 2;  					}  					break;  				}    				case '~':  				{  					alt17 = 3;  					break;  				}    				case '|':  				{  					int LA17_4 = input.LA(2);  					if ((LA17_4 == '|'))  					{  						alt17 = 11;  					}  					else  					{  						alt17 = 4;  					}  					break;  				}    				case '<':  				{  					switch (input.LA(2))  					{  						case '<':  						{  							alt17 = 5;  							break;  						}    						case '=':  						{  							alt17 = 18;  							break;  						}    						default:  						{  							alt17 = 17;  							break;  						}  					}  					break;  				}    				case '>':  				{  					switch (input.LA(2))  					{  						case '>':  						{  							int LA17_31 = input.LA(3);  							if ((LA17_31 == '>'))  							{  								alt17 = 7;  							}  							else  							{  								alt17 = 6;  							}  							break;  						}    						case '=':  						{  							alt17 = 16;  							break;  						}    						default:  						{  							alt17 = 15;  							break;  						}  					}  					break;  				}    				case '^':  				{  					alt17 = 8;  					break;  				}    				case '!':  				{  					int LA17_8 = input.LA(2);  					if ((LA17_8 == '='))  					{  						alt17 = 19;  					}  					else  					{  						alt17 = 10;  					}  					break;  				}    				case ':':  				{  					alt17 = 12;  					break;  				}    				case ''':  				{  					alt17 = 13;  					break;  				}    				case '=':  				{  					alt17 = 14;  					break;  				}    				case '?':  				{  					alt17 = 20;  					break;  				}    				case '/':  				{  					alt17 = 21;  					break;  				}    				case '.':  				{  					int LA17_14 = input.LA(2);  					if (((LA17_14 >= '0' && LA17_14 <= '9')))  					{  						alt17 = 30;  					}  					else  					{  						alt17 = 22;  					}  					break;  				}    				case '(':  				{  					alt17 = 23;  					break;  				}    				case '%':  				{  					alt17 = 24;  					break;  				}    				case '*':  				{  					alt17 = 25;  					break;  				}    				case ')':  				{  					alt17 = 26;  					break;  				}    				case '-':  				{  					alt17 = 27;  					break;  				}    				case 'A':  				case 'B':  				case 'C':  				case 'D':  				case 'E':  				case 'F':  				case 'G':  				case 'H':  				case 'I':  				case 'J':  				case 'K':  				case 'L':  				case 'M':  				case 'N':  				case 'O':  				case 'P':  				case 'Q':  				case 'R':  				case 'S':  				case 'T':  				case 'U':  				case 'V':  				case 'W':  				case 'X':  				case 'Y':  				case 'Z':  				case '_':  				case 'a':  				case 'b':  				case 'c':  				case 'd':  				case 'e':  				case 'f':  				case 'g':  				case 'h':  				case 'i':  				case 'j':  				case 'k':  				case 'l':  				case 'm':  				case 'n':  				case 'o':  				case 'p':  				case 'q':  				case 'r':  				case 's':  				case 't':  				case 'u':  				case 'v':  				case 'w':  				case 'x':  				case 'y':  				case 'z':  				{  					alt17 = 28;  					break;  				}    				case '\t':  				case '\n':  				case '\r':  				case ' ':  				{  					alt17 = 29;  					break;  				}    				case '0':  				{  					switch (input.LA(2))  					{  						case 'X':  						case 'x':  						{  							alt17 = 32;  							break;  						}    						case '0':  						case '1':  						case '2':  						case '3':  						case '4':  						case '5':  						case '6':  						case '7':  						{  							alt17 = 31;  							break;  						}    						default:  						{  							alt17 = 30;  							break;  						}  					}  					break;  				}    				case '1':  				case '2':  				case '3':  				case '4':  				case '5':  				case '6':  				case '7':  				case '8':  				case '9':  				{  					alt17 = 30;  					break;  				}    				default:  				{  					NoViableAltException nvae = new NoViableAltException(string.Empty' 17' 0' input);  					throw nvae;  				}  			}
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA(1))  			{  				case '+':  				{  					alt17 = 1;  					break;  				}    				case '&':  				{  					int LA17_2 = input.LA(2);  					if ((LA17_2 == '&'))  					{  						alt17 = 9;  					}  					else  					{  						alt17 = 2;  					}  					break;  				}    				case '~':  				{  					alt17 = 3;  					break;  				}    				case '|':  				{  					int LA17_4 = input.LA(2);  					if ((LA17_4 == '|'))  					{  						alt17 = 11;  					}  					else  					{  						alt17 = 4;  					}  					break;  				}    				case '<':  				{  					switch (input.LA(2))  					{  						case '<':  						{  							alt17 = 5;  							break;  						}    						case '=':  						{  							alt17 = 18;  							break;  						}    						default:  						{  							alt17 = 17;  							break;  						}  					}  					break;  				}    				case '>':  				{  					switch (input.LA(2))  					{  						case '>':  						{  							int LA17_31 = input.LA(3);  							if ((LA17_31 == '>'))  							{  								alt17 = 7;  							}  							else  							{  								alt17 = 6;  							}  							break;  						}    						case '=':  						{  							alt17 = 16;  							break;  						}    						default:  						{  							alt17 = 15;  							break;  						}  					}  					break;  				}    				case '^':  				{  					alt17 = 8;  					break;  				}    				case '!':  				{  					int LA17_8 = input.LA(2);  					if ((LA17_8 == '='))  					{  						alt17 = 19;  					}  					else  					{  						alt17 = 10;  					}  					break;  				}    				case ':':  				{  					alt17 = 12;  					break;  				}    				case ''':  				{  					alt17 = 13;  					break;  				}    				case '=':  				{  					alt17 = 14;  					break;  				}    				case '?':  				{  					alt17 = 20;  					break;  				}    				case '/':  				{  					alt17 = 21;  					break;  				}    				case '.':  				{  					int LA17_14 = input.LA(2);  					if (((LA17_14 >= '0' && LA17_14 <= '9')))  					{  						alt17 = 30;  					}  					else  					{  						alt17 = 22;  					}  					break;  				}    				case '(':  				{  					alt17 = 23;  					break;  				}    				case '%':  				{  					alt17 = 24;  					break;  				}    				case '*':  				{  					alt17 = 25;  					break;  				}    				case ')':  				{  					alt17 = 26;  					break;  				}    				case '-':  				{  					alt17 = 27;  					break;  				}    				case 'A':  				case 'B':  				case 'C':  				case 'D':  				case 'E':  				case 'F':  				case 'G':  				case 'H':  				case 'I':  				case 'J':  				case 'K':  				case 'L':  				case 'M':  				case 'N':  				case 'O':  				case 'P':  				case 'Q':  				case 'R':  				case 'S':  				case 'T':  				case 'U':  				case 'V':  				case 'W':  				case 'X':  				case 'Y':  				case 'Z':  				case '_':  				case 'a':  				case 'b':  				case 'c':  				case 'd':  				case 'e':  				case 'f':  				case 'g':  				case 'h':  				case 'i':  				case 'j':  				case 'k':  				case 'l':  				case 'm':  				case 'n':  				case 'o':  				case 'p':  				case 'q':  				case 'r':  				case 's':  				case 't':  				case 'u':  				case 'v':  				case 'w':  				case 'x':  				case 'y':  				case 'z':  				{  					alt17 = 28;  					break;  				}    				case '\t':  				case '\n':  				case '\r':  				case ' ':  				{  					alt17 = 29;  					break;  				}    				case '0':  				{  					switch (input.LA(2))  					{  						case 'X':  						case 'x':  						{  							alt17 = 32;  							break;  						}    						case '0':  						case '1':  						case '2':  						case '3':  						case '4':  						case '5':  						case '6':  						case '7':  						{  							alt17 = 31;  							break;  						}    						default:  						{  							alt17 = 30;  							break;  						}  					}  					break;  				}    				case '1':  				case '2':  				case '3':  				case '4':  				case '5':  				case '6':  				case '7':  				case '8':  				case '9':  				{  					alt17 = 30;  					break;  				}    				default:  				{  					NoViableAltException nvae = new NoViableAltException(string.Empty' 17' 0' input);  					throw nvae;  				}  			}
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA(1))  			{  				case '+':  				{  					alt17 = 1;  					break;  				}    				case '&':  				{  					int LA17_2 = input.LA(2);  					if ((LA17_2 == '&'))  					{  						alt17 = 9;  					}  					else  					{  						alt17 = 2;  					}  					break;  				}    				case '~':  				{  					alt17 = 3;  					break;  				}    				case '|':  				{  					int LA17_4 = input.LA(2);  					if ((LA17_4 == '|'))  					{  						alt17 = 11;  					}  					else  					{  						alt17 = 4;  					}  					break;  				}    				case '<':  				{  					switch (input.LA(2))  					{  						case '<':  						{  							alt17 = 5;  							break;  						}    						case '=':  						{  							alt17 = 18;  							break;  						}    						default:  						{  							alt17 = 17;  							break;  						}  					}  					break;  				}    				case '>':  				{  					switch (input.LA(2))  					{  						case '>':  						{  							int LA17_31 = input.LA(3);  							if ((LA17_31 == '>'))  							{  								alt17 = 7;  							}  							else  							{  								alt17 = 6;  							}  							break;  						}    						case '=':  						{  							alt17 = 16;  							break;  						}    						default:  						{  							alt17 = 15;  							break;  						}  					}  					break;  				}    				case '^':  				{  					alt17 = 8;  					break;  				}    				case '!':  				{  					int LA17_8 = input.LA(2);  					if ((LA17_8 == '='))  					{  						alt17 = 19;  					}  					else  					{  						alt17 = 10;  					}  					break;  				}    				case ':':  				{  					alt17 = 12;  					break;  				}    				case ''':  				{  					alt17 = 13;  					break;  				}    				case '=':  				{  					alt17 = 14;  					break;  				}    				case '?':  				{  					alt17 = 20;  					break;  				}    				case '/':  				{  					alt17 = 21;  					break;  				}    				case '.':  				{  					int LA17_14 = input.LA(2);  					if (((LA17_14 >= '0' && LA17_14 <= '9')))  					{  						alt17 = 30;  					}  					else  					{  						alt17 = 22;  					}  					break;  				}    				case '(':  				{  					alt17 = 23;  					break;  				}    				case '%':  				{  					alt17 = 24;  					break;  				}    				case '*':  				{  					alt17 = 25;  					break;  				}    				case ')':  				{  					alt17 = 26;  					break;  				}    				case '-':  				{  					alt17 = 27;  					break;  				}    				case 'A':  				case 'B':  				case 'C':  				case 'D':  				case 'E':  				case 'F':  				case 'G':  				case 'H':  				case 'I':  				case 'J':  				case 'K':  				case 'L':  				case 'M':  				case 'N':  				case 'O':  				case 'P':  				case 'Q':  				case 'R':  				case 'S':  				case 'T':  				case 'U':  				case 'V':  				case 'W':  				case 'X':  				case 'Y':  				case 'Z':  				case '_':  				case 'a':  				case 'b':  				case 'c':  				case 'd':  				case 'e':  				case 'f':  				case 'g':  				case 'h':  				case 'i':  				case 'j':  				case 'k':  				case 'l':  				case 'm':  				case 'n':  				case 'o':  				case 'p':  				case 'q':  				case 'r':  				case 's':  				case 't':  				case 'u':  				case 'v':  				case 'w':  				case 'x':  				case 'y':  				case 'z':  				{  					alt17 = 28;  					break;  				}    				case '\t':  				case '\n':  				case '\r':  				case ' ':  				{  					alt17 = 29;  					break;  				}    				case '0':  				{  					switch (input.LA(2))  					{  						case 'X':  						case 'x':  						{  							alt17 = 32;  							break;  						}    						case '0':  						case '1':  						case '2':  						case '3':  						case '4':  						case '5':  						case '6':  						case '7':  						{  							alt17 = 31;  							break;  						}    						default:  						{  							alt17 = 30;  							break;  						}  					}  					break;  				}    				case '1':  				case '2':  				case '3':  				case '4':  				case '5':  				case '6':  				case '7':  				case '8':  				case '9':  				{  					alt17 = 30;  					break;  				}    				default:  				{  					NoViableAltException nvae = new NoViableAltException(string.Empty' 17' 0' input);  					throw nvae;  				}  			}
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA(1))  			{  				case '+':  				{  					alt17 = 1;  					break;  				}    				case '&':  				{  					int LA17_2 = input.LA(2);  					if ((LA17_2 == '&'))  					{  						alt17 = 9;  					}  					else  					{  						alt17 = 2;  					}  					break;  				}    				case '~':  				{  					alt17 = 3;  					break;  				}    				case '|':  				{  					int LA17_4 = input.LA(2);  					if ((LA17_4 == '|'))  					{  						alt17 = 11;  					}  					else  					{  						alt17 = 4;  					}  					break;  				}    				case '<':  				{  					switch (input.LA(2))  					{  						case '<':  						{  							alt17 = 5;  							break;  						}    						case '=':  						{  							alt17 = 18;  							break;  						}    						default:  						{  							alt17 = 17;  							break;  						}  					}  					break;  				}    				case '>':  				{  					switch (input.LA(2))  					{  						case '>':  						{  							int LA17_31 = input.LA(3);  							if ((LA17_31 == '>'))  							{  								alt17 = 7;  							}  							else  							{  								alt17 = 6;  							}  							break;  						}    						case '=':  						{  							alt17 = 16;  							break;  						}    						default:  						{  							alt17 = 15;  							break;  						}  					}  					break;  				}    				case '^':  				{  					alt17 = 8;  					break;  				}    				case '!':  				{  					int LA17_8 = input.LA(2);  					if ((LA17_8 == '='))  					{  						alt17 = 19;  					}  					else  					{  						alt17 = 10;  					}  					break;  				}    				case ':':  				{  					alt17 = 12;  					break;  				}    				case ''':  				{  					alt17 = 13;  					break;  				}    				case '=':  				{  					alt17 = 14;  					break;  				}    				case '?':  				{  					alt17 = 20;  					break;  				}    				case '/':  				{  					alt17 = 21;  					break;  				}    				case '.':  				{  					int LA17_14 = input.LA(2);  					if (((LA17_14 >= '0' && LA17_14 <= '9')))  					{  						alt17 = 30;  					}  					else  					{  						alt17 = 22;  					}  					break;  				}    				case '(':  				{  					alt17 = 23;  					break;  				}    				case '%':  				{  					alt17 = 24;  					break;  				}    				case '*':  				{  					alt17 = 25;  					break;  				}    				case ')':  				{  					alt17 = 26;  					break;  				}    				case '-':  				{  					alt17 = 27;  					break;  				}    				case 'A':  				case 'B':  				case 'C':  				case 'D':  				case 'E':  				case 'F':  				case 'G':  				case 'H':  				case 'I':  				case 'J':  				case 'K':  				case 'L':  				case 'M':  				case 'N':  				case 'O':  				case 'P':  				case 'Q':  				case 'R':  				case 'S':  				case 'T':  				case 'U':  				case 'V':  				case 'W':  				case 'X':  				case 'Y':  				case 'Z':  				case '_':  				case 'a':  				case 'b':  				case 'c':  				case 'd':  				case 'e':  				case 'f':  				case 'g':  				case 'h':  				case 'i':  				case 'j':  				case 'k':  				case 'l':  				case 'm':  				case 'n':  				case 'o':  				case 'p':  				case 'q':  				case 'r':  				case 's':  				case 't':  				case 'u':  				case 'v':  				case 'w':  				case 'x':  				case 'y':  				case 'z':  				{  					alt17 = 28;  					break;  				}    				case '\t':  				case '\n':  				case '\r':  				case ' ':  				{  					alt17 = 29;  					break;  				}    				case '0':  				{  					switch (input.LA(2))  					{  						case 'X':  						case 'x':  						{  							alt17 = 32;  							break;  						}    						case '0':  						case '1':  						case '2':  						case '3':  						case '4':  						case '5':  						case '6':  						case '7':  						{  							alt17 = 31;  							break;  						}    						default:  						{  							alt17 = 30;  							break;  						}  					}  					break;  				}    				case '1':  				case '2':  				case '3':  				case '4':  				case '5':  				case '6':  				case '7':  				case '8':  				case '9':  				{  					alt17 = 30;  					break;  				}    				default:  				{  					NoViableAltException nvae = new NoViableAltException(string.Empty' 17' 0' input);  					throw nvae;  				}  			}
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA(1))  			{  				case '+':  				{  					alt17 = 1;  					break;  				}    				case '&':  				{  					int LA17_2 = input.LA(2);  					if ((LA17_2 == '&'))  					{  						alt17 = 9;  					}  					else  					{  						alt17 = 2;  					}  					break;  				}    				case '~':  				{  					alt17 = 3;  					break;  				}    				case '|':  				{  					int LA17_4 = input.LA(2);  					if ((LA17_4 == '|'))  					{  						alt17 = 11;  					}  					else  					{  						alt17 = 4;  					}  					break;  				}    				case '<':  				{  					switch (input.LA(2))  					{  						case '<':  						{  							alt17 = 5;  							break;  						}    						case '=':  						{  							alt17 = 18;  							break;  						}    						default:  						{  							alt17 = 17;  							break;  						}  					}  					break;  				}    				case '>':  				{  					switch (input.LA(2))  					{  						case '>':  						{  							int LA17_31 = input.LA(3);  							if ((LA17_31 == '>'))  							{  								alt17 = 7;  							}  							else  							{  								alt17 = 6;  							}  							break;  						}    						case '=':  						{  							alt17 = 16;  							break;  						}    						default:  						{  							alt17 = 15;  							break;  						}  					}  					break;  				}    				case '^':  				{  					alt17 = 8;  					break;  				}    				case '!':  				{  					int LA17_8 = input.LA(2);  					if ((LA17_8 == '='))  					{  						alt17 = 19;  					}  					else  					{  						alt17 = 10;  					}  					break;  				}    				case ':':  				{  					alt17 = 12;  					break;  				}    				case ''':  				{  					alt17 = 13;  					break;  				}    				case '=':  				{  					alt17 = 14;  					break;  				}    				case '?':  				{  					alt17 = 20;  					break;  				}    				case '/':  				{  					alt17 = 21;  					break;  				}    				case '.':  				{  					int LA17_14 = input.LA(2);  					if (((LA17_14 >= '0' && LA17_14 <= '9')))  					{  						alt17 = 30;  					}  					else  					{  						alt17 = 22;  					}  					break;  				}    				case '(':  				{  					alt17 = 23;  					break;  				}    				case '%':  				{  					alt17 = 24;  					break;  				}    				case '*':  				{  					alt17 = 25;  					break;  				}    				case ')':  				{  					alt17 = 26;  					break;  				}    				case '-':  				{  					alt17 = 27;  					break;  				}    				case 'A':  				case 'B':  				case 'C':  				case 'D':  				case 'E':  				case 'F':  				case 'G':  				case 'H':  				case 'I':  				case 'J':  				case 'K':  				case 'L':  				case 'M':  				case 'N':  				case 'O':  				case 'P':  				case 'Q':  				case 'R':  				case 'S':  				case 'T':  				case 'U':  				case 'V':  				case 'W':  				case 'X':  				case 'Y':  				case 'Z':  				case '_':  				case 'a':  				case 'b':  				case 'c':  				case 'd':  				case 'e':  				case 'f':  				case 'g':  				case 'h':  				case 'i':  				case 'j':  				case 'k':  				case 'l':  				case 'm':  				case 'n':  				case 'o':  				case 'p':  				case 'q':  				case 'r':  				case 's':  				case 't':  				case 'u':  				case 'v':  				case 'w':  				case 'x':  				case 'y':  				case 'z':  				{  					alt17 = 28;  					break;  				}    				case '\t':  				case '\n':  				case '\r':  				case ' ':  				{  					alt17 = 29;  					break;  				}    				case '0':  				{  					switch (input.LA(2))  					{  						case 'X':  						case 'x':  						{  							alt17 = 32;  							break;  						}    						case '0':  						case '1':  						case '2':  						case '3':  						case '4':  						case '5':  						case '6':  						case '7':  						{  							alt17 = 31;  							break;  						}    						default:  						{  							alt17 = 30;  							break;  						}  					}  					break;  				}    				case '1':  				case '2':  				case '3':  				case '4':  				case '5':  				case '6':  				case '7':  				case '8':  				case '9':  				{  					alt17 = 30;  					break;  				}    				default:  				{  					NoViableAltException nvae = new NoViableAltException(string.Empty' 17' 0' input);  					throw nvae;  				}  			}
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA(1))  			{  				case '+':  				{  					alt17 = 1;  					break;  				}    				case '&':  				{  					int LA17_2 = input.LA(2);  					if ((LA17_2 == '&'))  					{  						alt17 = 9;  					}  					else  					{  						alt17 = 2;  					}  					break;  				}    				case '~':  				{  					alt17 = 3;  					break;  				}    				case '|':  				{  					int LA17_4 = input.LA(2);  					if ((LA17_4 == '|'))  					{  						alt17 = 11;  					}  					else  					{  						alt17 = 4;  					}  					break;  				}    				case '<':  				{  					switch (input.LA(2))  					{  						case '<':  						{  							alt17 = 5;  							break;  						}    						case '=':  						{  							alt17 = 18;  							break;  						}    						default:  						{  							alt17 = 17;  							break;  						}  					}  					break;  				}    				case '>':  				{  					switch (input.LA(2))  					{  						case '>':  						{  							int LA17_31 = input.LA(3);  							if ((LA17_31 == '>'))  							{  								alt17 = 7;  							}  							else  							{  								alt17 = 6;  							}  							break;  						}    						case '=':  						{  							alt17 = 16;  							break;  						}    						default:  						{  							alt17 = 15;  							break;  						}  					}  					break;  				}    				case '^':  				{  					alt17 = 8;  					break;  				}    				case '!':  				{  					int LA17_8 = input.LA(2);  					if ((LA17_8 == '='))  					{  						alt17 = 19;  					}  					else  					{  						alt17 = 10;  					}  					break;  				}    				case ':':  				{  					alt17 = 12;  					break;  				}    				case ''':  				{  					alt17 = 13;  					break;  				}    				case '=':  				{  					alt17 = 14;  					break;  				}    				case '?':  				{  					alt17 = 20;  					break;  				}    				case '/':  				{  					alt17 = 21;  					break;  				}    				case '.':  				{  					int LA17_14 = input.LA(2);  					if (((LA17_14 >= '0' && LA17_14 <= '9')))  					{  						alt17 = 30;  					}  					else  					{  						alt17 = 22;  					}  					break;  				}    				case '(':  				{  					alt17 = 23;  					break;  				}    				case '%':  				{  					alt17 = 24;  					break;  				}    				case '*':  				{  					alt17 = 25;  					break;  				}    				case ')':  				{  					alt17 = 26;  					break;  				}    				case '-':  				{  					alt17 = 27;  					break;  				}    				case 'A':  				case 'B':  				case 'C':  				case 'D':  				case 'E':  				case 'F':  				case 'G':  				case 'H':  				case 'I':  				case 'J':  				case 'K':  				case 'L':  				case 'M':  				case 'N':  				case 'O':  				case 'P':  				case 'Q':  				case 'R':  				case 'S':  				case 'T':  				case 'U':  				case 'V':  				case 'W':  				case 'X':  				case 'Y':  				case 'Z':  				case '_':  				case 'a':  				case 'b':  				case 'c':  				case 'd':  				case 'e':  				case 'f':  				case 'g':  				case 'h':  				case 'i':  				case 'j':  				case 'k':  				case 'l':  				case 'm':  				case 'n':  				case 'o':  				case 'p':  				case 'q':  				case 'r':  				case 's':  				case 't':  				case 'u':  				case 'v':  				case 'w':  				case 'x':  				case 'y':  				case 'z':  				{  					alt17 = 28;  					break;  				}    				case '\t':  				case '\n':  				case '\r':  				case ' ':  				{  					alt17 = 29;  					break;  				}    				case '0':  				{  					switch (input.LA(2))  					{  						case 'X':  						case 'x':  						{  							alt17 = 32;  							break;  						}    						case '0':  						case '1':  						case '2':  						case '3':  						case '4':  						case '5':  						case '6':  						case '7':  						{  							alt17 = 31;  							break;  						}    						default:  						{  							alt17 = 30;  							break;  						}  					}  					break;  				}    				case '1':  				case '2':  				case '3':  				case '4':  				case '5':  				case '6':  				case '7':  				case '8':  				case '9':  				{  					alt17 = 30;  					break;  				}    				default:  				{  					NoViableAltException nvae = new NoViableAltException(string.Empty' 17' 0' input);  					throw nvae;  				}  			}
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA(1))  			{  				case '+':  				{  					alt17 = 1;  					break;  				}    				case '&':  				{  					int LA17_2 = input.LA(2);  					if ((LA17_2 == '&'))  					{  						alt17 = 9;  					}  					else  					{  						alt17 = 2;  					}  					break;  				}    				case '~':  				{  					alt17 = 3;  					break;  				}    				case '|':  				{  					int LA17_4 = input.LA(2);  					if ((LA17_4 == '|'))  					{  						alt17 = 11;  					}  					else  					{  						alt17 = 4;  					}  					break;  				}    				case '<':  				{  					switch (input.LA(2))  					{  						case '<':  						{  							alt17 = 5;  							break;  						}    						case '=':  						{  							alt17 = 18;  							break;  						}    						default:  						{  							alt17 = 17;  							break;  						}  					}  					break;  				}    				case '>':  				{  					switch (input.LA(2))  					{  						case '>':  						{  							int LA17_31 = input.LA(3);  							if ((LA17_31 == '>'))  							{  								alt17 = 7;  							}  							else  							{  								alt17 = 6;  							}  							break;  						}    						case '=':  						{  							alt17 = 16;  							break;  						}    						default:  						{  							alt17 = 15;  							break;  						}  					}  					break;  				}    				case '^':  				{  					alt17 = 8;  					break;  				}    				case '!':  				{  					int LA17_8 = input.LA(2);  					if ((LA17_8 == '='))  					{  						alt17 = 19;  					}  					else  					{  						alt17 = 10;  					}  					break;  				}    				case ':':  				{  					alt17 = 12;  					break;  				}    				case ''':  				{  					alt17 = 13;  					break;  				}    				case '=':  				{  					alt17 = 14;  					break;  				}    				case '?':  				{  					alt17 = 20;  					break;  				}    				case '/':  				{  					alt17 = 21;  					break;  				}    				case '.':  				{  					int LA17_14 = input.LA(2);  					if (((LA17_14 >= '0' && LA17_14 <= '9')))  					{  						alt17 = 30;  					}  					else  					{  						alt17 = 22;  					}  					break;  				}    				case '(':  				{  					alt17 = 23;  					break;  				}    				case '%':  				{  					alt17 = 24;  					break;  				}    				case '*':  				{  					alt17 = 25;  					break;  				}    				case ')':  				{  					alt17 = 26;  					break;  				}    				case '-':  				{  					alt17 = 27;  					break;  				}    				case 'A':  				case 'B':  				case 'C':  				case 'D':  				case 'E':  				case 'F':  				case 'G':  				case 'H':  				case 'I':  				case 'J':  				case 'K':  				case 'L':  				case 'M':  				case 'N':  				case 'O':  				case 'P':  				case 'Q':  				case 'R':  				case 'S':  				case 'T':  				case 'U':  				case 'V':  				case 'W':  				case 'X':  				case 'Y':  				case 'Z':  				case '_':  				case 'a':  				case 'b':  				case 'c':  				case 'd':  				case 'e':  				case 'f':  				case 'g':  				case 'h':  				case 'i':  				case 'j':  				case 'k':  				case 'l':  				case 'm':  				case 'n':  				case 'o':  				case 'p':  				case 'q':  				case 'r':  				case 's':  				case 't':  				case 'u':  				case 'v':  				case 'w':  				case 'x':  				case 'y':  				case 'z':  				{  					alt17 = 28;  					break;  				}    				case '\t':  				case '\n':  				case '\r':  				case ' ':  				{  					alt17 = 29;  					break;  				}    				case '0':  				{  					switch (input.LA(2))  					{  						case 'X':  						case 'x':  						{  							alt17 = 32;  							break;  						}    						case '0':  						case '1':  						case '2':  						case '3':  						case '4':  						case '5':  						case '6':  						case '7':  						{  							alt17 = 31;  							break;  						}    						default:  						{  							alt17 = 30;  							break;  						}  					}  					break;  				}    				case '1':  				case '2':  				case '3':  				case '4':  				case '5':  				case '6':  				case '7':  				case '8':  				case '9':  				{  					alt17 = 30;  					break;  				}    				default:  				{  					NoViableAltException nvae = new NoViableAltException(string.Empty' 17' 0' input);  					throw nvae;  				}  			}
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA(1))  			{  				case '+':  				{  					alt17 = 1;  					break;  				}    				case '&':  				{  					int LA17_2 = input.LA(2);  					if ((LA17_2 == '&'))  					{  						alt17 = 9;  					}  					else  					{  						alt17 = 2;  					}  					break;  				}    				case '~':  				{  					alt17 = 3;  					break;  				}    				case '|':  				{  					int LA17_4 = input.LA(2);  					if ((LA17_4 == '|'))  					{  						alt17 = 11;  					}  					else  					{  						alt17 = 4;  					}  					break;  				}    				case '<':  				{  					switch (input.LA(2))  					{  						case '<':  						{  							alt17 = 5;  							break;  						}    						case '=':  						{  							alt17 = 18;  							break;  						}    						default:  						{  							alt17 = 17;  							break;  						}  					}  					break;  				}    				case '>':  				{  					switch (input.LA(2))  					{  						case '>':  						{  							int LA17_31 = input.LA(3);  							if ((LA17_31 == '>'))  							{  								alt17 = 7;  							}  							else  							{  								alt17 = 6;  							}  							break;  						}    						case '=':  						{  							alt17 = 16;  							break;  						}    						default:  						{  							alt17 = 15;  							break;  						}  					}  					break;  				}    				case '^':  				{  					alt17 = 8;  					break;  				}    				case '!':  				{  					int LA17_8 = input.LA(2);  					if ((LA17_8 == '='))  					{  						alt17 = 19;  					}  					else  					{  						alt17 = 10;  					}  					break;  				}    				case ':':  				{  					alt17 = 12;  					break;  				}    				case ''':  				{  					alt17 = 13;  					break;  				}    				case '=':  				{  					alt17 = 14;  					break;  				}    				case '?':  				{  					alt17 = 20;  					break;  				}    				case '/':  				{  					alt17 = 21;  					break;  				}    				case '.':  				{  					int LA17_14 = input.LA(2);  					if (((LA17_14 >= '0' && LA17_14 <= '9')))  					{  						alt17 = 30;  					}  					else  					{  						alt17 = 22;  					}  					break;  				}    				case '(':  				{  					alt17 = 23;  					break;  				}    				case '%':  				{  					alt17 = 24;  					break;  				}    				case '*':  				{  					alt17 = 25;  					break;  				}    				case ')':  				{  					alt17 = 26;  					break;  				}    				case '-':  				{  					alt17 = 27;  					break;  				}    				case 'A':  				case 'B':  				case 'C':  				case 'D':  				case 'E':  				case 'F':  				case 'G':  				case 'H':  				case 'I':  				case 'J':  				case 'K':  				case 'L':  				case 'M':  				case 'N':  				case 'O':  				case 'P':  				case 'Q':  				case 'R':  				case 'S':  				case 'T':  				case 'U':  				case 'V':  				case 'W':  				case 'X':  				case 'Y':  				case 'Z':  				case '_':  				case 'a':  				case 'b':  				case 'c':  				case 'd':  				case 'e':  				case 'f':  				case 'g':  				case 'h':  				case 'i':  				case 'j':  				case 'k':  				case 'l':  				case 'm':  				case 'n':  				case 'o':  				case 'p':  				case 'q':  				case 'r':  				case 's':  				case 't':  				case 'u':  				case 'v':  				case 'w':  				case 'x':  				case 'y':  				case 'z':  				{  					alt17 = 28;  					break;  				}    				case '\t':  				case '\n':  				case '\r':  				case ' ':  				{  					alt17 = 29;  					break;  				}    				case '0':  				{  					switch (input.LA(2))  					{  						case 'X':  						case 'x':  						{  							alt17 = 32;  							break;  						}    						case '0':  						case '1':  						case '2':  						case '3':  						case '4':  						case '5':  						case '6':  						case '7':  						{  							alt17 = 31;  							break;  						}    						default:  						{  							alt17 = 30;  							break;  						}  					}  					break;  				}    				case '1':  				case '2':  				case '3':  				case '4':  				case '5':  				case '6':  				case '7':  				case '8':  				case '9':  				{  					alt17 = 30;  					break;  				}    				default:  				{  					NoViableAltException nvae = new NoViableAltException(string.Empty' 17' 0' input);  					throw nvae;  				}  			}
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA(1))  			{  				case '+':  				{  					alt17 = 1;  					break;  				}    				case '&':  				{  					int LA17_2 = input.LA(2);  					if ((LA17_2 == '&'))  					{  						alt17 = 9;  					}  					else  					{  						alt17 = 2;  					}  					break;  				}    				case '~':  				{  					alt17 = 3;  					break;  				}    				case '|':  				{  					int LA17_4 = input.LA(2);  					if ((LA17_4 == '|'))  					{  						alt17 = 11;  					}  					else  					{  						alt17 = 4;  					}  					break;  				}    				case '<':  				{  					switch (input.LA(2))  					{  						case '<':  						{  							alt17 = 5;  							break;  						}    						case '=':  						{  							alt17 = 18;  							break;  						}    						default:  						{  							alt17 = 17;  							break;  						}  					}  					break;  				}    				case '>':  				{  					switch (input.LA(2))  					{  						case '>':  						{  							int LA17_31 = input.LA(3);  							if ((LA17_31 == '>'))  							{  								alt17 = 7;  							}  							else  							{  								alt17 = 6;  							}  							break;  						}    						case '=':  						{  							alt17 = 16;  							break;  						}    						default:  						{  							alt17 = 15;  							break;  						}  					}  					break;  				}    				case '^':  				{  					alt17 = 8;  					break;  				}    				case '!':  				{  					int LA17_8 = input.LA(2);  					if ((LA17_8 == '='))  					{  						alt17 = 19;  					}  					else  					{  						alt17 = 10;  					}  					break;  				}    				case ':':  				{  					alt17 = 12;  					break;  				}    				case ''':  				{  					alt17 = 13;  					break;  				}    				case '=':  				{  					alt17 = 14;  					break;  				}    				case '?':  				{  					alt17 = 20;  					break;  				}    				case '/':  				{  					alt17 = 21;  					break;  				}    				case '.':  				{  					int LA17_14 = input.LA(2);  					if (((LA17_14 >= '0' && LA17_14 <= '9')))  					{  						alt17 = 30;  					}  					else  					{  						alt17 = 22;  					}  					break;  				}    				case '(':  				{  					alt17 = 23;  					break;  				}    				case '%':  				{  					alt17 = 24;  					break;  				}    				case '*':  				{  					alt17 = 25;  					break;  				}    				case ')':  				{  					alt17 = 26;  					break;  				}    				case '-':  				{  					alt17 = 27;  					break;  				}    				case 'A':  				case 'B':  				case 'C':  				case 'D':  				case 'E':  				case 'F':  				case 'G':  				case 'H':  				case 'I':  				case 'J':  				case 'K':  				case 'L':  				case 'M':  				case 'N':  				case 'O':  				case 'P':  				case 'Q':  				case 'R':  				case 'S':  				case 'T':  				case 'U':  				case 'V':  				case 'W':  				case 'X':  				case 'Y':  				case 'Z':  				case '_':  				case 'a':  				case 'b':  				case 'c':  				case 'd':  				case 'e':  				case 'f':  				case 'g':  				case 'h':  				case 'i':  				case 'j':  				case 'k':  				case 'l':  				case 'm':  				case 'n':  				case 'o':  				case 'p':  				case 'q':  				case 'r':  				case 's':  				case 't':  				case 'u':  				case 'v':  				case 'w':  				case 'x':  				case 'y':  				case 'z':  				{  					alt17 = 28;  					break;  				}    				case '\t':  				case '\n':  				case '\r':  				case ' ':  				{  					alt17 = 29;  					break;  				}    				case '0':  				{  					switch (input.LA(2))  					{  						case 'X':  						case 'x':  						{  							alt17 = 32;  							break;  						}    						case '0':  						case '1':  						case '2':  						case '3':  						case '4':  						case '5':  						case '6':  						case '7':  						{  							alt17 = 31;  							break;  						}    						default:  						{  							alt17 = 30;  							break;  						}  					}  					break;  				}    				case '1':  				case '2':  				case '3':  				case '4':  				case '5':  				case '6':  				case '7':  				case '8':  				case '9':  				{  					alt17 = 30;  					break;  				}    				default:  				{  					NoViableAltException nvae = new NoViableAltException(string.Empty' 17' 0' input);  					throw nvae;  				}  			}
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA(1))  			{  				case '+':  				{  					alt17 = 1;  					break;  				}    				case '&':  				{  					int LA17_2 = input.LA(2);  					if ((LA17_2 == '&'))  					{  						alt17 = 9;  					}  					else  					{  						alt17 = 2;  					}  					break;  				}    				case '~':  				{  					alt17 = 3;  					break;  				}    				case '|':  				{  					int LA17_4 = input.LA(2);  					if ((LA17_4 == '|'))  					{  						alt17 = 11;  					}  					else  					{  						alt17 = 4;  					}  					break;  				}    				case '<':  				{  					switch (input.LA(2))  					{  						case '<':  						{  							alt17 = 5;  							break;  						}    						case '=':  						{  							alt17 = 18;  							break;  						}    						default:  						{  							alt17 = 17;  							break;  						}  					}  					break;  				}    				case '>':  				{  					switch (input.LA(2))  					{  						case '>':  						{  							int LA17_31 = input.LA(3);  							if ((LA17_31 == '>'))  							{  								alt17 = 7;  							}  							else  							{  								alt17 = 6;  							}  							break;  						}    						case '=':  						{  							alt17 = 16;  							break;  						}    						default:  						{  							alt17 = 15;  							break;  						}  					}  					break;  				}    				case '^':  				{  					alt17 = 8;  					break;  				}    				case '!':  				{  					int LA17_8 = input.LA(2);  					if ((LA17_8 == '='))  					{  						alt17 = 19;  					}  					else  					{  						alt17 = 10;  					}  					break;  				}    				case ':':  				{  					alt17 = 12;  					break;  				}    				case ''':  				{  					alt17 = 13;  					break;  				}    				case '=':  				{  					alt17 = 14;  					break;  				}    				case '?':  				{  					alt17 = 20;  					break;  				}    				case '/':  				{  					alt17 = 21;  					break;  				}    				case '.':  				{  					int LA17_14 = input.LA(2);  					if (((LA17_14 >= '0' && LA17_14 <= '9')))  					{  						alt17 = 30;  					}  					else  					{  						alt17 = 22;  					}  					break;  				}    				case '(':  				{  					alt17 = 23;  					break;  				}    				case '%':  				{  					alt17 = 24;  					break;  				}    				case '*':  				{  					alt17 = 25;  					break;  				}    				case ')':  				{  					alt17 = 26;  					break;  				}    				case '-':  				{  					alt17 = 27;  					break;  				}    				case 'A':  				case 'B':  				case 'C':  				case 'D':  				case 'E':  				case 'F':  				case 'G':  				case 'H':  				case 'I':  				case 'J':  				case 'K':  				case 'L':  				case 'M':  				case 'N':  				case 'O':  				case 'P':  				case 'Q':  				case 'R':  				case 'S':  				case 'T':  				case 'U':  				case 'V':  				case 'W':  				case 'X':  				case 'Y':  				case 'Z':  				case '_':  				case 'a':  				case 'b':  				case 'c':  				case 'd':  				case 'e':  				case 'f':  				case 'g':  				case 'h':  				case 'i':  				case 'j':  				case 'k':  				case 'l':  				case 'm':  				case 'n':  				case 'o':  				case 'p':  				case 'q':  				case 'r':  				case 's':  				case 't':  				case 'u':  				case 'v':  				case 'w':  				case 'x':  				case 'y':  				case 'z':  				{  					alt17 = 28;  					break;  				}    				case '\t':  				case '\n':  				case '\r':  				case ' ':  				{  					alt17 = 29;  					break;  				}    				case '0':  				{  					switch (input.LA(2))  					{  						case 'X':  						case 'x':  						{  							alt17 = 32;  							break;  						}    						case '0':  						case '1':  						case '2':  						case '3':  						case '4':  						case '5':  						case '6':  						case '7':  						{  							alt17 = 31;  							break;  						}    						default:  						{  							alt17 = 30;  							break;  						}  					}  					break;  				}    				case '1':  				case '2':  				case '3':  				case '4':  				case '5':  				case '6':  				case '7':  				case '8':  				case '9':  				{  					alt17 = 30;  					break;  				}    				default:  				{  					NoViableAltException nvae = new NoViableAltException(string.Empty' 17' 0' input);  					throw nvae;  				}  			}
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA(1))  			{  				case '+':  				{  					alt17 = 1;  					break;  				}    				case '&':  				{  					int LA17_2 = input.LA(2);  					if ((LA17_2 == '&'))  					{  						alt17 = 9;  					}  					else  					{  						alt17 = 2;  					}  					break;  				}    				case '~':  				{  					alt17 = 3;  					break;  				}    				case '|':  				{  					int LA17_4 = input.LA(2);  					if ((LA17_4 == '|'))  					{  						alt17 = 11;  					}  					else  					{  						alt17 = 4;  					}  					break;  				}    				case '<':  				{  					switch (input.LA(2))  					{  						case '<':  						{  							alt17 = 5;  							break;  						}    						case '=':  						{  							alt17 = 18;  							break;  						}    						default:  						{  							alt17 = 17;  							break;  						}  					}  					break;  				}    				case '>':  				{  					switch (input.LA(2))  					{  						case '>':  						{  							int LA17_31 = input.LA(3);  							if ((LA17_31 == '>'))  							{  								alt17 = 7;  							}  							else  							{  								alt17 = 6;  							}  							break;  						}    						case '=':  						{  							alt17 = 16;  							break;  						}    						default:  						{  							alt17 = 15;  							break;  						}  					}  					break;  				}    				case '^':  				{  					alt17 = 8;  					break;  				}    				case '!':  				{  					int LA17_8 = input.LA(2);  					if ((LA17_8 == '='))  					{  						alt17 = 19;  					}  					else  					{  						alt17 = 10;  					}  					break;  				}    				case ':':  				{  					alt17 = 12;  					break;  				}    				case ''':  				{  					alt17 = 13;  					break;  				}    				case '=':  				{  					alt17 = 14;  					break;  				}    				case '?':  				{  					alt17 = 20;  					break;  				}    				case '/':  				{  					alt17 = 21;  					break;  				}    				case '.':  				{  					int LA17_14 = input.LA(2);  					if (((LA17_14 >= '0' && LA17_14 <= '9')))  					{  						alt17 = 30;  					}  					else  					{  						alt17 = 22;  					}  					break;  				}    				case '(':  				{  					alt17 = 23;  					break;  				}    				case '%':  				{  					alt17 = 24;  					break;  				}    				case '*':  				{  					alt17 = 25;  					break;  				}    				case ')':  				{  					alt17 = 26;  					break;  				}    				case '-':  				{  					alt17 = 27;  					break;  				}    				case 'A':  				case 'B':  				case 'C':  				case 'D':  				case 'E':  				case 'F':  				case 'G':  				case 'H':  				case 'I':  				case 'J':  				case 'K':  				case 'L':  				case 'M':  				case 'N':  				case 'O':  				case 'P':  				case 'Q':  				case 'R':  				case 'S':  				case 'T':  				case 'U':  				case 'V':  				case 'W':  				case 'X':  				case 'Y':  				case 'Z':  				case '_':  				case 'a':  				case 'b':  				case 'c':  				case 'd':  				case 'e':  				case 'f':  				case 'g':  				case 'h':  				case 'i':  				case 'j':  				case 'k':  				case 'l':  				case 'm':  				case 'n':  				case 'o':  				case 'p':  				case 'q':  				case 'r':  				case 's':  				case 't':  				case 'u':  				case 'v':  				case 'w':  				case 'x':  				case 'y':  				case 'z':  				{  					alt17 = 28;  					break;  				}    				case '\t':  				case '\n':  				case '\r':  				case ' ':  				{  					alt17 = 29;  					break;  				}    				case '0':  				{  					switch (input.LA(2))  					{  						case 'X':  						case 'x':  						{  							alt17 = 32;  							break;  						}    						case '0':  						case '1':  						case '2':  						case '3':  						case '4':  						case '5':  						case '6':  						case '7':  						{  							alt17 = 31;  							break;  						}    						default:  						{  							alt17 = 30;  							break;  						}  					}  					break;  				}    				case '1':  				case '2':  				case '3':  				case '4':  				case '5':  				case '6':  				case '7':  				case '8':  				case '9':  				{  					alt17 = 30;  					break;  				}    				default:  				{  					NoViableAltException nvae = new NoViableAltException(string.Empty' 17' 0' input);  					throw nvae;  				}  			}
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA(1))  			{  				case '+':  				{  					alt17 = 1;  					break;  				}    				case '&':  				{  					int LA17_2 = input.LA(2);  					if ((LA17_2 == '&'))  					{  						alt17 = 9;  					}  					else  					{  						alt17 = 2;  					}  					break;  				}    				case '~':  				{  					alt17 = 3;  					break;  				}    				case '|':  				{  					int LA17_4 = input.LA(2);  					if ((LA17_4 == '|'))  					{  						alt17 = 11;  					}  					else  					{  						alt17 = 4;  					}  					break;  				}    				case '<':  				{  					switch (input.LA(2))  					{  						case '<':  						{  							alt17 = 5;  							break;  						}    						case '=':  						{  							alt17 = 18;  							break;  						}    						default:  						{  							alt17 = 17;  							break;  						}  					}  					break;  				}    				case '>':  				{  					switch (input.LA(2))  					{  						case '>':  						{  							int LA17_31 = input.LA(3);  							if ((LA17_31 == '>'))  							{  								alt17 = 7;  							}  							else  							{  								alt17 = 6;  							}  							break;  						}    						case '=':  						{  							alt17 = 16;  							break;  						}    						default:  						{  							alt17 = 15;  							break;  						}  					}  					break;  				}    				case '^':  				{  					alt17 = 8;  					break;  				}    				case '!':  				{  					int LA17_8 = input.LA(2);  					if ((LA17_8 == '='))  					{  						alt17 = 19;  					}  					else  					{  						alt17 = 10;  					}  					break;  				}    				case ':':  				{  					alt17 = 12;  					break;  				}    				case ''':  				{  					alt17 = 13;  					break;  				}    				case '=':  				{  					alt17 = 14;  					break;  				}    				case '?':  				{  					alt17 = 20;  					break;  				}    				case '/':  				{  					alt17 = 21;  					break;  				}    				case '.':  				{  					int LA17_14 = input.LA(2);  					if (((LA17_14 >= '0' && LA17_14 <= '9')))  					{  						alt17 = 30;  					}  					else  					{  						alt17 = 22;  					}  					break;  				}    				case '(':  				{  					alt17 = 23;  					break;  				}    				case '%':  				{  					alt17 = 24;  					break;  				}    				case '*':  				{  					alt17 = 25;  					break;  				}    				case ')':  				{  					alt17 = 26;  					break;  				}    				case '-':  				{  					alt17 = 27;  					break;  				}    				case 'A':  				case 'B':  				case 'C':  				case 'D':  				case 'E':  				case 'F':  				case 'G':  				case 'H':  				case 'I':  				case 'J':  				case 'K':  				case 'L':  				case 'M':  				case 'N':  				case 'O':  				case 'P':  				case 'Q':  				case 'R':  				case 'S':  				case 'T':  				case 'U':  				case 'V':  				case 'W':  				case 'X':  				case 'Y':  				case 'Z':  				case '_':  				case 'a':  				case 'b':  				case 'c':  				case 'd':  				case 'e':  				case 'f':  				case 'g':  				case 'h':  				case 'i':  				case 'j':  				case 'k':  				case 'l':  				case 'm':  				case 'n':  				case 'o':  				case 'p':  				case 'q':  				case 'r':  				case 's':  				case 't':  				case 'u':  				case 'v':  				case 'w':  				case 'x':  				case 'y':  				case 'z':  				{  					alt17 = 28;  					break;  				}    				case '\t':  				case '\n':  				case '\r':  				case ' ':  				{  					alt17 = 29;  					break;  				}    				case '0':  				{  					switch (input.LA(2))  					{  						case 'X':  						case 'x':  						{  							alt17 = 32;  							break;  						}    						case '0':  						case '1':  						case '2':  						case '3':  						case '4':  						case '5':  						case '6':  						case '7':  						{  							alt17 = 31;  							break;  						}    						default:  						{  							alt17 = 30;  							break;  						}  					}  					break;  				}    				case '1':  				case '2':  				case '3':  				case '4':  				case '5':  				case '6':  				case '7':  				case '8':  				case '9':  				{  					alt17 = 30;  					break;  				}    				default:  				{  					NoViableAltException nvae = new NoViableAltException(string.Empty' 17' 0' input);  					throw nvae;  				}  			}
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA(1))  			{  				case '+':  				{  					alt17 = 1;  					break;  				}    				case '&':  				{  					int LA17_2 = input.LA(2);  					if ((LA17_2 == '&'))  					{  						alt17 = 9;  					}  					else  					{  						alt17 = 2;  					}  					break;  				}    				case '~':  				{  					alt17 = 3;  					break;  				}    				case '|':  				{  					int LA17_4 = input.LA(2);  					if ((LA17_4 == '|'))  					{  						alt17 = 11;  					}  					else  					{  						alt17 = 4;  					}  					break;  				}    				case '<':  				{  					switch (input.LA(2))  					{  						case '<':  						{  							alt17 = 5;  							break;  						}    						case '=':  						{  							alt17 = 18;  							break;  						}    						default:  						{  							alt17 = 17;  							break;  						}  					}  					break;  				}    				case '>':  				{  					switch (input.LA(2))  					{  						case '>':  						{  							int LA17_31 = input.LA(3);  							if ((LA17_31 == '>'))  							{  								alt17 = 7;  							}  							else  							{  								alt17 = 6;  							}  							break;  						}    						case '=':  						{  							alt17 = 16;  							break;  						}    						default:  						{  							alt17 = 15;  							break;  						}  					}  					break;  				}    				case '^':  				{  					alt17 = 8;  					break;  				}    				case '!':  				{  					int LA17_8 = input.LA(2);  					if ((LA17_8 == '='))  					{  						alt17 = 19;  					}  					else  					{  						alt17 = 10;  					}  					break;  				}    				case ':':  				{  					alt17 = 12;  					break;  				}    				case ''':  				{  					alt17 = 13;  					break;  				}    				case '=':  				{  					alt17 = 14;  					break;  				}    				case '?':  				{  					alt17 = 20;  					break;  				}    				case '/':  				{  					alt17 = 21;  					break;  				}    				case '.':  				{  					int LA17_14 = input.LA(2);  					if (((LA17_14 >= '0' && LA17_14 <= '9')))  					{  						alt17 = 30;  					}  					else  					{  						alt17 = 22;  					}  					break;  				}    				case '(':  				{  					alt17 = 23;  					break;  				}    				case '%':  				{  					alt17 = 24;  					break;  				}    				case '*':  				{  					alt17 = 25;  					break;  				}    				case ')':  				{  					alt17 = 26;  					break;  				}    				case '-':  				{  					alt17 = 27;  					break;  				}    				case 'A':  				case 'B':  				case 'C':  				case 'D':  				case 'E':  				case 'F':  				case 'G':  				case 'H':  				case 'I':  				case 'J':  				case 'K':  				case 'L':  				case 'M':  				case 'N':  				case 'O':  				case 'P':  				case 'Q':  				case 'R':  				case 'S':  				case 'T':  				case 'U':  				case 'V':  				case 'W':  				case 'X':  				case 'Y':  				case 'Z':  				case '_':  				case 'a':  				case 'b':  				case 'c':  				case 'd':  				case 'e':  				case 'f':  				case 'g':  				case 'h':  				case 'i':  				case 'j':  				case 'k':  				case 'l':  				case 'm':  				case 'n':  				case 'o':  				case 'p':  				case 'q':  				case 'r':  				case 's':  				case 't':  				case 'u':  				case 'v':  				case 'w':  				case 'x':  				case 'y':  				case 'z':  				{  					alt17 = 28;  					break;  				}    				case '\t':  				case '\n':  				case '\r':  				case ' ':  				{  					alt17 = 29;  					break;  				}    				case '0':  				{  					switch (input.LA(2))  					{  						case 'X':  						case 'x':  						{  							alt17 = 32;  							break;  						}    						case '0':  						case '1':  						case '2':  						case '3':  						case '4':  						case '5':  						case '6':  						case '7':  						{  							alt17 = 31;  							break;  						}    						default:  						{  							alt17 = 30;  							break;  						}  					}  					break;  				}    				case '1':  				case '2':  				case '3':  				case '4':  				case '5':  				case '6':  				case '7':  				case '8':  				case '9':  				{  					alt17 = 30;  					break;  				}    				default:  				{  					NoViableAltException nvae = new NoViableAltException(string.Empty' 17' 0' input);  					throw nvae;  				}  			}
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA(1))  			{  				case '+':  				{  					alt17 = 1;  					break;  				}    				case '&':  				{  					int LA17_2 = input.LA(2);  					if ((LA17_2 == '&'))  					{  						alt17 = 9;  					}  					else  					{  						alt17 = 2;  					}  					break;  				}    				case '~':  				{  					alt17 = 3;  					break;  				}    				case '|':  				{  					int LA17_4 = input.LA(2);  					if ((LA17_4 == '|'))  					{  						alt17 = 11;  					}  					else  					{  						alt17 = 4;  					}  					break;  				}    				case '<':  				{  					switch (input.LA(2))  					{  						case '<':  						{  							alt17 = 5;  							break;  						}    						case '=':  						{  							alt17 = 18;  							break;  						}    						default:  						{  							alt17 = 17;  							break;  						}  					}  					break;  				}    				case '>':  				{  					switch (input.LA(2))  					{  						case '>':  						{  							int LA17_31 = input.LA(3);  							if ((LA17_31 == '>'))  							{  								alt17 = 7;  							}  							else  							{  								alt17 = 6;  							}  							break;  						}    						case '=':  						{  							alt17 = 16;  							break;  						}    						default:  						{  							alt17 = 15;  							break;  						}  					}  					break;  				}    				case '^':  				{  					alt17 = 8;  					break;  				}    				case '!':  				{  					int LA17_8 = input.LA(2);  					if ((LA17_8 == '='))  					{  						alt17 = 19;  					}  					else  					{  						alt17 = 10;  					}  					break;  				}    				case ':':  				{  					alt17 = 12;  					break;  				}    				case ''':  				{  					alt17 = 13;  					break;  				}    				case '=':  				{  					alt17 = 14;  					break;  				}    				case '?':  				{  					alt17 = 20;  					break;  				}    				case '/':  				{  					alt17 = 21;  					break;  				}    				case '.':  				{  					int LA17_14 = input.LA(2);  					if (((LA17_14 >= '0' && LA17_14 <= '9')))  					{  						alt17 = 30;  					}  					else  					{  						alt17 = 22;  					}  					break;  				}    				case '(':  				{  					alt17 = 23;  					break;  				}    				case '%':  				{  					alt17 = 24;  					break;  				}    				case '*':  				{  					alt17 = 25;  					break;  				}    				case ')':  				{  					alt17 = 26;  					break;  				}    				case '-':  				{  					alt17 = 27;  					break;  				}    				case 'A':  				case 'B':  				case 'C':  				case 'D':  				case 'E':  				case 'F':  				case 'G':  				case 'H':  				case 'I':  				case 'J':  				case 'K':  				case 'L':  				case 'M':  				case 'N':  				case 'O':  				case 'P':  				case 'Q':  				case 'R':  				case 'S':  				case 'T':  				case 'U':  				case 'V':  				case 'W':  				case 'X':  				case 'Y':  				case 'Z':  				case '_':  				case 'a':  				case 'b':  				case 'c':  				case 'd':  				case 'e':  				case 'f':  				case 'g':  				case 'h':  				case 'i':  				case 'j':  				case 'k':  				case 'l':  				case 'm':  				case 'n':  				case 'o':  				case 'p':  				case 'q':  				case 'r':  				case 's':  				case 't':  				case 'u':  				case 'v':  				case 'w':  				case 'x':  				case 'y':  				case 'z':  				{  					alt17 = 28;  					break;  				}    				case '\t':  				case '\n':  				case '\r':  				case ' ':  				{  					alt17 = 29;  					break;  				}    				case '0':  				{  					switch (input.LA(2))  					{  						case 'X':  						case 'x':  						{  							alt17 = 32;  							break;  						}    						case '0':  						case '1':  						case '2':  						case '3':  						case '4':  						case '5':  						case '6':  						case '7':  						{  							alt17 = 31;  							break;  						}    						default:  						{  							alt17 = 30;  							break;  						}  					}  					break;  				}    				case '1':  				case '2':  				case '3':  				case '4':  				case '5':  				case '6':  				case '7':  				case '8':  				case '9':  				{  					alt17 = 30;  					break;  				}    				default:  				{  					NoViableAltException nvae = new NoViableAltException(string.Empty' 17' 0' input);  					throw nvae;  				}  			}
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA(1))  			{  				case '+':  				{  					alt17 = 1;  					break;  				}    				case '&':  				{  					int LA17_2 = input.LA(2);  					if ((LA17_2 == '&'))  					{  						alt17 = 9;  					}  					else  					{  						alt17 = 2;  					}  					break;  				}    				case '~':  				{  					alt17 = 3;  					break;  				}    				case '|':  				{  					int LA17_4 = input.LA(2);  					if ((LA17_4 == '|'))  					{  						alt17 = 11;  					}  					else  					{  						alt17 = 4;  					}  					break;  				}    				case '<':  				{  					switch (input.LA(2))  					{  						case '<':  						{  							alt17 = 5;  							break;  						}    						case '=':  						{  							alt17 = 18;  							break;  						}    						default:  						{  							alt17 = 17;  							break;  						}  					}  					break;  				}    				case '>':  				{  					switch (input.LA(2))  					{  						case '>':  						{  							int LA17_31 = input.LA(3);  							if ((LA17_31 == '>'))  							{  								alt17 = 7;  							}  							else  							{  								alt17 = 6;  							}  							break;  						}    						case '=':  						{  							alt17 = 16;  							break;  						}    						default:  						{  							alt17 = 15;  							break;  						}  					}  					break;  				}    				case '^':  				{  					alt17 = 8;  					break;  				}    				case '!':  				{  					int LA17_8 = input.LA(2);  					if ((LA17_8 == '='))  					{  						alt17 = 19;  					}  					else  					{  						alt17 = 10;  					}  					break;  				}    				case ':':  				{  					alt17 = 12;  					break;  				}    				case ''':  				{  					alt17 = 13;  					break;  				}    				case '=':  				{  					alt17 = 14;  					break;  				}    				case '?':  				{  					alt17 = 20;  					break;  				}    				case '/':  				{  					alt17 = 21;  					break;  				}    				case '.':  				{  					int LA17_14 = input.LA(2);  					if (((LA17_14 >= '0' && LA17_14 <= '9')))  					{  						alt17 = 30;  					}  					else  					{  						alt17 = 22;  					}  					break;  				}    				case '(':  				{  					alt17 = 23;  					break;  				}    				case '%':  				{  					alt17 = 24;  					break;  				}    				case '*':  				{  					alt17 = 25;  					break;  				}    				case ')':  				{  					alt17 = 26;  					break;  				}    				case '-':  				{  					alt17 = 27;  					break;  				}    				case 'A':  				case 'B':  				case 'C':  				case 'D':  				case 'E':  				case 'F':  				case 'G':  				case 'H':  				case 'I':  				case 'J':  				case 'K':  				case 'L':  				case 'M':  				case 'N':  				case 'O':  				case 'P':  				case 'Q':  				case 'R':  				case 'S':  				case 'T':  				case 'U':  				case 'V':  				case 'W':  				case 'X':  				case 'Y':  				case 'Z':  				case '_':  				case 'a':  				case 'b':  				case 'c':  				case 'd':  				case 'e':  				case 'f':  				case 'g':  				case 'h':  				case 'i':  				case 'j':  				case 'k':  				case 'l':  				case 'm':  				case 'n':  				case 'o':  				case 'p':  				case 'q':  				case 'r':  				case 's':  				case 't':  				case 'u':  				case 'v':  				case 'w':  				case 'x':  				case 'y':  				case 'z':  				{  					alt17 = 28;  					break;  				}    				case '\t':  				case '\n':  				case '\r':  				case ' ':  				{  					alt17 = 29;  					break;  				}    				case '0':  				{  					switch (input.LA(2))  					{  						case 'X':  						case 'x':  						{  							alt17 = 32;  							break;  						}    						case '0':  						case '1':  						case '2':  						case '3':  						case '4':  						case '5':  						case '6':  						case '7':  						{  							alt17 = 31;  							break;  						}    						default:  						{  							alt17 = 30;  							break;  						}  					}  					break;  				}    				case '1':  				case '2':  				case '3':  				case '4':  				case '5':  				case '6':  				case '7':  				case '8':  				case '9':  				{  					alt17 = 30;  					break;  				}    				default:  				{  					NoViableAltException nvae = new NoViableAltException(string.Empty' 17' 0' input);  					throw nvae;  				}  			}
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA(1))  			{  				case '+':  				{  					alt17 = 1;  					break;  				}    				case '&':  				{  					int LA17_2 = input.LA(2);  					if ((LA17_2 == '&'))  					{  						alt17 = 9;  					}  					else  					{  						alt17 = 2;  					}  					break;  				}    				case '~':  				{  					alt17 = 3;  					break;  				}    				case '|':  				{  					int LA17_4 = input.LA(2);  					if ((LA17_4 == '|'))  					{  						alt17 = 11;  					}  					else  					{  						alt17 = 4;  					}  					break;  				}    				case '<':  				{  					switch (input.LA(2))  					{  						case '<':  						{  							alt17 = 5;  							break;  						}    						case '=':  						{  							alt17 = 18;  							break;  						}    						default:  						{  							alt17 = 17;  							break;  						}  					}  					break;  				}    				case '>':  				{  					switch (input.LA(2))  					{  						case '>':  						{  							int LA17_31 = input.LA(3);  							if ((LA17_31 == '>'))  							{  								alt17 = 7;  							}  							else  							{  								alt17 = 6;  							}  							break;  						}    						case '=':  						{  							alt17 = 16;  							break;  						}    						default:  						{  							alt17 = 15;  							break;  						}  					}  					break;  				}    				case '^':  				{  					alt17 = 8;  					break;  				}    				case '!':  				{  					int LA17_8 = input.LA(2);  					if ((LA17_8 == '='))  					{  						alt17 = 19;  					}  					else  					{  						alt17 = 10;  					}  					break;  				}    				case ':':  				{  					alt17 = 12;  					break;  				}    				case ''':  				{  					alt17 = 13;  					break;  				}    				case '=':  				{  					alt17 = 14;  					break;  				}    				case '?':  				{  					alt17 = 20;  					break;  				}    				case '/':  				{  					alt17 = 21;  					break;  				}    				case '.':  				{  					int LA17_14 = input.LA(2);  					if (((LA17_14 >= '0' && LA17_14 <= '9')))  					{  						alt17 = 30;  					}  					else  					{  						alt17 = 22;  					}  					break;  				}    				case '(':  				{  					alt17 = 23;  					break;  				}    				case '%':  				{  					alt17 = 24;  					break;  				}    				case '*':  				{  					alt17 = 25;  					break;  				}    				case ')':  				{  					alt17 = 26;  					break;  				}    				case '-':  				{  					alt17 = 27;  					break;  				}    				case 'A':  				case 'B':  				case 'C':  				case 'D':  				case 'E':  				case 'F':  				case 'G':  				case 'H':  				case 'I':  				case 'J':  				case 'K':  				case 'L':  				case 'M':  				case 'N':  				case 'O':  				case 'P':  				case 'Q':  				case 'R':  				case 'S':  				case 'T':  				case 'U':  				case 'V':  				case 'W':  				case 'X':  				case 'Y':  				case 'Z':  				case '_':  				case 'a':  				case 'b':  				case 'c':  				case 'd':  				case 'e':  				case 'f':  				case 'g':  				case 'h':  				case 'i':  				case 'j':  				case 'k':  				case 'l':  				case 'm':  				case 'n':  				case 'o':  				case 'p':  				case 'q':  				case 'r':  				case 's':  				case 't':  				case 'u':  				case 'v':  				case 'w':  				case 'x':  				case 'y':  				case 'z':  				{  					alt17 = 28;  					break;  				}    				case '\t':  				case '\n':  				case '\r':  				case ' ':  				{  					alt17 = 29;  					break;  				}    				case '0':  				{  					switch (input.LA(2))  					{  						case 'X':  						case 'x':  						{  							alt17 = 32;  							break;  						}    						case '0':  						case '1':  						case '2':  						case '3':  						case '4':  						case '5':  						case '6':  						case '7':  						{  							alt17 = 31;  							break;  						}    						default:  						{  							alt17 = 30;  							break;  						}  					}  					break;  				}    				case '1':  				case '2':  				case '3':  				case '4':  				case '5':  				case '6':  				case '7':  				case '8':  				case '9':  				{  					alt17 = 30;  					break;  				}    				default:  				{  					NoViableAltException nvae = new NoViableAltException(string.Empty' 17' 0' input);  					throw nvae;  				}  			}
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA(1))  			{  				case '+':  				{  					alt17 = 1;  					break;  				}    				case '&':  				{  					int LA17_2 = input.LA(2);  					if ((LA17_2 == '&'))  					{  						alt17 = 9;  					}  					else  					{  						alt17 = 2;  					}  					break;  				}    				case '~':  				{  					alt17 = 3;  					break;  				}    				case '|':  				{  					int LA17_4 = input.LA(2);  					if ((LA17_4 == '|'))  					{  						alt17 = 11;  					}  					else  					{  						alt17 = 4;  					}  					break;  				}    				case '<':  				{  					switch (input.LA(2))  					{  						case '<':  						{  							alt17 = 5;  							break;  						}    						case '=':  						{  							alt17 = 18;  							break;  						}    						default:  						{  							alt17 = 17;  							break;  						}  					}  					break;  				}    				case '>':  				{  					switch (input.LA(2))  					{  						case '>':  						{  							int LA17_31 = input.LA(3);  							if ((LA17_31 == '>'))  							{  								alt17 = 7;  							}  							else  							{  								alt17 = 6;  							}  							break;  						}    						case '=':  						{  							alt17 = 16;  							break;  						}    						default:  						{  							alt17 = 15;  							break;  						}  					}  					break;  				}    				case '^':  				{  					alt17 = 8;  					break;  				}    				case '!':  				{  					int LA17_8 = input.LA(2);  					if ((LA17_8 == '='))  					{  						alt17 = 19;  					}  					else  					{  						alt17 = 10;  					}  					break;  				}    				case ':':  				{  					alt17 = 12;  					break;  				}    				case ''':  				{  					alt17 = 13;  					break;  				}    				case '=':  				{  					alt17 = 14;  					break;  				}    				case '?':  				{  					alt17 = 20;  					break;  				}    				case '/':  				{  					alt17 = 21;  					break;  				}    				case '.':  				{  					int LA17_14 = input.LA(2);  					if (((LA17_14 >= '0' && LA17_14 <= '9')))  					{  						alt17 = 30;  					}  					else  					{  						alt17 = 22;  					}  					break;  				}    				case '(':  				{  					alt17 = 23;  					break;  				}    				case '%':  				{  					alt17 = 24;  					break;  				}    				case '*':  				{  					alt17 = 25;  					break;  				}    				case ')':  				{  					alt17 = 26;  					break;  				}    				case '-':  				{  					alt17 = 27;  					break;  				}    				case 'A':  				case 'B':  				case 'C':  				case 'D':  				case 'E':  				case 'F':  				case 'G':  				case 'H':  				case 'I':  				case 'J':  				case 'K':  				case 'L':  				case 'M':  				case 'N':  				case 'O':  				case 'P':  				case 'Q':  				case 'R':  				case 'S':  				case 'T':  				case 'U':  				case 'V':  				case 'W':  				case 'X':  				case 'Y':  				case 'Z':  				case '_':  				case 'a':  				case 'b':  				case 'c':  				case 'd':  				case 'e':  				case 'f':  				case 'g':  				case 'h':  				case 'i':  				case 'j':  				case 'k':  				case 'l':  				case 'm':  				case 'n':  				case 'o':  				case 'p':  				case 'q':  				case 'r':  				case 's':  				case 't':  				case 'u':  				case 'v':  				case 'w':  				case 'x':  				case 'y':  				case 'z':  				{  					alt17 = 28;  					break;  				}    				case '\t':  				case '\n':  				case '\r':  				case ' ':  				{  					alt17 = 29;  					break;  				}    				case '0':  				{  					switch (input.LA(2))  					{  						case 'X':  						case 'x':  						{  							alt17 = 32;  							break;  						}    						case '0':  						case '1':  						case '2':  						case '3':  						case '4':  						case '5':  						case '6':  						case '7':  						{  							alt17 = 31;  							break;  						}    						default:  						{  							alt17 = 30;  							break;  						}  					}  					break;  				}    				case '1':  				case '2':  				case '3':  				case '4':  				case '5':  				case '6':  				case '7':  				case '8':  				case '9':  				{  					alt17 = 30;  					break;  				}    				default:  				{  					NoViableAltException nvae = new NoViableAltException(string.Empty' 17' 0' input);  					throw nvae;  				}  			}
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA(1))  			{  				case '+':  				{  					alt17 = 1;  					break;  				}    				case '&':  				{  					int LA17_2 = input.LA(2);  					if ((LA17_2 == '&'))  					{  						alt17 = 9;  					}  					else  					{  						alt17 = 2;  					}  					break;  				}    				case '~':  				{  					alt17 = 3;  					break;  				}    				case '|':  				{  					int LA17_4 = input.LA(2);  					if ((LA17_4 == '|'))  					{  						alt17 = 11;  					}  					else  					{  						alt17 = 4;  					}  					break;  				}    				case '<':  				{  					switch (input.LA(2))  					{  						case '<':  						{  							alt17 = 5;  							break;  						}    						case '=':  						{  							alt17 = 18;  							break;  						}    						default:  						{  							alt17 = 17;  							break;  						}  					}  					break;  				}    				case '>':  				{  					switch (input.LA(2))  					{  						case '>':  						{  							int LA17_31 = input.LA(3);  							if ((LA17_31 == '>'))  							{  								alt17 = 7;  							}  							else  							{  								alt17 = 6;  							}  							break;  						}    						case '=':  						{  							alt17 = 16;  							break;  						}    						default:  						{  							alt17 = 15;  							break;  						}  					}  					break;  				}    				case '^':  				{  					alt17 = 8;  					break;  				}    				case '!':  				{  					int LA17_8 = input.LA(2);  					if ((LA17_8 == '='))  					{  						alt17 = 19;  					}  					else  					{  						alt17 = 10;  					}  					break;  				}    				case ':':  				{  					alt17 = 12;  					break;  				}    				case ''':  				{  					alt17 = 13;  					break;  				}    				case '=':  				{  					alt17 = 14;  					break;  				}    				case '?':  				{  					alt17 = 20;  					break;  				}    				case '/':  				{  					alt17 = 21;  					break;  				}    				case '.':  				{  					int LA17_14 = input.LA(2);  					if (((LA17_14 >= '0' && LA17_14 <= '9')))  					{  						alt17 = 30;  					}  					else  					{  						alt17 = 22;  					}  					break;  				}    				case '(':  				{  					alt17 = 23;  					break;  				}    				case '%':  				{  					alt17 = 24;  					break;  				}    				case '*':  				{  					alt17 = 25;  					break;  				}    				case ')':  				{  					alt17 = 26;  					break;  				}    				case '-':  				{  					alt17 = 27;  					break;  				}    				case 'A':  				case 'B':  				case 'C':  				case 'D':  				case 'E':  				case 'F':  				case 'G':  				case 'H':  				case 'I':  				case 'J':  				case 'K':  				case 'L':  				case 'M':  				case 'N':  				case 'O':  				case 'P':  				case 'Q':  				case 'R':  				case 'S':  				case 'T':  				case 'U':  				case 'V':  				case 'W':  				case 'X':  				case 'Y':  				case 'Z':  				case '_':  				case 'a':  				case 'b':  				case 'c':  				case 'd':  				case 'e':  				case 'f':  				case 'g':  				case 'h':  				case 'i':  				case 'j':  				case 'k':  				case 'l':  				case 'm':  				case 'n':  				case 'o':  				case 'p':  				case 'q':  				case 'r':  				case 's':  				case 't':  				case 'u':  				case 'v':  				case 'w':  				case 'x':  				case 'y':  				case 'z':  				{  					alt17 = 28;  					break;  				}    				case '\t':  				case '\n':  				case '\r':  				case ' ':  				{  					alt17 = 29;  					break;  				}    				case '0':  				{  					switch (input.LA(2))  					{  						case 'X':  						case 'x':  						{  							alt17 = 32;  							break;  						}    						case '0':  						case '1':  						case '2':  						case '3':  						case '4':  						case '5':  						case '6':  						case '7':  						{  							alt17 = 31;  							break;  						}    						default:  						{  							alt17 = 30;  							break;  						}  					}  					break;  				}    				case '1':  				case '2':  				case '3':  				case '4':  				case '5':  				case '6':  				case '7':  				case '8':  				case '9':  				{  					alt17 = 30;  					break;  				}    				default:  				{  					NoViableAltException nvae = new NoViableAltException(string.Empty' 17' 0' input);  					throw nvae;  				}  			}
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA(1))  			{  				case '+':  				{  					alt17 = 1;  					break;  				}    				case '&':  				{  					int LA17_2 = input.LA(2);  					if ((LA17_2 == '&'))  					{  						alt17 = 9;  					}  					else  					{  						alt17 = 2;  					}  					break;  				}    				case '~':  				{  					alt17 = 3;  					break;  				}    				case '|':  				{  					int LA17_4 = input.LA(2);  					if ((LA17_4 == '|'))  					{  						alt17 = 11;  					}  					else  					{  						alt17 = 4;  					}  					break;  				}    				case '<':  				{  					switch (input.LA(2))  					{  						case '<':  						{  							alt17 = 5;  							break;  						}    						case '=':  						{  							alt17 = 18;  							break;  						}    						default:  						{  							alt17 = 17;  							break;  						}  					}  					break;  				}    				case '>':  				{  					switch (input.LA(2))  					{  						case '>':  						{  							int LA17_31 = input.LA(3);  							if ((LA17_31 == '>'))  							{  								alt17 = 7;  							}  							else  							{  								alt17 = 6;  							}  							break;  						}    						case '=':  						{  							alt17 = 16;  							break;  						}    						default:  						{  							alt17 = 15;  							break;  						}  					}  					break;  				}    				case '^':  				{  					alt17 = 8;  					break;  				}    				case '!':  				{  					int LA17_8 = input.LA(2);  					if ((LA17_8 == '='))  					{  						alt17 = 19;  					}  					else  					{  						alt17 = 10;  					}  					break;  				}    				case ':':  				{  					alt17 = 12;  					break;  				}    				case ''':  				{  					alt17 = 13;  					break;  				}    				case '=':  				{  					alt17 = 14;  					break;  				}    				case '?':  				{  					alt17 = 20;  					break;  				}    				case '/':  				{  					alt17 = 21;  					break;  				}    				case '.':  				{  					int LA17_14 = input.LA(2);  					if (((LA17_14 >= '0' && LA17_14 <= '9')))  					{  						alt17 = 30;  					}  					else  					{  						alt17 = 22;  					}  					break;  				}    				case '(':  				{  					alt17 = 23;  					break;  				}    				case '%':  				{  					alt17 = 24;  					break;  				}    				case '*':  				{  					alt17 = 25;  					break;  				}    				case ')':  				{  					alt17 = 26;  					break;  				}    				case '-':  				{  					alt17 = 27;  					break;  				}    				case 'A':  				case 'B':  				case 'C':  				case 'D':  				case 'E':  				case 'F':  				case 'G':  				case 'H':  				case 'I':  				case 'J':  				case 'K':  				case 'L':  				case 'M':  				case 'N':  				case 'O':  				case 'P':  				case 'Q':  				case 'R':  				case 'S':  				case 'T':  				case 'U':  				case 'V':  				case 'W':  				case 'X':  				case 'Y':  				case 'Z':  				case '_':  				case 'a':  				case 'b':  				case 'c':  				case 'd':  				case 'e':  				case 'f':  				case 'g':  				case 'h':  				case 'i':  				case 'j':  				case 'k':  				case 'l':  				case 'm':  				case 'n':  				case 'o':  				case 'p':  				case 'q':  				case 'r':  				case 's':  				case 't':  				case 'u':  				case 'v':  				case 'w':  				case 'x':  				case 'y':  				case 'z':  				{  					alt17 = 28;  					break;  				}    				case '\t':  				case '\n':  				case '\r':  				case ' ':  				{  					alt17 = 29;  					break;  				}    				case '0':  				{  					switch (input.LA(2))  					{  						case 'X':  						case 'x':  						{  							alt17 = 32;  							break;  						}    						case '0':  						case '1':  						case '2':  						case '3':  						case '4':  						case '5':  						case '6':  						case '7':  						{  							alt17 = 31;  							break;  						}    						default:  						{  							alt17 = 30;  							break;  						}  					}  					break;  				}    				case '1':  				case '2':  				case '3':  				case '4':  				case '5':  				case '6':  				case '7':  				case '8':  				case '9':  				{  					alt17 = 30;  					break;  				}    				default:  				{  					NoViableAltException nvae = new NoViableAltException(string.Empty' 17' 0' input);  					throw nvae;  				}  			}
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA(1))  			{  				case '+':  				{  					alt17 = 1;  					break;  				}    				case '&':  				{  					int LA17_2 = input.LA(2);  					if ((LA17_2 == '&'))  					{  						alt17 = 9;  					}  					else  					{  						alt17 = 2;  					}  					break;  				}    				case '~':  				{  					alt17 = 3;  					break;  				}    				case '|':  				{  					int LA17_4 = input.LA(2);  					if ((LA17_4 == '|'))  					{  						alt17 = 11;  					}  					else  					{  						alt17 = 4;  					}  					break;  				}    				case '<':  				{  					switch (input.LA(2))  					{  						case '<':  						{  							alt17 = 5;  							break;  						}    						case '=':  						{  							alt17 = 18;  							break;  						}    						default:  						{  							alt17 = 17;  							break;  						}  					}  					break;  				}    				case '>':  				{  					switch (input.LA(2))  					{  						case '>':  						{  							int LA17_31 = input.LA(3);  							if ((LA17_31 == '>'))  							{  								alt17 = 7;  							}  							else  							{  								alt17 = 6;  							}  							break;  						}    						case '=':  						{  							alt17 = 16;  							break;  						}    						default:  						{  							alt17 = 15;  							break;  						}  					}  					break;  				}    				case '^':  				{  					alt17 = 8;  					break;  				}    				case '!':  				{  					int LA17_8 = input.LA(2);  					if ((LA17_8 == '='))  					{  						alt17 = 19;  					}  					else  					{  						alt17 = 10;  					}  					break;  				}    				case ':':  				{  					alt17 = 12;  					break;  				}    				case ''':  				{  					alt17 = 13;  					break;  				}    				case '=':  				{  					alt17 = 14;  					break;  				}    				case '?':  				{  					alt17 = 20;  					break;  				}    				case '/':  				{  					alt17 = 21;  					break;  				}    				case '.':  				{  					int LA17_14 = input.LA(2);  					if (((LA17_14 >= '0' && LA17_14 <= '9')))  					{  						alt17 = 30;  					}  					else  					{  						alt17 = 22;  					}  					break;  				}    				case '(':  				{  					alt17 = 23;  					break;  				}    				case '%':  				{  					alt17 = 24;  					break;  				}    				case '*':  				{  					alt17 = 25;  					break;  				}    				case ')':  				{  					alt17 = 26;  					break;  				}    				case '-':  				{  					alt17 = 27;  					break;  				}    				case 'A':  				case 'B':  				case 'C':  				case 'D':  				case 'E':  				case 'F':  				case 'G':  				case 'H':  				case 'I':  				case 'J':  				case 'K':  				case 'L':  				case 'M':  				case 'N':  				case 'O':  				case 'P':  				case 'Q':  				case 'R':  				case 'S':  				case 'T':  				case 'U':  				case 'V':  				case 'W':  				case 'X':  				case 'Y':  				case 'Z':  				case '_':  				case 'a':  				case 'b':  				case 'c':  				case 'd':  				case 'e':  				case 'f':  				case 'g':  				case 'h':  				case 'i':  				case 'j':  				case 'k':  				case 'l':  				case 'm':  				case 'n':  				case 'o':  				case 'p':  				case 'q':  				case 'r':  				case 's':  				case 't':  				case 'u':  				case 'v':  				case 'w':  				case 'x':  				case 'y':  				case 'z':  				{  					alt17 = 28;  					break;  				}    				case '\t':  				case '\n':  				case '\r':  				case ' ':  				{  					alt17 = 29;  					break;  				}    				case '0':  				{  					switch (input.LA(2))  					{  						case 'X':  						case 'x':  						{  							alt17 = 32;  							break;  						}    						case '0':  						case '1':  						case '2':  						case '3':  						case '4':  						case '5':  						case '6':  						case '7':  						{  							alt17 = 31;  							break;  						}    						default:  						{  							alt17 = 30;  							break;  						}  					}  					break;  				}    				case '1':  				case '2':  				case '3':  				case '4':  				case '5':  				case '6':  				case '7':  				case '8':  				case '9':  				{  					alt17 = 30;  					break;  				}    				default:  				{  					NoViableAltException nvae = new NoViableAltException(string.Empty' 17' 0' input);  					throw nvae;  				}  			}
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA(1))  			{  				case '+':  				{  					alt17 = 1;  					break;  				}    				case '&':  				{  					int LA17_2 = input.LA(2);  					if ((LA17_2 == '&'))  					{  						alt17 = 9;  					}  					else  					{  						alt17 = 2;  					}  					break;  				}    				case '~':  				{  					alt17 = 3;  					break;  				}    				case '|':  				{  					int LA17_4 = input.LA(2);  					if ((LA17_4 == '|'))  					{  						alt17 = 11;  					}  					else  					{  						alt17 = 4;  					}  					break;  				}    				case '<':  				{  					switch (input.LA(2))  					{  						case '<':  						{  							alt17 = 5;  							break;  						}    						case '=':  						{  							alt17 = 18;  							break;  						}    						default:  						{  							alt17 = 17;  							break;  						}  					}  					break;  				}    				case '>':  				{  					switch (input.LA(2))  					{  						case '>':  						{  							int LA17_31 = input.LA(3);  							if ((LA17_31 == '>'))  							{  								alt17 = 7;  							}  							else  							{  								alt17 = 6;  							}  							break;  						}    						case '=':  						{  							alt17 = 16;  							break;  						}    						default:  						{  							alt17 = 15;  							break;  						}  					}  					break;  				}    				case '^':  				{  					alt17 = 8;  					break;  				}    				case '!':  				{  					int LA17_8 = input.LA(2);  					if ((LA17_8 == '='))  					{  						alt17 = 19;  					}  					else  					{  						alt17 = 10;  					}  					break;  				}    				case ':':  				{  					alt17 = 12;  					break;  				}    				case ''':  				{  					alt17 = 13;  					break;  				}    				case '=':  				{  					alt17 = 14;  					break;  				}    				case '?':  				{  					alt17 = 20;  					break;  				}    				case '/':  				{  					alt17 = 21;  					break;  				}    				case '.':  				{  					int LA17_14 = input.LA(2);  					if (((LA17_14 >= '0' && LA17_14 <= '9')))  					{  						alt17 = 30;  					}  					else  					{  						alt17 = 22;  					}  					break;  				}    				case '(':  				{  					alt17 = 23;  					break;  				}    				case '%':  				{  					alt17 = 24;  					break;  				}    				case '*':  				{  					alt17 = 25;  					break;  				}    				case ')':  				{  					alt17 = 26;  					break;  				}    				case '-':  				{  					alt17 = 27;  					break;  				}    				case 'A':  				case 'B':  				case 'C':  				case 'D':  				case 'E':  				case 'F':  				case 'G':  				case 'H':  				case 'I':  				case 'J':  				case 'K':  				case 'L':  				case 'M':  				case 'N':  				case 'O':  				case 'P':  				case 'Q':  				case 'R':  				case 'S':  				case 'T':  				case 'U':  				case 'V':  				case 'W':  				case 'X':  				case 'Y':  				case 'Z':  				case '_':  				case 'a':  				case 'b':  				case 'c':  				case 'd':  				case 'e':  				case 'f':  				case 'g':  				case 'h':  				case 'i':  				case 'j':  				case 'k':  				case 'l':  				case 'm':  				case 'n':  				case 'o':  				case 'p':  				case 'q':  				case 'r':  				case 's':  				case 't':  				case 'u':  				case 'v':  				case 'w':  				case 'x':  				case 'y':  				case 'z':  				{  					alt17 = 28;  					break;  				}    				case '\t':  				case '\n':  				case '\r':  				case ' ':  				{  					alt17 = 29;  					break;  				}    				case '0':  				{  					switch (input.LA(2))  					{  						case 'X':  						case 'x':  						{  							alt17 = 32;  							break;  						}    						case '0':  						case '1':  						case '2':  						case '3':  						case '4':  						case '5':  						case '6':  						case '7':  						{  							alt17 = 31;  							break;  						}    						default:  						{  							alt17 = 30;  							break;  						}  					}  					break;  				}    				case '1':  				case '2':  				case '3':  				case '4':  				case '5':  				case '6':  				case '7':  				case '8':  				case '9':  				{  					alt17 = 30;  					break;  				}    				default:  				{  					NoViableAltException nvae = new NoViableAltException(string.Empty' 17' 0' input);  					throw nvae;  				}  			}
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA(1))  			{  				case '+':  				{  					alt17 = 1;  					break;  				}    				case '&':  				{  					int LA17_2 = input.LA(2);  					if ((LA17_2 == '&'))  					{  						alt17 = 9;  					}  					else  					{  						alt17 = 2;  					}  					break;  				}    				case '~':  				{  					alt17 = 3;  					break;  				}    				case '|':  				{  					int LA17_4 = input.LA(2);  					if ((LA17_4 == '|'))  					{  						alt17 = 11;  					}  					else  					{  						alt17 = 4;  					}  					break;  				}    				case '<':  				{  					switch (input.LA(2))  					{  						case '<':  						{  							alt17 = 5;  							break;  						}    						case '=':  						{  							alt17 = 18;  							break;  						}    						default:  						{  							alt17 = 17;  							break;  						}  					}  					break;  				}    				case '>':  				{  					switch (input.LA(2))  					{  						case '>':  						{  							int LA17_31 = input.LA(3);  							if ((LA17_31 == '>'))  							{  								alt17 = 7;  							}  							else  							{  								alt17 = 6;  							}  							break;  						}    						case '=':  						{  							alt17 = 16;  							break;  						}    						default:  						{  							alt17 = 15;  							break;  						}  					}  					break;  				}    				case '^':  				{  					alt17 = 8;  					break;  				}    				case '!':  				{  					int LA17_8 = input.LA(2);  					if ((LA17_8 == '='))  					{  						alt17 = 19;  					}  					else  					{  						alt17 = 10;  					}  					break;  				}    				case ':':  				{  					alt17 = 12;  					break;  				}    				case ''':  				{  					alt17 = 13;  					break;  				}    				case '=':  				{  					alt17 = 14;  					break;  				}    				case '?':  				{  					alt17 = 20;  					break;  				}    				case '/':  				{  					alt17 = 21;  					break;  				}    				case '.':  				{  					int LA17_14 = input.LA(2);  					if (((LA17_14 >= '0' && LA17_14 <= '9')))  					{  						alt17 = 30;  					}  					else  					{  						alt17 = 22;  					}  					break;  				}    				case '(':  				{  					alt17 = 23;  					break;  				}    				case '%':  				{  					alt17 = 24;  					break;  				}    				case '*':  				{  					alt17 = 25;  					break;  				}    				case ')':  				{  					alt17 = 26;  					break;  				}    				case '-':  				{  					alt17 = 27;  					break;  				}    				case 'A':  				case 'B':  				case 'C':  				case 'D':  				case 'E':  				case 'F':  				case 'G':  				case 'H':  				case 'I':  				case 'J':  				case 'K':  				case 'L':  				case 'M':  				case 'N':  				case 'O':  				case 'P':  				case 'Q':  				case 'R':  				case 'S':  				case 'T':  				case 'U':  				case 'V':  				case 'W':  				case 'X':  				case 'Y':  				case 'Z':  				case '_':  				case 'a':  				case 'b':  				case 'c':  				case 'd':  				case 'e':  				case 'f':  				case 'g':  				case 'h':  				case 'i':  				case 'j':  				case 'k':  				case 'l':  				case 'm':  				case 'n':  				case 'o':  				case 'p':  				case 'q':  				case 'r':  				case 's':  				case 't':  				case 'u':  				case 'v':  				case 'w':  				case 'x':  				case 'y':  				case 'z':  				{  					alt17 = 28;  					break;  				}    				case '\t':  				case '\n':  				case '\r':  				case ' ':  				{  					alt17 = 29;  					break;  				}    				case '0':  				{  					switch (input.LA(2))  					{  						case 'X':  						case 'x':  						{  							alt17 = 32;  							break;  						}    						case '0':  						case '1':  						case '2':  						case '3':  						case '4':  						case '5':  						case '6':  						case '7':  						{  							alt17 = 31;  							break;  						}    						default:  						{  							alt17 = 30;  							break;  						}  					}  					break;  				}    				case '1':  				case '2':  				case '3':  				case '4':  				case '5':  				case '6':  				case '7':  				case '8':  				case '9':  				{  					alt17 = 30;  					break;  				}    				default:  				{  					NoViableAltException nvae = new NoViableAltException(string.Empty' 17' 0' input);  					throw nvae;  				}  			}
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA(1))  			{  				case '+':  				{  					alt17 = 1;  					break;  				}    				case '&':  				{  					int LA17_2 = input.LA(2);  					if ((LA17_2 == '&'))  					{  						alt17 = 9;  					}  					else  					{  						alt17 = 2;  					}  					break;  				}    				case '~':  				{  					alt17 = 3;  					break;  				}    				case '|':  				{  					int LA17_4 = input.LA(2);  					if ((LA17_4 == '|'))  					{  						alt17 = 11;  					}  					else  					{  						alt17 = 4;  					}  					break;  				}    				case '<':  				{  					switch (input.LA(2))  					{  						case '<':  						{  							alt17 = 5;  							break;  						}    						case '=':  						{  							alt17 = 18;  							break;  						}    						default:  						{  							alt17 = 17;  							break;  						}  					}  					break;  				}    				case '>':  				{  					switch (input.LA(2))  					{  						case '>':  						{  							int LA17_31 = input.LA(3);  							if ((LA17_31 == '>'))  							{  								alt17 = 7;  							}  							else  							{  								alt17 = 6;  							}  							break;  						}    						case '=':  						{  							alt17 = 16;  							break;  						}    						default:  						{  							alt17 = 15;  							break;  						}  					}  					break;  				}    				case '^':  				{  					alt17 = 8;  					break;  				}    				case '!':  				{  					int LA17_8 = input.LA(2);  					if ((LA17_8 == '='))  					{  						alt17 = 19;  					}  					else  					{  						alt17 = 10;  					}  					break;  				}    				case ':':  				{  					alt17 = 12;  					break;  				}    				case ''':  				{  					alt17 = 13;  					break;  				}    				case '=':  				{  					alt17 = 14;  					break;  				}    				case '?':  				{  					alt17 = 20;  					break;  				}    				case '/':  				{  					alt17 = 21;  					break;  				}    				case '.':  				{  					int LA17_14 = input.LA(2);  					if (((LA17_14 >= '0' && LA17_14 <= '9')))  					{  						alt17 = 30;  					}  					else  					{  						alt17 = 22;  					}  					break;  				}    				case '(':  				{  					alt17 = 23;  					break;  				}    				case '%':  				{  					alt17 = 24;  					break;  				}    				case '*':  				{  					alt17 = 25;  					break;  				}    				case ')':  				{  					alt17 = 26;  					break;  				}    				case '-':  				{  					alt17 = 27;  					break;  				}    				case 'A':  				case 'B':  				case 'C':  				case 'D':  				case 'E':  				case 'F':  				case 'G':  				case 'H':  				case 'I':  				case 'J':  				case 'K':  				case 'L':  				case 'M':  				case 'N':  				case 'O':  				case 'P':  				case 'Q':  				case 'R':  				case 'S':  				case 'T':  				case 'U':  				case 'V':  				case 'W':  				case 'X':  				case 'Y':  				case 'Z':  				case '_':  				case 'a':  				case 'b':  				case 'c':  				case 'd':  				case 'e':  				case 'f':  				case 'g':  				case 'h':  				case 'i':  				case 'j':  				case 'k':  				case 'l':  				case 'm':  				case 'n':  				case 'o':  				case 'p':  				case 'q':  				case 'r':  				case 's':  				case 't':  				case 'u':  				case 'v':  				case 'w':  				case 'x':  				case 'y':  				case 'z':  				{  					alt17 = 28;  					break;  				}    				case '\t':  				case '\n':  				case '\r':  				case ' ':  				{  					alt17 = 29;  					break;  				}    				case '0':  				{  					switch (input.LA(2))  					{  						case 'X':  						case 'x':  						{  							alt17 = 32;  							break;  						}    						case '0':  						case '1':  						case '2':  						case '3':  						case '4':  						case '5':  						case '6':  						case '7':  						{  							alt17 = 31;  							break;  						}    						default:  						{  							alt17 = 30;  							break;  						}  					}  					break;  				}    				case '1':  				case '2':  				case '3':  				case '4':  				case '5':  				case '6':  				case '7':  				case '8':  				case '9':  				{  					alt17 = 30;  					break;  				}    				default:  				{  					NoViableAltException nvae = new NoViableAltException(string.Empty' 17' 0' input);  					throw nvae;  				}  			}
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA(1))  			{  				case '+':  				{  					alt17 = 1;  					break;  				}    				case '&':  				{  					int LA17_2 = input.LA(2);  					if ((LA17_2 == '&'))  					{  						alt17 = 9;  					}  					else  					{  						alt17 = 2;  					}  					break;  				}    				case '~':  				{  					alt17 = 3;  					break;  				}    				case '|':  				{  					int LA17_4 = input.LA(2);  					if ((LA17_4 == '|'))  					{  						alt17 = 11;  					}  					else  					{  						alt17 = 4;  					}  					break;  				}    				case '<':  				{  					switch (input.LA(2))  					{  						case '<':  						{  							alt17 = 5;  							break;  						}    						case '=':  						{  							alt17 = 18;  							break;  						}    						default:  						{  							alt17 = 17;  							break;  						}  					}  					break;  				}    				case '>':  				{  					switch (input.LA(2))  					{  						case '>':  						{  							int LA17_31 = input.LA(3);  							if ((LA17_31 == '>'))  							{  								alt17 = 7;  							}  							else  							{  								alt17 = 6;  							}  							break;  						}    						case '=':  						{  							alt17 = 16;  							break;  						}    						default:  						{  							alt17 = 15;  							break;  						}  					}  					break;  				}    				case '^':  				{  					alt17 = 8;  					break;  				}    				case '!':  				{  					int LA17_8 = input.LA(2);  					if ((LA17_8 == '='))  					{  						alt17 = 19;  					}  					else  					{  						alt17 = 10;  					}  					break;  				}    				case ':':  				{  					alt17 = 12;  					break;  				}    				case ''':  				{  					alt17 = 13;  					break;  				}    				case '=':  				{  					alt17 = 14;  					break;  				}    				case '?':  				{  					alt17 = 20;  					break;  				}    				case '/':  				{  					alt17 = 21;  					break;  				}    				case '.':  				{  					int LA17_14 = input.LA(2);  					if (((LA17_14 >= '0' && LA17_14 <= '9')))  					{  						alt17 = 30;  					}  					else  					{  						alt17 = 22;  					}  					break;  				}    				case '(':  				{  					alt17 = 23;  					break;  				}    				case '%':  				{  					alt17 = 24;  					break;  				}    				case '*':  				{  					alt17 = 25;  					break;  				}    				case ')':  				{  					alt17 = 26;  					break;  				}    				case '-':  				{  					alt17 = 27;  					break;  				}    				case 'A':  				case 'B':  				case 'C':  				case 'D':  				case 'E':  				case 'F':  				case 'G':  				case 'H':  				case 'I':  				case 'J':  				case 'K':  				case 'L':  				case 'M':  				case 'N':  				case 'O':  				case 'P':  				case 'Q':  				case 'R':  				case 'S':  				case 'T':  				case 'U':  				case 'V':  				case 'W':  				case 'X':  				case 'Y':  				case 'Z':  				case '_':  				case 'a':  				case 'b':  				case 'c':  				case 'd':  				case 'e':  				case 'f':  				case 'g':  				case 'h':  				case 'i':  				case 'j':  				case 'k':  				case 'l':  				case 'm':  				case 'n':  				case 'o':  				case 'p':  				case 'q':  				case 'r':  				case 's':  				case 't':  				case 'u':  				case 'v':  				case 'w':  				case 'x':  				case 'y':  				case 'z':  				{  					alt17 = 28;  					break;  				}    				case '\t':  				case '\n':  				case '\r':  				case ' ':  				{  					alt17 = 29;  					break;  				}    				case '0':  				{  					switch (input.LA(2))  					{  						case 'X':  						case 'x':  						{  							alt17 = 32;  							break;  						}    						case '0':  						case '1':  						case '2':  						case '3':  						case '4':  						case '5':  						case '6':  						case '7':  						{  							alt17 = 31;  							break;  						}    						default:  						{  							alt17 = 30;  							break;  						}  					}  					break;  				}    				case '1':  				case '2':  				case '3':  				case '4':  				case '5':  				case '6':  				case '7':  				case '8':  				case '9':  				{  					alt17 = 30;  					break;  				}    				default:  				{  					NoViableAltException nvae = new NoViableAltException(string.Empty' 17' 0' input);  					throw nvae;  				}  			}
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA(1))  			{  				case '+':  				{  					alt17 = 1;  					break;  				}    				case '&':  				{  					int LA17_2 = input.LA(2);  					if ((LA17_2 == '&'))  					{  						alt17 = 9;  					}  					else  					{  						alt17 = 2;  					}  					break;  				}    				case '~':  				{  					alt17 = 3;  					break;  				}    				case '|':  				{  					int LA17_4 = input.LA(2);  					if ((LA17_4 == '|'))  					{  						alt17 = 11;  					}  					else  					{  						alt17 = 4;  					}  					break;  				}    				case '<':  				{  					switch (input.LA(2))  					{  						case '<':  						{  							alt17 = 5;  							break;  						}    						case '=':  						{  							alt17 = 18;  							break;  						}    						default:  						{  							alt17 = 17;  							break;  						}  					}  					break;  				}    				case '>':  				{  					switch (input.LA(2))  					{  						case '>':  						{  							int LA17_31 = input.LA(3);  							if ((LA17_31 == '>'))  							{  								alt17 = 7;  							}  							else  							{  								alt17 = 6;  							}  							break;  						}    						case '=':  						{  							alt17 = 16;  							break;  						}    						default:  						{  							alt17 = 15;  							break;  						}  					}  					break;  				}    				case '^':  				{  					alt17 = 8;  					break;  				}    				case '!':  				{  					int LA17_8 = input.LA(2);  					if ((LA17_8 == '='))  					{  						alt17 = 19;  					}  					else  					{  						alt17 = 10;  					}  					break;  				}    				case ':':  				{  					alt17 = 12;  					break;  				}    				case ''':  				{  					alt17 = 13;  					break;  				}    				case '=':  				{  					alt17 = 14;  					break;  				}    				case '?':  				{  					alt17 = 20;  					break;  				}    				case '/':  				{  					alt17 = 21;  					break;  				}    				case '.':  				{  					int LA17_14 = input.LA(2);  					if (((LA17_14 >= '0' && LA17_14 <= '9')))  					{  						alt17 = 30;  					}  					else  					{  						alt17 = 22;  					}  					break;  				}    				case '(':  				{  					alt17 = 23;  					break;  				}    				case '%':  				{  					alt17 = 24;  					break;  				}    				case '*':  				{  					alt17 = 25;  					break;  				}    				case ')':  				{  					alt17 = 26;  					break;  				}    				case '-':  				{  					alt17 = 27;  					break;  				}    				case 'A':  				case 'B':  				case 'C':  				case 'D':  				case 'E':  				case 'F':  				case 'G':  				case 'H':  				case 'I':  				case 'J':  				case 'K':  				case 'L':  				case 'M':  				case 'N':  				case 'O':  				case 'P':  				case 'Q':  				case 'R':  				case 'S':  				case 'T':  				case 'U':  				case 'V':  				case 'W':  				case 'X':  				case 'Y':  				case 'Z':  				case '_':  				case 'a':  				case 'b':  				case 'c':  				case 'd':  				case 'e':  				case 'f':  				case 'g':  				case 'h':  				case 'i':  				case 'j':  				case 'k':  				case 'l':  				case 'm':  				case 'n':  				case 'o':  				case 'p':  				case 'q':  				case 'r':  				case 's':  				case 't':  				case 'u':  				case 'v':  				case 'w':  				case 'x':  				case 'y':  				case 'z':  				{  					alt17 = 28;  					break;  				}    				case '\t':  				case '\n':  				case '\r':  				case ' ':  				{  					alt17 = 29;  					break;  				}    				case '0':  				{  					switch (input.LA(2))  					{  						case 'X':  						case 'x':  						{  							alt17 = 32;  							break;  						}    						case '0':  						case '1':  						case '2':  						case '3':  						case '4':  						case '5':  						case '6':  						case '7':  						{  							alt17 = 31;  							break;  						}    						default:  						{  							alt17 = 30;  							break;  						}  					}  					break;  				}    				case '1':  				case '2':  				case '3':  				case '4':  				case '5':  				case '6':  				case '7':  				case '8':  				case '9':  				{  					alt17 = 30;  					break;  				}    				default:  				{  					NoViableAltException nvae = new NoViableAltException(string.Empty' 17' 0' input);  					throw nvae;  				}  			}
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA(1))  			{  				case '+':  				{  					alt17 = 1;  					break;  				}    				case '&':  				{  					int LA17_2 = input.LA(2);  					if ((LA17_2 == '&'))  					{  						alt17 = 9;  					}  					else  					{  						alt17 = 2;  					}  					break;  				}    				case '~':  				{  					alt17 = 3;  					break;  				}    				case '|':  				{  					int LA17_4 = input.LA(2);  					if ((LA17_4 == '|'))  					{  						alt17 = 11;  					}  					else  					{  						alt17 = 4;  					}  					break;  				}    				case '<':  				{  					switch (input.LA(2))  					{  						case '<':  						{  							alt17 = 5;  							break;  						}    						case '=':  						{  							alt17 = 18;  							break;  						}    						default:  						{  							alt17 = 17;  							break;  						}  					}  					break;  				}    				case '>':  				{  					switch (input.LA(2))  					{  						case '>':  						{  							int LA17_31 = input.LA(3);  							if ((LA17_31 == '>'))  							{  								alt17 = 7;  							}  							else  							{  								alt17 = 6;  							}  							break;  						}    						case '=':  						{  							alt17 = 16;  							break;  						}    						default:  						{  							alt17 = 15;  							break;  						}  					}  					break;  				}    				case '^':  				{  					alt17 = 8;  					break;  				}    				case '!':  				{  					int LA17_8 = input.LA(2);  					if ((LA17_8 == '='))  					{  						alt17 = 19;  					}  					else  					{  						alt17 = 10;  					}  					break;  				}    				case ':':  				{  					alt17 = 12;  					break;  				}    				case ''':  				{  					alt17 = 13;  					break;  				}    				case '=':  				{  					alt17 = 14;  					break;  				}    				case '?':  				{  					alt17 = 20;  					break;  				}    				case '/':  				{  					alt17 = 21;  					break;  				}    				case '.':  				{  					int LA17_14 = input.LA(2);  					if (((LA17_14 >= '0' && LA17_14 <= '9')))  					{  						alt17 = 30;  					}  					else  					{  						alt17 = 22;  					}  					break;  				}    				case '(':  				{  					alt17 = 23;  					break;  				}    				case '%':  				{  					alt17 = 24;  					break;  				}    				case '*':  				{  					alt17 = 25;  					break;  				}    				case ')':  				{  					alt17 = 26;  					break;  				}    				case '-':  				{  					alt17 = 27;  					break;  				}    				case 'A':  				case 'B':  				case 'C':  				case 'D':  				case 'E':  				case 'F':  				case 'G':  				case 'H':  				case 'I':  				case 'J':  				case 'K':  				case 'L':  				case 'M':  				case 'N':  				case 'O':  				case 'P':  				case 'Q':  				case 'R':  				case 'S':  				case 'T':  				case 'U':  				case 'V':  				case 'W':  				case 'X':  				case 'Y':  				case 'Z':  				case '_':  				case 'a':  				case 'b':  				case 'c':  				case 'd':  				case 'e':  				case 'f':  				case 'g':  				case 'h':  				case 'i':  				case 'j':  				case 'k':  				case 'l':  				case 'm':  				case 'n':  				case 'o':  				case 'p':  				case 'q':  				case 'r':  				case 's':  				case 't':  				case 'u':  				case 'v':  				case 'w':  				case 'x':  				case 'y':  				case 'z':  				{  					alt17 = 28;  					break;  				}    				case '\t':  				case '\n':  				case '\r':  				case ' ':  				{  					alt17 = 29;  					break;  				}    				case '0':  				{  					switch (input.LA(2))  					{  						case 'X':  						case 'x':  						{  							alt17 = 32;  							break;  						}    						case '0':  						case '1':  						case '2':  						case '3':  						case '4':  						case '5':  						case '6':  						case '7':  						{  							alt17 = 31;  							break;  						}    						default:  						{  							alt17 = 30;  							break;  						}  					}  					break;  				}    				case '1':  				case '2':  				case '3':  				case '4':  				case '5':  				case '6':  				case '7':  				case '8':  				case '9':  				{  					alt17 = 30;  					break;  				}    				default:  				{  					NoViableAltException nvae = new NoViableAltException(string.Empty' 17' 0' input);  					throw nvae;  				}  			}
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA(1))  			{  				case '+':  				{  					alt17 = 1;  					break;  				}    				case '&':  				{  					int LA17_2 = input.LA(2);  					if ((LA17_2 == '&'))  					{  						alt17 = 9;  					}  					else  					{  						alt17 = 2;  					}  					break;  				}    				case '~':  				{  					alt17 = 3;  					break;  				}    				case '|':  				{  					int LA17_4 = input.LA(2);  					if ((LA17_4 == '|'))  					{  						alt17 = 11;  					}  					else  					{  						alt17 = 4;  					}  					break;  				}    				case '<':  				{  					switch (input.LA(2))  					{  						case '<':  						{  							alt17 = 5;  							break;  						}    						case '=':  						{  							alt17 = 18;  							break;  						}    						default:  						{  							alt17 = 17;  							break;  						}  					}  					break;  				}    				case '>':  				{  					switch (input.LA(2))  					{  						case '>':  						{  							int LA17_31 = input.LA(3);  							if ((LA17_31 == '>'))  							{  								alt17 = 7;  							}  							else  							{  								alt17 = 6;  							}  							break;  						}    						case '=':  						{  							alt17 = 16;  							break;  						}    						default:  						{  							alt17 = 15;  							break;  						}  					}  					break;  				}    				case '^':  				{  					alt17 = 8;  					break;  				}    				case '!':  				{  					int LA17_8 = input.LA(2);  					if ((LA17_8 == '='))  					{  						alt17 = 19;  					}  					else  					{  						alt17 = 10;  					}  					break;  				}    				case ':':  				{  					alt17 = 12;  					break;  				}    				case ''':  				{  					alt17 = 13;  					break;  				}    				case '=':  				{  					alt17 = 14;  					break;  				}    				case '?':  				{  					alt17 = 20;  					break;  				}    				case '/':  				{  					alt17 = 21;  					break;  				}    				case '.':  				{  					int LA17_14 = input.LA(2);  					if (((LA17_14 >= '0' && LA17_14 <= '9')))  					{  						alt17 = 30;  					}  					else  					{  						alt17 = 22;  					}  					break;  				}    				case '(':  				{  					alt17 = 23;  					break;  				}    				case '%':  				{  					alt17 = 24;  					break;  				}    				case '*':  				{  					alt17 = 25;  					break;  				}    				case ')':  				{  					alt17 = 26;  					break;  				}    				case '-':  				{  					alt17 = 27;  					break;  				}    				case 'A':  				case 'B':  				case 'C':  				case 'D':  				case 'E':  				case 'F':  				case 'G':  				case 'H':  				case 'I':  				case 'J':  				case 'K':  				case 'L':  				case 'M':  				case 'N':  				case 'O':  				case 'P':  				case 'Q':  				case 'R':  				case 'S':  				case 'T':  				case 'U':  				case 'V':  				case 'W':  				case 'X':  				case 'Y':  				case 'Z':  				case '_':  				case 'a':  				case 'b':  				case 'c':  				case 'd':  				case 'e':  				case 'f':  				case 'g':  				case 'h':  				case 'i':  				case 'j':  				case 'k':  				case 'l':  				case 'm':  				case 'n':  				case 'o':  				case 'p':  				case 'q':  				case 'r':  				case 's':  				case 't':  				case 'u':  				case 'v':  				case 'w':  				case 'x':  				case 'y':  				case 'z':  				{  					alt17 = 28;  					break;  				}    				case '\t':  				case '\n':  				case '\r':  				case ' ':  				{  					alt17 = 29;  					break;  				}    				case '0':  				{  					switch (input.LA(2))  					{  						case 'X':  						case 'x':  						{  							alt17 = 32;  							break;  						}    						case '0':  						case '1':  						case '2':  						case '3':  						case '4':  						case '5':  						case '6':  						case '7':  						{  							alt17 = 31;  							break;  						}    						default:  						{  							alt17 = 30;  							break;  						}  					}  					break;  				}    				case '1':  				case '2':  				case '3':  				case '4':  				case '5':  				case '6':  				case '7':  				case '8':  				case '9':  				{  					alt17 = 30;  					break;  				}    				default:  				{  					NoViableAltException nvae = new NoViableAltException(string.Empty' 17' 0' input);  					throw nvae;  				}  			}
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA(1))  			{  				case '+':  				{  					alt17 = 1;  					break;  				}    				case '&':  				{  					int LA17_2 = input.LA(2);  					if ((LA17_2 == '&'))  					{  						alt17 = 9;  					}  					else  					{  						alt17 = 2;  					}  					break;  				}    				case '~':  				{  					alt17 = 3;  					break;  				}    				case '|':  				{  					int LA17_4 = input.LA(2);  					if ((LA17_4 == '|'))  					{  						alt17 = 11;  					}  					else  					{  						alt17 = 4;  					}  					break;  				}    				case '<':  				{  					switch (input.LA(2))  					{  						case '<':  						{  							alt17 = 5;  							break;  						}    						case '=':  						{  							alt17 = 18;  							break;  						}    						default:  						{  							alt17 = 17;  							break;  						}  					}  					break;  				}    				case '>':  				{  					switch (input.LA(2))  					{  						case '>':  						{  							int LA17_31 = input.LA(3);  							if ((LA17_31 == '>'))  							{  								alt17 = 7;  							}  							else  							{  								alt17 = 6;  							}  							break;  						}    						case '=':  						{  							alt17 = 16;  							break;  						}    						default:  						{  							alt17 = 15;  							break;  						}  					}  					break;  				}    				case '^':  				{  					alt17 = 8;  					break;  				}    				case '!':  				{  					int LA17_8 = input.LA(2);  					if ((LA17_8 == '='))  					{  						alt17 = 19;  					}  					else  					{  						alt17 = 10;  					}  					break;  				}    				case ':':  				{  					alt17 = 12;  					break;  				}    				case ''':  				{  					alt17 = 13;  					break;  				}    				case '=':  				{  					alt17 = 14;  					break;  				}    				case '?':  				{  					alt17 = 20;  					break;  				}    				case '/':  				{  					alt17 = 21;  					break;  				}    				case '.':  				{  					int LA17_14 = input.LA(2);  					if (((LA17_14 >= '0' && LA17_14 <= '9')))  					{  						alt17 = 30;  					}  					else  					{  						alt17 = 22;  					}  					break;  				}    				case '(':  				{  					alt17 = 23;  					break;  				}    				case '%':  				{  					alt17 = 24;  					break;  				}    				case '*':  				{  					alt17 = 25;  					break;  				}    				case ')':  				{  					alt17 = 26;  					break;  				}    				case '-':  				{  					alt17 = 27;  					break;  				}    				case 'A':  				case 'B':  				case 'C':  				case 'D':  				case 'E':  				case 'F':  				case 'G':  				case 'H':  				case 'I':  				case 'J':  				case 'K':  				case 'L':  				case 'M':  				case 'N':  				case 'O':  				case 'P':  				case 'Q':  				case 'R':  				case 'S':  				case 'T':  				case 'U':  				case 'V':  				case 'W':  				case 'X':  				case 'Y':  				case 'Z':  				case '_':  				case 'a':  				case 'b':  				case 'c':  				case 'd':  				case 'e':  				case 'f':  				case 'g':  				case 'h':  				case 'i':  				case 'j':  				case 'k':  				case 'l':  				case 'm':  				case 'n':  				case 'o':  				case 'p':  				case 'q':  				case 'r':  				case 's':  				case 't':  				case 'u':  				case 'v':  				case 'w':  				case 'x':  				case 'y':  				case 'z':  				{  					alt17 = 28;  					break;  				}    				case '\t':  				case '\n':  				case '\r':  				case ' ':  				{  					alt17 = 29;  					break;  				}    				case '0':  				{  					switch (input.LA(2))  					{  						case 'X':  						case 'x':  						{  							alt17 = 32;  							break;  						}    						case '0':  						case '1':  						case '2':  						case '3':  						case '4':  						case '5':  						case '6':  						case '7':  						{  							alt17 = 31;  							break;  						}    						default:  						{  							alt17 = 30;  							break;  						}  					}  					break;  				}    				case '1':  				case '2':  				case '3':  				case '4':  				case '5':  				case '6':  				case '7':  				case '8':  				case '9':  				{  					alt17 = 30;  					break;  				}    				default:  				{  					NoViableAltException nvae = new NoViableAltException(string.Empty' 17' 0' input);  					throw nvae;  				}  			}
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA(1))  			{  				case '+':  				{  					alt17 = 1;  					break;  				}    				case '&':  				{  					int LA17_2 = input.LA(2);  					if ((LA17_2 == '&'))  					{  						alt17 = 9;  					}  					else  					{  						alt17 = 2;  					}  					break;  				}    				case '~':  				{  					alt17 = 3;  					break;  				}    				case '|':  				{  					int LA17_4 = input.LA(2);  					if ((LA17_4 == '|'))  					{  						alt17 = 11;  					}  					else  					{  						alt17 = 4;  					}  					break;  				}    				case '<':  				{  					switch (input.LA(2))  					{  						case '<':  						{  							alt17 = 5;  							break;  						}    						case '=':  						{  							alt17 = 18;  							break;  						}    						default:  						{  							alt17 = 17;  							break;  						}  					}  					break;  				}    				case '>':  				{  					switch (input.LA(2))  					{  						case '>':  						{  							int LA17_31 = input.LA(3);  							if ((LA17_31 == '>'))  							{  								alt17 = 7;  							}  							else  							{  								alt17 = 6;  							}  							break;  						}    						case '=':  						{  							alt17 = 16;  							break;  						}    						default:  						{  							alt17 = 15;  							break;  						}  					}  					break;  				}    				case '^':  				{  					alt17 = 8;  					break;  				}    				case '!':  				{  					int LA17_8 = input.LA(2);  					if ((LA17_8 == '='))  					{  						alt17 = 19;  					}  					else  					{  						alt17 = 10;  					}  					break;  				}    				case ':':  				{  					alt17 = 12;  					break;  				}    				case ''':  				{  					alt17 = 13;  					break;  				}    				case '=':  				{  					alt17 = 14;  					break;  				}    				case '?':  				{  					alt17 = 20;  					break;  				}    				case '/':  				{  					alt17 = 21;  					break;  				}    				case '.':  				{  					int LA17_14 = input.LA(2);  					if (((LA17_14 >= '0' && LA17_14 <= '9')))  					{  						alt17 = 30;  					}  					else  					{  						alt17 = 22;  					}  					break;  				}    				case '(':  				{  					alt17 = 23;  					break;  				}    				case '%':  				{  					alt17 = 24;  					break;  				}    				case '*':  				{  					alt17 = 25;  					break;  				}    				case ')':  				{  					alt17 = 26;  					break;  				}    				case '-':  				{  					alt17 = 27;  					break;  				}    				case 'A':  				case 'B':  				case 'C':  				case 'D':  				case 'E':  				case 'F':  				case 'G':  				case 'H':  				case 'I':  				case 'J':  				case 'K':  				case 'L':  				case 'M':  				case 'N':  				case 'O':  				case 'P':  				case 'Q':  				case 'R':  				case 'S':  				case 'T':  				case 'U':  				case 'V':  				case 'W':  				case 'X':  				case 'Y':  				case 'Z':  				case '_':  				case 'a':  				case 'b':  				case 'c':  				case 'd':  				case 'e':  				case 'f':  				case 'g':  				case 'h':  				case 'i':  				case 'j':  				case 'k':  				case 'l':  				case 'm':  				case 'n':  				case 'o':  				case 'p':  				case 'q':  				case 'r':  				case 's':  				case 't':  				case 'u':  				case 'v':  				case 'w':  				case 'x':  				case 'y':  				case 'z':  				{  					alt17 = 28;  					break;  				}    				case '\t':  				case '\n':  				case '\r':  				case ' ':  				{  					alt17 = 29;  					break;  				}    				case '0':  				{  					switch (input.LA(2))  					{  						case 'X':  						case 'x':  						{  							alt17 = 32;  							break;  						}    						case '0':  						case '1':  						case '2':  						case '3':  						case '4':  						case '5':  						case '6':  						case '7':  						{  							alt17 = 31;  							break;  						}    						default:  						{  							alt17 = 30;  							break;  						}  					}  					break;  				}    				case '1':  				case '2':  				case '3':  				case '4':  				case '5':  				case '6':  				case '7':  				case '8':  				case '9':  				{  					alt17 = 30;  					break;  				}    				default:  				{  					NoViableAltException nvae = new NoViableAltException(string.Empty' 17' 0' input);  					throw nvae;  				}  			}
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA(1))  			{  				case '+':  				{  					alt17 = 1;  					break;  				}    				case '&':  				{  					int LA17_2 = input.LA(2);  					if ((LA17_2 == '&'))  					{  						alt17 = 9;  					}  					else  					{  						alt17 = 2;  					}  					break;  				}    				case '~':  				{  					alt17 = 3;  					break;  				}    				case '|':  				{  					int LA17_4 = input.LA(2);  					if ((LA17_4 == '|'))  					{  						alt17 = 11;  					}  					else  					{  						alt17 = 4;  					}  					break;  				}    				case '<':  				{  					switch (input.LA(2))  					{  						case '<':  						{  							alt17 = 5;  							break;  						}    						case '=':  						{  							alt17 = 18;  							break;  						}    						default:  						{  							alt17 = 17;  							break;  						}  					}  					break;  				}    				case '>':  				{  					switch (input.LA(2))  					{  						case '>':  						{  							int LA17_31 = input.LA(3);  							if ((LA17_31 == '>'))  							{  								alt17 = 7;  							}  							else  							{  								alt17 = 6;  							}  							break;  						}    						case '=':  						{  							alt17 = 16;  							break;  						}    						default:  						{  							alt17 = 15;  							break;  						}  					}  					break;  				}    				case '^':  				{  					alt17 = 8;  					break;  				}    				case '!':  				{  					int LA17_8 = input.LA(2);  					if ((LA17_8 == '='))  					{  						alt17 = 19;  					}  					else  					{  						alt17 = 10;  					}  					break;  				}    				case ':':  				{  					alt17 = 12;  					break;  				}    				case ''':  				{  					alt17 = 13;  					break;  				}    				case '=':  				{  					alt17 = 14;  					break;  				}    				case '?':  				{  					alt17 = 20;  					break;  				}    				case '/':  				{  					alt17 = 21;  					break;  				}    				case '.':  				{  					int LA17_14 = input.LA(2);  					if (((LA17_14 >= '0' && LA17_14 <= '9')))  					{  						alt17 = 30;  					}  					else  					{  						alt17 = 22;  					}  					break;  				}    				case '(':  				{  					alt17 = 23;  					break;  				}    				case '%':  				{  					alt17 = 24;  					break;  				}    				case '*':  				{  					alt17 = 25;  					break;  				}    				case ')':  				{  					alt17 = 26;  					break;  				}    				case '-':  				{  					alt17 = 27;  					break;  				}    				case 'A':  				case 'B':  				case 'C':  				case 'D':  				case 'E':  				case 'F':  				case 'G':  				case 'H':  				case 'I':  				case 'J':  				case 'K':  				case 'L':  				case 'M':  				case 'N':  				case 'O':  				case 'P':  				case 'Q':  				case 'R':  				case 'S':  				case 'T':  				case 'U':  				case 'V':  				case 'W':  				case 'X':  				case 'Y':  				case 'Z':  				case '_':  				case 'a':  				case 'b':  				case 'c':  				case 'd':  				case 'e':  				case 'f':  				case 'g':  				case 'h':  				case 'i':  				case 'j':  				case 'k':  				case 'l':  				case 'm':  				case 'n':  				case 'o':  				case 'p':  				case 'q':  				case 'r':  				case 's':  				case 't':  				case 'u':  				case 'v':  				case 'w':  				case 'x':  				case 'y':  				case 'z':  				{  					alt17 = 28;  					break;  				}    				case '\t':  				case '\n':  				case '\r':  				case ' ':  				{  					alt17 = 29;  					break;  				}    				case '0':  				{  					switch (input.LA(2))  					{  						case 'X':  						case 'x':  						{  							alt17 = 32;  							break;  						}    						case '0':  						case '1':  						case '2':  						case '3':  						case '4':  						case '5':  						case '6':  						case '7':  						{  							alt17 = 31;  							break;  						}    						default:  						{  							alt17 = 30;  							break;  						}  					}  					break;  				}    				case '1':  				case '2':  				case '3':  				case '4':  				case '5':  				case '6':  				case '7':  				case '8':  				case '9':  				{  					alt17 = 30;  					break;  				}    				default:  				{  					NoViableAltException nvae = new NoViableAltException(string.Empty' 17' 0' input);  					throw nvae;  				}  			}
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA(1))  			{  				case '+':  				{  					alt17 = 1;  					break;  				}    				case '&':  				{  					int LA17_2 = input.LA(2);  					if ((LA17_2 == '&'))  					{  						alt17 = 9;  					}  					else  					{  						alt17 = 2;  					}  					break;  				}    				case '~':  				{  					alt17 = 3;  					break;  				}    				case '|':  				{  					int LA17_4 = input.LA(2);  					if ((LA17_4 == '|'))  					{  						alt17 = 11;  					}  					else  					{  						alt17 = 4;  					}  					break;  				}    				case '<':  				{  					switch (input.LA(2))  					{  						case '<':  						{  							alt17 = 5;  							break;  						}    						case '=':  						{  							alt17 = 18;  							break;  						}    						default:  						{  							alt17 = 17;  							break;  						}  					}  					break;  				}    				case '>':  				{  					switch (input.LA(2))  					{  						case '>':  						{  							int LA17_31 = input.LA(3);  							if ((LA17_31 == '>'))  							{  								alt17 = 7;  							}  							else  							{  								alt17 = 6;  							}  							break;  						}    						case '=':  						{  							alt17 = 16;  							break;  						}    						default:  						{  							alt17 = 15;  							break;  						}  					}  					break;  				}    				case '^':  				{  					alt17 = 8;  					break;  				}    				case '!':  				{  					int LA17_8 = input.LA(2);  					if ((LA17_8 == '='))  					{  						alt17 = 19;  					}  					else  					{  						alt17 = 10;  					}  					break;  				}    				case ':':  				{  					alt17 = 12;  					break;  				}    				case ''':  				{  					alt17 = 13;  					break;  				}    				case '=':  				{  					alt17 = 14;  					break;  				}    				case '?':  				{  					alt17 = 20;  					break;  				}    				case '/':  				{  					alt17 = 21;  					break;  				}    				case '.':  				{  					int LA17_14 = input.LA(2);  					if (((LA17_14 >= '0' && LA17_14 <= '9')))  					{  						alt17 = 30;  					}  					else  					{  						alt17 = 22;  					}  					break;  				}    				case '(':  				{  					alt17 = 23;  					break;  				}    				case '%':  				{  					alt17 = 24;  					break;  				}    				case '*':  				{  					alt17 = 25;  					break;  				}    				case ')':  				{  					alt17 = 26;  					break;  				}    				case '-':  				{  					alt17 = 27;  					break;  				}    				case 'A':  				case 'B':  				case 'C':  				case 'D':  				case 'E':  				case 'F':  				case 'G':  				case 'H':  				case 'I':  				case 'J':  				case 'K':  				case 'L':  				case 'M':  				case 'N':  				case 'O':  				case 'P':  				case 'Q':  				case 'R':  				case 'S':  				case 'T':  				case 'U':  				case 'V':  				case 'W':  				case 'X':  				case 'Y':  				case 'Z':  				case '_':  				case 'a':  				case 'b':  				case 'c':  				case 'd':  				case 'e':  				case 'f':  				case 'g':  				case 'h':  				case 'i':  				case 'j':  				case 'k':  				case 'l':  				case 'm':  				case 'n':  				case 'o':  				case 'p':  				case 'q':  				case 'r':  				case 's':  				case 't':  				case 'u':  				case 'v':  				case 'w':  				case 'x':  				case 'y':  				case 'z':  				{  					alt17 = 28;  					break;  				}    				case '\t':  				case '\n':  				case '\r':  				case ' ':  				{  					alt17 = 29;  					break;  				}    				case '0':  				{  					switch (input.LA(2))  					{  						case 'X':  						case 'x':  						{  							alt17 = 32;  							break;  						}    						case '0':  						case '1':  						case '2':  						case '3':  						case '4':  						case '5':  						case '6':  						case '7':  						{  							alt17 = 31;  							break;  						}    						default:  						{  							alt17 = 30;  							break;  						}  					}  					break;  				}    				case '1':  				case '2':  				case '3':  				case '4':  				case '5':  				case '6':  				case '7':  				case '8':  				case '9':  				{  					alt17 = 30;  					break;  				}    				default:  				{  					NoViableAltException nvae = new NoViableAltException(string.Empty' 17' 0' input);  					throw nvae;  				}  			}
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA(1))  			{  				case '+':  				{  					alt17 = 1;  					break;  				}    				case '&':  				{  					int LA17_2 = input.LA(2);  					if ((LA17_2 == '&'))  					{  						alt17 = 9;  					}  					else  					{  						alt17 = 2;  					}  					break;  				}    				case '~':  				{  					alt17 = 3;  					break;  				}    				case '|':  				{  					int LA17_4 = input.LA(2);  					if ((LA17_4 == '|'))  					{  						alt17 = 11;  					}  					else  					{  						alt17 = 4;  					}  					break;  				}    				case '<':  				{  					switch (input.LA(2))  					{  						case '<':  						{  							alt17 = 5;  							break;  						}    						case '=':  						{  							alt17 = 18;  							break;  						}    						default:  						{  							alt17 = 17;  							break;  						}  					}  					break;  				}    				case '>':  				{  					switch (input.LA(2))  					{  						case '>':  						{  							int LA17_31 = input.LA(3);  							if ((LA17_31 == '>'))  							{  								alt17 = 7;  							}  							else  							{  								alt17 = 6;  							}  							break;  						}    						case '=':  						{  							alt17 = 16;  							break;  						}    						default:  						{  							alt17 = 15;  							break;  						}  					}  					break;  				}    				case '^':  				{  					alt17 = 8;  					break;  				}    				case '!':  				{  					int LA17_8 = input.LA(2);  					if ((LA17_8 == '='))  					{  						alt17 = 19;  					}  					else  					{  						alt17 = 10;  					}  					break;  				}    				case ':':  				{  					alt17 = 12;  					break;  				}    				case ''':  				{  					alt17 = 13;  					break;  				}    				case '=':  				{  					alt17 = 14;  					break;  				}    				case '?':  				{  					alt17 = 20;  					break;  				}    				case '/':  				{  					alt17 = 21;  					break;  				}    				case '.':  				{  					int LA17_14 = input.LA(2);  					if (((LA17_14 >= '0' && LA17_14 <= '9')))  					{  						alt17 = 30;  					}  					else  					{  						alt17 = 22;  					}  					break;  				}    				case '(':  				{  					alt17 = 23;  					break;  				}    				case '%':  				{  					alt17 = 24;  					break;  				}    				case '*':  				{  					alt17 = 25;  					break;  				}    				case ')':  				{  					alt17 = 26;  					break;  				}    				case '-':  				{  					alt17 = 27;  					break;  				}    				case 'A':  				case 'B':  				case 'C':  				case 'D':  				case 'E':  				case 'F':  				case 'G':  				case 'H':  				case 'I':  				case 'J':  				case 'K':  				case 'L':  				case 'M':  				case 'N':  				case 'O':  				case 'P':  				case 'Q':  				case 'R':  				case 'S':  				case 'T':  				case 'U':  				case 'V':  				case 'W':  				case 'X':  				case 'Y':  				case 'Z':  				case '_':  				case 'a':  				case 'b':  				case 'c':  				case 'd':  				case 'e':  				case 'f':  				case 'g':  				case 'h':  				case 'i':  				case 'j':  				case 'k':  				case 'l':  				case 'm':  				case 'n':  				case 'o':  				case 'p':  				case 'q':  				case 'r':  				case 's':  				case 't':  				case 'u':  				case 'v':  				case 'w':  				case 'x':  				case 'y':  				case 'z':  				{  					alt17 = 28;  					break;  				}    				case '\t':  				case '\n':  				case '\r':  				case ' ':  				{  					alt17 = 29;  					break;  				}    				case '0':  				{  					switch (input.LA(2))  					{  						case 'X':  						case 'x':  						{  							alt17 = 32;  							break;  						}    						case '0':  						case '1':  						case '2':  						case '3':  						case '4':  						case '5':  						case '6':  						case '7':  						{  							alt17 = 31;  							break;  						}    						default:  						{  							alt17 = 30;  							break;  						}  					}  					break;  				}    				case '1':  				case '2':  				case '3':  				case '4':  				case '5':  				case '6':  				case '7':  				case '8':  				case '9':  				{  					alt17 = 30;  					break;  				}    				default:  				{  					NoViableAltException nvae = new NoViableAltException(string.Empty' 17' 0' input);  					throw nvae;  				}  			}
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA(1))  			{  				case '+':  				{  					alt17 = 1;  					break;  				}    				case '&':  				{  					int LA17_2 = input.LA(2);  					if ((LA17_2 == '&'))  					{  						alt17 = 9;  					}  					else  					{  						alt17 = 2;  					}  					break;  				}    				case '~':  				{  					alt17 = 3;  					break;  				}    				case '|':  				{  					int LA17_4 = input.LA(2);  					if ((LA17_4 == '|'))  					{  						alt17 = 11;  					}  					else  					{  						alt17 = 4;  					}  					break;  				}    				case '<':  				{  					switch (input.LA(2))  					{  						case '<':  						{  							alt17 = 5;  							break;  						}    						case '=':  						{  							alt17 = 18;  							break;  						}    						default:  						{  							alt17 = 17;  							break;  						}  					}  					break;  				}    				case '>':  				{  					switch (input.LA(2))  					{  						case '>':  						{  							int LA17_31 = input.LA(3);  							if ((LA17_31 == '>'))  							{  								alt17 = 7;  							}  							else  							{  								alt17 = 6;  							}  							break;  						}    						case '=':  						{  							alt17 = 16;  							break;  						}    						default:  						{  							alt17 = 15;  							break;  						}  					}  					break;  				}    				case '^':  				{  					alt17 = 8;  					break;  				}    				case '!':  				{  					int LA17_8 = input.LA(2);  					if ((LA17_8 == '='))  					{  						alt17 = 19;  					}  					else  					{  						alt17 = 10;  					}  					break;  				}    				case ':':  				{  					alt17 = 12;  					break;  				}    				case ''':  				{  					alt17 = 13;  					break;  				}    				case '=':  				{  					alt17 = 14;  					break;  				}    				case '?':  				{  					alt17 = 20;  					break;  				}    				case '/':  				{  					alt17 = 21;  					break;  				}    				case '.':  				{  					int LA17_14 = input.LA(2);  					if (((LA17_14 >= '0' && LA17_14 <= '9')))  					{  						alt17 = 30;  					}  					else  					{  						alt17 = 22;  					}  					break;  				}    				case '(':  				{  					alt17 = 23;  					break;  				}    				case '%':  				{  					alt17 = 24;  					break;  				}    				case '*':  				{  					alt17 = 25;  					break;  				}    				case ')':  				{  					alt17 = 26;  					break;  				}    				case '-':  				{  					alt17 = 27;  					break;  				}    				case 'A':  				case 'B':  				case 'C':  				case 'D':  				case 'E':  				case 'F':  				case 'G':  				case 'H':  				case 'I':  				case 'J':  				case 'K':  				case 'L':  				case 'M':  				case 'N':  				case 'O':  				case 'P':  				case 'Q':  				case 'R':  				case 'S':  				case 'T':  				case 'U':  				case 'V':  				case 'W':  				case 'X':  				case 'Y':  				case 'Z':  				case '_':  				case 'a':  				case 'b':  				case 'c':  				case 'd':  				case 'e':  				case 'f':  				case 'g':  				case 'h':  				case 'i':  				case 'j':  				case 'k':  				case 'l':  				case 'm':  				case 'n':  				case 'o':  				case 'p':  				case 'q':  				case 'r':  				case 's':  				case 't':  				case 'u':  				case 'v':  				case 'w':  				case 'x':  				case 'y':  				case 'z':  				{  					alt17 = 28;  					break;  				}    				case '\t':  				case '\n':  				case '\r':  				case ' ':  				{  					alt17 = 29;  					break;  				}    				case '0':  				{  					switch (input.LA(2))  					{  						case 'X':  						case 'x':  						{  							alt17 = 32;  							break;  						}    						case '0':  						case '1':  						case '2':  						case '3':  						case '4':  						case '5':  						case '6':  						case '7':  						{  							alt17 = 31;  							break;  						}    						default:  						{  							alt17 = 30;  							break;  						}  					}  					break;  				}    				case '1':  				case '2':  				case '3':  				case '4':  				case '5':  				case '6':  				case '7':  				case '8':  				case '9':  				{  					alt17 = 30;  					break;  				}    				default:  				{  					NoViableAltException nvae = new NoViableAltException(string.Empty' 17' 0' input);  					throw nvae;  				}  			}
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA(1))  			{  				case '+':  				{  					alt17 = 1;  					break;  				}    				case '&':  				{  					int LA17_2 = input.LA(2);  					if ((LA17_2 == '&'))  					{  						alt17 = 9;  					}  					else  					{  						alt17 = 2;  					}  					break;  				}    				case '~':  				{  					alt17 = 3;  					break;  				}    				case '|':  				{  					int LA17_4 = input.LA(2);  					if ((LA17_4 == '|'))  					{  						alt17 = 11;  					}  					else  					{  						alt17 = 4;  					}  					break;  				}    				case '<':  				{  					switch (input.LA(2))  					{  						case '<':  						{  							alt17 = 5;  							break;  						}    						case '=':  						{  							alt17 = 18;  							break;  						}    						default:  						{  							alt17 = 17;  							break;  						}  					}  					break;  				}    				case '>':  				{  					switch (input.LA(2))  					{  						case '>':  						{  							int LA17_31 = input.LA(3);  							if ((LA17_31 == '>'))  							{  								alt17 = 7;  							}  							else  							{  								alt17 = 6;  							}  							break;  						}    						case '=':  						{  							alt17 = 16;  							break;  						}    						default:  						{  							alt17 = 15;  							break;  						}  					}  					break;  				}    				case '^':  				{  					alt17 = 8;  					break;  				}    				case '!':  				{  					int LA17_8 = input.LA(2);  					if ((LA17_8 == '='))  					{  						alt17 = 19;  					}  					else  					{  						alt17 = 10;  					}  					break;  				}    				case ':':  				{  					alt17 = 12;  					break;  				}    				case ''':  				{  					alt17 = 13;  					break;  				}    				case '=':  				{  					alt17 = 14;  					break;  				}    				case '?':  				{  					alt17 = 20;  					break;  				}    				case '/':  				{  					alt17 = 21;  					break;  				}    				case '.':  				{  					int LA17_14 = input.LA(2);  					if (((LA17_14 >= '0' && LA17_14 <= '9')))  					{  						alt17 = 30;  					}  					else  					{  						alt17 = 22;  					}  					break;  				}    				case '(':  				{  					alt17 = 23;  					break;  				}    				case '%':  				{  					alt17 = 24;  					break;  				}    				case '*':  				{  					alt17 = 25;  					break;  				}    				case ')':  				{  					alt17 = 26;  					break;  				}    				case '-':  				{  					alt17 = 27;  					break;  				}    				case 'A':  				case 'B':  				case 'C':  				case 'D':  				case 'E':  				case 'F':  				case 'G':  				case 'H':  				case 'I':  				case 'J':  				case 'K':  				case 'L':  				case 'M':  				case 'N':  				case 'O':  				case 'P':  				case 'Q':  				case 'R':  				case 'S':  				case 'T':  				case 'U':  				case 'V':  				case 'W':  				case 'X':  				case 'Y':  				case 'Z':  				case '_':  				case 'a':  				case 'b':  				case 'c':  				case 'd':  				case 'e':  				case 'f':  				case 'g':  				case 'h':  				case 'i':  				case 'j':  				case 'k':  				case 'l':  				case 'm':  				case 'n':  				case 'o':  				case 'p':  				case 'q':  				case 'r':  				case 's':  				case 't':  				case 'u':  				case 'v':  				case 'w':  				case 'x':  				case 'y':  				case 'z':  				{  					alt17 = 28;  					break;  				}    				case '\t':  				case '\n':  				case '\r':  				case ' ':  				{  					alt17 = 29;  					break;  				}    				case '0':  				{  					switch (input.LA(2))  					{  						case 'X':  						case 'x':  						{  							alt17 = 32;  							break;  						}    						case '0':  						case '1':  						case '2':  						case '3':  						case '4':  						case '5':  						case '6':  						case '7':  						{  							alt17 = 31;  							break;  						}    						default:  						{  							alt17 = 30;  							break;  						}  					}  					break;  				}    				case '1':  				case '2':  				case '3':  				case '4':  				case '5':  				case '6':  				case '7':  				case '8':  				case '9':  				{  					alt17 = 30;  					break;  				}    				default:  				{  					NoViableAltException nvae = new NoViableAltException(string.Empty' 17' 0' input);  					throw nvae;  				}  			}
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA(1))  			{  				case '+':  				{  					alt17 = 1;  					break;  				}    				case '&':  				{  					int LA17_2 = input.LA(2);  					if ((LA17_2 == '&'))  					{  						alt17 = 9;  					}  					else  					{  						alt17 = 2;  					}  					break;  				}    				case '~':  				{  					alt17 = 3;  					break;  				}    				case '|':  				{  					int LA17_4 = input.LA(2);  					if ((LA17_4 == '|'))  					{  						alt17 = 11;  					}  					else  					{  						alt17 = 4;  					}  					break;  				}    				case '<':  				{  					switch (input.LA(2))  					{  						case '<':  						{  							alt17 = 5;  							break;  						}    						case '=':  						{  							alt17 = 18;  							break;  						}    						default:  						{  							alt17 = 17;  							break;  						}  					}  					break;  				}    				case '>':  				{  					switch (input.LA(2))  					{  						case '>':  						{  							int LA17_31 = input.LA(3);  							if ((LA17_31 == '>'))  							{  								alt17 = 7;  							}  							else  							{  								alt17 = 6;  							}  							break;  						}    						case '=':  						{  							alt17 = 16;  							break;  						}    						default:  						{  							alt17 = 15;  							break;  						}  					}  					break;  				}    				case '^':  				{  					alt17 = 8;  					break;  				}    				case '!':  				{  					int LA17_8 = input.LA(2);  					if ((LA17_8 == '='))  					{  						alt17 = 19;  					}  					else  					{  						alt17 = 10;  					}  					break;  				}    				case ':':  				{  					alt17 = 12;  					break;  				}    				case ''':  				{  					alt17 = 13;  					break;  				}    				case '=':  				{  					alt17 = 14;  					break;  				}    				case '?':  				{  					alt17 = 20;  					break;  				}    				case '/':  				{  					alt17 = 21;  					break;  				}    				case '.':  				{  					int LA17_14 = input.LA(2);  					if (((LA17_14 >= '0' && LA17_14 <= '9')))  					{  						alt17 = 30;  					}  					else  					{  						alt17 = 22;  					}  					break;  				}    				case '(':  				{  					alt17 = 23;  					break;  				}    				case '%':  				{  					alt17 = 24;  					break;  				}    				case '*':  				{  					alt17 = 25;  					break;  				}    				case ')':  				{  					alt17 = 26;  					break;  				}    				case '-':  				{  					alt17 = 27;  					break;  				}    				case 'A':  				case 'B':  				case 'C':  				case 'D':  				case 'E':  				case 'F':  				case 'G':  				case 'H':  				case 'I':  				case 'J':  				case 'K':  				case 'L':  				case 'M':  				case 'N':  				case 'O':  				case 'P':  				case 'Q':  				case 'R':  				case 'S':  				case 'T':  				case 'U':  				case 'V':  				case 'W':  				case 'X':  				case 'Y':  				case 'Z':  				case '_':  				case 'a':  				case 'b':  				case 'c':  				case 'd':  				case 'e':  				case 'f':  				case 'g':  				case 'h':  				case 'i':  				case 'j':  				case 'k':  				case 'l':  				case 'm':  				case 'n':  				case 'o':  				case 'p':  				case 'q':  				case 'r':  				case 's':  				case 't':  				case 'u':  				case 'v':  				case 'w':  				case 'x':  				case 'y':  				case 'z':  				{  					alt17 = 28;  					break;  				}    				case '\t':  				case '\n':  				case '\r':  				case ' ':  				{  					alt17 = 29;  					break;  				}    				case '0':  				{  					switch (input.LA(2))  					{  						case 'X':  						case 'x':  						{  							alt17 = 32;  							break;  						}    						case '0':  						case '1':  						case '2':  						case '3':  						case '4':  						case '5':  						case '6':  						case '7':  						{  							alt17 = 31;  							break;  						}    						default:  						{  							alt17 = 30;  							break;  						}  					}  					break;  				}    				case '1':  				case '2':  				case '3':  				case '4':  				case '5':  				case '6':  				case '7':  				case '8':  				case '9':  				{  					alt17 = 30;  					break;  				}    				default:  				{  					NoViableAltException nvae = new NoViableAltException(string.Empty' 17' 0' input);  					throw nvae;  				}  			}
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA(1))  			{  				case '+':  				{  					alt17 = 1;  					break;  				}    				case '&':  				{  					int LA17_2 = input.LA(2);  					if ((LA17_2 == '&'))  					{  						alt17 = 9;  					}  					else  					{  						alt17 = 2;  					}  					break;  				}    				case '~':  				{  					alt17 = 3;  					break;  				}    				case '|':  				{  					int LA17_4 = input.LA(2);  					if ((LA17_4 == '|'))  					{  						alt17 = 11;  					}  					else  					{  						alt17 = 4;  					}  					break;  				}    				case '<':  				{  					switch (input.LA(2))  					{  						case '<':  						{  							alt17 = 5;  							break;  						}    						case '=':  						{  							alt17 = 18;  							break;  						}    						default:  						{  							alt17 = 17;  							break;  						}  					}  					break;  				}    				case '>':  				{  					switch (input.LA(2))  					{  						case '>':  						{  							int LA17_31 = input.LA(3);  							if ((LA17_31 == '>'))  							{  								alt17 = 7;  							}  							else  							{  								alt17 = 6;  							}  							break;  						}    						case '=':  						{  							alt17 = 16;  							break;  						}    						default:  						{  							alt17 = 15;  							break;  						}  					}  					break;  				}    				case '^':  				{  					alt17 = 8;  					break;  				}    				case '!':  				{  					int LA17_8 = input.LA(2);  					if ((LA17_8 == '='))  					{  						alt17 = 19;  					}  					else  					{  						alt17 = 10;  					}  					break;  				}    				case ':':  				{  					alt17 = 12;  					break;  				}    				case ''':  				{  					alt17 = 13;  					break;  				}    				case '=':  				{  					alt17 = 14;  					break;  				}    				case '?':  				{  					alt17 = 20;  					break;  				}    				case '/':  				{  					alt17 = 21;  					break;  				}    				case '.':  				{  					int LA17_14 = input.LA(2);  					if (((LA17_14 >= '0' && LA17_14 <= '9')))  					{  						alt17 = 30;  					}  					else  					{  						alt17 = 22;  					}  					break;  				}    				case '(':  				{  					alt17 = 23;  					break;  				}    				case '%':  				{  					alt17 = 24;  					break;  				}    				case '*':  				{  					alt17 = 25;  					break;  				}    				case ')':  				{  					alt17 = 26;  					break;  				}    				case '-':  				{  					alt17 = 27;  					break;  				}    				case 'A':  				case 'B':  				case 'C':  				case 'D':  				case 'E':  				case 'F':  				case 'G':  				case 'H':  				case 'I':  				case 'J':  				case 'K':  				case 'L':  				case 'M':  				case 'N':  				case 'O':  				case 'P':  				case 'Q':  				case 'R':  				case 'S':  				case 'T':  				case 'U':  				case 'V':  				case 'W':  				case 'X':  				case 'Y':  				case 'Z':  				case '_':  				case 'a':  				case 'b':  				case 'c':  				case 'd':  				case 'e':  				case 'f':  				case 'g':  				case 'h':  				case 'i':  				case 'j':  				case 'k':  				case 'l':  				case 'm':  				case 'n':  				case 'o':  				case 'p':  				case 'q':  				case 'r':  				case 's':  				case 't':  				case 'u':  				case 'v':  				case 'w':  				case 'x':  				case 'y':  				case 'z':  				{  					alt17 = 28;  					break;  				}    				case '\t':  				case '\n':  				case '\r':  				case ' ':  				{  					alt17 = 29;  					break;  				}    				case '0':  				{  					switch (input.LA(2))  					{  						case 'X':  						case 'x':  						{  							alt17 = 32;  							break;  						}    						case '0':  						case '1':  						case '2':  						case '3':  						case '4':  						case '5':  						case '6':  						case '7':  						{  							alt17 = 31;  							break;  						}    						default:  						{  							alt17 = 30;  							break;  						}  					}  					break;  				}    				case '1':  				case '2':  				case '3':  				case '4':  				case '5':  				case '6':  				case '7':  				case '8':  				case '9':  				{  					alt17 = 30;  					break;  				}    				default:  				{  					NoViableAltException nvae = new NoViableAltException(string.Empty' 17' 0' input);  					throw nvae;  				}  			}
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (alt17)  			{  				case 1:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD  					MAT_ADD();  					break;  				}    				case 2:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND  					MAT_BIT_AND();  					break;  				}    				case 3:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT  					MAT_BIT_NOT();  					break;  				}    				case 4:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR  					MAT_BIT_OR();  					break;  				}    				case 5:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL  					MAT_BIT_SHL();  					break;  				}    				case 6:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR  					MAT_BIT_SHR();  					break;  				}    				case 7:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU  					MAT_BIT_SHU();  					break;  				}    				case 8:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR  					MAT_BIT_XOR();  					break;  				}    				case 9:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND  					MAT_BOOL_AND();  					break;  				}    				case 10:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT  					MAT_BOOL_NOT();  					break;  				}    				case 11:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR  					MAT_BOOL_OR();  					break;  				}    				case 12:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON  					MAT_COLON();  					break;  				}    				case 13:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA  					MAT_COMMA();  					break;  				}    				case 14:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ  					MAT_COMP_EQ();  					break;  				}    				case 15:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT  					MAT_COMP_GT();  					break;  				}    				case 16:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE  					MAT_COMP_GTE();  					break;  				}    				case 17:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT  					MAT_COMP_LT();  					break;  				}    				case 18:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE  					MAT_COMP_LTE();  					break;  				}    				case 19:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ  					MAT_COMP_NEQ();  					break;  				}    				case 20:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE  					MAT_COND_QUE();  					break;  				}    				case 21:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE  					MAT_DIVIDE();  					break;  				}    				case 22:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT  					MAT_DOT();  					break;  				}    				case 23:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN  					MAT_LPAREN();  					break;  				}    				case 24:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO  					MAT_MODULO();  					break;  				}    				case 25:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY  					MAT_MULTIPLY();  					break;  				}    				case 26:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN  					MAT_RPAREN();  					break;  				}    				case 27:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT  					MAT_SUBTRACT();  					break;  				}    				case 28:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: NAMESPACE_ID  					MNAMESPACE_ID();  					break;  				}    				case 29:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:311: WS  					MWS();  					break;  				}    				case 30:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:314: DECIMAL  					MDECIMAL();  					break;  				}    				case 31:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:322: OCTAL  					MOCTAL();  					break;  				}    				case 32:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:328: HEX  					MHEX();  					break;  				}  			}
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (alt17)  			{  				case 1:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD  					MAT_ADD();  					break;  				}    				case 2:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND  					MAT_BIT_AND();  					break;  				}    				case 3:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT  					MAT_BIT_NOT();  					break;  				}    				case 4:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR  					MAT_BIT_OR();  					break;  				}    				case 5:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL  					MAT_BIT_SHL();  					break;  				}    				case 6:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR  					MAT_BIT_SHR();  					break;  				}    				case 7:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU  					MAT_BIT_SHU();  					break;  				}    				case 8:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR  					MAT_BIT_XOR();  					break;  				}    				case 9:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND  					MAT_BOOL_AND();  					break;  				}    				case 10:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT  					MAT_BOOL_NOT();  					break;  				}    				case 11:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR  					MAT_BOOL_OR();  					break;  				}    				case 12:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON  					MAT_COLON();  					break;  				}    				case 13:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA  					MAT_COMMA();  					break;  				}    				case 14:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ  					MAT_COMP_EQ();  					break;  				}    				case 15:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT  					MAT_COMP_GT();  					break;  				}    				case 16:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE  					MAT_COMP_GTE();  					break;  				}    				case 17:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT  					MAT_COMP_LT();  					break;  				}    				case 18:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE  					MAT_COMP_LTE();  					break;  				}    				case 19:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ  					MAT_COMP_NEQ();  					break;  				}    				case 20:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE  					MAT_COND_QUE();  					break;  				}    				case 21:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE  					MAT_DIVIDE();  					break;  				}    				case 22:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT  					MAT_DOT();  					break;  				}    				case 23:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN  					MAT_LPAREN();  					break;  				}    				case 24:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO  					MAT_MODULO();  					break;  				}    				case 25:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY  					MAT_MULTIPLY();  					break;  				}    				case 26:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN  					MAT_RPAREN();  					break;  				}    				case 27:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT  					MAT_SUBTRACT();  					break;  				}    				case 28:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: NAMESPACE_ID  					MNAMESPACE_ID();  					break;  				}    				case 29:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:311: WS  					MWS();  					break;  				}    				case 30:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:314: DECIMAL  					MDECIMAL();  					break;  				}    				case 31:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:322: OCTAL  					MOCTAL();  					break;  				}    				case 32:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:328: HEX  					MHEX();  					break;  				}  			}
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (alt17)  			{  				case 1:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD  					MAT_ADD();  					break;  				}    				case 2:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND  					MAT_BIT_AND();  					break;  				}    				case 3:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT  					MAT_BIT_NOT();  					break;  				}    				case 4:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR  					MAT_BIT_OR();  					break;  				}    				case 5:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL  					MAT_BIT_SHL();  					break;  				}    				case 6:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR  					MAT_BIT_SHR();  					break;  				}    				case 7:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU  					MAT_BIT_SHU();  					break;  				}    				case 8:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR  					MAT_BIT_XOR();  					break;  				}    				case 9:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND  					MAT_BOOL_AND();  					break;  				}    				case 10:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT  					MAT_BOOL_NOT();  					break;  				}    				case 11:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR  					MAT_BOOL_OR();  					break;  				}    				case 12:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON  					MAT_COLON();  					break;  				}    				case 13:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA  					MAT_COMMA();  					break;  				}    				case 14:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ  					MAT_COMP_EQ();  					break;  				}    				case 15:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT  					MAT_COMP_GT();  					break;  				}    				case 16:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE  					MAT_COMP_GTE();  					break;  				}    				case 17:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT  					MAT_COMP_LT();  					break;  				}    				case 18:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE  					MAT_COMP_LTE();  					break;  				}    				case 19:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ  					MAT_COMP_NEQ();  					break;  				}    				case 20:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE  					MAT_COND_QUE();  					break;  				}    				case 21:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE  					MAT_DIVIDE();  					break;  				}    				case 22:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT  					MAT_DOT();  					break;  				}    				case 23:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN  					MAT_LPAREN();  					break;  				}    				case 24:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO  					MAT_MODULO();  					break;  				}    				case 25:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY  					MAT_MULTIPLY();  					break;  				}    				case 26:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN  					MAT_RPAREN();  					break;  				}    				case 27:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT  					MAT_SUBTRACT();  					break;  				}    				case 28:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: NAMESPACE_ID  					MNAMESPACE_ID();  					break;  				}    				case 29:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:311: WS  					MWS();  					break;  				}    				case 30:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:314: DECIMAL  					MDECIMAL();  					break;  				}    				case 31:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:322: OCTAL  					MOCTAL();  					break;  				}    				case 32:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:328: HEX  					MHEX();  					break;  				}  			}
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (alt17)  			{  				case 1:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD  					MAT_ADD();  					break;  				}    				case 2:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND  					MAT_BIT_AND();  					break;  				}    				case 3:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT  					MAT_BIT_NOT();  					break;  				}    				case 4:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR  					MAT_BIT_OR();  					break;  				}    				case 5:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL  					MAT_BIT_SHL();  					break;  				}    				case 6:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR  					MAT_BIT_SHR();  					break;  				}    				case 7:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU  					MAT_BIT_SHU();  					break;  				}    				case 8:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR  					MAT_BIT_XOR();  					break;  				}    				case 9:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND  					MAT_BOOL_AND();  					break;  				}    				case 10:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT  					MAT_BOOL_NOT();  					break;  				}    				case 11:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR  					MAT_BOOL_OR();  					break;  				}    				case 12:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON  					MAT_COLON();  					break;  				}    				case 13:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA  					MAT_COMMA();  					break;  				}    				case 14:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ  					MAT_COMP_EQ();  					break;  				}    				case 15:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT  					MAT_COMP_GT();  					break;  				}    				case 16:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE  					MAT_COMP_GTE();  					break;  				}    				case 17:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT  					MAT_COMP_LT();  					break;  				}    				case 18:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE  					MAT_COMP_LTE();  					break;  				}    				case 19:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ  					MAT_COMP_NEQ();  					break;  				}    				case 20:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE  					MAT_COND_QUE();  					break;  				}    				case 21:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE  					MAT_DIVIDE();  					break;  				}    				case 22:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT  					MAT_DOT();  					break;  				}    				case 23:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN  					MAT_LPAREN();  					break;  				}    				case 24:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO  					MAT_MODULO();  					break;  				}    				case 25:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY  					MAT_MULTIPLY();  					break;  				}    				case 26:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN  					MAT_RPAREN();  					break;  				}    				case 27:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT  					MAT_SUBTRACT();  					break;  				}    				case 28:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: NAMESPACE_ID  					MNAMESPACE_ID();  					break;  				}    				case 29:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:311: WS  					MWS();  					break;  				}    				case 30:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:314: DECIMAL  					MDECIMAL();  					break;  				}    				case 31:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:322: OCTAL  					MOCTAL();  					break;  				}    				case 32:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:328: HEX  					MHEX();  					break;  				}  			}
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (alt17)  			{  				case 1:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD  					MAT_ADD();  					break;  				}    				case 2:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND  					MAT_BIT_AND();  					break;  				}    				case 3:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT  					MAT_BIT_NOT();  					break;  				}    				case 4:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR  					MAT_BIT_OR();  					break;  				}    				case 5:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL  					MAT_BIT_SHL();  					break;  				}    				case 6:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR  					MAT_BIT_SHR();  					break;  				}    				case 7:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU  					MAT_BIT_SHU();  					break;  				}    				case 8:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR  					MAT_BIT_XOR();  					break;  				}    				case 9:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND  					MAT_BOOL_AND();  					break;  				}    				case 10:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT  					MAT_BOOL_NOT();  					break;  				}    				case 11:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR  					MAT_BOOL_OR();  					break;  				}    				case 12:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON  					MAT_COLON();  					break;  				}    				case 13:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA  					MAT_COMMA();  					break;  				}    				case 14:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ  					MAT_COMP_EQ();  					break;  				}    				case 15:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT  					MAT_COMP_GT();  					break;  				}    				case 16:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE  					MAT_COMP_GTE();  					break;  				}    				case 17:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT  					MAT_COMP_LT();  					break;  				}    				case 18:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE  					MAT_COMP_LTE();  					break;  				}    				case 19:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ  					MAT_COMP_NEQ();  					break;  				}    				case 20:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE  					MAT_COND_QUE();  					break;  				}    				case 21:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE  					MAT_DIVIDE();  					break;  				}    				case 22:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT  					MAT_DOT();  					break;  				}    				case 23:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN  					MAT_LPAREN();  					break;  				}    				case 24:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO  					MAT_MODULO();  					break;  				}    				case 25:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY  					MAT_MULTIPLY();  					break;  				}    				case 26:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN  					MAT_RPAREN();  					break;  				}    				case 27:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT  					MAT_SUBTRACT();  					break;  				}    				case 28:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: NAMESPACE_ID  					MNAMESPACE_ID();  					break;  				}    				case 29:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:311: WS  					MWS();  					break;  				}    				case 30:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:314: DECIMAL  					MDECIMAL();  					break;  				}    				case 31:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:322: OCTAL  					MOCTAL();  					break;  				}    				case 32:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:328: HEX  					MHEX();  					break;  				}  			}
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (alt17)  			{  				case 1:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD  					MAT_ADD();  					break;  				}    				case 2:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND  					MAT_BIT_AND();  					break;  				}    				case 3:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT  					MAT_BIT_NOT();  					break;  				}    				case 4:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR  					MAT_BIT_OR();  					break;  				}    				case 5:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL  					MAT_BIT_SHL();  					break;  				}    				case 6:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR  					MAT_BIT_SHR();  					break;  				}    				case 7:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU  					MAT_BIT_SHU();  					break;  				}    				case 8:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR  					MAT_BIT_XOR();  					break;  				}    				case 9:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND  					MAT_BOOL_AND();  					break;  				}    				case 10:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT  					MAT_BOOL_NOT();  					break;  				}    				case 11:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR  					MAT_BOOL_OR();  					break;  				}    				case 12:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON  					MAT_COLON();  					break;  				}    				case 13:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA  					MAT_COMMA();  					break;  				}    				case 14:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ  					MAT_COMP_EQ();  					break;  				}    				case 15:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT  					MAT_COMP_GT();  					break;  				}    				case 16:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE  					MAT_COMP_GTE();  					break;  				}    				case 17:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT  					MAT_COMP_LT();  					break;  				}    				case 18:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE  					MAT_COMP_LTE();  					break;  				}    				case 19:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ  					MAT_COMP_NEQ();  					break;  				}    				case 20:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE  					MAT_COND_QUE();  					break;  				}    				case 21:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE  					MAT_DIVIDE();  					break;  				}    				case 22:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT  					MAT_DOT();  					break;  				}    				case 23:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN  					MAT_LPAREN();  					break;  				}    				case 24:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO  					MAT_MODULO();  					break;  				}    				case 25:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY  					MAT_MULTIPLY();  					break;  				}    				case 26:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN  					MAT_RPAREN();  					break;  				}    				case 27:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT  					MAT_SUBTRACT();  					break;  				}    				case 28:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: NAMESPACE_ID  					MNAMESPACE_ID();  					break;  				}    				case 29:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:311: WS  					MWS();  					break;  				}    				case 30:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:314: DECIMAL  					MDECIMAL();  					break;  				}    				case 31:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:322: OCTAL  					MOCTAL();  					break;  				}    				case 32:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:328: HEX  					MHEX();  					break;  				}  			}
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (alt17)  			{  				case 1:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD  					MAT_ADD();  					break;  				}    				case 2:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND  					MAT_BIT_AND();  					break;  				}    				case 3:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT  					MAT_BIT_NOT();  					break;  				}    				case 4:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR  					MAT_BIT_OR();  					break;  				}    				case 5:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL  					MAT_BIT_SHL();  					break;  				}    				case 6:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR  					MAT_BIT_SHR();  					break;  				}    				case 7:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU  					MAT_BIT_SHU();  					break;  				}    				case 8:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR  					MAT_BIT_XOR();  					break;  				}    				case 9:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND  					MAT_BOOL_AND();  					break;  				}    				case 10:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT  					MAT_BOOL_NOT();  					break;  				}    				case 11:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR  					MAT_BOOL_OR();  					break;  				}    				case 12:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON  					MAT_COLON();  					break;  				}    				case 13:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA  					MAT_COMMA();  					break;  				}    				case 14:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ  					MAT_COMP_EQ();  					break;  				}    				case 15:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT  					MAT_COMP_GT();  					break;  				}    				case 16:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE  					MAT_COMP_GTE();  					break;  				}    				case 17:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT  					MAT_COMP_LT();  					break;  				}    				case 18:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE  					MAT_COMP_LTE();  					break;  				}    				case 19:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ  					MAT_COMP_NEQ();  					break;  				}    				case 20:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE  					MAT_COND_QUE();  					break;  				}    				case 21:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE  					MAT_DIVIDE();  					break;  				}    				case 22:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT  					MAT_DOT();  					break;  				}    				case 23:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN  					MAT_LPAREN();  					break;  				}    				case 24:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO  					MAT_MODULO();  					break;  				}    				case 25:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY  					MAT_MULTIPLY();  					break;  				}    				case 26:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN  					MAT_RPAREN();  					break;  				}    				case 27:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT  					MAT_SUBTRACT();  					break;  				}    				case 28:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: NAMESPACE_ID  					MNAMESPACE_ID();  					break;  				}    				case 29:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:311: WS  					MWS();  					break;  				}    				case 30:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:314: DECIMAL  					MDECIMAL();  					break;  				}    				case 31:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:322: OCTAL  					MOCTAL();  					break;  				}    				case 32:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:328: HEX  					MHEX();  					break;  				}  			}
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (alt17)  			{  				case 1:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD  					MAT_ADD();  					break;  				}    				case 2:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND  					MAT_BIT_AND();  					break;  				}    				case 3:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT  					MAT_BIT_NOT();  					break;  				}    				case 4:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR  					MAT_BIT_OR();  					break;  				}    				case 5:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL  					MAT_BIT_SHL();  					break;  				}    				case 6:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR  					MAT_BIT_SHR();  					break;  				}    				case 7:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU  					MAT_BIT_SHU();  					break;  				}    				case 8:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR  					MAT_BIT_XOR();  					break;  				}    				case 9:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND  					MAT_BOOL_AND();  					break;  				}    				case 10:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT  					MAT_BOOL_NOT();  					break;  				}    				case 11:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR  					MAT_BOOL_OR();  					break;  				}    				case 12:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON  					MAT_COLON();  					break;  				}    				case 13:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA  					MAT_COMMA();  					break;  				}    				case 14:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ  					MAT_COMP_EQ();  					break;  				}    				case 15:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT  					MAT_COMP_GT();  					break;  				}    				case 16:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE  					MAT_COMP_GTE();  					break;  				}    				case 17:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT  					MAT_COMP_LT();  					break;  				}    				case 18:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE  					MAT_COMP_LTE();  					break;  				}    				case 19:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ  					MAT_COMP_NEQ();  					break;  				}    				case 20:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE  					MAT_COND_QUE();  					break;  				}    				case 21:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE  					MAT_DIVIDE();  					break;  				}    				case 22:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT  					MAT_DOT();  					break;  				}    				case 23:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN  					MAT_LPAREN();  					break;  				}    				case 24:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO  					MAT_MODULO();  					break;  				}    				case 25:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY  					MAT_MULTIPLY();  					break;  				}    				case 26:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN  					MAT_RPAREN();  					break;  				}    				case 27:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT  					MAT_SUBTRACT();  					break;  				}    				case 28:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: NAMESPACE_ID  					MNAMESPACE_ID();  					break;  				}    				case 29:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:311: WS  					MWS();  					break;  				}    				case 30:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:314: DECIMAL  					MDECIMAL();  					break;  				}    				case 31:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:322: OCTAL  					MOCTAL();  					break;  				}    				case 32:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:328: HEX  					MHEX();  					break;  				}  			}
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (alt17)  			{  				case 1:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD  					MAT_ADD();  					break;  				}    				case 2:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND  					MAT_BIT_AND();  					break;  				}    				case 3:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT  					MAT_BIT_NOT();  					break;  				}    				case 4:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR  					MAT_BIT_OR();  					break;  				}    				case 5:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL  					MAT_BIT_SHL();  					break;  				}    				case 6:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR  					MAT_BIT_SHR();  					break;  				}    				case 7:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU  					MAT_BIT_SHU();  					break;  				}    				case 8:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR  					MAT_BIT_XOR();  					break;  				}    				case 9:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND  					MAT_BOOL_AND();  					break;  				}    				case 10:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT  					MAT_BOOL_NOT();  					break;  				}    				case 11:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR  					MAT_BOOL_OR();  					break;  				}    				case 12:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON  					MAT_COLON();  					break;  				}    				case 13:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA  					MAT_COMMA();  					break;  				}    				case 14:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ  					MAT_COMP_EQ();  					break;  				}    				case 15:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT  					MAT_COMP_GT();  					break;  				}    				case 16:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE  					MAT_COMP_GTE();  					break;  				}    				case 17:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT  					MAT_COMP_LT();  					break;  				}    				case 18:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE  					MAT_COMP_LTE();  					break;  				}    				case 19:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ  					MAT_COMP_NEQ();  					break;  				}    				case 20:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE  					MAT_COND_QUE();  					break;  				}    				case 21:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE  					MAT_DIVIDE();  					break;  				}    				case 22:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT  					MAT_DOT();  					break;  				}    				case 23:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN  					MAT_LPAREN();  					break;  				}    				case 24:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO  					MAT_MODULO();  					break;  				}    				case 25:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY  					MAT_MULTIPLY();  					break;  				}    				case 26:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN  					MAT_RPAREN();  					break;  				}    				case 27:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT  					MAT_SUBTRACT();  					break;  				}    				case 28:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: NAMESPACE_ID  					MNAMESPACE_ID();  					break;  				}    				case 29:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:311: WS  					MWS();  					break;  				}    				case 30:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:314: DECIMAL  					MDECIMAL();  					break;  				}    				case 31:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:322: OCTAL  					MOCTAL();  					break;  				}    				case 32:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:328: HEX  					MHEX();  					break;  				}  			}
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (alt17)  			{  				case 1:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD  					MAT_ADD();  					break;  				}    				case 2:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND  					MAT_BIT_AND();  					break;  				}    				case 3:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT  					MAT_BIT_NOT();  					break;  				}    				case 4:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR  					MAT_BIT_OR();  					break;  				}    				case 5:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL  					MAT_BIT_SHL();  					break;  				}    				case 6:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR  					MAT_BIT_SHR();  					break;  				}    				case 7:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU  					MAT_BIT_SHU();  					break;  				}    				case 8:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR  					MAT_BIT_XOR();  					break;  				}    				case 9:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND  					MAT_BOOL_AND();  					break;  				}    				case 10:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT  					MAT_BOOL_NOT();  					break;  				}    				case 11:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR  					MAT_BOOL_OR();  					break;  				}    				case 12:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON  					MAT_COLON();  					break;  				}    				case 13:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA  					MAT_COMMA();  					break;  				}    				case 14:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ  					MAT_COMP_EQ();  					break;  				}    				case 15:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT  					MAT_COMP_GT();  					break;  				}    				case 16:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE  					MAT_COMP_GTE();  					break;  				}    				case 17:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT  					MAT_COMP_LT();  					break;  				}    				case 18:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE  					MAT_COMP_LTE();  					break;  				}    				case 19:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ  					MAT_COMP_NEQ();  					break;  				}    				case 20:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE  					MAT_COND_QUE();  					break;  				}    				case 21:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE  					MAT_DIVIDE();  					break;  				}    				case 22:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT  					MAT_DOT();  					break;  				}    				case 23:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN  					MAT_LPAREN();  					break;  				}    				case 24:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO  					MAT_MODULO();  					break;  				}    				case 25:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY  					MAT_MULTIPLY();  					break;  				}    				case 26:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN  					MAT_RPAREN();  					break;  				}    				case 27:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT  					MAT_SUBTRACT();  					break;  				}    				case 28:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: NAMESPACE_ID  					MNAMESPACE_ID();  					break;  				}    				case 29:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:311: WS  					MWS();  					break;  				}    				case 30:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:314: DECIMAL  					MDECIMAL();  					break;  				}    				case 31:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:322: OCTAL  					MOCTAL();  					break;  				}    				case 32:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:328: HEX  					MHEX();  					break;  				}  			}
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (alt17)  			{  				case 1:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD  					MAT_ADD();  					break;  				}    				case 2:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND  					MAT_BIT_AND();  					break;  				}    				case 3:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT  					MAT_BIT_NOT();  					break;  				}    				case 4:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR  					MAT_BIT_OR();  					break;  				}    				case 5:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL  					MAT_BIT_SHL();  					break;  				}    				case 6:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR  					MAT_BIT_SHR();  					break;  				}    				case 7:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU  					MAT_BIT_SHU();  					break;  				}    				case 8:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR  					MAT_BIT_XOR();  					break;  				}    				case 9:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND  					MAT_BOOL_AND();  					break;  				}    				case 10:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT  					MAT_BOOL_NOT();  					break;  				}    				case 11:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR  					MAT_BOOL_OR();  					break;  				}    				case 12:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON  					MAT_COLON();  					break;  				}    				case 13:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA  					MAT_COMMA();  					break;  				}    				case 14:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ  					MAT_COMP_EQ();  					break;  				}    				case 15:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT  					MAT_COMP_GT();  					break;  				}    				case 16:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE  					MAT_COMP_GTE();  					break;  				}    				case 17:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT  					MAT_COMP_LT();  					break;  				}    				case 18:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE  					MAT_COMP_LTE();  					break;  				}    				case 19:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ  					MAT_COMP_NEQ();  					break;  				}    				case 20:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE  					MAT_COND_QUE();  					break;  				}    				case 21:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE  					MAT_DIVIDE();  					break;  				}    				case 22:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT  					MAT_DOT();  					break;  				}    				case 23:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN  					MAT_LPAREN();  					break;  				}    				case 24:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO  					MAT_MODULO();  					break;  				}    				case 25:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY  					MAT_MULTIPLY();  					break;  				}    				case 26:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN  					MAT_RPAREN();  					break;  				}    				case 27:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT  					MAT_SUBTRACT();  					break;  				}    				case 28:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: NAMESPACE_ID  					MNAMESPACE_ID();  					break;  				}    				case 29:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:311: WS  					MWS();  					break;  				}    				case 30:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:314: DECIMAL  					MDECIMAL();  					break;  				}    				case 31:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:322: OCTAL  					MOCTAL();  					break;  				}    				case 32:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:328: HEX  					MHEX();  					break;  				}  			}
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (alt17)  			{  				case 1:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD  					MAT_ADD();  					break;  				}    				case 2:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND  					MAT_BIT_AND();  					break;  				}    				case 3:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT  					MAT_BIT_NOT();  					break;  				}    				case 4:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR  					MAT_BIT_OR();  					break;  				}    				case 5:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL  					MAT_BIT_SHL();  					break;  				}    				case 6:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR  					MAT_BIT_SHR();  					break;  				}    				case 7:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU  					MAT_BIT_SHU();  					break;  				}    				case 8:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR  					MAT_BIT_XOR();  					break;  				}    				case 9:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND  					MAT_BOOL_AND();  					break;  				}    				case 10:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT  					MAT_BOOL_NOT();  					break;  				}    				case 11:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR  					MAT_BOOL_OR();  					break;  				}    				case 12:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON  					MAT_COLON();  					break;  				}    				case 13:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA  					MAT_COMMA();  					break;  				}    				case 14:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ  					MAT_COMP_EQ();  					break;  				}    				case 15:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT  					MAT_COMP_GT();  					break;  				}    				case 16:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE  					MAT_COMP_GTE();  					break;  				}    				case 17:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT  					MAT_COMP_LT();  					break;  				}    				case 18:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE  					MAT_COMP_LTE();  					break;  				}    				case 19:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ  					MAT_COMP_NEQ();  					break;  				}    				case 20:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE  					MAT_COND_QUE();  					break;  				}    				case 21:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE  					MAT_DIVIDE();  					break;  				}    				case 22:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT  					MAT_DOT();  					break;  				}    				case 23:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN  					MAT_LPAREN();  					break;  				}    				case 24:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO  					MAT_MODULO();  					break;  				}    				case 25:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY  					MAT_MULTIPLY();  					break;  				}    				case 26:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN  					MAT_RPAREN();  					break;  				}    				case 27:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT  					MAT_SUBTRACT();  					break;  				}    				case 28:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: NAMESPACE_ID  					MNAMESPACE_ID();  					break;  				}    				case 29:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:311: WS  					MWS();  					break;  				}    				case 30:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:314: DECIMAL  					MDECIMAL();  					break;  				}    				case 31:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:322: OCTAL  					MOCTAL();  					break;  				}    				case 32:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:328: HEX  					MHEX();  					break;  				}  			}
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (alt17)  			{  				case 1:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD  					MAT_ADD();  					break;  				}    				case 2:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND  					MAT_BIT_AND();  					break;  				}    				case 3:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT  					MAT_BIT_NOT();  					break;  				}    				case 4:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR  					MAT_BIT_OR();  					break;  				}    				case 5:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL  					MAT_BIT_SHL();  					break;  				}    				case 6:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR  					MAT_BIT_SHR();  					break;  				}    				case 7:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU  					MAT_BIT_SHU();  					break;  				}    				case 8:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR  					MAT_BIT_XOR();  					break;  				}    				case 9:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND  					MAT_BOOL_AND();  					break;  				}    				case 10:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT  					MAT_BOOL_NOT();  					break;  				}    				case 11:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR  					MAT_BOOL_OR();  					break;  				}    				case 12:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON  					MAT_COLON();  					break;  				}    				case 13:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA  					MAT_COMMA();  					break;  				}    				case 14:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ  					MAT_COMP_EQ();  					break;  				}    				case 15:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT  					MAT_COMP_GT();  					break;  				}    				case 16:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE  					MAT_COMP_GTE();  					break;  				}    				case 17:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT  					MAT_COMP_LT();  					break;  				}    				case 18:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE  					MAT_COMP_LTE();  					break;  				}    				case 19:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ  					MAT_COMP_NEQ();  					break;  				}    				case 20:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE  					MAT_COND_QUE();  					break;  				}    				case 21:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE  					MAT_DIVIDE();  					break;  				}    				case 22:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT  					MAT_DOT();  					break;  				}    				case 23:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN  					MAT_LPAREN();  					break;  				}    				case 24:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO  					MAT_MODULO();  					break;  				}    				case 25:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY  					MAT_MULTIPLY();  					break;  				}    				case 26:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN  					MAT_RPAREN();  					break;  				}    				case 27:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT  					MAT_SUBTRACT();  					break;  				}    				case 28:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: NAMESPACE_ID  					MNAMESPACE_ID();  					break;  				}    				case 29:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:311: WS  					MWS();  					break;  				}    				case 30:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:314: DECIMAL  					MDECIMAL();  					break;  				}    				case 31:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:322: OCTAL  					MOCTAL();  					break;  				}    				case 32:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:328: HEX  					MHEX();  					break;  				}  			}
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (alt17)  			{  				case 1:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD  					MAT_ADD();  					break;  				}    				case 2:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND  					MAT_BIT_AND();  					break;  				}    				case 3:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT  					MAT_BIT_NOT();  					break;  				}    				case 4:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR  					MAT_BIT_OR();  					break;  				}    				case 5:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL  					MAT_BIT_SHL();  					break;  				}    				case 6:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR  					MAT_BIT_SHR();  					break;  				}    				case 7:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU  					MAT_BIT_SHU();  					break;  				}    				case 8:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR  					MAT_BIT_XOR();  					break;  				}    				case 9:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND  					MAT_BOOL_AND();  					break;  				}    				case 10:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT  					MAT_BOOL_NOT();  					break;  				}    				case 11:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR  					MAT_BOOL_OR();  					break;  				}    				case 12:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON  					MAT_COLON();  					break;  				}    				case 13:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA  					MAT_COMMA();  					break;  				}    				case 14:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ  					MAT_COMP_EQ();  					break;  				}    				case 15:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT  					MAT_COMP_GT();  					break;  				}    				case 16:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE  					MAT_COMP_GTE();  					break;  				}    				case 17:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT  					MAT_COMP_LT();  					break;  				}    				case 18:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE  					MAT_COMP_LTE();  					break;  				}    				case 19:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ  					MAT_COMP_NEQ();  					break;  				}    				case 20:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE  					MAT_COND_QUE();  					break;  				}    				case 21:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE  					MAT_DIVIDE();  					break;  				}    				case 22:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT  					MAT_DOT();  					break;  				}    				case 23:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN  					MAT_LPAREN();  					break;  				}    				case 24:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO  					MAT_MODULO();  					break;  				}    				case 25:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY  					MAT_MULTIPLY();  					break;  				}    				case 26:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN  					MAT_RPAREN();  					break;  				}    				case 27:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT  					MAT_SUBTRACT();  					break;  				}    				case 28:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: NAMESPACE_ID  					MNAMESPACE_ID();  					break;  				}    				case 29:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:311: WS  					MWS();  					break;  				}    				case 30:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:314: DECIMAL  					MDECIMAL();  					break;  				}    				case 31:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:322: OCTAL  					MOCTAL();  					break;  				}    				case 32:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:328: HEX  					MHEX();  					break;  				}  			}
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (alt17)  			{  				case 1:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD  					MAT_ADD();  					break;  				}    				case 2:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND  					MAT_BIT_AND();  					break;  				}    				case 3:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT  					MAT_BIT_NOT();  					break;  				}    				case 4:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR  					MAT_BIT_OR();  					break;  				}    				case 5:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL  					MAT_BIT_SHL();  					break;  				}    				case 6:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR  					MAT_BIT_SHR();  					break;  				}    				case 7:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU  					MAT_BIT_SHU();  					break;  				}    				case 8:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR  					MAT_BIT_XOR();  					break;  				}    				case 9:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND  					MAT_BOOL_AND();  					break;  				}    				case 10:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT  					MAT_BOOL_NOT();  					break;  				}    				case 11:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR  					MAT_BOOL_OR();  					break;  				}    				case 12:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON  					MAT_COLON();  					break;  				}    				case 13:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA  					MAT_COMMA();  					break;  				}    				case 14:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ  					MAT_COMP_EQ();  					break;  				}    				case 15:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT  					MAT_COMP_GT();  					break;  				}    				case 16:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE  					MAT_COMP_GTE();  					break;  				}    				case 17:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT  					MAT_COMP_LT();  					break;  				}    				case 18:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE  					MAT_COMP_LTE();  					break;  				}    				case 19:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ  					MAT_COMP_NEQ();  					break;  				}    				case 20:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE  					MAT_COND_QUE();  					break;  				}    				case 21:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE  					MAT_DIVIDE();  					break;  				}    				case 22:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT  					MAT_DOT();  					break;  				}    				case 23:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN  					MAT_LPAREN();  					break;  				}    				case 24:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO  					MAT_MODULO();  					break;  				}    				case 25:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY  					MAT_MULTIPLY();  					break;  				}    				case 26:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN  					MAT_RPAREN();  					break;  				}    				case 27:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT  					MAT_SUBTRACT();  					break;  				}    				case 28:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: NAMESPACE_ID  					MNAMESPACE_ID();  					break;  				}    				case 29:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:311: WS  					MWS();  					break;  				}    				case 30:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:314: DECIMAL  					MDECIMAL();  					break;  				}    				case 31:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:322: OCTAL  					MOCTAL();  					break;  				}    				case 32:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:328: HEX  					MHEX();  					break;  				}  			}
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (alt17)  			{  				case 1:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD  					MAT_ADD();  					break;  				}    				case 2:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND  					MAT_BIT_AND();  					break;  				}    				case 3:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT  					MAT_BIT_NOT();  					break;  				}    				case 4:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR  					MAT_BIT_OR();  					break;  				}    				case 5:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL  					MAT_BIT_SHL();  					break;  				}    				case 6:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR  					MAT_BIT_SHR();  					break;  				}    				case 7:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU  					MAT_BIT_SHU();  					break;  				}    				case 8:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR  					MAT_BIT_XOR();  					break;  				}    				case 9:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND  					MAT_BOOL_AND();  					break;  				}    				case 10:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT  					MAT_BOOL_NOT();  					break;  				}    				case 11:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR  					MAT_BOOL_OR();  					break;  				}    				case 12:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON  					MAT_COLON();  					break;  				}    				case 13:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA  					MAT_COMMA();  					break;  				}    				case 14:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ  					MAT_COMP_EQ();  					break;  				}    				case 15:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT  					MAT_COMP_GT();  					break;  				}    				case 16:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE  					MAT_COMP_GTE();  					break;  				}    				case 17:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT  					MAT_COMP_LT();  					break;  				}    				case 18:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE  					MAT_COMP_LTE();  					break;  				}    				case 19:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ  					MAT_COMP_NEQ();  					break;  				}    				case 20:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE  					MAT_COND_QUE();  					break;  				}    				case 21:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE  					MAT_DIVIDE();  					break;  				}    				case 22:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT  					MAT_DOT();  					break;  				}    				case 23:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN  					MAT_LPAREN();  					break;  				}    				case 24:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO  					MAT_MODULO();  					break;  				}    				case 25:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY  					MAT_MULTIPLY();  					break;  				}    				case 26:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN  					MAT_RPAREN();  					break;  				}    				case 27:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT  					MAT_SUBTRACT();  					break;  				}    				case 28:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: NAMESPACE_ID  					MNAMESPACE_ID();  					break;  				}    				case 29:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:311: WS  					MWS();  					break;  				}    				case 30:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:314: DECIMAL  					MDECIMAL();  					break;  				}    				case 31:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:322: OCTAL  					MOCTAL();  					break;  				}    				case 32:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:328: HEX  					MHEX();  					break;  				}  			}
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (alt17)  			{  				case 1:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD  					MAT_ADD();  					break;  				}    				case 2:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND  					MAT_BIT_AND();  					break;  				}    				case 3:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT  					MAT_BIT_NOT();  					break;  				}    				case 4:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR  					MAT_BIT_OR();  					break;  				}    				case 5:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL  					MAT_BIT_SHL();  					break;  				}    				case 6:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR  					MAT_BIT_SHR();  					break;  				}    				case 7:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU  					MAT_BIT_SHU();  					break;  				}    				case 8:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR  					MAT_BIT_XOR();  					break;  				}    				case 9:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND  					MAT_BOOL_AND();  					break;  				}    				case 10:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT  					MAT_BOOL_NOT();  					break;  				}    				case 11:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR  					MAT_BOOL_OR();  					break;  				}    				case 12:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON  					MAT_COLON();  					break;  				}    				case 13:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA  					MAT_COMMA();  					break;  				}    				case 14:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ  					MAT_COMP_EQ();  					break;  				}    				case 15:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT  					MAT_COMP_GT();  					break;  				}    				case 16:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE  					MAT_COMP_GTE();  					break;  				}    				case 17:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT  					MAT_COMP_LT();  					break;  				}    				case 18:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE  					MAT_COMP_LTE();  					break;  				}    				case 19:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ  					MAT_COMP_NEQ();  					break;  				}    				case 20:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE  					MAT_COND_QUE();  					break;  				}    				case 21:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE  					MAT_DIVIDE();  					break;  				}    				case 22:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT  					MAT_DOT();  					break;  				}    				case 23:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN  					MAT_LPAREN();  					break;  				}    				case 24:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO  					MAT_MODULO();  					break;  				}    				case 25:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY  					MAT_MULTIPLY();  					break;  				}    				case 26:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN  					MAT_RPAREN();  					break;  				}    				case 27:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT  					MAT_SUBTRACT();  					break;  				}    				case 28:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: NAMESPACE_ID  					MNAMESPACE_ID();  					break;  				}    				case 29:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:311: WS  					MWS();  					break;  				}    				case 30:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:314: DECIMAL  					MDECIMAL();  					break;  				}    				case 31:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:322: OCTAL  					MOCTAL();  					break;  				}    				case 32:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:328: HEX  					MHEX();  					break;  				}  			}
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (alt17)  			{  				case 1:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD  					MAT_ADD();  					break;  				}    				case 2:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND  					MAT_BIT_AND();  					break;  				}    				case 3:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT  					MAT_BIT_NOT();  					break;  				}    				case 4:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR  					MAT_BIT_OR();  					break;  				}    				case 5:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL  					MAT_BIT_SHL();  					break;  				}    				case 6:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR  					MAT_BIT_SHR();  					break;  				}    				case 7:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU  					MAT_BIT_SHU();  					break;  				}    				case 8:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR  					MAT_BIT_XOR();  					break;  				}    				case 9:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND  					MAT_BOOL_AND();  					break;  				}    				case 10:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT  					MAT_BOOL_NOT();  					break;  				}    				case 11:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR  					MAT_BOOL_OR();  					break;  				}    				case 12:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON  					MAT_COLON();  					break;  				}    				case 13:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA  					MAT_COMMA();  					break;  				}    				case 14:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ  					MAT_COMP_EQ();  					break;  				}    				case 15:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT  					MAT_COMP_GT();  					break;  				}    				case 16:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE  					MAT_COMP_GTE();  					break;  				}    				case 17:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT  					MAT_COMP_LT();  					break;  				}    				case 18:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE  					MAT_COMP_LTE();  					break;  				}    				case 19:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ  					MAT_COMP_NEQ();  					break;  				}    				case 20:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE  					MAT_COND_QUE();  					break;  				}    				case 21:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE  					MAT_DIVIDE();  					break;  				}    				case 22:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT  					MAT_DOT();  					break;  				}    				case 23:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN  					MAT_LPAREN();  					break;  				}    				case 24:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO  					MAT_MODULO();  					break;  				}    				case 25:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY  					MAT_MULTIPLY();  					break;  				}    				case 26:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN  					MAT_RPAREN();  					break;  				}    				case 27:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT  					MAT_SUBTRACT();  					break;  				}    				case 28:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: NAMESPACE_ID  					MNAMESPACE_ID();  					break;  				}    				case 29:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:311: WS  					MWS();  					break;  				}    				case 30:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:314: DECIMAL  					MDECIMAL();  					break;  				}    				case 31:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:322: OCTAL  					MOCTAL();  					break;  				}    				case 32:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:328: HEX  					MHEX();  					break;  				}  			}
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (alt17)  			{  				case 1:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD  					MAT_ADD();  					break;  				}    				case 2:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND  					MAT_BIT_AND();  					break;  				}    				case 3:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT  					MAT_BIT_NOT();  					break;  				}    				case 4:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR  					MAT_BIT_OR();  					break;  				}    				case 5:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL  					MAT_BIT_SHL();  					break;  				}    				case 6:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR  					MAT_BIT_SHR();  					break;  				}    				case 7:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU  					MAT_BIT_SHU();  					break;  				}    				case 8:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR  					MAT_BIT_XOR();  					break;  				}    				case 9:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND  					MAT_BOOL_AND();  					break;  				}    				case 10:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT  					MAT_BOOL_NOT();  					break;  				}    				case 11:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR  					MAT_BOOL_OR();  					break;  				}    				case 12:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON  					MAT_COLON();  					break;  				}    				case 13:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA  					MAT_COMMA();  					break;  				}    				case 14:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ  					MAT_COMP_EQ();  					break;  				}    				case 15:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT  					MAT_COMP_GT();  					break;  				}    				case 16:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE  					MAT_COMP_GTE();  					break;  				}    				case 17:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT  					MAT_COMP_LT();  					break;  				}    				case 18:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE  					MAT_COMP_LTE();  					break;  				}    				case 19:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ  					MAT_COMP_NEQ();  					break;  				}    				case 20:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE  					MAT_COND_QUE();  					break;  				}    				case 21:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE  					MAT_DIVIDE();  					break;  				}    				case 22:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT  					MAT_DOT();  					break;  				}    				case 23:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN  					MAT_LPAREN();  					break;  				}    				case 24:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO  					MAT_MODULO();  					break;  				}    				case 25:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY  					MAT_MULTIPLY();  					break;  				}    				case 26:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN  					MAT_RPAREN();  					break;  				}    				case 27:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT  					MAT_SUBTRACT();  					break;  				}    				case 28:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: NAMESPACE_ID  					MNAMESPACE_ID();  					break;  				}    				case 29:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:311: WS  					MWS();  					break;  				}    				case 30:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:314: DECIMAL  					MDECIMAL();  					break;  				}    				case 31:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:322: OCTAL  					MOCTAL();  					break;  				}    				case 32:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:328: HEX  					MHEX();  					break;  				}  			}
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (alt17)  			{  				case 1:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD  					MAT_ADD();  					break;  				}    				case 2:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND  					MAT_BIT_AND();  					break;  				}    				case 3:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT  					MAT_BIT_NOT();  					break;  				}    				case 4:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR  					MAT_BIT_OR();  					break;  				}    				case 5:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL  					MAT_BIT_SHL();  					break;  				}    				case 6:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR  					MAT_BIT_SHR();  					break;  				}    				case 7:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU  					MAT_BIT_SHU();  					break;  				}    				case 8:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR  					MAT_BIT_XOR();  					break;  				}    				case 9:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND  					MAT_BOOL_AND();  					break;  				}    				case 10:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT  					MAT_BOOL_NOT();  					break;  				}    				case 11:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR  					MAT_BOOL_OR();  					break;  				}    				case 12:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON  					MAT_COLON();  					break;  				}    				case 13:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA  					MAT_COMMA();  					break;  				}    				case 14:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ  					MAT_COMP_EQ();  					break;  				}    				case 15:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT  					MAT_COMP_GT();  					break;  				}    				case 16:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE  					MAT_COMP_GTE();  					break;  				}    				case 17:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT  					MAT_COMP_LT();  					break;  				}    				case 18:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE  					MAT_COMP_LTE();  					break;  				}    				case 19:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ  					MAT_COMP_NEQ();  					break;  				}    				case 20:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE  					MAT_COND_QUE();  					break;  				}    				case 21:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE  					MAT_DIVIDE();  					break;  				}    				case 22:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT  					MAT_DOT();  					break;  				}    				case 23:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN  					MAT_LPAREN();  					break;  				}    				case 24:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO  					MAT_MODULO();  					break;  				}    				case 25:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY  					MAT_MULTIPLY();  					break;  				}    				case 26:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN  					MAT_RPAREN();  					break;  				}    				case 27:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT  					MAT_SUBTRACT();  					break;  				}    				case 28:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: NAMESPACE_ID  					MNAMESPACE_ID();  					break;  				}    				case 29:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:311: WS  					MWS();  					break;  				}    				case 30:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:314: DECIMAL  					MDECIMAL();  					break;  				}    				case 31:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:322: OCTAL  					MOCTAL();  					break;  				}    				case 32:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:328: HEX  					MHEX();  					break;  				}  			}
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (alt17)  			{  				case 1:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD  					MAT_ADD();  					break;  				}    				case 2:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND  					MAT_BIT_AND();  					break;  				}    				case 3:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT  					MAT_BIT_NOT();  					break;  				}    				case 4:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR  					MAT_BIT_OR();  					break;  				}    				case 5:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL  					MAT_BIT_SHL();  					break;  				}    				case 6:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR  					MAT_BIT_SHR();  					break;  				}    				case 7:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU  					MAT_BIT_SHU();  					break;  				}    				case 8:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR  					MAT_BIT_XOR();  					break;  				}    				case 9:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND  					MAT_BOOL_AND();  					break;  				}    				case 10:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT  					MAT_BOOL_NOT();  					break;  				}    				case 11:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR  					MAT_BOOL_OR();  					break;  				}    				case 12:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON  					MAT_COLON();  					break;  				}    				case 13:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA  					MAT_COMMA();  					break;  				}    				case 14:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ  					MAT_COMP_EQ();  					break;  				}    				case 15:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT  					MAT_COMP_GT();  					break;  				}    				case 16:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE  					MAT_COMP_GTE();  					break;  				}    				case 17:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT  					MAT_COMP_LT();  					break;  				}    				case 18:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE  					MAT_COMP_LTE();  					break;  				}    				case 19:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ  					MAT_COMP_NEQ();  					break;  				}    				case 20:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE  					MAT_COND_QUE();  					break;  				}    				case 21:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE  					MAT_DIVIDE();  					break;  				}    				case 22:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT  					MAT_DOT();  					break;  				}    				case 23:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN  					MAT_LPAREN();  					break;  				}    				case 24:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO  					MAT_MODULO();  					break;  				}    				case 25:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY  					MAT_MULTIPLY();  					break;  				}    				case 26:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN  					MAT_RPAREN();  					break;  				}    				case 27:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT  					MAT_SUBTRACT();  					break;  				}    				case 28:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: NAMESPACE_ID  					MNAMESPACE_ID();  					break;  				}    				case 29:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:311: WS  					MWS();  					break;  				}    				case 30:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:314: DECIMAL  					MDECIMAL();  					break;  				}    				case 31:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:322: OCTAL  					MOCTAL();  					break;  				}    				case 32:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:328: HEX  					MHEX();  					break;  				}  			}
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (alt17)  			{  				case 1:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD  					MAT_ADD();  					break;  				}    				case 2:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND  					MAT_BIT_AND();  					break;  				}    				case 3:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT  					MAT_BIT_NOT();  					break;  				}    				case 4:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR  					MAT_BIT_OR();  					break;  				}    				case 5:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL  					MAT_BIT_SHL();  					break;  				}    				case 6:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR  					MAT_BIT_SHR();  					break;  				}    				case 7:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU  					MAT_BIT_SHU();  					break;  				}    				case 8:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR  					MAT_BIT_XOR();  					break;  				}    				case 9:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND  					MAT_BOOL_AND();  					break;  				}    				case 10:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT  					MAT_BOOL_NOT();  					break;  				}    				case 11:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR  					MAT_BOOL_OR();  					break;  				}    				case 12:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON  					MAT_COLON();  					break;  				}    				case 13:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA  					MAT_COMMA();  					break;  				}    				case 14:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ  					MAT_COMP_EQ();  					break;  				}    				case 15:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT  					MAT_COMP_GT();  					break;  				}    				case 16:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE  					MAT_COMP_GTE();  					break;  				}    				case 17:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT  					MAT_COMP_LT();  					break;  				}    				case 18:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE  					MAT_COMP_LTE();  					break;  				}    				case 19:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ  					MAT_COMP_NEQ();  					break;  				}    				case 20:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE  					MAT_COND_QUE();  					break;  				}    				case 21:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE  					MAT_DIVIDE();  					break;  				}    				case 22:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT  					MAT_DOT();  					break;  				}    				case 23:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN  					MAT_LPAREN();  					break;  				}    				case 24:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO  					MAT_MODULO();  					break;  				}    				case 25:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY  					MAT_MULTIPLY();  					break;  				}    				case 26:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN  					MAT_RPAREN();  					break;  				}    				case 27:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT  					MAT_SUBTRACT();  					break;  				}    				case 28:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: NAMESPACE_ID  					MNAMESPACE_ID();  					break;  				}    				case 29:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:311: WS  					MWS();  					break;  				}    				case 30:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:314: DECIMAL  					MDECIMAL();  					break;  				}    				case 31:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:322: OCTAL  					MOCTAL();  					break;  				}    				case 32:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:328: HEX  					MHEX();  					break;  				}  			}
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (alt17)  			{  				case 1:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD  					MAT_ADD();  					break;  				}    				case 2:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND  					MAT_BIT_AND();  					break;  				}    				case 3:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT  					MAT_BIT_NOT();  					break;  				}    				case 4:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR  					MAT_BIT_OR();  					break;  				}    				case 5:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL  					MAT_BIT_SHL();  					break;  				}    				case 6:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR  					MAT_BIT_SHR();  					break;  				}    				case 7:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU  					MAT_BIT_SHU();  					break;  				}    				case 8:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR  					MAT_BIT_XOR();  					break;  				}    				case 9:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND  					MAT_BOOL_AND();  					break;  				}    				case 10:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT  					MAT_BOOL_NOT();  					break;  				}    				case 11:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR  					MAT_BOOL_OR();  					break;  				}    				case 12:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON  					MAT_COLON();  					break;  				}    				case 13:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA  					MAT_COMMA();  					break;  				}    				case 14:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ  					MAT_COMP_EQ();  					break;  				}    				case 15:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT  					MAT_COMP_GT();  					break;  				}    				case 16:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE  					MAT_COMP_GTE();  					break;  				}    				case 17:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT  					MAT_COMP_LT();  					break;  				}    				case 18:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE  					MAT_COMP_LTE();  					break;  				}    				case 19:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ  					MAT_COMP_NEQ();  					break;  				}    				case 20:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE  					MAT_COND_QUE();  					break;  				}    				case 21:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE  					MAT_DIVIDE();  					break;  				}    				case 22:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT  					MAT_DOT();  					break;  				}    				case 23:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN  					MAT_LPAREN();  					break;  				}    				case 24:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO  					MAT_MODULO();  					break;  				}    				case 25:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY  					MAT_MULTIPLY();  					break;  				}    				case 26:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN  					MAT_RPAREN();  					break;  				}    				case 27:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT  					MAT_SUBTRACT();  					break;  				}    				case 28:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: NAMESPACE_ID  					MNAMESPACE_ID();  					break;  				}    				case 29:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:311: WS  					MWS();  					break;  				}    				case 30:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:314: DECIMAL  					MDECIMAL();  					break;  				}    				case 31:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:322: OCTAL  					MOCTAL();  					break;  				}    				case 32:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:328: HEX  					MHEX();  					break;  				}  			}
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (alt17)  			{  				case 1:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD  					MAT_ADD();  					break;  				}    				case 2:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND  					MAT_BIT_AND();  					break;  				}    				case 3:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT  					MAT_BIT_NOT();  					break;  				}    				case 4:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR  					MAT_BIT_OR();  					break;  				}    				case 5:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL  					MAT_BIT_SHL();  					break;  				}    				case 6:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR  					MAT_BIT_SHR();  					break;  				}    				case 7:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU  					MAT_BIT_SHU();  					break;  				}    				case 8:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR  					MAT_BIT_XOR();  					break;  				}    				case 9:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND  					MAT_BOOL_AND();  					break;  				}    				case 10:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT  					MAT_BOOL_NOT();  					break;  				}    				case 11:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR  					MAT_BOOL_OR();  					break;  				}    				case 12:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON  					MAT_COLON();  					break;  				}    				case 13:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA  					MAT_COMMA();  					break;  				}    				case 14:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ  					MAT_COMP_EQ();  					break;  				}    				case 15:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT  					MAT_COMP_GT();  					break;  				}    				case 16:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE  					MAT_COMP_GTE();  					break;  				}    				case 17:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT  					MAT_COMP_LT();  					break;  				}    				case 18:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE  					MAT_COMP_LTE();  					break;  				}    				case 19:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ  					MAT_COMP_NEQ();  					break;  				}    				case 20:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE  					MAT_COND_QUE();  					break;  				}    				case 21:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE  					MAT_DIVIDE();  					break;  				}    				case 22:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT  					MAT_DOT();  					break;  				}    				case 23:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN  					MAT_LPAREN();  					break;  				}    				case 24:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO  					MAT_MODULO();  					break;  				}    				case 25:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY  					MAT_MULTIPLY();  					break;  				}    				case 26:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN  					MAT_RPAREN();  					break;  				}    				case 27:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT  					MAT_SUBTRACT();  					break;  				}    				case 28:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: NAMESPACE_ID  					MNAMESPACE_ID();  					break;  				}    				case 29:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:311: WS  					MWS();  					break;  				}    				case 30:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:314: DECIMAL  					MDECIMAL();  					break;  				}    				case 31:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:322: OCTAL  					MOCTAL();  					break;  				}    				case 32:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:328: HEX  					MHEX();  					break;  				}  			}
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (alt17)  			{  				case 1:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD  					MAT_ADD();  					break;  				}    				case 2:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND  					MAT_BIT_AND();  					break;  				}    				case 3:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT  					MAT_BIT_NOT();  					break;  				}    				case 4:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR  					MAT_BIT_OR();  					break;  				}    				case 5:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL  					MAT_BIT_SHL();  					break;  				}    				case 6:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR  					MAT_BIT_SHR();  					break;  				}    				case 7:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU  					MAT_BIT_SHU();  					break;  				}    				case 8:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR  					MAT_BIT_XOR();  					break;  				}    				case 9:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND  					MAT_BOOL_AND();  					break;  				}    				case 10:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT  					MAT_BOOL_NOT();  					break;  				}    				case 11:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR  					MAT_BOOL_OR();  					break;  				}    				case 12:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON  					MAT_COLON();  					break;  				}    				case 13:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA  					MAT_COMMA();  					break;  				}    				case 14:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ  					MAT_COMP_EQ();  					break;  				}    				case 15:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT  					MAT_COMP_GT();  					break;  				}    				case 16:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE  					MAT_COMP_GTE();  					break;  				}    				case 17:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT  					MAT_COMP_LT();  					break;  				}    				case 18:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE  					MAT_COMP_LTE();  					break;  				}    				case 19:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ  					MAT_COMP_NEQ();  					break;  				}    				case 20:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE  					MAT_COND_QUE();  					break;  				}    				case 21:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE  					MAT_DIVIDE();  					break;  				}    				case 22:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT  					MAT_DOT();  					break;  				}    				case 23:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN  					MAT_LPAREN();  					break;  				}    				case 24:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO  					MAT_MODULO();  					break;  				}    				case 25:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY  					MAT_MULTIPLY();  					break;  				}    				case 26:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN  					MAT_RPAREN();  					break;  				}    				case 27:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT  					MAT_SUBTRACT();  					break;  				}    				case 28:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: NAMESPACE_ID  					MNAMESPACE_ID();  					break;  				}    				case 29:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:311: WS  					MWS();  					break;  				}    				case 30:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:314: DECIMAL  					MDECIMAL();  					break;  				}    				case 31:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:322: OCTAL  					MOCTAL();  					break;  				}    				case 32:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:328: HEX  					MHEX();  					break;  				}  			}
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (alt17)  			{  				case 1:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD  					MAT_ADD();  					break;  				}    				case 2:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND  					MAT_BIT_AND();  					break;  				}    				case 3:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT  					MAT_BIT_NOT();  					break;  				}    				case 4:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR  					MAT_BIT_OR();  					break;  				}    				case 5:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL  					MAT_BIT_SHL();  					break;  				}    				case 6:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR  					MAT_BIT_SHR();  					break;  				}    				case 7:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU  					MAT_BIT_SHU();  					break;  				}    				case 8:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR  					MAT_BIT_XOR();  					break;  				}    				case 9:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND  					MAT_BOOL_AND();  					break;  				}    				case 10:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT  					MAT_BOOL_NOT();  					break;  				}    				case 11:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR  					MAT_BOOL_OR();  					break;  				}    				case 12:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON  					MAT_COLON();  					break;  				}    				case 13:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA  					MAT_COMMA();  					break;  				}    				case 14:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ  					MAT_COMP_EQ();  					break;  				}    				case 15:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT  					MAT_COMP_GT();  					break;  				}    				case 16:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE  					MAT_COMP_GTE();  					break;  				}    				case 17:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT  					MAT_COMP_LT();  					break;  				}    				case 18:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE  					MAT_COMP_LTE();  					break;  				}    				case 19:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ  					MAT_COMP_NEQ();  					break;  				}    				case 20:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE  					MAT_COND_QUE();  					break;  				}    				case 21:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE  					MAT_DIVIDE();  					break;  				}    				case 22:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT  					MAT_DOT();  					break;  				}    				case 23:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN  					MAT_LPAREN();  					break;  				}    				case 24:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO  					MAT_MODULO();  					break;  				}    				case 25:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY  					MAT_MULTIPLY();  					break;  				}    				case 26:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN  					MAT_RPAREN();  					break;  				}    				case 27:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT  					MAT_SUBTRACT();  					break;  				}    				case 28:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: NAMESPACE_ID  					MNAMESPACE_ID();  					break;  				}    				case 29:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:311: WS  					MWS();  					break;  				}    				case 30:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:314: DECIMAL  					MDECIMAL();  					break;  				}    				case 31:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:322: OCTAL  					MOCTAL();  					break;  				}    				case 32:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:328: HEX  					MHEX();  					break;  				}  			}
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (alt17)  			{  				case 1:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD  					MAT_ADD();  					break;  				}    				case 2:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND  					MAT_BIT_AND();  					break;  				}    				case 3:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT  					MAT_BIT_NOT();  					break;  				}    				case 4:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR  					MAT_BIT_OR();  					break;  				}    				case 5:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL  					MAT_BIT_SHL();  					break;  				}    				case 6:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR  					MAT_BIT_SHR();  					break;  				}    				case 7:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU  					MAT_BIT_SHU();  					break;  				}    				case 8:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR  					MAT_BIT_XOR();  					break;  				}    				case 9:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND  					MAT_BOOL_AND();  					break;  				}    				case 10:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT  					MAT_BOOL_NOT();  					break;  				}    				case 11:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR  					MAT_BOOL_OR();  					break;  				}    				case 12:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON  					MAT_COLON();  					break;  				}    				case 13:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA  					MAT_COMMA();  					break;  				}    				case 14:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ  					MAT_COMP_EQ();  					break;  				}    				case 15:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT  					MAT_COMP_GT();  					break;  				}    				case 16:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE  					MAT_COMP_GTE();  					break;  				}    				case 17:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT  					MAT_COMP_LT();  					break;  				}    				case 18:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE  					MAT_COMP_LTE();  					break;  				}    				case 19:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ  					MAT_COMP_NEQ();  					break;  				}    				case 20:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE  					MAT_COND_QUE();  					break;  				}    				case 21:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE  					MAT_DIVIDE();  					break;  				}    				case 22:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT  					MAT_DOT();  					break;  				}    				case 23:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN  					MAT_LPAREN();  					break;  				}    				case 24:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO  					MAT_MODULO();  					break;  				}    				case 25:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY  					MAT_MULTIPLY();  					break;  				}    				case 26:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN  					MAT_RPAREN();  					break;  				}    				case 27:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT  					MAT_SUBTRACT();  					break;  				}    				case 28:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: NAMESPACE_ID  					MNAMESPACE_ID();  					break;  				}    				case 29:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:311: WS  					MWS();  					break;  				}    				case 30:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:314: DECIMAL  					MDECIMAL();  					break;  				}    				case 31:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:322: OCTAL  					MOCTAL();  					break;  				}    				case 32:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:328: HEX  					MHEX();  					break;  				}  			}
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (alt17)  			{  				case 1:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD  					MAT_ADD();  					break;  				}    				case 2:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND  					MAT_BIT_AND();  					break;  				}    				case 3:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT  					MAT_BIT_NOT();  					break;  				}    				case 4:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR  					MAT_BIT_OR();  					break;  				}    				case 5:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL  					MAT_BIT_SHL();  					break;  				}    				case 6:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR  					MAT_BIT_SHR();  					break;  				}    				case 7:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU  					MAT_BIT_SHU();  					break;  				}    				case 8:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR  					MAT_BIT_XOR();  					break;  				}    				case 9:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND  					MAT_BOOL_AND();  					break;  				}    				case 10:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT  					MAT_BOOL_NOT();  					break;  				}    				case 11:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR  					MAT_BOOL_OR();  					break;  				}    				case 12:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON  					MAT_COLON();  					break;  				}    				case 13:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA  					MAT_COMMA();  					break;  				}    				case 14:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ  					MAT_COMP_EQ();  					break;  				}    				case 15:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT  					MAT_COMP_GT();  					break;  				}    				case 16:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE  					MAT_COMP_GTE();  					break;  				}    				case 17:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT  					MAT_COMP_LT();  					break;  				}    				case 18:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE  					MAT_COMP_LTE();  					break;  				}    				case 19:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ  					MAT_COMP_NEQ();  					break;  				}    				case 20:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE  					MAT_COND_QUE();  					break;  				}    				case 21:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE  					MAT_DIVIDE();  					break;  				}    				case 22:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT  					MAT_DOT();  					break;  				}    				case 23:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN  					MAT_LPAREN();  					break;  				}    				case 24:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO  					MAT_MODULO();  					break;  				}    				case 25:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY  					MAT_MULTIPLY();  					break;  				}    				case 26:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN  					MAT_RPAREN();  					break;  				}    				case 27:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT  					MAT_SUBTRACT();  					break;  				}    				case 28:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: NAMESPACE_ID  					MNAMESPACE_ID();  					break;  				}    				case 29:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:311: WS  					MWS();  					break;  				}    				case 30:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:314: DECIMAL  					MDECIMAL();  					break;  				}    				case 31:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:322: OCTAL  					MOCTAL();  					break;  				}    				case 32:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:328: HEX  					MHEX();  					break;  				}  			}
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (alt17)  			{  				case 1:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD  					MAT_ADD();  					break;  				}    				case 2:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND  					MAT_BIT_AND();  					break;  				}    				case 3:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT  					MAT_BIT_NOT();  					break;  				}    				case 4:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR  					MAT_BIT_OR();  					break;  				}    				case 5:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL  					MAT_BIT_SHL();  					break;  				}    				case 6:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR  					MAT_BIT_SHR();  					break;  				}    				case 7:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU  					MAT_BIT_SHU();  					break;  				}    				case 8:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR  					MAT_BIT_XOR();  					break;  				}    				case 9:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND  					MAT_BOOL_AND();  					break;  				}    				case 10:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT  					MAT_BOOL_NOT();  					break;  				}    				case 11:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR  					MAT_BOOL_OR();  					break;  				}    				case 12:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON  					MAT_COLON();  					break;  				}    				case 13:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA  					MAT_COMMA();  					break;  				}    				case 14:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ  					MAT_COMP_EQ();  					break;  				}    				case 15:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT  					MAT_COMP_GT();  					break;  				}    				case 16:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE  					MAT_COMP_GTE();  					break;  				}    				case 17:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT  					MAT_COMP_LT();  					break;  				}    				case 18:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE  					MAT_COMP_LTE();  					break;  				}    				case 19:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ  					MAT_COMP_NEQ();  					break;  				}    				case 20:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE  					MAT_COND_QUE();  					break;  				}    				case 21:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE  					MAT_DIVIDE();  					break;  				}    				case 22:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT  					MAT_DOT();  					break;  				}    				case 23:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN  					MAT_LPAREN();  					break;  				}    				case 24:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO  					MAT_MODULO();  					break;  				}    				case 25:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY  					MAT_MULTIPLY();  					break;  				}    				case 26:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN  					MAT_RPAREN();  					break;  				}    				case 27:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT  					MAT_SUBTRACT();  					break;  				}    				case 28:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: NAMESPACE_ID  					MNAMESPACE_ID();  					break;  				}    				case 29:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:311: WS  					MWS();  					break;  				}    				case 30:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:314: DECIMAL  					MDECIMAL();  					break;  				}    				case 31:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:322: OCTAL  					MOCTAL();  					break;  				}    				case 32:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:328: HEX  					MHEX();  					break;  				}  			}
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (alt17)  			{  				case 1:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD  					MAT_ADD();  					break;  				}    				case 2:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND  					MAT_BIT_AND();  					break;  				}    				case 3:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT  					MAT_BIT_NOT();  					break;  				}    				case 4:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR  					MAT_BIT_OR();  					break;  				}    				case 5:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL  					MAT_BIT_SHL();  					break;  				}    				case 6:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR  					MAT_BIT_SHR();  					break;  				}    				case 7:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU  					MAT_BIT_SHU();  					break;  				}    				case 8:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR  					MAT_BIT_XOR();  					break;  				}    				case 9:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND  					MAT_BOOL_AND();  					break;  				}    				case 10:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT  					MAT_BOOL_NOT();  					break;  				}    				case 11:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR  					MAT_BOOL_OR();  					break;  				}    				case 12:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON  					MAT_COLON();  					break;  				}    				case 13:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA  					MAT_COMMA();  					break;  				}    				case 14:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ  					MAT_COMP_EQ();  					break;  				}    				case 15:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT  					MAT_COMP_GT();  					break;  				}    				case 16:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE  					MAT_COMP_GTE();  					break;  				}    				case 17:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT  					MAT_COMP_LT();  					break;  				}    				case 18:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE  					MAT_COMP_LTE();  					break;  				}    				case 19:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ  					MAT_COMP_NEQ();  					break;  				}    				case 20:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE  					MAT_COND_QUE();  					break;  				}    				case 21:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE  					MAT_DIVIDE();  					break;  				}    				case 22:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT  					MAT_DOT();  					break;  				}    				case 23:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN  					MAT_LPAREN();  					break;  				}    				case 24:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO  					MAT_MODULO();  					break;  				}    				case 25:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY  					MAT_MULTIPLY();  					break;  				}    				case 26:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN  					MAT_RPAREN();  					break;  				}    				case 27:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT  					MAT_SUBTRACT();  					break;  				}    				case 28:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: NAMESPACE_ID  					MNAMESPACE_ID();  					break;  				}    				case 29:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:311: WS  					MWS();  					break;  				}    				case 30:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:314: DECIMAL  					MDECIMAL();  					break;  				}    				case 31:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:322: OCTAL  					MOCTAL();  					break;  				}    				case 32:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:328: HEX  					MHEX();  					break;  				}  			}
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (alt17)  			{  				case 1:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD  					MAT_ADD();  					break;  				}    				case 2:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND  					MAT_BIT_AND();  					break;  				}    				case 3:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT  					MAT_BIT_NOT();  					break;  				}    				case 4:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR  					MAT_BIT_OR();  					break;  				}    				case 5:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL  					MAT_BIT_SHL();  					break;  				}    				case 6:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR  					MAT_BIT_SHR();  					break;  				}    				case 7:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU  					MAT_BIT_SHU();  					break;  				}    				case 8:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR  					MAT_BIT_XOR();  					break;  				}    				case 9:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND  					MAT_BOOL_AND();  					break;  				}    				case 10:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT  					MAT_BOOL_NOT();  					break;  				}    				case 11:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR  					MAT_BOOL_OR();  					break;  				}    				case 12:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON  					MAT_COLON();  					break;  				}    				case 13:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA  					MAT_COMMA();  					break;  				}    				case 14:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ  					MAT_COMP_EQ();  					break;  				}    				case 15:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT  					MAT_COMP_GT();  					break;  				}    				case 16:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE  					MAT_COMP_GTE();  					break;  				}    				case 17:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT  					MAT_COMP_LT();  					break;  				}    				case 18:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE  					MAT_COMP_LTE();  					break;  				}    				case 19:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ  					MAT_COMP_NEQ();  					break;  				}    				case 20:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE  					MAT_COND_QUE();  					break;  				}    				case 21:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE  					MAT_DIVIDE();  					break;  				}    				case 22:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT  					MAT_DOT();  					break;  				}    				case 23:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN  					MAT_LPAREN();  					break;  				}    				case 24:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO  					MAT_MODULO();  					break;  				}    				case 25:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY  					MAT_MULTIPLY();  					break;  				}    				case 26:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN  					MAT_RPAREN();  					break;  				}    				case 27:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT  					MAT_SUBTRACT();  					break;  				}    				case 28:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: NAMESPACE_ID  					MNAMESPACE_ID();  					break;  				}    				case 29:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:311: WS  					MWS();  					break;  				}    				case 30:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:314: DECIMAL  					MDECIMAL();  					break;  				}    				case 31:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:322: OCTAL  					MOCTAL();  					break;  				}    				case 32:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:328: HEX  					MHEX();  					break;  				}  			}
Magic Number,Lucene.Net.Expressions.JS,DFA9,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,DFA9,The following statement contains a magic number: this.decisionNumber = 9;
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Conditional,The following statement contains a magic number: int alt1 = 2;
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Logical_Or,The following statement contains a magic number: int alt2 = 2;
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Logical_And,The following statement contains a magic number: int alt3 = 2;
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Bitwise_Or,The following statement contains a magic number: int alt4 = 2;
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Bitwise_XOr,The following statement contains a magic number: int alt5 = 2;
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Bitwise_And,The following statement contains a magic number: int alt6 = 2;
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Equality,The following statement contains a magic number: int alt7 = 2;
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Relational,The following statement contains a magic number: int alt8 = 2;
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Shift,The following statement contains a magic number: int alt9 = 2;
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Additive,The following statement contains a magic number: int alt10 = 2;
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Multiplicative,The following statement contains a magic number: int alt11 = 2;
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Unary,The following statement contains a magic number: int alt12 = 3;
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Unary,The following statement contains a magic number: switch (input.LA(1))                  {                      case AT_LPAREN:                      case DECIMAL:                      case HEX:                      case NAMESPACE_ID:                      case OCTAL:                          {                              alt12 = 1;                              break;                          }                        case AT_ADD:                          {                              alt12 = 2;                              break;                          }                        case AT_BIT_NOT:                      case AT_BOOL_NOT:                      case AT_SUBTRACT:                          {                              alt12 = 3;                              break;                          }                        default:                          {                              NoViableAltException nvae = new NoViableAltException(string.Empty' 12' 0' input);                              throw nvae;                          }                  }
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Unary,The following statement contains a magic number: switch (input.LA(1))                  {                      case AT_LPAREN:                      case DECIMAL:                      case HEX:                      case NAMESPACE_ID:                      case OCTAL:                          {                              alt12 = 1;                              break;                          }                        case AT_ADD:                          {                              alt12 = 2;                              break;                          }                        case AT_BIT_NOT:                      case AT_BOOL_NOT:                      case AT_SUBTRACT:                          {                              alt12 = 3;                              break;                          }                        default:                          {                              NoViableAltException nvae = new NoViableAltException(string.Empty' 12' 0' input);                              throw nvae;                          }                  }
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Unary,The following statement contains a magic number: switch (input.LA(1))                  {                      case AT_LPAREN:                      case DECIMAL:                      case HEX:                      case NAMESPACE_ID:                      case OCTAL:                          {                              alt12 = 1;                              break;                          }                        case AT_ADD:                          {                              alt12 = 2;                              break;                          }                        case AT_BIT_NOT:                      case AT_BOOL_NOT:                      case AT_SUBTRACT:                          {                              alt12 = 3;                              break;                          }                        default:                          {                              NoViableAltException nvae = new NoViableAltException(string.Empty' 12' 0' input);                              throw nvae;                          }                  }
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Unary,The following statement contains a magic number: switch (alt12)                  {                      case 1:                          {                              // src/java/org/apache/lucene/expressions/js/Javascript.g:299:7: postfix                              root = (CommonTree)m_adaptor.Nil();                              PushFollow(FOLLOW_postfix_in_unary1084);                              AstParserRuleReturnScope<ITree' IToken> postfix38 = Postfix();                              state._fsp--;                              m_adaptor.AddChild(root' postfix38.Tree);                              break;                          }                        case 2:                          {                              // src/java/org/apache/lucene/expressions/js/Javascript.g:300:7: AT_ADD ! unary                              root = (CommonTree)m_adaptor.Nil();                              IToken AT_ADD39 = (IToken)Match(input' AT_ADD' FOLLOW_AT_ADD_in_unary1092);                              PushFollow(FOLLOW_unary_in_unary1095);                              AstParserRuleReturnScope<ITree' IToken> unary40 = Unary();                              state._fsp--;                              m_adaptor.AddChild(root' unary40.Tree);                              break;                          }                        case 3:                          {                              // src/java/org/apache/lucene/expressions/js/Javascript.g:301:7: unary_operator ^ unary                              root = (CommonTree)m_adaptor.Nil();                              PushFollow(FOLLOW_unary_operator_in_unary1103);                              AstParserRuleReturnScope<ITree' IToken> unary_operator41 = Unary_Operator();                              state._fsp--;                              root = (CommonTree)m_adaptor.BecomeRoot(unary_operator41.Tree' root);                              PushFollow(FOLLOW_unary_in_unary1106);                              AstParserRuleReturnScope<ITree' IToken> unary42 = Unary();                              state._fsp--;                              m_adaptor.AddChild(root' unary42.Tree);                              break;                          }                  }
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Unary,The following statement contains a magic number: switch (alt12)                  {                      case 1:                          {                              // src/java/org/apache/lucene/expressions/js/Javascript.g:299:7: postfix                              root = (CommonTree)m_adaptor.Nil();                              PushFollow(FOLLOW_postfix_in_unary1084);                              AstParserRuleReturnScope<ITree' IToken> postfix38 = Postfix();                              state._fsp--;                              m_adaptor.AddChild(root' postfix38.Tree);                              break;                          }                        case 2:                          {                              // src/java/org/apache/lucene/expressions/js/Javascript.g:300:7: AT_ADD ! unary                              root = (CommonTree)m_adaptor.Nil();                              IToken AT_ADD39 = (IToken)Match(input' AT_ADD' FOLLOW_AT_ADD_in_unary1092);                              PushFollow(FOLLOW_unary_in_unary1095);                              AstParserRuleReturnScope<ITree' IToken> unary40 = Unary();                              state._fsp--;                              m_adaptor.AddChild(root' unary40.Tree);                              break;                          }                        case 3:                          {                              // src/java/org/apache/lucene/expressions/js/Javascript.g:301:7: unary_operator ^ unary                              root = (CommonTree)m_adaptor.Nil();                              PushFollow(FOLLOW_unary_operator_in_unary1103);                              AstParserRuleReturnScope<ITree' IToken> unary_operator41 = Unary_Operator();                              state._fsp--;                              root = (CommonTree)m_adaptor.BecomeRoot(unary_operator41.Tree' root);                              PushFollow(FOLLOW_unary_in_unary1106);                              AstParserRuleReturnScope<ITree' IToken> unary42 = Unary();                              state._fsp--;                              m_adaptor.AddChild(root' unary42.Tree);                              break;                          }                  }
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Unary_Operator,The following statement contains a magic number: int alt13 = 3;
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Unary_Operator,The following statement contains a magic number: switch (input.LA(1))                  {                      case AT_SUBTRACT:                          {                              alt13 = 1;                              break;                          }                        case AT_BIT_NOT:                          {                              alt13 = 2;                              break;                          }                        case AT_BOOL_NOT:                          {                              alt13 = 3;                              break;                          }                        default:                          {                              NoViableAltException nvae = new NoViableAltException(string.Empty' 13' 0' input);                              throw nvae;                          }                  }
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Unary_Operator,The following statement contains a magic number: switch (input.LA(1))                  {                      case AT_SUBTRACT:                          {                              alt13 = 1;                              break;                          }                        case AT_BIT_NOT:                          {                              alt13 = 2;                              break;                          }                        case AT_BOOL_NOT:                          {                              alt13 = 3;                              break;                          }                        default:                          {                              NoViableAltException nvae = new NoViableAltException(string.Empty' 13' 0' input);                              throw nvae;                          }                  }
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Unary_Operator,The following statement contains a magic number: switch (input.LA(1))                  {                      case AT_SUBTRACT:                          {                              alt13 = 1;                              break;                          }                        case AT_BIT_NOT:                          {                              alt13 = 2;                              break;                          }                        case AT_BOOL_NOT:                          {                              alt13 = 3;                              break;                          }                        default:                          {                              NoViableAltException nvae = new NoViableAltException(string.Empty' 13' 0' input);                              throw nvae;                          }                  }
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Unary_Operator,The following statement contains a magic number: switch (alt13)                  {                      case 1:                          {                              // src/java/org/apache/lucene/expressions/js/Javascript.g:305:7: AT_SUBTRACT                              IToken AT_SUBTRACT43 = (IToken)Match(input' AT_SUBTRACT' FOLLOW_AT_SUBTRACT_in_unary_operator1123                                  );                              stream_AT_SUBTRACT.Add(AT_SUBTRACT43);                              // AST REWRITE                              // elements:                               // token labels:                               // rule labels: retval                              // token list labels:                               // rule list labels:                               // wildcard labels:                               retval.Tree = root;                              RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(m_adaptor' "rule retval"                                  ' retval != null ? ((CommonTree)retval.Tree) : null);                              root = (CommonTree)m_adaptor.Nil();                              {                                  // 305:19: -> AT_NEGATE                                  m_adaptor.AddChild(root' (CommonTree)m_adaptor.Create(AT_NEGATE' "AT_NEGATE"));                              }                              retval.Tree = root;                              break;                          }                        case 2:                          {                              // src/java/org/apache/lucene/expressions/js/Javascript.g:306:7: AT_BIT_NOT                              root = (CommonTree)m_adaptor.Nil();                              IToken AT_BIT_NOT44 = (IToken)Match(input' AT_BIT_NOT' FOLLOW_AT_BIT_NOT_in_unary_operator1135                                  );                              CommonTree AT_BIT_NOT44_tree = (CommonTree)m_adaptor.Create(AT_BIT_NOT44);                              m_adaptor.AddChild(root' AT_BIT_NOT44_tree);                              break;                          }                        case 3:                          {                              // src/java/org/apache/lucene/expressions/js/Javascript.g:307:7: AT_BOOL_NOT                              root = (CommonTree)m_adaptor.Nil();                              IToken AT_BOOL_NOT45 = (IToken)Match(input' AT_BOOL_NOT' FOLLOW_AT_BOOL_NOT_in_unary_operator1143                                  );                              CommonTree AT_BOOL_NOT45_tree = (CommonTree)m_adaptor.Create(AT_BOOL_NOT45);                              m_adaptor.AddChild(root' AT_BOOL_NOT45_tree);                              break;                          }                  }
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Unary_Operator,The following statement contains a magic number: switch (alt13)                  {                      case 1:                          {                              // src/java/org/apache/lucene/expressions/js/Javascript.g:305:7: AT_SUBTRACT                              IToken AT_SUBTRACT43 = (IToken)Match(input' AT_SUBTRACT' FOLLOW_AT_SUBTRACT_in_unary_operator1123                                  );                              stream_AT_SUBTRACT.Add(AT_SUBTRACT43);                              // AST REWRITE                              // elements:                               // token labels:                               // rule labels: retval                              // token list labels:                               // rule list labels:                               // wildcard labels:                               retval.Tree = root;                              RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(m_adaptor' "rule retval"                                  ' retval != null ? ((CommonTree)retval.Tree) : null);                              root = (CommonTree)m_adaptor.Nil();                              {                                  // 305:19: -> AT_NEGATE                                  m_adaptor.AddChild(root' (CommonTree)m_adaptor.Create(AT_NEGATE' "AT_NEGATE"));                              }                              retval.Tree = root;                              break;                          }                        case 2:                          {                              // src/java/org/apache/lucene/expressions/js/Javascript.g:306:7: AT_BIT_NOT                              root = (CommonTree)m_adaptor.Nil();                              IToken AT_BIT_NOT44 = (IToken)Match(input' AT_BIT_NOT' FOLLOW_AT_BIT_NOT_in_unary_operator1135                                  );                              CommonTree AT_BIT_NOT44_tree = (CommonTree)m_adaptor.Create(AT_BIT_NOT44);                              m_adaptor.AddChild(root' AT_BIT_NOT44_tree);                              break;                          }                        case 3:                          {                              // src/java/org/apache/lucene/expressions/js/Javascript.g:307:7: AT_BOOL_NOT                              root = (CommonTree)m_adaptor.Nil();                              IToken AT_BOOL_NOT45 = (IToken)Match(input' AT_BOOL_NOT' FOLLOW_AT_BOOL_NOT_in_unary_operator1143                                  );                              CommonTree AT_BOOL_NOT45_tree = (CommonTree)m_adaptor.Create(AT_BOOL_NOT45);                              m_adaptor.AddChild(root' AT_BOOL_NOT45_tree);                              break;                          }                  }
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Postfix,The following statement contains a magic number: int alt14 = 2;
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Postfix,The following statement contains a magic number: int LA14_1 = input.LA(2);
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Postfix,The following statement contains a magic number: switch (alt14)                  {                      case 1:                          {                              // src/java/org/apache/lucene/expressions/js/Javascript.g:311:7: primary                              root = (CommonTree)m_adaptor.Nil();                              PushFollow(FOLLOW_primary_in_postfix1160);                              AstParserRuleReturnScope<ITree' IToken> primary46 = Primary();                              state._fsp--;                              m_adaptor.AddChild(root' primary46.Tree);                              break;                          }                        case 2:                          {                              // src/java/org/apache/lucene/expressions/js/Javascript.g:312:7: NAMESPACE_ID arguments                              IToken NAMESPACE_ID47 = (IToken)Match(input' NAMESPACE_ID' FOLLOW_NAMESPACE_ID_in_postfix1168                                  );                              streamNamespaceId.Add(NAMESPACE_ID47);                              PushFollow(FOLLOW_arguments_in_postfix1170);                              AstParserRuleReturnScope<ITree' IToken> arguments48 = Arguments();                              state._fsp--;                              streamArguments.Add(arguments48.Tree);                              // AST REWRITE                              // elements: NAMESPACE_ID' arguments                              // token labels:                               // rule labels: retval                              // token list labels:                               // rule list labels:                               // wildcard labels:                               retval.Tree = root;                              RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(m_adaptor' "rule retval"                                  ' retval != null ? ((CommonTree)retval.Tree) : null);                              root = (CommonTree)m_adaptor.Nil();                              {                                  {                                      // 312:30: -> ^( AT_CALL NAMESPACE_ID ( arguments )? )                                      // src/java/org/apache/lucene/expressions/js/Javascript.g:312:33: ^( AT_CALL NAMESPACE_ID ( arguments )? )                                      CommonTree root_1 = (CommonTree)m_adaptor.Nil();                                      root_1 = (CommonTree)m_adaptor.BecomeRoot((CommonTree)m_adaptor.Create(AT_CALL' "AT_CALL"                                          )' root_1);                                      m_adaptor.AddChild(root_1' streamNamespaceId.NextNode());                                      // src/java/org/apache/lucene/expressions/js/Javascript.g:312:56: ( arguments )?                                      if (streamArguments.HasNext)                                      {                                          m_adaptor.AddChild(root_1' streamArguments.NextTree());                                      }                                      streamArguments.Reset();                                      m_adaptor.AddChild(root' root_1);                                  }                              }                              retval.Tree = root;                              break;                          }                  }
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Primary,The following statement contains a magic number: int alt15 = 3;
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Primary,The following statement contains a magic number: switch (input.LA(1))                  {                      case NAMESPACE_ID:                          {                              alt15 = 1;                              break;                          }                        case DECIMAL:                      case HEX:                      case OCTAL:                          {                              alt15 = 2;                              break;                          }                        case AT_LPAREN:                          {                              alt15 = 3;                              break;                          }                        default:                          {                              NoViableAltException nvae = new NoViableAltException(string.Empty' 15' 0' input);                              throw nvae;                          }                  }
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Primary,The following statement contains a magic number: switch (input.LA(1))                  {                      case NAMESPACE_ID:                          {                              alt15 = 1;                              break;                          }                        case DECIMAL:                      case HEX:                      case OCTAL:                          {                              alt15 = 2;                              break;                          }                        case AT_LPAREN:                          {                              alt15 = 3;                              break;                          }                        default:                          {                              NoViableAltException nvae = new NoViableAltException(string.Empty' 15' 0' input);                              throw nvae;                          }                  }
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Primary,The following statement contains a magic number: switch (input.LA(1))                  {                      case NAMESPACE_ID:                          {                              alt15 = 1;                              break;                          }                        case DECIMAL:                      case HEX:                      case OCTAL:                          {                              alt15 = 2;                              break;                          }                        case AT_LPAREN:                          {                              alt15 = 3;                              break;                          }                        default:                          {                              NoViableAltException nvae = new NoViableAltException(string.Empty' 15' 0' input);                              throw nvae;                          }                  }
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Primary,The following statement contains a magic number: switch (alt15)                  {                      case 1:                          {                              // src/java/org/apache/lucene/expressions/js/Javascript.g:316:7: NAMESPACE_ID                              root = (CommonTree)m_adaptor.Nil();                              IToken NAMESPACE_ID49 = (IToken)Match(input' NAMESPACE_ID' FOLLOW_NAMESPACE_ID_in_primary1198                                  );                              NAMESPACE_ID49_tree = (CommonTree)m_adaptor.Create(NAMESPACE_ID49);                              m_adaptor.AddChild(root' NAMESPACE_ID49_tree);                              break;                          }                        case 2:                          {                              // src/java/org/apache/lucene/expressions/js/Javascript.g:317:7: numeric                              root = (CommonTree)m_adaptor.Nil();                              PushFollow(FOLLOW_numeric_in_primary1206);                              AstParserRuleReturnScope<ITree' IToken> numeric50 = Numeric();                              state._fsp--;                              m_adaptor.AddChild(root' numeric50.Tree);                              break;                          }                        case 3:                          {                              // src/java/org/apache/lucene/expressions/js/Javascript.g:318:7: AT_LPAREN ! conditional AT_RPAREN !                              root = (CommonTree)m_adaptor.Nil();                              AT_LPAREN51 = (IToken)Match(input' AT_LPAREN' FOLLOW_AT_LPAREN_in_primary1214);                              PushFollow(FOLLOW_conditional_in_primary1217);                              AstParserRuleReturnScope<ITree' IToken> conditional52 = Conditional();                              state._fsp--;                              m_adaptor.AddChild(root' conditional52.Tree);                              AT_RPAREN53 = (IToken)Match(input' AT_RPAREN' FOLLOW_AT_RPAREN_in_primary1219);                              break;                          }                  }
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Primary,The following statement contains a magic number: switch (alt15)                  {                      case 1:                          {                              // src/java/org/apache/lucene/expressions/js/Javascript.g:316:7: NAMESPACE_ID                              root = (CommonTree)m_adaptor.Nil();                              IToken NAMESPACE_ID49 = (IToken)Match(input' NAMESPACE_ID' FOLLOW_NAMESPACE_ID_in_primary1198                                  );                              NAMESPACE_ID49_tree = (CommonTree)m_adaptor.Create(NAMESPACE_ID49);                              m_adaptor.AddChild(root' NAMESPACE_ID49_tree);                              break;                          }                        case 2:                          {                              // src/java/org/apache/lucene/expressions/js/Javascript.g:317:7: numeric                              root = (CommonTree)m_adaptor.Nil();                              PushFollow(FOLLOW_numeric_in_primary1206);                              AstParserRuleReturnScope<ITree' IToken> numeric50 = Numeric();                              state._fsp--;                              m_adaptor.AddChild(root' numeric50.Tree);                              break;                          }                        case 3:                          {                              // src/java/org/apache/lucene/expressions/js/Javascript.g:318:7: AT_LPAREN ! conditional AT_RPAREN !                              root = (CommonTree)m_adaptor.Nil();                              AT_LPAREN51 = (IToken)Match(input' AT_LPAREN' FOLLOW_AT_LPAREN_in_primary1214);                              PushFollow(FOLLOW_conditional_in_primary1217);                              AstParserRuleReturnScope<ITree' IToken> conditional52 = Conditional();                              state._fsp--;                              m_adaptor.AddChild(root' conditional52.Tree);                              AT_RPAREN53 = (IToken)Match(input' AT_RPAREN' FOLLOW_AT_RPAREN_in_primary1219);                              break;                          }                  }
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Arguments,The following statement contains a magic number: int alt17 = 2;
Missing Default,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MDECIMAL,The following switch statement is missing a default case: switch (alt5)  		                {  		                    case 1:  		                    {  		                        // src/java/org/apache/lucene/expressions/js/Javascript.g:347:43: EXPONENT  		                        MEXPONENT();  		                        break;  		                    }  		                }
Missing Default,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MDECIMAL,The following switch statement is missing a default case: switch (alt7)  		                {  		                    case 1:  		                    {  		                        // src/java/org/apache/lucene/expressions/js/Javascript.g:348:28: EXPONENT  		                        MEXPONENT();  		                        break;  		                    }  		                }
Missing Default,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MDECIMAL,The following switch statement is missing a default case: switch (alt8)  		                {  		                    case 1:  		                    {  		                        // src/java/org/apache/lucene/expressions/js/Javascript.g:349:22: EXPONENT  		                        MEXPONENT();  		                        break;  		                    }  		                }
Missing Default,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MHEX,The following switch statement is missing a default case: switch (alt11)  					{  						case 1:  						{  							// src/java/org/apache/lucene/expressions/js/Javascript.g:357:8: '0x'  							Match("0x");  							break;  						}    						case 2:  						{  							// src/java/org/apache/lucene/expressions/js/Javascript.g:357:13: '0X'  							Match("0X");  							break;  						}  					}
Missing Default,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MEXPONENT,The following switch statement is missing a default case: switch (alt15)  					{  						case 1:  						{  							// src/java/org/apache/lucene/expressions/js/Javascript.g:  							if (input.LA(1) == '+' || input.LA(1) == '-')  							{  								input.Consume();  							}  							else  							{  								MismatchedSetException mse = new MismatchedSetException(null' input);  								Recover(mse);  								throw mse;  							}  							break;  						}  					}
Missing Default,Lucene.Net.Expressions.JS,JavascriptLexer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following switch statement is missing a default case: switch (alt17)  			{  				case 1:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD  					MAT_ADD();  					break;  				}    				case 2:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND  					MAT_BIT_AND();  					break;  				}    				case 3:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT  					MAT_BIT_NOT();  					break;  				}    				case 4:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR  					MAT_BIT_OR();  					break;  				}    				case 5:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL  					MAT_BIT_SHL();  					break;  				}    				case 6:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR  					MAT_BIT_SHR();  					break;  				}    				case 7:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU  					MAT_BIT_SHU();  					break;  				}    				case 8:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR  					MAT_BIT_XOR();  					break;  				}    				case 9:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND  					MAT_BOOL_AND();  					break;  				}    				case 10:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT  					MAT_BOOL_NOT();  					break;  				}    				case 11:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR  					MAT_BOOL_OR();  					break;  				}    				case 12:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON  					MAT_COLON();  					break;  				}    				case 13:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA  					MAT_COMMA();  					break;  				}    				case 14:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ  					MAT_COMP_EQ();  					break;  				}    				case 15:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT  					MAT_COMP_GT();  					break;  				}    				case 16:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE  					MAT_COMP_GTE();  					break;  				}    				case 17:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT  					MAT_COMP_LT();  					break;  				}    				case 18:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE  					MAT_COMP_LTE();  					break;  				}    				case 19:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ  					MAT_COMP_NEQ();  					break;  				}    				case 20:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE  					MAT_COND_QUE();  					break;  				}    				case 21:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE  					MAT_DIVIDE();  					break;  				}    				case 22:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT  					MAT_DOT();  					break;  				}    				case 23:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN  					MAT_LPAREN();  					break;  				}    				case 24:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO  					MAT_MODULO();  					break;  				}    				case 25:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY  					MAT_MULTIPLY();  					break;  				}    				case 26:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN  					MAT_RPAREN();  					break;  				}    				case 27:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT  					MAT_SUBTRACT();  					break;  				}    				case 28:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: NAMESPACE_ID  					MNAMESPACE_ID();  					break;  				}    				case 29:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:311: WS  					MWS();  					break;  				}    				case 30:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:314: DECIMAL  					MDECIMAL();  					break;  				}    				case 31:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:322: OCTAL  					MOCTAL();  					break;  				}    				case 32:  				{  					// src/java/org/apache/lucene/expressions/js/Javascript.g:1:328: HEX  					MHEX();  					break;  				}  			}
Missing Default,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Conditional,The following switch statement is missing a default case: switch (alt1)                      {                          case 1:                              {                                  // src/java/org/apache/lucene/expressions/js/Javascript.g:255:19: AT_COND_QUE ^ conditional AT_COLON ! conditional                                  AT_COND_QUE4 = (IToken)Match(input' AT_COND_QUE' FOLLOW_AT_COND_QUE_in_conditional760);                                  AT_COND_QUE4_tree = (CommonTree)m_adaptor.Create(AT_COND_QUE4);                                  root_0 = (CommonTree)m_adaptor.BecomeRoot(AT_COND_QUE4_tree' root_0);                                  PushFollow(FOLLOW_conditional_in_conditional763);                                  conditional5 = Conditional();                                  state._fsp--;                                  m_adaptor.AddChild(root_0' conditional5.Tree);                                  AT_COLON6 = (IToken)Match(input' AT_COLON' FOLLOW_AT_COLON_in_conditional765);                                  PushFollow(FOLLOW_conditional_in_conditional768);                                  conditional7 = Conditional();                                  state._fsp--;                                  m_adaptor.AddChild(root_0' conditional7.Tree);                                  break;                              }                      }
Missing Default,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Unary,The following switch statement is missing a default case: switch (alt12)                  {                      case 1:                          {                              // src/java/org/apache/lucene/expressions/js/Javascript.g:299:7: postfix                              root = (CommonTree)m_adaptor.Nil();                              PushFollow(FOLLOW_postfix_in_unary1084);                              AstParserRuleReturnScope<ITree' IToken> postfix38 = Postfix();                              state._fsp--;                              m_adaptor.AddChild(root' postfix38.Tree);                              break;                          }                        case 2:                          {                              // src/java/org/apache/lucene/expressions/js/Javascript.g:300:7: AT_ADD ! unary                              root = (CommonTree)m_adaptor.Nil();                              IToken AT_ADD39 = (IToken)Match(input' AT_ADD' FOLLOW_AT_ADD_in_unary1092);                              PushFollow(FOLLOW_unary_in_unary1095);                              AstParserRuleReturnScope<ITree' IToken> unary40 = Unary();                              state._fsp--;                              m_adaptor.AddChild(root' unary40.Tree);                              break;                          }                        case 3:                          {                              // src/java/org/apache/lucene/expressions/js/Javascript.g:301:7: unary_operator ^ unary                              root = (CommonTree)m_adaptor.Nil();                              PushFollow(FOLLOW_unary_operator_in_unary1103);                              AstParserRuleReturnScope<ITree' IToken> unary_operator41 = Unary_Operator();                              state._fsp--;                              root = (CommonTree)m_adaptor.BecomeRoot(unary_operator41.Tree' root);                              PushFollow(FOLLOW_unary_in_unary1106);                              AstParserRuleReturnScope<ITree' IToken> unary42 = Unary();                              state._fsp--;                              m_adaptor.AddChild(root' unary42.Tree);                              break;                          }                  }
Missing Default,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Unary_Operator,The following switch statement is missing a default case: switch (alt13)                  {                      case 1:                          {                              // src/java/org/apache/lucene/expressions/js/Javascript.g:305:7: AT_SUBTRACT                              IToken AT_SUBTRACT43 = (IToken)Match(input' AT_SUBTRACT' FOLLOW_AT_SUBTRACT_in_unary_operator1123                                  );                              stream_AT_SUBTRACT.Add(AT_SUBTRACT43);                              // AST REWRITE                              // elements:                               // token labels:                               // rule labels: retval                              // token list labels:                               // rule list labels:                               // wildcard labels:                               retval.Tree = root;                              RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(m_adaptor' "rule retval"                                  ' retval != null ? ((CommonTree)retval.Tree) : null);                              root = (CommonTree)m_adaptor.Nil();                              {                                  // 305:19: -> AT_NEGATE                                  m_adaptor.AddChild(root' (CommonTree)m_adaptor.Create(AT_NEGATE' "AT_NEGATE"));                              }                              retval.Tree = root;                              break;                          }                        case 2:                          {                              // src/java/org/apache/lucene/expressions/js/Javascript.g:306:7: AT_BIT_NOT                              root = (CommonTree)m_adaptor.Nil();                              IToken AT_BIT_NOT44 = (IToken)Match(input' AT_BIT_NOT' FOLLOW_AT_BIT_NOT_in_unary_operator1135                                  );                              CommonTree AT_BIT_NOT44_tree = (CommonTree)m_adaptor.Create(AT_BIT_NOT44);                              m_adaptor.AddChild(root' AT_BIT_NOT44_tree);                              break;                          }                        case 3:                          {                              // src/java/org/apache/lucene/expressions/js/Javascript.g:307:7: AT_BOOL_NOT                              root = (CommonTree)m_adaptor.Nil();                              IToken AT_BOOL_NOT45 = (IToken)Match(input' AT_BOOL_NOT' FOLLOW_AT_BOOL_NOT_in_unary_operator1143                                  );                              CommonTree AT_BOOL_NOT45_tree = (CommonTree)m_adaptor.Create(AT_BOOL_NOT45);                              m_adaptor.AddChild(root' AT_BOOL_NOT45_tree);                              break;                          }                  }
Missing Default,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Postfix,The following switch statement is missing a default case: switch (alt14)                  {                      case 1:                          {                              // src/java/org/apache/lucene/expressions/js/Javascript.g:311:7: primary                              root = (CommonTree)m_adaptor.Nil();                              PushFollow(FOLLOW_primary_in_postfix1160);                              AstParserRuleReturnScope<ITree' IToken> primary46 = Primary();                              state._fsp--;                              m_adaptor.AddChild(root' primary46.Tree);                              break;                          }                        case 2:                          {                              // src/java/org/apache/lucene/expressions/js/Javascript.g:312:7: NAMESPACE_ID arguments                              IToken NAMESPACE_ID47 = (IToken)Match(input' NAMESPACE_ID' FOLLOW_NAMESPACE_ID_in_postfix1168                                  );                              streamNamespaceId.Add(NAMESPACE_ID47);                              PushFollow(FOLLOW_arguments_in_postfix1170);                              AstParserRuleReturnScope<ITree' IToken> arguments48 = Arguments();                              state._fsp--;                              streamArguments.Add(arguments48.Tree);                              // AST REWRITE                              // elements: NAMESPACE_ID' arguments                              // token labels:                               // rule labels: retval                              // token list labels:                               // rule list labels:                               // wildcard labels:                               retval.Tree = root;                              RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(m_adaptor' "rule retval"                                  ' retval != null ? ((CommonTree)retval.Tree) : null);                              root = (CommonTree)m_adaptor.Nil();                              {                                  {                                      // 312:30: -> ^( AT_CALL NAMESPACE_ID ( arguments )? )                                      // src/java/org/apache/lucene/expressions/js/Javascript.g:312:33: ^( AT_CALL NAMESPACE_ID ( arguments )? )                                      CommonTree root_1 = (CommonTree)m_adaptor.Nil();                                      root_1 = (CommonTree)m_adaptor.BecomeRoot((CommonTree)m_adaptor.Create(AT_CALL' "AT_CALL"                                          )' root_1);                                      m_adaptor.AddChild(root_1' streamNamespaceId.NextNode());                                      // src/java/org/apache/lucene/expressions/js/Javascript.g:312:56: ( arguments )?                                      if (streamArguments.HasNext)                                      {                                          m_adaptor.AddChild(root_1' streamArguments.NextTree());                                      }                                      streamArguments.Reset();                                      m_adaptor.AddChild(root' root_1);                                  }                              }                              retval.Tree = root;                              break;                          }                  }
Missing Default,Lucene.Net.Expressions.JS,JavascriptParser,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Primary,The following switch statement is missing a default case: switch (alt15)                  {                      case 1:                          {                              // src/java/org/apache/lucene/expressions/js/Javascript.g:316:7: NAMESPACE_ID                              root = (CommonTree)m_adaptor.Nil();                              IToken NAMESPACE_ID49 = (IToken)Match(input' NAMESPACE_ID' FOLLOW_NAMESPACE_ID_in_primary1198                                  );                              NAMESPACE_ID49_tree = (CommonTree)m_adaptor.Create(NAMESPACE_ID49);                              m_adaptor.AddChild(root' NAMESPACE_ID49_tree);                              break;                          }                        case 2:                          {                              // src/java/org/apache/lucene/expressions/js/Javascript.g:317:7: numeric                              root = (CommonTree)m_adaptor.Nil();                              PushFollow(FOLLOW_numeric_in_primary1206);                              AstParserRuleReturnScope<ITree' IToken> numeric50 = Numeric();                              state._fsp--;                              m_adaptor.AddChild(root' numeric50.Tree);                              break;                          }                        case 3:                          {                              // src/java/org/apache/lucene/expressions/js/Javascript.g:318:7: AT_LPAREN ! conditional AT_RPAREN !                              root = (CommonTree)m_adaptor.Nil();                              AT_LPAREN51 = (IToken)Match(input' AT_LPAREN' FOLLOW_AT_LPAREN_in_primary1214);                              PushFollow(FOLLOW_conditional_in_primary1217);                              AstParserRuleReturnScope<ITree' IToken> conditional52 = Conditional();                              state._fsp--;                              m_adaptor.AddChild(root' conditional52.Tree);                              AT_RPAREN53 = (IToken)Match(input' AT_RPAREN' FOLLOW_AT_RPAREN_in_primary1219);                              break;                          }                  }
