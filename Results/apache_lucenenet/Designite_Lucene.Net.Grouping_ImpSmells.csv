Implementation smell,Namespace,Class,File,Method,Description
Long Method,Lucene.Net.Search.Grouping,AbstractFirstPassGroupingCollector,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Grouping\AbstractFirstPassGroupingCollector.cs,Collect,The method has 132 lines of code.
Complex Method,Lucene.Net.Search.Grouping,AbstractFirstPassGroupingCollector,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Grouping\AbstractFirstPassGroupingCollector.cs,GetTopGroups,Cyclomatic complexity of the method is 8
Complex Method,Lucene.Net.Search.Grouping,AbstractFirstPassGroupingCollector,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Grouping\AbstractFirstPassGroupingCollector.cs,Collect,Cyclomatic complexity of the method is 21
Complex Method,Lucene.Net.Search.Grouping,AbstractGroupFacetCollector,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Grouping\AbstractGroupFacetCollector.cs,MergeSegmentResults,Cyclomatic complexity of the method is 8
Complex Method,Lucene.Net.Search.Grouping,BlockGroupingCollector,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Grouping\BlockGroupingCollector.cs,ProcessGroup,Cyclomatic complexity of the method is 8
Complex Method,Lucene.Net.Search.Grouping,BlockGroupingCollector,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Grouping\BlockGroupingCollector.cs,GetTopGroups,Cyclomatic complexity of the method is 10
Complex Method,Lucene.Net.Search.Grouping,BlockGroupingCollector,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Grouping\BlockGroupingCollector.cs,Collect,Cyclomatic complexity of the method is 19
Complex Method,Lucene.Net.Search.Grouping,GroupingSearch,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Grouping\GroupingSearch.cs,GroupByFieldOrFunction,Cyclomatic complexity of the method is 17
Complex Method,Lucene.Net.Search.Grouping,TopGroups,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Grouping\TopGroups.cs,Merge,Cyclomatic complexity of the method is 25
Complex Method,Lucene.Net.Search.Grouping.Terms,OrdScoreAllGroupHeadsCollector,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Grouping\Term\TermAllGroupHeadsCollector.cs,SetNextReader,Cyclomatic complexity of the method is 9
Long Parameter List,Lucene.Net.Search.Grouping,AbstractSecondPassGroupingCollector,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Grouping\AbstractSecondPassGroupingCollector.cs,AbstractSecondPassGroupingCollector,The method has 7 parameters.
Long Parameter List,Lucene.Net.Search.Grouping,BlockGroupingCollector,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Grouping\BlockGroupingCollector.cs,GetTopGroups,The method has 5 parameters.
Long Parameter List,Lucene.Net.Search.Grouping,BlockGroupingCollector,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Grouping\BlockGroupingCollector.cs,GetTopGroups,The method has 5 parameters.
Long Parameter List,Lucene.Net.Search.Grouping,GroupDocs,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Grouping\GroupDocs.cs,GroupDocs,The method has 6 parameters.
Long Parameter List,Lucene.Net.Search.Grouping,GroupingSearch,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Grouping\GroupingSearch.cs,Search,The method has 5 parameters.
Long Parameter List,Lucene.Net.Search.Grouping,GroupingSearch,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Grouping\GroupingSearch.cs,Search,The method has 5 parameters.
Long Parameter List,Lucene.Net.Search.Grouping,GroupingSearch,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Grouping\GroupingSearch.cs,GroupByFieldOrFunction,The method has 5 parameters.
Long Parameter List,Lucene.Net.Search.Grouping,GroupingSearch,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Grouping\GroupingSearch.cs,GroupByDocBlock,The method has 5 parameters.
Long Parameter List,Lucene.Net.Search.Grouping,TopGroups,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Grouping\TopGroups.cs,TopGroups,The method has 6 parameters.
Long Parameter List,Lucene.Net.Search.Grouping,TopGroups,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Grouping\TopGroups.cs,Merge,The method has 6 parameters.
Long Parameter List,Lucene.Net.Search.Grouping.Function,FunctionSecondPassGroupingCollector,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Grouping\Function\FunctionSecondPassGroupingCollector.cs,FunctionSecondPassGroupingCollector,The method has 9 parameters.
Long Parameter List,Lucene.Net.Search.Grouping.Terms,TermGroupFacetCollector,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Grouping\Term\TermGroupFacetCollector.cs,CreateTermGroupFacetCollector,The method has 5 parameters.
Long Parameter List,Lucene.Net.Search.Grouping.Terms,TermSecondPassGroupingCollector,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Grouping\Term\TermSecondPassGroupingCollector.cs,TermSecondPassGroupingCollector,The method has 8 parameters.
Long Statement,Lucene.Net.Search.Grouping,AbstractFirstPassGroupingCollector,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Grouping\AbstractFirstPassGroupingCollector.cs,GetTopGroups,The length of the statement  "	//System.out.println("FP.getTopGroups groupOffset=" + groupOffset + " fillFields=" + fillFields + " groupMap.size()=" + groupMap.size()); " is 137.
Long Statement,Lucene.Net.Search.Grouping,AbstractSecondPassGroupingCollector,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Grouping\AbstractSecondPassGroupingCollector.cs,GetTopGroups,The length of the statement  "		AbstractSecondPassGroupingCollector.SearchGroupDocs<TGroupValue> groupDocs = m_groupMap.ContainsKey (group.GroupValue) ? m_groupMap [group.GroupValue] : null; " is 158.
Long Statement,Lucene.Net.Search.Grouping,AbstractSecondPassGroupingCollector,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Grouping\AbstractSecondPassGroupingCollector.cs,GetTopGroups,The length of the statement  "		groupDocsResult [groupIDX++] = new GroupDocs<TGroupValue> (float.NaN' topDocs.MaxScore' topDocs.TotalHits' topDocs.ScoreDocs' groupDocs.GroupValue' group.SortValues); " is 166.
Long Statement,Lucene.Net.Search.Grouping,AbstractSecondPassGroupingCollector,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Grouping\AbstractSecondPassGroupingCollector.cs,GetTopGroups,The length of the statement  "	return new TopGroups<TGroupValue> (groupSort.GetSort ()' withinGroupSort == null ? null : withinGroupSort.GetSort ()' totalHitCount' totalGroupedHitCount' groupDocsResult' maxScore); " is 182.
Long Statement,Lucene.Net.Search.Grouping,BlockGroupingCollector,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Grouping\BlockGroupingCollector.cs,ProcessGroup,The length of the statement  "	//System.out.println("    processGroup ord=" + lastGroupOrd + " competes=" + groupCompetes + " count=" + subDocUpto + " groupDoc=" + topGroupDoc); " is 146.
Long Statement,Lucene.Net.Search.Grouping,BlockGroupingCollector,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Grouping\BlockGroupingCollector.cs,ProcessGroup,The length of the statement  "			//System.out.println("      ADD group=" + getGroupString(lastGroupOrd) + " newBottom=" + getGroupString(bottomGroup.groupOrd)); " is 127.
Long Statement,Lucene.Net.Search.Grouping,BlockGroupingCollector,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Grouping\BlockGroupingCollector.cs,GetTopGroups,The length of the statement  "			collector = TopFieldCollector.Create (withinGroupSort' maxDocsPerGroup' fillSortFields' needsScores' needsScores' true); " is 120.
Long Statement,Lucene.Net.Search.Grouping,BlockGroupingCollector,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Grouping\BlockGroupingCollector.cs,GetTopGroups,The length of the statement  "		groups [downTo] = new GroupDocs<TGroupValue> (float.NaN' topDocs.MaxScore' og.count' topDocs.ScoreDocs' default(TGroupValue)' groupSortValues); " is 143.
Long Statement,Lucene.Net.Search.Grouping,BlockGroupingCollector,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Grouping\BlockGroupingCollector.cs,GetTopGroups,The length of the statement  "            */return new TopGroups<TGroupValue> (new TopGroups<TGroupValue> (groupSort.GetSort ()' withinGroupSort == null ? null : withinGroupSort.GetSort ()' totalHitCount' totalGroupedHitCount' groups' maxScore)' totalGroupCount); " is 221.
Long Statement,Lucene.Net.Search.Grouping,GroupingSearch,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Grouping\GroupingSearch.cs,GroupByFieldOrFunction,The length of the statement  "		firstPassCollector = (IAbstractFirstPassGroupingCollector<TGroupValue>)new FunctionFirstPassGroupingCollector (groupFunction' valueSourceContext' groupSort' topN); " is 163.
Long Statement,Lucene.Net.Search.Grouping,GroupingSearch,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Grouping\GroupingSearch.cs,GroupByFieldOrFunction,The length of the statement  "			allGroupsCollector = (IAbstractAllGroupsCollector<TGroupValue>)new FunctionAllGroupsCollector (groupFunction' valueSourceContext); " is 130.
Long Statement,Lucene.Net.Search.Grouping,GroupingSearch,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Grouping\GroupingSearch.cs,GroupByFieldOrFunction,The length of the statement  "		firstPassCollector = (IAbstractFirstPassGroupingCollector<TGroupValue>)new TermFirstPassGroupingCollector (groupField' groupSort' topN); " is 136.
Long Statement,Lucene.Net.Search.Grouping,GroupingSearch,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Grouping\GroupingSearch.cs,GroupByFieldOrFunction,The length of the statement  "		secondPassCollector = new FunctionSecondPassGroupingCollector (topSearchGroups as IEnumerable<ISearchGroup<MutableValue>>' groupSort' sortWithinGroup' topNInsideGroup' includeScores' includeMaxScore' fillSortFields' groupFunction' valueSourceContext) as IAbstractSecondPassGroupingCollector<TGroupValue>; " is 304.
Long Statement,Lucene.Net.Search.Grouping,GroupingSearch,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Grouping\GroupingSearch.cs,GroupByFieldOrFunction,The length of the statement  "		secondPassCollector = new TermSecondPassGroupingCollector (groupField' topSearchGroups as IEnumerable<ISearchGroup<BytesRef>>' groupSort' sortWithinGroup' topNInsideGroup' includeScores' includeMaxScore' fillSortFields) as IAbstractSecondPassGroupingCollector<TGroupValue>; " is 273.
Long Statement,Lucene.Net.Search.Grouping,TopGroups,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Grouping\TopGroups.cs,Merge,The length of the statement  "			throw new ArgumentException ("number of groups differs across shards; you must pass same top groups to all shards' second-pass collector"); " is 139.
Long Statement,Lucene.Net.Search.Grouping,TopGroups,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Grouping\TopGroups.cs,Merge,The length of the statement  "		//System.out.println("  merge groupValue=" + groupValue + " sortValues=" + Arrays.toString(shardGroups[0].groups[groupIDX].groupSortValues)); " is 141.
Long Statement,Lucene.Net.Search.Grouping,TopGroups,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Grouping\TopGroups.cs,Merge,The length of the statement  "					throw new ArgumentException ("group values differ across shards; you must pass same top groups to all shards' second-pass collector"); " is 134.
Long Statement,Lucene.Net.Search.Grouping,TopGroups,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Grouping\TopGroups.cs,Merge,The length of the statement  "				throw new ArgumentException ("group values differ across shards; you must pass same top groups to all shards' second-pass collector"); " is 134.
Long Statement,Lucene.Net.Search.Grouping,TopGroups,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Grouping\TopGroups.cs,Merge,The length of the statement  "		mergedGroupDocs [groupIDX] = new GroupDocs<T> (groupScore' maxScore' totalHits' mergedScoreDocs' groupValue' shardGroups [0].Groups [groupIDX].GroupSortValues); " is 160.
Long Statement,Lucene.Net.Search.Grouping,TopGroups,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Grouping\TopGroups.cs,Merge,The length of the statement  "		var result = new TopGroups<T> (groupSort.GetSort ()' docSort == null ? null : docSort.GetSort ()' totalHitCount' totalGroupedHitCount' mergedGroupDocs' totalMaxScore); " is 167.
Long Statement,Lucene.Net.Search.Grouping,TopGroups,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Grouping\TopGroups.cs,Merge,The length of the statement  "	return new TopGroups<T> (groupSort.GetSort ()' docSort == null ? null : docSort.GetSort ()' totalHitCount' totalGroupedHitCount' mergedGroupDocs' totalMaxScore); " is 161.
Magic Number,Lucene.Net.Search.Grouping,BlockGroupingCollector,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Grouping\BlockGroupingCollector.cs,ProcessGroup,The following statement contains a magic number: if (groupCompetes) {  	if (!queueFull) {  		// Startup transient: always add a new OneGroup  		OneGroup og = new OneGroup ();  		og.count = subDocUpto;  		og.topGroupDoc = docBase + topGroupDoc;  		og.docs = pendingSubDocs;  		pendingSubDocs = new int[10];  		if (needsScores) {  			og.scores = pendingSubScores;  			pendingSubScores = new float[10];  		}  		og.readerContext = currentReaderContext;  		//og.groupOrd = lastGroupOrd;  		og.comparerSlot = bottomSlot;  		OneGroup bottomGroup = groupQueue.Add (og);  		//System.out.println("      ADD group=" + getGroupString(lastGroupOrd) + " newBottom=" + getGroupString(bottomGroup.groupOrd));  		queueFull = groupQueue.Count == topNGroups;  		if (queueFull) {  			// Queue just became full; now set the real bottom  			// in the comparers:  			bottomSlot = bottomGroup.comparerSlot;  			//System.out.println("    set bottom=" + bottomSlot);  			for (int i = 0; i < comparers.Length; i++) {  				comparers [i].SetBottom (bottomSlot);  			}  			//System.out.println("     QUEUE FULL");  		} else {  			// Queue not full yet -- just advance bottomSlot:  			bottomSlot = groupQueue.Count;  		}  	} else {  		// Replace bottom element in PQ and then updateTop  		OneGroup og = groupQueue.Top;  		Debug.Assert (og != null);  		og.count = subDocUpto;  		og.topGroupDoc = docBase + topGroupDoc;  		// Swap pending docs  		int[] savDocs = og.docs;  		og.docs = pendingSubDocs;  		pendingSubDocs = savDocs;  		if (needsScores) {  			// Swap pending scores  			float[] savScores = og.scores;  			og.scores = pendingSubScores;  			pendingSubScores = savScores;  		}  		og.readerContext = currentReaderContext;  		//og.groupOrd = lastGroupOrd;  		bottomSlot = groupQueue.UpdateTop ().comparerSlot;  		//System.out.println("    set bottom=" + bottomSlot);  		for (int i = 0; i < comparers.Length; i++) {  			comparers [i].SetBottom (bottomSlot);  		}  	}  }  
Magic Number,Lucene.Net.Search.Grouping,BlockGroupingCollector,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Grouping\BlockGroupingCollector.cs,ProcessGroup,The following statement contains a magic number: if (groupCompetes) {  	if (!queueFull) {  		// Startup transient: always add a new OneGroup  		OneGroup og = new OneGroup ();  		og.count = subDocUpto;  		og.topGroupDoc = docBase + topGroupDoc;  		og.docs = pendingSubDocs;  		pendingSubDocs = new int[10];  		if (needsScores) {  			og.scores = pendingSubScores;  			pendingSubScores = new float[10];  		}  		og.readerContext = currentReaderContext;  		//og.groupOrd = lastGroupOrd;  		og.comparerSlot = bottomSlot;  		OneGroup bottomGroup = groupQueue.Add (og);  		//System.out.println("      ADD group=" + getGroupString(lastGroupOrd) + " newBottom=" + getGroupString(bottomGroup.groupOrd));  		queueFull = groupQueue.Count == topNGroups;  		if (queueFull) {  			// Queue just became full; now set the real bottom  			// in the comparers:  			bottomSlot = bottomGroup.comparerSlot;  			//System.out.println("    set bottom=" + bottomSlot);  			for (int i = 0; i < comparers.Length; i++) {  				comparers [i].SetBottom (bottomSlot);  			}  			//System.out.println("     QUEUE FULL");  		} else {  			// Queue not full yet -- just advance bottomSlot:  			bottomSlot = groupQueue.Count;  		}  	} else {  		// Replace bottom element in PQ and then updateTop  		OneGroup og = groupQueue.Top;  		Debug.Assert (og != null);  		og.count = subDocUpto;  		og.topGroupDoc = docBase + topGroupDoc;  		// Swap pending docs  		int[] savDocs = og.docs;  		og.docs = pendingSubDocs;  		pendingSubDocs = savDocs;  		if (needsScores) {  			// Swap pending scores  			float[] savScores = og.scores;  			og.scores = pendingSubScores;  			pendingSubScores = savScores;  		}  		og.readerContext = currentReaderContext;  		//og.groupOrd = lastGroupOrd;  		bottomSlot = groupQueue.UpdateTop ().comparerSlot;  		//System.out.println("    set bottom=" + bottomSlot);  		for (int i = 0; i < comparers.Length; i++) {  			comparers [i].SetBottom (bottomSlot);  		}  	}  }  
Magic Number,Lucene.Net.Search.Grouping,BlockGroupingCollector,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Grouping\BlockGroupingCollector.cs,ProcessGroup,The following statement contains a magic number: if (!queueFull) {  	// Startup transient: always add a new OneGroup  	OneGroup og = new OneGroup ();  	og.count = subDocUpto;  	og.topGroupDoc = docBase + topGroupDoc;  	og.docs = pendingSubDocs;  	pendingSubDocs = new int[10];  	if (needsScores) {  		og.scores = pendingSubScores;  		pendingSubScores = new float[10];  	}  	og.readerContext = currentReaderContext;  	//og.groupOrd = lastGroupOrd;  	og.comparerSlot = bottomSlot;  	OneGroup bottomGroup = groupQueue.Add (og);  	//System.out.println("      ADD group=" + getGroupString(lastGroupOrd) + " newBottom=" + getGroupString(bottomGroup.groupOrd));  	queueFull = groupQueue.Count == topNGroups;  	if (queueFull) {  		// Queue just became full; now set the real bottom  		// in the comparers:  		bottomSlot = bottomGroup.comparerSlot;  		//System.out.println("    set bottom=" + bottomSlot);  		for (int i = 0; i < comparers.Length; i++) {  			comparers [i].SetBottom (bottomSlot);  		}  		//System.out.println("     QUEUE FULL");  	} else {  		// Queue not full yet -- just advance bottomSlot:  		bottomSlot = groupQueue.Count;  	}  } else {  	// Replace bottom element in PQ and then updateTop  	OneGroup og = groupQueue.Top;  	Debug.Assert (og != null);  	og.count = subDocUpto;  	og.topGroupDoc = docBase + topGroupDoc;  	// Swap pending docs  	int[] savDocs = og.docs;  	og.docs = pendingSubDocs;  	pendingSubDocs = savDocs;  	if (needsScores) {  		// Swap pending scores  		float[] savScores = og.scores;  		og.scores = pendingSubScores;  		pendingSubScores = savScores;  	}  	og.readerContext = currentReaderContext;  	//og.groupOrd = lastGroupOrd;  	bottomSlot = groupQueue.UpdateTop ().comparerSlot;  	//System.out.println("    set bottom=" + bottomSlot);  	for (int i = 0; i < comparers.Length; i++) {  		comparers [i].SetBottom (bottomSlot);  	}  }  
Magic Number,Lucene.Net.Search.Grouping,BlockGroupingCollector,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Grouping\BlockGroupingCollector.cs,ProcessGroup,The following statement contains a magic number: if (!queueFull) {  	// Startup transient: always add a new OneGroup  	OneGroup og = new OneGroup ();  	og.count = subDocUpto;  	og.topGroupDoc = docBase + topGroupDoc;  	og.docs = pendingSubDocs;  	pendingSubDocs = new int[10];  	if (needsScores) {  		og.scores = pendingSubScores;  		pendingSubScores = new float[10];  	}  	og.readerContext = currentReaderContext;  	//og.groupOrd = lastGroupOrd;  	og.comparerSlot = bottomSlot;  	OneGroup bottomGroup = groupQueue.Add (og);  	//System.out.println("      ADD group=" + getGroupString(lastGroupOrd) + " newBottom=" + getGroupString(bottomGroup.groupOrd));  	queueFull = groupQueue.Count == topNGroups;  	if (queueFull) {  		// Queue just became full; now set the real bottom  		// in the comparers:  		bottomSlot = bottomGroup.comparerSlot;  		//System.out.println("    set bottom=" + bottomSlot);  		for (int i = 0; i < comparers.Length; i++) {  			comparers [i].SetBottom (bottomSlot);  		}  		//System.out.println("     QUEUE FULL");  	} else {  		// Queue not full yet -- just advance bottomSlot:  		bottomSlot = groupQueue.Count;  	}  } else {  	// Replace bottom element in PQ and then updateTop  	OneGroup og = groupQueue.Top;  	Debug.Assert (og != null);  	og.count = subDocUpto;  	og.topGroupDoc = docBase + topGroupDoc;  	// Swap pending docs  	int[] savDocs = og.docs;  	og.docs = pendingSubDocs;  	pendingSubDocs = savDocs;  	if (needsScores) {  		// Swap pending scores  		float[] savScores = og.scores;  		og.scores = pendingSubScores;  		pendingSubScores = savScores;  	}  	og.readerContext = currentReaderContext;  	//og.groupOrd = lastGroupOrd;  	bottomSlot = groupQueue.UpdateTop ().comparerSlot;  	//System.out.println("    set bottom=" + bottomSlot);  	for (int i = 0; i < comparers.Length; i++) {  		comparers [i].SetBottom (bottomSlot);  	}  }  
Magic Number,Lucene.Net.Search.Grouping,BlockGroupingCollector,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Grouping\BlockGroupingCollector.cs,ProcessGroup,The following statement contains a magic number: pendingSubDocs = new int[10];  
Magic Number,Lucene.Net.Search.Grouping,BlockGroupingCollector,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Grouping\BlockGroupingCollector.cs,ProcessGroup,The following statement contains a magic number: if (needsScores) {  	og.scores = pendingSubScores;  	pendingSubScores = new float[10];  }  
Magic Number,Lucene.Net.Search.Grouping,BlockGroupingCollector,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Grouping\BlockGroupingCollector.cs,ProcessGroup,The following statement contains a magic number: pendingSubScores = new float[10];  
Magic Number,Lucene.Net.Search.Grouping,BlockGroupingCollector,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Grouping\BlockGroupingCollector.cs,BlockGroupingCollector,The following statement contains a magic number: pendingSubDocs = new int[10];  
Magic Number,Lucene.Net.Search.Grouping,BlockGroupingCollector,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Grouping\BlockGroupingCollector.cs,BlockGroupingCollector,The following statement contains a magic number: if (needsScores) {  	pendingSubScores = new float[10];  }  
Magic Number,Lucene.Net.Search.Grouping,BlockGroupingCollector,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Grouping\BlockGroupingCollector.cs,BlockGroupingCollector,The following statement contains a magic number: pendingSubScores = new float[10];  
Magic Number,Lucene.Net.Search.Grouping.Terms,OrdScoreAllGroupHeadsCollector,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Grouping\Term\TermAllGroupHeadsCollector.cs,OrdScoreAllGroupHeadsCollector,The following statement contains a magic number: ordSet = new SentinelInt32Set (initialSize' -2);  
Magic Number,Lucene.Net.Search.Grouping.Terms,OrdAllGroupHeadsCollector,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Grouping\Term\TermAllGroupHeadsCollector.cs,OrdAllGroupHeadsCollector,The following statement contains a magic number: ordSet = new SentinelInt32Set (initialSize' -2);  
Magic Number,Lucene.Net.Search.Grouping.Terms,ScoreAllGroupHeadsCollector,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Grouping\Term\TermAllGroupHeadsCollector.cs,ScoreAllGroupHeadsCollector,The following statement contains a magic number: ordSet = new SentinelInt32Set (initialSize' -2);  
Magic Number,Lucene.Net.Search.Grouping.Terms,TermAllGroupsCollector,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Grouping\Term\TermAllGroupsCollector.cs,TermAllGroupsCollector,The following statement contains a magic number: ordSet = new SentinelInt32Set (initialSize' -2);  
Magic Number,Lucene.Net.Search.Grouping.Terms,TermDistinctValuesCollector,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Grouping\Term\TermDistinctValuesCollector.cs,TermDistinctValuesCollector,The following statement contains a magic number: ordSet = new SentinelInt32Set (groupCount' -2);  
Magic Number,Lucene.Net.Search.Grouping.Terms,TermDistinctValuesCollector,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Grouping\Term\TermDistinctValuesCollector.cs,SetNextReader,The following statement contains a magic number: foreach (GroupCount group in groups) {  	int groupOrd = group.GroupValue == null ? -1 : groupFieldTermIndex.LookupTerm (group.GroupValue);  	if (group.GroupValue != null && groupOrd < 0) {  		continue;  	}  	groupCounts [ordSet.Put (groupOrd)] = group;  	group.ords = new int[group.UniqueValues.Count ()];  	Arrays.Fill (group.ords' -2);  	int i = 0;  	foreach (BytesRef value2 in group.UniqueValues) {  		int countOrd = value2 == null ? -1 : countFieldTermIndex.LookupTerm (value2);  		if (value2 == null || countOrd >= 0) {  			group.ords [i++] = countOrd;  		}  	}  }  
Magic Number,Lucene.Net.Search.Grouping.Terms,TermDistinctValuesCollector,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Grouping\Term\TermDistinctValuesCollector.cs,SetNextReader,The following statement contains a magic number: Arrays.Fill (group.ords' -2);  
Magic Number,Lucene.Net.Search.Grouping.Terms,TermSecondPassGroupingCollector,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Grouping\Term\TermSecondPassGroupingCollector.cs,TermSecondPassGroupingCollector,The following statement contains a magic number: ordSet = new SentinelInt32Set (m_groupMap.Count' -2);  
