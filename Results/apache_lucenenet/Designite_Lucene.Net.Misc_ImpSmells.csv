Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Lucene.Net.Index,CompoundFileExtractor,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Misc\Index\CompoundFileExtractor.cs,Main,Cyclomatic complexity of the method is 16
Complex Method,Lucene.Net.Index,MultiPassIndexSplitter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Misc\Index\MultiPassIndexSplitter.cs,Split,Cyclomatic complexity of the method is 12
Complex Method,Lucene.Net.Index,MultiPassIndexSplitter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Misc\Index\MultiPassIndexSplitter.cs,Main,Cyclomatic complexity of the method is 15
Complex Method,Lucene.Net.Index.Sorter,Sorter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Misc\Index\Sorter\Sorter.cs,Sort,Cyclomatic complexity of the method is 8
Complex Method,Lucene.Net.Misc,HighFreqTerms,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Misc\Misc\HighFreqTerms.cs,Main,Cyclomatic complexity of the method is 8
Complex Method,Lucene.Net.Misc,HighFreqTerms,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Misc\Misc\HighFreqTerms.cs,GetHighFreqTerms,Cyclomatic complexity of the method is 8
Long Parameter List,Lucene.Net.Index,PKIndexSplitter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Misc\Index\PKIndexSplitter.cs,PKIndexSplitter,The method has 5 parameters.
Long Parameter List,Lucene.Net.Index,PKIndexSplitter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Misc\Index\PKIndexSplitter.cs,PKIndexSplitter,The method has 6 parameters.
Long Parameter List,Lucene.Net.Index,PKIndexSplitter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Misc\Index\PKIndexSplitter.cs,PKIndexSplitter,The method has 5 parameters.
Long Parameter List,Lucene.Net.Index,PKIndexSplitter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Misc\Index\PKIndexSplitter.cs,PKIndexSplitter,The method has 6 parameters.
Long Parameter List,Lucene.Net.Index,PKIndexSplitter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Misc\Index\PKIndexSplitter.cs,CreateIndex,The method has 5 parameters.
Long Statement,Lucene.Net.Index,IndexSplitter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Misc\Index\IndexSplitter.cs,Split,The length of the statement  "		SegmentInfo newInfo = new SegmentInfo (destFSDir' info.Version' info.Name' info.DocCount' info.UseCompoundFile' info.Codec' info.Diagnostics); " is 142.
Long Statement,Lucene.Net.Index,IndexSplitter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Misc\Index\IndexSplitter.cs,Split,The length of the statement  "		destInfos.Add (new SegmentCommitInfo (newInfo' infoPerCommit.DelCount' infoPerCommit.DelGen' infoPerCommit.FieldInfosGen)); " is 123.
Long Statement,Lucene.Net.Index,MultiPassIndexSplitter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Misc\Index\MultiPassIndexSplitter.cs,Main,The length of the statement  "		Console.Error.WriteLine ("Usage: MultiPassIndexSplitter -out <outputDir> -num <numParts> [-seq] <inputIndex1> [<inputIndex2 ...]"); " is 131.
Long Statement,Lucene.Net.Index.Sorter,BlockJoinComparerSource,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Misc\Index\Sorter\BlockJoinComparatorSource.cs,NewComparer,The length of the statement  "	return new FieldComparerAnonymousInnerClassHelper (this' parentSlots' childSlots' parentReverseMul' parentComparers' childReverseMul' childComparers); " is 150.
Long Statement,Lucene.Net.Index.Sorter,SortingAtomicReader,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Misc\Index\Sorter\SortingAtomicReader.cs,Wrap,The length of the statement  "		throw new System.ArgumentException ("reader.MaxDoc should be equal to docMap.Count' got" + reader.MaxDoc + " != " + docMap.Count); " is 130.
Long Statement,Lucene.Net.Index.Sorter,SortingMergePolicy,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Misc\Index\Sorter\SortingMergePolicy.cs,IsSorted,The length of the statement  "		if (diagnostics != null && diagnostics.TryGetValue (SORTER_ID_PROP' out diagnosticsSort) && sort.ToString ().Equals (diagnosticsSort)) { " is 136.
Long Statement,Lucene.Net.Misc,GetTermInfo,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Misc\Misc\GetTermInfo.cs,TermInfo,The length of the statement  "	Console.WriteLine ("{0}:{1} \t totalTF = {2:#'##0} \t doc freq = {3:#'##0} \n"' term.Field' term.Text ()' reader.TotalTermFreq (term)' reader.DocFreq (term)); " is 158.
Long Statement,Lucene.Net.Misc,HighFreqTerms,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Misc\Misc\HighFreqTerms.cs,Main,The length of the statement  "			Console.WriteLine ("{0}:{1} \t totalTF = {2:#'##0} \t doc freq = {3:#'##0} \n"' terms [i].Field' terms [i].GetTermText ()' terms [i].TotalTermFreq' terms [i].DocFreq); " is 167.
Long Statement,Lucene.Net.Misc,HighFreqTerms,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Misc\Misc\HighFreqTerms.cs,Usage,The length of the statement  "	Console.WriteLine ("\n\n" + "java org.apache.lucene.misc.HighFreqTerms <index dir> [-t] [number_terms] [field]\n\t -t: order by totalTermFreq\n\n"); " is 148.
Long Statement,Lucene.Net.Misc,SweetSpotSimilarity,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Misc\Misc\SweetSpotSimilarity.cs,HyperbolicTf,The length of the statement  "	float result = min + (float)((max - min) / 2.0f * (((Math.Pow (@base' x) - Math.Pow (@base' -x)) / (Math.Pow (@base' x) + Math.Pow (@base' -x))) + 1.0d)); " is 154.
Long Statement,Lucene.Net.Util.Fst,ListOfOutputs,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Misc\Util\Fst\ListOfOutputs.cs,Merge,The length of the statement  "	//System.out.println("MERGE: now " + outputList.size() + " first=" + outputToString(first) + " second=" + outputToString(second)); " is 130.
Magic Number,Lucene.Net.Index,CompoundFileExtractor,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Misc\Index\CompoundFileExtractor.cs,Main,The following statement contains a magic number: try {  	FileInfo file = new FileInfo (filename);  	string dirname = file.DirectoryName;  	filename = file.Name;  	if (dirImpl == null) {  		dir = FSDirectory.Open (new DirectoryInfo (dirname));  	} else {  		dir = CommandLineUtil.NewFSDirectory (dirImpl' new DirectoryInfo (dirname));  	}  	cfr = new CompoundFileDirectory (dir' filename' IOContext.DEFAULT' false);  	string[] files = cfr.ListAll ();  	ArrayUtil.TimSort (files);  	// sort the array of filename so that the output is more readable  	for (int i = 0; i < files.Length; ++i) {  		long len = cfr.FileLength (files [i]);  		if (extract) {  			Console.WriteLine ("extract " + files [i] + " with " + len + " bytes to local directory...");  			using (IndexInput ii = cfr.OpenInput (files [i]' context)) {  				using (FileStream f = new FileStream (files [i]' FileMode.Open' FileAccess.ReadWrite)) {  					// read and write with a small buffer' which is more effective than reading byte by byte  					byte[] buffer = new byte[1024];  					int chunk = buffer.Length;  					while (len > 0) {  						int bufLen = (int)Math.Min (chunk' len);  						ii.ReadBytes (buffer' 0' bufLen);  						f.Write (buffer' 0' bufLen);  						len -= bufLen;  					}  				}  			}  		} else {  			Console.WriteLine (files [i] + ": " + len + " bytes");  		}  	}  } catch (IOException ioe) {  	Console.WriteLine (ioe.ToString ());  	Console.Write (ioe.StackTrace);  } finally {  	try {  		if (dir != null) {  			dir.Dispose ();  		}  		if (cfr != null) {  			cfr.Dispose ();  		}  	} catch (IOException ioe) {  		Console.WriteLine (ioe.ToString ());  		Console.Write (ioe.StackTrace);  	}  }  
Magic Number,Lucene.Net.Index,CompoundFileExtractor,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Misc\Index\CompoundFileExtractor.cs,Main,The following statement contains a magic number: for (int i = 0; i < files.Length; ++i) {  	long len = cfr.FileLength (files [i]);  	if (extract) {  		Console.WriteLine ("extract " + files [i] + " with " + len + " bytes to local directory...");  		using (IndexInput ii = cfr.OpenInput (files [i]' context)) {  			using (FileStream f = new FileStream (files [i]' FileMode.Open' FileAccess.ReadWrite)) {  				// read and write with a small buffer' which is more effective than reading byte by byte  				byte[] buffer = new byte[1024];  				int chunk = buffer.Length;  				while (len > 0) {  					int bufLen = (int)Math.Min (chunk' len);  					ii.ReadBytes (buffer' 0' bufLen);  					f.Write (buffer' 0' bufLen);  					len -= bufLen;  				}  			}  		}  	} else {  		Console.WriteLine (files [i] + ": " + len + " bytes");  	}  }  
Magic Number,Lucene.Net.Index,CompoundFileExtractor,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Misc\Index\CompoundFileExtractor.cs,Main,The following statement contains a magic number: if (extract) {  	Console.WriteLine ("extract " + files [i] + " with " + len + " bytes to local directory...");  	using (IndexInput ii = cfr.OpenInput (files [i]' context)) {  		using (FileStream f = new FileStream (files [i]' FileMode.Open' FileAccess.ReadWrite)) {  			// read and write with a small buffer' which is more effective than reading byte by byte  			byte[] buffer = new byte[1024];  			int chunk = buffer.Length;  			while (len > 0) {  				int bufLen = (int)Math.Min (chunk' len);  				ii.ReadBytes (buffer' 0' bufLen);  				f.Write (buffer' 0' bufLen);  				len -= bufLen;  			}  		}  	}  } else {  	Console.WriteLine (files [i] + ": " + len + " bytes");  }  
Magic Number,Lucene.Net.Index,CompoundFileExtractor,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Misc\Index\CompoundFileExtractor.cs,Main,The following statement contains a magic number: using (IndexInput ii = cfr.OpenInput (files [i]' context)) {  	using (FileStream f = new FileStream (files [i]' FileMode.Open' FileAccess.ReadWrite)) {  		// read and write with a small buffer' which is more effective than reading byte by byte  		byte[] buffer = new byte[1024];  		int chunk = buffer.Length;  		while (len > 0) {  			int bufLen = (int)Math.Min (chunk' len);  			ii.ReadBytes (buffer' 0' bufLen);  			f.Write (buffer' 0' bufLen);  			len -= bufLen;  		}  	}  }  
Magic Number,Lucene.Net.Index,CompoundFileExtractor,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Misc\Index\CompoundFileExtractor.cs,Main,The following statement contains a magic number: using (FileStream f = new FileStream (files [i]' FileMode.Open' FileAccess.ReadWrite)) {  	// read and write with a small buffer' which is more effective than reading byte by byte  	byte[] buffer = new byte[1024];  	int chunk = buffer.Length;  	while (len > 0) {  		int bufLen = (int)Math.Min (chunk' len);  		ii.ReadBytes (buffer' 0' bufLen);  		f.Write (buffer' 0' bufLen);  		len -= bufLen;  	}  }  
Magic Number,Lucene.Net.Index,IndexSplitter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Misc\Index\IndexSplitter.cs,Main,The following statement contains a magic number: if (args.Length < 2) {  	Console.Error.WriteLine ("Usage: IndexSplitter <srcDir> -l (list the segments and their sizes)");  	Console.Error.WriteLine ("IndexSplitter <srcDir> <destDir> <segments>+");  	Console.Error.WriteLine ("IndexSplitter <srcDir> -d (delete the following segments)");  	return;  }  
Magic Number,Lucene.Net.Index,IndexSplitter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Misc\Index\IndexSplitter.cs,Main,The following statement contains a magic number: if (args [1].Equals ("-l")) {  	@is.ListSegments ();  } else if (args [1].Equals ("-d")) {  	IList<string> segs = new List<string> ();  	for (int x = 2; x < args.Length; x++) {  		segs.Add (args [x]);  	}  	@is.Remove (segs.ToArray ());  } else {  	DirectoryInfo targetDir = new DirectoryInfo (args [1]);  	IList<string> segs = new List<string> ();  	for (int x = 2; x < args.Length; x++) {  		segs.Add (args [x]);  	}  	@is.Split (targetDir' segs.ToArray ());  }  
Magic Number,Lucene.Net.Index,IndexSplitter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Misc\Index\IndexSplitter.cs,Main,The following statement contains a magic number: if (args [1].Equals ("-l")) {  	@is.ListSegments ();  } else if (args [1].Equals ("-d")) {  	IList<string> segs = new List<string> ();  	for (int x = 2; x < args.Length; x++) {  		segs.Add (args [x]);  	}  	@is.Remove (segs.ToArray ());  } else {  	DirectoryInfo targetDir = new DirectoryInfo (args [1]);  	IList<string> segs = new List<string> ();  	for (int x = 2; x < args.Length; x++) {  		segs.Add (args [x]);  	}  	@is.Split (targetDir' segs.ToArray ());  }  
Magic Number,Lucene.Net.Index,IndexSplitter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Misc\Index\IndexSplitter.cs,Main,The following statement contains a magic number: if (args [1].Equals ("-d")) {  	IList<string> segs = new List<string> ();  	for (int x = 2; x < args.Length; x++) {  		segs.Add (args [x]);  	}  	@is.Remove (segs.ToArray ());  } else {  	DirectoryInfo targetDir = new DirectoryInfo (args [1]);  	IList<string> segs = new List<string> ();  	for (int x = 2; x < args.Length; x++) {  		segs.Add (args [x]);  	}  	@is.Split (targetDir' segs.ToArray ());  }  
Magic Number,Lucene.Net.Index,IndexSplitter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Misc\Index\IndexSplitter.cs,Main,The following statement contains a magic number: if (args [1].Equals ("-d")) {  	IList<string> segs = new List<string> ();  	for (int x = 2; x < args.Length; x++) {  		segs.Add (args [x]);  	}  	@is.Remove (segs.ToArray ());  } else {  	DirectoryInfo targetDir = new DirectoryInfo (args [1]);  	IList<string> segs = new List<string> ();  	for (int x = 2; x < args.Length; x++) {  		segs.Add (args [x]);  	}  	@is.Split (targetDir' segs.ToArray ());  }  
Magic Number,Lucene.Net.Index,IndexSplitter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Misc\Index\IndexSplitter.cs,Main,The following statement contains a magic number: for (int x = 2; x < args.Length; x++) {  	segs.Add (args [x]);  }  
Magic Number,Lucene.Net.Index,IndexSplitter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Misc\Index\IndexSplitter.cs,Main,The following statement contains a magic number: for (int x = 2; x < args.Length; x++) {  	segs.Add (args [x]);  }  
Magic Number,Lucene.Net.Index,MultiPassIndexSplitter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Misc\Index\MultiPassIndexSplitter.cs,Split,The following statement contains a magic number: if (outputs == null || outputs.Length < 2) {  	throw new IOException ("Invalid number of outputs.");  }  
Magic Number,Lucene.Net.Index,MultiPassIndexSplitter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Misc\Index\MultiPassIndexSplitter.cs,Split,The following statement contains a magic number: if (@in == null || @in.NumDocs < 2) {  	throw new IOException ("Not enough documents for splitting");  }  
Magic Number,Lucene.Net.Index,MultiPassIndexSplitter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Misc\Index\MultiPassIndexSplitter.cs,Main,The following statement contains a magic number: if (args.Length < 5) {  	Console.Error.WriteLine ("Usage: MultiPassIndexSplitter -out <outputDir> -num <numParts> [-seq] <inputIndex1> [<inputIndex2 ...]");  	Console.Error.WriteLine ("\tinputIndex\tpath to input index' multiple values are ok");  	Console.Error.WriteLine ("\t-out ouputDir\tpath to output directory to contain partial indexes");  	Console.Error.WriteLine ("\t-num numParts\tnumber of parts to produce");  	Console.Error.WriteLine ("\t-seq\tsequential docid-range split (default is round-robin)");  	Environment.Exit (-1);  }  
Magic Number,Lucene.Net.Index,MultiPassIndexSplitter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Misc\Index\MultiPassIndexSplitter.cs,Main,The following statement contains a magic number: if (numParts < 2) {  	throw new Exception ("Invalid value of required argument: -num numParts");  }  
Magic Number,Lucene.Net.Misc,GetTermInfo,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Misc\Misc\GetTermInfo.cs,Main,The following statement contains a magic number: if (args.Length == 3) {  	dir = FSDirectory.Open (new DirectoryInfo (args [0]));  	field = args [1];  	inputStr = args [2];  } else {  	Usage ();  	Environment.Exit (1);  }  
Magic Number,Lucene.Net.Misc,GetTermInfo,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Misc\Misc\GetTermInfo.cs,Main,The following statement contains a magic number: if (args.Length == 3) {  	dir = FSDirectory.Open (new DirectoryInfo (args [0]));  	field = args [1];  	inputStr = args [2];  } else {  	Usage ();  	Environment.Exit (1);  }  
Magic Number,Lucene.Net.Misc,GetTermInfo,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Misc\Misc\GetTermInfo.cs,Main,The following statement contains a magic number: inputStr = args [2];  
Magic Number,Lucene.Net.Misc,HighFreqTerms,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Misc\Misc\HighFreqTerms.cs,Main,The following statement contains a magic number: if (args.Length == 0 || args.Length > 4) {  	Usage ();  	Environment.Exit (1);  }  
Magic Number,Lucene.Net.Misc,IndexMergeTool,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Misc\Misc\IndexMergeTool.cs,Main,The following statement contains a magic number: if (args.Length < 3) {  	Console.Error.WriteLine ("Usage: IndexMergeTool <mergedIndex> <index1> <index2> [index3] ...");  	Environment.Exit (1);  }  
Magic Number,Lucene.Net.Misc,IndexMergeTool,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Misc\Misc\IndexMergeTool.cs,Main,The following statement contains a magic number: using (IndexWriter writer = new IndexWriter (mergedIndex'   #pragma  new IndexWriterConfig (LuceneVersion.LUCENE_CURRENT' null)  #pragma   {  	OpenMode = OpenMode.CREATE  })) {  	Directory[] indexes = new Directory[args.Length - 1];  	for (int i = 1; i < args.Length; i++) {  		indexes [i - 1] = FSDirectory.Open (new System.IO.DirectoryInfo (args [i]));  	}  	Console.WriteLine ("Merging...");  	writer.AddIndexes (indexes);  	Console.WriteLine ("Full merge...");  	writer.ForceMerge (1);  }  
Magic Number,Lucene.Net.Misc,IndexMergeTool,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Misc\Misc\IndexMergeTool.cs,Main,The following statement contains a magic number: using (IndexWriter writer = new IndexWriter (mergedIndex'   #pragma  new IndexWriterConfig (LuceneVersion.LUCENE_CURRENT' null)  #pragma   {  	OpenMode = OpenMode.CREATE  })) {  	Directory[] indexes = new Directory[args.Length - 1];  	for (int i = 1; i < args.Length; i++) {  		indexes [i - 1] = FSDirectory.Open (new System.IO.DirectoryInfo (args [i]));  	}  	Console.WriteLine ("Merging...");  	writer.AddIndexes (indexes);  	Console.WriteLine ("Full merge...");  	writer.ForceMerge (1);  }  
Magic Number,Lucene.Net.Misc,IndexMergeTool,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Misc\Misc\IndexMergeTool.cs,Main,The following statement contains a magic number: using (IndexWriter writer = new IndexWriter (mergedIndex'   #pragma  new IndexWriterConfig (LuceneVersion.LUCENE_CURRENT' null)  #pragma   {  	OpenMode = OpenMode.CREATE  })) {  	Directory[] indexes = new Directory[args.Length - 1];  	for (int i = 1; i < args.Length; i++) {  		indexes [i - 1] = FSDirectory.Open (new System.IO.DirectoryInfo (args [i]));  	}  	Console.WriteLine ("Merging...");  	writer.AddIndexes (indexes);  	Console.WriteLine ("Full merge...");  	writer.ForceMerge (1);  }  
Magic Number,Lucene.Net.Misc,IndexMergeTool,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Misc\Misc\IndexMergeTool.cs,Main,The following statement contains a magic number: using (IndexWriter writer = new IndexWriter (mergedIndex'   #pragma  new IndexWriterConfig (LuceneVersion.LUCENE_CURRENT' null)  #pragma   {  	OpenMode = OpenMode.CREATE  })) {  	Directory[] indexes = new Directory[args.Length - 1];  	for (int i = 1; i < args.Length; i++) {  		indexes [i - 1] = FSDirectory.Open (new System.IO.DirectoryInfo (args [i]));  	}  	Console.WriteLine ("Merging...");  	writer.AddIndexes (indexes);  	Console.WriteLine ("Full merge...");  	writer.ForceMerge (1);  }  
