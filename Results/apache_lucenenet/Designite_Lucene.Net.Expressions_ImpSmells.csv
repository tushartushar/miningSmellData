Implementation smell,Namespace,Class,File,Method,Description
Long Method,Lucene.Net.Expressions.JS,JavascriptCompiler,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptCompiler.cs,RecursiveCompile,The method has 203 lines of code.
Long Method,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MDECIMAL,The method has 129 lines of code.
Long Method,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The method has 399 lines of code.
Complex Method,Lucene.Net.Expressions,ExpressionValueSource,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\ExpressionValueSource.cs,ExpressionValueSource,Cyclomatic complexity of the method is 8
Complex Method,Lucene.Net.Expressions,ExpressionValueSource,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\ExpressionValueSource.cs,Equals,Cyclomatic complexity of the method is 9
Complex Method,Lucene.Net.Expressions,SimpleBindings,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\SimpleBindings.cs,GetValueSource,Cyclomatic complexity of the method is 14
Complex Method,Lucene.Net.Expressions.JS,JavascriptCompiler,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptCompiler.cs,RecursiveCompile,Cyclomatic complexity of the method is 64
Complex Method,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MID,Cyclomatic complexity of the method is 9
Complex Method,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MWS,Cyclomatic complexity of the method is 9
Complex Method,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MDECIMAL,Cyclomatic complexity of the method is 25
Complex Method,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MOCTAL,Cyclomatic complexity of the method is 9
Complex Method,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MHEX,Cyclomatic complexity of the method is 15
Complex Method,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MDECIMALINTEGER,Cyclomatic complexity of the method is 12
Complex Method,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MEXPONENT,Cyclomatic complexity of the method is 13
Complex Method,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,Cyclomatic complexity of the method is 202
Complex Method,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,DisplayRecognitionError,Cyclomatic complexity of the method is 8
Complex Method,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,GetReadableTokenString,Cyclomatic complexity of the method is 61
Complex Method,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Logical_Or,Cyclomatic complexity of the method is 8
Complex Method,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Logical_And,Cyclomatic complexity of the method is 8
Complex Method,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Bitwise_Or,Cyclomatic complexity of the method is 8
Complex Method,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Bitwise_XOr,Cyclomatic complexity of the method is 8
Complex Method,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Bitwise_And,Cyclomatic complexity of the method is 8
Complex Method,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Equality,Cyclomatic complexity of the method is 9
Complex Method,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Relational,Cyclomatic complexity of the method is 9
Complex Method,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Shift,Cyclomatic complexity of the method is 9
Complex Method,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Additive,Cyclomatic complexity of the method is 9
Complex Method,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Multiplicative,Cyclomatic complexity of the method is 9
Complex Method,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Unary,Cyclomatic complexity of the method is 20
Complex Method,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Unary_Operator,Cyclomatic complexity of the method is 15
Complex Method,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Postfix,Cyclomatic complexity of the method is 12
Complex Method,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Primary,Cyclomatic complexity of the method is 16
Complex Method,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Arguments,Cyclomatic complexity of the method is 10
Long Statement,Lucene.Net.Expressions,ExpressionRescorer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\ExpressionRescorer.cs,Explain,The length of the statement  "		result.AddDetail (new Explanation ((float)bindings.GetValueSource (variable).GetValues (context' readerContext).DoubleVal (docIDInSegment)' "variable \"" + variable + "\"")); " is 174.
Long Statement,Lucene.Net.Expressions.JS,JavascriptCompiler,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptCompiler.cs,CompileExpression,The length of the statement  "		return (Expression)Activator.CreateInstance (dynamicType.CreateTypeInfo ().AsType ()' sourceText' externalsMap.Keys.ToArray ()); " is 128.
Long Statement,Lucene.Net.Expressions.JS,JavascriptCompiler,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptCompiler.cs,CompileExpression,The length of the statement  "		throw new InvalidOperationException ("An internal error occurred attempting to compile the expression (" + sourceText + ")."' exception); " is 137.
Long Statement,Lucene.Net.Expressions.JS,JavascriptCompiler,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptCompiler.cs,CompileExpression,The length of the statement  "		throw new InvalidOperationException ("An internal error occurred attempting to compile the expression (" + sourceText + ")."' exception); " is 137.
Long Statement,Lucene.Net.Expressions.JS,JavascriptCompiler,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptCompiler.cs,BeginCompile,The length of the statement  "	dynamicType = modBuilder.DefineType (COMPILED_EXPRESSION_CLASS' TypeAttributes.AnsiClass | TypeAttributes.AutoClass | TypeAttributes.Public | TypeAttributes.Class | TypeAttributes.BeforeFieldInit | TypeAttributes.AutoLayout' EXPRESSION_TYPE); " is 242.
Long Statement,Lucene.Net.Expressions.JS,JavascriptCompiler,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptCompiler.cs,BeginCompile,The length of the statement  "	ConstructorBuilder constructorBuilder = dynamicType.DefineConstructor (MethodAttributes.Public' CallingConventions.HasThis' new[] { " is 131.
Long Statement,Lucene.Net.Expressions.JS,JavascriptCompiler,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptCompiler.cs,BeginCompile,The length of the statement  "	evalMethod = dynamicType.DefineMethod ("Evaluate"' MethodAttributes.Public | MethodAttributes.Virtual' typeof(double)' new[] { " is 126.
Long Statement,Lucene.Net.Expressions.JS,JavascriptCompiler,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptCompiler.cs,RecursiveCompile,The length of the statement  "			throw new ArgumentException ("Expected (" + arity + ") arguments for method call (" + call + ")' but found (" + arguments + ")."); " is 130.
Long Statement,Lucene.Net.Expressions.JS,JavascriptCompiler,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptCompiler.cs,GetDefaultSettings,The length of the statement  "            using (var reader = new StreamReader(assembly.FindAndGetManifestResourceStream(type' type.GetTypeInfo().Name + ".properties")))" is 127.
Long Statement,Lucene.Net.Expressions.JS,JavascriptCompiler,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptCompiler.cs,GetDefaultSettings,The length of the statement  "	return props.Properties.Cast<SettingsProperty> ().ToDictionary (key => key.Name' value => props [value.Name].ToString ()); " is 122.
Long Statement,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MID,The length of the statement  "			// src/java/org/apache/lucene/expressions/js/Javascript.g:340:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* ) " is 150.
Long Statement,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MID,The length of the statement  "			// src/java/org/apache/lucene/expressions/js/Javascript.g:340:7: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* " is 146.
Long Statement,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MID,The length of the statement  "			if ((input.LA (1) >= 'A' && input.LA (1) <= 'Z') || input.LA (1) == '_' || (input.LA (1) >= 'a' && input.LA (1) <= 'z')) { " is 122.
Long Statement,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MID,The length of the statement  "				if (((LA2_0 >= '0' && LA2_0 <= '9') || (LA2_0 >= 'A' && LA2_0 <= 'Z') || LA2_0 == '_' || (LA2_0 >= 'a' && LA2_0 <= 'z'))) { " is 123.
Long Statement,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MID,The length of the statement  "					if ((input.LA (1) >= '0' && input.LA (1) <= '9') || (input.LA (1) >= 'A' && input.LA (1) <= 'Z') || input.LA (1) == '_' || (input.LA (1) >= 'a' && input.LA (1) <= 'z')) { " is 170.
Long Statement,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MDECIMAL,The length of the statement  "		// src/java/org/apache/lucene/expressions/js/Javascript.g:347:5: ( DECIMALINTEGER AT_DOT ( DECIMALDIGIT )* ( EXPONENT )? | AT_DOT ( DECIMALDIGIT )+ ( EXPONENT )? | DECIMALINTEGER ( EXPONENT )? ) " is 194.
Long Statement,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MHEX,The length of the statement  "					if ((input.LA (1) >= '0' && input.LA (1) <= '9') || (input.LA (1) >= 'A' && input.LA (1) <= 'F') || (input.LA (1) >= 'a' && input.LA (1) <= 'f')) { " is 147.
Long Statement,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MHEXDIGIT,The length of the statement  "			if ((input.LA (1) >= '0' && input.LA (1) <= '9') || (input.LA (1) >= 'A' && input.LA (1) <= 'F') || (input.LA (1) >= 'a' && input.LA (1) <= 'f')) { " is 147.
Long Statement,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The length of the statement  "	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:8: ( AT_ADD | AT_BIT_AND | AT_BIT_NOT | AT_BIT_OR | AT_BIT_SHL | AT_BIT_SHR | AT_BIT_SHU | AT_BIT_XOR | AT_BOOL_AND | AT_BOOL_NOT | AT_BOOL_OR | AT_COLON | AT_COMMA | AT_COMP_EQ | AT_COMP_GT | AT_COMP_GTE | AT_COMP_LT | AT_COMP_LTE | AT_COMP_NEQ | AT_COND_QUE | AT_DIVIDE | AT_DOT | AT_LPAREN | AT_MODULO | AT_MULTIPLY | AT_RPAREN | AT_SUBTRACT | NAMESPACE_ID | WS | DECIMAL | OCTAL | HEX ) " is 450.
Long Statement,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,DisplayRecognitionError,The length of the statement  "						message = " invalid sequence of tokens near " + GetReadableTokenString (re.Token) + " at position (" + re.CharPositionInLine + ")."; " is 132.
Long Statement,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Conditional,The length of the statement  "			// src/java/org/apache/lucene/expressions/js/Javascript.g:255:5: ( logical_or ( AT_COND_QUE ^ conditional AT_COLON ! conditional )? ) " is 133.
Long Statement,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Conditional,The length of the statement  "			// src/java/org/apache/lucene/expressions/js/Javascript.g:255:7: logical_or ( AT_COND_QUE ^ conditional AT_COLON ! conditional )? " is 129.
Long Statement,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Equality,The length of the statement  "			// src/java/org/apache/lucene/expressions/js/Javascript.g:279:5: ( relational ( ( AT_COMP_EQ | AT_COMP_NEQ ) ^ relational )* ) " is 126.
Long Statement,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Equality,The length of the statement  "			// src/java/org/apache/lucene/expressions/js/Javascript.g:279:7: relational ( ( AT_COMP_EQ | AT_COMP_NEQ ) ^ relational )* " is 122.
Long Statement,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Relational,The length of the statement  "			// src/java/org/apache/lucene/expressions/js/Javascript.g:283:5: ( shift ( ( AT_COMP_LT | AT_COMP_GT | AT_COMP_LTE | AT_COMP_GTE ) ^ shift )* ) " is 143.
Long Statement,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Relational,The length of the statement  "			// src/java/org/apache/lucene/expressions/js/Javascript.g:283:7: shift ( ( AT_COMP_LT | AT_COMP_GT | AT_COMP_LTE | AT_COMP_GTE ) ^ shift )* " is 139.
Long Statement,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Relational,The length of the statement  "			// src/java/org/apache/lucene/expressions/js/Javascript.g:283:13: ( ( AT_COMP_LT | AT_COMP_GT | AT_COMP_LTE | AT_COMP_GTE ) ^ shift )* " is 134.
Long Statement,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Relational,The length of the statement  "					// src/java/org/apache/lucene/expressions/js/Javascript.g:283:14: ( AT_COMP_LT | AT_COMP_GT | AT_COMP_LTE | AT_COMP_GTE ) ^ shift " is 129.
Long Statement,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Shift,The length of the statement  "			// src/java/org/apache/lucene/expressions/js/Javascript.g:287:5: ( additive ( ( AT_BIT_SHL | AT_BIT_SHR | AT_BIT_SHU ) ^ additive )* ) " is 134.
Long Statement,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Shift,The length of the statement  "			// src/java/org/apache/lucene/expressions/js/Javascript.g:287:7: additive ( ( AT_BIT_SHL | AT_BIT_SHR | AT_BIT_SHU ) ^ additive )* " is 130.
Long Statement,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Shift,The length of the statement  "			// src/java/org/apache/lucene/expressions/js/Javascript.g:287:16: ( ( AT_BIT_SHL | AT_BIT_SHR | AT_BIT_SHU ) ^ additive )* " is 122.
Long Statement,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Additive,The length of the statement  "			// src/java/org/apache/lucene/expressions/js/Javascript.g:291:5: ( multiplicative ( ( AT_ADD | AT_SUBTRACT ) ^ multiplicative )* ) " is 130.
Long Statement,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Additive,The length of the statement  "			// src/java/org/apache/lucene/expressions/js/Javascript.g:291:7: multiplicative ( ( AT_ADD | AT_SUBTRACT ) ^ multiplicative )* " is 126.
Long Statement,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Multiplicative,The length of the statement  "			// src/java/org/apache/lucene/expressions/js/Javascript.g:295:5: ( unary ( ( AT_MULTIPLY | AT_DIVIDE | AT_MODULO ) ^ unary )* ) " is 127.
Long Statement,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Multiplicative,The length of the statement  "			// src/java/org/apache/lucene/expressions/js/Javascript.g:295:7: unary ( ( AT_MULTIPLY | AT_DIVIDE | AT_MODULO ) ^ unary )* " is 123.
Long Statement,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Unary_Operator,The length of the statement  "		// src/java/org/apache/lucene/expressions/js/Javascript.g:305:5: ( AT_SUBTRACT -> AT_NEGATE | AT_BIT_NOT | AT_BOOL_NOT ) " is 120.
Long Statement,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Unary_Operator,The length of the statement  "			RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream (m_adaptor' "rule retval"' retval != null ? ((CommonTree)retval.Tree) : null); " is 148.
Long Statement,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Postfix,The length of the statement  "		// src/java/org/apache/lucene/expressions/js/Javascript.g:311:5: ( primary | NAMESPACE_ID arguments -> ^( AT_CALL NAMESPACE_ID ( arguments )? ) ) " is 145.
Long Statement,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Postfix,The length of the statement  "			if ((LA14_1 == EOF || (LA14_1 >= AT_ADD && LA14_1 <= AT_BIT_AND) || (LA14_1 >= AT_BIT_OR && LA14_1 <= AT_BOOL_AND) || LA14_1 == AT_BOOL_OR || (LA14_1 >= AT_COLON && LA14_1 <= AT_DIVIDE) || (LA14_1 >= AT_MODULO && LA14_1 <= AT_MULTIPLY) || (LA14_1 >= AT_RPAREN && LA14_1 <= AT_SUBTRACT))) { " is 289.
Long Statement,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Postfix,The length of the statement  "			RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream (m_adaptor' "rule retval"' retval != null ? ((CommonTree)retval.Tree) : null); " is 148.
Long Statement,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Primary,The length of the statement  "		// src/java/org/apache/lucene/expressions/js/Javascript.g:316:5: ( NAMESPACE_ID | numeric | AT_LPAREN ! conditional AT_RPAREN !) " is 128.
Long Statement,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Arguments,The length of the statement  "			// src/java/org/apache/lucene/expressions/js/Javascript.g:322:5: ( AT_LPAREN ! ( conditional ( AT_COMMA ! conditional )* )? AT_RPAREN !) " is 136.
Long Statement,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Arguments,The length of the statement  "			// src/java/org/apache/lucene/expressions/js/Javascript.g:322:7: AT_LPAREN ! ( conditional ( AT_COMMA ! conditional )* )? AT_RPAREN ! " is 133.
Long Statement,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Arguments,The length of the statement  "			if ((LA17_0 == AT_ADD || LA17_0 == AT_BIT_NOT || LA17_0 == AT_BOOL_NOT || LA17_0 == AT_LPAREN || (LA17_0 >= AT_SUBTRACT && LA17_0 <= DECIMAL) || LA17_0 == HEX || (LA17_0 >= NAMESPACE_ID && LA17_0 <= OCTAL))) { " is 209.
Complex Conditional,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MID,The conditional expression  "(input.LA (1) >= 'A' && input.LA (1) <= 'Z') || input.LA (1) == '_' || (input.LA (1) >= 'a' && input.LA (1) <= 'z')"  is complex.
Complex Conditional,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MID,The conditional expression  "((LA2_0 >= '0' && LA2_0 <= '9') || (LA2_0 >= 'A' && LA2_0 <= 'Z') || LA2_0 == '_' || (LA2_0 >= 'a' && LA2_0 <= 'z'))"  is complex.
Complex Conditional,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MID,The conditional expression  "(input.LA (1) >= '0' && input.LA (1) <= '9') || (input.LA (1) >= 'A' && input.LA (1) <= 'Z') || input.LA (1) == '_' || (input.LA (1) >= 'a' && input.LA (1) <= 'z')"  is complex.
Complex Conditional,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MWS,The conditional expression  "((LA3_0 >= '\t' && LA3_0 <= '\n') || LA3_0 == '\r' || LA3_0 == ' ')"  is complex.
Complex Conditional,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MWS,The conditional expression  "(input.LA (1) >= '\t' && input.LA (1) <= '\n') || input.LA (1) == '\r' || input.LA (1) == ' '"  is complex.
Complex Conditional,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MHEX,The conditional expression  "((LA12_0 >= '0' && LA12_0 <= '9') || (LA12_0 >= 'A' && LA12_0 <= 'F') || (LA12_0 >= 'a' && LA12_0 <= 'f'))"  is complex.
Complex Conditional,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MHEX,The conditional expression  "(input.LA (1) >= '0' && input.LA (1) <= '9') || (input.LA (1) >= 'A' && input.LA (1) <= 'F') || (input.LA (1) >= 'a' && input.LA (1) <= 'f')"  is complex.
Complex Conditional,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MHEXDIGIT,The conditional expression  "(input.LA (1) >= '0' && input.LA (1) <= '9') || (input.LA (1) >= 'A' && input.LA (1) <= 'F') || (input.LA (1) >= 'a' && input.LA (1) <= 'f')"  is complex.
Complex Conditional,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Postfix,The conditional expression  "(LA14_1 == EOF || (LA14_1 >= AT_ADD && LA14_1 <= AT_BIT_AND) || (LA14_1 >= AT_BIT_OR && LA14_1 <= AT_BOOL_AND) || LA14_1 == AT_BOOL_OR || (LA14_1 >= AT_COLON && LA14_1 <= AT_DIVIDE) || (LA14_1 >= AT_MODULO && LA14_1 <= AT_MULTIPLY) || (LA14_1 >= AT_RPAREN && LA14_1 <= AT_SUBTRACT))"  is complex.
Complex Conditional,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Postfix,The conditional expression  "(LA14_0 == AT_LPAREN || LA14_0 == DECIMAL || LA14_0 == HEX || LA14_0 == OCTAL)"  is complex.
Complex Conditional,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Arguments,The conditional expression  "(LA17_0 == AT_ADD || LA17_0 == AT_BIT_NOT || LA17_0 == AT_BOOL_NOT || LA17_0 == AT_LPAREN || (LA17_0 >= AT_SUBTRACT && LA17_0 <= DECIMAL) || LA17_0 == HEX || (LA17_0 >= NAMESPACE_ID && LA17_0 <= OCTAL))"  is complex.
Virtual Method Call from Constructor,Lucene.Net.Expressions,ExpressionRescorer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\ExpressionRescorer.cs,ExpressionRescorer,The constructor "ExpressionRescorer" calls a virtual method "GetSortField".
Virtual Method Call from Constructor,Lucene.Net.Expressions,ExpressionValueSource,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\ExpressionValueSource.cs,ExpressionValueSource,The constructor "ExpressionValueSource" calls a virtual method "GetValueSource".
Magic Number,Lucene.Net.Expressions,ExpressionValueSource,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\ExpressionValueSource.cs,GetHashCode,The following statement contains a magic number: result = prime * result + (needsScores ? 1231 : 1237);  
Magic Number,Lucene.Net.Expressions,ExpressionValueSource,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\ExpressionValueSource.cs,GetHashCode,The following statement contains a magic number: result = prime * result + (needsScores ? 1231 : 1237);  
Magic Number,Lucene.Net.Expressions.JS,JavascriptCompiler,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptCompiler.cs,RecursiveCompile,The following statement contains a magic number: switch (type) {  case JavascriptParser.AT_CALL: {  	ITree identifier = current.GetChild (0);  	string call = identifier.Text;  	int arguments = current.ChildCount - 1;  	MethodInfo method;  	if (!functions.TryGetValue (call' out method) || method == null) {  		throw new ArgumentException ("Unrecognized method call (" + call + ").");  	}  	int arity = method.GetParameters ().Length;  	if (arguments != arity) {  		throw new ArgumentException ("Expected (" + arity + ") arguments for method call (" + call + ")' but found (" + arguments + ").");  	}  	for (int argument = 1; argument <= arguments; ++argument) {  		RecursiveCompile (current.GetChild (argument)' typeof(double));  	}  	gen.Emit (OpCodes.Call' method);  	break;  }  case JavascriptParser.NAMESPACE_ID: {  	int index;  	if (externalsMap.ContainsKey (text)) {  		index = externalsMap [text];  	} else {  		index = externalsMap.Count;  		externalsMap [text] = index;  	}  	gen.Emit (OpCodes.Nop);  	gen.Emit (OpCodes.Ldarg_2);  	gen.Emit (OpCodes.Ldc_I4' index);  	gen.Emit (OpCodes.Ldelem_Ref);  	gen.Emit (OpCodes.Ldarg_1);  	gen.Emit (OpCodes.Callvirt' DOUBLE_VAL_METHOD);  	break;  }  case JavascriptParser.HEX: {  	PushInt64 (Convert.ToInt64 (text' 16));  	break;  }  case JavascriptParser.OCTAL: {  	PushInt64 (Convert.ToInt64 (text' 8));  	break;  }  case JavascriptParser.DECIMAL: {  	//.NET Port. This is a bit hack-y but was needed since .NET can't perform bitwise ops on longs & doubles  	var bitwiseOps = new[] {  		">>"'  		"<<"'  		"&"'  		"~"'  		"|"'  		"^"  	};  	if (bitwiseOps.Any (s => sourceText.Contains (s))) {  		int val;  		if (int.TryParse (text' NumberStyles.Integer' CultureInfo.InvariantCulture' out val)) {  			gen.Emit (OpCodes.Ldc_I4' val);  		} else {  			gen.Emit (OpCodes.Ldc_I8' long.Parse (text' CultureInfo.InvariantCulture));  			gen.Emit (OpCodes.Conv_Ovf_U4_Un);  		}  	} else {  		gen.Emit (OpCodes.Ldc_R8' double.Parse (text' CultureInfo.InvariantCulture));  	}  	break;  }  case JavascriptParser.AT_NEGATE: {  	RecursiveCompile (current.GetChild (0)' typeof(double));  	gen.Emit (OpCodes.Neg);  	break;  }  case JavascriptParser.AT_ADD: {  	PushArith (OpCodes.Add' current' expected);  	break;  }  case JavascriptParser.AT_SUBTRACT: {  	PushArith (OpCodes.Sub' current' expected);  	break;  }  case JavascriptParser.AT_MULTIPLY: {  	PushArith (OpCodes.Mul' current' expected);  	break;  }  case JavascriptParser.AT_DIVIDE: {  	PushArith (OpCodes.Div' current' expected);  	break;  }  case JavascriptParser.AT_MODULO: {  	PushArith (OpCodes.Rem' current' expected);  	break;  }  case JavascriptParser.AT_BIT_SHL: {  	PushShift (OpCodes.Shl' current);  	break;  }  case JavascriptParser.AT_BIT_SHR: {  	PushShift (OpCodes.Shr' current);  	break;  }  case JavascriptParser.AT_BIT_SHU: {  	PushShift (OpCodes.Shr_Un' current);  	break;  }  case JavascriptParser.AT_BIT_AND: {  	PushBitwise (OpCodes.And' current);  	break;  }  case JavascriptParser.AT_BIT_OR: {  	PushBitwise (OpCodes.Or' current);  	break;  }  case JavascriptParser.AT_BIT_XOR: {  	PushBitwise (OpCodes.Xor' current);  	break;  }  case JavascriptParser.AT_BIT_NOT: {  	RecursiveCompile (current.GetChild (0)' typeof(long));  	gen.Emit (OpCodes.Not);  	gen.Emit (OpCodes.Conv_R8);  	break;  }  case JavascriptParser.AT_COMP_EQ: {  	PushCond (OpCodes.Ceq' current' expected);  	break;  }  case JavascriptParser.AT_COMP_NEQ: {  	PushCondEq (OpCodes.Ceq' current' expected);  	break;  }  case JavascriptParser.AT_COMP_LT: {  	PushCond (OpCodes.Clt' current' expected);  	break;  }  case JavascriptParser.AT_COMP_GT: {  	PushCond (OpCodes.Cgt' current' expected);  	break;  }  case JavascriptParser.AT_COMP_LTE: {  	PushCondEq (OpCodes.Cgt' current' expected);  	break;  }  case JavascriptParser.AT_COMP_GTE: {  	PushCondEq (OpCodes.Clt' current' expected);  	break;  }  case JavascriptParser.AT_BOOL_NOT: {  	RecursiveCompile (current.GetChild (0)' typeof(int));  	gen.Emit (OpCodes.Ldc_I4_0);  	gen.Emit (OpCodes.Ceq);  	gen.Emit (OpCodes.Conv_R8);  	break;  }  case JavascriptParser.AT_BOOL_AND: {  	RecursiveCompile (current.GetChild (0)' typeof(int));  	gen.Emit (OpCodes.Ldc_I4_0);  	gen.Emit (OpCodes.Ceq);  	RecursiveCompile (current.GetChild (1)' typeof(int));  	gen.Emit (OpCodes.Ldc_I4_0);  	gen.Emit (OpCodes.Ceq);  	gen.Emit (OpCodes.Or);  	gen.Emit (OpCodes.Ldc_I4_0);  	gen.Emit (OpCodes.Ceq);  	gen.Emit (OpCodes.Conv_R8);  	break;  }  case JavascriptParser.AT_BOOL_OR: {  	RecursiveCompile (current.GetChild (0)' typeof(int));  	gen.Emit (OpCodes.Ldc_I4_0);  	gen.Emit (OpCodes.Ceq);  	gen.Emit (OpCodes.Ldc_I4_1);  	gen.Emit (OpCodes.Xor);  	RecursiveCompile (current.GetChild (1)' typeof(int));  	gen.Emit (OpCodes.Ldc_I4_0);  	gen.Emit (OpCodes.Ceq);  	gen.Emit (OpCodes.Ldc_I4_1);  	gen.Emit (OpCodes.Xor);  	gen.Emit (OpCodes.Or);  	gen.Emit (OpCodes.Ldc_I4_1);  	gen.Emit (OpCodes.Ceq);  	gen.Emit (OpCodes.Conv_R8);  	break;  }  case JavascriptParser.AT_COND_QUE: {  	Label condFalse = gen.DefineLabel ();  	Label condEnd = gen.DefineLabel ();  	RecursiveCompile (current.GetChild (0)' typeof(int));  	gen.Emit (OpCodes.Ldc_I4_0);  	gen.Emit (OpCodes.Beq' condFalse);  	RecursiveCompile (current.GetChild (1)' expected);  	gen.Emit (OpCodes.Br_S' condEnd);  	gen.MarkLabel (condFalse);  	RecursiveCompile (current.GetChild (2)' expected);  	gen.MarkLabel (condEnd);  	break;  }  default: {  	throw new InvalidOperationException ("Unknown operation specified: (" + current.Text + ").");  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptCompiler,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptCompiler.cs,RecursiveCompile,The following statement contains a magic number: switch (type) {  case JavascriptParser.AT_CALL: {  	ITree identifier = current.GetChild (0);  	string call = identifier.Text;  	int arguments = current.ChildCount - 1;  	MethodInfo method;  	if (!functions.TryGetValue (call' out method) || method == null) {  		throw new ArgumentException ("Unrecognized method call (" + call + ").");  	}  	int arity = method.GetParameters ().Length;  	if (arguments != arity) {  		throw new ArgumentException ("Expected (" + arity + ") arguments for method call (" + call + ")' but found (" + arguments + ").");  	}  	for (int argument = 1; argument <= arguments; ++argument) {  		RecursiveCompile (current.GetChild (argument)' typeof(double));  	}  	gen.Emit (OpCodes.Call' method);  	break;  }  case JavascriptParser.NAMESPACE_ID: {  	int index;  	if (externalsMap.ContainsKey (text)) {  		index = externalsMap [text];  	} else {  		index = externalsMap.Count;  		externalsMap [text] = index;  	}  	gen.Emit (OpCodes.Nop);  	gen.Emit (OpCodes.Ldarg_2);  	gen.Emit (OpCodes.Ldc_I4' index);  	gen.Emit (OpCodes.Ldelem_Ref);  	gen.Emit (OpCodes.Ldarg_1);  	gen.Emit (OpCodes.Callvirt' DOUBLE_VAL_METHOD);  	break;  }  case JavascriptParser.HEX: {  	PushInt64 (Convert.ToInt64 (text' 16));  	break;  }  case JavascriptParser.OCTAL: {  	PushInt64 (Convert.ToInt64 (text' 8));  	break;  }  case JavascriptParser.DECIMAL: {  	//.NET Port. This is a bit hack-y but was needed since .NET can't perform bitwise ops on longs & doubles  	var bitwiseOps = new[] {  		">>"'  		"<<"'  		"&"'  		"~"'  		"|"'  		"^"  	};  	if (bitwiseOps.Any (s => sourceText.Contains (s))) {  		int val;  		if (int.TryParse (text' NumberStyles.Integer' CultureInfo.InvariantCulture' out val)) {  			gen.Emit (OpCodes.Ldc_I4' val);  		} else {  			gen.Emit (OpCodes.Ldc_I8' long.Parse (text' CultureInfo.InvariantCulture));  			gen.Emit (OpCodes.Conv_Ovf_U4_Un);  		}  	} else {  		gen.Emit (OpCodes.Ldc_R8' double.Parse (text' CultureInfo.InvariantCulture));  	}  	break;  }  case JavascriptParser.AT_NEGATE: {  	RecursiveCompile (current.GetChild (0)' typeof(double));  	gen.Emit (OpCodes.Neg);  	break;  }  case JavascriptParser.AT_ADD: {  	PushArith (OpCodes.Add' current' expected);  	break;  }  case JavascriptParser.AT_SUBTRACT: {  	PushArith (OpCodes.Sub' current' expected);  	break;  }  case JavascriptParser.AT_MULTIPLY: {  	PushArith (OpCodes.Mul' current' expected);  	break;  }  case JavascriptParser.AT_DIVIDE: {  	PushArith (OpCodes.Div' current' expected);  	break;  }  case JavascriptParser.AT_MODULO: {  	PushArith (OpCodes.Rem' current' expected);  	break;  }  case JavascriptParser.AT_BIT_SHL: {  	PushShift (OpCodes.Shl' current);  	break;  }  case JavascriptParser.AT_BIT_SHR: {  	PushShift (OpCodes.Shr' current);  	break;  }  case JavascriptParser.AT_BIT_SHU: {  	PushShift (OpCodes.Shr_Un' current);  	break;  }  case JavascriptParser.AT_BIT_AND: {  	PushBitwise (OpCodes.And' current);  	break;  }  case JavascriptParser.AT_BIT_OR: {  	PushBitwise (OpCodes.Or' current);  	break;  }  case JavascriptParser.AT_BIT_XOR: {  	PushBitwise (OpCodes.Xor' current);  	break;  }  case JavascriptParser.AT_BIT_NOT: {  	RecursiveCompile (current.GetChild (0)' typeof(long));  	gen.Emit (OpCodes.Not);  	gen.Emit (OpCodes.Conv_R8);  	break;  }  case JavascriptParser.AT_COMP_EQ: {  	PushCond (OpCodes.Ceq' current' expected);  	break;  }  case JavascriptParser.AT_COMP_NEQ: {  	PushCondEq (OpCodes.Ceq' current' expected);  	break;  }  case JavascriptParser.AT_COMP_LT: {  	PushCond (OpCodes.Clt' current' expected);  	break;  }  case JavascriptParser.AT_COMP_GT: {  	PushCond (OpCodes.Cgt' current' expected);  	break;  }  case JavascriptParser.AT_COMP_LTE: {  	PushCondEq (OpCodes.Cgt' current' expected);  	break;  }  case JavascriptParser.AT_COMP_GTE: {  	PushCondEq (OpCodes.Clt' current' expected);  	break;  }  case JavascriptParser.AT_BOOL_NOT: {  	RecursiveCompile (current.GetChild (0)' typeof(int));  	gen.Emit (OpCodes.Ldc_I4_0);  	gen.Emit (OpCodes.Ceq);  	gen.Emit (OpCodes.Conv_R8);  	break;  }  case JavascriptParser.AT_BOOL_AND: {  	RecursiveCompile (current.GetChild (0)' typeof(int));  	gen.Emit (OpCodes.Ldc_I4_0);  	gen.Emit (OpCodes.Ceq);  	RecursiveCompile (current.GetChild (1)' typeof(int));  	gen.Emit (OpCodes.Ldc_I4_0);  	gen.Emit (OpCodes.Ceq);  	gen.Emit (OpCodes.Or);  	gen.Emit (OpCodes.Ldc_I4_0);  	gen.Emit (OpCodes.Ceq);  	gen.Emit (OpCodes.Conv_R8);  	break;  }  case JavascriptParser.AT_BOOL_OR: {  	RecursiveCompile (current.GetChild (0)' typeof(int));  	gen.Emit (OpCodes.Ldc_I4_0);  	gen.Emit (OpCodes.Ceq);  	gen.Emit (OpCodes.Ldc_I4_1);  	gen.Emit (OpCodes.Xor);  	RecursiveCompile (current.GetChild (1)' typeof(int));  	gen.Emit (OpCodes.Ldc_I4_0);  	gen.Emit (OpCodes.Ceq);  	gen.Emit (OpCodes.Ldc_I4_1);  	gen.Emit (OpCodes.Xor);  	gen.Emit (OpCodes.Or);  	gen.Emit (OpCodes.Ldc_I4_1);  	gen.Emit (OpCodes.Ceq);  	gen.Emit (OpCodes.Conv_R8);  	break;  }  case JavascriptParser.AT_COND_QUE: {  	Label condFalse = gen.DefineLabel ();  	Label condEnd = gen.DefineLabel ();  	RecursiveCompile (current.GetChild (0)' typeof(int));  	gen.Emit (OpCodes.Ldc_I4_0);  	gen.Emit (OpCodes.Beq' condFalse);  	RecursiveCompile (current.GetChild (1)' expected);  	gen.Emit (OpCodes.Br_S' condEnd);  	gen.MarkLabel (condFalse);  	RecursiveCompile (current.GetChild (2)' expected);  	gen.MarkLabel (condEnd);  	break;  }  default: {  	throw new InvalidOperationException ("Unknown operation specified: (" + current.Text + ").");  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptCompiler,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptCompiler.cs,RecursiveCompile,The following statement contains a magic number: switch (type) {  case JavascriptParser.AT_CALL: {  	ITree identifier = current.GetChild (0);  	string call = identifier.Text;  	int arguments = current.ChildCount - 1;  	MethodInfo method;  	if (!functions.TryGetValue (call' out method) || method == null) {  		throw new ArgumentException ("Unrecognized method call (" + call + ").");  	}  	int arity = method.GetParameters ().Length;  	if (arguments != arity) {  		throw new ArgumentException ("Expected (" + arity + ") arguments for method call (" + call + ")' but found (" + arguments + ").");  	}  	for (int argument = 1; argument <= arguments; ++argument) {  		RecursiveCompile (current.GetChild (argument)' typeof(double));  	}  	gen.Emit (OpCodes.Call' method);  	break;  }  case JavascriptParser.NAMESPACE_ID: {  	int index;  	if (externalsMap.ContainsKey (text)) {  		index = externalsMap [text];  	} else {  		index = externalsMap.Count;  		externalsMap [text] = index;  	}  	gen.Emit (OpCodes.Nop);  	gen.Emit (OpCodes.Ldarg_2);  	gen.Emit (OpCodes.Ldc_I4' index);  	gen.Emit (OpCodes.Ldelem_Ref);  	gen.Emit (OpCodes.Ldarg_1);  	gen.Emit (OpCodes.Callvirt' DOUBLE_VAL_METHOD);  	break;  }  case JavascriptParser.HEX: {  	PushInt64 (Convert.ToInt64 (text' 16));  	break;  }  case JavascriptParser.OCTAL: {  	PushInt64 (Convert.ToInt64 (text' 8));  	break;  }  case JavascriptParser.DECIMAL: {  	//.NET Port. This is a bit hack-y but was needed since .NET can't perform bitwise ops on longs & doubles  	var bitwiseOps = new[] {  		">>"'  		"<<"'  		"&"'  		"~"'  		"|"'  		"^"  	};  	if (bitwiseOps.Any (s => sourceText.Contains (s))) {  		int val;  		if (int.TryParse (text' NumberStyles.Integer' CultureInfo.InvariantCulture' out val)) {  			gen.Emit (OpCodes.Ldc_I4' val);  		} else {  			gen.Emit (OpCodes.Ldc_I8' long.Parse (text' CultureInfo.InvariantCulture));  			gen.Emit (OpCodes.Conv_Ovf_U4_Un);  		}  	} else {  		gen.Emit (OpCodes.Ldc_R8' double.Parse (text' CultureInfo.InvariantCulture));  	}  	break;  }  case JavascriptParser.AT_NEGATE: {  	RecursiveCompile (current.GetChild (0)' typeof(double));  	gen.Emit (OpCodes.Neg);  	break;  }  case JavascriptParser.AT_ADD: {  	PushArith (OpCodes.Add' current' expected);  	break;  }  case JavascriptParser.AT_SUBTRACT: {  	PushArith (OpCodes.Sub' current' expected);  	break;  }  case JavascriptParser.AT_MULTIPLY: {  	PushArith (OpCodes.Mul' current' expected);  	break;  }  case JavascriptParser.AT_DIVIDE: {  	PushArith (OpCodes.Div' current' expected);  	break;  }  case JavascriptParser.AT_MODULO: {  	PushArith (OpCodes.Rem' current' expected);  	break;  }  case JavascriptParser.AT_BIT_SHL: {  	PushShift (OpCodes.Shl' current);  	break;  }  case JavascriptParser.AT_BIT_SHR: {  	PushShift (OpCodes.Shr' current);  	break;  }  case JavascriptParser.AT_BIT_SHU: {  	PushShift (OpCodes.Shr_Un' current);  	break;  }  case JavascriptParser.AT_BIT_AND: {  	PushBitwise (OpCodes.And' current);  	break;  }  case JavascriptParser.AT_BIT_OR: {  	PushBitwise (OpCodes.Or' current);  	break;  }  case JavascriptParser.AT_BIT_XOR: {  	PushBitwise (OpCodes.Xor' current);  	break;  }  case JavascriptParser.AT_BIT_NOT: {  	RecursiveCompile (current.GetChild (0)' typeof(long));  	gen.Emit (OpCodes.Not);  	gen.Emit (OpCodes.Conv_R8);  	break;  }  case JavascriptParser.AT_COMP_EQ: {  	PushCond (OpCodes.Ceq' current' expected);  	break;  }  case JavascriptParser.AT_COMP_NEQ: {  	PushCondEq (OpCodes.Ceq' current' expected);  	break;  }  case JavascriptParser.AT_COMP_LT: {  	PushCond (OpCodes.Clt' current' expected);  	break;  }  case JavascriptParser.AT_COMP_GT: {  	PushCond (OpCodes.Cgt' current' expected);  	break;  }  case JavascriptParser.AT_COMP_LTE: {  	PushCondEq (OpCodes.Cgt' current' expected);  	break;  }  case JavascriptParser.AT_COMP_GTE: {  	PushCondEq (OpCodes.Clt' current' expected);  	break;  }  case JavascriptParser.AT_BOOL_NOT: {  	RecursiveCompile (current.GetChild (0)' typeof(int));  	gen.Emit (OpCodes.Ldc_I4_0);  	gen.Emit (OpCodes.Ceq);  	gen.Emit (OpCodes.Conv_R8);  	break;  }  case JavascriptParser.AT_BOOL_AND: {  	RecursiveCompile (current.GetChild (0)' typeof(int));  	gen.Emit (OpCodes.Ldc_I4_0);  	gen.Emit (OpCodes.Ceq);  	RecursiveCompile (current.GetChild (1)' typeof(int));  	gen.Emit (OpCodes.Ldc_I4_0);  	gen.Emit (OpCodes.Ceq);  	gen.Emit (OpCodes.Or);  	gen.Emit (OpCodes.Ldc_I4_0);  	gen.Emit (OpCodes.Ceq);  	gen.Emit (OpCodes.Conv_R8);  	break;  }  case JavascriptParser.AT_BOOL_OR: {  	RecursiveCompile (current.GetChild (0)' typeof(int));  	gen.Emit (OpCodes.Ldc_I4_0);  	gen.Emit (OpCodes.Ceq);  	gen.Emit (OpCodes.Ldc_I4_1);  	gen.Emit (OpCodes.Xor);  	RecursiveCompile (current.GetChild (1)' typeof(int));  	gen.Emit (OpCodes.Ldc_I4_0);  	gen.Emit (OpCodes.Ceq);  	gen.Emit (OpCodes.Ldc_I4_1);  	gen.Emit (OpCodes.Xor);  	gen.Emit (OpCodes.Or);  	gen.Emit (OpCodes.Ldc_I4_1);  	gen.Emit (OpCodes.Ceq);  	gen.Emit (OpCodes.Conv_R8);  	break;  }  case JavascriptParser.AT_COND_QUE: {  	Label condFalse = gen.DefineLabel ();  	Label condEnd = gen.DefineLabel ();  	RecursiveCompile (current.GetChild (0)' typeof(int));  	gen.Emit (OpCodes.Ldc_I4_0);  	gen.Emit (OpCodes.Beq' condFalse);  	RecursiveCompile (current.GetChild (1)' expected);  	gen.Emit (OpCodes.Br_S' condEnd);  	gen.MarkLabel (condFalse);  	RecursiveCompile (current.GetChild (2)' expected);  	gen.MarkLabel (condEnd);  	break;  }  default: {  	throw new InvalidOperationException ("Unknown operation specified: (" + current.Text + ").");  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptCompiler,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptCompiler.cs,RecursiveCompile,The following statement contains a magic number: PushInt64 (Convert.ToInt64 (text' 16));  
Magic Number,Lucene.Net.Expressions.JS,JavascriptCompiler,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptCompiler.cs,RecursiveCompile,The following statement contains a magic number: PushInt64 (Convert.ToInt64 (text' 8));  
Magic Number,Lucene.Net.Expressions.JS,JavascriptCompiler,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptCompiler.cs,RecursiveCompile,The following statement contains a magic number: RecursiveCompile (current.GetChild (2)' expected);  
Magic Number,Lucene.Net.Expressions.JS,JavascriptCompiler,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptCompiler.cs,JavascriptCompiler,The following statement contains a magic number: try {  	foreach (var property in GetDefaultSettings ()) {  		string[] vals = property.Value.Split (''');  		if (vals.Length != 3) {  			throw new Exception ("Error reading Javascript functions from settings");  		}  		string typeName = vals [0];  		Type clazz;  		if (vals [0].Contains ("Lucene.Net")) {  			clazz = GetType (vals [0] + "' Lucene.Net");  		} else {  			clazz = GetType (typeName);  		}  		string methodName = vals [1].Trim ();  		int arity = int.Parse (vals [2]);  		Type[] args = new Type[arity];  		Arrays.Fill (args' typeof(double));  		MethodInfo method = clazz.GetMethod (methodName' args);  		CheckFunction (method);  		map [property.Key] = method;  	}  } catch (Exception e) {  	throw new Exception ("Cannot resolve function"' e);  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptCompiler,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptCompiler.cs,JavascriptCompiler,The following statement contains a magic number: try {  	foreach (var property in GetDefaultSettings ()) {  		string[] vals = property.Value.Split (''');  		if (vals.Length != 3) {  			throw new Exception ("Error reading Javascript functions from settings");  		}  		string typeName = vals [0];  		Type clazz;  		if (vals [0].Contains ("Lucene.Net")) {  			clazz = GetType (vals [0] + "' Lucene.Net");  		} else {  			clazz = GetType (typeName);  		}  		string methodName = vals [1].Trim ();  		int arity = int.Parse (vals [2]);  		Type[] args = new Type[arity];  		Arrays.Fill (args' typeof(double));  		MethodInfo method = clazz.GetMethod (methodName' args);  		CheckFunction (method);  		map [property.Key] = method;  	}  } catch (Exception e) {  	throw new Exception ("Cannot resolve function"' e);  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptCompiler,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptCompiler.cs,JavascriptCompiler,The following statement contains a magic number: foreach (var property in GetDefaultSettings ()) {  	string[] vals = property.Value.Split (''');  	if (vals.Length != 3) {  		throw new Exception ("Error reading Javascript functions from settings");  	}  	string typeName = vals [0];  	Type clazz;  	if (vals [0].Contains ("Lucene.Net")) {  		clazz = GetType (vals [0] + "' Lucene.Net");  	} else {  		clazz = GetType (typeName);  	}  	string methodName = vals [1].Trim ();  	int arity = int.Parse (vals [2]);  	Type[] args = new Type[arity];  	Arrays.Fill (args' typeof(double));  	MethodInfo method = clazz.GetMethod (methodName' args);  	CheckFunction (method);  	map [property.Key] = method;  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptCompiler,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptCompiler.cs,JavascriptCompiler,The following statement contains a magic number: foreach (var property in GetDefaultSettings ()) {  	string[] vals = property.Value.Split (''');  	if (vals.Length != 3) {  		throw new Exception ("Error reading Javascript functions from settings");  	}  	string typeName = vals [0];  	Type clazz;  	if (vals [0].Contains ("Lucene.Net")) {  		clazz = GetType (vals [0] + "' Lucene.Net");  	} else {  		clazz = GetType (typeName);  	}  	string methodName = vals [1].Trim ();  	int arity = int.Parse (vals [2]);  	Type[] args = new Type[arity];  	Arrays.Fill (args' typeof(double));  	MethodInfo method = clazz.GetMethod (methodName' args);  	CheckFunction (method);  	map [property.Key] = method;  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptCompiler,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptCompiler.cs,JavascriptCompiler,The following statement contains a magic number: if (vals.Length != 3) {  	throw new Exception ("Error reading Javascript functions from settings");  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MNAMESPACE_ID,The following statement contains a magic number: try {  	int _type = NAMESPACE_ID;  	int _channel = TokenChannels.Default;  	{  		// src/java/org/apache/lucene/expressions/js/Javascript.g:334:5: ( ID ( AT_DOT ID )* )  		// src/java/org/apache/lucene/expressions/js/Javascript.g:334:7: ID ( AT_DOT ID )*  		MID ();  		// src/java/org/apache/lucene/expressions/js/Javascript.g:334:10: ( AT_DOT ID )*  		while (true) {  			int alt1 = 2;  			int LA1_0 = input.LA (1);  			if ((LA1_0 == '.')) {  				alt1 = 1;  			}  			switch (alt1) {  			case 1: {  				// src/java/org/apache/lucene/expressions/js/Javascript.g:334:11: AT_DOT ID  				MAT_DOT ();  				MID ();  				break;  			}  			default: {  				goto loop1_break;  			}  			}  			//loop1_continue: ; // LUCENENET NOTE: Not used  		}  		loop1_break:  		;  	}  	state.type = _type;  	state.channel = _channel;  } finally {  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MNAMESPACE_ID,The following statement contains a magic number: while (true) {  	int alt1 = 2;  	int LA1_0 = input.LA (1);  	if ((LA1_0 == '.')) {  		alt1 = 1;  	}  	switch (alt1) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:334:11: AT_DOT ID  		MAT_DOT ();  		MID ();  		break;  	}  	default: {  		goto loop1_break;  	}  	}  	//loop1_continue: ; // LUCENENET NOTE: Not used  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MID,The following statement contains a magic number: try {  	{  		// src/java/org/apache/lucene/expressions/js/Javascript.g:340:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* )  		// src/java/org/apache/lucene/expressions/js/Javascript.g:340:7: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*  		if ((input.LA (1) >= 'A' && input.LA (1) <= 'Z') || input.LA (1) == '_' || (input.LA (1) >= 'a' && input.LA (1) <= 'z')) {  			input.Consume ();  		} else {  			MismatchedSetException mse = new MismatchedSetException (null' input);  			Recover (mse);  			throw mse;  		}  		// src/java/org/apache/lucene/expressions/js/Javascript.g:340:31: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*  		while (true) {  			int alt2 = 2;  			int LA2_0 = input.LA (1);  			if (((LA2_0 >= '0' && LA2_0 <= '9') || (LA2_0 >= 'A' && LA2_0 <= 'Z') || LA2_0 == '_' || (LA2_0 >= 'a' && LA2_0 <= 'z'))) {  				alt2 = 1;  			}  			switch (alt2) {  			case 1: {  				// src/java/org/apache/lucene/expressions/js/Javascript.g:  				if ((input.LA (1) >= '0' && input.LA (1) <= '9') || (input.LA (1) >= 'A' && input.LA (1) <= 'Z') || input.LA (1) == '_' || (input.LA (1) >= 'a' && input.LA (1) <= 'z')) {  					input.Consume ();  				} else {  					MismatchedSetException mse = new MismatchedSetException (null' input);  					Recover (mse);  					throw mse;  				}  				break;  			}  			default: {  				goto loop2_break;  			}  			}  			//loop2_continue: ; // LUCENENET NOTE: Not used  		}  		loop2_break:  		;  	}  } finally {  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MID,The following statement contains a magic number: while (true) {  	int alt2 = 2;  	int LA2_0 = input.LA (1);  	if (((LA2_0 >= '0' && LA2_0 <= '9') || (LA2_0 >= 'A' && LA2_0 <= 'Z') || LA2_0 == '_' || (LA2_0 >= 'a' && LA2_0 <= 'z'))) {  		alt2 = 1;  	}  	switch (alt2) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:  		if ((input.LA (1) >= '0' && input.LA (1) <= '9') || (input.LA (1) >= 'A' && input.LA (1) <= 'Z') || input.LA (1) == '_' || (input.LA (1) >= 'a' && input.LA (1) <= 'z')) {  			input.Consume ();  		} else {  			MismatchedSetException mse = new MismatchedSetException (null' input);  			Recover (mse);  			throw mse;  		}  		break;  	}  	default: {  		goto loop2_break;  	}  	}  	//loop2_continue: ; // LUCENENET NOTE: Not used  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MWS,The following statement contains a magic number: try {  	int _type = WS;  	int _channel = TokenChannels.Default;  	{  		// src/java/org/apache/lucene/expressions/js/Javascript.g:343:5: ( ( ' ' | '\\t' | '\\n' | '\\r' )+ )  		// src/java/org/apache/lucene/expressions/js/Javascript.g:343:7: ( ' ' | '\\t' | '\\n' | '\\r' )+  		// src/java/org/apache/lucene/expressions/js/Javascript.g:343:7: ( ' ' | '\\t' | '\\n' | '\\r' )+  		int cnt3 = 0;  		while (true) {  			int alt3 = 2;  			int LA3_0 = input.LA (1);  			if (((LA3_0 >= '\t' && LA3_0 <= '\n') || LA3_0 == '\r' || LA3_0 == ' ')) {  				alt3 = 1;  			}  			switch (alt3) {  			case 1: {  				// src/java/org/apache/lucene/expressions/js/Javascript.g:  				if ((input.LA (1) >= '\t' && input.LA (1) <= '\n') || input.LA (1) == '\r' || input.LA (1) == ' ') {  					input.Consume ();  				} else {  					MismatchedSetException mse = new MismatchedSetException (null' input);  					Recover (mse);  					throw mse;  				}  				break;  			}  			default: {  				if (cnt3 >= 1) {  					goto loop3_break;  				}  				EarlyExitException eee = new EarlyExitException (3' input);  				throw eee;  			}  			}  			cnt3++;  			//loop3_continue: ; // LUCENENET NOTE: Not used  		}  		loop3_break:  		;  		Skip ();  	}  	state.type = _type;  	state.channel = _channel;  } finally {  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MWS,The following statement contains a magic number: try {  	int _type = WS;  	int _channel = TokenChannels.Default;  	{  		// src/java/org/apache/lucene/expressions/js/Javascript.g:343:5: ( ( ' ' | '\\t' | '\\n' | '\\r' )+ )  		// src/java/org/apache/lucene/expressions/js/Javascript.g:343:7: ( ' ' | '\\t' | '\\n' | '\\r' )+  		// src/java/org/apache/lucene/expressions/js/Javascript.g:343:7: ( ' ' | '\\t' | '\\n' | '\\r' )+  		int cnt3 = 0;  		while (true) {  			int alt3 = 2;  			int LA3_0 = input.LA (1);  			if (((LA3_0 >= '\t' && LA3_0 <= '\n') || LA3_0 == '\r' || LA3_0 == ' ')) {  				alt3 = 1;  			}  			switch (alt3) {  			case 1: {  				// src/java/org/apache/lucene/expressions/js/Javascript.g:  				if ((input.LA (1) >= '\t' && input.LA (1) <= '\n') || input.LA (1) == '\r' || input.LA (1) == ' ') {  					input.Consume ();  				} else {  					MismatchedSetException mse = new MismatchedSetException (null' input);  					Recover (mse);  					throw mse;  				}  				break;  			}  			default: {  				if (cnt3 >= 1) {  					goto loop3_break;  				}  				EarlyExitException eee = new EarlyExitException (3' input);  				throw eee;  			}  			}  			cnt3++;  			//loop3_continue: ; // LUCENENET NOTE: Not used  		}  		loop3_break:  		;  		Skip ();  	}  	state.type = _type;  	state.channel = _channel;  } finally {  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MWS,The following statement contains a magic number: while (true) {  	int alt3 = 2;  	int LA3_0 = input.LA (1);  	if (((LA3_0 >= '\t' && LA3_0 <= '\n') || LA3_0 == '\r' || LA3_0 == ' ')) {  		alt3 = 1;  	}  	switch (alt3) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:  		if ((input.LA (1) >= '\t' && input.LA (1) <= '\n') || input.LA (1) == '\r' || input.LA (1) == ' ') {  			input.Consume ();  		} else {  			MismatchedSetException mse = new MismatchedSetException (null' input);  			Recover (mse);  			throw mse;  		}  		break;  	}  	default: {  		if (cnt3 >= 1) {  			goto loop3_break;  		}  		EarlyExitException eee = new EarlyExitException (3' input);  		throw eee;  	}  	}  	cnt3++;  	//loop3_continue: ; // LUCENENET NOTE: Not used  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MWS,The following statement contains a magic number: while (true) {  	int alt3 = 2;  	int LA3_0 = input.LA (1);  	if (((LA3_0 >= '\t' && LA3_0 <= '\n') || LA3_0 == '\r' || LA3_0 == ' ')) {  		alt3 = 1;  	}  	switch (alt3) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:  		if ((input.LA (1) >= '\t' && input.LA (1) <= '\n') || input.LA (1) == '\r' || input.LA (1) == ' ') {  			input.Consume ();  		} else {  			MismatchedSetException mse = new MismatchedSetException (null' input);  			Recover (mse);  			throw mse;  		}  		break;  	}  	default: {  		if (cnt3 >= 1) {  			goto loop3_break;  		}  		EarlyExitException eee = new EarlyExitException (3' input);  		throw eee;  	}  	}  	cnt3++;  	//loop3_continue: ; // LUCENENET NOTE: Not used  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MWS,The following statement contains a magic number: switch (alt3) {  case 1: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:  	if ((input.LA (1) >= '\t' && input.LA (1) <= '\n') || input.LA (1) == '\r' || input.LA (1) == ' ') {  		input.Consume ();  	} else {  		MismatchedSetException mse = new MismatchedSetException (null' input);  		Recover (mse);  		throw mse;  	}  	break;  }  default: {  	if (cnt3 >= 1) {  		goto loop3_break;  	}  	EarlyExitException eee = new EarlyExitException (3' input);  	throw eee;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MDECIMAL,The following statement contains a magic number: try {  	int type = DECIMAL;  	int channel = TokenChannels.Default;  	// src/java/org/apache/lucene/expressions/js/Javascript.g:347:5: ( DECIMALINTEGER AT_DOT ( DECIMALDIGIT )* ( EXPONENT )? | AT_DOT ( DECIMALDIGIT )+ ( EXPONENT )? | DECIMALINTEGER ( EXPONENT )? )  	int alt9 = 3;  	alt9 = m_dfa9.Predict (input);  	switch (alt9) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:347:7: DECIMALINTEGER AT_DOT ( DECIMALDIGIT )* ( EXPONENT )?  		MDECIMALINTEGER ();  		MAT_DOT ();  		// src/java/org/apache/lucene/expressions/js/Javascript.g:347:29: ( DECIMALDIGIT )*  		while (true) {  			int alt4 = 2;  			int LA4_0 = input.LA (1);  			if (((LA4_0 >= '0' && LA4_0 <= '9'))) {  				alt4 = 1;  			}  			switch (alt4) {  			case 1: {  				// src/java/org/apache/lucene/expressions/js/Javascript.g:  				if ((input.LA (1) >= '0' && input.LA (1) <= '9')) {  					input.Consume ();  				} else {  					MismatchedSetException mse = new MismatchedSetException (null' input);  					Recover (mse);  					throw mse;  				}  				break;  			}  			default: {  				goto loop4_break;  			}  			}  			//loop4_continue: ; // LUCENENET NOTE: Not used  		}  		loop4_break:  		;  		// src/java/org/apache/lucene/expressions/js/Javascript.g:347:43: ( EXPONENT )?  		int alt5 = 2;  		int LA5_0 = input.LA (1);  		if ((LA5_0 == 'E' || LA5_0 == 'e')) {  			alt5 = 1;  		}  		switch (alt5) {  		case 1: {  			// src/java/org/apache/lucene/expressions/js/Javascript.g:347:43: EXPONENT  			MEXPONENT ();  			break;  		}  		}  		break;  	}  	case 2: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:348:7: AT_DOT ( DECIMALDIGIT )+ ( EXPONENT )?  		MAT_DOT ();  		// src/java/org/apache/lucene/expressions/js/Javascript.g:348:14: ( DECIMALDIGIT )+  		int cnt6 = 0;  		while (true) {  			int alt6 = 2;  			int LA6_0 = input.LA (1);  			if (((LA6_0 >= '0' && LA6_0 <= '9'))) {  				alt6 = 1;  			}  			switch (alt6) {  			case 1: {  				// src/java/org/apache/lucene/expressions/js/Javascript.g:  				if ((input.LA (1) >= '0' && input.LA (1) <= '9')) {  					input.Consume ();  				} else {  					MismatchedSetException mse = new MismatchedSetException (null' input);  					Recover (mse);  					throw mse;  				}  				break;  			}  			default: {  				if (cnt6 >= 1) {  					goto loop6_break;  				}  				EarlyExitException eee = new EarlyExitException (6' input);  				throw eee;  			}  			}  			cnt6++;  			//loop6_continue: ; // LUCENENET NOTE: Not used  		}  		loop6_break:  		;  		// src/java/org/apache/lucene/expressions/js/Javascript.g:348:28: ( EXPONENT )?  		int alt7 = 2;  		int LA7_0 = input.LA (1);  		if ((LA7_0 == 'E' || LA7_0 == 'e')) {  			alt7 = 1;  		}  		switch (alt7) {  		case 1: {  			// src/java/org/apache/lucene/expressions/js/Javascript.g:348:28: EXPONENT  			MEXPONENT ();  			break;  		}  		}  		break;  	}  	case 3: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:349:7: DECIMALINTEGER ( EXPONENT )?  		MDECIMALINTEGER ();  		// src/java/org/apache/lucene/expressions/js/Javascript.g:349:22: ( EXPONENT )?  		int alt8 = 2;  		int LA8_0 = input.LA (1);  		if ((LA8_0 == 'E' || LA8_0 == 'e')) {  			alt8 = 1;  		}  		switch (alt8) {  		case 1: {  			// src/java/org/apache/lucene/expressions/js/Javascript.g:349:22: EXPONENT  			MEXPONENT ();  			break;  		}  		}  		break;  	}  	}  	state.type = type;  	state.channel = channel;  } finally {  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MDECIMAL,The following statement contains a magic number: try {  	int type = DECIMAL;  	int channel = TokenChannels.Default;  	// src/java/org/apache/lucene/expressions/js/Javascript.g:347:5: ( DECIMALINTEGER AT_DOT ( DECIMALDIGIT )* ( EXPONENT )? | AT_DOT ( DECIMALDIGIT )+ ( EXPONENT )? | DECIMALINTEGER ( EXPONENT )? )  	int alt9 = 3;  	alt9 = m_dfa9.Predict (input);  	switch (alt9) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:347:7: DECIMALINTEGER AT_DOT ( DECIMALDIGIT )* ( EXPONENT )?  		MDECIMALINTEGER ();  		MAT_DOT ();  		// src/java/org/apache/lucene/expressions/js/Javascript.g:347:29: ( DECIMALDIGIT )*  		while (true) {  			int alt4 = 2;  			int LA4_0 = input.LA (1);  			if (((LA4_0 >= '0' && LA4_0 <= '9'))) {  				alt4 = 1;  			}  			switch (alt4) {  			case 1: {  				// src/java/org/apache/lucene/expressions/js/Javascript.g:  				if ((input.LA (1) >= '0' && input.LA (1) <= '9')) {  					input.Consume ();  				} else {  					MismatchedSetException mse = new MismatchedSetException (null' input);  					Recover (mse);  					throw mse;  				}  				break;  			}  			default: {  				goto loop4_break;  			}  			}  			//loop4_continue: ; // LUCENENET NOTE: Not used  		}  		loop4_break:  		;  		// src/java/org/apache/lucene/expressions/js/Javascript.g:347:43: ( EXPONENT )?  		int alt5 = 2;  		int LA5_0 = input.LA (1);  		if ((LA5_0 == 'E' || LA5_0 == 'e')) {  			alt5 = 1;  		}  		switch (alt5) {  		case 1: {  			// src/java/org/apache/lucene/expressions/js/Javascript.g:347:43: EXPONENT  			MEXPONENT ();  			break;  		}  		}  		break;  	}  	case 2: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:348:7: AT_DOT ( DECIMALDIGIT )+ ( EXPONENT )?  		MAT_DOT ();  		// src/java/org/apache/lucene/expressions/js/Javascript.g:348:14: ( DECIMALDIGIT )+  		int cnt6 = 0;  		while (true) {  			int alt6 = 2;  			int LA6_0 = input.LA (1);  			if (((LA6_0 >= '0' && LA6_0 <= '9'))) {  				alt6 = 1;  			}  			switch (alt6) {  			case 1: {  				// src/java/org/apache/lucene/expressions/js/Javascript.g:  				if ((input.LA (1) >= '0' && input.LA (1) <= '9')) {  					input.Consume ();  				} else {  					MismatchedSetException mse = new MismatchedSetException (null' input);  					Recover (mse);  					throw mse;  				}  				break;  			}  			default: {  				if (cnt6 >= 1) {  					goto loop6_break;  				}  				EarlyExitException eee = new EarlyExitException (6' input);  				throw eee;  			}  			}  			cnt6++;  			//loop6_continue: ; // LUCENENET NOTE: Not used  		}  		loop6_break:  		;  		// src/java/org/apache/lucene/expressions/js/Javascript.g:348:28: ( EXPONENT )?  		int alt7 = 2;  		int LA7_0 = input.LA (1);  		if ((LA7_0 == 'E' || LA7_0 == 'e')) {  			alt7 = 1;  		}  		switch (alt7) {  		case 1: {  			// src/java/org/apache/lucene/expressions/js/Javascript.g:348:28: EXPONENT  			MEXPONENT ();  			break;  		}  		}  		break;  	}  	case 3: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:349:7: DECIMALINTEGER ( EXPONENT )?  		MDECIMALINTEGER ();  		// src/java/org/apache/lucene/expressions/js/Javascript.g:349:22: ( EXPONENT )?  		int alt8 = 2;  		int LA8_0 = input.LA (1);  		if ((LA8_0 == 'E' || LA8_0 == 'e')) {  			alt8 = 1;  		}  		switch (alt8) {  		case 1: {  			// src/java/org/apache/lucene/expressions/js/Javascript.g:349:22: EXPONENT  			MEXPONENT ();  			break;  		}  		}  		break;  	}  	}  	state.type = type;  	state.channel = channel;  } finally {  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MDECIMAL,The following statement contains a magic number: try {  	int type = DECIMAL;  	int channel = TokenChannels.Default;  	// src/java/org/apache/lucene/expressions/js/Javascript.g:347:5: ( DECIMALINTEGER AT_DOT ( DECIMALDIGIT )* ( EXPONENT )? | AT_DOT ( DECIMALDIGIT )+ ( EXPONENT )? | DECIMALINTEGER ( EXPONENT )? )  	int alt9 = 3;  	alt9 = m_dfa9.Predict (input);  	switch (alt9) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:347:7: DECIMALINTEGER AT_DOT ( DECIMALDIGIT )* ( EXPONENT )?  		MDECIMALINTEGER ();  		MAT_DOT ();  		// src/java/org/apache/lucene/expressions/js/Javascript.g:347:29: ( DECIMALDIGIT )*  		while (true) {  			int alt4 = 2;  			int LA4_0 = input.LA (1);  			if (((LA4_0 >= '0' && LA4_0 <= '9'))) {  				alt4 = 1;  			}  			switch (alt4) {  			case 1: {  				// src/java/org/apache/lucene/expressions/js/Javascript.g:  				if ((input.LA (1) >= '0' && input.LA (1) <= '9')) {  					input.Consume ();  				} else {  					MismatchedSetException mse = new MismatchedSetException (null' input);  					Recover (mse);  					throw mse;  				}  				break;  			}  			default: {  				goto loop4_break;  			}  			}  			//loop4_continue: ; // LUCENENET NOTE: Not used  		}  		loop4_break:  		;  		// src/java/org/apache/lucene/expressions/js/Javascript.g:347:43: ( EXPONENT )?  		int alt5 = 2;  		int LA5_0 = input.LA (1);  		if ((LA5_0 == 'E' || LA5_0 == 'e')) {  			alt5 = 1;  		}  		switch (alt5) {  		case 1: {  			// src/java/org/apache/lucene/expressions/js/Javascript.g:347:43: EXPONENT  			MEXPONENT ();  			break;  		}  		}  		break;  	}  	case 2: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:348:7: AT_DOT ( DECIMALDIGIT )+ ( EXPONENT )?  		MAT_DOT ();  		// src/java/org/apache/lucene/expressions/js/Javascript.g:348:14: ( DECIMALDIGIT )+  		int cnt6 = 0;  		while (true) {  			int alt6 = 2;  			int LA6_0 = input.LA (1);  			if (((LA6_0 >= '0' && LA6_0 <= '9'))) {  				alt6 = 1;  			}  			switch (alt6) {  			case 1: {  				// src/java/org/apache/lucene/expressions/js/Javascript.g:  				if ((input.LA (1) >= '0' && input.LA (1) <= '9')) {  					input.Consume ();  				} else {  					MismatchedSetException mse = new MismatchedSetException (null' input);  					Recover (mse);  					throw mse;  				}  				break;  			}  			default: {  				if (cnt6 >= 1) {  					goto loop6_break;  				}  				EarlyExitException eee = new EarlyExitException (6' input);  				throw eee;  			}  			}  			cnt6++;  			//loop6_continue: ; // LUCENENET NOTE: Not used  		}  		loop6_break:  		;  		// src/java/org/apache/lucene/expressions/js/Javascript.g:348:28: ( EXPONENT )?  		int alt7 = 2;  		int LA7_0 = input.LA (1);  		if ((LA7_0 == 'E' || LA7_0 == 'e')) {  			alt7 = 1;  		}  		switch (alt7) {  		case 1: {  			// src/java/org/apache/lucene/expressions/js/Javascript.g:348:28: EXPONENT  			MEXPONENT ();  			break;  		}  		}  		break;  	}  	case 3: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:349:7: DECIMALINTEGER ( EXPONENT )?  		MDECIMALINTEGER ();  		// src/java/org/apache/lucene/expressions/js/Javascript.g:349:22: ( EXPONENT )?  		int alt8 = 2;  		int LA8_0 = input.LA (1);  		if ((LA8_0 == 'E' || LA8_0 == 'e')) {  			alt8 = 1;  		}  		switch (alt8) {  		case 1: {  			// src/java/org/apache/lucene/expressions/js/Javascript.g:349:22: EXPONENT  			MEXPONENT ();  			break;  		}  		}  		break;  	}  	}  	state.type = type;  	state.channel = channel;  } finally {  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MDECIMAL,The following statement contains a magic number: try {  	int type = DECIMAL;  	int channel = TokenChannels.Default;  	// src/java/org/apache/lucene/expressions/js/Javascript.g:347:5: ( DECIMALINTEGER AT_DOT ( DECIMALDIGIT )* ( EXPONENT )? | AT_DOT ( DECIMALDIGIT )+ ( EXPONENT )? | DECIMALINTEGER ( EXPONENT )? )  	int alt9 = 3;  	alt9 = m_dfa9.Predict (input);  	switch (alt9) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:347:7: DECIMALINTEGER AT_DOT ( DECIMALDIGIT )* ( EXPONENT )?  		MDECIMALINTEGER ();  		MAT_DOT ();  		// src/java/org/apache/lucene/expressions/js/Javascript.g:347:29: ( DECIMALDIGIT )*  		while (true) {  			int alt4 = 2;  			int LA4_0 = input.LA (1);  			if (((LA4_0 >= '0' && LA4_0 <= '9'))) {  				alt4 = 1;  			}  			switch (alt4) {  			case 1: {  				// src/java/org/apache/lucene/expressions/js/Javascript.g:  				if ((input.LA (1) >= '0' && input.LA (1) <= '9')) {  					input.Consume ();  				} else {  					MismatchedSetException mse = new MismatchedSetException (null' input);  					Recover (mse);  					throw mse;  				}  				break;  			}  			default: {  				goto loop4_break;  			}  			}  			//loop4_continue: ; // LUCENENET NOTE: Not used  		}  		loop4_break:  		;  		// src/java/org/apache/lucene/expressions/js/Javascript.g:347:43: ( EXPONENT )?  		int alt5 = 2;  		int LA5_0 = input.LA (1);  		if ((LA5_0 == 'E' || LA5_0 == 'e')) {  			alt5 = 1;  		}  		switch (alt5) {  		case 1: {  			// src/java/org/apache/lucene/expressions/js/Javascript.g:347:43: EXPONENT  			MEXPONENT ();  			break;  		}  		}  		break;  	}  	case 2: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:348:7: AT_DOT ( DECIMALDIGIT )+ ( EXPONENT )?  		MAT_DOT ();  		// src/java/org/apache/lucene/expressions/js/Javascript.g:348:14: ( DECIMALDIGIT )+  		int cnt6 = 0;  		while (true) {  			int alt6 = 2;  			int LA6_0 = input.LA (1);  			if (((LA6_0 >= '0' && LA6_0 <= '9'))) {  				alt6 = 1;  			}  			switch (alt6) {  			case 1: {  				// src/java/org/apache/lucene/expressions/js/Javascript.g:  				if ((input.LA (1) >= '0' && input.LA (1) <= '9')) {  					input.Consume ();  				} else {  					MismatchedSetException mse = new MismatchedSetException (null' input);  					Recover (mse);  					throw mse;  				}  				break;  			}  			default: {  				if (cnt6 >= 1) {  					goto loop6_break;  				}  				EarlyExitException eee = new EarlyExitException (6' input);  				throw eee;  			}  			}  			cnt6++;  			//loop6_continue: ; // LUCENENET NOTE: Not used  		}  		loop6_break:  		;  		// src/java/org/apache/lucene/expressions/js/Javascript.g:348:28: ( EXPONENT )?  		int alt7 = 2;  		int LA7_0 = input.LA (1);  		if ((LA7_0 == 'E' || LA7_0 == 'e')) {  			alt7 = 1;  		}  		switch (alt7) {  		case 1: {  			// src/java/org/apache/lucene/expressions/js/Javascript.g:348:28: EXPONENT  			MEXPONENT ();  			break;  		}  		}  		break;  	}  	case 3: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:349:7: DECIMALINTEGER ( EXPONENT )?  		MDECIMALINTEGER ();  		// src/java/org/apache/lucene/expressions/js/Javascript.g:349:22: ( EXPONENT )?  		int alt8 = 2;  		int LA8_0 = input.LA (1);  		if ((LA8_0 == 'E' || LA8_0 == 'e')) {  			alt8 = 1;  		}  		switch (alt8) {  		case 1: {  			// src/java/org/apache/lucene/expressions/js/Javascript.g:349:22: EXPONENT  			MEXPONENT ();  			break;  		}  		}  		break;  	}  	}  	state.type = type;  	state.channel = channel;  } finally {  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MDECIMAL,The following statement contains a magic number: try {  	int type = DECIMAL;  	int channel = TokenChannels.Default;  	// src/java/org/apache/lucene/expressions/js/Javascript.g:347:5: ( DECIMALINTEGER AT_DOT ( DECIMALDIGIT )* ( EXPONENT )? | AT_DOT ( DECIMALDIGIT )+ ( EXPONENT )? | DECIMALINTEGER ( EXPONENT )? )  	int alt9 = 3;  	alt9 = m_dfa9.Predict (input);  	switch (alt9) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:347:7: DECIMALINTEGER AT_DOT ( DECIMALDIGIT )* ( EXPONENT )?  		MDECIMALINTEGER ();  		MAT_DOT ();  		// src/java/org/apache/lucene/expressions/js/Javascript.g:347:29: ( DECIMALDIGIT )*  		while (true) {  			int alt4 = 2;  			int LA4_0 = input.LA (1);  			if (((LA4_0 >= '0' && LA4_0 <= '9'))) {  				alt4 = 1;  			}  			switch (alt4) {  			case 1: {  				// src/java/org/apache/lucene/expressions/js/Javascript.g:  				if ((input.LA (1) >= '0' && input.LA (1) <= '9')) {  					input.Consume ();  				} else {  					MismatchedSetException mse = new MismatchedSetException (null' input);  					Recover (mse);  					throw mse;  				}  				break;  			}  			default: {  				goto loop4_break;  			}  			}  			//loop4_continue: ; // LUCENENET NOTE: Not used  		}  		loop4_break:  		;  		// src/java/org/apache/lucene/expressions/js/Javascript.g:347:43: ( EXPONENT )?  		int alt5 = 2;  		int LA5_0 = input.LA (1);  		if ((LA5_0 == 'E' || LA5_0 == 'e')) {  			alt5 = 1;  		}  		switch (alt5) {  		case 1: {  			// src/java/org/apache/lucene/expressions/js/Javascript.g:347:43: EXPONENT  			MEXPONENT ();  			break;  		}  		}  		break;  	}  	case 2: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:348:7: AT_DOT ( DECIMALDIGIT )+ ( EXPONENT )?  		MAT_DOT ();  		// src/java/org/apache/lucene/expressions/js/Javascript.g:348:14: ( DECIMALDIGIT )+  		int cnt6 = 0;  		while (true) {  			int alt6 = 2;  			int LA6_0 = input.LA (1);  			if (((LA6_0 >= '0' && LA6_0 <= '9'))) {  				alt6 = 1;  			}  			switch (alt6) {  			case 1: {  				// src/java/org/apache/lucene/expressions/js/Javascript.g:  				if ((input.LA (1) >= '0' && input.LA (1) <= '9')) {  					input.Consume ();  				} else {  					MismatchedSetException mse = new MismatchedSetException (null' input);  					Recover (mse);  					throw mse;  				}  				break;  			}  			default: {  				if (cnt6 >= 1) {  					goto loop6_break;  				}  				EarlyExitException eee = new EarlyExitException (6' input);  				throw eee;  			}  			}  			cnt6++;  			//loop6_continue: ; // LUCENENET NOTE: Not used  		}  		loop6_break:  		;  		// src/java/org/apache/lucene/expressions/js/Javascript.g:348:28: ( EXPONENT )?  		int alt7 = 2;  		int LA7_0 = input.LA (1);  		if ((LA7_0 == 'E' || LA7_0 == 'e')) {  			alt7 = 1;  		}  		switch (alt7) {  		case 1: {  			// src/java/org/apache/lucene/expressions/js/Javascript.g:348:28: EXPONENT  			MEXPONENT ();  			break;  		}  		}  		break;  	}  	case 3: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:349:7: DECIMALINTEGER ( EXPONENT )?  		MDECIMALINTEGER ();  		// src/java/org/apache/lucene/expressions/js/Javascript.g:349:22: ( EXPONENT )?  		int alt8 = 2;  		int LA8_0 = input.LA (1);  		if ((LA8_0 == 'E' || LA8_0 == 'e')) {  			alt8 = 1;  		}  		switch (alt8) {  		case 1: {  			// src/java/org/apache/lucene/expressions/js/Javascript.g:349:22: EXPONENT  			MEXPONENT ();  			break;  		}  		}  		break;  	}  	}  	state.type = type;  	state.channel = channel;  } finally {  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MDECIMAL,The following statement contains a magic number: try {  	int type = DECIMAL;  	int channel = TokenChannels.Default;  	// src/java/org/apache/lucene/expressions/js/Javascript.g:347:5: ( DECIMALINTEGER AT_DOT ( DECIMALDIGIT )* ( EXPONENT )? | AT_DOT ( DECIMALDIGIT )+ ( EXPONENT )? | DECIMALINTEGER ( EXPONENT )? )  	int alt9 = 3;  	alt9 = m_dfa9.Predict (input);  	switch (alt9) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:347:7: DECIMALINTEGER AT_DOT ( DECIMALDIGIT )* ( EXPONENT )?  		MDECIMALINTEGER ();  		MAT_DOT ();  		// src/java/org/apache/lucene/expressions/js/Javascript.g:347:29: ( DECIMALDIGIT )*  		while (true) {  			int alt4 = 2;  			int LA4_0 = input.LA (1);  			if (((LA4_0 >= '0' && LA4_0 <= '9'))) {  				alt4 = 1;  			}  			switch (alt4) {  			case 1: {  				// src/java/org/apache/lucene/expressions/js/Javascript.g:  				if ((input.LA (1) >= '0' && input.LA (1) <= '9')) {  					input.Consume ();  				} else {  					MismatchedSetException mse = new MismatchedSetException (null' input);  					Recover (mse);  					throw mse;  				}  				break;  			}  			default: {  				goto loop4_break;  			}  			}  			//loop4_continue: ; // LUCENENET NOTE: Not used  		}  		loop4_break:  		;  		// src/java/org/apache/lucene/expressions/js/Javascript.g:347:43: ( EXPONENT )?  		int alt5 = 2;  		int LA5_0 = input.LA (1);  		if ((LA5_0 == 'E' || LA5_0 == 'e')) {  			alt5 = 1;  		}  		switch (alt5) {  		case 1: {  			// src/java/org/apache/lucene/expressions/js/Javascript.g:347:43: EXPONENT  			MEXPONENT ();  			break;  		}  		}  		break;  	}  	case 2: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:348:7: AT_DOT ( DECIMALDIGIT )+ ( EXPONENT )?  		MAT_DOT ();  		// src/java/org/apache/lucene/expressions/js/Javascript.g:348:14: ( DECIMALDIGIT )+  		int cnt6 = 0;  		while (true) {  			int alt6 = 2;  			int LA6_0 = input.LA (1);  			if (((LA6_0 >= '0' && LA6_0 <= '9'))) {  				alt6 = 1;  			}  			switch (alt6) {  			case 1: {  				// src/java/org/apache/lucene/expressions/js/Javascript.g:  				if ((input.LA (1) >= '0' && input.LA (1) <= '9')) {  					input.Consume ();  				} else {  					MismatchedSetException mse = new MismatchedSetException (null' input);  					Recover (mse);  					throw mse;  				}  				break;  			}  			default: {  				if (cnt6 >= 1) {  					goto loop6_break;  				}  				EarlyExitException eee = new EarlyExitException (6' input);  				throw eee;  			}  			}  			cnt6++;  			//loop6_continue: ; // LUCENENET NOTE: Not used  		}  		loop6_break:  		;  		// src/java/org/apache/lucene/expressions/js/Javascript.g:348:28: ( EXPONENT )?  		int alt7 = 2;  		int LA7_0 = input.LA (1);  		if ((LA7_0 == 'E' || LA7_0 == 'e')) {  			alt7 = 1;  		}  		switch (alt7) {  		case 1: {  			// src/java/org/apache/lucene/expressions/js/Javascript.g:348:28: EXPONENT  			MEXPONENT ();  			break;  		}  		}  		break;  	}  	case 3: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:349:7: DECIMALINTEGER ( EXPONENT )?  		MDECIMALINTEGER ();  		// src/java/org/apache/lucene/expressions/js/Javascript.g:349:22: ( EXPONENT )?  		int alt8 = 2;  		int LA8_0 = input.LA (1);  		if ((LA8_0 == 'E' || LA8_0 == 'e')) {  			alt8 = 1;  		}  		switch (alt8) {  		case 1: {  			// src/java/org/apache/lucene/expressions/js/Javascript.g:349:22: EXPONENT  			MEXPONENT ();  			break;  		}  		}  		break;  	}  	}  	state.type = type;  	state.channel = channel;  } finally {  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MDECIMAL,The following statement contains a magic number: try {  	int type = DECIMAL;  	int channel = TokenChannels.Default;  	// src/java/org/apache/lucene/expressions/js/Javascript.g:347:5: ( DECIMALINTEGER AT_DOT ( DECIMALDIGIT )* ( EXPONENT )? | AT_DOT ( DECIMALDIGIT )+ ( EXPONENT )? | DECIMALINTEGER ( EXPONENT )? )  	int alt9 = 3;  	alt9 = m_dfa9.Predict (input);  	switch (alt9) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:347:7: DECIMALINTEGER AT_DOT ( DECIMALDIGIT )* ( EXPONENT )?  		MDECIMALINTEGER ();  		MAT_DOT ();  		// src/java/org/apache/lucene/expressions/js/Javascript.g:347:29: ( DECIMALDIGIT )*  		while (true) {  			int alt4 = 2;  			int LA4_0 = input.LA (1);  			if (((LA4_0 >= '0' && LA4_0 <= '9'))) {  				alt4 = 1;  			}  			switch (alt4) {  			case 1: {  				// src/java/org/apache/lucene/expressions/js/Javascript.g:  				if ((input.LA (1) >= '0' && input.LA (1) <= '9')) {  					input.Consume ();  				} else {  					MismatchedSetException mse = new MismatchedSetException (null' input);  					Recover (mse);  					throw mse;  				}  				break;  			}  			default: {  				goto loop4_break;  			}  			}  			//loop4_continue: ; // LUCENENET NOTE: Not used  		}  		loop4_break:  		;  		// src/java/org/apache/lucene/expressions/js/Javascript.g:347:43: ( EXPONENT )?  		int alt5 = 2;  		int LA5_0 = input.LA (1);  		if ((LA5_0 == 'E' || LA5_0 == 'e')) {  			alt5 = 1;  		}  		switch (alt5) {  		case 1: {  			// src/java/org/apache/lucene/expressions/js/Javascript.g:347:43: EXPONENT  			MEXPONENT ();  			break;  		}  		}  		break;  	}  	case 2: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:348:7: AT_DOT ( DECIMALDIGIT )+ ( EXPONENT )?  		MAT_DOT ();  		// src/java/org/apache/lucene/expressions/js/Javascript.g:348:14: ( DECIMALDIGIT )+  		int cnt6 = 0;  		while (true) {  			int alt6 = 2;  			int LA6_0 = input.LA (1);  			if (((LA6_0 >= '0' && LA6_0 <= '9'))) {  				alt6 = 1;  			}  			switch (alt6) {  			case 1: {  				// src/java/org/apache/lucene/expressions/js/Javascript.g:  				if ((input.LA (1) >= '0' && input.LA (1) <= '9')) {  					input.Consume ();  				} else {  					MismatchedSetException mse = new MismatchedSetException (null' input);  					Recover (mse);  					throw mse;  				}  				break;  			}  			default: {  				if (cnt6 >= 1) {  					goto loop6_break;  				}  				EarlyExitException eee = new EarlyExitException (6' input);  				throw eee;  			}  			}  			cnt6++;  			//loop6_continue: ; // LUCENENET NOTE: Not used  		}  		loop6_break:  		;  		// src/java/org/apache/lucene/expressions/js/Javascript.g:348:28: ( EXPONENT )?  		int alt7 = 2;  		int LA7_0 = input.LA (1);  		if ((LA7_0 == 'E' || LA7_0 == 'e')) {  			alt7 = 1;  		}  		switch (alt7) {  		case 1: {  			// src/java/org/apache/lucene/expressions/js/Javascript.g:348:28: EXPONENT  			MEXPONENT ();  			break;  		}  		}  		break;  	}  	case 3: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:349:7: DECIMALINTEGER ( EXPONENT )?  		MDECIMALINTEGER ();  		// src/java/org/apache/lucene/expressions/js/Javascript.g:349:22: ( EXPONENT )?  		int alt8 = 2;  		int LA8_0 = input.LA (1);  		if ((LA8_0 == 'E' || LA8_0 == 'e')) {  			alt8 = 1;  		}  		switch (alt8) {  		case 1: {  			// src/java/org/apache/lucene/expressions/js/Javascript.g:349:22: EXPONENT  			MEXPONENT ();  			break;  		}  		}  		break;  	}  	}  	state.type = type;  	state.channel = channel;  } finally {  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MDECIMAL,The following statement contains a magic number: try {  	int type = DECIMAL;  	int channel = TokenChannels.Default;  	// src/java/org/apache/lucene/expressions/js/Javascript.g:347:5: ( DECIMALINTEGER AT_DOT ( DECIMALDIGIT )* ( EXPONENT )? | AT_DOT ( DECIMALDIGIT )+ ( EXPONENT )? | DECIMALINTEGER ( EXPONENT )? )  	int alt9 = 3;  	alt9 = m_dfa9.Predict (input);  	switch (alt9) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:347:7: DECIMALINTEGER AT_DOT ( DECIMALDIGIT )* ( EXPONENT )?  		MDECIMALINTEGER ();  		MAT_DOT ();  		// src/java/org/apache/lucene/expressions/js/Javascript.g:347:29: ( DECIMALDIGIT )*  		while (true) {  			int alt4 = 2;  			int LA4_0 = input.LA (1);  			if (((LA4_0 >= '0' && LA4_0 <= '9'))) {  				alt4 = 1;  			}  			switch (alt4) {  			case 1: {  				// src/java/org/apache/lucene/expressions/js/Javascript.g:  				if ((input.LA (1) >= '0' && input.LA (1) <= '9')) {  					input.Consume ();  				} else {  					MismatchedSetException mse = new MismatchedSetException (null' input);  					Recover (mse);  					throw mse;  				}  				break;  			}  			default: {  				goto loop4_break;  			}  			}  			//loop4_continue: ; // LUCENENET NOTE: Not used  		}  		loop4_break:  		;  		// src/java/org/apache/lucene/expressions/js/Javascript.g:347:43: ( EXPONENT )?  		int alt5 = 2;  		int LA5_0 = input.LA (1);  		if ((LA5_0 == 'E' || LA5_0 == 'e')) {  			alt5 = 1;  		}  		switch (alt5) {  		case 1: {  			// src/java/org/apache/lucene/expressions/js/Javascript.g:347:43: EXPONENT  			MEXPONENT ();  			break;  		}  		}  		break;  	}  	case 2: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:348:7: AT_DOT ( DECIMALDIGIT )+ ( EXPONENT )?  		MAT_DOT ();  		// src/java/org/apache/lucene/expressions/js/Javascript.g:348:14: ( DECIMALDIGIT )+  		int cnt6 = 0;  		while (true) {  			int alt6 = 2;  			int LA6_0 = input.LA (1);  			if (((LA6_0 >= '0' && LA6_0 <= '9'))) {  				alt6 = 1;  			}  			switch (alt6) {  			case 1: {  				// src/java/org/apache/lucene/expressions/js/Javascript.g:  				if ((input.LA (1) >= '0' && input.LA (1) <= '9')) {  					input.Consume ();  				} else {  					MismatchedSetException mse = new MismatchedSetException (null' input);  					Recover (mse);  					throw mse;  				}  				break;  			}  			default: {  				if (cnt6 >= 1) {  					goto loop6_break;  				}  				EarlyExitException eee = new EarlyExitException (6' input);  				throw eee;  			}  			}  			cnt6++;  			//loop6_continue: ; // LUCENENET NOTE: Not used  		}  		loop6_break:  		;  		// src/java/org/apache/lucene/expressions/js/Javascript.g:348:28: ( EXPONENT )?  		int alt7 = 2;  		int LA7_0 = input.LA (1);  		if ((LA7_0 == 'E' || LA7_0 == 'e')) {  			alt7 = 1;  		}  		switch (alt7) {  		case 1: {  			// src/java/org/apache/lucene/expressions/js/Javascript.g:348:28: EXPONENT  			MEXPONENT ();  			break;  		}  		}  		break;  	}  	case 3: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:349:7: DECIMALINTEGER ( EXPONENT )?  		MDECIMALINTEGER ();  		// src/java/org/apache/lucene/expressions/js/Javascript.g:349:22: ( EXPONENT )?  		int alt8 = 2;  		int LA8_0 = input.LA (1);  		if ((LA8_0 == 'E' || LA8_0 == 'e')) {  			alt8 = 1;  		}  		switch (alt8) {  		case 1: {  			// src/java/org/apache/lucene/expressions/js/Javascript.g:349:22: EXPONENT  			MEXPONENT ();  			break;  		}  		}  		break;  	}  	}  	state.type = type;  	state.channel = channel;  } finally {  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MDECIMAL,The following statement contains a magic number: try {  	int type = DECIMAL;  	int channel = TokenChannels.Default;  	// src/java/org/apache/lucene/expressions/js/Javascript.g:347:5: ( DECIMALINTEGER AT_DOT ( DECIMALDIGIT )* ( EXPONENT )? | AT_DOT ( DECIMALDIGIT )+ ( EXPONENT )? | DECIMALINTEGER ( EXPONENT )? )  	int alt9 = 3;  	alt9 = m_dfa9.Predict (input);  	switch (alt9) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:347:7: DECIMALINTEGER AT_DOT ( DECIMALDIGIT )* ( EXPONENT )?  		MDECIMALINTEGER ();  		MAT_DOT ();  		// src/java/org/apache/lucene/expressions/js/Javascript.g:347:29: ( DECIMALDIGIT )*  		while (true) {  			int alt4 = 2;  			int LA4_0 = input.LA (1);  			if (((LA4_0 >= '0' && LA4_0 <= '9'))) {  				alt4 = 1;  			}  			switch (alt4) {  			case 1: {  				// src/java/org/apache/lucene/expressions/js/Javascript.g:  				if ((input.LA (1) >= '0' && input.LA (1) <= '9')) {  					input.Consume ();  				} else {  					MismatchedSetException mse = new MismatchedSetException (null' input);  					Recover (mse);  					throw mse;  				}  				break;  			}  			default: {  				goto loop4_break;  			}  			}  			//loop4_continue: ; // LUCENENET NOTE: Not used  		}  		loop4_break:  		;  		// src/java/org/apache/lucene/expressions/js/Javascript.g:347:43: ( EXPONENT )?  		int alt5 = 2;  		int LA5_0 = input.LA (1);  		if ((LA5_0 == 'E' || LA5_0 == 'e')) {  			alt5 = 1;  		}  		switch (alt5) {  		case 1: {  			// src/java/org/apache/lucene/expressions/js/Javascript.g:347:43: EXPONENT  			MEXPONENT ();  			break;  		}  		}  		break;  	}  	case 2: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:348:7: AT_DOT ( DECIMALDIGIT )+ ( EXPONENT )?  		MAT_DOT ();  		// src/java/org/apache/lucene/expressions/js/Javascript.g:348:14: ( DECIMALDIGIT )+  		int cnt6 = 0;  		while (true) {  			int alt6 = 2;  			int LA6_0 = input.LA (1);  			if (((LA6_0 >= '0' && LA6_0 <= '9'))) {  				alt6 = 1;  			}  			switch (alt6) {  			case 1: {  				// src/java/org/apache/lucene/expressions/js/Javascript.g:  				if ((input.LA (1) >= '0' && input.LA (1) <= '9')) {  					input.Consume ();  				} else {  					MismatchedSetException mse = new MismatchedSetException (null' input);  					Recover (mse);  					throw mse;  				}  				break;  			}  			default: {  				if (cnt6 >= 1) {  					goto loop6_break;  				}  				EarlyExitException eee = new EarlyExitException (6' input);  				throw eee;  			}  			}  			cnt6++;  			//loop6_continue: ; // LUCENENET NOTE: Not used  		}  		loop6_break:  		;  		// src/java/org/apache/lucene/expressions/js/Javascript.g:348:28: ( EXPONENT )?  		int alt7 = 2;  		int LA7_0 = input.LA (1);  		if ((LA7_0 == 'E' || LA7_0 == 'e')) {  			alt7 = 1;  		}  		switch (alt7) {  		case 1: {  			// src/java/org/apache/lucene/expressions/js/Javascript.g:348:28: EXPONENT  			MEXPONENT ();  			break;  		}  		}  		break;  	}  	case 3: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:349:7: DECIMALINTEGER ( EXPONENT )?  		MDECIMALINTEGER ();  		// src/java/org/apache/lucene/expressions/js/Javascript.g:349:22: ( EXPONENT )?  		int alt8 = 2;  		int LA8_0 = input.LA (1);  		if ((LA8_0 == 'E' || LA8_0 == 'e')) {  			alt8 = 1;  		}  		switch (alt8) {  		case 1: {  			// src/java/org/apache/lucene/expressions/js/Javascript.g:349:22: EXPONENT  			MEXPONENT ();  			break;  		}  		}  		break;  	}  	}  	state.type = type;  	state.channel = channel;  } finally {  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MDECIMAL,The following statement contains a magic number: switch (alt9) {  case 1: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:347:7: DECIMALINTEGER AT_DOT ( DECIMALDIGIT )* ( EXPONENT )?  	MDECIMALINTEGER ();  	MAT_DOT ();  	// src/java/org/apache/lucene/expressions/js/Javascript.g:347:29: ( DECIMALDIGIT )*  	while (true) {  		int alt4 = 2;  		int LA4_0 = input.LA (1);  		if (((LA4_0 >= '0' && LA4_0 <= '9'))) {  			alt4 = 1;  		}  		switch (alt4) {  		case 1: {  			// src/java/org/apache/lucene/expressions/js/Javascript.g:  			if ((input.LA (1) >= '0' && input.LA (1) <= '9')) {  				input.Consume ();  			} else {  				MismatchedSetException mse = new MismatchedSetException (null' input);  				Recover (mse);  				throw mse;  			}  			break;  		}  		default: {  			goto loop4_break;  		}  		}  		//loop4_continue: ; // LUCENENET NOTE: Not used  	}  	loop4_break:  	;  	// src/java/org/apache/lucene/expressions/js/Javascript.g:347:43: ( EXPONENT )?  	int alt5 = 2;  	int LA5_0 = input.LA (1);  	if ((LA5_0 == 'E' || LA5_0 == 'e')) {  		alt5 = 1;  	}  	switch (alt5) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:347:43: EXPONENT  		MEXPONENT ();  		break;  	}  	}  	break;  }  case 2: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:348:7: AT_DOT ( DECIMALDIGIT )+ ( EXPONENT )?  	MAT_DOT ();  	// src/java/org/apache/lucene/expressions/js/Javascript.g:348:14: ( DECIMALDIGIT )+  	int cnt6 = 0;  	while (true) {  		int alt6 = 2;  		int LA6_0 = input.LA (1);  		if (((LA6_0 >= '0' && LA6_0 <= '9'))) {  			alt6 = 1;  		}  		switch (alt6) {  		case 1: {  			// src/java/org/apache/lucene/expressions/js/Javascript.g:  			if ((input.LA (1) >= '0' && input.LA (1) <= '9')) {  				input.Consume ();  			} else {  				MismatchedSetException mse = new MismatchedSetException (null' input);  				Recover (mse);  				throw mse;  			}  			break;  		}  		default: {  			if (cnt6 >= 1) {  				goto loop6_break;  			}  			EarlyExitException eee = new EarlyExitException (6' input);  			throw eee;  		}  		}  		cnt6++;  		//loop6_continue: ; // LUCENENET NOTE: Not used  	}  	loop6_break:  	;  	// src/java/org/apache/lucene/expressions/js/Javascript.g:348:28: ( EXPONENT )?  	int alt7 = 2;  	int LA7_0 = input.LA (1);  	if ((LA7_0 == 'E' || LA7_0 == 'e')) {  		alt7 = 1;  	}  	switch (alt7) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:348:28: EXPONENT  		MEXPONENT ();  		break;  	}  	}  	break;  }  case 3: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:349:7: DECIMALINTEGER ( EXPONENT )?  	MDECIMALINTEGER ();  	// src/java/org/apache/lucene/expressions/js/Javascript.g:349:22: ( EXPONENT )?  	int alt8 = 2;  	int LA8_0 = input.LA (1);  	if ((LA8_0 == 'E' || LA8_0 == 'e')) {  		alt8 = 1;  	}  	switch (alt8) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:349:22: EXPONENT  		MEXPONENT ();  		break;  	}  	}  	break;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MDECIMAL,The following statement contains a magic number: switch (alt9) {  case 1: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:347:7: DECIMALINTEGER AT_DOT ( DECIMALDIGIT )* ( EXPONENT )?  	MDECIMALINTEGER ();  	MAT_DOT ();  	// src/java/org/apache/lucene/expressions/js/Javascript.g:347:29: ( DECIMALDIGIT )*  	while (true) {  		int alt4 = 2;  		int LA4_0 = input.LA (1);  		if (((LA4_0 >= '0' && LA4_0 <= '9'))) {  			alt4 = 1;  		}  		switch (alt4) {  		case 1: {  			// src/java/org/apache/lucene/expressions/js/Javascript.g:  			if ((input.LA (1) >= '0' && input.LA (1) <= '9')) {  				input.Consume ();  			} else {  				MismatchedSetException mse = new MismatchedSetException (null' input);  				Recover (mse);  				throw mse;  			}  			break;  		}  		default: {  			goto loop4_break;  		}  		}  		//loop4_continue: ; // LUCENENET NOTE: Not used  	}  	loop4_break:  	;  	// src/java/org/apache/lucene/expressions/js/Javascript.g:347:43: ( EXPONENT )?  	int alt5 = 2;  	int LA5_0 = input.LA (1);  	if ((LA5_0 == 'E' || LA5_0 == 'e')) {  		alt5 = 1;  	}  	switch (alt5) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:347:43: EXPONENT  		MEXPONENT ();  		break;  	}  	}  	break;  }  case 2: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:348:7: AT_DOT ( DECIMALDIGIT )+ ( EXPONENT )?  	MAT_DOT ();  	// src/java/org/apache/lucene/expressions/js/Javascript.g:348:14: ( DECIMALDIGIT )+  	int cnt6 = 0;  	while (true) {  		int alt6 = 2;  		int LA6_0 = input.LA (1);  		if (((LA6_0 >= '0' && LA6_0 <= '9'))) {  			alt6 = 1;  		}  		switch (alt6) {  		case 1: {  			// src/java/org/apache/lucene/expressions/js/Javascript.g:  			if ((input.LA (1) >= '0' && input.LA (1) <= '9')) {  				input.Consume ();  			} else {  				MismatchedSetException mse = new MismatchedSetException (null' input);  				Recover (mse);  				throw mse;  			}  			break;  		}  		default: {  			if (cnt6 >= 1) {  				goto loop6_break;  			}  			EarlyExitException eee = new EarlyExitException (6' input);  			throw eee;  		}  		}  		cnt6++;  		//loop6_continue: ; // LUCENENET NOTE: Not used  	}  	loop6_break:  	;  	// src/java/org/apache/lucene/expressions/js/Javascript.g:348:28: ( EXPONENT )?  	int alt7 = 2;  	int LA7_0 = input.LA (1);  	if ((LA7_0 == 'E' || LA7_0 == 'e')) {  		alt7 = 1;  	}  	switch (alt7) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:348:28: EXPONENT  		MEXPONENT ();  		break;  	}  	}  	break;  }  case 3: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:349:7: DECIMALINTEGER ( EXPONENT )?  	MDECIMALINTEGER ();  	// src/java/org/apache/lucene/expressions/js/Javascript.g:349:22: ( EXPONENT )?  	int alt8 = 2;  	int LA8_0 = input.LA (1);  	if ((LA8_0 == 'E' || LA8_0 == 'e')) {  		alt8 = 1;  	}  	switch (alt8) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:349:22: EXPONENT  		MEXPONENT ();  		break;  	}  	}  	break;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MDECIMAL,The following statement contains a magic number: switch (alt9) {  case 1: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:347:7: DECIMALINTEGER AT_DOT ( DECIMALDIGIT )* ( EXPONENT )?  	MDECIMALINTEGER ();  	MAT_DOT ();  	// src/java/org/apache/lucene/expressions/js/Javascript.g:347:29: ( DECIMALDIGIT )*  	while (true) {  		int alt4 = 2;  		int LA4_0 = input.LA (1);  		if (((LA4_0 >= '0' && LA4_0 <= '9'))) {  			alt4 = 1;  		}  		switch (alt4) {  		case 1: {  			// src/java/org/apache/lucene/expressions/js/Javascript.g:  			if ((input.LA (1) >= '0' && input.LA (1) <= '9')) {  				input.Consume ();  			} else {  				MismatchedSetException mse = new MismatchedSetException (null' input);  				Recover (mse);  				throw mse;  			}  			break;  		}  		default: {  			goto loop4_break;  		}  		}  		//loop4_continue: ; // LUCENENET NOTE: Not used  	}  	loop4_break:  	;  	// src/java/org/apache/lucene/expressions/js/Javascript.g:347:43: ( EXPONENT )?  	int alt5 = 2;  	int LA5_0 = input.LA (1);  	if ((LA5_0 == 'E' || LA5_0 == 'e')) {  		alt5 = 1;  	}  	switch (alt5) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:347:43: EXPONENT  		MEXPONENT ();  		break;  	}  	}  	break;  }  case 2: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:348:7: AT_DOT ( DECIMALDIGIT )+ ( EXPONENT )?  	MAT_DOT ();  	// src/java/org/apache/lucene/expressions/js/Javascript.g:348:14: ( DECIMALDIGIT )+  	int cnt6 = 0;  	while (true) {  		int alt6 = 2;  		int LA6_0 = input.LA (1);  		if (((LA6_0 >= '0' && LA6_0 <= '9'))) {  			alt6 = 1;  		}  		switch (alt6) {  		case 1: {  			// src/java/org/apache/lucene/expressions/js/Javascript.g:  			if ((input.LA (1) >= '0' && input.LA (1) <= '9')) {  				input.Consume ();  			} else {  				MismatchedSetException mse = new MismatchedSetException (null' input);  				Recover (mse);  				throw mse;  			}  			break;  		}  		default: {  			if (cnt6 >= 1) {  				goto loop6_break;  			}  			EarlyExitException eee = new EarlyExitException (6' input);  			throw eee;  		}  		}  		cnt6++;  		//loop6_continue: ; // LUCENENET NOTE: Not used  	}  	loop6_break:  	;  	// src/java/org/apache/lucene/expressions/js/Javascript.g:348:28: ( EXPONENT )?  	int alt7 = 2;  	int LA7_0 = input.LA (1);  	if ((LA7_0 == 'E' || LA7_0 == 'e')) {  		alt7 = 1;  	}  	switch (alt7) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:348:28: EXPONENT  		MEXPONENT ();  		break;  	}  	}  	break;  }  case 3: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:349:7: DECIMALINTEGER ( EXPONENT )?  	MDECIMALINTEGER ();  	// src/java/org/apache/lucene/expressions/js/Javascript.g:349:22: ( EXPONENT )?  	int alt8 = 2;  	int LA8_0 = input.LA (1);  	if ((LA8_0 == 'E' || LA8_0 == 'e')) {  		alt8 = 1;  	}  	switch (alt8) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:349:22: EXPONENT  		MEXPONENT ();  		break;  	}  	}  	break;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MDECIMAL,The following statement contains a magic number: switch (alt9) {  case 1: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:347:7: DECIMALINTEGER AT_DOT ( DECIMALDIGIT )* ( EXPONENT )?  	MDECIMALINTEGER ();  	MAT_DOT ();  	// src/java/org/apache/lucene/expressions/js/Javascript.g:347:29: ( DECIMALDIGIT )*  	while (true) {  		int alt4 = 2;  		int LA4_0 = input.LA (1);  		if (((LA4_0 >= '0' && LA4_0 <= '9'))) {  			alt4 = 1;  		}  		switch (alt4) {  		case 1: {  			// src/java/org/apache/lucene/expressions/js/Javascript.g:  			if ((input.LA (1) >= '0' && input.LA (1) <= '9')) {  				input.Consume ();  			} else {  				MismatchedSetException mse = new MismatchedSetException (null' input);  				Recover (mse);  				throw mse;  			}  			break;  		}  		default: {  			goto loop4_break;  		}  		}  		//loop4_continue: ; // LUCENENET NOTE: Not used  	}  	loop4_break:  	;  	// src/java/org/apache/lucene/expressions/js/Javascript.g:347:43: ( EXPONENT )?  	int alt5 = 2;  	int LA5_0 = input.LA (1);  	if ((LA5_0 == 'E' || LA5_0 == 'e')) {  		alt5 = 1;  	}  	switch (alt5) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:347:43: EXPONENT  		MEXPONENT ();  		break;  	}  	}  	break;  }  case 2: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:348:7: AT_DOT ( DECIMALDIGIT )+ ( EXPONENT )?  	MAT_DOT ();  	// src/java/org/apache/lucene/expressions/js/Javascript.g:348:14: ( DECIMALDIGIT )+  	int cnt6 = 0;  	while (true) {  		int alt6 = 2;  		int LA6_0 = input.LA (1);  		if (((LA6_0 >= '0' && LA6_0 <= '9'))) {  			alt6 = 1;  		}  		switch (alt6) {  		case 1: {  			// src/java/org/apache/lucene/expressions/js/Javascript.g:  			if ((input.LA (1) >= '0' && input.LA (1) <= '9')) {  				input.Consume ();  			} else {  				MismatchedSetException mse = new MismatchedSetException (null' input);  				Recover (mse);  				throw mse;  			}  			break;  		}  		default: {  			if (cnt6 >= 1) {  				goto loop6_break;  			}  			EarlyExitException eee = new EarlyExitException (6' input);  			throw eee;  		}  		}  		cnt6++;  		//loop6_continue: ; // LUCENENET NOTE: Not used  	}  	loop6_break:  	;  	// src/java/org/apache/lucene/expressions/js/Javascript.g:348:28: ( EXPONENT )?  	int alt7 = 2;  	int LA7_0 = input.LA (1);  	if ((LA7_0 == 'E' || LA7_0 == 'e')) {  		alt7 = 1;  	}  	switch (alt7) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:348:28: EXPONENT  		MEXPONENT ();  		break;  	}  	}  	break;  }  case 3: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:349:7: DECIMALINTEGER ( EXPONENT )?  	MDECIMALINTEGER ();  	// src/java/org/apache/lucene/expressions/js/Javascript.g:349:22: ( EXPONENT )?  	int alt8 = 2;  	int LA8_0 = input.LA (1);  	if ((LA8_0 == 'E' || LA8_0 == 'e')) {  		alt8 = 1;  	}  	switch (alt8) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:349:22: EXPONENT  		MEXPONENT ();  		break;  	}  	}  	break;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MDECIMAL,The following statement contains a magic number: switch (alt9) {  case 1: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:347:7: DECIMALINTEGER AT_DOT ( DECIMALDIGIT )* ( EXPONENT )?  	MDECIMALINTEGER ();  	MAT_DOT ();  	// src/java/org/apache/lucene/expressions/js/Javascript.g:347:29: ( DECIMALDIGIT )*  	while (true) {  		int alt4 = 2;  		int LA4_0 = input.LA (1);  		if (((LA4_0 >= '0' && LA4_0 <= '9'))) {  			alt4 = 1;  		}  		switch (alt4) {  		case 1: {  			// src/java/org/apache/lucene/expressions/js/Javascript.g:  			if ((input.LA (1) >= '0' && input.LA (1) <= '9')) {  				input.Consume ();  			} else {  				MismatchedSetException mse = new MismatchedSetException (null' input);  				Recover (mse);  				throw mse;  			}  			break;  		}  		default: {  			goto loop4_break;  		}  		}  		//loop4_continue: ; // LUCENENET NOTE: Not used  	}  	loop4_break:  	;  	// src/java/org/apache/lucene/expressions/js/Javascript.g:347:43: ( EXPONENT )?  	int alt5 = 2;  	int LA5_0 = input.LA (1);  	if ((LA5_0 == 'E' || LA5_0 == 'e')) {  		alt5 = 1;  	}  	switch (alt5) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:347:43: EXPONENT  		MEXPONENT ();  		break;  	}  	}  	break;  }  case 2: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:348:7: AT_DOT ( DECIMALDIGIT )+ ( EXPONENT )?  	MAT_DOT ();  	// src/java/org/apache/lucene/expressions/js/Javascript.g:348:14: ( DECIMALDIGIT )+  	int cnt6 = 0;  	while (true) {  		int alt6 = 2;  		int LA6_0 = input.LA (1);  		if (((LA6_0 >= '0' && LA6_0 <= '9'))) {  			alt6 = 1;  		}  		switch (alt6) {  		case 1: {  			// src/java/org/apache/lucene/expressions/js/Javascript.g:  			if ((input.LA (1) >= '0' && input.LA (1) <= '9')) {  				input.Consume ();  			} else {  				MismatchedSetException mse = new MismatchedSetException (null' input);  				Recover (mse);  				throw mse;  			}  			break;  		}  		default: {  			if (cnt6 >= 1) {  				goto loop6_break;  			}  			EarlyExitException eee = new EarlyExitException (6' input);  			throw eee;  		}  		}  		cnt6++;  		//loop6_continue: ; // LUCENENET NOTE: Not used  	}  	loop6_break:  	;  	// src/java/org/apache/lucene/expressions/js/Javascript.g:348:28: ( EXPONENT )?  	int alt7 = 2;  	int LA7_0 = input.LA (1);  	if ((LA7_0 == 'E' || LA7_0 == 'e')) {  		alt7 = 1;  	}  	switch (alt7) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:348:28: EXPONENT  		MEXPONENT ();  		break;  	}  	}  	break;  }  case 3: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:349:7: DECIMALINTEGER ( EXPONENT )?  	MDECIMALINTEGER ();  	// src/java/org/apache/lucene/expressions/js/Javascript.g:349:22: ( EXPONENT )?  	int alt8 = 2;  	int LA8_0 = input.LA (1);  	if ((LA8_0 == 'E' || LA8_0 == 'e')) {  		alt8 = 1;  	}  	switch (alt8) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:349:22: EXPONENT  		MEXPONENT ();  		break;  	}  	}  	break;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MDECIMAL,The following statement contains a magic number: switch (alt9) {  case 1: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:347:7: DECIMALINTEGER AT_DOT ( DECIMALDIGIT )* ( EXPONENT )?  	MDECIMALINTEGER ();  	MAT_DOT ();  	// src/java/org/apache/lucene/expressions/js/Javascript.g:347:29: ( DECIMALDIGIT )*  	while (true) {  		int alt4 = 2;  		int LA4_0 = input.LA (1);  		if (((LA4_0 >= '0' && LA4_0 <= '9'))) {  			alt4 = 1;  		}  		switch (alt4) {  		case 1: {  			// src/java/org/apache/lucene/expressions/js/Javascript.g:  			if ((input.LA (1) >= '0' && input.LA (1) <= '9')) {  				input.Consume ();  			} else {  				MismatchedSetException mse = new MismatchedSetException (null' input);  				Recover (mse);  				throw mse;  			}  			break;  		}  		default: {  			goto loop4_break;  		}  		}  		//loop4_continue: ; // LUCENENET NOTE: Not used  	}  	loop4_break:  	;  	// src/java/org/apache/lucene/expressions/js/Javascript.g:347:43: ( EXPONENT )?  	int alt5 = 2;  	int LA5_0 = input.LA (1);  	if ((LA5_0 == 'E' || LA5_0 == 'e')) {  		alt5 = 1;  	}  	switch (alt5) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:347:43: EXPONENT  		MEXPONENT ();  		break;  	}  	}  	break;  }  case 2: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:348:7: AT_DOT ( DECIMALDIGIT )+ ( EXPONENT )?  	MAT_DOT ();  	// src/java/org/apache/lucene/expressions/js/Javascript.g:348:14: ( DECIMALDIGIT )+  	int cnt6 = 0;  	while (true) {  		int alt6 = 2;  		int LA6_0 = input.LA (1);  		if (((LA6_0 >= '0' && LA6_0 <= '9'))) {  			alt6 = 1;  		}  		switch (alt6) {  		case 1: {  			// src/java/org/apache/lucene/expressions/js/Javascript.g:  			if ((input.LA (1) >= '0' && input.LA (1) <= '9')) {  				input.Consume ();  			} else {  				MismatchedSetException mse = new MismatchedSetException (null' input);  				Recover (mse);  				throw mse;  			}  			break;  		}  		default: {  			if (cnt6 >= 1) {  				goto loop6_break;  			}  			EarlyExitException eee = new EarlyExitException (6' input);  			throw eee;  		}  		}  		cnt6++;  		//loop6_continue: ; // LUCENENET NOTE: Not used  	}  	loop6_break:  	;  	// src/java/org/apache/lucene/expressions/js/Javascript.g:348:28: ( EXPONENT )?  	int alt7 = 2;  	int LA7_0 = input.LA (1);  	if ((LA7_0 == 'E' || LA7_0 == 'e')) {  		alt7 = 1;  	}  	switch (alt7) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:348:28: EXPONENT  		MEXPONENT ();  		break;  	}  	}  	break;  }  case 3: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:349:7: DECIMALINTEGER ( EXPONENT )?  	MDECIMALINTEGER ();  	// src/java/org/apache/lucene/expressions/js/Javascript.g:349:22: ( EXPONENT )?  	int alt8 = 2;  	int LA8_0 = input.LA (1);  	if ((LA8_0 == 'E' || LA8_0 == 'e')) {  		alt8 = 1;  	}  	switch (alt8) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:349:22: EXPONENT  		MEXPONENT ();  		break;  	}  	}  	break;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MDECIMAL,The following statement contains a magic number: switch (alt9) {  case 1: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:347:7: DECIMALINTEGER AT_DOT ( DECIMALDIGIT )* ( EXPONENT )?  	MDECIMALINTEGER ();  	MAT_DOT ();  	// src/java/org/apache/lucene/expressions/js/Javascript.g:347:29: ( DECIMALDIGIT )*  	while (true) {  		int alt4 = 2;  		int LA4_0 = input.LA (1);  		if (((LA4_0 >= '0' && LA4_0 <= '9'))) {  			alt4 = 1;  		}  		switch (alt4) {  		case 1: {  			// src/java/org/apache/lucene/expressions/js/Javascript.g:  			if ((input.LA (1) >= '0' && input.LA (1) <= '9')) {  				input.Consume ();  			} else {  				MismatchedSetException mse = new MismatchedSetException (null' input);  				Recover (mse);  				throw mse;  			}  			break;  		}  		default: {  			goto loop4_break;  		}  		}  		//loop4_continue: ; // LUCENENET NOTE: Not used  	}  	loop4_break:  	;  	// src/java/org/apache/lucene/expressions/js/Javascript.g:347:43: ( EXPONENT )?  	int alt5 = 2;  	int LA5_0 = input.LA (1);  	if ((LA5_0 == 'E' || LA5_0 == 'e')) {  		alt5 = 1;  	}  	switch (alt5) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:347:43: EXPONENT  		MEXPONENT ();  		break;  	}  	}  	break;  }  case 2: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:348:7: AT_DOT ( DECIMALDIGIT )+ ( EXPONENT )?  	MAT_DOT ();  	// src/java/org/apache/lucene/expressions/js/Javascript.g:348:14: ( DECIMALDIGIT )+  	int cnt6 = 0;  	while (true) {  		int alt6 = 2;  		int LA6_0 = input.LA (1);  		if (((LA6_0 >= '0' && LA6_0 <= '9'))) {  			alt6 = 1;  		}  		switch (alt6) {  		case 1: {  			// src/java/org/apache/lucene/expressions/js/Javascript.g:  			if ((input.LA (1) >= '0' && input.LA (1) <= '9')) {  				input.Consume ();  			} else {  				MismatchedSetException mse = new MismatchedSetException (null' input);  				Recover (mse);  				throw mse;  			}  			break;  		}  		default: {  			if (cnt6 >= 1) {  				goto loop6_break;  			}  			EarlyExitException eee = new EarlyExitException (6' input);  			throw eee;  		}  		}  		cnt6++;  		//loop6_continue: ; // LUCENENET NOTE: Not used  	}  	loop6_break:  	;  	// src/java/org/apache/lucene/expressions/js/Javascript.g:348:28: ( EXPONENT )?  	int alt7 = 2;  	int LA7_0 = input.LA (1);  	if ((LA7_0 == 'E' || LA7_0 == 'e')) {  		alt7 = 1;  	}  	switch (alt7) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:348:28: EXPONENT  		MEXPONENT ();  		break;  	}  	}  	break;  }  case 3: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:349:7: DECIMALINTEGER ( EXPONENT )?  	MDECIMALINTEGER ();  	// src/java/org/apache/lucene/expressions/js/Javascript.g:349:22: ( EXPONENT )?  	int alt8 = 2;  	int LA8_0 = input.LA (1);  	if ((LA8_0 == 'E' || LA8_0 == 'e')) {  		alt8 = 1;  	}  	switch (alt8) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:349:22: EXPONENT  		MEXPONENT ();  		break;  	}  	}  	break;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MDECIMAL,The following statement contains a magic number: switch (alt9) {  case 1: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:347:7: DECIMALINTEGER AT_DOT ( DECIMALDIGIT )* ( EXPONENT )?  	MDECIMALINTEGER ();  	MAT_DOT ();  	// src/java/org/apache/lucene/expressions/js/Javascript.g:347:29: ( DECIMALDIGIT )*  	while (true) {  		int alt4 = 2;  		int LA4_0 = input.LA (1);  		if (((LA4_0 >= '0' && LA4_0 <= '9'))) {  			alt4 = 1;  		}  		switch (alt4) {  		case 1: {  			// src/java/org/apache/lucene/expressions/js/Javascript.g:  			if ((input.LA (1) >= '0' && input.LA (1) <= '9')) {  				input.Consume ();  			} else {  				MismatchedSetException mse = new MismatchedSetException (null' input);  				Recover (mse);  				throw mse;  			}  			break;  		}  		default: {  			goto loop4_break;  		}  		}  		//loop4_continue: ; // LUCENENET NOTE: Not used  	}  	loop4_break:  	;  	// src/java/org/apache/lucene/expressions/js/Javascript.g:347:43: ( EXPONENT )?  	int alt5 = 2;  	int LA5_0 = input.LA (1);  	if ((LA5_0 == 'E' || LA5_0 == 'e')) {  		alt5 = 1;  	}  	switch (alt5) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:347:43: EXPONENT  		MEXPONENT ();  		break;  	}  	}  	break;  }  case 2: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:348:7: AT_DOT ( DECIMALDIGIT )+ ( EXPONENT )?  	MAT_DOT ();  	// src/java/org/apache/lucene/expressions/js/Javascript.g:348:14: ( DECIMALDIGIT )+  	int cnt6 = 0;  	while (true) {  		int alt6 = 2;  		int LA6_0 = input.LA (1);  		if (((LA6_0 >= '0' && LA6_0 <= '9'))) {  			alt6 = 1;  		}  		switch (alt6) {  		case 1: {  			// src/java/org/apache/lucene/expressions/js/Javascript.g:  			if ((input.LA (1) >= '0' && input.LA (1) <= '9')) {  				input.Consume ();  			} else {  				MismatchedSetException mse = new MismatchedSetException (null' input);  				Recover (mse);  				throw mse;  			}  			break;  		}  		default: {  			if (cnt6 >= 1) {  				goto loop6_break;  			}  			EarlyExitException eee = new EarlyExitException (6' input);  			throw eee;  		}  		}  		cnt6++;  		//loop6_continue: ; // LUCENENET NOTE: Not used  	}  	loop6_break:  	;  	// src/java/org/apache/lucene/expressions/js/Javascript.g:348:28: ( EXPONENT )?  	int alt7 = 2;  	int LA7_0 = input.LA (1);  	if ((LA7_0 == 'E' || LA7_0 == 'e')) {  		alt7 = 1;  	}  	switch (alt7) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:348:28: EXPONENT  		MEXPONENT ();  		break;  	}  	}  	break;  }  case 3: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:349:7: DECIMALINTEGER ( EXPONENT )?  	MDECIMALINTEGER ();  	// src/java/org/apache/lucene/expressions/js/Javascript.g:349:22: ( EXPONENT )?  	int alt8 = 2;  	int LA8_0 = input.LA (1);  	if ((LA8_0 == 'E' || LA8_0 == 'e')) {  		alt8 = 1;  	}  	switch (alt8) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:349:22: EXPONENT  		MEXPONENT ();  		break;  	}  	}  	break;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MDECIMAL,The following statement contains a magic number: while (true) {  	int alt4 = 2;  	int LA4_0 = input.LA (1);  	if (((LA4_0 >= '0' && LA4_0 <= '9'))) {  		alt4 = 1;  	}  	switch (alt4) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:  		if ((input.LA (1) >= '0' && input.LA (1) <= '9')) {  			input.Consume ();  		} else {  			MismatchedSetException mse = new MismatchedSetException (null' input);  			Recover (mse);  			throw mse;  		}  		break;  	}  	default: {  		goto loop4_break;  	}  	}  	//loop4_continue: ; // LUCENENET NOTE: Not used  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MDECIMAL,The following statement contains a magic number: while (true) {  	int alt6 = 2;  	int LA6_0 = input.LA (1);  	if (((LA6_0 >= '0' && LA6_0 <= '9'))) {  		alt6 = 1;  	}  	switch (alt6) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:  		if ((input.LA (1) >= '0' && input.LA (1) <= '9')) {  			input.Consume ();  		} else {  			MismatchedSetException mse = new MismatchedSetException (null' input);  			Recover (mse);  			throw mse;  		}  		break;  	}  	default: {  		if (cnt6 >= 1) {  			goto loop6_break;  		}  		EarlyExitException eee = new EarlyExitException (6' input);  		throw eee;  	}  	}  	cnt6++;  	//loop6_continue: ; // LUCENENET NOTE: Not used  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MDECIMAL,The following statement contains a magic number: while (true) {  	int alt6 = 2;  	int LA6_0 = input.LA (1);  	if (((LA6_0 >= '0' && LA6_0 <= '9'))) {  		alt6 = 1;  	}  	switch (alt6) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:  		if ((input.LA (1) >= '0' && input.LA (1) <= '9')) {  			input.Consume ();  		} else {  			MismatchedSetException mse = new MismatchedSetException (null' input);  			Recover (mse);  			throw mse;  		}  		break;  	}  	default: {  		if (cnt6 >= 1) {  			goto loop6_break;  		}  		EarlyExitException eee = new EarlyExitException (6' input);  		throw eee;  	}  	}  	cnt6++;  	//loop6_continue: ; // LUCENENET NOTE: Not used  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MDECIMAL,The following statement contains a magic number: switch (alt6) {  case 1: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:  	if ((input.LA (1) >= '0' && input.LA (1) <= '9')) {  		input.Consume ();  	} else {  		MismatchedSetException mse = new MismatchedSetException (null' input);  		Recover (mse);  		throw mse;  	}  	break;  }  default: {  	if (cnt6 >= 1) {  		goto loop6_break;  	}  	EarlyExitException eee = new EarlyExitException (6' input);  	throw eee;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MOCTAL,The following statement contains a magic number: try {  	int _type = OCTAL;  	int _channel = TokenChannels.Default;  	{  		// src/java/org/apache/lucene/expressions/js/Javascript.g:353:5: ( '0' ( OCTALDIGIT )+ )  		// src/java/org/apache/lucene/expressions/js/Javascript.g:353:7: '0' ( OCTALDIGIT )+  		Match ('0');  		// src/java/org/apache/lucene/expressions/js/Javascript.g:353:11: ( OCTALDIGIT )+  		int cnt10 = 0;  		while (true) {  			int alt10 = 2;  			int LA10_0 = input.LA (1);  			if (((LA10_0 >= '0' && LA10_0 <= '7'))) {  				alt10 = 1;  			}  			switch (alt10) {  			case 1: {  				// src/java/org/apache/lucene/expressions/js/Javascript.g:  				if ((input.LA (1) >= '0' && input.LA (1) <= '7')) {  					input.Consume ();  				} else {  					MismatchedSetException mse = new MismatchedSetException (null' input);  					Recover (mse);  					throw mse;  				}  				break;  			}  			default: {  				if (cnt10 >= 1) {  					goto loop10_break;  				}  				EarlyExitException eee = new EarlyExitException (10' input);  				throw eee;  			}  			}  			cnt10++;  			//loop10_continue: ; // LUCENENET NOTE: Not used  		}  		loop10_break:  		;  	}  	state.type = _type;  	state.channel = _channel;  } finally {  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MOCTAL,The following statement contains a magic number: try {  	int _type = OCTAL;  	int _channel = TokenChannels.Default;  	{  		// src/java/org/apache/lucene/expressions/js/Javascript.g:353:5: ( '0' ( OCTALDIGIT )+ )  		// src/java/org/apache/lucene/expressions/js/Javascript.g:353:7: '0' ( OCTALDIGIT )+  		Match ('0');  		// src/java/org/apache/lucene/expressions/js/Javascript.g:353:11: ( OCTALDIGIT )+  		int cnt10 = 0;  		while (true) {  			int alt10 = 2;  			int LA10_0 = input.LA (1);  			if (((LA10_0 >= '0' && LA10_0 <= '7'))) {  				alt10 = 1;  			}  			switch (alt10) {  			case 1: {  				// src/java/org/apache/lucene/expressions/js/Javascript.g:  				if ((input.LA (1) >= '0' && input.LA (1) <= '7')) {  					input.Consume ();  				} else {  					MismatchedSetException mse = new MismatchedSetException (null' input);  					Recover (mse);  					throw mse;  				}  				break;  			}  			default: {  				if (cnt10 >= 1) {  					goto loop10_break;  				}  				EarlyExitException eee = new EarlyExitException (10' input);  				throw eee;  			}  			}  			cnt10++;  			//loop10_continue: ; // LUCENENET NOTE: Not used  		}  		loop10_break:  		;  	}  	state.type = _type;  	state.channel = _channel;  } finally {  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MOCTAL,The following statement contains a magic number: while (true) {  	int alt10 = 2;  	int LA10_0 = input.LA (1);  	if (((LA10_0 >= '0' && LA10_0 <= '7'))) {  		alt10 = 1;  	}  	switch (alt10) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:  		if ((input.LA (1) >= '0' && input.LA (1) <= '7')) {  			input.Consume ();  		} else {  			MismatchedSetException mse = new MismatchedSetException (null' input);  			Recover (mse);  			throw mse;  		}  		break;  	}  	default: {  		if (cnt10 >= 1) {  			goto loop10_break;  		}  		EarlyExitException eee = new EarlyExitException (10' input);  		throw eee;  	}  	}  	cnt10++;  	//loop10_continue: ; // LUCENENET NOTE: Not used  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MOCTAL,The following statement contains a magic number: while (true) {  	int alt10 = 2;  	int LA10_0 = input.LA (1);  	if (((LA10_0 >= '0' && LA10_0 <= '7'))) {  		alt10 = 1;  	}  	switch (alt10) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:  		if ((input.LA (1) >= '0' && input.LA (1) <= '7')) {  			input.Consume ();  		} else {  			MismatchedSetException mse = new MismatchedSetException (null' input);  			Recover (mse);  			throw mse;  		}  		break;  	}  	default: {  		if (cnt10 >= 1) {  			goto loop10_break;  		}  		EarlyExitException eee = new EarlyExitException (10' input);  		throw eee;  	}  	}  	cnt10++;  	//loop10_continue: ; // LUCENENET NOTE: Not used  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MOCTAL,The following statement contains a magic number: switch (alt10) {  case 1: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:  	if ((input.LA (1) >= '0' && input.LA (1) <= '7')) {  		input.Consume ();  	} else {  		MismatchedSetException mse = new MismatchedSetException (null' input);  		Recover (mse);  		throw mse;  	}  	break;  }  default: {  	if (cnt10 >= 1) {  		goto loop10_break;  	}  	EarlyExitException eee = new EarlyExitException (10' input);  	throw eee;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MHEX,The following statement contains a magic number: try {  	int _type = HEX;  	int _channel = TokenChannels.Default;  	{  		// src/java/org/apache/lucene/expressions/js/Javascript.g:357:5: ( ( '0x' | '0X' ) ( HEXDIGIT )+ )  		// src/java/org/apache/lucene/expressions/js/Javascript.g:357:7: ( '0x' | '0X' ) ( HEXDIGIT )+  		// src/java/org/apache/lucene/expressions/js/Javascript.g:357:7: ( '0x' | '0X' )  		int alt11 = 2;  		int LA11_0 = input.LA (1);  		if ((LA11_0 == '0')) {  			int LA11_1 = input.LA (2);  			if ((LA11_1 == 'x')) {  				alt11 = 1;  			} else {  				if ((LA11_1 == 'X')) {  					alt11 = 2;  				} else {  					int nvaeMark = input.Mark ();  					try {  						input.Consume ();  						NoViableAltException nvae = new NoViableAltException (string.Empty' 11' 1' input);  						throw nvae;  					} finally {  						input.Rewind (nvaeMark);  					}  				}  			}  		} else {  			NoViableAltException nvae = new NoViableAltException (string.Empty' 11' 0' input);  			throw nvae;  		}  		switch (alt11) {  		case 1: {  			// src/java/org/apache/lucene/expressions/js/Javascript.g:357:8: '0x'  			Match ("0x");  			break;  		}  		case 2: {  			// src/java/org/apache/lucene/expressions/js/Javascript.g:357:13: '0X'  			Match ("0X");  			break;  		}  		}  		// src/java/org/apache/lucene/expressions/js/Javascript.g:357:19: ( HEXDIGIT )+  		int cnt12 = 0;  		while (true) {  			int alt12 = 2;  			int LA12_0 = input.LA (1);  			if (((LA12_0 >= '0' && LA12_0 <= '9') || (LA12_0 >= 'A' && LA12_0 <= 'F') || (LA12_0 >= 'a' && LA12_0 <= 'f'))) {  				alt12 = 1;  			}  			switch (alt12) {  			case 1: {  				// src/java/org/apache/lucene/expressions/js/Javascript.g:  				if ((input.LA (1) >= '0' && input.LA (1) <= '9') || (input.LA (1) >= 'A' && input.LA (1) <= 'F') || (input.LA (1) >= 'a' && input.LA (1) <= 'f')) {  					input.Consume ();  				} else {  					MismatchedSetException mse = new MismatchedSetException (null' input);  					Recover (mse);  					throw mse;  				}  				break;  			}  			default: {  				if (cnt12 >= 1) {  					goto loop12_break;  				}  				EarlyExitException eee = new EarlyExitException (12' input);  				throw eee;  			}  			}  			cnt12++;  			//loop12_continue: ; // LUCENENET NOTE: Not used  		}  		loop12_break:  		;  	}  	state.type = _type;  	state.channel = _channel;  } finally {  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MHEX,The following statement contains a magic number: try {  	int _type = HEX;  	int _channel = TokenChannels.Default;  	{  		// src/java/org/apache/lucene/expressions/js/Javascript.g:357:5: ( ( '0x' | '0X' ) ( HEXDIGIT )+ )  		// src/java/org/apache/lucene/expressions/js/Javascript.g:357:7: ( '0x' | '0X' ) ( HEXDIGIT )+  		// src/java/org/apache/lucene/expressions/js/Javascript.g:357:7: ( '0x' | '0X' )  		int alt11 = 2;  		int LA11_0 = input.LA (1);  		if ((LA11_0 == '0')) {  			int LA11_1 = input.LA (2);  			if ((LA11_1 == 'x')) {  				alt11 = 1;  			} else {  				if ((LA11_1 == 'X')) {  					alt11 = 2;  				} else {  					int nvaeMark = input.Mark ();  					try {  						input.Consume ();  						NoViableAltException nvae = new NoViableAltException (string.Empty' 11' 1' input);  						throw nvae;  					} finally {  						input.Rewind (nvaeMark);  					}  				}  			}  		} else {  			NoViableAltException nvae = new NoViableAltException (string.Empty' 11' 0' input);  			throw nvae;  		}  		switch (alt11) {  		case 1: {  			// src/java/org/apache/lucene/expressions/js/Javascript.g:357:8: '0x'  			Match ("0x");  			break;  		}  		case 2: {  			// src/java/org/apache/lucene/expressions/js/Javascript.g:357:13: '0X'  			Match ("0X");  			break;  		}  		}  		// src/java/org/apache/lucene/expressions/js/Javascript.g:357:19: ( HEXDIGIT )+  		int cnt12 = 0;  		while (true) {  			int alt12 = 2;  			int LA12_0 = input.LA (1);  			if (((LA12_0 >= '0' && LA12_0 <= '9') || (LA12_0 >= 'A' && LA12_0 <= 'F') || (LA12_0 >= 'a' && LA12_0 <= 'f'))) {  				alt12 = 1;  			}  			switch (alt12) {  			case 1: {  				// src/java/org/apache/lucene/expressions/js/Javascript.g:  				if ((input.LA (1) >= '0' && input.LA (1) <= '9') || (input.LA (1) >= 'A' && input.LA (1) <= 'F') || (input.LA (1) >= 'a' && input.LA (1) <= 'f')) {  					input.Consume ();  				} else {  					MismatchedSetException mse = new MismatchedSetException (null' input);  					Recover (mse);  					throw mse;  				}  				break;  			}  			default: {  				if (cnt12 >= 1) {  					goto loop12_break;  				}  				EarlyExitException eee = new EarlyExitException (12' input);  				throw eee;  			}  			}  			cnt12++;  			//loop12_continue: ; // LUCENENET NOTE: Not used  		}  		loop12_break:  		;  	}  	state.type = _type;  	state.channel = _channel;  } finally {  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MHEX,The following statement contains a magic number: try {  	int _type = HEX;  	int _channel = TokenChannels.Default;  	{  		// src/java/org/apache/lucene/expressions/js/Javascript.g:357:5: ( ( '0x' | '0X' ) ( HEXDIGIT )+ )  		// src/java/org/apache/lucene/expressions/js/Javascript.g:357:7: ( '0x' | '0X' ) ( HEXDIGIT )+  		// src/java/org/apache/lucene/expressions/js/Javascript.g:357:7: ( '0x' | '0X' )  		int alt11 = 2;  		int LA11_0 = input.LA (1);  		if ((LA11_0 == '0')) {  			int LA11_1 = input.LA (2);  			if ((LA11_1 == 'x')) {  				alt11 = 1;  			} else {  				if ((LA11_1 == 'X')) {  					alt11 = 2;  				} else {  					int nvaeMark = input.Mark ();  					try {  						input.Consume ();  						NoViableAltException nvae = new NoViableAltException (string.Empty' 11' 1' input);  						throw nvae;  					} finally {  						input.Rewind (nvaeMark);  					}  				}  			}  		} else {  			NoViableAltException nvae = new NoViableAltException (string.Empty' 11' 0' input);  			throw nvae;  		}  		switch (alt11) {  		case 1: {  			// src/java/org/apache/lucene/expressions/js/Javascript.g:357:8: '0x'  			Match ("0x");  			break;  		}  		case 2: {  			// src/java/org/apache/lucene/expressions/js/Javascript.g:357:13: '0X'  			Match ("0X");  			break;  		}  		}  		// src/java/org/apache/lucene/expressions/js/Javascript.g:357:19: ( HEXDIGIT )+  		int cnt12 = 0;  		while (true) {  			int alt12 = 2;  			int LA12_0 = input.LA (1);  			if (((LA12_0 >= '0' && LA12_0 <= '9') || (LA12_0 >= 'A' && LA12_0 <= 'F') || (LA12_0 >= 'a' && LA12_0 <= 'f'))) {  				alt12 = 1;  			}  			switch (alt12) {  			case 1: {  				// src/java/org/apache/lucene/expressions/js/Javascript.g:  				if ((input.LA (1) >= '0' && input.LA (1) <= '9') || (input.LA (1) >= 'A' && input.LA (1) <= 'F') || (input.LA (1) >= 'a' && input.LA (1) <= 'f')) {  					input.Consume ();  				} else {  					MismatchedSetException mse = new MismatchedSetException (null' input);  					Recover (mse);  					throw mse;  				}  				break;  			}  			default: {  				if (cnt12 >= 1) {  					goto loop12_break;  				}  				EarlyExitException eee = new EarlyExitException (12' input);  				throw eee;  			}  			}  			cnt12++;  			//loop12_continue: ; // LUCENENET NOTE: Not used  		}  		loop12_break:  		;  	}  	state.type = _type;  	state.channel = _channel;  } finally {  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MHEX,The following statement contains a magic number: try {  	int _type = HEX;  	int _channel = TokenChannels.Default;  	{  		// src/java/org/apache/lucene/expressions/js/Javascript.g:357:5: ( ( '0x' | '0X' ) ( HEXDIGIT )+ )  		// src/java/org/apache/lucene/expressions/js/Javascript.g:357:7: ( '0x' | '0X' ) ( HEXDIGIT )+  		// src/java/org/apache/lucene/expressions/js/Javascript.g:357:7: ( '0x' | '0X' )  		int alt11 = 2;  		int LA11_0 = input.LA (1);  		if ((LA11_0 == '0')) {  			int LA11_1 = input.LA (2);  			if ((LA11_1 == 'x')) {  				alt11 = 1;  			} else {  				if ((LA11_1 == 'X')) {  					alt11 = 2;  				} else {  					int nvaeMark = input.Mark ();  					try {  						input.Consume ();  						NoViableAltException nvae = new NoViableAltException (string.Empty' 11' 1' input);  						throw nvae;  					} finally {  						input.Rewind (nvaeMark);  					}  				}  			}  		} else {  			NoViableAltException nvae = new NoViableAltException (string.Empty' 11' 0' input);  			throw nvae;  		}  		switch (alt11) {  		case 1: {  			// src/java/org/apache/lucene/expressions/js/Javascript.g:357:8: '0x'  			Match ("0x");  			break;  		}  		case 2: {  			// src/java/org/apache/lucene/expressions/js/Javascript.g:357:13: '0X'  			Match ("0X");  			break;  		}  		}  		// src/java/org/apache/lucene/expressions/js/Javascript.g:357:19: ( HEXDIGIT )+  		int cnt12 = 0;  		while (true) {  			int alt12 = 2;  			int LA12_0 = input.LA (1);  			if (((LA12_0 >= '0' && LA12_0 <= '9') || (LA12_0 >= 'A' && LA12_0 <= 'F') || (LA12_0 >= 'a' && LA12_0 <= 'f'))) {  				alt12 = 1;  			}  			switch (alt12) {  			case 1: {  				// src/java/org/apache/lucene/expressions/js/Javascript.g:  				if ((input.LA (1) >= '0' && input.LA (1) <= '9') || (input.LA (1) >= 'A' && input.LA (1) <= 'F') || (input.LA (1) >= 'a' && input.LA (1) <= 'f')) {  					input.Consume ();  				} else {  					MismatchedSetException mse = new MismatchedSetException (null' input);  					Recover (mse);  					throw mse;  				}  				break;  			}  			default: {  				if (cnt12 >= 1) {  					goto loop12_break;  				}  				EarlyExitException eee = new EarlyExitException (12' input);  				throw eee;  			}  			}  			cnt12++;  			//loop12_continue: ; // LUCENENET NOTE: Not used  		}  		loop12_break:  		;  	}  	state.type = _type;  	state.channel = _channel;  } finally {  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MHEX,The following statement contains a magic number: try {  	int _type = HEX;  	int _channel = TokenChannels.Default;  	{  		// src/java/org/apache/lucene/expressions/js/Javascript.g:357:5: ( ( '0x' | '0X' ) ( HEXDIGIT )+ )  		// src/java/org/apache/lucene/expressions/js/Javascript.g:357:7: ( '0x' | '0X' ) ( HEXDIGIT )+  		// src/java/org/apache/lucene/expressions/js/Javascript.g:357:7: ( '0x' | '0X' )  		int alt11 = 2;  		int LA11_0 = input.LA (1);  		if ((LA11_0 == '0')) {  			int LA11_1 = input.LA (2);  			if ((LA11_1 == 'x')) {  				alt11 = 1;  			} else {  				if ((LA11_1 == 'X')) {  					alt11 = 2;  				} else {  					int nvaeMark = input.Mark ();  					try {  						input.Consume ();  						NoViableAltException nvae = new NoViableAltException (string.Empty' 11' 1' input);  						throw nvae;  					} finally {  						input.Rewind (nvaeMark);  					}  				}  			}  		} else {  			NoViableAltException nvae = new NoViableAltException (string.Empty' 11' 0' input);  			throw nvae;  		}  		switch (alt11) {  		case 1: {  			// src/java/org/apache/lucene/expressions/js/Javascript.g:357:8: '0x'  			Match ("0x");  			break;  		}  		case 2: {  			// src/java/org/apache/lucene/expressions/js/Javascript.g:357:13: '0X'  			Match ("0X");  			break;  		}  		}  		// src/java/org/apache/lucene/expressions/js/Javascript.g:357:19: ( HEXDIGIT )+  		int cnt12 = 0;  		while (true) {  			int alt12 = 2;  			int LA12_0 = input.LA (1);  			if (((LA12_0 >= '0' && LA12_0 <= '9') || (LA12_0 >= 'A' && LA12_0 <= 'F') || (LA12_0 >= 'a' && LA12_0 <= 'f'))) {  				alt12 = 1;  			}  			switch (alt12) {  			case 1: {  				// src/java/org/apache/lucene/expressions/js/Javascript.g:  				if ((input.LA (1) >= '0' && input.LA (1) <= '9') || (input.LA (1) >= 'A' && input.LA (1) <= 'F') || (input.LA (1) >= 'a' && input.LA (1) <= 'f')) {  					input.Consume ();  				} else {  					MismatchedSetException mse = new MismatchedSetException (null' input);  					Recover (mse);  					throw mse;  				}  				break;  			}  			default: {  				if (cnt12 >= 1) {  					goto loop12_break;  				}  				EarlyExitException eee = new EarlyExitException (12' input);  				throw eee;  			}  			}  			cnt12++;  			//loop12_continue: ; // LUCENENET NOTE: Not used  		}  		loop12_break:  		;  	}  	state.type = _type;  	state.channel = _channel;  } finally {  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MHEX,The following statement contains a magic number: try {  	int _type = HEX;  	int _channel = TokenChannels.Default;  	{  		// src/java/org/apache/lucene/expressions/js/Javascript.g:357:5: ( ( '0x' | '0X' ) ( HEXDIGIT )+ )  		// src/java/org/apache/lucene/expressions/js/Javascript.g:357:7: ( '0x' | '0X' ) ( HEXDIGIT )+  		// src/java/org/apache/lucene/expressions/js/Javascript.g:357:7: ( '0x' | '0X' )  		int alt11 = 2;  		int LA11_0 = input.LA (1);  		if ((LA11_0 == '0')) {  			int LA11_1 = input.LA (2);  			if ((LA11_1 == 'x')) {  				alt11 = 1;  			} else {  				if ((LA11_1 == 'X')) {  					alt11 = 2;  				} else {  					int nvaeMark = input.Mark ();  					try {  						input.Consume ();  						NoViableAltException nvae = new NoViableAltException (string.Empty' 11' 1' input);  						throw nvae;  					} finally {  						input.Rewind (nvaeMark);  					}  				}  			}  		} else {  			NoViableAltException nvae = new NoViableAltException (string.Empty' 11' 0' input);  			throw nvae;  		}  		switch (alt11) {  		case 1: {  			// src/java/org/apache/lucene/expressions/js/Javascript.g:357:8: '0x'  			Match ("0x");  			break;  		}  		case 2: {  			// src/java/org/apache/lucene/expressions/js/Javascript.g:357:13: '0X'  			Match ("0X");  			break;  		}  		}  		// src/java/org/apache/lucene/expressions/js/Javascript.g:357:19: ( HEXDIGIT )+  		int cnt12 = 0;  		while (true) {  			int alt12 = 2;  			int LA12_0 = input.LA (1);  			if (((LA12_0 >= '0' && LA12_0 <= '9') || (LA12_0 >= 'A' && LA12_0 <= 'F') || (LA12_0 >= 'a' && LA12_0 <= 'f'))) {  				alt12 = 1;  			}  			switch (alt12) {  			case 1: {  				// src/java/org/apache/lucene/expressions/js/Javascript.g:  				if ((input.LA (1) >= '0' && input.LA (1) <= '9') || (input.LA (1) >= 'A' && input.LA (1) <= 'F') || (input.LA (1) >= 'a' && input.LA (1) <= 'f')) {  					input.Consume ();  				} else {  					MismatchedSetException mse = new MismatchedSetException (null' input);  					Recover (mse);  					throw mse;  				}  				break;  			}  			default: {  				if (cnt12 >= 1) {  					goto loop12_break;  				}  				EarlyExitException eee = new EarlyExitException (12' input);  				throw eee;  			}  			}  			cnt12++;  			//loop12_continue: ; // LUCENENET NOTE: Not used  		}  		loop12_break:  		;  	}  	state.type = _type;  	state.channel = _channel;  } finally {  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MHEX,The following statement contains a magic number: try {  	int _type = HEX;  	int _channel = TokenChannels.Default;  	{  		// src/java/org/apache/lucene/expressions/js/Javascript.g:357:5: ( ( '0x' | '0X' ) ( HEXDIGIT )+ )  		// src/java/org/apache/lucene/expressions/js/Javascript.g:357:7: ( '0x' | '0X' ) ( HEXDIGIT )+  		// src/java/org/apache/lucene/expressions/js/Javascript.g:357:7: ( '0x' | '0X' )  		int alt11 = 2;  		int LA11_0 = input.LA (1);  		if ((LA11_0 == '0')) {  			int LA11_1 = input.LA (2);  			if ((LA11_1 == 'x')) {  				alt11 = 1;  			} else {  				if ((LA11_1 == 'X')) {  					alt11 = 2;  				} else {  					int nvaeMark = input.Mark ();  					try {  						input.Consume ();  						NoViableAltException nvae = new NoViableAltException (string.Empty' 11' 1' input);  						throw nvae;  					} finally {  						input.Rewind (nvaeMark);  					}  				}  			}  		} else {  			NoViableAltException nvae = new NoViableAltException (string.Empty' 11' 0' input);  			throw nvae;  		}  		switch (alt11) {  		case 1: {  			// src/java/org/apache/lucene/expressions/js/Javascript.g:357:8: '0x'  			Match ("0x");  			break;  		}  		case 2: {  			// src/java/org/apache/lucene/expressions/js/Javascript.g:357:13: '0X'  			Match ("0X");  			break;  		}  		}  		// src/java/org/apache/lucene/expressions/js/Javascript.g:357:19: ( HEXDIGIT )+  		int cnt12 = 0;  		while (true) {  			int alt12 = 2;  			int LA12_0 = input.LA (1);  			if (((LA12_0 >= '0' && LA12_0 <= '9') || (LA12_0 >= 'A' && LA12_0 <= 'F') || (LA12_0 >= 'a' && LA12_0 <= 'f'))) {  				alt12 = 1;  			}  			switch (alt12) {  			case 1: {  				// src/java/org/apache/lucene/expressions/js/Javascript.g:  				if ((input.LA (1) >= '0' && input.LA (1) <= '9') || (input.LA (1) >= 'A' && input.LA (1) <= 'F') || (input.LA (1) >= 'a' && input.LA (1) <= 'f')) {  					input.Consume ();  				} else {  					MismatchedSetException mse = new MismatchedSetException (null' input);  					Recover (mse);  					throw mse;  				}  				break;  			}  			default: {  				if (cnt12 >= 1) {  					goto loop12_break;  				}  				EarlyExitException eee = new EarlyExitException (12' input);  				throw eee;  			}  			}  			cnt12++;  			//loop12_continue: ; // LUCENENET NOTE: Not used  		}  		loop12_break:  		;  	}  	state.type = _type;  	state.channel = _channel;  } finally {  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MHEX,The following statement contains a magic number: try {  	int _type = HEX;  	int _channel = TokenChannels.Default;  	{  		// src/java/org/apache/lucene/expressions/js/Javascript.g:357:5: ( ( '0x' | '0X' ) ( HEXDIGIT )+ )  		// src/java/org/apache/lucene/expressions/js/Javascript.g:357:7: ( '0x' | '0X' ) ( HEXDIGIT )+  		// src/java/org/apache/lucene/expressions/js/Javascript.g:357:7: ( '0x' | '0X' )  		int alt11 = 2;  		int LA11_0 = input.LA (1);  		if ((LA11_0 == '0')) {  			int LA11_1 = input.LA (2);  			if ((LA11_1 == 'x')) {  				alt11 = 1;  			} else {  				if ((LA11_1 == 'X')) {  					alt11 = 2;  				} else {  					int nvaeMark = input.Mark ();  					try {  						input.Consume ();  						NoViableAltException nvae = new NoViableAltException (string.Empty' 11' 1' input);  						throw nvae;  					} finally {  						input.Rewind (nvaeMark);  					}  				}  			}  		} else {  			NoViableAltException nvae = new NoViableAltException (string.Empty' 11' 0' input);  			throw nvae;  		}  		switch (alt11) {  		case 1: {  			// src/java/org/apache/lucene/expressions/js/Javascript.g:357:8: '0x'  			Match ("0x");  			break;  		}  		case 2: {  			// src/java/org/apache/lucene/expressions/js/Javascript.g:357:13: '0X'  			Match ("0X");  			break;  		}  		}  		// src/java/org/apache/lucene/expressions/js/Javascript.g:357:19: ( HEXDIGIT )+  		int cnt12 = 0;  		while (true) {  			int alt12 = 2;  			int LA12_0 = input.LA (1);  			if (((LA12_0 >= '0' && LA12_0 <= '9') || (LA12_0 >= 'A' && LA12_0 <= 'F') || (LA12_0 >= 'a' && LA12_0 <= 'f'))) {  				alt12 = 1;  			}  			switch (alt12) {  			case 1: {  				// src/java/org/apache/lucene/expressions/js/Javascript.g:  				if ((input.LA (1) >= '0' && input.LA (1) <= '9') || (input.LA (1) >= 'A' && input.LA (1) <= 'F') || (input.LA (1) >= 'a' && input.LA (1) <= 'f')) {  					input.Consume ();  				} else {  					MismatchedSetException mse = new MismatchedSetException (null' input);  					Recover (mse);  					throw mse;  				}  				break;  			}  			default: {  				if (cnt12 >= 1) {  					goto loop12_break;  				}  				EarlyExitException eee = new EarlyExitException (12' input);  				throw eee;  			}  			}  			cnt12++;  			//loop12_continue: ; // LUCENENET NOTE: Not used  		}  		loop12_break:  		;  	}  	state.type = _type;  	state.channel = _channel;  } finally {  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MHEX,The following statement contains a magic number: if ((LA11_0 == '0')) {  	int LA11_1 = input.LA (2);  	if ((LA11_1 == 'x')) {  		alt11 = 1;  	} else {  		if ((LA11_1 == 'X')) {  			alt11 = 2;  		} else {  			int nvaeMark = input.Mark ();  			try {  				input.Consume ();  				NoViableAltException nvae = new NoViableAltException (string.Empty' 11' 1' input);  				throw nvae;  			} finally {  				input.Rewind (nvaeMark);  			}  		}  	}  } else {  	NoViableAltException nvae = new NoViableAltException (string.Empty' 11' 0' input);  	throw nvae;  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MHEX,The following statement contains a magic number: if ((LA11_0 == '0')) {  	int LA11_1 = input.LA (2);  	if ((LA11_1 == 'x')) {  		alt11 = 1;  	} else {  		if ((LA11_1 == 'X')) {  			alt11 = 2;  		} else {  			int nvaeMark = input.Mark ();  			try {  				input.Consume ();  				NoViableAltException nvae = new NoViableAltException (string.Empty' 11' 1' input);  				throw nvae;  			} finally {  				input.Rewind (nvaeMark);  			}  		}  	}  } else {  	NoViableAltException nvae = new NoViableAltException (string.Empty' 11' 0' input);  	throw nvae;  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MHEX,The following statement contains a magic number: if ((LA11_0 == '0')) {  	int LA11_1 = input.LA (2);  	if ((LA11_1 == 'x')) {  		alt11 = 1;  	} else {  		if ((LA11_1 == 'X')) {  			alt11 = 2;  		} else {  			int nvaeMark = input.Mark ();  			try {  				input.Consume ();  				NoViableAltException nvae = new NoViableAltException (string.Empty' 11' 1' input);  				throw nvae;  			} finally {  				input.Rewind (nvaeMark);  			}  		}  	}  } else {  	NoViableAltException nvae = new NoViableAltException (string.Empty' 11' 0' input);  	throw nvae;  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MHEX,The following statement contains a magic number: if ((LA11_0 == '0')) {  	int LA11_1 = input.LA (2);  	if ((LA11_1 == 'x')) {  		alt11 = 1;  	} else {  		if ((LA11_1 == 'X')) {  			alt11 = 2;  		} else {  			int nvaeMark = input.Mark ();  			try {  				input.Consume ();  				NoViableAltException nvae = new NoViableAltException (string.Empty' 11' 1' input);  				throw nvae;  			} finally {  				input.Rewind (nvaeMark);  			}  		}  	}  } else {  	NoViableAltException nvae = new NoViableAltException (string.Empty' 11' 0' input);  	throw nvae;  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MHEX,The following statement contains a magic number: if ((LA11_1 == 'x')) {  	alt11 = 1;  } else {  	if ((LA11_1 == 'X')) {  		alt11 = 2;  	} else {  		int nvaeMark = input.Mark ();  		try {  			input.Consume ();  			NoViableAltException nvae = new NoViableAltException (string.Empty' 11' 1' input);  			throw nvae;  		} finally {  			input.Rewind (nvaeMark);  		}  	}  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MHEX,The following statement contains a magic number: if ((LA11_1 == 'x')) {  	alt11 = 1;  } else {  	if ((LA11_1 == 'X')) {  		alt11 = 2;  	} else {  		int nvaeMark = input.Mark ();  		try {  			input.Consume ();  			NoViableAltException nvae = new NoViableAltException (string.Empty' 11' 1' input);  			throw nvae;  		} finally {  			input.Rewind (nvaeMark);  		}  	}  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MHEX,The following statement contains a magic number: if ((LA11_1 == 'X')) {  	alt11 = 2;  } else {  	int nvaeMark = input.Mark ();  	try {  		input.Consume ();  		NoViableAltException nvae = new NoViableAltException (string.Empty' 11' 1' input);  		throw nvae;  	} finally {  		input.Rewind (nvaeMark);  	}  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MHEX,The following statement contains a magic number: if ((LA11_1 == 'X')) {  	alt11 = 2;  } else {  	int nvaeMark = input.Mark ();  	try {  		input.Consume ();  		NoViableAltException nvae = new NoViableAltException (string.Empty' 11' 1' input);  		throw nvae;  	} finally {  		input.Rewind (nvaeMark);  	}  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MHEX,The following statement contains a magic number: alt11 = 2;  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MHEX,The following statement contains a magic number: try {  	input.Consume ();  	NoViableAltException nvae = new NoViableAltException (string.Empty' 11' 1' input);  	throw nvae;  } finally {  	input.Rewind (nvaeMark);  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MHEX,The following statement contains a magic number: switch (alt11) {  case 1: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:357:8: '0x'  	Match ("0x");  	break;  }  case 2: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:357:13: '0X'  	Match ("0X");  	break;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MHEX,The following statement contains a magic number: while (true) {  	int alt12 = 2;  	int LA12_0 = input.LA (1);  	if (((LA12_0 >= '0' && LA12_0 <= '9') || (LA12_0 >= 'A' && LA12_0 <= 'F') || (LA12_0 >= 'a' && LA12_0 <= 'f'))) {  		alt12 = 1;  	}  	switch (alt12) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:  		if ((input.LA (1) >= '0' && input.LA (1) <= '9') || (input.LA (1) >= 'A' && input.LA (1) <= 'F') || (input.LA (1) >= 'a' && input.LA (1) <= 'f')) {  			input.Consume ();  		} else {  			MismatchedSetException mse = new MismatchedSetException (null' input);  			Recover (mse);  			throw mse;  		}  		break;  	}  	default: {  		if (cnt12 >= 1) {  			goto loop12_break;  		}  		EarlyExitException eee = new EarlyExitException (12' input);  		throw eee;  	}  	}  	cnt12++;  	//loop12_continue: ; // LUCENENET NOTE: Not used  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MHEX,The following statement contains a magic number: while (true) {  	int alt12 = 2;  	int LA12_0 = input.LA (1);  	if (((LA12_0 >= '0' && LA12_0 <= '9') || (LA12_0 >= 'A' && LA12_0 <= 'F') || (LA12_0 >= 'a' && LA12_0 <= 'f'))) {  		alt12 = 1;  	}  	switch (alt12) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:  		if ((input.LA (1) >= '0' && input.LA (1) <= '9') || (input.LA (1) >= 'A' && input.LA (1) <= 'F') || (input.LA (1) >= 'a' && input.LA (1) <= 'f')) {  			input.Consume ();  		} else {  			MismatchedSetException mse = new MismatchedSetException (null' input);  			Recover (mse);  			throw mse;  		}  		break;  	}  	default: {  		if (cnt12 >= 1) {  			goto loop12_break;  		}  		EarlyExitException eee = new EarlyExitException (12' input);  		throw eee;  	}  	}  	cnt12++;  	//loop12_continue: ; // LUCENENET NOTE: Not used  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MHEX,The following statement contains a magic number: switch (alt12) {  case 1: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:  	if ((input.LA (1) >= '0' && input.LA (1) <= '9') || (input.LA (1) >= 'A' && input.LA (1) <= 'F') || (input.LA (1) >= 'a' && input.LA (1) <= 'f')) {  		input.Consume ();  	} else {  		MismatchedSetException mse = new MismatchedSetException (null' input);  		Recover (mse);  		throw mse;  	}  	break;  }  default: {  	if (cnt12 >= 1) {  		goto loop12_break;  	}  	EarlyExitException eee = new EarlyExitException (12' input);  	throw eee;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MDECIMALINTEGER,The following statement contains a magic number: try {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:363:5: ( '0' | '1' .. '9' ( DECIMALDIGIT )* )  	int alt14 = 2;  	int LA14_0 = input.LA (1);  	if ((LA14_0 == '0')) {  		alt14 = 1;  	} else {  		if (((LA14_0 >= '1' && LA14_0 <= '9'))) {  			alt14 = 2;  		} else {  			NoViableAltException nvae = new NoViableAltException (string.Empty' 14' 0' input);  			throw nvae;  		}  	}  	switch (alt14) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:363:7: '0'  		Match ('0');  		break;  	}  	case 2: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:364:7: '1' .. '9' ( DECIMALDIGIT )*  		MatchRange ('1'' '9');  		// src/java/org/apache/lucene/expressions/js/Javascript.g:364:16: ( DECIMALDIGIT )*  		while (true) {  			int alt13 = 2;  			int LA13_0 = input.LA (1);  			if (((LA13_0 >= '0' && LA13_0 <= '9'))) {  				alt13 = 1;  			}  			switch (alt13) {  			case 1: {  				// src/java/org/apache/lucene/expressions/js/Javascript.g:  				if ((input.LA (1) >= '0' && input.LA (1) <= '9')) {  					input.Consume ();  				} else {  					MismatchedSetException mse = new MismatchedSetException (null' input);  					Recover (mse);  					throw mse;  				}  				break;  			}  			default: {  				goto loop13_break;  			}  			}  			//loop13_continue: ; // LUCENENET NOTE: Not used  		}  		loop13_break:  		;  		break;  	}  	}  } finally {  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MDECIMALINTEGER,The following statement contains a magic number: try {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:363:5: ( '0' | '1' .. '9' ( DECIMALDIGIT )* )  	int alt14 = 2;  	int LA14_0 = input.LA (1);  	if ((LA14_0 == '0')) {  		alt14 = 1;  	} else {  		if (((LA14_0 >= '1' && LA14_0 <= '9'))) {  			alt14 = 2;  		} else {  			NoViableAltException nvae = new NoViableAltException (string.Empty' 14' 0' input);  			throw nvae;  		}  	}  	switch (alt14) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:363:7: '0'  		Match ('0');  		break;  	}  	case 2: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:364:7: '1' .. '9' ( DECIMALDIGIT )*  		MatchRange ('1'' '9');  		// src/java/org/apache/lucene/expressions/js/Javascript.g:364:16: ( DECIMALDIGIT )*  		while (true) {  			int alt13 = 2;  			int LA13_0 = input.LA (1);  			if (((LA13_0 >= '0' && LA13_0 <= '9'))) {  				alt13 = 1;  			}  			switch (alt13) {  			case 1: {  				// src/java/org/apache/lucene/expressions/js/Javascript.g:  				if ((input.LA (1) >= '0' && input.LA (1) <= '9')) {  					input.Consume ();  				} else {  					MismatchedSetException mse = new MismatchedSetException (null' input);  					Recover (mse);  					throw mse;  				}  				break;  			}  			default: {  				goto loop13_break;  			}  			}  			//loop13_continue: ; // LUCENENET NOTE: Not used  		}  		loop13_break:  		;  		break;  	}  	}  } finally {  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MDECIMALINTEGER,The following statement contains a magic number: try {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:363:5: ( '0' | '1' .. '9' ( DECIMALDIGIT )* )  	int alt14 = 2;  	int LA14_0 = input.LA (1);  	if ((LA14_0 == '0')) {  		alt14 = 1;  	} else {  		if (((LA14_0 >= '1' && LA14_0 <= '9'))) {  			alt14 = 2;  		} else {  			NoViableAltException nvae = new NoViableAltException (string.Empty' 14' 0' input);  			throw nvae;  		}  	}  	switch (alt14) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:363:7: '0'  		Match ('0');  		break;  	}  	case 2: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:364:7: '1' .. '9' ( DECIMALDIGIT )*  		MatchRange ('1'' '9');  		// src/java/org/apache/lucene/expressions/js/Javascript.g:364:16: ( DECIMALDIGIT )*  		while (true) {  			int alt13 = 2;  			int LA13_0 = input.LA (1);  			if (((LA13_0 >= '0' && LA13_0 <= '9'))) {  				alt13 = 1;  			}  			switch (alt13) {  			case 1: {  				// src/java/org/apache/lucene/expressions/js/Javascript.g:  				if ((input.LA (1) >= '0' && input.LA (1) <= '9')) {  					input.Consume ();  				} else {  					MismatchedSetException mse = new MismatchedSetException (null' input);  					Recover (mse);  					throw mse;  				}  				break;  			}  			default: {  				goto loop13_break;  			}  			}  			//loop13_continue: ; // LUCENENET NOTE: Not used  		}  		loop13_break:  		;  		break;  	}  	}  } finally {  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MDECIMALINTEGER,The following statement contains a magic number: try {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:363:5: ( '0' | '1' .. '9' ( DECIMALDIGIT )* )  	int alt14 = 2;  	int LA14_0 = input.LA (1);  	if ((LA14_0 == '0')) {  		alt14 = 1;  	} else {  		if (((LA14_0 >= '1' && LA14_0 <= '9'))) {  			alt14 = 2;  		} else {  			NoViableAltException nvae = new NoViableAltException (string.Empty' 14' 0' input);  			throw nvae;  		}  	}  	switch (alt14) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:363:7: '0'  		Match ('0');  		break;  	}  	case 2: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:364:7: '1' .. '9' ( DECIMALDIGIT )*  		MatchRange ('1'' '9');  		// src/java/org/apache/lucene/expressions/js/Javascript.g:364:16: ( DECIMALDIGIT )*  		while (true) {  			int alt13 = 2;  			int LA13_0 = input.LA (1);  			if (((LA13_0 >= '0' && LA13_0 <= '9'))) {  				alt13 = 1;  			}  			switch (alt13) {  			case 1: {  				// src/java/org/apache/lucene/expressions/js/Javascript.g:  				if ((input.LA (1) >= '0' && input.LA (1) <= '9')) {  					input.Consume ();  				} else {  					MismatchedSetException mse = new MismatchedSetException (null' input);  					Recover (mse);  					throw mse;  				}  				break;  			}  			default: {  				goto loop13_break;  			}  			}  			//loop13_continue: ; // LUCENENET NOTE: Not used  		}  		loop13_break:  		;  		break;  	}  	}  } finally {  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MDECIMALINTEGER,The following statement contains a magic number: try {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:363:5: ( '0' | '1' .. '9' ( DECIMALDIGIT )* )  	int alt14 = 2;  	int LA14_0 = input.LA (1);  	if ((LA14_0 == '0')) {  		alt14 = 1;  	} else {  		if (((LA14_0 >= '1' && LA14_0 <= '9'))) {  			alt14 = 2;  		} else {  			NoViableAltException nvae = new NoViableAltException (string.Empty' 14' 0' input);  			throw nvae;  		}  	}  	switch (alt14) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:363:7: '0'  		Match ('0');  		break;  	}  	case 2: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:364:7: '1' .. '9' ( DECIMALDIGIT )*  		MatchRange ('1'' '9');  		// src/java/org/apache/lucene/expressions/js/Javascript.g:364:16: ( DECIMALDIGIT )*  		while (true) {  			int alt13 = 2;  			int LA13_0 = input.LA (1);  			if (((LA13_0 >= '0' && LA13_0 <= '9'))) {  				alt13 = 1;  			}  			switch (alt13) {  			case 1: {  				// src/java/org/apache/lucene/expressions/js/Javascript.g:  				if ((input.LA (1) >= '0' && input.LA (1) <= '9')) {  					input.Consume ();  				} else {  					MismatchedSetException mse = new MismatchedSetException (null' input);  					Recover (mse);  					throw mse;  				}  				break;  			}  			default: {  				goto loop13_break;  			}  			}  			//loop13_continue: ; // LUCENENET NOTE: Not used  		}  		loop13_break:  		;  		break;  	}  	}  } finally {  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MDECIMALINTEGER,The following statement contains a magic number: if ((LA14_0 == '0')) {  	alt14 = 1;  } else {  	if (((LA14_0 >= '1' && LA14_0 <= '9'))) {  		alt14 = 2;  	} else {  		NoViableAltException nvae = new NoViableAltException (string.Empty' 14' 0' input);  		throw nvae;  	}  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MDECIMALINTEGER,The following statement contains a magic number: if ((LA14_0 == '0')) {  	alt14 = 1;  } else {  	if (((LA14_0 >= '1' && LA14_0 <= '9'))) {  		alt14 = 2;  	} else {  		NoViableAltException nvae = new NoViableAltException (string.Empty' 14' 0' input);  		throw nvae;  	}  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MDECIMALINTEGER,The following statement contains a magic number: if (((LA14_0 >= '1' && LA14_0 <= '9'))) {  	alt14 = 2;  } else {  	NoViableAltException nvae = new NoViableAltException (string.Empty' 14' 0' input);  	throw nvae;  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MDECIMALINTEGER,The following statement contains a magic number: if (((LA14_0 >= '1' && LA14_0 <= '9'))) {  	alt14 = 2;  } else {  	NoViableAltException nvae = new NoViableAltException (string.Empty' 14' 0' input);  	throw nvae;  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MDECIMALINTEGER,The following statement contains a magic number: alt14 = 2;  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MDECIMALINTEGER,The following statement contains a magic number: switch (alt14) {  case 1: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:363:7: '0'  	Match ('0');  	break;  }  case 2: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:364:7: '1' .. '9' ( DECIMALDIGIT )*  	MatchRange ('1'' '9');  	// src/java/org/apache/lucene/expressions/js/Javascript.g:364:16: ( DECIMALDIGIT )*  	while (true) {  		int alt13 = 2;  		int LA13_0 = input.LA (1);  		if (((LA13_0 >= '0' && LA13_0 <= '9'))) {  			alt13 = 1;  		}  		switch (alt13) {  		case 1: {  			// src/java/org/apache/lucene/expressions/js/Javascript.g:  			if ((input.LA (1) >= '0' && input.LA (1) <= '9')) {  				input.Consume ();  			} else {  				MismatchedSetException mse = new MismatchedSetException (null' input);  				Recover (mse);  				throw mse;  			}  			break;  		}  		default: {  			goto loop13_break;  		}  		}  		//loop13_continue: ; // LUCENENET NOTE: Not used  	}  	loop13_break:  	;  	break;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MDECIMALINTEGER,The following statement contains a magic number: switch (alt14) {  case 1: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:363:7: '0'  	Match ('0');  	break;  }  case 2: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:364:7: '1' .. '9' ( DECIMALDIGIT )*  	MatchRange ('1'' '9');  	// src/java/org/apache/lucene/expressions/js/Javascript.g:364:16: ( DECIMALDIGIT )*  	while (true) {  		int alt13 = 2;  		int LA13_0 = input.LA (1);  		if (((LA13_0 >= '0' && LA13_0 <= '9'))) {  			alt13 = 1;  		}  		switch (alt13) {  		case 1: {  			// src/java/org/apache/lucene/expressions/js/Javascript.g:  			if ((input.LA (1) >= '0' && input.LA (1) <= '9')) {  				input.Consume ();  			} else {  				MismatchedSetException mse = new MismatchedSetException (null' input);  				Recover (mse);  				throw mse;  			}  			break;  		}  		default: {  			goto loop13_break;  		}  		}  		//loop13_continue: ; // LUCENENET NOTE: Not used  	}  	loop13_break:  	;  	break;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MDECIMALINTEGER,The following statement contains a magic number: while (true) {  	int alt13 = 2;  	int LA13_0 = input.LA (1);  	if (((LA13_0 >= '0' && LA13_0 <= '9'))) {  		alt13 = 1;  	}  	switch (alt13) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:  		if ((input.LA (1) >= '0' && input.LA (1) <= '9')) {  			input.Consume ();  		} else {  			MismatchedSetException mse = new MismatchedSetException (null' input);  			Recover (mse);  			throw mse;  		}  		break;  	}  	default: {  		goto loop13_break;  	}  	}  	//loop13_continue: ; // LUCENENET NOTE: Not used  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MEXPONENT,The following statement contains a magic number: try {  	{  		// src/java/org/apache/lucene/expressions/js/Javascript.g:369:5: ( ( 'e' | 'E' ) ( '+' | '-' )? ( DECIMALDIGIT )+ )  		// src/java/org/apache/lucene/expressions/js/Javascript.g:369:7: ( 'e' | 'E' ) ( '+' | '-' )? ( DECIMALDIGIT )+  		if (input.LA (1) == 'E' || input.LA (1) == 'e') {  			input.Consume ();  		} else {  			MismatchedSetException mse = new MismatchedSetException (null' input);  			Recover (mse);  			throw mse;  		}  		// src/java/org/apache/lucene/expressions/js/Javascript.g:369:17: ( '+' | '-' )?  		int alt15 = 2;  		int LA15_0 = input.LA (1);  		if ((LA15_0 == '+' || LA15_0 == '-')) {  			alt15 = 1;  		}  		switch (alt15) {  		case 1: {  			// src/java/org/apache/lucene/expressions/js/Javascript.g:  			if (input.LA (1) == '+' || input.LA (1) == '-') {  				input.Consume ();  			} else {  				MismatchedSetException mse = new MismatchedSetException (null' input);  				Recover (mse);  				throw mse;  			}  			break;  		}  		}  		// src/java/org/apache/lucene/expressions/js/Javascript.g:369:28: ( DECIMALDIGIT )+  		int cnt16 = 0;  		while (true) {  			int alt16 = 2;  			int LA16_0 = input.LA (1);  			if (((LA16_0 >= '0' && LA16_0 <= '9'))) {  				alt16 = 1;  			}  			switch (alt16) {  			case 1: {  				// src/java/org/apache/lucene/expressions/js/Javascript.g:  				if ((input.LA (1) >= '0' && input.LA (1) <= '9')) {  					input.Consume ();  				} else {  					MismatchedSetException mse = new MismatchedSetException (null' input);  					Recover (mse);  					throw mse;  				}  				break;  			}  			default: {  				if (cnt16 >= 1) {  					goto loop16_break;  				}  				EarlyExitException eee = new EarlyExitException (16' input);  				throw eee;  			}  			}  			cnt16++;  			//loop16_continue: ; // LUCENENET NOTE: Not used  		}  		loop16_break:  		;  	}  } finally {  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MEXPONENT,The following statement contains a magic number: try {  	{  		// src/java/org/apache/lucene/expressions/js/Javascript.g:369:5: ( ( 'e' | 'E' ) ( '+' | '-' )? ( DECIMALDIGIT )+ )  		// src/java/org/apache/lucene/expressions/js/Javascript.g:369:7: ( 'e' | 'E' ) ( '+' | '-' )? ( DECIMALDIGIT )+  		if (input.LA (1) == 'E' || input.LA (1) == 'e') {  			input.Consume ();  		} else {  			MismatchedSetException mse = new MismatchedSetException (null' input);  			Recover (mse);  			throw mse;  		}  		// src/java/org/apache/lucene/expressions/js/Javascript.g:369:17: ( '+' | '-' )?  		int alt15 = 2;  		int LA15_0 = input.LA (1);  		if ((LA15_0 == '+' || LA15_0 == '-')) {  			alt15 = 1;  		}  		switch (alt15) {  		case 1: {  			// src/java/org/apache/lucene/expressions/js/Javascript.g:  			if (input.LA (1) == '+' || input.LA (1) == '-') {  				input.Consume ();  			} else {  				MismatchedSetException mse = new MismatchedSetException (null' input);  				Recover (mse);  				throw mse;  			}  			break;  		}  		}  		// src/java/org/apache/lucene/expressions/js/Javascript.g:369:28: ( DECIMALDIGIT )+  		int cnt16 = 0;  		while (true) {  			int alt16 = 2;  			int LA16_0 = input.LA (1);  			if (((LA16_0 >= '0' && LA16_0 <= '9'))) {  				alt16 = 1;  			}  			switch (alt16) {  			case 1: {  				// src/java/org/apache/lucene/expressions/js/Javascript.g:  				if ((input.LA (1) >= '0' && input.LA (1) <= '9')) {  					input.Consume ();  				} else {  					MismatchedSetException mse = new MismatchedSetException (null' input);  					Recover (mse);  					throw mse;  				}  				break;  			}  			default: {  				if (cnt16 >= 1) {  					goto loop16_break;  				}  				EarlyExitException eee = new EarlyExitException (16' input);  				throw eee;  			}  			}  			cnt16++;  			//loop16_continue: ; // LUCENENET NOTE: Not used  		}  		loop16_break:  		;  	}  } finally {  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MEXPONENT,The following statement contains a magic number: try {  	{  		// src/java/org/apache/lucene/expressions/js/Javascript.g:369:5: ( ( 'e' | 'E' ) ( '+' | '-' )? ( DECIMALDIGIT )+ )  		// src/java/org/apache/lucene/expressions/js/Javascript.g:369:7: ( 'e' | 'E' ) ( '+' | '-' )? ( DECIMALDIGIT )+  		if (input.LA (1) == 'E' || input.LA (1) == 'e') {  			input.Consume ();  		} else {  			MismatchedSetException mse = new MismatchedSetException (null' input);  			Recover (mse);  			throw mse;  		}  		// src/java/org/apache/lucene/expressions/js/Javascript.g:369:17: ( '+' | '-' )?  		int alt15 = 2;  		int LA15_0 = input.LA (1);  		if ((LA15_0 == '+' || LA15_0 == '-')) {  			alt15 = 1;  		}  		switch (alt15) {  		case 1: {  			// src/java/org/apache/lucene/expressions/js/Javascript.g:  			if (input.LA (1) == '+' || input.LA (1) == '-') {  				input.Consume ();  			} else {  				MismatchedSetException mse = new MismatchedSetException (null' input);  				Recover (mse);  				throw mse;  			}  			break;  		}  		}  		// src/java/org/apache/lucene/expressions/js/Javascript.g:369:28: ( DECIMALDIGIT )+  		int cnt16 = 0;  		while (true) {  			int alt16 = 2;  			int LA16_0 = input.LA (1);  			if (((LA16_0 >= '0' && LA16_0 <= '9'))) {  				alt16 = 1;  			}  			switch (alt16) {  			case 1: {  				// src/java/org/apache/lucene/expressions/js/Javascript.g:  				if ((input.LA (1) >= '0' && input.LA (1) <= '9')) {  					input.Consume ();  				} else {  					MismatchedSetException mse = new MismatchedSetException (null' input);  					Recover (mse);  					throw mse;  				}  				break;  			}  			default: {  				if (cnt16 >= 1) {  					goto loop16_break;  				}  				EarlyExitException eee = new EarlyExitException (16' input);  				throw eee;  			}  			}  			cnt16++;  			//loop16_continue: ; // LUCENENET NOTE: Not used  		}  		loop16_break:  		;  	}  } finally {  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MEXPONENT,The following statement contains a magic number: while (true) {  	int alt16 = 2;  	int LA16_0 = input.LA (1);  	if (((LA16_0 >= '0' && LA16_0 <= '9'))) {  		alt16 = 1;  	}  	switch (alt16) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:  		if ((input.LA (1) >= '0' && input.LA (1) <= '9')) {  			input.Consume ();  		} else {  			MismatchedSetException mse = new MismatchedSetException (null' input);  			Recover (mse);  			throw mse;  		}  		break;  	}  	default: {  		if (cnt16 >= 1) {  			goto loop16_break;  		}  		EarlyExitException eee = new EarlyExitException (16' input);  		throw eee;  	}  	}  	cnt16++;  	//loop16_continue: ; // LUCENENET NOTE: Not used  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MEXPONENT,The following statement contains a magic number: while (true) {  	int alt16 = 2;  	int LA16_0 = input.LA (1);  	if (((LA16_0 >= '0' && LA16_0 <= '9'))) {  		alt16 = 1;  	}  	switch (alt16) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:  		if ((input.LA (1) >= '0' && input.LA (1) <= '9')) {  			input.Consume ();  		} else {  			MismatchedSetException mse = new MismatchedSetException (null' input);  			Recover (mse);  			throw mse;  		}  		break;  	}  	default: {  		if (cnt16 >= 1) {  			goto loop16_break;  		}  		EarlyExitException eee = new EarlyExitException (16' input);  		throw eee;  	}  	}  	cnt16++;  	//loop16_continue: ; // LUCENENET NOTE: Not used  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MEXPONENT,The following statement contains a magic number: switch (alt16) {  case 1: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:  	if ((input.LA (1) >= '0' && input.LA (1) <= '9')) {  		input.Consume ();  	} else {  		MismatchedSetException mse = new MismatchedSetException (null' input);  		Recover (mse);  		throw mse;  	}  	break;  }  default: {  	if (cnt16 >= 1) {  		goto loop16_break;  	}  	EarlyExitException eee = new EarlyExitException (16' input);  	throw eee;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA (1)) {  case '+': {  	alt17 = 1;  	break;  }  case '&': {  	int LA17_2 = input.LA (2);  	if ((LA17_2 == '&')) {  		alt17 = 9;  	} else {  		alt17 = 2;  	}  	break;  }  case '~': {  	alt17 = 3;  	break;  }  case '|': {  	int LA17_4 = input.LA (2);  	if ((LA17_4 == '|')) {  		alt17 = 11;  	} else {  		alt17 = 4;  	}  	break;  }  case '<': {  	switch (input.LA (2)) {  	case '<': {  		alt17 = 5;  		break;  	}  	case '=': {  		alt17 = 18;  		break;  	}  	default: {  		alt17 = 17;  		break;  	}  	}  	break;  }  case '>': {  	switch (input.LA (2)) {  	case '>': {  		int LA17_31 = input.LA (3);  		if ((LA17_31 == '>')) {  			alt17 = 7;  		} else {  			alt17 = 6;  		}  		break;  	}  	case '=': {  		alt17 = 16;  		break;  	}  	default: {  		alt17 = 15;  		break;  	}  	}  	break;  }  case '^': {  	alt17 = 8;  	break;  }  case '!': {  	int LA17_8 = input.LA (2);  	if ((LA17_8 == '=')) {  		alt17 = 19;  	} else {  		alt17 = 10;  	}  	break;  }  case ':': {  	alt17 = 12;  	break;  }  case ''': {  	alt17 = 13;  	break;  }  case '=': {  	alt17 = 14;  	break;  }  case '?': {  	alt17 = 20;  	break;  }  case '/': {  	alt17 = 21;  	break;  }  case '.': {  	int LA17_14 = input.LA (2);  	if (((LA17_14 >= '0' && LA17_14 <= '9'))) {  		alt17 = 30;  	} else {  		alt17 = 22;  	}  	break;  }  case '(': {  	alt17 = 23;  	break;  }  case '%': {  	alt17 = 24;  	break;  }  case '*': {  	alt17 = 25;  	break;  }  case ')': {  	alt17 = 26;  	break;  }  case '-': {  	alt17 = 27;  	break;  }  case 'A':  case 'B':  case 'C':  case 'D':  case 'E':  case 'F':  case 'G':  case 'H':  case 'I':  case 'J':  case 'K':  case 'L':  case 'M':  case 'N':  case 'O':  case 'P':  case 'Q':  case 'R':  case 'S':  case 'T':  case 'U':  case 'V':  case 'W':  case 'X':  case 'Y':  case 'Z':  case '_':  case 'a':  case 'b':  case 'c':  case 'd':  case 'e':  case 'f':  case 'g':  case 'h':  case 'i':  case 'j':  case 'k':  case 'l':  case 'm':  case 'n':  case 'o':  case 'p':  case 'q':  case 'r':  case 's':  case 't':  case 'u':  case 'v':  case 'w':  case 'x':  case 'y':  case 'z': {  	alt17 = 28;  	break;  }  case '\t':  case '\n':  case '\r':  case ' ': {  	alt17 = 29;  	break;  }  case '0': {  	switch (input.LA (2)) {  	case 'X':  	case 'x': {  		alt17 = 32;  		break;  	}  	case '0':  	case '1':  	case '2':  	case '3':  	case '4':  	case '5':  	case '6':  	case '7': {  		alt17 = 31;  		break;  	}  	default: {  		alt17 = 30;  		break;  	}  	}  	break;  }  case '1':  case '2':  case '3':  case '4':  case '5':  case '6':  case '7':  case '8':  case '9': {  	alt17 = 30;  	break;  }  default: {  	NoViableAltException nvae = new NoViableAltException (string.Empty' 17' 0' input);  	throw nvae;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA (1)) {  case '+': {  	alt17 = 1;  	break;  }  case '&': {  	int LA17_2 = input.LA (2);  	if ((LA17_2 == '&')) {  		alt17 = 9;  	} else {  		alt17 = 2;  	}  	break;  }  case '~': {  	alt17 = 3;  	break;  }  case '|': {  	int LA17_4 = input.LA (2);  	if ((LA17_4 == '|')) {  		alt17 = 11;  	} else {  		alt17 = 4;  	}  	break;  }  case '<': {  	switch (input.LA (2)) {  	case '<': {  		alt17 = 5;  		break;  	}  	case '=': {  		alt17 = 18;  		break;  	}  	default: {  		alt17 = 17;  		break;  	}  	}  	break;  }  case '>': {  	switch (input.LA (2)) {  	case '>': {  		int LA17_31 = input.LA (3);  		if ((LA17_31 == '>')) {  			alt17 = 7;  		} else {  			alt17 = 6;  		}  		break;  	}  	case '=': {  		alt17 = 16;  		break;  	}  	default: {  		alt17 = 15;  		break;  	}  	}  	break;  }  case '^': {  	alt17 = 8;  	break;  }  case '!': {  	int LA17_8 = input.LA (2);  	if ((LA17_8 == '=')) {  		alt17 = 19;  	} else {  		alt17 = 10;  	}  	break;  }  case ':': {  	alt17 = 12;  	break;  }  case ''': {  	alt17 = 13;  	break;  }  case '=': {  	alt17 = 14;  	break;  }  case '?': {  	alt17 = 20;  	break;  }  case '/': {  	alt17 = 21;  	break;  }  case '.': {  	int LA17_14 = input.LA (2);  	if (((LA17_14 >= '0' && LA17_14 <= '9'))) {  		alt17 = 30;  	} else {  		alt17 = 22;  	}  	break;  }  case '(': {  	alt17 = 23;  	break;  }  case '%': {  	alt17 = 24;  	break;  }  case '*': {  	alt17 = 25;  	break;  }  case ')': {  	alt17 = 26;  	break;  }  case '-': {  	alt17 = 27;  	break;  }  case 'A':  case 'B':  case 'C':  case 'D':  case 'E':  case 'F':  case 'G':  case 'H':  case 'I':  case 'J':  case 'K':  case 'L':  case 'M':  case 'N':  case 'O':  case 'P':  case 'Q':  case 'R':  case 'S':  case 'T':  case 'U':  case 'V':  case 'W':  case 'X':  case 'Y':  case 'Z':  case '_':  case 'a':  case 'b':  case 'c':  case 'd':  case 'e':  case 'f':  case 'g':  case 'h':  case 'i':  case 'j':  case 'k':  case 'l':  case 'm':  case 'n':  case 'o':  case 'p':  case 'q':  case 'r':  case 's':  case 't':  case 'u':  case 'v':  case 'w':  case 'x':  case 'y':  case 'z': {  	alt17 = 28;  	break;  }  case '\t':  case '\n':  case '\r':  case ' ': {  	alt17 = 29;  	break;  }  case '0': {  	switch (input.LA (2)) {  	case 'X':  	case 'x': {  		alt17 = 32;  		break;  	}  	case '0':  	case '1':  	case '2':  	case '3':  	case '4':  	case '5':  	case '6':  	case '7': {  		alt17 = 31;  		break;  	}  	default: {  		alt17 = 30;  		break;  	}  	}  	break;  }  case '1':  case '2':  case '3':  case '4':  case '5':  case '6':  case '7':  case '8':  case '9': {  	alt17 = 30;  	break;  }  default: {  	NoViableAltException nvae = new NoViableAltException (string.Empty' 17' 0' input);  	throw nvae;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA (1)) {  case '+': {  	alt17 = 1;  	break;  }  case '&': {  	int LA17_2 = input.LA (2);  	if ((LA17_2 == '&')) {  		alt17 = 9;  	} else {  		alt17 = 2;  	}  	break;  }  case '~': {  	alt17 = 3;  	break;  }  case '|': {  	int LA17_4 = input.LA (2);  	if ((LA17_4 == '|')) {  		alt17 = 11;  	} else {  		alt17 = 4;  	}  	break;  }  case '<': {  	switch (input.LA (2)) {  	case '<': {  		alt17 = 5;  		break;  	}  	case '=': {  		alt17 = 18;  		break;  	}  	default: {  		alt17 = 17;  		break;  	}  	}  	break;  }  case '>': {  	switch (input.LA (2)) {  	case '>': {  		int LA17_31 = input.LA (3);  		if ((LA17_31 == '>')) {  			alt17 = 7;  		} else {  			alt17 = 6;  		}  		break;  	}  	case '=': {  		alt17 = 16;  		break;  	}  	default: {  		alt17 = 15;  		break;  	}  	}  	break;  }  case '^': {  	alt17 = 8;  	break;  }  case '!': {  	int LA17_8 = input.LA (2);  	if ((LA17_8 == '=')) {  		alt17 = 19;  	} else {  		alt17 = 10;  	}  	break;  }  case ':': {  	alt17 = 12;  	break;  }  case ''': {  	alt17 = 13;  	break;  }  case '=': {  	alt17 = 14;  	break;  }  case '?': {  	alt17 = 20;  	break;  }  case '/': {  	alt17 = 21;  	break;  }  case '.': {  	int LA17_14 = input.LA (2);  	if (((LA17_14 >= '0' && LA17_14 <= '9'))) {  		alt17 = 30;  	} else {  		alt17 = 22;  	}  	break;  }  case '(': {  	alt17 = 23;  	break;  }  case '%': {  	alt17 = 24;  	break;  }  case '*': {  	alt17 = 25;  	break;  }  case ')': {  	alt17 = 26;  	break;  }  case '-': {  	alt17 = 27;  	break;  }  case 'A':  case 'B':  case 'C':  case 'D':  case 'E':  case 'F':  case 'G':  case 'H':  case 'I':  case 'J':  case 'K':  case 'L':  case 'M':  case 'N':  case 'O':  case 'P':  case 'Q':  case 'R':  case 'S':  case 'T':  case 'U':  case 'V':  case 'W':  case 'X':  case 'Y':  case 'Z':  case '_':  case 'a':  case 'b':  case 'c':  case 'd':  case 'e':  case 'f':  case 'g':  case 'h':  case 'i':  case 'j':  case 'k':  case 'l':  case 'm':  case 'n':  case 'o':  case 'p':  case 'q':  case 'r':  case 's':  case 't':  case 'u':  case 'v':  case 'w':  case 'x':  case 'y':  case 'z': {  	alt17 = 28;  	break;  }  case '\t':  case '\n':  case '\r':  case ' ': {  	alt17 = 29;  	break;  }  case '0': {  	switch (input.LA (2)) {  	case 'X':  	case 'x': {  		alt17 = 32;  		break;  	}  	case '0':  	case '1':  	case '2':  	case '3':  	case '4':  	case '5':  	case '6':  	case '7': {  		alt17 = 31;  		break;  	}  	default: {  		alt17 = 30;  		break;  	}  	}  	break;  }  case '1':  case '2':  case '3':  case '4':  case '5':  case '6':  case '7':  case '8':  case '9': {  	alt17 = 30;  	break;  }  default: {  	NoViableAltException nvae = new NoViableAltException (string.Empty' 17' 0' input);  	throw nvae;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA (1)) {  case '+': {  	alt17 = 1;  	break;  }  case '&': {  	int LA17_2 = input.LA (2);  	if ((LA17_2 == '&')) {  		alt17 = 9;  	} else {  		alt17 = 2;  	}  	break;  }  case '~': {  	alt17 = 3;  	break;  }  case '|': {  	int LA17_4 = input.LA (2);  	if ((LA17_4 == '|')) {  		alt17 = 11;  	} else {  		alt17 = 4;  	}  	break;  }  case '<': {  	switch (input.LA (2)) {  	case '<': {  		alt17 = 5;  		break;  	}  	case '=': {  		alt17 = 18;  		break;  	}  	default: {  		alt17 = 17;  		break;  	}  	}  	break;  }  case '>': {  	switch (input.LA (2)) {  	case '>': {  		int LA17_31 = input.LA (3);  		if ((LA17_31 == '>')) {  			alt17 = 7;  		} else {  			alt17 = 6;  		}  		break;  	}  	case '=': {  		alt17 = 16;  		break;  	}  	default: {  		alt17 = 15;  		break;  	}  	}  	break;  }  case '^': {  	alt17 = 8;  	break;  }  case '!': {  	int LA17_8 = input.LA (2);  	if ((LA17_8 == '=')) {  		alt17 = 19;  	} else {  		alt17 = 10;  	}  	break;  }  case ':': {  	alt17 = 12;  	break;  }  case ''': {  	alt17 = 13;  	break;  }  case '=': {  	alt17 = 14;  	break;  }  case '?': {  	alt17 = 20;  	break;  }  case '/': {  	alt17 = 21;  	break;  }  case '.': {  	int LA17_14 = input.LA (2);  	if (((LA17_14 >= '0' && LA17_14 <= '9'))) {  		alt17 = 30;  	} else {  		alt17 = 22;  	}  	break;  }  case '(': {  	alt17 = 23;  	break;  }  case '%': {  	alt17 = 24;  	break;  }  case '*': {  	alt17 = 25;  	break;  }  case ')': {  	alt17 = 26;  	break;  }  case '-': {  	alt17 = 27;  	break;  }  case 'A':  case 'B':  case 'C':  case 'D':  case 'E':  case 'F':  case 'G':  case 'H':  case 'I':  case 'J':  case 'K':  case 'L':  case 'M':  case 'N':  case 'O':  case 'P':  case 'Q':  case 'R':  case 'S':  case 'T':  case 'U':  case 'V':  case 'W':  case 'X':  case 'Y':  case 'Z':  case '_':  case 'a':  case 'b':  case 'c':  case 'd':  case 'e':  case 'f':  case 'g':  case 'h':  case 'i':  case 'j':  case 'k':  case 'l':  case 'm':  case 'n':  case 'o':  case 'p':  case 'q':  case 'r':  case 's':  case 't':  case 'u':  case 'v':  case 'w':  case 'x':  case 'y':  case 'z': {  	alt17 = 28;  	break;  }  case '\t':  case '\n':  case '\r':  case ' ': {  	alt17 = 29;  	break;  }  case '0': {  	switch (input.LA (2)) {  	case 'X':  	case 'x': {  		alt17 = 32;  		break;  	}  	case '0':  	case '1':  	case '2':  	case '3':  	case '4':  	case '5':  	case '6':  	case '7': {  		alt17 = 31;  		break;  	}  	default: {  		alt17 = 30;  		break;  	}  	}  	break;  }  case '1':  case '2':  case '3':  case '4':  case '5':  case '6':  case '7':  case '8':  case '9': {  	alt17 = 30;  	break;  }  default: {  	NoViableAltException nvae = new NoViableAltException (string.Empty' 17' 0' input);  	throw nvae;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA (1)) {  case '+': {  	alt17 = 1;  	break;  }  case '&': {  	int LA17_2 = input.LA (2);  	if ((LA17_2 == '&')) {  		alt17 = 9;  	} else {  		alt17 = 2;  	}  	break;  }  case '~': {  	alt17 = 3;  	break;  }  case '|': {  	int LA17_4 = input.LA (2);  	if ((LA17_4 == '|')) {  		alt17 = 11;  	} else {  		alt17 = 4;  	}  	break;  }  case '<': {  	switch (input.LA (2)) {  	case '<': {  		alt17 = 5;  		break;  	}  	case '=': {  		alt17 = 18;  		break;  	}  	default: {  		alt17 = 17;  		break;  	}  	}  	break;  }  case '>': {  	switch (input.LA (2)) {  	case '>': {  		int LA17_31 = input.LA (3);  		if ((LA17_31 == '>')) {  			alt17 = 7;  		} else {  			alt17 = 6;  		}  		break;  	}  	case '=': {  		alt17 = 16;  		break;  	}  	default: {  		alt17 = 15;  		break;  	}  	}  	break;  }  case '^': {  	alt17 = 8;  	break;  }  case '!': {  	int LA17_8 = input.LA (2);  	if ((LA17_8 == '=')) {  		alt17 = 19;  	} else {  		alt17 = 10;  	}  	break;  }  case ':': {  	alt17 = 12;  	break;  }  case ''': {  	alt17 = 13;  	break;  }  case '=': {  	alt17 = 14;  	break;  }  case '?': {  	alt17 = 20;  	break;  }  case '/': {  	alt17 = 21;  	break;  }  case '.': {  	int LA17_14 = input.LA (2);  	if (((LA17_14 >= '0' && LA17_14 <= '9'))) {  		alt17 = 30;  	} else {  		alt17 = 22;  	}  	break;  }  case '(': {  	alt17 = 23;  	break;  }  case '%': {  	alt17 = 24;  	break;  }  case '*': {  	alt17 = 25;  	break;  }  case ')': {  	alt17 = 26;  	break;  }  case '-': {  	alt17 = 27;  	break;  }  case 'A':  case 'B':  case 'C':  case 'D':  case 'E':  case 'F':  case 'G':  case 'H':  case 'I':  case 'J':  case 'K':  case 'L':  case 'M':  case 'N':  case 'O':  case 'P':  case 'Q':  case 'R':  case 'S':  case 'T':  case 'U':  case 'V':  case 'W':  case 'X':  case 'Y':  case 'Z':  case '_':  case 'a':  case 'b':  case 'c':  case 'd':  case 'e':  case 'f':  case 'g':  case 'h':  case 'i':  case 'j':  case 'k':  case 'l':  case 'm':  case 'n':  case 'o':  case 'p':  case 'q':  case 'r':  case 's':  case 't':  case 'u':  case 'v':  case 'w':  case 'x':  case 'y':  case 'z': {  	alt17 = 28;  	break;  }  case '\t':  case '\n':  case '\r':  case ' ': {  	alt17 = 29;  	break;  }  case '0': {  	switch (input.LA (2)) {  	case 'X':  	case 'x': {  		alt17 = 32;  		break;  	}  	case '0':  	case '1':  	case '2':  	case '3':  	case '4':  	case '5':  	case '6':  	case '7': {  		alt17 = 31;  		break;  	}  	default: {  		alt17 = 30;  		break;  	}  	}  	break;  }  case '1':  case '2':  case '3':  case '4':  case '5':  case '6':  case '7':  case '8':  case '9': {  	alt17 = 30;  	break;  }  default: {  	NoViableAltException nvae = new NoViableAltException (string.Empty' 17' 0' input);  	throw nvae;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA (1)) {  case '+': {  	alt17 = 1;  	break;  }  case '&': {  	int LA17_2 = input.LA (2);  	if ((LA17_2 == '&')) {  		alt17 = 9;  	} else {  		alt17 = 2;  	}  	break;  }  case '~': {  	alt17 = 3;  	break;  }  case '|': {  	int LA17_4 = input.LA (2);  	if ((LA17_4 == '|')) {  		alt17 = 11;  	} else {  		alt17 = 4;  	}  	break;  }  case '<': {  	switch (input.LA (2)) {  	case '<': {  		alt17 = 5;  		break;  	}  	case '=': {  		alt17 = 18;  		break;  	}  	default: {  		alt17 = 17;  		break;  	}  	}  	break;  }  case '>': {  	switch (input.LA (2)) {  	case '>': {  		int LA17_31 = input.LA (3);  		if ((LA17_31 == '>')) {  			alt17 = 7;  		} else {  			alt17 = 6;  		}  		break;  	}  	case '=': {  		alt17 = 16;  		break;  	}  	default: {  		alt17 = 15;  		break;  	}  	}  	break;  }  case '^': {  	alt17 = 8;  	break;  }  case '!': {  	int LA17_8 = input.LA (2);  	if ((LA17_8 == '=')) {  		alt17 = 19;  	} else {  		alt17 = 10;  	}  	break;  }  case ':': {  	alt17 = 12;  	break;  }  case ''': {  	alt17 = 13;  	break;  }  case '=': {  	alt17 = 14;  	break;  }  case '?': {  	alt17 = 20;  	break;  }  case '/': {  	alt17 = 21;  	break;  }  case '.': {  	int LA17_14 = input.LA (2);  	if (((LA17_14 >= '0' && LA17_14 <= '9'))) {  		alt17 = 30;  	} else {  		alt17 = 22;  	}  	break;  }  case '(': {  	alt17 = 23;  	break;  }  case '%': {  	alt17 = 24;  	break;  }  case '*': {  	alt17 = 25;  	break;  }  case ')': {  	alt17 = 26;  	break;  }  case '-': {  	alt17 = 27;  	break;  }  case 'A':  case 'B':  case 'C':  case 'D':  case 'E':  case 'F':  case 'G':  case 'H':  case 'I':  case 'J':  case 'K':  case 'L':  case 'M':  case 'N':  case 'O':  case 'P':  case 'Q':  case 'R':  case 'S':  case 'T':  case 'U':  case 'V':  case 'W':  case 'X':  case 'Y':  case 'Z':  case '_':  case 'a':  case 'b':  case 'c':  case 'd':  case 'e':  case 'f':  case 'g':  case 'h':  case 'i':  case 'j':  case 'k':  case 'l':  case 'm':  case 'n':  case 'o':  case 'p':  case 'q':  case 'r':  case 's':  case 't':  case 'u':  case 'v':  case 'w':  case 'x':  case 'y':  case 'z': {  	alt17 = 28;  	break;  }  case '\t':  case '\n':  case '\r':  case ' ': {  	alt17 = 29;  	break;  }  case '0': {  	switch (input.LA (2)) {  	case 'X':  	case 'x': {  		alt17 = 32;  		break;  	}  	case '0':  	case '1':  	case '2':  	case '3':  	case '4':  	case '5':  	case '6':  	case '7': {  		alt17 = 31;  		break;  	}  	default: {  		alt17 = 30;  		break;  	}  	}  	break;  }  case '1':  case '2':  case '3':  case '4':  case '5':  case '6':  case '7':  case '8':  case '9': {  	alt17 = 30;  	break;  }  default: {  	NoViableAltException nvae = new NoViableAltException (string.Empty' 17' 0' input);  	throw nvae;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA (1)) {  case '+': {  	alt17 = 1;  	break;  }  case '&': {  	int LA17_2 = input.LA (2);  	if ((LA17_2 == '&')) {  		alt17 = 9;  	} else {  		alt17 = 2;  	}  	break;  }  case '~': {  	alt17 = 3;  	break;  }  case '|': {  	int LA17_4 = input.LA (2);  	if ((LA17_4 == '|')) {  		alt17 = 11;  	} else {  		alt17 = 4;  	}  	break;  }  case '<': {  	switch (input.LA (2)) {  	case '<': {  		alt17 = 5;  		break;  	}  	case '=': {  		alt17 = 18;  		break;  	}  	default: {  		alt17 = 17;  		break;  	}  	}  	break;  }  case '>': {  	switch (input.LA (2)) {  	case '>': {  		int LA17_31 = input.LA (3);  		if ((LA17_31 == '>')) {  			alt17 = 7;  		} else {  			alt17 = 6;  		}  		break;  	}  	case '=': {  		alt17 = 16;  		break;  	}  	default: {  		alt17 = 15;  		break;  	}  	}  	break;  }  case '^': {  	alt17 = 8;  	break;  }  case '!': {  	int LA17_8 = input.LA (2);  	if ((LA17_8 == '=')) {  		alt17 = 19;  	} else {  		alt17 = 10;  	}  	break;  }  case ':': {  	alt17 = 12;  	break;  }  case ''': {  	alt17 = 13;  	break;  }  case '=': {  	alt17 = 14;  	break;  }  case '?': {  	alt17 = 20;  	break;  }  case '/': {  	alt17 = 21;  	break;  }  case '.': {  	int LA17_14 = input.LA (2);  	if (((LA17_14 >= '0' && LA17_14 <= '9'))) {  		alt17 = 30;  	} else {  		alt17 = 22;  	}  	break;  }  case '(': {  	alt17 = 23;  	break;  }  case '%': {  	alt17 = 24;  	break;  }  case '*': {  	alt17 = 25;  	break;  }  case ')': {  	alt17 = 26;  	break;  }  case '-': {  	alt17 = 27;  	break;  }  case 'A':  case 'B':  case 'C':  case 'D':  case 'E':  case 'F':  case 'G':  case 'H':  case 'I':  case 'J':  case 'K':  case 'L':  case 'M':  case 'N':  case 'O':  case 'P':  case 'Q':  case 'R':  case 'S':  case 'T':  case 'U':  case 'V':  case 'W':  case 'X':  case 'Y':  case 'Z':  case '_':  case 'a':  case 'b':  case 'c':  case 'd':  case 'e':  case 'f':  case 'g':  case 'h':  case 'i':  case 'j':  case 'k':  case 'l':  case 'm':  case 'n':  case 'o':  case 'p':  case 'q':  case 'r':  case 's':  case 't':  case 'u':  case 'v':  case 'w':  case 'x':  case 'y':  case 'z': {  	alt17 = 28;  	break;  }  case '\t':  case '\n':  case '\r':  case ' ': {  	alt17 = 29;  	break;  }  case '0': {  	switch (input.LA (2)) {  	case 'X':  	case 'x': {  		alt17 = 32;  		break;  	}  	case '0':  	case '1':  	case '2':  	case '3':  	case '4':  	case '5':  	case '6':  	case '7': {  		alt17 = 31;  		break;  	}  	default: {  		alt17 = 30;  		break;  	}  	}  	break;  }  case '1':  case '2':  case '3':  case '4':  case '5':  case '6':  case '7':  case '8':  case '9': {  	alt17 = 30;  	break;  }  default: {  	NoViableAltException nvae = new NoViableAltException (string.Empty' 17' 0' input);  	throw nvae;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA (1)) {  case '+': {  	alt17 = 1;  	break;  }  case '&': {  	int LA17_2 = input.LA (2);  	if ((LA17_2 == '&')) {  		alt17 = 9;  	} else {  		alt17 = 2;  	}  	break;  }  case '~': {  	alt17 = 3;  	break;  }  case '|': {  	int LA17_4 = input.LA (2);  	if ((LA17_4 == '|')) {  		alt17 = 11;  	} else {  		alt17 = 4;  	}  	break;  }  case '<': {  	switch (input.LA (2)) {  	case '<': {  		alt17 = 5;  		break;  	}  	case '=': {  		alt17 = 18;  		break;  	}  	default: {  		alt17 = 17;  		break;  	}  	}  	break;  }  case '>': {  	switch (input.LA (2)) {  	case '>': {  		int LA17_31 = input.LA (3);  		if ((LA17_31 == '>')) {  			alt17 = 7;  		} else {  			alt17 = 6;  		}  		break;  	}  	case '=': {  		alt17 = 16;  		break;  	}  	default: {  		alt17 = 15;  		break;  	}  	}  	break;  }  case '^': {  	alt17 = 8;  	break;  }  case '!': {  	int LA17_8 = input.LA (2);  	if ((LA17_8 == '=')) {  		alt17 = 19;  	} else {  		alt17 = 10;  	}  	break;  }  case ':': {  	alt17 = 12;  	break;  }  case ''': {  	alt17 = 13;  	break;  }  case '=': {  	alt17 = 14;  	break;  }  case '?': {  	alt17 = 20;  	break;  }  case '/': {  	alt17 = 21;  	break;  }  case '.': {  	int LA17_14 = input.LA (2);  	if (((LA17_14 >= '0' && LA17_14 <= '9'))) {  		alt17 = 30;  	} else {  		alt17 = 22;  	}  	break;  }  case '(': {  	alt17 = 23;  	break;  }  case '%': {  	alt17 = 24;  	break;  }  case '*': {  	alt17 = 25;  	break;  }  case ')': {  	alt17 = 26;  	break;  }  case '-': {  	alt17 = 27;  	break;  }  case 'A':  case 'B':  case 'C':  case 'D':  case 'E':  case 'F':  case 'G':  case 'H':  case 'I':  case 'J':  case 'K':  case 'L':  case 'M':  case 'N':  case 'O':  case 'P':  case 'Q':  case 'R':  case 'S':  case 'T':  case 'U':  case 'V':  case 'W':  case 'X':  case 'Y':  case 'Z':  case '_':  case 'a':  case 'b':  case 'c':  case 'd':  case 'e':  case 'f':  case 'g':  case 'h':  case 'i':  case 'j':  case 'k':  case 'l':  case 'm':  case 'n':  case 'o':  case 'p':  case 'q':  case 'r':  case 's':  case 't':  case 'u':  case 'v':  case 'w':  case 'x':  case 'y':  case 'z': {  	alt17 = 28;  	break;  }  case '\t':  case '\n':  case '\r':  case ' ': {  	alt17 = 29;  	break;  }  case '0': {  	switch (input.LA (2)) {  	case 'X':  	case 'x': {  		alt17 = 32;  		break;  	}  	case '0':  	case '1':  	case '2':  	case '3':  	case '4':  	case '5':  	case '6':  	case '7': {  		alt17 = 31;  		break;  	}  	default: {  		alt17 = 30;  		break;  	}  	}  	break;  }  case '1':  case '2':  case '3':  case '4':  case '5':  case '6':  case '7':  case '8':  case '9': {  	alt17 = 30;  	break;  }  default: {  	NoViableAltException nvae = new NoViableAltException (string.Empty' 17' 0' input);  	throw nvae;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA (1)) {  case '+': {  	alt17 = 1;  	break;  }  case '&': {  	int LA17_2 = input.LA (2);  	if ((LA17_2 == '&')) {  		alt17 = 9;  	} else {  		alt17 = 2;  	}  	break;  }  case '~': {  	alt17 = 3;  	break;  }  case '|': {  	int LA17_4 = input.LA (2);  	if ((LA17_4 == '|')) {  		alt17 = 11;  	} else {  		alt17 = 4;  	}  	break;  }  case '<': {  	switch (input.LA (2)) {  	case '<': {  		alt17 = 5;  		break;  	}  	case '=': {  		alt17 = 18;  		break;  	}  	default: {  		alt17 = 17;  		break;  	}  	}  	break;  }  case '>': {  	switch (input.LA (2)) {  	case '>': {  		int LA17_31 = input.LA (3);  		if ((LA17_31 == '>')) {  			alt17 = 7;  		} else {  			alt17 = 6;  		}  		break;  	}  	case '=': {  		alt17 = 16;  		break;  	}  	default: {  		alt17 = 15;  		break;  	}  	}  	break;  }  case '^': {  	alt17 = 8;  	break;  }  case '!': {  	int LA17_8 = input.LA (2);  	if ((LA17_8 == '=')) {  		alt17 = 19;  	} else {  		alt17 = 10;  	}  	break;  }  case ':': {  	alt17 = 12;  	break;  }  case ''': {  	alt17 = 13;  	break;  }  case '=': {  	alt17 = 14;  	break;  }  case '?': {  	alt17 = 20;  	break;  }  case '/': {  	alt17 = 21;  	break;  }  case '.': {  	int LA17_14 = input.LA (2);  	if (((LA17_14 >= '0' && LA17_14 <= '9'))) {  		alt17 = 30;  	} else {  		alt17 = 22;  	}  	break;  }  case '(': {  	alt17 = 23;  	break;  }  case '%': {  	alt17 = 24;  	break;  }  case '*': {  	alt17 = 25;  	break;  }  case ')': {  	alt17 = 26;  	break;  }  case '-': {  	alt17 = 27;  	break;  }  case 'A':  case 'B':  case 'C':  case 'D':  case 'E':  case 'F':  case 'G':  case 'H':  case 'I':  case 'J':  case 'K':  case 'L':  case 'M':  case 'N':  case 'O':  case 'P':  case 'Q':  case 'R':  case 'S':  case 'T':  case 'U':  case 'V':  case 'W':  case 'X':  case 'Y':  case 'Z':  case '_':  case 'a':  case 'b':  case 'c':  case 'd':  case 'e':  case 'f':  case 'g':  case 'h':  case 'i':  case 'j':  case 'k':  case 'l':  case 'm':  case 'n':  case 'o':  case 'p':  case 'q':  case 'r':  case 's':  case 't':  case 'u':  case 'v':  case 'w':  case 'x':  case 'y':  case 'z': {  	alt17 = 28;  	break;  }  case '\t':  case '\n':  case '\r':  case ' ': {  	alt17 = 29;  	break;  }  case '0': {  	switch (input.LA (2)) {  	case 'X':  	case 'x': {  		alt17 = 32;  		break;  	}  	case '0':  	case '1':  	case '2':  	case '3':  	case '4':  	case '5':  	case '6':  	case '7': {  		alt17 = 31;  		break;  	}  	default: {  		alt17 = 30;  		break;  	}  	}  	break;  }  case '1':  case '2':  case '3':  case '4':  case '5':  case '6':  case '7':  case '8':  case '9': {  	alt17 = 30;  	break;  }  default: {  	NoViableAltException nvae = new NoViableAltException (string.Empty' 17' 0' input);  	throw nvae;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA (1)) {  case '+': {  	alt17 = 1;  	break;  }  case '&': {  	int LA17_2 = input.LA (2);  	if ((LA17_2 == '&')) {  		alt17 = 9;  	} else {  		alt17 = 2;  	}  	break;  }  case '~': {  	alt17 = 3;  	break;  }  case '|': {  	int LA17_4 = input.LA (2);  	if ((LA17_4 == '|')) {  		alt17 = 11;  	} else {  		alt17 = 4;  	}  	break;  }  case '<': {  	switch (input.LA (2)) {  	case '<': {  		alt17 = 5;  		break;  	}  	case '=': {  		alt17 = 18;  		break;  	}  	default: {  		alt17 = 17;  		break;  	}  	}  	break;  }  case '>': {  	switch (input.LA (2)) {  	case '>': {  		int LA17_31 = input.LA (3);  		if ((LA17_31 == '>')) {  			alt17 = 7;  		} else {  			alt17 = 6;  		}  		break;  	}  	case '=': {  		alt17 = 16;  		break;  	}  	default: {  		alt17 = 15;  		break;  	}  	}  	break;  }  case '^': {  	alt17 = 8;  	break;  }  case '!': {  	int LA17_8 = input.LA (2);  	if ((LA17_8 == '=')) {  		alt17 = 19;  	} else {  		alt17 = 10;  	}  	break;  }  case ':': {  	alt17 = 12;  	break;  }  case ''': {  	alt17 = 13;  	break;  }  case '=': {  	alt17 = 14;  	break;  }  case '?': {  	alt17 = 20;  	break;  }  case '/': {  	alt17 = 21;  	break;  }  case '.': {  	int LA17_14 = input.LA (2);  	if (((LA17_14 >= '0' && LA17_14 <= '9'))) {  		alt17 = 30;  	} else {  		alt17 = 22;  	}  	break;  }  case '(': {  	alt17 = 23;  	break;  }  case '%': {  	alt17 = 24;  	break;  }  case '*': {  	alt17 = 25;  	break;  }  case ')': {  	alt17 = 26;  	break;  }  case '-': {  	alt17 = 27;  	break;  }  case 'A':  case 'B':  case 'C':  case 'D':  case 'E':  case 'F':  case 'G':  case 'H':  case 'I':  case 'J':  case 'K':  case 'L':  case 'M':  case 'N':  case 'O':  case 'P':  case 'Q':  case 'R':  case 'S':  case 'T':  case 'U':  case 'V':  case 'W':  case 'X':  case 'Y':  case 'Z':  case '_':  case 'a':  case 'b':  case 'c':  case 'd':  case 'e':  case 'f':  case 'g':  case 'h':  case 'i':  case 'j':  case 'k':  case 'l':  case 'm':  case 'n':  case 'o':  case 'p':  case 'q':  case 'r':  case 's':  case 't':  case 'u':  case 'v':  case 'w':  case 'x':  case 'y':  case 'z': {  	alt17 = 28;  	break;  }  case '\t':  case '\n':  case '\r':  case ' ': {  	alt17 = 29;  	break;  }  case '0': {  	switch (input.LA (2)) {  	case 'X':  	case 'x': {  		alt17 = 32;  		break;  	}  	case '0':  	case '1':  	case '2':  	case '3':  	case '4':  	case '5':  	case '6':  	case '7': {  		alt17 = 31;  		break;  	}  	default: {  		alt17 = 30;  		break;  	}  	}  	break;  }  case '1':  case '2':  case '3':  case '4':  case '5':  case '6':  case '7':  case '8':  case '9': {  	alt17 = 30;  	break;  }  default: {  	NoViableAltException nvae = new NoViableAltException (string.Empty' 17' 0' input);  	throw nvae;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA (1)) {  case '+': {  	alt17 = 1;  	break;  }  case '&': {  	int LA17_2 = input.LA (2);  	if ((LA17_2 == '&')) {  		alt17 = 9;  	} else {  		alt17 = 2;  	}  	break;  }  case '~': {  	alt17 = 3;  	break;  }  case '|': {  	int LA17_4 = input.LA (2);  	if ((LA17_4 == '|')) {  		alt17 = 11;  	} else {  		alt17 = 4;  	}  	break;  }  case '<': {  	switch (input.LA (2)) {  	case '<': {  		alt17 = 5;  		break;  	}  	case '=': {  		alt17 = 18;  		break;  	}  	default: {  		alt17 = 17;  		break;  	}  	}  	break;  }  case '>': {  	switch (input.LA (2)) {  	case '>': {  		int LA17_31 = input.LA (3);  		if ((LA17_31 == '>')) {  			alt17 = 7;  		} else {  			alt17 = 6;  		}  		break;  	}  	case '=': {  		alt17 = 16;  		break;  	}  	default: {  		alt17 = 15;  		break;  	}  	}  	break;  }  case '^': {  	alt17 = 8;  	break;  }  case '!': {  	int LA17_8 = input.LA (2);  	if ((LA17_8 == '=')) {  		alt17 = 19;  	} else {  		alt17 = 10;  	}  	break;  }  case ':': {  	alt17 = 12;  	break;  }  case ''': {  	alt17 = 13;  	break;  }  case '=': {  	alt17 = 14;  	break;  }  case '?': {  	alt17 = 20;  	break;  }  case '/': {  	alt17 = 21;  	break;  }  case '.': {  	int LA17_14 = input.LA (2);  	if (((LA17_14 >= '0' && LA17_14 <= '9'))) {  		alt17 = 30;  	} else {  		alt17 = 22;  	}  	break;  }  case '(': {  	alt17 = 23;  	break;  }  case '%': {  	alt17 = 24;  	break;  }  case '*': {  	alt17 = 25;  	break;  }  case ')': {  	alt17 = 26;  	break;  }  case '-': {  	alt17 = 27;  	break;  }  case 'A':  case 'B':  case 'C':  case 'D':  case 'E':  case 'F':  case 'G':  case 'H':  case 'I':  case 'J':  case 'K':  case 'L':  case 'M':  case 'N':  case 'O':  case 'P':  case 'Q':  case 'R':  case 'S':  case 'T':  case 'U':  case 'V':  case 'W':  case 'X':  case 'Y':  case 'Z':  case '_':  case 'a':  case 'b':  case 'c':  case 'd':  case 'e':  case 'f':  case 'g':  case 'h':  case 'i':  case 'j':  case 'k':  case 'l':  case 'm':  case 'n':  case 'o':  case 'p':  case 'q':  case 'r':  case 's':  case 't':  case 'u':  case 'v':  case 'w':  case 'x':  case 'y':  case 'z': {  	alt17 = 28;  	break;  }  case '\t':  case '\n':  case '\r':  case ' ': {  	alt17 = 29;  	break;  }  case '0': {  	switch (input.LA (2)) {  	case 'X':  	case 'x': {  		alt17 = 32;  		break;  	}  	case '0':  	case '1':  	case '2':  	case '3':  	case '4':  	case '5':  	case '6':  	case '7': {  		alt17 = 31;  		break;  	}  	default: {  		alt17 = 30;  		break;  	}  	}  	break;  }  case '1':  case '2':  case '3':  case '4':  case '5':  case '6':  case '7':  case '8':  case '9': {  	alt17 = 30;  	break;  }  default: {  	NoViableAltException nvae = new NoViableAltException (string.Empty' 17' 0' input);  	throw nvae;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA (1)) {  case '+': {  	alt17 = 1;  	break;  }  case '&': {  	int LA17_2 = input.LA (2);  	if ((LA17_2 == '&')) {  		alt17 = 9;  	} else {  		alt17 = 2;  	}  	break;  }  case '~': {  	alt17 = 3;  	break;  }  case '|': {  	int LA17_4 = input.LA (2);  	if ((LA17_4 == '|')) {  		alt17 = 11;  	} else {  		alt17 = 4;  	}  	break;  }  case '<': {  	switch (input.LA (2)) {  	case '<': {  		alt17 = 5;  		break;  	}  	case '=': {  		alt17 = 18;  		break;  	}  	default: {  		alt17 = 17;  		break;  	}  	}  	break;  }  case '>': {  	switch (input.LA (2)) {  	case '>': {  		int LA17_31 = input.LA (3);  		if ((LA17_31 == '>')) {  			alt17 = 7;  		} else {  			alt17 = 6;  		}  		break;  	}  	case '=': {  		alt17 = 16;  		break;  	}  	default: {  		alt17 = 15;  		break;  	}  	}  	break;  }  case '^': {  	alt17 = 8;  	break;  }  case '!': {  	int LA17_8 = input.LA (2);  	if ((LA17_8 == '=')) {  		alt17 = 19;  	} else {  		alt17 = 10;  	}  	break;  }  case ':': {  	alt17 = 12;  	break;  }  case ''': {  	alt17 = 13;  	break;  }  case '=': {  	alt17 = 14;  	break;  }  case '?': {  	alt17 = 20;  	break;  }  case '/': {  	alt17 = 21;  	break;  }  case '.': {  	int LA17_14 = input.LA (2);  	if (((LA17_14 >= '0' && LA17_14 <= '9'))) {  		alt17 = 30;  	} else {  		alt17 = 22;  	}  	break;  }  case '(': {  	alt17 = 23;  	break;  }  case '%': {  	alt17 = 24;  	break;  }  case '*': {  	alt17 = 25;  	break;  }  case ')': {  	alt17 = 26;  	break;  }  case '-': {  	alt17 = 27;  	break;  }  case 'A':  case 'B':  case 'C':  case 'D':  case 'E':  case 'F':  case 'G':  case 'H':  case 'I':  case 'J':  case 'K':  case 'L':  case 'M':  case 'N':  case 'O':  case 'P':  case 'Q':  case 'R':  case 'S':  case 'T':  case 'U':  case 'V':  case 'W':  case 'X':  case 'Y':  case 'Z':  case '_':  case 'a':  case 'b':  case 'c':  case 'd':  case 'e':  case 'f':  case 'g':  case 'h':  case 'i':  case 'j':  case 'k':  case 'l':  case 'm':  case 'n':  case 'o':  case 'p':  case 'q':  case 'r':  case 's':  case 't':  case 'u':  case 'v':  case 'w':  case 'x':  case 'y':  case 'z': {  	alt17 = 28;  	break;  }  case '\t':  case '\n':  case '\r':  case ' ': {  	alt17 = 29;  	break;  }  case '0': {  	switch (input.LA (2)) {  	case 'X':  	case 'x': {  		alt17 = 32;  		break;  	}  	case '0':  	case '1':  	case '2':  	case '3':  	case '4':  	case '5':  	case '6':  	case '7': {  		alt17 = 31;  		break;  	}  	default: {  		alt17 = 30;  		break;  	}  	}  	break;  }  case '1':  case '2':  case '3':  case '4':  case '5':  case '6':  case '7':  case '8':  case '9': {  	alt17 = 30;  	break;  }  default: {  	NoViableAltException nvae = new NoViableAltException (string.Empty' 17' 0' input);  	throw nvae;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA (1)) {  case '+': {  	alt17 = 1;  	break;  }  case '&': {  	int LA17_2 = input.LA (2);  	if ((LA17_2 == '&')) {  		alt17 = 9;  	} else {  		alt17 = 2;  	}  	break;  }  case '~': {  	alt17 = 3;  	break;  }  case '|': {  	int LA17_4 = input.LA (2);  	if ((LA17_4 == '|')) {  		alt17 = 11;  	} else {  		alt17 = 4;  	}  	break;  }  case '<': {  	switch (input.LA (2)) {  	case '<': {  		alt17 = 5;  		break;  	}  	case '=': {  		alt17 = 18;  		break;  	}  	default: {  		alt17 = 17;  		break;  	}  	}  	break;  }  case '>': {  	switch (input.LA (2)) {  	case '>': {  		int LA17_31 = input.LA (3);  		if ((LA17_31 == '>')) {  			alt17 = 7;  		} else {  			alt17 = 6;  		}  		break;  	}  	case '=': {  		alt17 = 16;  		break;  	}  	default: {  		alt17 = 15;  		break;  	}  	}  	break;  }  case '^': {  	alt17 = 8;  	break;  }  case '!': {  	int LA17_8 = input.LA (2);  	if ((LA17_8 == '=')) {  		alt17 = 19;  	} else {  		alt17 = 10;  	}  	break;  }  case ':': {  	alt17 = 12;  	break;  }  case ''': {  	alt17 = 13;  	break;  }  case '=': {  	alt17 = 14;  	break;  }  case '?': {  	alt17 = 20;  	break;  }  case '/': {  	alt17 = 21;  	break;  }  case '.': {  	int LA17_14 = input.LA (2);  	if (((LA17_14 >= '0' && LA17_14 <= '9'))) {  		alt17 = 30;  	} else {  		alt17 = 22;  	}  	break;  }  case '(': {  	alt17 = 23;  	break;  }  case '%': {  	alt17 = 24;  	break;  }  case '*': {  	alt17 = 25;  	break;  }  case ')': {  	alt17 = 26;  	break;  }  case '-': {  	alt17 = 27;  	break;  }  case 'A':  case 'B':  case 'C':  case 'D':  case 'E':  case 'F':  case 'G':  case 'H':  case 'I':  case 'J':  case 'K':  case 'L':  case 'M':  case 'N':  case 'O':  case 'P':  case 'Q':  case 'R':  case 'S':  case 'T':  case 'U':  case 'V':  case 'W':  case 'X':  case 'Y':  case 'Z':  case '_':  case 'a':  case 'b':  case 'c':  case 'd':  case 'e':  case 'f':  case 'g':  case 'h':  case 'i':  case 'j':  case 'k':  case 'l':  case 'm':  case 'n':  case 'o':  case 'p':  case 'q':  case 'r':  case 's':  case 't':  case 'u':  case 'v':  case 'w':  case 'x':  case 'y':  case 'z': {  	alt17 = 28;  	break;  }  case '\t':  case '\n':  case '\r':  case ' ': {  	alt17 = 29;  	break;  }  case '0': {  	switch (input.LA (2)) {  	case 'X':  	case 'x': {  		alt17 = 32;  		break;  	}  	case '0':  	case '1':  	case '2':  	case '3':  	case '4':  	case '5':  	case '6':  	case '7': {  		alt17 = 31;  		break;  	}  	default: {  		alt17 = 30;  		break;  	}  	}  	break;  }  case '1':  case '2':  case '3':  case '4':  case '5':  case '6':  case '7':  case '8':  case '9': {  	alt17 = 30;  	break;  }  default: {  	NoViableAltException nvae = new NoViableAltException (string.Empty' 17' 0' input);  	throw nvae;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA (1)) {  case '+': {  	alt17 = 1;  	break;  }  case '&': {  	int LA17_2 = input.LA (2);  	if ((LA17_2 == '&')) {  		alt17 = 9;  	} else {  		alt17 = 2;  	}  	break;  }  case '~': {  	alt17 = 3;  	break;  }  case '|': {  	int LA17_4 = input.LA (2);  	if ((LA17_4 == '|')) {  		alt17 = 11;  	} else {  		alt17 = 4;  	}  	break;  }  case '<': {  	switch (input.LA (2)) {  	case '<': {  		alt17 = 5;  		break;  	}  	case '=': {  		alt17 = 18;  		break;  	}  	default: {  		alt17 = 17;  		break;  	}  	}  	break;  }  case '>': {  	switch (input.LA (2)) {  	case '>': {  		int LA17_31 = input.LA (3);  		if ((LA17_31 == '>')) {  			alt17 = 7;  		} else {  			alt17 = 6;  		}  		break;  	}  	case '=': {  		alt17 = 16;  		break;  	}  	default: {  		alt17 = 15;  		break;  	}  	}  	break;  }  case '^': {  	alt17 = 8;  	break;  }  case '!': {  	int LA17_8 = input.LA (2);  	if ((LA17_8 == '=')) {  		alt17 = 19;  	} else {  		alt17 = 10;  	}  	break;  }  case ':': {  	alt17 = 12;  	break;  }  case ''': {  	alt17 = 13;  	break;  }  case '=': {  	alt17 = 14;  	break;  }  case '?': {  	alt17 = 20;  	break;  }  case '/': {  	alt17 = 21;  	break;  }  case '.': {  	int LA17_14 = input.LA (2);  	if (((LA17_14 >= '0' && LA17_14 <= '9'))) {  		alt17 = 30;  	} else {  		alt17 = 22;  	}  	break;  }  case '(': {  	alt17 = 23;  	break;  }  case '%': {  	alt17 = 24;  	break;  }  case '*': {  	alt17 = 25;  	break;  }  case ')': {  	alt17 = 26;  	break;  }  case '-': {  	alt17 = 27;  	break;  }  case 'A':  case 'B':  case 'C':  case 'D':  case 'E':  case 'F':  case 'G':  case 'H':  case 'I':  case 'J':  case 'K':  case 'L':  case 'M':  case 'N':  case 'O':  case 'P':  case 'Q':  case 'R':  case 'S':  case 'T':  case 'U':  case 'V':  case 'W':  case 'X':  case 'Y':  case 'Z':  case '_':  case 'a':  case 'b':  case 'c':  case 'd':  case 'e':  case 'f':  case 'g':  case 'h':  case 'i':  case 'j':  case 'k':  case 'l':  case 'm':  case 'n':  case 'o':  case 'p':  case 'q':  case 'r':  case 's':  case 't':  case 'u':  case 'v':  case 'w':  case 'x':  case 'y':  case 'z': {  	alt17 = 28;  	break;  }  case '\t':  case '\n':  case '\r':  case ' ': {  	alt17 = 29;  	break;  }  case '0': {  	switch (input.LA (2)) {  	case 'X':  	case 'x': {  		alt17 = 32;  		break;  	}  	case '0':  	case '1':  	case '2':  	case '3':  	case '4':  	case '5':  	case '6':  	case '7': {  		alt17 = 31;  		break;  	}  	default: {  		alt17 = 30;  		break;  	}  	}  	break;  }  case '1':  case '2':  case '3':  case '4':  case '5':  case '6':  case '7':  case '8':  case '9': {  	alt17 = 30;  	break;  }  default: {  	NoViableAltException nvae = new NoViableAltException (string.Empty' 17' 0' input);  	throw nvae;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA (1)) {  case '+': {  	alt17 = 1;  	break;  }  case '&': {  	int LA17_2 = input.LA (2);  	if ((LA17_2 == '&')) {  		alt17 = 9;  	} else {  		alt17 = 2;  	}  	break;  }  case '~': {  	alt17 = 3;  	break;  }  case '|': {  	int LA17_4 = input.LA (2);  	if ((LA17_4 == '|')) {  		alt17 = 11;  	} else {  		alt17 = 4;  	}  	break;  }  case '<': {  	switch (input.LA (2)) {  	case '<': {  		alt17 = 5;  		break;  	}  	case '=': {  		alt17 = 18;  		break;  	}  	default: {  		alt17 = 17;  		break;  	}  	}  	break;  }  case '>': {  	switch (input.LA (2)) {  	case '>': {  		int LA17_31 = input.LA (3);  		if ((LA17_31 == '>')) {  			alt17 = 7;  		} else {  			alt17 = 6;  		}  		break;  	}  	case '=': {  		alt17 = 16;  		break;  	}  	default: {  		alt17 = 15;  		break;  	}  	}  	break;  }  case '^': {  	alt17 = 8;  	break;  }  case '!': {  	int LA17_8 = input.LA (2);  	if ((LA17_8 == '=')) {  		alt17 = 19;  	} else {  		alt17 = 10;  	}  	break;  }  case ':': {  	alt17 = 12;  	break;  }  case ''': {  	alt17 = 13;  	break;  }  case '=': {  	alt17 = 14;  	break;  }  case '?': {  	alt17 = 20;  	break;  }  case '/': {  	alt17 = 21;  	break;  }  case '.': {  	int LA17_14 = input.LA (2);  	if (((LA17_14 >= '0' && LA17_14 <= '9'))) {  		alt17 = 30;  	} else {  		alt17 = 22;  	}  	break;  }  case '(': {  	alt17 = 23;  	break;  }  case '%': {  	alt17 = 24;  	break;  }  case '*': {  	alt17 = 25;  	break;  }  case ')': {  	alt17 = 26;  	break;  }  case '-': {  	alt17 = 27;  	break;  }  case 'A':  case 'B':  case 'C':  case 'D':  case 'E':  case 'F':  case 'G':  case 'H':  case 'I':  case 'J':  case 'K':  case 'L':  case 'M':  case 'N':  case 'O':  case 'P':  case 'Q':  case 'R':  case 'S':  case 'T':  case 'U':  case 'V':  case 'W':  case 'X':  case 'Y':  case 'Z':  case '_':  case 'a':  case 'b':  case 'c':  case 'd':  case 'e':  case 'f':  case 'g':  case 'h':  case 'i':  case 'j':  case 'k':  case 'l':  case 'm':  case 'n':  case 'o':  case 'p':  case 'q':  case 'r':  case 's':  case 't':  case 'u':  case 'v':  case 'w':  case 'x':  case 'y':  case 'z': {  	alt17 = 28;  	break;  }  case '\t':  case '\n':  case '\r':  case ' ': {  	alt17 = 29;  	break;  }  case '0': {  	switch (input.LA (2)) {  	case 'X':  	case 'x': {  		alt17 = 32;  		break;  	}  	case '0':  	case '1':  	case '2':  	case '3':  	case '4':  	case '5':  	case '6':  	case '7': {  		alt17 = 31;  		break;  	}  	default: {  		alt17 = 30;  		break;  	}  	}  	break;  }  case '1':  case '2':  case '3':  case '4':  case '5':  case '6':  case '7':  case '8':  case '9': {  	alt17 = 30;  	break;  }  default: {  	NoViableAltException nvae = new NoViableAltException (string.Empty' 17' 0' input);  	throw nvae;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA (1)) {  case '+': {  	alt17 = 1;  	break;  }  case '&': {  	int LA17_2 = input.LA (2);  	if ((LA17_2 == '&')) {  		alt17 = 9;  	} else {  		alt17 = 2;  	}  	break;  }  case '~': {  	alt17 = 3;  	break;  }  case '|': {  	int LA17_4 = input.LA (2);  	if ((LA17_4 == '|')) {  		alt17 = 11;  	} else {  		alt17 = 4;  	}  	break;  }  case '<': {  	switch (input.LA (2)) {  	case '<': {  		alt17 = 5;  		break;  	}  	case '=': {  		alt17 = 18;  		break;  	}  	default: {  		alt17 = 17;  		break;  	}  	}  	break;  }  case '>': {  	switch (input.LA (2)) {  	case '>': {  		int LA17_31 = input.LA (3);  		if ((LA17_31 == '>')) {  			alt17 = 7;  		} else {  			alt17 = 6;  		}  		break;  	}  	case '=': {  		alt17 = 16;  		break;  	}  	default: {  		alt17 = 15;  		break;  	}  	}  	break;  }  case '^': {  	alt17 = 8;  	break;  }  case '!': {  	int LA17_8 = input.LA (2);  	if ((LA17_8 == '=')) {  		alt17 = 19;  	} else {  		alt17 = 10;  	}  	break;  }  case ':': {  	alt17 = 12;  	break;  }  case ''': {  	alt17 = 13;  	break;  }  case '=': {  	alt17 = 14;  	break;  }  case '?': {  	alt17 = 20;  	break;  }  case '/': {  	alt17 = 21;  	break;  }  case '.': {  	int LA17_14 = input.LA (2);  	if (((LA17_14 >= '0' && LA17_14 <= '9'))) {  		alt17 = 30;  	} else {  		alt17 = 22;  	}  	break;  }  case '(': {  	alt17 = 23;  	break;  }  case '%': {  	alt17 = 24;  	break;  }  case '*': {  	alt17 = 25;  	break;  }  case ')': {  	alt17 = 26;  	break;  }  case '-': {  	alt17 = 27;  	break;  }  case 'A':  case 'B':  case 'C':  case 'D':  case 'E':  case 'F':  case 'G':  case 'H':  case 'I':  case 'J':  case 'K':  case 'L':  case 'M':  case 'N':  case 'O':  case 'P':  case 'Q':  case 'R':  case 'S':  case 'T':  case 'U':  case 'V':  case 'W':  case 'X':  case 'Y':  case 'Z':  case '_':  case 'a':  case 'b':  case 'c':  case 'd':  case 'e':  case 'f':  case 'g':  case 'h':  case 'i':  case 'j':  case 'k':  case 'l':  case 'm':  case 'n':  case 'o':  case 'p':  case 'q':  case 'r':  case 's':  case 't':  case 'u':  case 'v':  case 'w':  case 'x':  case 'y':  case 'z': {  	alt17 = 28;  	break;  }  case '\t':  case '\n':  case '\r':  case ' ': {  	alt17 = 29;  	break;  }  case '0': {  	switch (input.LA (2)) {  	case 'X':  	case 'x': {  		alt17 = 32;  		break;  	}  	case '0':  	case '1':  	case '2':  	case '3':  	case '4':  	case '5':  	case '6':  	case '7': {  		alt17 = 31;  		break;  	}  	default: {  		alt17 = 30;  		break;  	}  	}  	break;  }  case '1':  case '2':  case '3':  case '4':  case '5':  case '6':  case '7':  case '8':  case '9': {  	alt17 = 30;  	break;  }  default: {  	NoViableAltException nvae = new NoViableAltException (string.Empty' 17' 0' input);  	throw nvae;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA (1)) {  case '+': {  	alt17 = 1;  	break;  }  case '&': {  	int LA17_2 = input.LA (2);  	if ((LA17_2 == '&')) {  		alt17 = 9;  	} else {  		alt17 = 2;  	}  	break;  }  case '~': {  	alt17 = 3;  	break;  }  case '|': {  	int LA17_4 = input.LA (2);  	if ((LA17_4 == '|')) {  		alt17 = 11;  	} else {  		alt17 = 4;  	}  	break;  }  case '<': {  	switch (input.LA (2)) {  	case '<': {  		alt17 = 5;  		break;  	}  	case '=': {  		alt17 = 18;  		break;  	}  	default: {  		alt17 = 17;  		break;  	}  	}  	break;  }  case '>': {  	switch (input.LA (2)) {  	case '>': {  		int LA17_31 = input.LA (3);  		if ((LA17_31 == '>')) {  			alt17 = 7;  		} else {  			alt17 = 6;  		}  		break;  	}  	case '=': {  		alt17 = 16;  		break;  	}  	default: {  		alt17 = 15;  		break;  	}  	}  	break;  }  case '^': {  	alt17 = 8;  	break;  }  case '!': {  	int LA17_8 = input.LA (2);  	if ((LA17_8 == '=')) {  		alt17 = 19;  	} else {  		alt17 = 10;  	}  	break;  }  case ':': {  	alt17 = 12;  	break;  }  case ''': {  	alt17 = 13;  	break;  }  case '=': {  	alt17 = 14;  	break;  }  case '?': {  	alt17 = 20;  	break;  }  case '/': {  	alt17 = 21;  	break;  }  case '.': {  	int LA17_14 = input.LA (2);  	if (((LA17_14 >= '0' && LA17_14 <= '9'))) {  		alt17 = 30;  	} else {  		alt17 = 22;  	}  	break;  }  case '(': {  	alt17 = 23;  	break;  }  case '%': {  	alt17 = 24;  	break;  }  case '*': {  	alt17 = 25;  	break;  }  case ')': {  	alt17 = 26;  	break;  }  case '-': {  	alt17 = 27;  	break;  }  case 'A':  case 'B':  case 'C':  case 'D':  case 'E':  case 'F':  case 'G':  case 'H':  case 'I':  case 'J':  case 'K':  case 'L':  case 'M':  case 'N':  case 'O':  case 'P':  case 'Q':  case 'R':  case 'S':  case 'T':  case 'U':  case 'V':  case 'W':  case 'X':  case 'Y':  case 'Z':  case '_':  case 'a':  case 'b':  case 'c':  case 'd':  case 'e':  case 'f':  case 'g':  case 'h':  case 'i':  case 'j':  case 'k':  case 'l':  case 'm':  case 'n':  case 'o':  case 'p':  case 'q':  case 'r':  case 's':  case 't':  case 'u':  case 'v':  case 'w':  case 'x':  case 'y':  case 'z': {  	alt17 = 28;  	break;  }  case '\t':  case '\n':  case '\r':  case ' ': {  	alt17 = 29;  	break;  }  case '0': {  	switch (input.LA (2)) {  	case 'X':  	case 'x': {  		alt17 = 32;  		break;  	}  	case '0':  	case '1':  	case '2':  	case '3':  	case '4':  	case '5':  	case '6':  	case '7': {  		alt17 = 31;  		break;  	}  	default: {  		alt17 = 30;  		break;  	}  	}  	break;  }  case '1':  case '2':  case '3':  case '4':  case '5':  case '6':  case '7':  case '8':  case '9': {  	alt17 = 30;  	break;  }  default: {  	NoViableAltException nvae = new NoViableAltException (string.Empty' 17' 0' input);  	throw nvae;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA (1)) {  case '+': {  	alt17 = 1;  	break;  }  case '&': {  	int LA17_2 = input.LA (2);  	if ((LA17_2 == '&')) {  		alt17 = 9;  	} else {  		alt17 = 2;  	}  	break;  }  case '~': {  	alt17 = 3;  	break;  }  case '|': {  	int LA17_4 = input.LA (2);  	if ((LA17_4 == '|')) {  		alt17 = 11;  	} else {  		alt17 = 4;  	}  	break;  }  case '<': {  	switch (input.LA (2)) {  	case '<': {  		alt17 = 5;  		break;  	}  	case '=': {  		alt17 = 18;  		break;  	}  	default: {  		alt17 = 17;  		break;  	}  	}  	break;  }  case '>': {  	switch (input.LA (2)) {  	case '>': {  		int LA17_31 = input.LA (3);  		if ((LA17_31 == '>')) {  			alt17 = 7;  		} else {  			alt17 = 6;  		}  		break;  	}  	case '=': {  		alt17 = 16;  		break;  	}  	default: {  		alt17 = 15;  		break;  	}  	}  	break;  }  case '^': {  	alt17 = 8;  	break;  }  case '!': {  	int LA17_8 = input.LA (2);  	if ((LA17_8 == '=')) {  		alt17 = 19;  	} else {  		alt17 = 10;  	}  	break;  }  case ':': {  	alt17 = 12;  	break;  }  case ''': {  	alt17 = 13;  	break;  }  case '=': {  	alt17 = 14;  	break;  }  case '?': {  	alt17 = 20;  	break;  }  case '/': {  	alt17 = 21;  	break;  }  case '.': {  	int LA17_14 = input.LA (2);  	if (((LA17_14 >= '0' && LA17_14 <= '9'))) {  		alt17 = 30;  	} else {  		alt17 = 22;  	}  	break;  }  case '(': {  	alt17 = 23;  	break;  }  case '%': {  	alt17 = 24;  	break;  }  case '*': {  	alt17 = 25;  	break;  }  case ')': {  	alt17 = 26;  	break;  }  case '-': {  	alt17 = 27;  	break;  }  case 'A':  case 'B':  case 'C':  case 'D':  case 'E':  case 'F':  case 'G':  case 'H':  case 'I':  case 'J':  case 'K':  case 'L':  case 'M':  case 'N':  case 'O':  case 'P':  case 'Q':  case 'R':  case 'S':  case 'T':  case 'U':  case 'V':  case 'W':  case 'X':  case 'Y':  case 'Z':  case '_':  case 'a':  case 'b':  case 'c':  case 'd':  case 'e':  case 'f':  case 'g':  case 'h':  case 'i':  case 'j':  case 'k':  case 'l':  case 'm':  case 'n':  case 'o':  case 'p':  case 'q':  case 'r':  case 's':  case 't':  case 'u':  case 'v':  case 'w':  case 'x':  case 'y':  case 'z': {  	alt17 = 28;  	break;  }  case '\t':  case '\n':  case '\r':  case ' ': {  	alt17 = 29;  	break;  }  case '0': {  	switch (input.LA (2)) {  	case 'X':  	case 'x': {  		alt17 = 32;  		break;  	}  	case '0':  	case '1':  	case '2':  	case '3':  	case '4':  	case '5':  	case '6':  	case '7': {  		alt17 = 31;  		break;  	}  	default: {  		alt17 = 30;  		break;  	}  	}  	break;  }  case '1':  case '2':  case '3':  case '4':  case '5':  case '6':  case '7':  case '8':  case '9': {  	alt17 = 30;  	break;  }  default: {  	NoViableAltException nvae = new NoViableAltException (string.Empty' 17' 0' input);  	throw nvae;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA (1)) {  case '+': {  	alt17 = 1;  	break;  }  case '&': {  	int LA17_2 = input.LA (2);  	if ((LA17_2 == '&')) {  		alt17 = 9;  	} else {  		alt17 = 2;  	}  	break;  }  case '~': {  	alt17 = 3;  	break;  }  case '|': {  	int LA17_4 = input.LA (2);  	if ((LA17_4 == '|')) {  		alt17 = 11;  	} else {  		alt17 = 4;  	}  	break;  }  case '<': {  	switch (input.LA (2)) {  	case '<': {  		alt17 = 5;  		break;  	}  	case '=': {  		alt17 = 18;  		break;  	}  	default: {  		alt17 = 17;  		break;  	}  	}  	break;  }  case '>': {  	switch (input.LA (2)) {  	case '>': {  		int LA17_31 = input.LA (3);  		if ((LA17_31 == '>')) {  			alt17 = 7;  		} else {  			alt17 = 6;  		}  		break;  	}  	case '=': {  		alt17 = 16;  		break;  	}  	default: {  		alt17 = 15;  		break;  	}  	}  	break;  }  case '^': {  	alt17 = 8;  	break;  }  case '!': {  	int LA17_8 = input.LA (2);  	if ((LA17_8 == '=')) {  		alt17 = 19;  	} else {  		alt17 = 10;  	}  	break;  }  case ':': {  	alt17 = 12;  	break;  }  case ''': {  	alt17 = 13;  	break;  }  case '=': {  	alt17 = 14;  	break;  }  case '?': {  	alt17 = 20;  	break;  }  case '/': {  	alt17 = 21;  	break;  }  case '.': {  	int LA17_14 = input.LA (2);  	if (((LA17_14 >= '0' && LA17_14 <= '9'))) {  		alt17 = 30;  	} else {  		alt17 = 22;  	}  	break;  }  case '(': {  	alt17 = 23;  	break;  }  case '%': {  	alt17 = 24;  	break;  }  case '*': {  	alt17 = 25;  	break;  }  case ')': {  	alt17 = 26;  	break;  }  case '-': {  	alt17 = 27;  	break;  }  case 'A':  case 'B':  case 'C':  case 'D':  case 'E':  case 'F':  case 'G':  case 'H':  case 'I':  case 'J':  case 'K':  case 'L':  case 'M':  case 'N':  case 'O':  case 'P':  case 'Q':  case 'R':  case 'S':  case 'T':  case 'U':  case 'V':  case 'W':  case 'X':  case 'Y':  case 'Z':  case '_':  case 'a':  case 'b':  case 'c':  case 'd':  case 'e':  case 'f':  case 'g':  case 'h':  case 'i':  case 'j':  case 'k':  case 'l':  case 'm':  case 'n':  case 'o':  case 'p':  case 'q':  case 'r':  case 's':  case 't':  case 'u':  case 'v':  case 'w':  case 'x':  case 'y':  case 'z': {  	alt17 = 28;  	break;  }  case '\t':  case '\n':  case '\r':  case ' ': {  	alt17 = 29;  	break;  }  case '0': {  	switch (input.LA (2)) {  	case 'X':  	case 'x': {  		alt17 = 32;  		break;  	}  	case '0':  	case '1':  	case '2':  	case '3':  	case '4':  	case '5':  	case '6':  	case '7': {  		alt17 = 31;  		break;  	}  	default: {  		alt17 = 30;  		break;  	}  	}  	break;  }  case '1':  case '2':  case '3':  case '4':  case '5':  case '6':  case '7':  case '8':  case '9': {  	alt17 = 30;  	break;  }  default: {  	NoViableAltException nvae = new NoViableAltException (string.Empty' 17' 0' input);  	throw nvae;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA (1)) {  case '+': {  	alt17 = 1;  	break;  }  case '&': {  	int LA17_2 = input.LA (2);  	if ((LA17_2 == '&')) {  		alt17 = 9;  	} else {  		alt17 = 2;  	}  	break;  }  case '~': {  	alt17 = 3;  	break;  }  case '|': {  	int LA17_4 = input.LA (2);  	if ((LA17_4 == '|')) {  		alt17 = 11;  	} else {  		alt17 = 4;  	}  	break;  }  case '<': {  	switch (input.LA (2)) {  	case '<': {  		alt17 = 5;  		break;  	}  	case '=': {  		alt17 = 18;  		break;  	}  	default: {  		alt17 = 17;  		break;  	}  	}  	break;  }  case '>': {  	switch (input.LA (2)) {  	case '>': {  		int LA17_31 = input.LA (3);  		if ((LA17_31 == '>')) {  			alt17 = 7;  		} else {  			alt17 = 6;  		}  		break;  	}  	case '=': {  		alt17 = 16;  		break;  	}  	default: {  		alt17 = 15;  		break;  	}  	}  	break;  }  case '^': {  	alt17 = 8;  	break;  }  case '!': {  	int LA17_8 = input.LA (2);  	if ((LA17_8 == '=')) {  		alt17 = 19;  	} else {  		alt17 = 10;  	}  	break;  }  case ':': {  	alt17 = 12;  	break;  }  case ''': {  	alt17 = 13;  	break;  }  case '=': {  	alt17 = 14;  	break;  }  case '?': {  	alt17 = 20;  	break;  }  case '/': {  	alt17 = 21;  	break;  }  case '.': {  	int LA17_14 = input.LA (2);  	if (((LA17_14 >= '0' && LA17_14 <= '9'))) {  		alt17 = 30;  	} else {  		alt17 = 22;  	}  	break;  }  case '(': {  	alt17 = 23;  	break;  }  case '%': {  	alt17 = 24;  	break;  }  case '*': {  	alt17 = 25;  	break;  }  case ')': {  	alt17 = 26;  	break;  }  case '-': {  	alt17 = 27;  	break;  }  case 'A':  case 'B':  case 'C':  case 'D':  case 'E':  case 'F':  case 'G':  case 'H':  case 'I':  case 'J':  case 'K':  case 'L':  case 'M':  case 'N':  case 'O':  case 'P':  case 'Q':  case 'R':  case 'S':  case 'T':  case 'U':  case 'V':  case 'W':  case 'X':  case 'Y':  case 'Z':  case '_':  case 'a':  case 'b':  case 'c':  case 'd':  case 'e':  case 'f':  case 'g':  case 'h':  case 'i':  case 'j':  case 'k':  case 'l':  case 'm':  case 'n':  case 'o':  case 'p':  case 'q':  case 'r':  case 's':  case 't':  case 'u':  case 'v':  case 'w':  case 'x':  case 'y':  case 'z': {  	alt17 = 28;  	break;  }  case '\t':  case '\n':  case '\r':  case ' ': {  	alt17 = 29;  	break;  }  case '0': {  	switch (input.LA (2)) {  	case 'X':  	case 'x': {  		alt17 = 32;  		break;  	}  	case '0':  	case '1':  	case '2':  	case '3':  	case '4':  	case '5':  	case '6':  	case '7': {  		alt17 = 31;  		break;  	}  	default: {  		alt17 = 30;  		break;  	}  	}  	break;  }  case '1':  case '2':  case '3':  case '4':  case '5':  case '6':  case '7':  case '8':  case '9': {  	alt17 = 30;  	break;  }  default: {  	NoViableAltException nvae = new NoViableAltException (string.Empty' 17' 0' input);  	throw nvae;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA (1)) {  case '+': {  	alt17 = 1;  	break;  }  case '&': {  	int LA17_2 = input.LA (2);  	if ((LA17_2 == '&')) {  		alt17 = 9;  	} else {  		alt17 = 2;  	}  	break;  }  case '~': {  	alt17 = 3;  	break;  }  case '|': {  	int LA17_4 = input.LA (2);  	if ((LA17_4 == '|')) {  		alt17 = 11;  	} else {  		alt17 = 4;  	}  	break;  }  case '<': {  	switch (input.LA (2)) {  	case '<': {  		alt17 = 5;  		break;  	}  	case '=': {  		alt17 = 18;  		break;  	}  	default: {  		alt17 = 17;  		break;  	}  	}  	break;  }  case '>': {  	switch (input.LA (2)) {  	case '>': {  		int LA17_31 = input.LA (3);  		if ((LA17_31 == '>')) {  			alt17 = 7;  		} else {  			alt17 = 6;  		}  		break;  	}  	case '=': {  		alt17 = 16;  		break;  	}  	default: {  		alt17 = 15;  		break;  	}  	}  	break;  }  case '^': {  	alt17 = 8;  	break;  }  case '!': {  	int LA17_8 = input.LA (2);  	if ((LA17_8 == '=')) {  		alt17 = 19;  	} else {  		alt17 = 10;  	}  	break;  }  case ':': {  	alt17 = 12;  	break;  }  case ''': {  	alt17 = 13;  	break;  }  case '=': {  	alt17 = 14;  	break;  }  case '?': {  	alt17 = 20;  	break;  }  case '/': {  	alt17 = 21;  	break;  }  case '.': {  	int LA17_14 = input.LA (2);  	if (((LA17_14 >= '0' && LA17_14 <= '9'))) {  		alt17 = 30;  	} else {  		alt17 = 22;  	}  	break;  }  case '(': {  	alt17 = 23;  	break;  }  case '%': {  	alt17 = 24;  	break;  }  case '*': {  	alt17 = 25;  	break;  }  case ')': {  	alt17 = 26;  	break;  }  case '-': {  	alt17 = 27;  	break;  }  case 'A':  case 'B':  case 'C':  case 'D':  case 'E':  case 'F':  case 'G':  case 'H':  case 'I':  case 'J':  case 'K':  case 'L':  case 'M':  case 'N':  case 'O':  case 'P':  case 'Q':  case 'R':  case 'S':  case 'T':  case 'U':  case 'V':  case 'W':  case 'X':  case 'Y':  case 'Z':  case '_':  case 'a':  case 'b':  case 'c':  case 'd':  case 'e':  case 'f':  case 'g':  case 'h':  case 'i':  case 'j':  case 'k':  case 'l':  case 'm':  case 'n':  case 'o':  case 'p':  case 'q':  case 'r':  case 's':  case 't':  case 'u':  case 'v':  case 'w':  case 'x':  case 'y':  case 'z': {  	alt17 = 28;  	break;  }  case '\t':  case '\n':  case '\r':  case ' ': {  	alt17 = 29;  	break;  }  case '0': {  	switch (input.LA (2)) {  	case 'X':  	case 'x': {  		alt17 = 32;  		break;  	}  	case '0':  	case '1':  	case '2':  	case '3':  	case '4':  	case '5':  	case '6':  	case '7': {  		alt17 = 31;  		break;  	}  	default: {  		alt17 = 30;  		break;  	}  	}  	break;  }  case '1':  case '2':  case '3':  case '4':  case '5':  case '6':  case '7':  case '8':  case '9': {  	alt17 = 30;  	break;  }  default: {  	NoViableAltException nvae = new NoViableAltException (string.Empty' 17' 0' input);  	throw nvae;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA (1)) {  case '+': {  	alt17 = 1;  	break;  }  case '&': {  	int LA17_2 = input.LA (2);  	if ((LA17_2 == '&')) {  		alt17 = 9;  	} else {  		alt17 = 2;  	}  	break;  }  case '~': {  	alt17 = 3;  	break;  }  case '|': {  	int LA17_4 = input.LA (2);  	if ((LA17_4 == '|')) {  		alt17 = 11;  	} else {  		alt17 = 4;  	}  	break;  }  case '<': {  	switch (input.LA (2)) {  	case '<': {  		alt17 = 5;  		break;  	}  	case '=': {  		alt17 = 18;  		break;  	}  	default: {  		alt17 = 17;  		break;  	}  	}  	break;  }  case '>': {  	switch (input.LA (2)) {  	case '>': {  		int LA17_31 = input.LA (3);  		if ((LA17_31 == '>')) {  			alt17 = 7;  		} else {  			alt17 = 6;  		}  		break;  	}  	case '=': {  		alt17 = 16;  		break;  	}  	default: {  		alt17 = 15;  		break;  	}  	}  	break;  }  case '^': {  	alt17 = 8;  	break;  }  case '!': {  	int LA17_8 = input.LA (2);  	if ((LA17_8 == '=')) {  		alt17 = 19;  	} else {  		alt17 = 10;  	}  	break;  }  case ':': {  	alt17 = 12;  	break;  }  case ''': {  	alt17 = 13;  	break;  }  case '=': {  	alt17 = 14;  	break;  }  case '?': {  	alt17 = 20;  	break;  }  case '/': {  	alt17 = 21;  	break;  }  case '.': {  	int LA17_14 = input.LA (2);  	if (((LA17_14 >= '0' && LA17_14 <= '9'))) {  		alt17 = 30;  	} else {  		alt17 = 22;  	}  	break;  }  case '(': {  	alt17 = 23;  	break;  }  case '%': {  	alt17 = 24;  	break;  }  case '*': {  	alt17 = 25;  	break;  }  case ')': {  	alt17 = 26;  	break;  }  case '-': {  	alt17 = 27;  	break;  }  case 'A':  case 'B':  case 'C':  case 'D':  case 'E':  case 'F':  case 'G':  case 'H':  case 'I':  case 'J':  case 'K':  case 'L':  case 'M':  case 'N':  case 'O':  case 'P':  case 'Q':  case 'R':  case 'S':  case 'T':  case 'U':  case 'V':  case 'W':  case 'X':  case 'Y':  case 'Z':  case '_':  case 'a':  case 'b':  case 'c':  case 'd':  case 'e':  case 'f':  case 'g':  case 'h':  case 'i':  case 'j':  case 'k':  case 'l':  case 'm':  case 'n':  case 'o':  case 'p':  case 'q':  case 'r':  case 's':  case 't':  case 'u':  case 'v':  case 'w':  case 'x':  case 'y':  case 'z': {  	alt17 = 28;  	break;  }  case '\t':  case '\n':  case '\r':  case ' ': {  	alt17 = 29;  	break;  }  case '0': {  	switch (input.LA (2)) {  	case 'X':  	case 'x': {  		alt17 = 32;  		break;  	}  	case '0':  	case '1':  	case '2':  	case '3':  	case '4':  	case '5':  	case '6':  	case '7': {  		alt17 = 31;  		break;  	}  	default: {  		alt17 = 30;  		break;  	}  	}  	break;  }  case '1':  case '2':  case '3':  case '4':  case '5':  case '6':  case '7':  case '8':  case '9': {  	alt17 = 30;  	break;  }  default: {  	NoViableAltException nvae = new NoViableAltException (string.Empty' 17' 0' input);  	throw nvae;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA (1)) {  case '+': {  	alt17 = 1;  	break;  }  case '&': {  	int LA17_2 = input.LA (2);  	if ((LA17_2 == '&')) {  		alt17 = 9;  	} else {  		alt17 = 2;  	}  	break;  }  case '~': {  	alt17 = 3;  	break;  }  case '|': {  	int LA17_4 = input.LA (2);  	if ((LA17_4 == '|')) {  		alt17 = 11;  	} else {  		alt17 = 4;  	}  	break;  }  case '<': {  	switch (input.LA (2)) {  	case '<': {  		alt17 = 5;  		break;  	}  	case '=': {  		alt17 = 18;  		break;  	}  	default: {  		alt17 = 17;  		break;  	}  	}  	break;  }  case '>': {  	switch (input.LA (2)) {  	case '>': {  		int LA17_31 = input.LA (3);  		if ((LA17_31 == '>')) {  			alt17 = 7;  		} else {  			alt17 = 6;  		}  		break;  	}  	case '=': {  		alt17 = 16;  		break;  	}  	default: {  		alt17 = 15;  		break;  	}  	}  	break;  }  case '^': {  	alt17 = 8;  	break;  }  case '!': {  	int LA17_8 = input.LA (2);  	if ((LA17_8 == '=')) {  		alt17 = 19;  	} else {  		alt17 = 10;  	}  	break;  }  case ':': {  	alt17 = 12;  	break;  }  case ''': {  	alt17 = 13;  	break;  }  case '=': {  	alt17 = 14;  	break;  }  case '?': {  	alt17 = 20;  	break;  }  case '/': {  	alt17 = 21;  	break;  }  case '.': {  	int LA17_14 = input.LA (2);  	if (((LA17_14 >= '0' && LA17_14 <= '9'))) {  		alt17 = 30;  	} else {  		alt17 = 22;  	}  	break;  }  case '(': {  	alt17 = 23;  	break;  }  case '%': {  	alt17 = 24;  	break;  }  case '*': {  	alt17 = 25;  	break;  }  case ')': {  	alt17 = 26;  	break;  }  case '-': {  	alt17 = 27;  	break;  }  case 'A':  case 'B':  case 'C':  case 'D':  case 'E':  case 'F':  case 'G':  case 'H':  case 'I':  case 'J':  case 'K':  case 'L':  case 'M':  case 'N':  case 'O':  case 'P':  case 'Q':  case 'R':  case 'S':  case 'T':  case 'U':  case 'V':  case 'W':  case 'X':  case 'Y':  case 'Z':  case '_':  case 'a':  case 'b':  case 'c':  case 'd':  case 'e':  case 'f':  case 'g':  case 'h':  case 'i':  case 'j':  case 'k':  case 'l':  case 'm':  case 'n':  case 'o':  case 'p':  case 'q':  case 'r':  case 's':  case 't':  case 'u':  case 'v':  case 'w':  case 'x':  case 'y':  case 'z': {  	alt17 = 28;  	break;  }  case '\t':  case '\n':  case '\r':  case ' ': {  	alt17 = 29;  	break;  }  case '0': {  	switch (input.LA (2)) {  	case 'X':  	case 'x': {  		alt17 = 32;  		break;  	}  	case '0':  	case '1':  	case '2':  	case '3':  	case '4':  	case '5':  	case '6':  	case '7': {  		alt17 = 31;  		break;  	}  	default: {  		alt17 = 30;  		break;  	}  	}  	break;  }  case '1':  case '2':  case '3':  case '4':  case '5':  case '6':  case '7':  case '8':  case '9': {  	alt17 = 30;  	break;  }  default: {  	NoViableAltException nvae = new NoViableAltException (string.Empty' 17' 0' input);  	throw nvae;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA (1)) {  case '+': {  	alt17 = 1;  	break;  }  case '&': {  	int LA17_2 = input.LA (2);  	if ((LA17_2 == '&')) {  		alt17 = 9;  	} else {  		alt17 = 2;  	}  	break;  }  case '~': {  	alt17 = 3;  	break;  }  case '|': {  	int LA17_4 = input.LA (2);  	if ((LA17_4 == '|')) {  		alt17 = 11;  	} else {  		alt17 = 4;  	}  	break;  }  case '<': {  	switch (input.LA (2)) {  	case '<': {  		alt17 = 5;  		break;  	}  	case '=': {  		alt17 = 18;  		break;  	}  	default: {  		alt17 = 17;  		break;  	}  	}  	break;  }  case '>': {  	switch (input.LA (2)) {  	case '>': {  		int LA17_31 = input.LA (3);  		if ((LA17_31 == '>')) {  			alt17 = 7;  		} else {  			alt17 = 6;  		}  		break;  	}  	case '=': {  		alt17 = 16;  		break;  	}  	default: {  		alt17 = 15;  		break;  	}  	}  	break;  }  case '^': {  	alt17 = 8;  	break;  }  case '!': {  	int LA17_8 = input.LA (2);  	if ((LA17_8 == '=')) {  		alt17 = 19;  	} else {  		alt17 = 10;  	}  	break;  }  case ':': {  	alt17 = 12;  	break;  }  case ''': {  	alt17 = 13;  	break;  }  case '=': {  	alt17 = 14;  	break;  }  case '?': {  	alt17 = 20;  	break;  }  case '/': {  	alt17 = 21;  	break;  }  case '.': {  	int LA17_14 = input.LA (2);  	if (((LA17_14 >= '0' && LA17_14 <= '9'))) {  		alt17 = 30;  	} else {  		alt17 = 22;  	}  	break;  }  case '(': {  	alt17 = 23;  	break;  }  case '%': {  	alt17 = 24;  	break;  }  case '*': {  	alt17 = 25;  	break;  }  case ')': {  	alt17 = 26;  	break;  }  case '-': {  	alt17 = 27;  	break;  }  case 'A':  case 'B':  case 'C':  case 'D':  case 'E':  case 'F':  case 'G':  case 'H':  case 'I':  case 'J':  case 'K':  case 'L':  case 'M':  case 'N':  case 'O':  case 'P':  case 'Q':  case 'R':  case 'S':  case 'T':  case 'U':  case 'V':  case 'W':  case 'X':  case 'Y':  case 'Z':  case '_':  case 'a':  case 'b':  case 'c':  case 'd':  case 'e':  case 'f':  case 'g':  case 'h':  case 'i':  case 'j':  case 'k':  case 'l':  case 'm':  case 'n':  case 'o':  case 'p':  case 'q':  case 'r':  case 's':  case 't':  case 'u':  case 'v':  case 'w':  case 'x':  case 'y':  case 'z': {  	alt17 = 28;  	break;  }  case '\t':  case '\n':  case '\r':  case ' ': {  	alt17 = 29;  	break;  }  case '0': {  	switch (input.LA (2)) {  	case 'X':  	case 'x': {  		alt17 = 32;  		break;  	}  	case '0':  	case '1':  	case '2':  	case '3':  	case '4':  	case '5':  	case '6':  	case '7': {  		alt17 = 31;  		break;  	}  	default: {  		alt17 = 30;  		break;  	}  	}  	break;  }  case '1':  case '2':  case '3':  case '4':  case '5':  case '6':  case '7':  case '8':  case '9': {  	alt17 = 30;  	break;  }  default: {  	NoViableAltException nvae = new NoViableAltException (string.Empty' 17' 0' input);  	throw nvae;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA (1)) {  case '+': {  	alt17 = 1;  	break;  }  case '&': {  	int LA17_2 = input.LA (2);  	if ((LA17_2 == '&')) {  		alt17 = 9;  	} else {  		alt17 = 2;  	}  	break;  }  case '~': {  	alt17 = 3;  	break;  }  case '|': {  	int LA17_4 = input.LA (2);  	if ((LA17_4 == '|')) {  		alt17 = 11;  	} else {  		alt17 = 4;  	}  	break;  }  case '<': {  	switch (input.LA (2)) {  	case '<': {  		alt17 = 5;  		break;  	}  	case '=': {  		alt17 = 18;  		break;  	}  	default: {  		alt17 = 17;  		break;  	}  	}  	break;  }  case '>': {  	switch (input.LA (2)) {  	case '>': {  		int LA17_31 = input.LA (3);  		if ((LA17_31 == '>')) {  			alt17 = 7;  		} else {  			alt17 = 6;  		}  		break;  	}  	case '=': {  		alt17 = 16;  		break;  	}  	default: {  		alt17 = 15;  		break;  	}  	}  	break;  }  case '^': {  	alt17 = 8;  	break;  }  case '!': {  	int LA17_8 = input.LA (2);  	if ((LA17_8 == '=')) {  		alt17 = 19;  	} else {  		alt17 = 10;  	}  	break;  }  case ':': {  	alt17 = 12;  	break;  }  case ''': {  	alt17 = 13;  	break;  }  case '=': {  	alt17 = 14;  	break;  }  case '?': {  	alt17 = 20;  	break;  }  case '/': {  	alt17 = 21;  	break;  }  case '.': {  	int LA17_14 = input.LA (2);  	if (((LA17_14 >= '0' && LA17_14 <= '9'))) {  		alt17 = 30;  	} else {  		alt17 = 22;  	}  	break;  }  case '(': {  	alt17 = 23;  	break;  }  case '%': {  	alt17 = 24;  	break;  }  case '*': {  	alt17 = 25;  	break;  }  case ')': {  	alt17 = 26;  	break;  }  case '-': {  	alt17 = 27;  	break;  }  case 'A':  case 'B':  case 'C':  case 'D':  case 'E':  case 'F':  case 'G':  case 'H':  case 'I':  case 'J':  case 'K':  case 'L':  case 'M':  case 'N':  case 'O':  case 'P':  case 'Q':  case 'R':  case 'S':  case 'T':  case 'U':  case 'V':  case 'W':  case 'X':  case 'Y':  case 'Z':  case '_':  case 'a':  case 'b':  case 'c':  case 'd':  case 'e':  case 'f':  case 'g':  case 'h':  case 'i':  case 'j':  case 'k':  case 'l':  case 'm':  case 'n':  case 'o':  case 'p':  case 'q':  case 'r':  case 's':  case 't':  case 'u':  case 'v':  case 'w':  case 'x':  case 'y':  case 'z': {  	alt17 = 28;  	break;  }  case '\t':  case '\n':  case '\r':  case ' ': {  	alt17 = 29;  	break;  }  case '0': {  	switch (input.LA (2)) {  	case 'X':  	case 'x': {  		alt17 = 32;  		break;  	}  	case '0':  	case '1':  	case '2':  	case '3':  	case '4':  	case '5':  	case '6':  	case '7': {  		alt17 = 31;  		break;  	}  	default: {  		alt17 = 30;  		break;  	}  	}  	break;  }  case '1':  case '2':  case '3':  case '4':  case '5':  case '6':  case '7':  case '8':  case '9': {  	alt17 = 30;  	break;  }  default: {  	NoViableAltException nvae = new NoViableAltException (string.Empty' 17' 0' input);  	throw nvae;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA (1)) {  case '+': {  	alt17 = 1;  	break;  }  case '&': {  	int LA17_2 = input.LA (2);  	if ((LA17_2 == '&')) {  		alt17 = 9;  	} else {  		alt17 = 2;  	}  	break;  }  case '~': {  	alt17 = 3;  	break;  }  case '|': {  	int LA17_4 = input.LA (2);  	if ((LA17_4 == '|')) {  		alt17 = 11;  	} else {  		alt17 = 4;  	}  	break;  }  case '<': {  	switch (input.LA (2)) {  	case '<': {  		alt17 = 5;  		break;  	}  	case '=': {  		alt17 = 18;  		break;  	}  	default: {  		alt17 = 17;  		break;  	}  	}  	break;  }  case '>': {  	switch (input.LA (2)) {  	case '>': {  		int LA17_31 = input.LA (3);  		if ((LA17_31 == '>')) {  			alt17 = 7;  		} else {  			alt17 = 6;  		}  		break;  	}  	case '=': {  		alt17 = 16;  		break;  	}  	default: {  		alt17 = 15;  		break;  	}  	}  	break;  }  case '^': {  	alt17 = 8;  	break;  }  case '!': {  	int LA17_8 = input.LA (2);  	if ((LA17_8 == '=')) {  		alt17 = 19;  	} else {  		alt17 = 10;  	}  	break;  }  case ':': {  	alt17 = 12;  	break;  }  case ''': {  	alt17 = 13;  	break;  }  case '=': {  	alt17 = 14;  	break;  }  case '?': {  	alt17 = 20;  	break;  }  case '/': {  	alt17 = 21;  	break;  }  case '.': {  	int LA17_14 = input.LA (2);  	if (((LA17_14 >= '0' && LA17_14 <= '9'))) {  		alt17 = 30;  	} else {  		alt17 = 22;  	}  	break;  }  case '(': {  	alt17 = 23;  	break;  }  case '%': {  	alt17 = 24;  	break;  }  case '*': {  	alt17 = 25;  	break;  }  case ')': {  	alt17 = 26;  	break;  }  case '-': {  	alt17 = 27;  	break;  }  case 'A':  case 'B':  case 'C':  case 'D':  case 'E':  case 'F':  case 'G':  case 'H':  case 'I':  case 'J':  case 'K':  case 'L':  case 'M':  case 'N':  case 'O':  case 'P':  case 'Q':  case 'R':  case 'S':  case 'T':  case 'U':  case 'V':  case 'W':  case 'X':  case 'Y':  case 'Z':  case '_':  case 'a':  case 'b':  case 'c':  case 'd':  case 'e':  case 'f':  case 'g':  case 'h':  case 'i':  case 'j':  case 'k':  case 'l':  case 'm':  case 'n':  case 'o':  case 'p':  case 'q':  case 'r':  case 's':  case 't':  case 'u':  case 'v':  case 'w':  case 'x':  case 'y':  case 'z': {  	alt17 = 28;  	break;  }  case '\t':  case '\n':  case '\r':  case ' ': {  	alt17 = 29;  	break;  }  case '0': {  	switch (input.LA (2)) {  	case 'X':  	case 'x': {  		alt17 = 32;  		break;  	}  	case '0':  	case '1':  	case '2':  	case '3':  	case '4':  	case '5':  	case '6':  	case '7': {  		alt17 = 31;  		break;  	}  	default: {  		alt17 = 30;  		break;  	}  	}  	break;  }  case '1':  case '2':  case '3':  case '4':  case '5':  case '6':  case '7':  case '8':  case '9': {  	alt17 = 30;  	break;  }  default: {  	NoViableAltException nvae = new NoViableAltException (string.Empty' 17' 0' input);  	throw nvae;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA (1)) {  case '+': {  	alt17 = 1;  	break;  }  case '&': {  	int LA17_2 = input.LA (2);  	if ((LA17_2 == '&')) {  		alt17 = 9;  	} else {  		alt17 = 2;  	}  	break;  }  case '~': {  	alt17 = 3;  	break;  }  case '|': {  	int LA17_4 = input.LA (2);  	if ((LA17_4 == '|')) {  		alt17 = 11;  	} else {  		alt17 = 4;  	}  	break;  }  case '<': {  	switch (input.LA (2)) {  	case '<': {  		alt17 = 5;  		break;  	}  	case '=': {  		alt17 = 18;  		break;  	}  	default: {  		alt17 = 17;  		break;  	}  	}  	break;  }  case '>': {  	switch (input.LA (2)) {  	case '>': {  		int LA17_31 = input.LA (3);  		if ((LA17_31 == '>')) {  			alt17 = 7;  		} else {  			alt17 = 6;  		}  		break;  	}  	case '=': {  		alt17 = 16;  		break;  	}  	default: {  		alt17 = 15;  		break;  	}  	}  	break;  }  case '^': {  	alt17 = 8;  	break;  }  case '!': {  	int LA17_8 = input.LA (2);  	if ((LA17_8 == '=')) {  		alt17 = 19;  	} else {  		alt17 = 10;  	}  	break;  }  case ':': {  	alt17 = 12;  	break;  }  case ''': {  	alt17 = 13;  	break;  }  case '=': {  	alt17 = 14;  	break;  }  case '?': {  	alt17 = 20;  	break;  }  case '/': {  	alt17 = 21;  	break;  }  case '.': {  	int LA17_14 = input.LA (2);  	if (((LA17_14 >= '0' && LA17_14 <= '9'))) {  		alt17 = 30;  	} else {  		alt17 = 22;  	}  	break;  }  case '(': {  	alt17 = 23;  	break;  }  case '%': {  	alt17 = 24;  	break;  }  case '*': {  	alt17 = 25;  	break;  }  case ')': {  	alt17 = 26;  	break;  }  case '-': {  	alt17 = 27;  	break;  }  case 'A':  case 'B':  case 'C':  case 'D':  case 'E':  case 'F':  case 'G':  case 'H':  case 'I':  case 'J':  case 'K':  case 'L':  case 'M':  case 'N':  case 'O':  case 'P':  case 'Q':  case 'R':  case 'S':  case 'T':  case 'U':  case 'V':  case 'W':  case 'X':  case 'Y':  case 'Z':  case '_':  case 'a':  case 'b':  case 'c':  case 'd':  case 'e':  case 'f':  case 'g':  case 'h':  case 'i':  case 'j':  case 'k':  case 'l':  case 'm':  case 'n':  case 'o':  case 'p':  case 'q':  case 'r':  case 's':  case 't':  case 'u':  case 'v':  case 'w':  case 'x':  case 'y':  case 'z': {  	alt17 = 28;  	break;  }  case '\t':  case '\n':  case '\r':  case ' ': {  	alt17 = 29;  	break;  }  case '0': {  	switch (input.LA (2)) {  	case 'X':  	case 'x': {  		alt17 = 32;  		break;  	}  	case '0':  	case '1':  	case '2':  	case '3':  	case '4':  	case '5':  	case '6':  	case '7': {  		alt17 = 31;  		break;  	}  	default: {  		alt17 = 30;  		break;  	}  	}  	break;  }  case '1':  case '2':  case '3':  case '4':  case '5':  case '6':  case '7':  case '8':  case '9': {  	alt17 = 30;  	break;  }  default: {  	NoViableAltException nvae = new NoViableAltException (string.Empty' 17' 0' input);  	throw nvae;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA (1)) {  case '+': {  	alt17 = 1;  	break;  }  case '&': {  	int LA17_2 = input.LA (2);  	if ((LA17_2 == '&')) {  		alt17 = 9;  	} else {  		alt17 = 2;  	}  	break;  }  case '~': {  	alt17 = 3;  	break;  }  case '|': {  	int LA17_4 = input.LA (2);  	if ((LA17_4 == '|')) {  		alt17 = 11;  	} else {  		alt17 = 4;  	}  	break;  }  case '<': {  	switch (input.LA (2)) {  	case '<': {  		alt17 = 5;  		break;  	}  	case '=': {  		alt17 = 18;  		break;  	}  	default: {  		alt17 = 17;  		break;  	}  	}  	break;  }  case '>': {  	switch (input.LA (2)) {  	case '>': {  		int LA17_31 = input.LA (3);  		if ((LA17_31 == '>')) {  			alt17 = 7;  		} else {  			alt17 = 6;  		}  		break;  	}  	case '=': {  		alt17 = 16;  		break;  	}  	default: {  		alt17 = 15;  		break;  	}  	}  	break;  }  case '^': {  	alt17 = 8;  	break;  }  case '!': {  	int LA17_8 = input.LA (2);  	if ((LA17_8 == '=')) {  		alt17 = 19;  	} else {  		alt17 = 10;  	}  	break;  }  case ':': {  	alt17 = 12;  	break;  }  case ''': {  	alt17 = 13;  	break;  }  case '=': {  	alt17 = 14;  	break;  }  case '?': {  	alt17 = 20;  	break;  }  case '/': {  	alt17 = 21;  	break;  }  case '.': {  	int LA17_14 = input.LA (2);  	if (((LA17_14 >= '0' && LA17_14 <= '9'))) {  		alt17 = 30;  	} else {  		alt17 = 22;  	}  	break;  }  case '(': {  	alt17 = 23;  	break;  }  case '%': {  	alt17 = 24;  	break;  }  case '*': {  	alt17 = 25;  	break;  }  case ')': {  	alt17 = 26;  	break;  }  case '-': {  	alt17 = 27;  	break;  }  case 'A':  case 'B':  case 'C':  case 'D':  case 'E':  case 'F':  case 'G':  case 'H':  case 'I':  case 'J':  case 'K':  case 'L':  case 'M':  case 'N':  case 'O':  case 'P':  case 'Q':  case 'R':  case 'S':  case 'T':  case 'U':  case 'V':  case 'W':  case 'X':  case 'Y':  case 'Z':  case '_':  case 'a':  case 'b':  case 'c':  case 'd':  case 'e':  case 'f':  case 'g':  case 'h':  case 'i':  case 'j':  case 'k':  case 'l':  case 'm':  case 'n':  case 'o':  case 'p':  case 'q':  case 'r':  case 's':  case 't':  case 'u':  case 'v':  case 'w':  case 'x':  case 'y':  case 'z': {  	alt17 = 28;  	break;  }  case '\t':  case '\n':  case '\r':  case ' ': {  	alt17 = 29;  	break;  }  case '0': {  	switch (input.LA (2)) {  	case 'X':  	case 'x': {  		alt17 = 32;  		break;  	}  	case '0':  	case '1':  	case '2':  	case '3':  	case '4':  	case '5':  	case '6':  	case '7': {  		alt17 = 31;  		break;  	}  	default: {  		alt17 = 30;  		break;  	}  	}  	break;  }  case '1':  case '2':  case '3':  case '4':  case '5':  case '6':  case '7':  case '8':  case '9': {  	alt17 = 30;  	break;  }  default: {  	NoViableAltException nvae = new NoViableAltException (string.Empty' 17' 0' input);  	throw nvae;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA (1)) {  case '+': {  	alt17 = 1;  	break;  }  case '&': {  	int LA17_2 = input.LA (2);  	if ((LA17_2 == '&')) {  		alt17 = 9;  	} else {  		alt17 = 2;  	}  	break;  }  case '~': {  	alt17 = 3;  	break;  }  case '|': {  	int LA17_4 = input.LA (2);  	if ((LA17_4 == '|')) {  		alt17 = 11;  	} else {  		alt17 = 4;  	}  	break;  }  case '<': {  	switch (input.LA (2)) {  	case '<': {  		alt17 = 5;  		break;  	}  	case '=': {  		alt17 = 18;  		break;  	}  	default: {  		alt17 = 17;  		break;  	}  	}  	break;  }  case '>': {  	switch (input.LA (2)) {  	case '>': {  		int LA17_31 = input.LA (3);  		if ((LA17_31 == '>')) {  			alt17 = 7;  		} else {  			alt17 = 6;  		}  		break;  	}  	case '=': {  		alt17 = 16;  		break;  	}  	default: {  		alt17 = 15;  		break;  	}  	}  	break;  }  case '^': {  	alt17 = 8;  	break;  }  case '!': {  	int LA17_8 = input.LA (2);  	if ((LA17_8 == '=')) {  		alt17 = 19;  	} else {  		alt17 = 10;  	}  	break;  }  case ':': {  	alt17 = 12;  	break;  }  case ''': {  	alt17 = 13;  	break;  }  case '=': {  	alt17 = 14;  	break;  }  case '?': {  	alt17 = 20;  	break;  }  case '/': {  	alt17 = 21;  	break;  }  case '.': {  	int LA17_14 = input.LA (2);  	if (((LA17_14 >= '0' && LA17_14 <= '9'))) {  		alt17 = 30;  	} else {  		alt17 = 22;  	}  	break;  }  case '(': {  	alt17 = 23;  	break;  }  case '%': {  	alt17 = 24;  	break;  }  case '*': {  	alt17 = 25;  	break;  }  case ')': {  	alt17 = 26;  	break;  }  case '-': {  	alt17 = 27;  	break;  }  case 'A':  case 'B':  case 'C':  case 'D':  case 'E':  case 'F':  case 'G':  case 'H':  case 'I':  case 'J':  case 'K':  case 'L':  case 'M':  case 'N':  case 'O':  case 'P':  case 'Q':  case 'R':  case 'S':  case 'T':  case 'U':  case 'V':  case 'W':  case 'X':  case 'Y':  case 'Z':  case '_':  case 'a':  case 'b':  case 'c':  case 'd':  case 'e':  case 'f':  case 'g':  case 'h':  case 'i':  case 'j':  case 'k':  case 'l':  case 'm':  case 'n':  case 'o':  case 'p':  case 'q':  case 'r':  case 's':  case 't':  case 'u':  case 'v':  case 'w':  case 'x':  case 'y':  case 'z': {  	alt17 = 28;  	break;  }  case '\t':  case '\n':  case '\r':  case ' ': {  	alt17 = 29;  	break;  }  case '0': {  	switch (input.LA (2)) {  	case 'X':  	case 'x': {  		alt17 = 32;  		break;  	}  	case '0':  	case '1':  	case '2':  	case '3':  	case '4':  	case '5':  	case '6':  	case '7': {  		alt17 = 31;  		break;  	}  	default: {  		alt17 = 30;  		break;  	}  	}  	break;  }  case '1':  case '2':  case '3':  case '4':  case '5':  case '6':  case '7':  case '8':  case '9': {  	alt17 = 30;  	break;  }  default: {  	NoViableAltException nvae = new NoViableAltException (string.Empty' 17' 0' input);  	throw nvae;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA (1)) {  case '+': {  	alt17 = 1;  	break;  }  case '&': {  	int LA17_2 = input.LA (2);  	if ((LA17_2 == '&')) {  		alt17 = 9;  	} else {  		alt17 = 2;  	}  	break;  }  case '~': {  	alt17 = 3;  	break;  }  case '|': {  	int LA17_4 = input.LA (2);  	if ((LA17_4 == '|')) {  		alt17 = 11;  	} else {  		alt17 = 4;  	}  	break;  }  case '<': {  	switch (input.LA (2)) {  	case '<': {  		alt17 = 5;  		break;  	}  	case '=': {  		alt17 = 18;  		break;  	}  	default: {  		alt17 = 17;  		break;  	}  	}  	break;  }  case '>': {  	switch (input.LA (2)) {  	case '>': {  		int LA17_31 = input.LA (3);  		if ((LA17_31 == '>')) {  			alt17 = 7;  		} else {  			alt17 = 6;  		}  		break;  	}  	case '=': {  		alt17 = 16;  		break;  	}  	default: {  		alt17 = 15;  		break;  	}  	}  	break;  }  case '^': {  	alt17 = 8;  	break;  }  case '!': {  	int LA17_8 = input.LA (2);  	if ((LA17_8 == '=')) {  		alt17 = 19;  	} else {  		alt17 = 10;  	}  	break;  }  case ':': {  	alt17 = 12;  	break;  }  case ''': {  	alt17 = 13;  	break;  }  case '=': {  	alt17 = 14;  	break;  }  case '?': {  	alt17 = 20;  	break;  }  case '/': {  	alt17 = 21;  	break;  }  case '.': {  	int LA17_14 = input.LA (2);  	if (((LA17_14 >= '0' && LA17_14 <= '9'))) {  		alt17 = 30;  	} else {  		alt17 = 22;  	}  	break;  }  case '(': {  	alt17 = 23;  	break;  }  case '%': {  	alt17 = 24;  	break;  }  case '*': {  	alt17 = 25;  	break;  }  case ')': {  	alt17 = 26;  	break;  }  case '-': {  	alt17 = 27;  	break;  }  case 'A':  case 'B':  case 'C':  case 'D':  case 'E':  case 'F':  case 'G':  case 'H':  case 'I':  case 'J':  case 'K':  case 'L':  case 'M':  case 'N':  case 'O':  case 'P':  case 'Q':  case 'R':  case 'S':  case 'T':  case 'U':  case 'V':  case 'W':  case 'X':  case 'Y':  case 'Z':  case '_':  case 'a':  case 'b':  case 'c':  case 'd':  case 'e':  case 'f':  case 'g':  case 'h':  case 'i':  case 'j':  case 'k':  case 'l':  case 'm':  case 'n':  case 'o':  case 'p':  case 'q':  case 'r':  case 's':  case 't':  case 'u':  case 'v':  case 'w':  case 'x':  case 'y':  case 'z': {  	alt17 = 28;  	break;  }  case '\t':  case '\n':  case '\r':  case ' ': {  	alt17 = 29;  	break;  }  case '0': {  	switch (input.LA (2)) {  	case 'X':  	case 'x': {  		alt17 = 32;  		break;  	}  	case '0':  	case '1':  	case '2':  	case '3':  	case '4':  	case '5':  	case '6':  	case '7': {  		alt17 = 31;  		break;  	}  	default: {  		alt17 = 30;  		break;  	}  	}  	break;  }  case '1':  case '2':  case '3':  case '4':  case '5':  case '6':  case '7':  case '8':  case '9': {  	alt17 = 30;  	break;  }  default: {  	NoViableAltException nvae = new NoViableAltException (string.Empty' 17' 0' input);  	throw nvae;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA (1)) {  case '+': {  	alt17 = 1;  	break;  }  case '&': {  	int LA17_2 = input.LA (2);  	if ((LA17_2 == '&')) {  		alt17 = 9;  	} else {  		alt17 = 2;  	}  	break;  }  case '~': {  	alt17 = 3;  	break;  }  case '|': {  	int LA17_4 = input.LA (2);  	if ((LA17_4 == '|')) {  		alt17 = 11;  	} else {  		alt17 = 4;  	}  	break;  }  case '<': {  	switch (input.LA (2)) {  	case '<': {  		alt17 = 5;  		break;  	}  	case '=': {  		alt17 = 18;  		break;  	}  	default: {  		alt17 = 17;  		break;  	}  	}  	break;  }  case '>': {  	switch (input.LA (2)) {  	case '>': {  		int LA17_31 = input.LA (3);  		if ((LA17_31 == '>')) {  			alt17 = 7;  		} else {  			alt17 = 6;  		}  		break;  	}  	case '=': {  		alt17 = 16;  		break;  	}  	default: {  		alt17 = 15;  		break;  	}  	}  	break;  }  case '^': {  	alt17 = 8;  	break;  }  case '!': {  	int LA17_8 = input.LA (2);  	if ((LA17_8 == '=')) {  		alt17 = 19;  	} else {  		alt17 = 10;  	}  	break;  }  case ':': {  	alt17 = 12;  	break;  }  case ''': {  	alt17 = 13;  	break;  }  case '=': {  	alt17 = 14;  	break;  }  case '?': {  	alt17 = 20;  	break;  }  case '/': {  	alt17 = 21;  	break;  }  case '.': {  	int LA17_14 = input.LA (2);  	if (((LA17_14 >= '0' && LA17_14 <= '9'))) {  		alt17 = 30;  	} else {  		alt17 = 22;  	}  	break;  }  case '(': {  	alt17 = 23;  	break;  }  case '%': {  	alt17 = 24;  	break;  }  case '*': {  	alt17 = 25;  	break;  }  case ')': {  	alt17 = 26;  	break;  }  case '-': {  	alt17 = 27;  	break;  }  case 'A':  case 'B':  case 'C':  case 'D':  case 'E':  case 'F':  case 'G':  case 'H':  case 'I':  case 'J':  case 'K':  case 'L':  case 'M':  case 'N':  case 'O':  case 'P':  case 'Q':  case 'R':  case 'S':  case 'T':  case 'U':  case 'V':  case 'W':  case 'X':  case 'Y':  case 'Z':  case '_':  case 'a':  case 'b':  case 'c':  case 'd':  case 'e':  case 'f':  case 'g':  case 'h':  case 'i':  case 'j':  case 'k':  case 'l':  case 'm':  case 'n':  case 'o':  case 'p':  case 'q':  case 'r':  case 's':  case 't':  case 'u':  case 'v':  case 'w':  case 'x':  case 'y':  case 'z': {  	alt17 = 28;  	break;  }  case '\t':  case '\n':  case '\r':  case ' ': {  	alt17 = 29;  	break;  }  case '0': {  	switch (input.LA (2)) {  	case 'X':  	case 'x': {  		alt17 = 32;  		break;  	}  	case '0':  	case '1':  	case '2':  	case '3':  	case '4':  	case '5':  	case '6':  	case '7': {  		alt17 = 31;  		break;  	}  	default: {  		alt17 = 30;  		break;  	}  	}  	break;  }  case '1':  case '2':  case '3':  case '4':  case '5':  case '6':  case '7':  case '8':  case '9': {  	alt17 = 30;  	break;  }  default: {  	NoViableAltException nvae = new NoViableAltException (string.Empty' 17' 0' input);  	throw nvae;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA (1)) {  case '+': {  	alt17 = 1;  	break;  }  case '&': {  	int LA17_2 = input.LA (2);  	if ((LA17_2 == '&')) {  		alt17 = 9;  	} else {  		alt17 = 2;  	}  	break;  }  case '~': {  	alt17 = 3;  	break;  }  case '|': {  	int LA17_4 = input.LA (2);  	if ((LA17_4 == '|')) {  		alt17 = 11;  	} else {  		alt17 = 4;  	}  	break;  }  case '<': {  	switch (input.LA (2)) {  	case '<': {  		alt17 = 5;  		break;  	}  	case '=': {  		alt17 = 18;  		break;  	}  	default: {  		alt17 = 17;  		break;  	}  	}  	break;  }  case '>': {  	switch (input.LA (2)) {  	case '>': {  		int LA17_31 = input.LA (3);  		if ((LA17_31 == '>')) {  			alt17 = 7;  		} else {  			alt17 = 6;  		}  		break;  	}  	case '=': {  		alt17 = 16;  		break;  	}  	default: {  		alt17 = 15;  		break;  	}  	}  	break;  }  case '^': {  	alt17 = 8;  	break;  }  case '!': {  	int LA17_8 = input.LA (2);  	if ((LA17_8 == '=')) {  		alt17 = 19;  	} else {  		alt17 = 10;  	}  	break;  }  case ':': {  	alt17 = 12;  	break;  }  case ''': {  	alt17 = 13;  	break;  }  case '=': {  	alt17 = 14;  	break;  }  case '?': {  	alt17 = 20;  	break;  }  case '/': {  	alt17 = 21;  	break;  }  case '.': {  	int LA17_14 = input.LA (2);  	if (((LA17_14 >= '0' && LA17_14 <= '9'))) {  		alt17 = 30;  	} else {  		alt17 = 22;  	}  	break;  }  case '(': {  	alt17 = 23;  	break;  }  case '%': {  	alt17 = 24;  	break;  }  case '*': {  	alt17 = 25;  	break;  }  case ')': {  	alt17 = 26;  	break;  }  case '-': {  	alt17 = 27;  	break;  }  case 'A':  case 'B':  case 'C':  case 'D':  case 'E':  case 'F':  case 'G':  case 'H':  case 'I':  case 'J':  case 'K':  case 'L':  case 'M':  case 'N':  case 'O':  case 'P':  case 'Q':  case 'R':  case 'S':  case 'T':  case 'U':  case 'V':  case 'W':  case 'X':  case 'Y':  case 'Z':  case '_':  case 'a':  case 'b':  case 'c':  case 'd':  case 'e':  case 'f':  case 'g':  case 'h':  case 'i':  case 'j':  case 'k':  case 'l':  case 'm':  case 'n':  case 'o':  case 'p':  case 'q':  case 'r':  case 's':  case 't':  case 'u':  case 'v':  case 'w':  case 'x':  case 'y':  case 'z': {  	alt17 = 28;  	break;  }  case '\t':  case '\n':  case '\r':  case ' ': {  	alt17 = 29;  	break;  }  case '0': {  	switch (input.LA (2)) {  	case 'X':  	case 'x': {  		alt17 = 32;  		break;  	}  	case '0':  	case '1':  	case '2':  	case '3':  	case '4':  	case '5':  	case '6':  	case '7': {  		alt17 = 31;  		break;  	}  	default: {  		alt17 = 30;  		break;  	}  	}  	break;  }  case '1':  case '2':  case '3':  case '4':  case '5':  case '6':  case '7':  case '8':  case '9': {  	alt17 = 30;  	break;  }  default: {  	NoViableAltException nvae = new NoViableAltException (string.Empty' 17' 0' input);  	throw nvae;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA (1)) {  case '+': {  	alt17 = 1;  	break;  }  case '&': {  	int LA17_2 = input.LA (2);  	if ((LA17_2 == '&')) {  		alt17 = 9;  	} else {  		alt17 = 2;  	}  	break;  }  case '~': {  	alt17 = 3;  	break;  }  case '|': {  	int LA17_4 = input.LA (2);  	if ((LA17_4 == '|')) {  		alt17 = 11;  	} else {  		alt17 = 4;  	}  	break;  }  case '<': {  	switch (input.LA (2)) {  	case '<': {  		alt17 = 5;  		break;  	}  	case '=': {  		alt17 = 18;  		break;  	}  	default: {  		alt17 = 17;  		break;  	}  	}  	break;  }  case '>': {  	switch (input.LA (2)) {  	case '>': {  		int LA17_31 = input.LA (3);  		if ((LA17_31 == '>')) {  			alt17 = 7;  		} else {  			alt17 = 6;  		}  		break;  	}  	case '=': {  		alt17 = 16;  		break;  	}  	default: {  		alt17 = 15;  		break;  	}  	}  	break;  }  case '^': {  	alt17 = 8;  	break;  }  case '!': {  	int LA17_8 = input.LA (2);  	if ((LA17_8 == '=')) {  		alt17 = 19;  	} else {  		alt17 = 10;  	}  	break;  }  case ':': {  	alt17 = 12;  	break;  }  case ''': {  	alt17 = 13;  	break;  }  case '=': {  	alt17 = 14;  	break;  }  case '?': {  	alt17 = 20;  	break;  }  case '/': {  	alt17 = 21;  	break;  }  case '.': {  	int LA17_14 = input.LA (2);  	if (((LA17_14 >= '0' && LA17_14 <= '9'))) {  		alt17 = 30;  	} else {  		alt17 = 22;  	}  	break;  }  case '(': {  	alt17 = 23;  	break;  }  case '%': {  	alt17 = 24;  	break;  }  case '*': {  	alt17 = 25;  	break;  }  case ')': {  	alt17 = 26;  	break;  }  case '-': {  	alt17 = 27;  	break;  }  case 'A':  case 'B':  case 'C':  case 'D':  case 'E':  case 'F':  case 'G':  case 'H':  case 'I':  case 'J':  case 'K':  case 'L':  case 'M':  case 'N':  case 'O':  case 'P':  case 'Q':  case 'R':  case 'S':  case 'T':  case 'U':  case 'V':  case 'W':  case 'X':  case 'Y':  case 'Z':  case '_':  case 'a':  case 'b':  case 'c':  case 'd':  case 'e':  case 'f':  case 'g':  case 'h':  case 'i':  case 'j':  case 'k':  case 'l':  case 'm':  case 'n':  case 'o':  case 'p':  case 'q':  case 'r':  case 's':  case 't':  case 'u':  case 'v':  case 'w':  case 'x':  case 'y':  case 'z': {  	alt17 = 28;  	break;  }  case '\t':  case '\n':  case '\r':  case ' ': {  	alt17 = 29;  	break;  }  case '0': {  	switch (input.LA (2)) {  	case 'X':  	case 'x': {  		alt17 = 32;  		break;  	}  	case '0':  	case '1':  	case '2':  	case '3':  	case '4':  	case '5':  	case '6':  	case '7': {  		alt17 = 31;  		break;  	}  	default: {  		alt17 = 30;  		break;  	}  	}  	break;  }  case '1':  case '2':  case '3':  case '4':  case '5':  case '6':  case '7':  case '8':  case '9': {  	alt17 = 30;  	break;  }  default: {  	NoViableAltException nvae = new NoViableAltException (string.Empty' 17' 0' input);  	throw nvae;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA (1)) {  case '+': {  	alt17 = 1;  	break;  }  case '&': {  	int LA17_2 = input.LA (2);  	if ((LA17_2 == '&')) {  		alt17 = 9;  	} else {  		alt17 = 2;  	}  	break;  }  case '~': {  	alt17 = 3;  	break;  }  case '|': {  	int LA17_4 = input.LA (2);  	if ((LA17_4 == '|')) {  		alt17 = 11;  	} else {  		alt17 = 4;  	}  	break;  }  case '<': {  	switch (input.LA (2)) {  	case '<': {  		alt17 = 5;  		break;  	}  	case '=': {  		alt17 = 18;  		break;  	}  	default: {  		alt17 = 17;  		break;  	}  	}  	break;  }  case '>': {  	switch (input.LA (2)) {  	case '>': {  		int LA17_31 = input.LA (3);  		if ((LA17_31 == '>')) {  			alt17 = 7;  		} else {  			alt17 = 6;  		}  		break;  	}  	case '=': {  		alt17 = 16;  		break;  	}  	default: {  		alt17 = 15;  		break;  	}  	}  	break;  }  case '^': {  	alt17 = 8;  	break;  }  case '!': {  	int LA17_8 = input.LA (2);  	if ((LA17_8 == '=')) {  		alt17 = 19;  	} else {  		alt17 = 10;  	}  	break;  }  case ':': {  	alt17 = 12;  	break;  }  case ''': {  	alt17 = 13;  	break;  }  case '=': {  	alt17 = 14;  	break;  }  case '?': {  	alt17 = 20;  	break;  }  case '/': {  	alt17 = 21;  	break;  }  case '.': {  	int LA17_14 = input.LA (2);  	if (((LA17_14 >= '0' && LA17_14 <= '9'))) {  		alt17 = 30;  	} else {  		alt17 = 22;  	}  	break;  }  case '(': {  	alt17 = 23;  	break;  }  case '%': {  	alt17 = 24;  	break;  }  case '*': {  	alt17 = 25;  	break;  }  case ')': {  	alt17 = 26;  	break;  }  case '-': {  	alt17 = 27;  	break;  }  case 'A':  case 'B':  case 'C':  case 'D':  case 'E':  case 'F':  case 'G':  case 'H':  case 'I':  case 'J':  case 'K':  case 'L':  case 'M':  case 'N':  case 'O':  case 'P':  case 'Q':  case 'R':  case 'S':  case 'T':  case 'U':  case 'V':  case 'W':  case 'X':  case 'Y':  case 'Z':  case '_':  case 'a':  case 'b':  case 'c':  case 'd':  case 'e':  case 'f':  case 'g':  case 'h':  case 'i':  case 'j':  case 'k':  case 'l':  case 'm':  case 'n':  case 'o':  case 'p':  case 'q':  case 'r':  case 's':  case 't':  case 'u':  case 'v':  case 'w':  case 'x':  case 'y':  case 'z': {  	alt17 = 28;  	break;  }  case '\t':  case '\n':  case '\r':  case ' ': {  	alt17 = 29;  	break;  }  case '0': {  	switch (input.LA (2)) {  	case 'X':  	case 'x': {  		alt17 = 32;  		break;  	}  	case '0':  	case '1':  	case '2':  	case '3':  	case '4':  	case '5':  	case '6':  	case '7': {  		alt17 = 31;  		break;  	}  	default: {  		alt17 = 30;  		break;  	}  	}  	break;  }  case '1':  case '2':  case '3':  case '4':  case '5':  case '6':  case '7':  case '8':  case '9': {  	alt17 = 30;  	break;  }  default: {  	NoViableAltException nvae = new NoViableAltException (string.Empty' 17' 0' input);  	throw nvae;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA (1)) {  case '+': {  	alt17 = 1;  	break;  }  case '&': {  	int LA17_2 = input.LA (2);  	if ((LA17_2 == '&')) {  		alt17 = 9;  	} else {  		alt17 = 2;  	}  	break;  }  case '~': {  	alt17 = 3;  	break;  }  case '|': {  	int LA17_4 = input.LA (2);  	if ((LA17_4 == '|')) {  		alt17 = 11;  	} else {  		alt17 = 4;  	}  	break;  }  case '<': {  	switch (input.LA (2)) {  	case '<': {  		alt17 = 5;  		break;  	}  	case '=': {  		alt17 = 18;  		break;  	}  	default: {  		alt17 = 17;  		break;  	}  	}  	break;  }  case '>': {  	switch (input.LA (2)) {  	case '>': {  		int LA17_31 = input.LA (3);  		if ((LA17_31 == '>')) {  			alt17 = 7;  		} else {  			alt17 = 6;  		}  		break;  	}  	case '=': {  		alt17 = 16;  		break;  	}  	default: {  		alt17 = 15;  		break;  	}  	}  	break;  }  case '^': {  	alt17 = 8;  	break;  }  case '!': {  	int LA17_8 = input.LA (2);  	if ((LA17_8 == '=')) {  		alt17 = 19;  	} else {  		alt17 = 10;  	}  	break;  }  case ':': {  	alt17 = 12;  	break;  }  case ''': {  	alt17 = 13;  	break;  }  case '=': {  	alt17 = 14;  	break;  }  case '?': {  	alt17 = 20;  	break;  }  case '/': {  	alt17 = 21;  	break;  }  case '.': {  	int LA17_14 = input.LA (2);  	if (((LA17_14 >= '0' && LA17_14 <= '9'))) {  		alt17 = 30;  	} else {  		alt17 = 22;  	}  	break;  }  case '(': {  	alt17 = 23;  	break;  }  case '%': {  	alt17 = 24;  	break;  }  case '*': {  	alt17 = 25;  	break;  }  case ')': {  	alt17 = 26;  	break;  }  case '-': {  	alt17 = 27;  	break;  }  case 'A':  case 'B':  case 'C':  case 'D':  case 'E':  case 'F':  case 'G':  case 'H':  case 'I':  case 'J':  case 'K':  case 'L':  case 'M':  case 'N':  case 'O':  case 'P':  case 'Q':  case 'R':  case 'S':  case 'T':  case 'U':  case 'V':  case 'W':  case 'X':  case 'Y':  case 'Z':  case '_':  case 'a':  case 'b':  case 'c':  case 'd':  case 'e':  case 'f':  case 'g':  case 'h':  case 'i':  case 'j':  case 'k':  case 'l':  case 'm':  case 'n':  case 'o':  case 'p':  case 'q':  case 'r':  case 's':  case 't':  case 'u':  case 'v':  case 'w':  case 'x':  case 'y':  case 'z': {  	alt17 = 28;  	break;  }  case '\t':  case '\n':  case '\r':  case ' ': {  	alt17 = 29;  	break;  }  case '0': {  	switch (input.LA (2)) {  	case 'X':  	case 'x': {  		alt17 = 32;  		break;  	}  	case '0':  	case '1':  	case '2':  	case '3':  	case '4':  	case '5':  	case '6':  	case '7': {  		alt17 = 31;  		break;  	}  	default: {  		alt17 = 30;  		break;  	}  	}  	break;  }  case '1':  case '2':  case '3':  case '4':  case '5':  case '6':  case '7':  case '8':  case '9': {  	alt17 = 30;  	break;  }  default: {  	NoViableAltException nvae = new NoViableAltException (string.Empty' 17' 0' input);  	throw nvae;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA (1)) {  case '+': {  	alt17 = 1;  	break;  }  case '&': {  	int LA17_2 = input.LA (2);  	if ((LA17_2 == '&')) {  		alt17 = 9;  	} else {  		alt17 = 2;  	}  	break;  }  case '~': {  	alt17 = 3;  	break;  }  case '|': {  	int LA17_4 = input.LA (2);  	if ((LA17_4 == '|')) {  		alt17 = 11;  	} else {  		alt17 = 4;  	}  	break;  }  case '<': {  	switch (input.LA (2)) {  	case '<': {  		alt17 = 5;  		break;  	}  	case '=': {  		alt17 = 18;  		break;  	}  	default: {  		alt17 = 17;  		break;  	}  	}  	break;  }  case '>': {  	switch (input.LA (2)) {  	case '>': {  		int LA17_31 = input.LA (3);  		if ((LA17_31 == '>')) {  			alt17 = 7;  		} else {  			alt17 = 6;  		}  		break;  	}  	case '=': {  		alt17 = 16;  		break;  	}  	default: {  		alt17 = 15;  		break;  	}  	}  	break;  }  case '^': {  	alt17 = 8;  	break;  }  case '!': {  	int LA17_8 = input.LA (2);  	if ((LA17_8 == '=')) {  		alt17 = 19;  	} else {  		alt17 = 10;  	}  	break;  }  case ':': {  	alt17 = 12;  	break;  }  case ''': {  	alt17 = 13;  	break;  }  case '=': {  	alt17 = 14;  	break;  }  case '?': {  	alt17 = 20;  	break;  }  case '/': {  	alt17 = 21;  	break;  }  case '.': {  	int LA17_14 = input.LA (2);  	if (((LA17_14 >= '0' && LA17_14 <= '9'))) {  		alt17 = 30;  	} else {  		alt17 = 22;  	}  	break;  }  case '(': {  	alt17 = 23;  	break;  }  case '%': {  	alt17 = 24;  	break;  }  case '*': {  	alt17 = 25;  	break;  }  case ')': {  	alt17 = 26;  	break;  }  case '-': {  	alt17 = 27;  	break;  }  case 'A':  case 'B':  case 'C':  case 'D':  case 'E':  case 'F':  case 'G':  case 'H':  case 'I':  case 'J':  case 'K':  case 'L':  case 'M':  case 'N':  case 'O':  case 'P':  case 'Q':  case 'R':  case 'S':  case 'T':  case 'U':  case 'V':  case 'W':  case 'X':  case 'Y':  case 'Z':  case '_':  case 'a':  case 'b':  case 'c':  case 'd':  case 'e':  case 'f':  case 'g':  case 'h':  case 'i':  case 'j':  case 'k':  case 'l':  case 'm':  case 'n':  case 'o':  case 'p':  case 'q':  case 'r':  case 's':  case 't':  case 'u':  case 'v':  case 'w':  case 'x':  case 'y':  case 'z': {  	alt17 = 28;  	break;  }  case '\t':  case '\n':  case '\r':  case ' ': {  	alt17 = 29;  	break;  }  case '0': {  	switch (input.LA (2)) {  	case 'X':  	case 'x': {  		alt17 = 32;  		break;  	}  	case '0':  	case '1':  	case '2':  	case '3':  	case '4':  	case '5':  	case '6':  	case '7': {  		alt17 = 31;  		break;  	}  	default: {  		alt17 = 30;  		break;  	}  	}  	break;  }  case '1':  case '2':  case '3':  case '4':  case '5':  case '6':  case '7':  case '8':  case '9': {  	alt17 = 30;  	break;  }  default: {  	NoViableAltException nvae = new NoViableAltException (string.Empty' 17' 0' input);  	throw nvae;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA (1)) {  case '+': {  	alt17 = 1;  	break;  }  case '&': {  	int LA17_2 = input.LA (2);  	if ((LA17_2 == '&')) {  		alt17 = 9;  	} else {  		alt17 = 2;  	}  	break;  }  case '~': {  	alt17 = 3;  	break;  }  case '|': {  	int LA17_4 = input.LA (2);  	if ((LA17_4 == '|')) {  		alt17 = 11;  	} else {  		alt17 = 4;  	}  	break;  }  case '<': {  	switch (input.LA (2)) {  	case '<': {  		alt17 = 5;  		break;  	}  	case '=': {  		alt17 = 18;  		break;  	}  	default: {  		alt17 = 17;  		break;  	}  	}  	break;  }  case '>': {  	switch (input.LA (2)) {  	case '>': {  		int LA17_31 = input.LA (3);  		if ((LA17_31 == '>')) {  			alt17 = 7;  		} else {  			alt17 = 6;  		}  		break;  	}  	case '=': {  		alt17 = 16;  		break;  	}  	default: {  		alt17 = 15;  		break;  	}  	}  	break;  }  case '^': {  	alt17 = 8;  	break;  }  case '!': {  	int LA17_8 = input.LA (2);  	if ((LA17_8 == '=')) {  		alt17 = 19;  	} else {  		alt17 = 10;  	}  	break;  }  case ':': {  	alt17 = 12;  	break;  }  case ''': {  	alt17 = 13;  	break;  }  case '=': {  	alt17 = 14;  	break;  }  case '?': {  	alt17 = 20;  	break;  }  case '/': {  	alt17 = 21;  	break;  }  case '.': {  	int LA17_14 = input.LA (2);  	if (((LA17_14 >= '0' && LA17_14 <= '9'))) {  		alt17 = 30;  	} else {  		alt17 = 22;  	}  	break;  }  case '(': {  	alt17 = 23;  	break;  }  case '%': {  	alt17 = 24;  	break;  }  case '*': {  	alt17 = 25;  	break;  }  case ')': {  	alt17 = 26;  	break;  }  case '-': {  	alt17 = 27;  	break;  }  case 'A':  case 'B':  case 'C':  case 'D':  case 'E':  case 'F':  case 'G':  case 'H':  case 'I':  case 'J':  case 'K':  case 'L':  case 'M':  case 'N':  case 'O':  case 'P':  case 'Q':  case 'R':  case 'S':  case 'T':  case 'U':  case 'V':  case 'W':  case 'X':  case 'Y':  case 'Z':  case '_':  case 'a':  case 'b':  case 'c':  case 'd':  case 'e':  case 'f':  case 'g':  case 'h':  case 'i':  case 'j':  case 'k':  case 'l':  case 'm':  case 'n':  case 'o':  case 'p':  case 'q':  case 'r':  case 's':  case 't':  case 'u':  case 'v':  case 'w':  case 'x':  case 'y':  case 'z': {  	alt17 = 28;  	break;  }  case '\t':  case '\n':  case '\r':  case ' ': {  	alt17 = 29;  	break;  }  case '0': {  	switch (input.LA (2)) {  	case 'X':  	case 'x': {  		alt17 = 32;  		break;  	}  	case '0':  	case '1':  	case '2':  	case '3':  	case '4':  	case '5':  	case '6':  	case '7': {  		alt17 = 31;  		break;  	}  	default: {  		alt17 = 30;  		break;  	}  	}  	break;  }  case '1':  case '2':  case '3':  case '4':  case '5':  case '6':  case '7':  case '8':  case '9': {  	alt17 = 30;  	break;  }  default: {  	NoViableAltException nvae = new NoViableAltException (string.Empty' 17' 0' input);  	throw nvae;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA (1)) {  case '+': {  	alt17 = 1;  	break;  }  case '&': {  	int LA17_2 = input.LA (2);  	if ((LA17_2 == '&')) {  		alt17 = 9;  	} else {  		alt17 = 2;  	}  	break;  }  case '~': {  	alt17 = 3;  	break;  }  case '|': {  	int LA17_4 = input.LA (2);  	if ((LA17_4 == '|')) {  		alt17 = 11;  	} else {  		alt17 = 4;  	}  	break;  }  case '<': {  	switch (input.LA (2)) {  	case '<': {  		alt17 = 5;  		break;  	}  	case '=': {  		alt17 = 18;  		break;  	}  	default: {  		alt17 = 17;  		break;  	}  	}  	break;  }  case '>': {  	switch (input.LA (2)) {  	case '>': {  		int LA17_31 = input.LA (3);  		if ((LA17_31 == '>')) {  			alt17 = 7;  		} else {  			alt17 = 6;  		}  		break;  	}  	case '=': {  		alt17 = 16;  		break;  	}  	default: {  		alt17 = 15;  		break;  	}  	}  	break;  }  case '^': {  	alt17 = 8;  	break;  }  case '!': {  	int LA17_8 = input.LA (2);  	if ((LA17_8 == '=')) {  		alt17 = 19;  	} else {  		alt17 = 10;  	}  	break;  }  case ':': {  	alt17 = 12;  	break;  }  case ''': {  	alt17 = 13;  	break;  }  case '=': {  	alt17 = 14;  	break;  }  case '?': {  	alt17 = 20;  	break;  }  case '/': {  	alt17 = 21;  	break;  }  case '.': {  	int LA17_14 = input.LA (2);  	if (((LA17_14 >= '0' && LA17_14 <= '9'))) {  		alt17 = 30;  	} else {  		alt17 = 22;  	}  	break;  }  case '(': {  	alt17 = 23;  	break;  }  case '%': {  	alt17 = 24;  	break;  }  case '*': {  	alt17 = 25;  	break;  }  case ')': {  	alt17 = 26;  	break;  }  case '-': {  	alt17 = 27;  	break;  }  case 'A':  case 'B':  case 'C':  case 'D':  case 'E':  case 'F':  case 'G':  case 'H':  case 'I':  case 'J':  case 'K':  case 'L':  case 'M':  case 'N':  case 'O':  case 'P':  case 'Q':  case 'R':  case 'S':  case 'T':  case 'U':  case 'V':  case 'W':  case 'X':  case 'Y':  case 'Z':  case '_':  case 'a':  case 'b':  case 'c':  case 'd':  case 'e':  case 'f':  case 'g':  case 'h':  case 'i':  case 'j':  case 'k':  case 'l':  case 'm':  case 'n':  case 'o':  case 'p':  case 'q':  case 'r':  case 's':  case 't':  case 'u':  case 'v':  case 'w':  case 'x':  case 'y':  case 'z': {  	alt17 = 28;  	break;  }  case '\t':  case '\n':  case '\r':  case ' ': {  	alt17 = 29;  	break;  }  case '0': {  	switch (input.LA (2)) {  	case 'X':  	case 'x': {  		alt17 = 32;  		break;  	}  	case '0':  	case '1':  	case '2':  	case '3':  	case '4':  	case '5':  	case '6':  	case '7': {  		alt17 = 31;  		break;  	}  	default: {  		alt17 = 30;  		break;  	}  	}  	break;  }  case '1':  case '2':  case '3':  case '4':  case '5':  case '6':  case '7':  case '8':  case '9': {  	alt17 = 30;  	break;  }  default: {  	NoViableAltException nvae = new NoViableAltException (string.Empty' 17' 0' input);  	throw nvae;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA (1)) {  case '+': {  	alt17 = 1;  	break;  }  case '&': {  	int LA17_2 = input.LA (2);  	if ((LA17_2 == '&')) {  		alt17 = 9;  	} else {  		alt17 = 2;  	}  	break;  }  case '~': {  	alt17 = 3;  	break;  }  case '|': {  	int LA17_4 = input.LA (2);  	if ((LA17_4 == '|')) {  		alt17 = 11;  	} else {  		alt17 = 4;  	}  	break;  }  case '<': {  	switch (input.LA (2)) {  	case '<': {  		alt17 = 5;  		break;  	}  	case '=': {  		alt17 = 18;  		break;  	}  	default: {  		alt17 = 17;  		break;  	}  	}  	break;  }  case '>': {  	switch (input.LA (2)) {  	case '>': {  		int LA17_31 = input.LA (3);  		if ((LA17_31 == '>')) {  			alt17 = 7;  		} else {  			alt17 = 6;  		}  		break;  	}  	case '=': {  		alt17 = 16;  		break;  	}  	default: {  		alt17 = 15;  		break;  	}  	}  	break;  }  case '^': {  	alt17 = 8;  	break;  }  case '!': {  	int LA17_8 = input.LA (2);  	if ((LA17_8 == '=')) {  		alt17 = 19;  	} else {  		alt17 = 10;  	}  	break;  }  case ':': {  	alt17 = 12;  	break;  }  case ''': {  	alt17 = 13;  	break;  }  case '=': {  	alt17 = 14;  	break;  }  case '?': {  	alt17 = 20;  	break;  }  case '/': {  	alt17 = 21;  	break;  }  case '.': {  	int LA17_14 = input.LA (2);  	if (((LA17_14 >= '0' && LA17_14 <= '9'))) {  		alt17 = 30;  	} else {  		alt17 = 22;  	}  	break;  }  case '(': {  	alt17 = 23;  	break;  }  case '%': {  	alt17 = 24;  	break;  }  case '*': {  	alt17 = 25;  	break;  }  case ')': {  	alt17 = 26;  	break;  }  case '-': {  	alt17 = 27;  	break;  }  case 'A':  case 'B':  case 'C':  case 'D':  case 'E':  case 'F':  case 'G':  case 'H':  case 'I':  case 'J':  case 'K':  case 'L':  case 'M':  case 'N':  case 'O':  case 'P':  case 'Q':  case 'R':  case 'S':  case 'T':  case 'U':  case 'V':  case 'W':  case 'X':  case 'Y':  case 'Z':  case '_':  case 'a':  case 'b':  case 'c':  case 'd':  case 'e':  case 'f':  case 'g':  case 'h':  case 'i':  case 'j':  case 'k':  case 'l':  case 'm':  case 'n':  case 'o':  case 'p':  case 'q':  case 'r':  case 's':  case 't':  case 'u':  case 'v':  case 'w':  case 'x':  case 'y':  case 'z': {  	alt17 = 28;  	break;  }  case '\t':  case '\n':  case '\r':  case ' ': {  	alt17 = 29;  	break;  }  case '0': {  	switch (input.LA (2)) {  	case 'X':  	case 'x': {  		alt17 = 32;  		break;  	}  	case '0':  	case '1':  	case '2':  	case '3':  	case '4':  	case '5':  	case '6':  	case '7': {  		alt17 = 31;  		break;  	}  	default: {  		alt17 = 30;  		break;  	}  	}  	break;  }  case '1':  case '2':  case '3':  case '4':  case '5':  case '6':  case '7':  case '8':  case '9': {  	alt17 = 30;  	break;  }  default: {  	NoViableAltException nvae = new NoViableAltException (string.Empty' 17' 0' input);  	throw nvae;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA (1)) {  case '+': {  	alt17 = 1;  	break;  }  case '&': {  	int LA17_2 = input.LA (2);  	if ((LA17_2 == '&')) {  		alt17 = 9;  	} else {  		alt17 = 2;  	}  	break;  }  case '~': {  	alt17 = 3;  	break;  }  case '|': {  	int LA17_4 = input.LA (2);  	if ((LA17_4 == '|')) {  		alt17 = 11;  	} else {  		alt17 = 4;  	}  	break;  }  case '<': {  	switch (input.LA (2)) {  	case '<': {  		alt17 = 5;  		break;  	}  	case '=': {  		alt17 = 18;  		break;  	}  	default: {  		alt17 = 17;  		break;  	}  	}  	break;  }  case '>': {  	switch (input.LA (2)) {  	case '>': {  		int LA17_31 = input.LA (3);  		if ((LA17_31 == '>')) {  			alt17 = 7;  		} else {  			alt17 = 6;  		}  		break;  	}  	case '=': {  		alt17 = 16;  		break;  	}  	default: {  		alt17 = 15;  		break;  	}  	}  	break;  }  case '^': {  	alt17 = 8;  	break;  }  case '!': {  	int LA17_8 = input.LA (2);  	if ((LA17_8 == '=')) {  		alt17 = 19;  	} else {  		alt17 = 10;  	}  	break;  }  case ':': {  	alt17 = 12;  	break;  }  case ''': {  	alt17 = 13;  	break;  }  case '=': {  	alt17 = 14;  	break;  }  case '?': {  	alt17 = 20;  	break;  }  case '/': {  	alt17 = 21;  	break;  }  case '.': {  	int LA17_14 = input.LA (2);  	if (((LA17_14 >= '0' && LA17_14 <= '9'))) {  		alt17 = 30;  	} else {  		alt17 = 22;  	}  	break;  }  case '(': {  	alt17 = 23;  	break;  }  case '%': {  	alt17 = 24;  	break;  }  case '*': {  	alt17 = 25;  	break;  }  case ')': {  	alt17 = 26;  	break;  }  case '-': {  	alt17 = 27;  	break;  }  case 'A':  case 'B':  case 'C':  case 'D':  case 'E':  case 'F':  case 'G':  case 'H':  case 'I':  case 'J':  case 'K':  case 'L':  case 'M':  case 'N':  case 'O':  case 'P':  case 'Q':  case 'R':  case 'S':  case 'T':  case 'U':  case 'V':  case 'W':  case 'X':  case 'Y':  case 'Z':  case '_':  case 'a':  case 'b':  case 'c':  case 'd':  case 'e':  case 'f':  case 'g':  case 'h':  case 'i':  case 'j':  case 'k':  case 'l':  case 'm':  case 'n':  case 'o':  case 'p':  case 'q':  case 'r':  case 's':  case 't':  case 'u':  case 'v':  case 'w':  case 'x':  case 'y':  case 'z': {  	alt17 = 28;  	break;  }  case '\t':  case '\n':  case '\r':  case ' ': {  	alt17 = 29;  	break;  }  case '0': {  	switch (input.LA (2)) {  	case 'X':  	case 'x': {  		alt17 = 32;  		break;  	}  	case '0':  	case '1':  	case '2':  	case '3':  	case '4':  	case '5':  	case '6':  	case '7': {  		alt17 = 31;  		break;  	}  	default: {  		alt17 = 30;  		break;  	}  	}  	break;  }  case '1':  case '2':  case '3':  case '4':  case '5':  case '6':  case '7':  case '8':  case '9': {  	alt17 = 30;  	break;  }  default: {  	NoViableAltException nvae = new NoViableAltException (string.Empty' 17' 0' input);  	throw nvae;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA (1)) {  case '+': {  	alt17 = 1;  	break;  }  case '&': {  	int LA17_2 = input.LA (2);  	if ((LA17_2 == '&')) {  		alt17 = 9;  	} else {  		alt17 = 2;  	}  	break;  }  case '~': {  	alt17 = 3;  	break;  }  case '|': {  	int LA17_4 = input.LA (2);  	if ((LA17_4 == '|')) {  		alt17 = 11;  	} else {  		alt17 = 4;  	}  	break;  }  case '<': {  	switch (input.LA (2)) {  	case '<': {  		alt17 = 5;  		break;  	}  	case '=': {  		alt17 = 18;  		break;  	}  	default: {  		alt17 = 17;  		break;  	}  	}  	break;  }  case '>': {  	switch (input.LA (2)) {  	case '>': {  		int LA17_31 = input.LA (3);  		if ((LA17_31 == '>')) {  			alt17 = 7;  		} else {  			alt17 = 6;  		}  		break;  	}  	case '=': {  		alt17 = 16;  		break;  	}  	default: {  		alt17 = 15;  		break;  	}  	}  	break;  }  case '^': {  	alt17 = 8;  	break;  }  case '!': {  	int LA17_8 = input.LA (2);  	if ((LA17_8 == '=')) {  		alt17 = 19;  	} else {  		alt17 = 10;  	}  	break;  }  case ':': {  	alt17 = 12;  	break;  }  case ''': {  	alt17 = 13;  	break;  }  case '=': {  	alt17 = 14;  	break;  }  case '?': {  	alt17 = 20;  	break;  }  case '/': {  	alt17 = 21;  	break;  }  case '.': {  	int LA17_14 = input.LA (2);  	if (((LA17_14 >= '0' && LA17_14 <= '9'))) {  		alt17 = 30;  	} else {  		alt17 = 22;  	}  	break;  }  case '(': {  	alt17 = 23;  	break;  }  case '%': {  	alt17 = 24;  	break;  }  case '*': {  	alt17 = 25;  	break;  }  case ')': {  	alt17 = 26;  	break;  }  case '-': {  	alt17 = 27;  	break;  }  case 'A':  case 'B':  case 'C':  case 'D':  case 'E':  case 'F':  case 'G':  case 'H':  case 'I':  case 'J':  case 'K':  case 'L':  case 'M':  case 'N':  case 'O':  case 'P':  case 'Q':  case 'R':  case 'S':  case 'T':  case 'U':  case 'V':  case 'W':  case 'X':  case 'Y':  case 'Z':  case '_':  case 'a':  case 'b':  case 'c':  case 'd':  case 'e':  case 'f':  case 'g':  case 'h':  case 'i':  case 'j':  case 'k':  case 'l':  case 'm':  case 'n':  case 'o':  case 'p':  case 'q':  case 'r':  case 's':  case 't':  case 'u':  case 'v':  case 'w':  case 'x':  case 'y':  case 'z': {  	alt17 = 28;  	break;  }  case '\t':  case '\n':  case '\r':  case ' ': {  	alt17 = 29;  	break;  }  case '0': {  	switch (input.LA (2)) {  	case 'X':  	case 'x': {  		alt17 = 32;  		break;  	}  	case '0':  	case '1':  	case '2':  	case '3':  	case '4':  	case '5':  	case '6':  	case '7': {  		alt17 = 31;  		break;  	}  	default: {  		alt17 = 30;  		break;  	}  	}  	break;  }  case '1':  case '2':  case '3':  case '4':  case '5':  case '6':  case '7':  case '8':  case '9': {  	alt17 = 30;  	break;  }  default: {  	NoViableAltException nvae = new NoViableAltException (string.Empty' 17' 0' input);  	throw nvae;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA (1)) {  case '+': {  	alt17 = 1;  	break;  }  case '&': {  	int LA17_2 = input.LA (2);  	if ((LA17_2 == '&')) {  		alt17 = 9;  	} else {  		alt17 = 2;  	}  	break;  }  case '~': {  	alt17 = 3;  	break;  }  case '|': {  	int LA17_4 = input.LA (2);  	if ((LA17_4 == '|')) {  		alt17 = 11;  	} else {  		alt17 = 4;  	}  	break;  }  case '<': {  	switch (input.LA (2)) {  	case '<': {  		alt17 = 5;  		break;  	}  	case '=': {  		alt17 = 18;  		break;  	}  	default: {  		alt17 = 17;  		break;  	}  	}  	break;  }  case '>': {  	switch (input.LA (2)) {  	case '>': {  		int LA17_31 = input.LA (3);  		if ((LA17_31 == '>')) {  			alt17 = 7;  		} else {  			alt17 = 6;  		}  		break;  	}  	case '=': {  		alt17 = 16;  		break;  	}  	default: {  		alt17 = 15;  		break;  	}  	}  	break;  }  case '^': {  	alt17 = 8;  	break;  }  case '!': {  	int LA17_8 = input.LA (2);  	if ((LA17_8 == '=')) {  		alt17 = 19;  	} else {  		alt17 = 10;  	}  	break;  }  case ':': {  	alt17 = 12;  	break;  }  case ''': {  	alt17 = 13;  	break;  }  case '=': {  	alt17 = 14;  	break;  }  case '?': {  	alt17 = 20;  	break;  }  case '/': {  	alt17 = 21;  	break;  }  case '.': {  	int LA17_14 = input.LA (2);  	if (((LA17_14 >= '0' && LA17_14 <= '9'))) {  		alt17 = 30;  	} else {  		alt17 = 22;  	}  	break;  }  case '(': {  	alt17 = 23;  	break;  }  case '%': {  	alt17 = 24;  	break;  }  case '*': {  	alt17 = 25;  	break;  }  case ')': {  	alt17 = 26;  	break;  }  case '-': {  	alt17 = 27;  	break;  }  case 'A':  case 'B':  case 'C':  case 'D':  case 'E':  case 'F':  case 'G':  case 'H':  case 'I':  case 'J':  case 'K':  case 'L':  case 'M':  case 'N':  case 'O':  case 'P':  case 'Q':  case 'R':  case 'S':  case 'T':  case 'U':  case 'V':  case 'W':  case 'X':  case 'Y':  case 'Z':  case '_':  case 'a':  case 'b':  case 'c':  case 'd':  case 'e':  case 'f':  case 'g':  case 'h':  case 'i':  case 'j':  case 'k':  case 'l':  case 'm':  case 'n':  case 'o':  case 'p':  case 'q':  case 'r':  case 's':  case 't':  case 'u':  case 'v':  case 'w':  case 'x':  case 'y':  case 'z': {  	alt17 = 28;  	break;  }  case '\t':  case '\n':  case '\r':  case ' ': {  	alt17 = 29;  	break;  }  case '0': {  	switch (input.LA (2)) {  	case 'X':  	case 'x': {  		alt17 = 32;  		break;  	}  	case '0':  	case '1':  	case '2':  	case '3':  	case '4':  	case '5':  	case '6':  	case '7': {  		alt17 = 31;  		break;  	}  	default: {  		alt17 = 30;  		break;  	}  	}  	break;  }  case '1':  case '2':  case '3':  case '4':  case '5':  case '6':  case '7':  case '8':  case '9': {  	alt17 = 30;  	break;  }  default: {  	NoViableAltException nvae = new NoViableAltException (string.Empty' 17' 0' input);  	throw nvae;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: if ((LA17_2 == '&')) {  	alt17 = 9;  } else {  	alt17 = 2;  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: if ((LA17_2 == '&')) {  	alt17 = 9;  } else {  	alt17 = 2;  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: alt17 = 9;  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: alt17 = 2;  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: alt17 = 3;  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: if ((LA17_4 == '|')) {  	alt17 = 11;  } else {  	alt17 = 4;  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: if ((LA17_4 == '|')) {  	alt17 = 11;  } else {  	alt17 = 4;  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: alt17 = 11;  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: alt17 = 4;  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA (2)) {  case '<': {  	alt17 = 5;  	break;  }  case '=': {  	alt17 = 18;  	break;  }  default: {  	alt17 = 17;  	break;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA (2)) {  case '<': {  	alt17 = 5;  	break;  }  case '=': {  	alt17 = 18;  	break;  }  default: {  	alt17 = 17;  	break;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA (2)) {  case '<': {  	alt17 = 5;  	break;  }  case '=': {  	alt17 = 18;  	break;  }  default: {  	alt17 = 17;  	break;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA (2)) {  case '<': {  	alt17 = 5;  	break;  }  case '=': {  	alt17 = 18;  	break;  }  default: {  	alt17 = 17;  	break;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: alt17 = 5;  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: alt17 = 18;  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: alt17 = 17;  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA (2)) {  case '>': {  	int LA17_31 = input.LA (3);  	if ((LA17_31 == '>')) {  		alt17 = 7;  	} else {  		alt17 = 6;  	}  	break;  }  case '=': {  	alt17 = 16;  	break;  }  default: {  	alt17 = 15;  	break;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA (2)) {  case '>': {  	int LA17_31 = input.LA (3);  	if ((LA17_31 == '>')) {  		alt17 = 7;  	} else {  		alt17 = 6;  	}  	break;  }  case '=': {  	alt17 = 16;  	break;  }  default: {  	alt17 = 15;  	break;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA (2)) {  case '>': {  	int LA17_31 = input.LA (3);  	if ((LA17_31 == '>')) {  		alt17 = 7;  	} else {  		alt17 = 6;  	}  	break;  }  case '=': {  	alt17 = 16;  	break;  }  default: {  	alt17 = 15;  	break;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA (2)) {  case '>': {  	int LA17_31 = input.LA (3);  	if ((LA17_31 == '>')) {  		alt17 = 7;  	} else {  		alt17 = 6;  	}  	break;  }  case '=': {  	alt17 = 16;  	break;  }  default: {  	alt17 = 15;  	break;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA (2)) {  case '>': {  	int LA17_31 = input.LA (3);  	if ((LA17_31 == '>')) {  		alt17 = 7;  	} else {  		alt17 = 6;  	}  	break;  }  case '=': {  	alt17 = 16;  	break;  }  default: {  	alt17 = 15;  	break;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA (2)) {  case '>': {  	int LA17_31 = input.LA (3);  	if ((LA17_31 == '>')) {  		alt17 = 7;  	} else {  		alt17 = 6;  	}  	break;  }  case '=': {  	alt17 = 16;  	break;  }  default: {  	alt17 = 15;  	break;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: if ((LA17_31 == '>')) {  	alt17 = 7;  } else {  	alt17 = 6;  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: if ((LA17_31 == '>')) {  	alt17 = 7;  } else {  	alt17 = 6;  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: alt17 = 7;  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: alt17 = 6;  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: alt17 = 16;  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: alt17 = 15;  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: alt17 = 8;  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: if ((LA17_8 == '=')) {  	alt17 = 19;  } else {  	alt17 = 10;  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: if ((LA17_8 == '=')) {  	alt17 = 19;  } else {  	alt17 = 10;  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: alt17 = 19;  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: alt17 = 10;  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: alt17 = 12;  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: alt17 = 13;  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: alt17 = 14;  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: alt17 = 20;  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: alt17 = 21;  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: if (((LA17_14 >= '0' && LA17_14 <= '9'))) {  	alt17 = 30;  } else {  	alt17 = 22;  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: if (((LA17_14 >= '0' && LA17_14 <= '9'))) {  	alt17 = 30;  } else {  	alt17 = 22;  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: alt17 = 30;  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: alt17 = 22;  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: alt17 = 23;  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: alt17 = 24;  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: alt17 = 25;  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: alt17 = 26;  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: alt17 = 27;  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: alt17 = 28;  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: alt17 = 29;  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA (2)) {  case 'X':  case 'x': {  	alt17 = 32;  	break;  }  case '0':  case '1':  case '2':  case '3':  case '4':  case '5':  case '6':  case '7': {  	alt17 = 31;  	break;  }  default: {  	alt17 = 30;  	break;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA (2)) {  case 'X':  case 'x': {  	alt17 = 32;  	break;  }  case '0':  case '1':  case '2':  case '3':  case '4':  case '5':  case '6':  case '7': {  	alt17 = 31;  	break;  }  default: {  	alt17 = 30;  	break;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA (2)) {  case 'X':  case 'x': {  	alt17 = 32;  	break;  }  case '0':  case '1':  case '2':  case '3':  case '4':  case '5':  case '6':  case '7': {  	alt17 = 31;  	break;  }  default: {  	alt17 = 30;  	break;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (input.LA (2)) {  case 'X':  case 'x': {  	alt17 = 32;  	break;  }  case '0':  case '1':  case '2':  case '3':  case '4':  case '5':  case '6':  case '7': {  	alt17 = 31;  	break;  }  default: {  	alt17 = 30;  	break;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: alt17 = 32;  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: alt17 = 31;  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: alt17 = 30;  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: alt17 = 30;  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (alt17) {  case 1: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD  	MAT_ADD ();  	break;  }  case 2: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND  	MAT_BIT_AND ();  	break;  }  case 3: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT  	MAT_BIT_NOT ();  	break;  }  case 4: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR  	MAT_BIT_OR ();  	break;  }  case 5: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL  	MAT_BIT_SHL ();  	break;  }  case 6: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR  	MAT_BIT_SHR ();  	break;  }  case 7: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU  	MAT_BIT_SHU ();  	break;  }  case 8: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR  	MAT_BIT_XOR ();  	break;  }  case 9: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND  	MAT_BOOL_AND ();  	break;  }  case 10: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT  	MAT_BOOL_NOT ();  	break;  }  case 11: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR  	MAT_BOOL_OR ();  	break;  }  case 12: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON  	MAT_COLON ();  	break;  }  case 13: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA  	MAT_COMMA ();  	break;  }  case 14: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ  	MAT_COMP_EQ ();  	break;  }  case 15: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT  	MAT_COMP_GT ();  	break;  }  case 16: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE  	MAT_COMP_GTE ();  	break;  }  case 17: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT  	MAT_COMP_LT ();  	break;  }  case 18: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE  	MAT_COMP_LTE ();  	break;  }  case 19: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ  	MAT_COMP_NEQ ();  	break;  }  case 20: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE  	MAT_COND_QUE ();  	break;  }  case 21: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE  	MAT_DIVIDE ();  	break;  }  case 22: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT  	MAT_DOT ();  	break;  }  case 23: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN  	MAT_LPAREN ();  	break;  }  case 24: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO  	MAT_MODULO ();  	break;  }  case 25: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY  	MAT_MULTIPLY ();  	break;  }  case 26: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN  	MAT_RPAREN ();  	break;  }  case 27: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT  	MAT_SUBTRACT ();  	break;  }  case 28: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: NAMESPACE_ID  	MNAMESPACE_ID ();  	break;  }  case 29: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:311: WS  	MWS ();  	break;  }  case 30: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:314: DECIMAL  	MDECIMAL ();  	break;  }  case 31: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:322: OCTAL  	MOCTAL ();  	break;  }  case 32: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:328: HEX  	MHEX ();  	break;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (alt17) {  case 1: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD  	MAT_ADD ();  	break;  }  case 2: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND  	MAT_BIT_AND ();  	break;  }  case 3: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT  	MAT_BIT_NOT ();  	break;  }  case 4: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR  	MAT_BIT_OR ();  	break;  }  case 5: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL  	MAT_BIT_SHL ();  	break;  }  case 6: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR  	MAT_BIT_SHR ();  	break;  }  case 7: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU  	MAT_BIT_SHU ();  	break;  }  case 8: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR  	MAT_BIT_XOR ();  	break;  }  case 9: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND  	MAT_BOOL_AND ();  	break;  }  case 10: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT  	MAT_BOOL_NOT ();  	break;  }  case 11: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR  	MAT_BOOL_OR ();  	break;  }  case 12: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON  	MAT_COLON ();  	break;  }  case 13: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA  	MAT_COMMA ();  	break;  }  case 14: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ  	MAT_COMP_EQ ();  	break;  }  case 15: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT  	MAT_COMP_GT ();  	break;  }  case 16: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE  	MAT_COMP_GTE ();  	break;  }  case 17: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT  	MAT_COMP_LT ();  	break;  }  case 18: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE  	MAT_COMP_LTE ();  	break;  }  case 19: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ  	MAT_COMP_NEQ ();  	break;  }  case 20: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE  	MAT_COND_QUE ();  	break;  }  case 21: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE  	MAT_DIVIDE ();  	break;  }  case 22: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT  	MAT_DOT ();  	break;  }  case 23: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN  	MAT_LPAREN ();  	break;  }  case 24: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO  	MAT_MODULO ();  	break;  }  case 25: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY  	MAT_MULTIPLY ();  	break;  }  case 26: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN  	MAT_RPAREN ();  	break;  }  case 27: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT  	MAT_SUBTRACT ();  	break;  }  case 28: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: NAMESPACE_ID  	MNAMESPACE_ID ();  	break;  }  case 29: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:311: WS  	MWS ();  	break;  }  case 30: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:314: DECIMAL  	MDECIMAL ();  	break;  }  case 31: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:322: OCTAL  	MOCTAL ();  	break;  }  case 32: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:328: HEX  	MHEX ();  	break;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (alt17) {  case 1: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD  	MAT_ADD ();  	break;  }  case 2: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND  	MAT_BIT_AND ();  	break;  }  case 3: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT  	MAT_BIT_NOT ();  	break;  }  case 4: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR  	MAT_BIT_OR ();  	break;  }  case 5: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL  	MAT_BIT_SHL ();  	break;  }  case 6: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR  	MAT_BIT_SHR ();  	break;  }  case 7: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU  	MAT_BIT_SHU ();  	break;  }  case 8: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR  	MAT_BIT_XOR ();  	break;  }  case 9: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND  	MAT_BOOL_AND ();  	break;  }  case 10: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT  	MAT_BOOL_NOT ();  	break;  }  case 11: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR  	MAT_BOOL_OR ();  	break;  }  case 12: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON  	MAT_COLON ();  	break;  }  case 13: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA  	MAT_COMMA ();  	break;  }  case 14: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ  	MAT_COMP_EQ ();  	break;  }  case 15: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT  	MAT_COMP_GT ();  	break;  }  case 16: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE  	MAT_COMP_GTE ();  	break;  }  case 17: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT  	MAT_COMP_LT ();  	break;  }  case 18: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE  	MAT_COMP_LTE ();  	break;  }  case 19: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ  	MAT_COMP_NEQ ();  	break;  }  case 20: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE  	MAT_COND_QUE ();  	break;  }  case 21: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE  	MAT_DIVIDE ();  	break;  }  case 22: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT  	MAT_DOT ();  	break;  }  case 23: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN  	MAT_LPAREN ();  	break;  }  case 24: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO  	MAT_MODULO ();  	break;  }  case 25: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY  	MAT_MULTIPLY ();  	break;  }  case 26: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN  	MAT_RPAREN ();  	break;  }  case 27: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT  	MAT_SUBTRACT ();  	break;  }  case 28: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: NAMESPACE_ID  	MNAMESPACE_ID ();  	break;  }  case 29: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:311: WS  	MWS ();  	break;  }  case 30: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:314: DECIMAL  	MDECIMAL ();  	break;  }  case 31: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:322: OCTAL  	MOCTAL ();  	break;  }  case 32: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:328: HEX  	MHEX ();  	break;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (alt17) {  case 1: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD  	MAT_ADD ();  	break;  }  case 2: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND  	MAT_BIT_AND ();  	break;  }  case 3: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT  	MAT_BIT_NOT ();  	break;  }  case 4: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR  	MAT_BIT_OR ();  	break;  }  case 5: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL  	MAT_BIT_SHL ();  	break;  }  case 6: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR  	MAT_BIT_SHR ();  	break;  }  case 7: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU  	MAT_BIT_SHU ();  	break;  }  case 8: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR  	MAT_BIT_XOR ();  	break;  }  case 9: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND  	MAT_BOOL_AND ();  	break;  }  case 10: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT  	MAT_BOOL_NOT ();  	break;  }  case 11: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR  	MAT_BOOL_OR ();  	break;  }  case 12: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON  	MAT_COLON ();  	break;  }  case 13: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA  	MAT_COMMA ();  	break;  }  case 14: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ  	MAT_COMP_EQ ();  	break;  }  case 15: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT  	MAT_COMP_GT ();  	break;  }  case 16: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE  	MAT_COMP_GTE ();  	break;  }  case 17: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT  	MAT_COMP_LT ();  	break;  }  case 18: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE  	MAT_COMP_LTE ();  	break;  }  case 19: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ  	MAT_COMP_NEQ ();  	break;  }  case 20: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE  	MAT_COND_QUE ();  	break;  }  case 21: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE  	MAT_DIVIDE ();  	break;  }  case 22: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT  	MAT_DOT ();  	break;  }  case 23: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN  	MAT_LPAREN ();  	break;  }  case 24: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO  	MAT_MODULO ();  	break;  }  case 25: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY  	MAT_MULTIPLY ();  	break;  }  case 26: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN  	MAT_RPAREN ();  	break;  }  case 27: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT  	MAT_SUBTRACT ();  	break;  }  case 28: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: NAMESPACE_ID  	MNAMESPACE_ID ();  	break;  }  case 29: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:311: WS  	MWS ();  	break;  }  case 30: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:314: DECIMAL  	MDECIMAL ();  	break;  }  case 31: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:322: OCTAL  	MOCTAL ();  	break;  }  case 32: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:328: HEX  	MHEX ();  	break;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (alt17) {  case 1: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD  	MAT_ADD ();  	break;  }  case 2: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND  	MAT_BIT_AND ();  	break;  }  case 3: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT  	MAT_BIT_NOT ();  	break;  }  case 4: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR  	MAT_BIT_OR ();  	break;  }  case 5: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL  	MAT_BIT_SHL ();  	break;  }  case 6: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR  	MAT_BIT_SHR ();  	break;  }  case 7: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU  	MAT_BIT_SHU ();  	break;  }  case 8: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR  	MAT_BIT_XOR ();  	break;  }  case 9: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND  	MAT_BOOL_AND ();  	break;  }  case 10: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT  	MAT_BOOL_NOT ();  	break;  }  case 11: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR  	MAT_BOOL_OR ();  	break;  }  case 12: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON  	MAT_COLON ();  	break;  }  case 13: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA  	MAT_COMMA ();  	break;  }  case 14: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ  	MAT_COMP_EQ ();  	break;  }  case 15: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT  	MAT_COMP_GT ();  	break;  }  case 16: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE  	MAT_COMP_GTE ();  	break;  }  case 17: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT  	MAT_COMP_LT ();  	break;  }  case 18: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE  	MAT_COMP_LTE ();  	break;  }  case 19: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ  	MAT_COMP_NEQ ();  	break;  }  case 20: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE  	MAT_COND_QUE ();  	break;  }  case 21: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE  	MAT_DIVIDE ();  	break;  }  case 22: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT  	MAT_DOT ();  	break;  }  case 23: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN  	MAT_LPAREN ();  	break;  }  case 24: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO  	MAT_MODULO ();  	break;  }  case 25: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY  	MAT_MULTIPLY ();  	break;  }  case 26: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN  	MAT_RPAREN ();  	break;  }  case 27: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT  	MAT_SUBTRACT ();  	break;  }  case 28: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: NAMESPACE_ID  	MNAMESPACE_ID ();  	break;  }  case 29: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:311: WS  	MWS ();  	break;  }  case 30: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:314: DECIMAL  	MDECIMAL ();  	break;  }  case 31: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:322: OCTAL  	MOCTAL ();  	break;  }  case 32: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:328: HEX  	MHEX ();  	break;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (alt17) {  case 1: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD  	MAT_ADD ();  	break;  }  case 2: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND  	MAT_BIT_AND ();  	break;  }  case 3: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT  	MAT_BIT_NOT ();  	break;  }  case 4: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR  	MAT_BIT_OR ();  	break;  }  case 5: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL  	MAT_BIT_SHL ();  	break;  }  case 6: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR  	MAT_BIT_SHR ();  	break;  }  case 7: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU  	MAT_BIT_SHU ();  	break;  }  case 8: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR  	MAT_BIT_XOR ();  	break;  }  case 9: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND  	MAT_BOOL_AND ();  	break;  }  case 10: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT  	MAT_BOOL_NOT ();  	break;  }  case 11: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR  	MAT_BOOL_OR ();  	break;  }  case 12: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON  	MAT_COLON ();  	break;  }  case 13: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA  	MAT_COMMA ();  	break;  }  case 14: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ  	MAT_COMP_EQ ();  	break;  }  case 15: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT  	MAT_COMP_GT ();  	break;  }  case 16: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE  	MAT_COMP_GTE ();  	break;  }  case 17: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT  	MAT_COMP_LT ();  	break;  }  case 18: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE  	MAT_COMP_LTE ();  	break;  }  case 19: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ  	MAT_COMP_NEQ ();  	break;  }  case 20: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE  	MAT_COND_QUE ();  	break;  }  case 21: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE  	MAT_DIVIDE ();  	break;  }  case 22: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT  	MAT_DOT ();  	break;  }  case 23: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN  	MAT_LPAREN ();  	break;  }  case 24: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO  	MAT_MODULO ();  	break;  }  case 25: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY  	MAT_MULTIPLY ();  	break;  }  case 26: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN  	MAT_RPAREN ();  	break;  }  case 27: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT  	MAT_SUBTRACT ();  	break;  }  case 28: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: NAMESPACE_ID  	MNAMESPACE_ID ();  	break;  }  case 29: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:311: WS  	MWS ();  	break;  }  case 30: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:314: DECIMAL  	MDECIMAL ();  	break;  }  case 31: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:322: OCTAL  	MOCTAL ();  	break;  }  case 32: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:328: HEX  	MHEX ();  	break;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (alt17) {  case 1: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD  	MAT_ADD ();  	break;  }  case 2: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND  	MAT_BIT_AND ();  	break;  }  case 3: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT  	MAT_BIT_NOT ();  	break;  }  case 4: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR  	MAT_BIT_OR ();  	break;  }  case 5: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL  	MAT_BIT_SHL ();  	break;  }  case 6: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR  	MAT_BIT_SHR ();  	break;  }  case 7: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU  	MAT_BIT_SHU ();  	break;  }  case 8: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR  	MAT_BIT_XOR ();  	break;  }  case 9: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND  	MAT_BOOL_AND ();  	break;  }  case 10: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT  	MAT_BOOL_NOT ();  	break;  }  case 11: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR  	MAT_BOOL_OR ();  	break;  }  case 12: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON  	MAT_COLON ();  	break;  }  case 13: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA  	MAT_COMMA ();  	break;  }  case 14: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ  	MAT_COMP_EQ ();  	break;  }  case 15: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT  	MAT_COMP_GT ();  	break;  }  case 16: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE  	MAT_COMP_GTE ();  	break;  }  case 17: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT  	MAT_COMP_LT ();  	break;  }  case 18: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE  	MAT_COMP_LTE ();  	break;  }  case 19: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ  	MAT_COMP_NEQ ();  	break;  }  case 20: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE  	MAT_COND_QUE ();  	break;  }  case 21: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE  	MAT_DIVIDE ();  	break;  }  case 22: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT  	MAT_DOT ();  	break;  }  case 23: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN  	MAT_LPAREN ();  	break;  }  case 24: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO  	MAT_MODULO ();  	break;  }  case 25: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY  	MAT_MULTIPLY ();  	break;  }  case 26: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN  	MAT_RPAREN ();  	break;  }  case 27: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT  	MAT_SUBTRACT ();  	break;  }  case 28: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: NAMESPACE_ID  	MNAMESPACE_ID ();  	break;  }  case 29: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:311: WS  	MWS ();  	break;  }  case 30: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:314: DECIMAL  	MDECIMAL ();  	break;  }  case 31: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:322: OCTAL  	MOCTAL ();  	break;  }  case 32: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:328: HEX  	MHEX ();  	break;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (alt17) {  case 1: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD  	MAT_ADD ();  	break;  }  case 2: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND  	MAT_BIT_AND ();  	break;  }  case 3: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT  	MAT_BIT_NOT ();  	break;  }  case 4: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR  	MAT_BIT_OR ();  	break;  }  case 5: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL  	MAT_BIT_SHL ();  	break;  }  case 6: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR  	MAT_BIT_SHR ();  	break;  }  case 7: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU  	MAT_BIT_SHU ();  	break;  }  case 8: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR  	MAT_BIT_XOR ();  	break;  }  case 9: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND  	MAT_BOOL_AND ();  	break;  }  case 10: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT  	MAT_BOOL_NOT ();  	break;  }  case 11: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR  	MAT_BOOL_OR ();  	break;  }  case 12: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON  	MAT_COLON ();  	break;  }  case 13: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA  	MAT_COMMA ();  	break;  }  case 14: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ  	MAT_COMP_EQ ();  	break;  }  case 15: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT  	MAT_COMP_GT ();  	break;  }  case 16: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE  	MAT_COMP_GTE ();  	break;  }  case 17: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT  	MAT_COMP_LT ();  	break;  }  case 18: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE  	MAT_COMP_LTE ();  	break;  }  case 19: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ  	MAT_COMP_NEQ ();  	break;  }  case 20: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE  	MAT_COND_QUE ();  	break;  }  case 21: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE  	MAT_DIVIDE ();  	break;  }  case 22: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT  	MAT_DOT ();  	break;  }  case 23: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN  	MAT_LPAREN ();  	break;  }  case 24: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO  	MAT_MODULO ();  	break;  }  case 25: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY  	MAT_MULTIPLY ();  	break;  }  case 26: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN  	MAT_RPAREN ();  	break;  }  case 27: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT  	MAT_SUBTRACT ();  	break;  }  case 28: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: NAMESPACE_ID  	MNAMESPACE_ID ();  	break;  }  case 29: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:311: WS  	MWS ();  	break;  }  case 30: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:314: DECIMAL  	MDECIMAL ();  	break;  }  case 31: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:322: OCTAL  	MOCTAL ();  	break;  }  case 32: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:328: HEX  	MHEX ();  	break;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (alt17) {  case 1: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD  	MAT_ADD ();  	break;  }  case 2: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND  	MAT_BIT_AND ();  	break;  }  case 3: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT  	MAT_BIT_NOT ();  	break;  }  case 4: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR  	MAT_BIT_OR ();  	break;  }  case 5: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL  	MAT_BIT_SHL ();  	break;  }  case 6: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR  	MAT_BIT_SHR ();  	break;  }  case 7: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU  	MAT_BIT_SHU ();  	break;  }  case 8: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR  	MAT_BIT_XOR ();  	break;  }  case 9: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND  	MAT_BOOL_AND ();  	break;  }  case 10: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT  	MAT_BOOL_NOT ();  	break;  }  case 11: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR  	MAT_BOOL_OR ();  	break;  }  case 12: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON  	MAT_COLON ();  	break;  }  case 13: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA  	MAT_COMMA ();  	break;  }  case 14: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ  	MAT_COMP_EQ ();  	break;  }  case 15: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT  	MAT_COMP_GT ();  	break;  }  case 16: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE  	MAT_COMP_GTE ();  	break;  }  case 17: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT  	MAT_COMP_LT ();  	break;  }  case 18: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE  	MAT_COMP_LTE ();  	break;  }  case 19: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ  	MAT_COMP_NEQ ();  	break;  }  case 20: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE  	MAT_COND_QUE ();  	break;  }  case 21: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE  	MAT_DIVIDE ();  	break;  }  case 22: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT  	MAT_DOT ();  	break;  }  case 23: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN  	MAT_LPAREN ();  	break;  }  case 24: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO  	MAT_MODULO ();  	break;  }  case 25: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY  	MAT_MULTIPLY ();  	break;  }  case 26: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN  	MAT_RPAREN ();  	break;  }  case 27: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT  	MAT_SUBTRACT ();  	break;  }  case 28: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: NAMESPACE_ID  	MNAMESPACE_ID ();  	break;  }  case 29: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:311: WS  	MWS ();  	break;  }  case 30: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:314: DECIMAL  	MDECIMAL ();  	break;  }  case 31: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:322: OCTAL  	MOCTAL ();  	break;  }  case 32: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:328: HEX  	MHEX ();  	break;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (alt17) {  case 1: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD  	MAT_ADD ();  	break;  }  case 2: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND  	MAT_BIT_AND ();  	break;  }  case 3: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT  	MAT_BIT_NOT ();  	break;  }  case 4: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR  	MAT_BIT_OR ();  	break;  }  case 5: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL  	MAT_BIT_SHL ();  	break;  }  case 6: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR  	MAT_BIT_SHR ();  	break;  }  case 7: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU  	MAT_BIT_SHU ();  	break;  }  case 8: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR  	MAT_BIT_XOR ();  	break;  }  case 9: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND  	MAT_BOOL_AND ();  	break;  }  case 10: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT  	MAT_BOOL_NOT ();  	break;  }  case 11: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR  	MAT_BOOL_OR ();  	break;  }  case 12: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON  	MAT_COLON ();  	break;  }  case 13: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA  	MAT_COMMA ();  	break;  }  case 14: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ  	MAT_COMP_EQ ();  	break;  }  case 15: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT  	MAT_COMP_GT ();  	break;  }  case 16: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE  	MAT_COMP_GTE ();  	break;  }  case 17: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT  	MAT_COMP_LT ();  	break;  }  case 18: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE  	MAT_COMP_LTE ();  	break;  }  case 19: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ  	MAT_COMP_NEQ ();  	break;  }  case 20: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE  	MAT_COND_QUE ();  	break;  }  case 21: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE  	MAT_DIVIDE ();  	break;  }  case 22: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT  	MAT_DOT ();  	break;  }  case 23: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN  	MAT_LPAREN ();  	break;  }  case 24: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO  	MAT_MODULO ();  	break;  }  case 25: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY  	MAT_MULTIPLY ();  	break;  }  case 26: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN  	MAT_RPAREN ();  	break;  }  case 27: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT  	MAT_SUBTRACT ();  	break;  }  case 28: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: NAMESPACE_ID  	MNAMESPACE_ID ();  	break;  }  case 29: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:311: WS  	MWS ();  	break;  }  case 30: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:314: DECIMAL  	MDECIMAL ();  	break;  }  case 31: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:322: OCTAL  	MOCTAL ();  	break;  }  case 32: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:328: HEX  	MHEX ();  	break;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (alt17) {  case 1: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD  	MAT_ADD ();  	break;  }  case 2: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND  	MAT_BIT_AND ();  	break;  }  case 3: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT  	MAT_BIT_NOT ();  	break;  }  case 4: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR  	MAT_BIT_OR ();  	break;  }  case 5: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL  	MAT_BIT_SHL ();  	break;  }  case 6: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR  	MAT_BIT_SHR ();  	break;  }  case 7: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU  	MAT_BIT_SHU ();  	break;  }  case 8: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR  	MAT_BIT_XOR ();  	break;  }  case 9: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND  	MAT_BOOL_AND ();  	break;  }  case 10: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT  	MAT_BOOL_NOT ();  	break;  }  case 11: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR  	MAT_BOOL_OR ();  	break;  }  case 12: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON  	MAT_COLON ();  	break;  }  case 13: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA  	MAT_COMMA ();  	break;  }  case 14: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ  	MAT_COMP_EQ ();  	break;  }  case 15: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT  	MAT_COMP_GT ();  	break;  }  case 16: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE  	MAT_COMP_GTE ();  	break;  }  case 17: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT  	MAT_COMP_LT ();  	break;  }  case 18: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE  	MAT_COMP_LTE ();  	break;  }  case 19: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ  	MAT_COMP_NEQ ();  	break;  }  case 20: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE  	MAT_COND_QUE ();  	break;  }  case 21: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE  	MAT_DIVIDE ();  	break;  }  case 22: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT  	MAT_DOT ();  	break;  }  case 23: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN  	MAT_LPAREN ();  	break;  }  case 24: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO  	MAT_MODULO ();  	break;  }  case 25: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY  	MAT_MULTIPLY ();  	break;  }  case 26: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN  	MAT_RPAREN ();  	break;  }  case 27: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT  	MAT_SUBTRACT ();  	break;  }  case 28: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: NAMESPACE_ID  	MNAMESPACE_ID ();  	break;  }  case 29: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:311: WS  	MWS ();  	break;  }  case 30: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:314: DECIMAL  	MDECIMAL ();  	break;  }  case 31: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:322: OCTAL  	MOCTAL ();  	break;  }  case 32: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:328: HEX  	MHEX ();  	break;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (alt17) {  case 1: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD  	MAT_ADD ();  	break;  }  case 2: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND  	MAT_BIT_AND ();  	break;  }  case 3: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT  	MAT_BIT_NOT ();  	break;  }  case 4: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR  	MAT_BIT_OR ();  	break;  }  case 5: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL  	MAT_BIT_SHL ();  	break;  }  case 6: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR  	MAT_BIT_SHR ();  	break;  }  case 7: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU  	MAT_BIT_SHU ();  	break;  }  case 8: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR  	MAT_BIT_XOR ();  	break;  }  case 9: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND  	MAT_BOOL_AND ();  	break;  }  case 10: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT  	MAT_BOOL_NOT ();  	break;  }  case 11: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR  	MAT_BOOL_OR ();  	break;  }  case 12: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON  	MAT_COLON ();  	break;  }  case 13: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA  	MAT_COMMA ();  	break;  }  case 14: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ  	MAT_COMP_EQ ();  	break;  }  case 15: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT  	MAT_COMP_GT ();  	break;  }  case 16: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE  	MAT_COMP_GTE ();  	break;  }  case 17: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT  	MAT_COMP_LT ();  	break;  }  case 18: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE  	MAT_COMP_LTE ();  	break;  }  case 19: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ  	MAT_COMP_NEQ ();  	break;  }  case 20: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE  	MAT_COND_QUE ();  	break;  }  case 21: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE  	MAT_DIVIDE ();  	break;  }  case 22: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT  	MAT_DOT ();  	break;  }  case 23: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN  	MAT_LPAREN ();  	break;  }  case 24: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO  	MAT_MODULO ();  	break;  }  case 25: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY  	MAT_MULTIPLY ();  	break;  }  case 26: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN  	MAT_RPAREN ();  	break;  }  case 27: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT  	MAT_SUBTRACT ();  	break;  }  case 28: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: NAMESPACE_ID  	MNAMESPACE_ID ();  	break;  }  case 29: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:311: WS  	MWS ();  	break;  }  case 30: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:314: DECIMAL  	MDECIMAL ();  	break;  }  case 31: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:322: OCTAL  	MOCTAL ();  	break;  }  case 32: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:328: HEX  	MHEX ();  	break;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (alt17) {  case 1: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD  	MAT_ADD ();  	break;  }  case 2: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND  	MAT_BIT_AND ();  	break;  }  case 3: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT  	MAT_BIT_NOT ();  	break;  }  case 4: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR  	MAT_BIT_OR ();  	break;  }  case 5: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL  	MAT_BIT_SHL ();  	break;  }  case 6: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR  	MAT_BIT_SHR ();  	break;  }  case 7: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU  	MAT_BIT_SHU ();  	break;  }  case 8: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR  	MAT_BIT_XOR ();  	break;  }  case 9: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND  	MAT_BOOL_AND ();  	break;  }  case 10: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT  	MAT_BOOL_NOT ();  	break;  }  case 11: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR  	MAT_BOOL_OR ();  	break;  }  case 12: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON  	MAT_COLON ();  	break;  }  case 13: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA  	MAT_COMMA ();  	break;  }  case 14: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ  	MAT_COMP_EQ ();  	break;  }  case 15: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT  	MAT_COMP_GT ();  	break;  }  case 16: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE  	MAT_COMP_GTE ();  	break;  }  case 17: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT  	MAT_COMP_LT ();  	break;  }  case 18: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE  	MAT_COMP_LTE ();  	break;  }  case 19: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ  	MAT_COMP_NEQ ();  	break;  }  case 20: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE  	MAT_COND_QUE ();  	break;  }  case 21: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE  	MAT_DIVIDE ();  	break;  }  case 22: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT  	MAT_DOT ();  	break;  }  case 23: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN  	MAT_LPAREN ();  	break;  }  case 24: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO  	MAT_MODULO ();  	break;  }  case 25: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY  	MAT_MULTIPLY ();  	break;  }  case 26: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN  	MAT_RPAREN ();  	break;  }  case 27: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT  	MAT_SUBTRACT ();  	break;  }  case 28: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: NAMESPACE_ID  	MNAMESPACE_ID ();  	break;  }  case 29: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:311: WS  	MWS ();  	break;  }  case 30: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:314: DECIMAL  	MDECIMAL ();  	break;  }  case 31: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:322: OCTAL  	MOCTAL ();  	break;  }  case 32: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:328: HEX  	MHEX ();  	break;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (alt17) {  case 1: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD  	MAT_ADD ();  	break;  }  case 2: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND  	MAT_BIT_AND ();  	break;  }  case 3: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT  	MAT_BIT_NOT ();  	break;  }  case 4: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR  	MAT_BIT_OR ();  	break;  }  case 5: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL  	MAT_BIT_SHL ();  	break;  }  case 6: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR  	MAT_BIT_SHR ();  	break;  }  case 7: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU  	MAT_BIT_SHU ();  	break;  }  case 8: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR  	MAT_BIT_XOR ();  	break;  }  case 9: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND  	MAT_BOOL_AND ();  	break;  }  case 10: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT  	MAT_BOOL_NOT ();  	break;  }  case 11: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR  	MAT_BOOL_OR ();  	break;  }  case 12: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON  	MAT_COLON ();  	break;  }  case 13: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA  	MAT_COMMA ();  	break;  }  case 14: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ  	MAT_COMP_EQ ();  	break;  }  case 15: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT  	MAT_COMP_GT ();  	break;  }  case 16: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE  	MAT_COMP_GTE ();  	break;  }  case 17: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT  	MAT_COMP_LT ();  	break;  }  case 18: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE  	MAT_COMP_LTE ();  	break;  }  case 19: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ  	MAT_COMP_NEQ ();  	break;  }  case 20: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE  	MAT_COND_QUE ();  	break;  }  case 21: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE  	MAT_DIVIDE ();  	break;  }  case 22: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT  	MAT_DOT ();  	break;  }  case 23: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN  	MAT_LPAREN ();  	break;  }  case 24: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO  	MAT_MODULO ();  	break;  }  case 25: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY  	MAT_MULTIPLY ();  	break;  }  case 26: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN  	MAT_RPAREN ();  	break;  }  case 27: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT  	MAT_SUBTRACT ();  	break;  }  case 28: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: NAMESPACE_ID  	MNAMESPACE_ID ();  	break;  }  case 29: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:311: WS  	MWS ();  	break;  }  case 30: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:314: DECIMAL  	MDECIMAL ();  	break;  }  case 31: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:322: OCTAL  	MOCTAL ();  	break;  }  case 32: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:328: HEX  	MHEX ();  	break;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (alt17) {  case 1: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD  	MAT_ADD ();  	break;  }  case 2: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND  	MAT_BIT_AND ();  	break;  }  case 3: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT  	MAT_BIT_NOT ();  	break;  }  case 4: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR  	MAT_BIT_OR ();  	break;  }  case 5: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL  	MAT_BIT_SHL ();  	break;  }  case 6: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR  	MAT_BIT_SHR ();  	break;  }  case 7: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU  	MAT_BIT_SHU ();  	break;  }  case 8: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR  	MAT_BIT_XOR ();  	break;  }  case 9: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND  	MAT_BOOL_AND ();  	break;  }  case 10: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT  	MAT_BOOL_NOT ();  	break;  }  case 11: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR  	MAT_BOOL_OR ();  	break;  }  case 12: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON  	MAT_COLON ();  	break;  }  case 13: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA  	MAT_COMMA ();  	break;  }  case 14: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ  	MAT_COMP_EQ ();  	break;  }  case 15: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT  	MAT_COMP_GT ();  	break;  }  case 16: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE  	MAT_COMP_GTE ();  	break;  }  case 17: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT  	MAT_COMP_LT ();  	break;  }  case 18: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE  	MAT_COMP_LTE ();  	break;  }  case 19: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ  	MAT_COMP_NEQ ();  	break;  }  case 20: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE  	MAT_COND_QUE ();  	break;  }  case 21: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE  	MAT_DIVIDE ();  	break;  }  case 22: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT  	MAT_DOT ();  	break;  }  case 23: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN  	MAT_LPAREN ();  	break;  }  case 24: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO  	MAT_MODULO ();  	break;  }  case 25: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY  	MAT_MULTIPLY ();  	break;  }  case 26: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN  	MAT_RPAREN ();  	break;  }  case 27: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT  	MAT_SUBTRACT ();  	break;  }  case 28: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: NAMESPACE_ID  	MNAMESPACE_ID ();  	break;  }  case 29: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:311: WS  	MWS ();  	break;  }  case 30: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:314: DECIMAL  	MDECIMAL ();  	break;  }  case 31: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:322: OCTAL  	MOCTAL ();  	break;  }  case 32: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:328: HEX  	MHEX ();  	break;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (alt17) {  case 1: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD  	MAT_ADD ();  	break;  }  case 2: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND  	MAT_BIT_AND ();  	break;  }  case 3: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT  	MAT_BIT_NOT ();  	break;  }  case 4: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR  	MAT_BIT_OR ();  	break;  }  case 5: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL  	MAT_BIT_SHL ();  	break;  }  case 6: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR  	MAT_BIT_SHR ();  	break;  }  case 7: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU  	MAT_BIT_SHU ();  	break;  }  case 8: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR  	MAT_BIT_XOR ();  	break;  }  case 9: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND  	MAT_BOOL_AND ();  	break;  }  case 10: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT  	MAT_BOOL_NOT ();  	break;  }  case 11: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR  	MAT_BOOL_OR ();  	break;  }  case 12: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON  	MAT_COLON ();  	break;  }  case 13: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA  	MAT_COMMA ();  	break;  }  case 14: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ  	MAT_COMP_EQ ();  	break;  }  case 15: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT  	MAT_COMP_GT ();  	break;  }  case 16: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE  	MAT_COMP_GTE ();  	break;  }  case 17: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT  	MAT_COMP_LT ();  	break;  }  case 18: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE  	MAT_COMP_LTE ();  	break;  }  case 19: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ  	MAT_COMP_NEQ ();  	break;  }  case 20: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE  	MAT_COND_QUE ();  	break;  }  case 21: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE  	MAT_DIVIDE ();  	break;  }  case 22: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT  	MAT_DOT ();  	break;  }  case 23: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN  	MAT_LPAREN ();  	break;  }  case 24: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO  	MAT_MODULO ();  	break;  }  case 25: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY  	MAT_MULTIPLY ();  	break;  }  case 26: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN  	MAT_RPAREN ();  	break;  }  case 27: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT  	MAT_SUBTRACT ();  	break;  }  case 28: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: NAMESPACE_ID  	MNAMESPACE_ID ();  	break;  }  case 29: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:311: WS  	MWS ();  	break;  }  case 30: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:314: DECIMAL  	MDECIMAL ();  	break;  }  case 31: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:322: OCTAL  	MOCTAL ();  	break;  }  case 32: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:328: HEX  	MHEX ();  	break;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (alt17) {  case 1: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD  	MAT_ADD ();  	break;  }  case 2: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND  	MAT_BIT_AND ();  	break;  }  case 3: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT  	MAT_BIT_NOT ();  	break;  }  case 4: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR  	MAT_BIT_OR ();  	break;  }  case 5: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL  	MAT_BIT_SHL ();  	break;  }  case 6: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR  	MAT_BIT_SHR ();  	break;  }  case 7: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU  	MAT_BIT_SHU ();  	break;  }  case 8: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR  	MAT_BIT_XOR ();  	break;  }  case 9: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND  	MAT_BOOL_AND ();  	break;  }  case 10: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT  	MAT_BOOL_NOT ();  	break;  }  case 11: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR  	MAT_BOOL_OR ();  	break;  }  case 12: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON  	MAT_COLON ();  	break;  }  case 13: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA  	MAT_COMMA ();  	break;  }  case 14: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ  	MAT_COMP_EQ ();  	break;  }  case 15: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT  	MAT_COMP_GT ();  	break;  }  case 16: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE  	MAT_COMP_GTE ();  	break;  }  case 17: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT  	MAT_COMP_LT ();  	break;  }  case 18: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE  	MAT_COMP_LTE ();  	break;  }  case 19: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ  	MAT_COMP_NEQ ();  	break;  }  case 20: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE  	MAT_COND_QUE ();  	break;  }  case 21: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE  	MAT_DIVIDE ();  	break;  }  case 22: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT  	MAT_DOT ();  	break;  }  case 23: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN  	MAT_LPAREN ();  	break;  }  case 24: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO  	MAT_MODULO ();  	break;  }  case 25: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY  	MAT_MULTIPLY ();  	break;  }  case 26: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN  	MAT_RPAREN ();  	break;  }  case 27: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT  	MAT_SUBTRACT ();  	break;  }  case 28: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: NAMESPACE_ID  	MNAMESPACE_ID ();  	break;  }  case 29: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:311: WS  	MWS ();  	break;  }  case 30: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:314: DECIMAL  	MDECIMAL ();  	break;  }  case 31: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:322: OCTAL  	MOCTAL ();  	break;  }  case 32: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:328: HEX  	MHEX ();  	break;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (alt17) {  case 1: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD  	MAT_ADD ();  	break;  }  case 2: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND  	MAT_BIT_AND ();  	break;  }  case 3: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT  	MAT_BIT_NOT ();  	break;  }  case 4: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR  	MAT_BIT_OR ();  	break;  }  case 5: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL  	MAT_BIT_SHL ();  	break;  }  case 6: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR  	MAT_BIT_SHR ();  	break;  }  case 7: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU  	MAT_BIT_SHU ();  	break;  }  case 8: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR  	MAT_BIT_XOR ();  	break;  }  case 9: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND  	MAT_BOOL_AND ();  	break;  }  case 10: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT  	MAT_BOOL_NOT ();  	break;  }  case 11: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR  	MAT_BOOL_OR ();  	break;  }  case 12: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON  	MAT_COLON ();  	break;  }  case 13: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA  	MAT_COMMA ();  	break;  }  case 14: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ  	MAT_COMP_EQ ();  	break;  }  case 15: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT  	MAT_COMP_GT ();  	break;  }  case 16: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE  	MAT_COMP_GTE ();  	break;  }  case 17: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT  	MAT_COMP_LT ();  	break;  }  case 18: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE  	MAT_COMP_LTE ();  	break;  }  case 19: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ  	MAT_COMP_NEQ ();  	break;  }  case 20: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE  	MAT_COND_QUE ();  	break;  }  case 21: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE  	MAT_DIVIDE ();  	break;  }  case 22: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT  	MAT_DOT ();  	break;  }  case 23: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN  	MAT_LPAREN ();  	break;  }  case 24: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO  	MAT_MODULO ();  	break;  }  case 25: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY  	MAT_MULTIPLY ();  	break;  }  case 26: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN  	MAT_RPAREN ();  	break;  }  case 27: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT  	MAT_SUBTRACT ();  	break;  }  case 28: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: NAMESPACE_ID  	MNAMESPACE_ID ();  	break;  }  case 29: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:311: WS  	MWS ();  	break;  }  case 30: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:314: DECIMAL  	MDECIMAL ();  	break;  }  case 31: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:322: OCTAL  	MOCTAL ();  	break;  }  case 32: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:328: HEX  	MHEX ();  	break;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (alt17) {  case 1: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD  	MAT_ADD ();  	break;  }  case 2: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND  	MAT_BIT_AND ();  	break;  }  case 3: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT  	MAT_BIT_NOT ();  	break;  }  case 4: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR  	MAT_BIT_OR ();  	break;  }  case 5: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL  	MAT_BIT_SHL ();  	break;  }  case 6: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR  	MAT_BIT_SHR ();  	break;  }  case 7: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU  	MAT_BIT_SHU ();  	break;  }  case 8: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR  	MAT_BIT_XOR ();  	break;  }  case 9: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND  	MAT_BOOL_AND ();  	break;  }  case 10: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT  	MAT_BOOL_NOT ();  	break;  }  case 11: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR  	MAT_BOOL_OR ();  	break;  }  case 12: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON  	MAT_COLON ();  	break;  }  case 13: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA  	MAT_COMMA ();  	break;  }  case 14: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ  	MAT_COMP_EQ ();  	break;  }  case 15: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT  	MAT_COMP_GT ();  	break;  }  case 16: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE  	MAT_COMP_GTE ();  	break;  }  case 17: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT  	MAT_COMP_LT ();  	break;  }  case 18: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE  	MAT_COMP_LTE ();  	break;  }  case 19: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ  	MAT_COMP_NEQ ();  	break;  }  case 20: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE  	MAT_COND_QUE ();  	break;  }  case 21: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE  	MAT_DIVIDE ();  	break;  }  case 22: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT  	MAT_DOT ();  	break;  }  case 23: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN  	MAT_LPAREN ();  	break;  }  case 24: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO  	MAT_MODULO ();  	break;  }  case 25: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY  	MAT_MULTIPLY ();  	break;  }  case 26: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN  	MAT_RPAREN ();  	break;  }  case 27: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT  	MAT_SUBTRACT ();  	break;  }  case 28: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: NAMESPACE_ID  	MNAMESPACE_ID ();  	break;  }  case 29: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:311: WS  	MWS ();  	break;  }  case 30: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:314: DECIMAL  	MDECIMAL ();  	break;  }  case 31: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:322: OCTAL  	MOCTAL ();  	break;  }  case 32: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:328: HEX  	MHEX ();  	break;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (alt17) {  case 1: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD  	MAT_ADD ();  	break;  }  case 2: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND  	MAT_BIT_AND ();  	break;  }  case 3: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT  	MAT_BIT_NOT ();  	break;  }  case 4: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR  	MAT_BIT_OR ();  	break;  }  case 5: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL  	MAT_BIT_SHL ();  	break;  }  case 6: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR  	MAT_BIT_SHR ();  	break;  }  case 7: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU  	MAT_BIT_SHU ();  	break;  }  case 8: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR  	MAT_BIT_XOR ();  	break;  }  case 9: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND  	MAT_BOOL_AND ();  	break;  }  case 10: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT  	MAT_BOOL_NOT ();  	break;  }  case 11: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR  	MAT_BOOL_OR ();  	break;  }  case 12: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON  	MAT_COLON ();  	break;  }  case 13: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA  	MAT_COMMA ();  	break;  }  case 14: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ  	MAT_COMP_EQ ();  	break;  }  case 15: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT  	MAT_COMP_GT ();  	break;  }  case 16: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE  	MAT_COMP_GTE ();  	break;  }  case 17: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT  	MAT_COMP_LT ();  	break;  }  case 18: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE  	MAT_COMP_LTE ();  	break;  }  case 19: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ  	MAT_COMP_NEQ ();  	break;  }  case 20: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE  	MAT_COND_QUE ();  	break;  }  case 21: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE  	MAT_DIVIDE ();  	break;  }  case 22: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT  	MAT_DOT ();  	break;  }  case 23: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN  	MAT_LPAREN ();  	break;  }  case 24: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO  	MAT_MODULO ();  	break;  }  case 25: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY  	MAT_MULTIPLY ();  	break;  }  case 26: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN  	MAT_RPAREN ();  	break;  }  case 27: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT  	MAT_SUBTRACT ();  	break;  }  case 28: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: NAMESPACE_ID  	MNAMESPACE_ID ();  	break;  }  case 29: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:311: WS  	MWS ();  	break;  }  case 30: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:314: DECIMAL  	MDECIMAL ();  	break;  }  case 31: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:322: OCTAL  	MOCTAL ();  	break;  }  case 32: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:328: HEX  	MHEX ();  	break;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (alt17) {  case 1: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD  	MAT_ADD ();  	break;  }  case 2: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND  	MAT_BIT_AND ();  	break;  }  case 3: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT  	MAT_BIT_NOT ();  	break;  }  case 4: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR  	MAT_BIT_OR ();  	break;  }  case 5: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL  	MAT_BIT_SHL ();  	break;  }  case 6: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR  	MAT_BIT_SHR ();  	break;  }  case 7: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU  	MAT_BIT_SHU ();  	break;  }  case 8: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR  	MAT_BIT_XOR ();  	break;  }  case 9: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND  	MAT_BOOL_AND ();  	break;  }  case 10: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT  	MAT_BOOL_NOT ();  	break;  }  case 11: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR  	MAT_BOOL_OR ();  	break;  }  case 12: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON  	MAT_COLON ();  	break;  }  case 13: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA  	MAT_COMMA ();  	break;  }  case 14: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ  	MAT_COMP_EQ ();  	break;  }  case 15: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT  	MAT_COMP_GT ();  	break;  }  case 16: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE  	MAT_COMP_GTE ();  	break;  }  case 17: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT  	MAT_COMP_LT ();  	break;  }  case 18: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE  	MAT_COMP_LTE ();  	break;  }  case 19: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ  	MAT_COMP_NEQ ();  	break;  }  case 20: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE  	MAT_COND_QUE ();  	break;  }  case 21: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE  	MAT_DIVIDE ();  	break;  }  case 22: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT  	MAT_DOT ();  	break;  }  case 23: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN  	MAT_LPAREN ();  	break;  }  case 24: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO  	MAT_MODULO ();  	break;  }  case 25: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY  	MAT_MULTIPLY ();  	break;  }  case 26: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN  	MAT_RPAREN ();  	break;  }  case 27: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT  	MAT_SUBTRACT ();  	break;  }  case 28: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: NAMESPACE_ID  	MNAMESPACE_ID ();  	break;  }  case 29: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:311: WS  	MWS ();  	break;  }  case 30: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:314: DECIMAL  	MDECIMAL ();  	break;  }  case 31: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:322: OCTAL  	MOCTAL ();  	break;  }  case 32: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:328: HEX  	MHEX ();  	break;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (alt17) {  case 1: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD  	MAT_ADD ();  	break;  }  case 2: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND  	MAT_BIT_AND ();  	break;  }  case 3: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT  	MAT_BIT_NOT ();  	break;  }  case 4: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR  	MAT_BIT_OR ();  	break;  }  case 5: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL  	MAT_BIT_SHL ();  	break;  }  case 6: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR  	MAT_BIT_SHR ();  	break;  }  case 7: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU  	MAT_BIT_SHU ();  	break;  }  case 8: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR  	MAT_BIT_XOR ();  	break;  }  case 9: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND  	MAT_BOOL_AND ();  	break;  }  case 10: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT  	MAT_BOOL_NOT ();  	break;  }  case 11: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR  	MAT_BOOL_OR ();  	break;  }  case 12: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON  	MAT_COLON ();  	break;  }  case 13: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA  	MAT_COMMA ();  	break;  }  case 14: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ  	MAT_COMP_EQ ();  	break;  }  case 15: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT  	MAT_COMP_GT ();  	break;  }  case 16: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE  	MAT_COMP_GTE ();  	break;  }  case 17: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT  	MAT_COMP_LT ();  	break;  }  case 18: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE  	MAT_COMP_LTE ();  	break;  }  case 19: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ  	MAT_COMP_NEQ ();  	break;  }  case 20: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE  	MAT_COND_QUE ();  	break;  }  case 21: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE  	MAT_DIVIDE ();  	break;  }  case 22: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT  	MAT_DOT ();  	break;  }  case 23: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN  	MAT_LPAREN ();  	break;  }  case 24: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO  	MAT_MODULO ();  	break;  }  case 25: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY  	MAT_MULTIPLY ();  	break;  }  case 26: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN  	MAT_RPAREN ();  	break;  }  case 27: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT  	MAT_SUBTRACT ();  	break;  }  case 28: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: NAMESPACE_ID  	MNAMESPACE_ID ();  	break;  }  case 29: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:311: WS  	MWS ();  	break;  }  case 30: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:314: DECIMAL  	MDECIMAL ();  	break;  }  case 31: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:322: OCTAL  	MOCTAL ();  	break;  }  case 32: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:328: HEX  	MHEX ();  	break;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (alt17) {  case 1: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD  	MAT_ADD ();  	break;  }  case 2: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND  	MAT_BIT_AND ();  	break;  }  case 3: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT  	MAT_BIT_NOT ();  	break;  }  case 4: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR  	MAT_BIT_OR ();  	break;  }  case 5: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL  	MAT_BIT_SHL ();  	break;  }  case 6: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR  	MAT_BIT_SHR ();  	break;  }  case 7: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU  	MAT_BIT_SHU ();  	break;  }  case 8: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR  	MAT_BIT_XOR ();  	break;  }  case 9: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND  	MAT_BOOL_AND ();  	break;  }  case 10: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT  	MAT_BOOL_NOT ();  	break;  }  case 11: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR  	MAT_BOOL_OR ();  	break;  }  case 12: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON  	MAT_COLON ();  	break;  }  case 13: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA  	MAT_COMMA ();  	break;  }  case 14: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ  	MAT_COMP_EQ ();  	break;  }  case 15: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT  	MAT_COMP_GT ();  	break;  }  case 16: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE  	MAT_COMP_GTE ();  	break;  }  case 17: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT  	MAT_COMP_LT ();  	break;  }  case 18: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE  	MAT_COMP_LTE ();  	break;  }  case 19: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ  	MAT_COMP_NEQ ();  	break;  }  case 20: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE  	MAT_COND_QUE ();  	break;  }  case 21: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE  	MAT_DIVIDE ();  	break;  }  case 22: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT  	MAT_DOT ();  	break;  }  case 23: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN  	MAT_LPAREN ();  	break;  }  case 24: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO  	MAT_MODULO ();  	break;  }  case 25: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY  	MAT_MULTIPLY ();  	break;  }  case 26: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN  	MAT_RPAREN ();  	break;  }  case 27: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT  	MAT_SUBTRACT ();  	break;  }  case 28: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: NAMESPACE_ID  	MNAMESPACE_ID ();  	break;  }  case 29: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:311: WS  	MWS ();  	break;  }  case 30: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:314: DECIMAL  	MDECIMAL ();  	break;  }  case 31: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:322: OCTAL  	MOCTAL ();  	break;  }  case 32: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:328: HEX  	MHEX ();  	break;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (alt17) {  case 1: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD  	MAT_ADD ();  	break;  }  case 2: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND  	MAT_BIT_AND ();  	break;  }  case 3: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT  	MAT_BIT_NOT ();  	break;  }  case 4: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR  	MAT_BIT_OR ();  	break;  }  case 5: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL  	MAT_BIT_SHL ();  	break;  }  case 6: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR  	MAT_BIT_SHR ();  	break;  }  case 7: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU  	MAT_BIT_SHU ();  	break;  }  case 8: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR  	MAT_BIT_XOR ();  	break;  }  case 9: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND  	MAT_BOOL_AND ();  	break;  }  case 10: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT  	MAT_BOOL_NOT ();  	break;  }  case 11: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR  	MAT_BOOL_OR ();  	break;  }  case 12: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON  	MAT_COLON ();  	break;  }  case 13: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA  	MAT_COMMA ();  	break;  }  case 14: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ  	MAT_COMP_EQ ();  	break;  }  case 15: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT  	MAT_COMP_GT ();  	break;  }  case 16: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE  	MAT_COMP_GTE ();  	break;  }  case 17: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT  	MAT_COMP_LT ();  	break;  }  case 18: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE  	MAT_COMP_LTE ();  	break;  }  case 19: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ  	MAT_COMP_NEQ ();  	break;  }  case 20: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE  	MAT_COND_QUE ();  	break;  }  case 21: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE  	MAT_DIVIDE ();  	break;  }  case 22: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT  	MAT_DOT ();  	break;  }  case 23: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN  	MAT_LPAREN ();  	break;  }  case 24: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO  	MAT_MODULO ();  	break;  }  case 25: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY  	MAT_MULTIPLY ();  	break;  }  case 26: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN  	MAT_RPAREN ();  	break;  }  case 27: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT  	MAT_SUBTRACT ();  	break;  }  case 28: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: NAMESPACE_ID  	MNAMESPACE_ID ();  	break;  }  case 29: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:311: WS  	MWS ();  	break;  }  case 30: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:314: DECIMAL  	MDECIMAL ();  	break;  }  case 31: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:322: OCTAL  	MOCTAL ();  	break;  }  case 32: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:328: HEX  	MHEX ();  	break;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (alt17) {  case 1: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD  	MAT_ADD ();  	break;  }  case 2: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND  	MAT_BIT_AND ();  	break;  }  case 3: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT  	MAT_BIT_NOT ();  	break;  }  case 4: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR  	MAT_BIT_OR ();  	break;  }  case 5: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL  	MAT_BIT_SHL ();  	break;  }  case 6: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR  	MAT_BIT_SHR ();  	break;  }  case 7: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU  	MAT_BIT_SHU ();  	break;  }  case 8: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR  	MAT_BIT_XOR ();  	break;  }  case 9: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND  	MAT_BOOL_AND ();  	break;  }  case 10: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT  	MAT_BOOL_NOT ();  	break;  }  case 11: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR  	MAT_BOOL_OR ();  	break;  }  case 12: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON  	MAT_COLON ();  	break;  }  case 13: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA  	MAT_COMMA ();  	break;  }  case 14: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ  	MAT_COMP_EQ ();  	break;  }  case 15: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT  	MAT_COMP_GT ();  	break;  }  case 16: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE  	MAT_COMP_GTE ();  	break;  }  case 17: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT  	MAT_COMP_LT ();  	break;  }  case 18: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE  	MAT_COMP_LTE ();  	break;  }  case 19: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ  	MAT_COMP_NEQ ();  	break;  }  case 20: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE  	MAT_COND_QUE ();  	break;  }  case 21: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE  	MAT_DIVIDE ();  	break;  }  case 22: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT  	MAT_DOT ();  	break;  }  case 23: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN  	MAT_LPAREN ();  	break;  }  case 24: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO  	MAT_MODULO ();  	break;  }  case 25: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY  	MAT_MULTIPLY ();  	break;  }  case 26: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN  	MAT_RPAREN ();  	break;  }  case 27: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT  	MAT_SUBTRACT ();  	break;  }  case 28: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: NAMESPACE_ID  	MNAMESPACE_ID ();  	break;  }  case 29: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:311: WS  	MWS ();  	break;  }  case 30: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:314: DECIMAL  	MDECIMAL ();  	break;  }  case 31: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:322: OCTAL  	MOCTAL ();  	break;  }  case 32: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:328: HEX  	MHEX ();  	break;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (alt17) {  case 1: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD  	MAT_ADD ();  	break;  }  case 2: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND  	MAT_BIT_AND ();  	break;  }  case 3: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT  	MAT_BIT_NOT ();  	break;  }  case 4: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR  	MAT_BIT_OR ();  	break;  }  case 5: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL  	MAT_BIT_SHL ();  	break;  }  case 6: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR  	MAT_BIT_SHR ();  	break;  }  case 7: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU  	MAT_BIT_SHU ();  	break;  }  case 8: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR  	MAT_BIT_XOR ();  	break;  }  case 9: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND  	MAT_BOOL_AND ();  	break;  }  case 10: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT  	MAT_BOOL_NOT ();  	break;  }  case 11: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR  	MAT_BOOL_OR ();  	break;  }  case 12: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON  	MAT_COLON ();  	break;  }  case 13: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA  	MAT_COMMA ();  	break;  }  case 14: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ  	MAT_COMP_EQ ();  	break;  }  case 15: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT  	MAT_COMP_GT ();  	break;  }  case 16: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE  	MAT_COMP_GTE ();  	break;  }  case 17: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT  	MAT_COMP_LT ();  	break;  }  case 18: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE  	MAT_COMP_LTE ();  	break;  }  case 19: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ  	MAT_COMP_NEQ ();  	break;  }  case 20: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE  	MAT_COND_QUE ();  	break;  }  case 21: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE  	MAT_DIVIDE ();  	break;  }  case 22: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT  	MAT_DOT ();  	break;  }  case 23: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN  	MAT_LPAREN ();  	break;  }  case 24: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO  	MAT_MODULO ();  	break;  }  case 25: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY  	MAT_MULTIPLY ();  	break;  }  case 26: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN  	MAT_RPAREN ();  	break;  }  case 27: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT  	MAT_SUBTRACT ();  	break;  }  case 28: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: NAMESPACE_ID  	MNAMESPACE_ID ();  	break;  }  case 29: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:311: WS  	MWS ();  	break;  }  case 30: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:314: DECIMAL  	MDECIMAL ();  	break;  }  case 31: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:322: OCTAL  	MOCTAL ();  	break;  }  case 32: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:328: HEX  	MHEX ();  	break;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (alt17) {  case 1: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD  	MAT_ADD ();  	break;  }  case 2: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND  	MAT_BIT_AND ();  	break;  }  case 3: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT  	MAT_BIT_NOT ();  	break;  }  case 4: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR  	MAT_BIT_OR ();  	break;  }  case 5: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL  	MAT_BIT_SHL ();  	break;  }  case 6: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR  	MAT_BIT_SHR ();  	break;  }  case 7: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU  	MAT_BIT_SHU ();  	break;  }  case 8: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR  	MAT_BIT_XOR ();  	break;  }  case 9: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND  	MAT_BOOL_AND ();  	break;  }  case 10: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT  	MAT_BOOL_NOT ();  	break;  }  case 11: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR  	MAT_BOOL_OR ();  	break;  }  case 12: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON  	MAT_COLON ();  	break;  }  case 13: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA  	MAT_COMMA ();  	break;  }  case 14: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ  	MAT_COMP_EQ ();  	break;  }  case 15: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT  	MAT_COMP_GT ();  	break;  }  case 16: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE  	MAT_COMP_GTE ();  	break;  }  case 17: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT  	MAT_COMP_LT ();  	break;  }  case 18: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE  	MAT_COMP_LTE ();  	break;  }  case 19: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ  	MAT_COMP_NEQ ();  	break;  }  case 20: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE  	MAT_COND_QUE ();  	break;  }  case 21: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE  	MAT_DIVIDE ();  	break;  }  case 22: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT  	MAT_DOT ();  	break;  }  case 23: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN  	MAT_LPAREN ();  	break;  }  case 24: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO  	MAT_MODULO ();  	break;  }  case 25: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY  	MAT_MULTIPLY ();  	break;  }  case 26: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN  	MAT_RPAREN ();  	break;  }  case 27: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT  	MAT_SUBTRACT ();  	break;  }  case 28: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: NAMESPACE_ID  	MNAMESPACE_ID ();  	break;  }  case 29: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:311: WS  	MWS ();  	break;  }  case 30: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:314: DECIMAL  	MDECIMAL ();  	break;  }  case 31: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:322: OCTAL  	MOCTAL ();  	break;  }  case 32: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:328: HEX  	MHEX ();  	break;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (alt17) {  case 1: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD  	MAT_ADD ();  	break;  }  case 2: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND  	MAT_BIT_AND ();  	break;  }  case 3: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT  	MAT_BIT_NOT ();  	break;  }  case 4: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR  	MAT_BIT_OR ();  	break;  }  case 5: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL  	MAT_BIT_SHL ();  	break;  }  case 6: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR  	MAT_BIT_SHR ();  	break;  }  case 7: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU  	MAT_BIT_SHU ();  	break;  }  case 8: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR  	MAT_BIT_XOR ();  	break;  }  case 9: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND  	MAT_BOOL_AND ();  	break;  }  case 10: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT  	MAT_BOOL_NOT ();  	break;  }  case 11: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR  	MAT_BOOL_OR ();  	break;  }  case 12: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON  	MAT_COLON ();  	break;  }  case 13: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA  	MAT_COMMA ();  	break;  }  case 14: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ  	MAT_COMP_EQ ();  	break;  }  case 15: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT  	MAT_COMP_GT ();  	break;  }  case 16: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE  	MAT_COMP_GTE ();  	break;  }  case 17: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT  	MAT_COMP_LT ();  	break;  }  case 18: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE  	MAT_COMP_LTE ();  	break;  }  case 19: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ  	MAT_COMP_NEQ ();  	break;  }  case 20: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE  	MAT_COND_QUE ();  	break;  }  case 21: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE  	MAT_DIVIDE ();  	break;  }  case 22: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT  	MAT_DOT ();  	break;  }  case 23: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN  	MAT_LPAREN ();  	break;  }  case 24: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO  	MAT_MODULO ();  	break;  }  case 25: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY  	MAT_MULTIPLY ();  	break;  }  case 26: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN  	MAT_RPAREN ();  	break;  }  case 27: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT  	MAT_SUBTRACT ();  	break;  }  case 28: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: NAMESPACE_ID  	MNAMESPACE_ID ();  	break;  }  case 29: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:311: WS  	MWS ();  	break;  }  case 30: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:314: DECIMAL  	MDECIMAL ();  	break;  }  case 31: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:322: OCTAL  	MOCTAL ();  	break;  }  case 32: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:328: HEX  	MHEX ();  	break;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (alt17) {  case 1: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD  	MAT_ADD ();  	break;  }  case 2: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND  	MAT_BIT_AND ();  	break;  }  case 3: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT  	MAT_BIT_NOT ();  	break;  }  case 4: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR  	MAT_BIT_OR ();  	break;  }  case 5: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL  	MAT_BIT_SHL ();  	break;  }  case 6: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR  	MAT_BIT_SHR ();  	break;  }  case 7: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU  	MAT_BIT_SHU ();  	break;  }  case 8: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR  	MAT_BIT_XOR ();  	break;  }  case 9: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND  	MAT_BOOL_AND ();  	break;  }  case 10: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT  	MAT_BOOL_NOT ();  	break;  }  case 11: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR  	MAT_BOOL_OR ();  	break;  }  case 12: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON  	MAT_COLON ();  	break;  }  case 13: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA  	MAT_COMMA ();  	break;  }  case 14: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ  	MAT_COMP_EQ ();  	break;  }  case 15: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT  	MAT_COMP_GT ();  	break;  }  case 16: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE  	MAT_COMP_GTE ();  	break;  }  case 17: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT  	MAT_COMP_LT ();  	break;  }  case 18: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE  	MAT_COMP_LTE ();  	break;  }  case 19: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ  	MAT_COMP_NEQ ();  	break;  }  case 20: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE  	MAT_COND_QUE ();  	break;  }  case 21: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE  	MAT_DIVIDE ();  	break;  }  case 22: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT  	MAT_DOT ();  	break;  }  case 23: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN  	MAT_LPAREN ();  	break;  }  case 24: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO  	MAT_MODULO ();  	break;  }  case 25: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY  	MAT_MULTIPLY ();  	break;  }  case 26: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN  	MAT_RPAREN ();  	break;  }  case 27: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT  	MAT_SUBTRACT ();  	break;  }  case 28: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: NAMESPACE_ID  	MNAMESPACE_ID ();  	break;  }  case 29: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:311: WS  	MWS ();  	break;  }  case 30: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:314: DECIMAL  	MDECIMAL ();  	break;  }  case 31: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:322: OCTAL  	MOCTAL ();  	break;  }  case 32: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:328: HEX  	MHEX ();  	break;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (alt17) {  case 1: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD  	MAT_ADD ();  	break;  }  case 2: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND  	MAT_BIT_AND ();  	break;  }  case 3: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT  	MAT_BIT_NOT ();  	break;  }  case 4: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR  	MAT_BIT_OR ();  	break;  }  case 5: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL  	MAT_BIT_SHL ();  	break;  }  case 6: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR  	MAT_BIT_SHR ();  	break;  }  case 7: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU  	MAT_BIT_SHU ();  	break;  }  case 8: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR  	MAT_BIT_XOR ();  	break;  }  case 9: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND  	MAT_BOOL_AND ();  	break;  }  case 10: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT  	MAT_BOOL_NOT ();  	break;  }  case 11: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR  	MAT_BOOL_OR ();  	break;  }  case 12: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON  	MAT_COLON ();  	break;  }  case 13: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA  	MAT_COMMA ();  	break;  }  case 14: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ  	MAT_COMP_EQ ();  	break;  }  case 15: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT  	MAT_COMP_GT ();  	break;  }  case 16: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE  	MAT_COMP_GTE ();  	break;  }  case 17: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT  	MAT_COMP_LT ();  	break;  }  case 18: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE  	MAT_COMP_LTE ();  	break;  }  case 19: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ  	MAT_COMP_NEQ ();  	break;  }  case 20: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE  	MAT_COND_QUE ();  	break;  }  case 21: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE  	MAT_DIVIDE ();  	break;  }  case 22: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT  	MAT_DOT ();  	break;  }  case 23: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN  	MAT_LPAREN ();  	break;  }  case 24: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO  	MAT_MODULO ();  	break;  }  case 25: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY  	MAT_MULTIPLY ();  	break;  }  case 26: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN  	MAT_RPAREN ();  	break;  }  case 27: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT  	MAT_SUBTRACT ();  	break;  }  case 28: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: NAMESPACE_ID  	MNAMESPACE_ID ();  	break;  }  case 29: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:311: WS  	MWS ();  	break;  }  case 30: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:314: DECIMAL  	MDECIMAL ();  	break;  }  case 31: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:322: OCTAL  	MOCTAL ();  	break;  }  case 32: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:328: HEX  	MHEX ();  	break;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following statement contains a magic number: switch (alt17) {  case 1: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD  	MAT_ADD ();  	break;  }  case 2: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND  	MAT_BIT_AND ();  	break;  }  case 3: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT  	MAT_BIT_NOT ();  	break;  }  case 4: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR  	MAT_BIT_OR ();  	break;  }  case 5: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL  	MAT_BIT_SHL ();  	break;  }  case 6: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR  	MAT_BIT_SHR ();  	break;  }  case 7: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU  	MAT_BIT_SHU ();  	break;  }  case 8: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR  	MAT_BIT_XOR ();  	break;  }  case 9: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND  	MAT_BOOL_AND ();  	break;  }  case 10: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT  	MAT_BOOL_NOT ();  	break;  }  case 11: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR  	MAT_BOOL_OR ();  	break;  }  case 12: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON  	MAT_COLON ();  	break;  }  case 13: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA  	MAT_COMMA ();  	break;  }  case 14: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ  	MAT_COMP_EQ ();  	break;  }  case 15: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT  	MAT_COMP_GT ();  	break;  }  case 16: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE  	MAT_COMP_GTE ();  	break;  }  case 17: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT  	MAT_COMP_LT ();  	break;  }  case 18: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE  	MAT_COMP_LTE ();  	break;  }  case 19: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ  	MAT_COMP_NEQ ();  	break;  }  case 20: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE  	MAT_COND_QUE ();  	break;  }  case 21: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE  	MAT_DIVIDE ();  	break;  }  case 22: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT  	MAT_DOT ();  	break;  }  case 23: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN  	MAT_LPAREN ();  	break;  }  case 24: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO  	MAT_MODULO ();  	break;  }  case 25: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY  	MAT_MULTIPLY ();  	break;  }  case 26: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN  	MAT_RPAREN ();  	break;  }  case 27: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT  	MAT_SUBTRACT ();  	break;  }  case 28: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: NAMESPACE_ID  	MNAMESPACE_ID ();  	break;  }  case 29: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:311: WS  	MWS ();  	break;  }  case 30: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:314: DECIMAL  	MDECIMAL ();  	break;  }  case 31: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:322: OCTAL  	MOCTAL ();  	break;  }  case 32: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:328: HEX  	MHEX ();  	break;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Conditional,The following statement contains a magic number: try {  	{  		// src/java/org/apache/lucene/expressions/js/Javascript.g:255:5: ( logical_or ( AT_COND_QUE ^ conditional AT_COLON ! conditional )? )  		// src/java/org/apache/lucene/expressions/js/Javascript.g:255:7: logical_or ( AT_COND_QUE ^ conditional AT_COLON ! conditional )?  		root_0 = (CommonTree)m_adaptor.Nil ();  		PushFollow (FOLLOW_logical_or_in_conditional757);  		logical_or3 = Logical_Or ();  		state._fsp--;  		m_adaptor.AddChild (root_0' logical_or3.Tree);  		// src/java/org/apache/lucene/expressions/js/Javascript.g:255:18: ( AT_COND_QUE ^ conditional AT_COLON ! conditional )?  		int alt1 = 2;  		int LA1_0 = input.LA (1);  		if ((LA1_0 == AT_COND_QUE)) {  			alt1 = 1;  		}  		switch (alt1) {  		case 1: {  			// src/java/org/apache/lucene/expressions/js/Javascript.g:255:19: AT_COND_QUE ^ conditional AT_COLON ! conditional  			AT_COND_QUE4 = (IToken)Match (input' AT_COND_QUE' FOLLOW_AT_COND_QUE_in_conditional760);  			AT_COND_QUE4_tree = (CommonTree)m_adaptor.Create (AT_COND_QUE4);  			root_0 = (CommonTree)m_adaptor.BecomeRoot (AT_COND_QUE4_tree' root_0);  			PushFollow (FOLLOW_conditional_in_conditional763);  			conditional5 = Conditional ();  			state._fsp--;  			m_adaptor.AddChild (root_0' conditional5.Tree);  			AT_COLON6 = (IToken)Match (input' AT_COLON' FOLLOW_AT_COLON_in_conditional765);  			PushFollow (FOLLOW_conditional_in_conditional768);  			conditional7 = Conditional ();  			state._fsp--;  			m_adaptor.AddChild (root_0' conditional7.Tree);  			break;  		}  		}  	}  	retval.Stop = input.LT (-1);  	retval.Tree = (CommonTree)m_adaptor.RulePostProcessing (root_0);  	m_adaptor.SetTokenBoundaries (retval.Tree' retval.Start' retval.Stop);  } catch (RecognitionException re) {  	ReportError (re);  	Recover (input' re);  	retval.Tree = (CommonTree)m_adaptor.ErrorNode (input' retval.Start' input.LT (-1)' re);  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Logical_Or,The following statement contains a magic number: try {  	{  		// src/java/org/apache/lucene/expressions/js/Javascript.g:259:5: ( logical_and ( AT_BOOL_OR ^ logical_and )* )  		// src/java/org/apache/lucene/expressions/js/Javascript.g:259:7: logical_and ( AT_BOOL_OR ^ logical_and )*  		root_0 = (CommonTree)m_adaptor.Nil ();  		PushFollow (FOLLOW_logical_and_in_logical_or787);  		logical_and8 = Logical_And ();  		state._fsp--;  		m_adaptor.AddChild (root_0' logical_and8.Tree);  		// src/java/org/apache/lucene/expressions/js/Javascript.g:259:19: ( AT_BOOL_OR ^ logical_and )*  		while (true) {  			int alt2 = 2;  			int LA2_0 = input.LA (1);  			if ((LA2_0 == AT_BOOL_OR)) {  				alt2 = 1;  			}  			switch (alt2) {  			case 1: {  				// src/java/org/apache/lucene/expressions/js/Javascript.g:259:20: AT_BOOL_OR ^ logical_and  				AT_BOOL_OR9 = (IToken)Match (input' AT_BOOL_OR' FOLLOW_AT_BOOL_OR_in_logical_or790);  				AT_BOOL_OR9_tree = (CommonTree)m_adaptor.Create (AT_BOOL_OR9);  				root_0 = (CommonTree)m_adaptor.BecomeRoot (AT_BOOL_OR9_tree' root_0);  				PushFollow (FOLLOW_logical_and_in_logical_or793);  				logical_and10 = Logical_And ();  				state._fsp--;  				m_adaptor.AddChild (root_0' logical_and10.Tree);  				break;  			}  			default: {  				goto loop2_break;  			}  			}  			//loop2_continue: ; // LUCENENET NOTE: Not used  		}  		loop2_break:  		;  	}  	retval.Stop = input.LT (-1);  	retval.Tree = (CommonTree)m_adaptor.RulePostProcessing (root_0);  	m_adaptor.SetTokenBoundaries (retval.Tree' retval.Start' retval.Stop);  } catch (RecognitionException re) {  	ReportError (re);  	Recover (input' re);  	retval.Tree = (CommonTree)m_adaptor.ErrorNode (input' retval.Start' input.LT (-1)' re);  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Logical_Or,The following statement contains a magic number: while (true) {  	int alt2 = 2;  	int LA2_0 = input.LA (1);  	if ((LA2_0 == AT_BOOL_OR)) {  		alt2 = 1;  	}  	switch (alt2) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:259:20: AT_BOOL_OR ^ logical_and  		AT_BOOL_OR9 = (IToken)Match (input' AT_BOOL_OR' FOLLOW_AT_BOOL_OR_in_logical_or790);  		AT_BOOL_OR9_tree = (CommonTree)m_adaptor.Create (AT_BOOL_OR9);  		root_0 = (CommonTree)m_adaptor.BecomeRoot (AT_BOOL_OR9_tree' root_0);  		PushFollow (FOLLOW_logical_and_in_logical_or793);  		logical_and10 = Logical_And ();  		state._fsp--;  		m_adaptor.AddChild (root_0' logical_and10.Tree);  		break;  	}  	default: {  		goto loop2_break;  	}  	}  	//loop2_continue: ; // LUCENENET NOTE: Not used  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Logical_And,The following statement contains a magic number: try {  	{  		// src/java/org/apache/lucene/expressions/js/Javascript.g:263:5: ( bitwise_or ( AT_BOOL_AND ^ bitwise_or )* )  		// src/java/org/apache/lucene/expressions/js/Javascript.g:263:7: bitwise_or ( AT_BOOL_AND ^ bitwise_or )*  		root = (CommonTree)m_adaptor.Nil ();  		PushFollow (FOLLOW_bitwise_or_in_logical_and812);  		bitwise_or11 = Bitwise_Or ();  		state._fsp--;  		m_adaptor.AddChild (root' bitwise_or11.Tree);  		// src/java/org/apache/lucene/expressions/js/Javascript.g:263:18: ( AT_BOOL_AND ^ bitwise_or )*  		while (true) {  			int alt3 = 2;  			int LA3_0 = input.LA (1);  			if ((LA3_0 == AT_BOOL_AND)) {  				alt3 = 1;  			}  			switch (alt3) {  			case 1: {  				// src/java/org/apache/lucene/expressions/js/Javascript.g:263:19: AT_BOOL_AND ^ bitwise_or  				AT_BOOL_AND12 = (IToken)Match (input' AT_BOOL_AND' FOLLOW_AT_BOOL_AND_in_logical_and815);  				AT_BOOL_AND12_tree = (CommonTree)m_adaptor.Create (AT_BOOL_AND12);  				root = (CommonTree)m_adaptor.BecomeRoot (AT_BOOL_AND12_tree' root);  				PushFollow (FOLLOW_bitwise_or_in_logical_and818);  				bitwise_or13 = Bitwise_Or ();  				state._fsp--;  				m_adaptor.AddChild (root' bitwise_or13.Tree);  				break;  			}  			default: {  				goto loop3_break;  			}  			}  			//loop3_continue: ; // LUCENENET NOTE: Not used  		}  		loop3_break:  		;  	}  	retval.Stop = input.LT (-1);  	retval.Tree = (CommonTree)m_adaptor.RulePostProcessing (root);  	m_adaptor.SetTokenBoundaries (retval.Tree' retval.Start' retval.Stop);  } catch (RecognitionException re) {  	ReportError (re);  	Recover (input' re);  	retval.Tree = (CommonTree)m_adaptor.ErrorNode (input' retval.Start' input.LT (-1)' re);  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Logical_And,The following statement contains a magic number: while (true) {  	int alt3 = 2;  	int LA3_0 = input.LA (1);  	if ((LA3_0 == AT_BOOL_AND)) {  		alt3 = 1;  	}  	switch (alt3) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:263:19: AT_BOOL_AND ^ bitwise_or  		AT_BOOL_AND12 = (IToken)Match (input' AT_BOOL_AND' FOLLOW_AT_BOOL_AND_in_logical_and815);  		AT_BOOL_AND12_tree = (CommonTree)m_adaptor.Create (AT_BOOL_AND12);  		root = (CommonTree)m_adaptor.BecomeRoot (AT_BOOL_AND12_tree' root);  		PushFollow (FOLLOW_bitwise_or_in_logical_and818);  		bitwise_or13 = Bitwise_Or ();  		state._fsp--;  		m_adaptor.AddChild (root' bitwise_or13.Tree);  		break;  	}  	default: {  		goto loop3_break;  	}  	}  	//loop3_continue: ; // LUCENENET NOTE: Not used  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Bitwise_Or,The following statement contains a magic number: try {  	CommonTree root = null;  	{  		// src/java/org/apache/lucene/expressions/js/Javascript.g:267:5: ( bitwise_xor ( AT_BIT_OR ^ bitwise_xor )* )  		// src/java/org/apache/lucene/expressions/js/Javascript.g:267:7: bitwise_xor ( AT_BIT_OR ^ bitwise_xor )*  		root = (CommonTree)m_adaptor.Nil ();  		PushFollow (FOLLOW_bitwise_xor_in_bitwise_or837);  		AstParserRuleReturnScope<ITree' IToken> bitwise_xor14 = Bitwise_XOr ();  		state._fsp--;  		m_adaptor.AddChild (root' bitwise_xor14.Tree);  		// src/java/org/apache/lucene/expressions/js/Javascript.g:267:19: ( AT_BIT_OR ^ bitwise_xor )*  		while (true) {  			int alt4 = 2;  			int LA4_0 = input.LA (1);  			if ((LA4_0 == AT_BIT_OR)) {  				alt4 = 1;  			}  			switch (alt4) {  			case 1: {  				// src/java/org/apache/lucene/expressions/js/Javascript.g:267:20: AT_BIT_OR ^ bitwise_xor  				IToken AT_BIT_OR15 = (IToken)Match (input' AT_BIT_OR' FOLLOW_AT_BIT_OR_in_bitwise_or840);  				CommonTree AT_BIT_OR15_tree = (CommonTree)m_adaptor.Create (AT_BIT_OR15);  				root = (CommonTree)m_adaptor.BecomeRoot (AT_BIT_OR15_tree' root);  				PushFollow (FOLLOW_bitwise_xor_in_bitwise_or843);  				AstParserRuleReturnScope<ITree' IToken> bitwise_xor16 = Bitwise_XOr ();  				state._fsp--;  				m_adaptor.AddChild (root' bitwise_xor16.Tree);  				break;  			}  			default: {  				goto loop4_break;  			}  			}  			//loop4_continue: ; // LUCENENET NOTE: Not used  		}  		loop4_break:  		;  	}  	retval.Stop = input.LT (-1);  	retval.Tree = (CommonTree)m_adaptor.RulePostProcessing (root);  	m_adaptor.SetTokenBoundaries (retval.Tree' retval.Start' retval.Stop);  } catch (RecognitionException re) {  	ReportError (re);  	Recover (input' re);  	retval.Tree = (CommonTree)m_adaptor.ErrorNode (input' retval.Start' input.LT (-1)' re);  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Bitwise_Or,The following statement contains a magic number: while (true) {  	int alt4 = 2;  	int LA4_0 = input.LA (1);  	if ((LA4_0 == AT_BIT_OR)) {  		alt4 = 1;  	}  	switch (alt4) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:267:20: AT_BIT_OR ^ bitwise_xor  		IToken AT_BIT_OR15 = (IToken)Match (input' AT_BIT_OR' FOLLOW_AT_BIT_OR_in_bitwise_or840);  		CommonTree AT_BIT_OR15_tree = (CommonTree)m_adaptor.Create (AT_BIT_OR15);  		root = (CommonTree)m_adaptor.BecomeRoot (AT_BIT_OR15_tree' root);  		PushFollow (FOLLOW_bitwise_xor_in_bitwise_or843);  		AstParserRuleReturnScope<ITree' IToken> bitwise_xor16 = Bitwise_XOr ();  		state._fsp--;  		m_adaptor.AddChild (root' bitwise_xor16.Tree);  		break;  	}  	default: {  		goto loop4_break;  	}  	}  	//loop4_continue: ; // LUCENENET NOTE: Not used  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Bitwise_XOr,The following statement contains a magic number: try {  	CommonTree root = null;  	{  		// src/java/org/apache/lucene/expressions/js/Javascript.g:271:5: ( bitwise_and ( AT_BIT_XOR ^ bitwise_and )* )  		// src/java/org/apache/lucene/expressions/js/Javascript.g:271:7: bitwise_and ( AT_BIT_XOR ^ bitwise_and )*  		root = (CommonTree)m_adaptor.Nil ();  		PushFollow (FOLLOW_bitwise_and_in_bitwise_xor862);  		AstParserRuleReturnScope<ITree' IToken> bitwise_and17 = Bitwise_And ();  		state._fsp--;  		m_adaptor.AddChild (root' bitwise_and17.Tree);  		// src/java/org/apache/lucene/expressions/js/Javascript.g:271:19: ( AT_BIT_XOR ^ bitwise_and )*  		while (true) {  			int alt5 = 2;  			int LA5_0 = input.LA (1);  			if ((LA5_0 == AT_BIT_XOR)) {  				alt5 = 1;  			}  			switch (alt5) {  			case 1: {  				// src/java/org/apache/lucene/expressions/js/Javascript.g:271:20: AT_BIT_XOR ^ bitwise_and  				IToken AT_BIT_XOR18 = (IToken)Match (input' AT_BIT_XOR' FOLLOW_AT_BIT_XOR_in_bitwise_xor865);  				CommonTree AT_BIT_XOR18_tree = (CommonTree)m_adaptor.Create (AT_BIT_XOR18);  				root = (CommonTree)m_adaptor.BecomeRoot (AT_BIT_XOR18_tree' root);  				PushFollow (FOLLOW_bitwise_and_in_bitwise_xor868);  				AstParserRuleReturnScope<ITree' IToken> bitwise_and19 = Bitwise_And ();  				state._fsp--;  				m_adaptor.AddChild (root' bitwise_and19.Tree);  				break;  			}  			default: {  				goto loop5_break;  			}  			}  			//loop5_continue: ; // LUCENENET NOTE: Not used  		}  		loop5_break:  		;  	}  	retval.Stop = input.LT (-1);  	retval.Tree = (CommonTree)m_adaptor.RulePostProcessing (root);  	m_adaptor.SetTokenBoundaries (retval.Tree' retval.Start' retval.Stop);  } catch (RecognitionException re) {  	ReportError (re);  	Recover (input' re);  	retval.Tree = (CommonTree)m_adaptor.ErrorNode (input' retval.Start' input.LT (-1)' re);  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Bitwise_XOr,The following statement contains a magic number: while (true) {  	int alt5 = 2;  	int LA5_0 = input.LA (1);  	if ((LA5_0 == AT_BIT_XOR)) {  		alt5 = 1;  	}  	switch (alt5) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:271:20: AT_BIT_XOR ^ bitwise_and  		IToken AT_BIT_XOR18 = (IToken)Match (input' AT_BIT_XOR' FOLLOW_AT_BIT_XOR_in_bitwise_xor865);  		CommonTree AT_BIT_XOR18_tree = (CommonTree)m_adaptor.Create (AT_BIT_XOR18);  		root = (CommonTree)m_adaptor.BecomeRoot (AT_BIT_XOR18_tree' root);  		PushFollow (FOLLOW_bitwise_and_in_bitwise_xor868);  		AstParserRuleReturnScope<ITree' IToken> bitwise_and19 = Bitwise_And ();  		state._fsp--;  		m_adaptor.AddChild (root' bitwise_and19.Tree);  		break;  	}  	default: {  		goto loop5_break;  	}  	}  	//loop5_continue: ; // LUCENENET NOTE: Not used  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Bitwise_And,The following statement contains a magic number: try {  	CommonTree root = null;  	{  		// src/java/org/apache/lucene/expressions/js/Javascript.g:275:5: ( equality ( AT_BIT_AND ^ equality )* )  		// src/java/org/apache/lucene/expressions/js/Javascript.g:275:8: equality ( AT_BIT_AND ^ equality )*  		root = (CommonTree)m_adaptor.Nil ();  		PushFollow (FOLLOW_equality_in_bitwise_and888);  		AstParserRuleReturnScope<ITree' IToken> equality20 = Equality ();  		state._fsp--;  		m_adaptor.AddChild (root' equality20.Tree);  		// src/java/org/apache/lucene/expressions/js/Javascript.g:275:17: ( AT_BIT_AND ^ equality )*  		while (true) {  			int alt6 = 2;  			int LA6_0 = input.LA (1);  			if ((LA6_0 == AT_BIT_AND)) {  				alt6 = 1;  			}  			switch (alt6) {  			case 1: {  				// src/java/org/apache/lucene/expressions/js/Javascript.g:275:18: AT_BIT_AND ^ equality  				IToken AT_BIT_AND21 = (IToken)Match (input' AT_BIT_AND' FOLLOW_AT_BIT_AND_in_bitwise_and891);  				CommonTree AT_BIT_AND21_tree = (CommonTree)m_adaptor.Create (AT_BIT_AND21);  				root = (CommonTree)m_adaptor.BecomeRoot (AT_BIT_AND21_tree' root);  				PushFollow (FOLLOW_equality_in_bitwise_and894);  				AstParserRuleReturnScope<ITree' IToken> equality22 = Equality ();  				state._fsp--;  				m_adaptor.AddChild (root' equality22.Tree);  				break;  			}  			default: {  				goto loop6_break;  			}  			}  			//loop6_continue: ; // LUCENENET NOTE: Not used  		}  		loop6_break:  		;  	}  	retval.Stop = input.LT (-1);  	retval.Tree = (CommonTree)m_adaptor.RulePostProcessing (root);  	m_adaptor.SetTokenBoundaries (retval.Tree' retval.Start' retval.Stop);  } catch (RecognitionException re) {  	ReportError (re);  	Recover (input' re);  	retval.Tree = (CommonTree)m_adaptor.ErrorNode (input' retval.Start' input.LT (-1)' re);  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Bitwise_And,The following statement contains a magic number: while (true) {  	int alt6 = 2;  	int LA6_0 = input.LA (1);  	if ((LA6_0 == AT_BIT_AND)) {  		alt6 = 1;  	}  	switch (alt6) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:275:18: AT_BIT_AND ^ equality  		IToken AT_BIT_AND21 = (IToken)Match (input' AT_BIT_AND' FOLLOW_AT_BIT_AND_in_bitwise_and891);  		CommonTree AT_BIT_AND21_tree = (CommonTree)m_adaptor.Create (AT_BIT_AND21);  		root = (CommonTree)m_adaptor.BecomeRoot (AT_BIT_AND21_tree' root);  		PushFollow (FOLLOW_equality_in_bitwise_and894);  		AstParserRuleReturnScope<ITree' IToken> equality22 = Equality ();  		state._fsp--;  		m_adaptor.AddChild (root' equality22.Tree);  		break;  	}  	default: {  		goto loop6_break;  	}  	}  	//loop6_continue: ; // LUCENENET NOTE: Not used  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Equality,The following statement contains a magic number: try {  	CommonTree root = null;  	{  		// src/java/org/apache/lucene/expressions/js/Javascript.g:279:5: ( relational ( ( AT_COMP_EQ | AT_COMP_NEQ ) ^ relational )* )  		// src/java/org/apache/lucene/expressions/js/Javascript.g:279:7: relational ( ( AT_COMP_EQ | AT_COMP_NEQ ) ^ relational )*  		root = (CommonTree)m_adaptor.Nil ();  		PushFollow (FOLLOW_relational_in_equality913);  		AstParserRuleReturnScope<ITree' IToken> relational23 = Relational ();  		state._fsp--;  		m_adaptor.AddChild (root' relational23.Tree);  		// src/java/org/apache/lucene/expressions/js/Javascript.g:279:18: ( ( AT_COMP_EQ | AT_COMP_NEQ ) ^ relational )*  		while (true) {  			int alt7 = 2;  			int LA7_0 = input.LA (1);  			if ((LA7_0 == AT_COMP_EQ || LA7_0 == AT_COMP_NEQ)) {  				alt7 = 1;  			}  			switch (alt7) {  			case 1: {  				// src/java/org/apache/lucene/expressions/js/Javascript.g:279:19: ( AT_COMP_EQ | AT_COMP_NEQ ) ^ relational  				IToken set24 = input.LT (1);  				set24 = input.LT (1);  				if (input.LA (1) == AT_COMP_EQ || input.LA (1) == AT_COMP_NEQ) {  					input.Consume ();  					root = (CommonTree)m_adaptor.BecomeRoot ((CommonTree)m_adaptor.Create (set24)' root);  					state.errorRecovery = false;  				} else {  					MismatchedSetException mse = new MismatchedSetException (null' input);  					throw mse;  				}  				PushFollow (FOLLOW_relational_in_equality925);  				AstParserRuleReturnScope<ITree' IToken> relational25 = Relational ();  				state._fsp--;  				m_adaptor.AddChild (root' relational25.Tree);  				break;  			}  			default: {  				goto loop7_break;  			}  			}  			//loop7_continue: ; // LUCENENET NOTE: Not used  		}  		loop7_break:  		;  	}  	retval.Stop = input.LT (-1);  	retval.Tree = (CommonTree)m_adaptor.RulePostProcessing (root);  	m_adaptor.SetTokenBoundaries (retval.Tree' retval.Start' retval.Stop);  } catch (RecognitionException re) {  	ReportError (re);  	Recover (input' re);  	retval.Tree = (CommonTree)m_adaptor.ErrorNode (input' retval.Start' input.LT (-1)' re);  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Equality,The following statement contains a magic number: while (true) {  	int alt7 = 2;  	int LA7_0 = input.LA (1);  	if ((LA7_0 == AT_COMP_EQ || LA7_0 == AT_COMP_NEQ)) {  		alt7 = 1;  	}  	switch (alt7) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:279:19: ( AT_COMP_EQ | AT_COMP_NEQ ) ^ relational  		IToken set24 = input.LT (1);  		set24 = input.LT (1);  		if (input.LA (1) == AT_COMP_EQ || input.LA (1) == AT_COMP_NEQ) {  			input.Consume ();  			root = (CommonTree)m_adaptor.BecomeRoot ((CommonTree)m_adaptor.Create (set24)' root);  			state.errorRecovery = false;  		} else {  			MismatchedSetException mse = new MismatchedSetException (null' input);  			throw mse;  		}  		PushFollow (FOLLOW_relational_in_equality925);  		AstParserRuleReturnScope<ITree' IToken> relational25 = Relational ();  		state._fsp--;  		m_adaptor.AddChild (root' relational25.Tree);  		break;  	}  	default: {  		goto loop7_break;  	}  	}  	//loop7_continue: ; // LUCENENET NOTE: Not used  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Relational,The following statement contains a magic number: try {  	CommonTree root = null;  	{  		// src/java/org/apache/lucene/expressions/js/Javascript.g:283:5: ( shift ( ( AT_COMP_LT | AT_COMP_GT | AT_COMP_LTE | AT_COMP_GTE ) ^ shift )* )  		// src/java/org/apache/lucene/expressions/js/Javascript.g:283:7: shift ( ( AT_COMP_LT | AT_COMP_GT | AT_COMP_LTE | AT_COMP_GTE ) ^ shift )*  		root = (CommonTree)m_adaptor.Nil ();  		PushFollow (FOLLOW_shift_in_relational944);  		AstParserRuleReturnScope<ITree' IToken> shift26 = Shift ();  		state._fsp--;  		m_adaptor.AddChild (root' shift26.Tree);  		// src/java/org/apache/lucene/expressions/js/Javascript.g:283:13: ( ( AT_COMP_LT | AT_COMP_GT | AT_COMP_LTE | AT_COMP_GTE ) ^ shift )*  		while (true) {  			int alt8 = 2;  			int LA8_0 = input.LA (1);  			if (((LA8_0 >= AT_COMP_GT && LA8_0 <= AT_COMP_LTE))) {  				alt8 = 1;  			}  			switch (alt8) {  			case 1: {  				// src/java/org/apache/lucene/expressions/js/Javascript.g:283:14: ( AT_COMP_LT | AT_COMP_GT | AT_COMP_LTE | AT_COMP_GTE ) ^ shift  				IToken set27 = input.LT (1);  				set27 = input.LT (1);  				if ((input.LA (1) >= AT_COMP_GT && input.LA (1) <= AT_COMP_LTE)) {  					input.Consume ();  					root = (CommonTree)m_adaptor.BecomeRoot ((CommonTree)m_adaptor.Create (set27)' root);  					state.errorRecovery = false;  				} else {  					MismatchedSetException mse = new MismatchedSetException (null' input);  					throw mse;  				}  				PushFollow (FOLLOW_shift_in_relational964);  				AstParserRuleReturnScope<ITree' IToken> shift28 = Shift ();  				state._fsp--;  				m_adaptor.AddChild (root' shift28.Tree);  				break;  			}  			default: {  				goto loop8_break;  			}  			}  			//loop8_continue: ; // LUCENENET NOTE: Not used  		}  		loop8_break:  		;  	}  	retval.Stop = input.LT (-1);  	retval.Tree = (CommonTree)m_adaptor.RulePostProcessing (root);  	m_adaptor.SetTokenBoundaries (retval.Tree' retval.Start' retval.Stop);  } catch (RecognitionException re) {  	ReportError (re);  	Recover (input' re);  	retval.Tree = (CommonTree)m_adaptor.ErrorNode (input' retval.Start' input.LT (-1)' re);  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Relational,The following statement contains a magic number: while (true) {  	int alt8 = 2;  	int LA8_0 = input.LA (1);  	if (((LA8_0 >= AT_COMP_GT && LA8_0 <= AT_COMP_LTE))) {  		alt8 = 1;  	}  	switch (alt8) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:283:14: ( AT_COMP_LT | AT_COMP_GT | AT_COMP_LTE | AT_COMP_GTE ) ^ shift  		IToken set27 = input.LT (1);  		set27 = input.LT (1);  		if ((input.LA (1) >= AT_COMP_GT && input.LA (1) <= AT_COMP_LTE)) {  			input.Consume ();  			root = (CommonTree)m_adaptor.BecomeRoot ((CommonTree)m_adaptor.Create (set27)' root);  			state.errorRecovery = false;  		} else {  			MismatchedSetException mse = new MismatchedSetException (null' input);  			throw mse;  		}  		PushFollow (FOLLOW_shift_in_relational964);  		AstParserRuleReturnScope<ITree' IToken> shift28 = Shift ();  		state._fsp--;  		m_adaptor.AddChild (root' shift28.Tree);  		break;  	}  	default: {  		goto loop8_break;  	}  	}  	//loop8_continue: ; // LUCENENET NOTE: Not used  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Shift,The following statement contains a magic number: try {  	CommonTree root = null;  	{  		// src/java/org/apache/lucene/expressions/js/Javascript.g:287:5: ( additive ( ( AT_BIT_SHL | AT_BIT_SHR | AT_BIT_SHU ) ^ additive )* )  		// src/java/org/apache/lucene/expressions/js/Javascript.g:287:7: additive ( ( AT_BIT_SHL | AT_BIT_SHR | AT_BIT_SHU ) ^ additive )*  		root = (CommonTree)m_adaptor.Nil ();  		PushFollow (FOLLOW_additive_in_shift983);  		AstParserRuleReturnScope<ITree' IToken> additive29 = Additive ();  		state._fsp--;  		m_adaptor.AddChild (root' additive29.Tree);  		// src/java/org/apache/lucene/expressions/js/Javascript.g:287:16: ( ( AT_BIT_SHL | AT_BIT_SHR | AT_BIT_SHU ) ^ additive )*  		while (true) {  			int alt9 = 2;  			int LA9_0 = input.LA (1);  			if (((LA9_0 >= AT_BIT_SHL && LA9_0 <= AT_BIT_SHU))) {  				alt9 = 1;  			}  			switch (alt9) {  			case 1: {  				// src/java/org/apache/lucene/expressions/js/Javascript.g:287:17: ( AT_BIT_SHL | AT_BIT_SHR | AT_BIT_SHU ) ^ additive  				IToken set30 = input.LT (1);  				set30 = input.LT (1);  				if ((input.LA (1) >= AT_BIT_SHL && input.LA (1) <= AT_BIT_SHU)) {  					input.Consume ();  					root = (CommonTree)m_adaptor.BecomeRoot ((CommonTree)m_adaptor.Create (set30)' root);  					state.errorRecovery = false;  				} else {  					MismatchedSetException mse = new MismatchedSetException (null' input);  					throw mse;  				}  				PushFollow (FOLLOW_additive_in_shift999);  				AstParserRuleReturnScope<ITree' IToken> additive31 = Additive ();  				state._fsp--;  				m_adaptor.AddChild (root' additive31.Tree);  				break;  			}  			default: {  				goto loop9_break;  			}  			}  			//loop9_continue: ; // LUCENENET NOTE: Not used  		}  		loop9_break:  		;  	}  	retval.Stop = input.LT (-1);  	retval.Tree = (CommonTree)m_adaptor.RulePostProcessing (root);  	m_adaptor.SetTokenBoundaries (retval.Tree' retval.Start' retval.Stop);  } catch (RecognitionException re) {  	ReportError (re);  	Recover (input' re);  	retval.Tree = (CommonTree)m_adaptor.ErrorNode (input' retval.Start' input.LT (-1)' re);  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Shift,The following statement contains a magic number: while (true) {  	int alt9 = 2;  	int LA9_0 = input.LA (1);  	if (((LA9_0 >= AT_BIT_SHL && LA9_0 <= AT_BIT_SHU))) {  		alt9 = 1;  	}  	switch (alt9) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:287:17: ( AT_BIT_SHL | AT_BIT_SHR | AT_BIT_SHU ) ^ additive  		IToken set30 = input.LT (1);  		set30 = input.LT (1);  		if ((input.LA (1) >= AT_BIT_SHL && input.LA (1) <= AT_BIT_SHU)) {  			input.Consume ();  			root = (CommonTree)m_adaptor.BecomeRoot ((CommonTree)m_adaptor.Create (set30)' root);  			state.errorRecovery = false;  		} else {  			MismatchedSetException mse = new MismatchedSetException (null' input);  			throw mse;  		}  		PushFollow (FOLLOW_additive_in_shift999);  		AstParserRuleReturnScope<ITree' IToken> additive31 = Additive ();  		state._fsp--;  		m_adaptor.AddChild (root' additive31.Tree);  		break;  	}  	default: {  		goto loop9_break;  	}  	}  	//loop9_continue: ; // LUCENENET NOTE: Not used  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Additive,The following statement contains a magic number: try {  	CommonTree root = null;  	{  		// src/java/org/apache/lucene/expressions/js/Javascript.g:291:5: ( multiplicative ( ( AT_ADD | AT_SUBTRACT ) ^ multiplicative )* )  		// src/java/org/apache/lucene/expressions/js/Javascript.g:291:7: multiplicative ( ( AT_ADD | AT_SUBTRACT ) ^ multiplicative )*  		root = (CommonTree)m_adaptor.Nil ();  		PushFollow (FOLLOW_multiplicative_in_additive1018);  		AstParserRuleReturnScope<ITree' IToken> multiplicative32 = Multiplicative ();  		state._fsp--;  		m_adaptor.AddChild (root' multiplicative32.Tree);  		// src/java/org/apache/lucene/expressions/js/Javascript.g:291:22: ( ( AT_ADD | AT_SUBTRACT ) ^ multiplicative )*  		while (true) {  			int alt10 = 2;  			int LA10_0 = input.LA (1);  			if ((LA10_0 == AT_ADD || LA10_0 == AT_SUBTRACT)) {  				alt10 = 1;  			}  			switch (alt10) {  			case 1: {  				// src/java/org/apache/lucene/expressions/js/Javascript.g:291:23: ( AT_ADD | AT_SUBTRACT ) ^ multiplicative  				IToken set33 = input.LT (1);  				set33 = input.LT (1);  				if (input.LA (1) == AT_ADD || input.LA (1) == AT_SUBTRACT) {  					input.Consume ();  					root = (CommonTree)m_adaptor.BecomeRoot ((CommonTree)m_adaptor.Create (set33)' root);  					state.errorRecovery = false;  				} else {  					MismatchedSetException mse = new MismatchedSetException (null' input);  					throw mse;  				}  				PushFollow (FOLLOW_multiplicative_in_additive1030);  				AstParserRuleReturnScope<ITree' IToken> multiplicative34 = Multiplicative ();  				state._fsp--;  				m_adaptor.AddChild (root' multiplicative34.Tree);  				break;  			}  			default: {  				goto loop10_break;  			}  			}  			//loop10_continue: ; // LUCENENET NOTE: Not used  		}  		loop10_break:  		;  	}  	retval.Stop = input.LT (-1);  	retval.Tree = (CommonTree)m_adaptor.RulePostProcessing (root);  	m_adaptor.SetTokenBoundaries (retval.Tree' retval.Start' retval.Stop);  } catch (RecognitionException re) {  	ReportError (re);  	Recover (input' re);  	retval.Tree = (CommonTree)m_adaptor.ErrorNode (input' retval.Start' input.LT (-1)' re);  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Additive,The following statement contains a magic number: while (true) {  	int alt10 = 2;  	int LA10_0 = input.LA (1);  	if ((LA10_0 == AT_ADD || LA10_0 == AT_SUBTRACT)) {  		alt10 = 1;  	}  	switch (alt10) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:291:23: ( AT_ADD | AT_SUBTRACT ) ^ multiplicative  		IToken set33 = input.LT (1);  		set33 = input.LT (1);  		if (input.LA (1) == AT_ADD || input.LA (1) == AT_SUBTRACT) {  			input.Consume ();  			root = (CommonTree)m_adaptor.BecomeRoot ((CommonTree)m_adaptor.Create (set33)' root);  			state.errorRecovery = false;  		} else {  			MismatchedSetException mse = new MismatchedSetException (null' input);  			throw mse;  		}  		PushFollow (FOLLOW_multiplicative_in_additive1030);  		AstParserRuleReturnScope<ITree' IToken> multiplicative34 = Multiplicative ();  		state._fsp--;  		m_adaptor.AddChild (root' multiplicative34.Tree);  		break;  	}  	default: {  		goto loop10_break;  	}  	}  	//loop10_continue: ; // LUCENENET NOTE: Not used  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Multiplicative,The following statement contains a magic number: try {  	CommonTree root = null;  	{  		// src/java/org/apache/lucene/expressions/js/Javascript.g:295:5: ( unary ( ( AT_MULTIPLY | AT_DIVIDE | AT_MODULO ) ^ unary )* )  		// src/java/org/apache/lucene/expressions/js/Javascript.g:295:7: unary ( ( AT_MULTIPLY | AT_DIVIDE | AT_MODULO ) ^ unary )*  		root = (CommonTree)m_adaptor.Nil ();  		PushFollow (FOLLOW_unary_in_multiplicative1049);  		AstParserRuleReturnScope<ITree' IToken> unary35 = Unary ();  		state._fsp--;  		m_adaptor.AddChild (root' unary35.Tree);  		// src/java/org/apache/lucene/expressions/js/Javascript.g:295:13: ( ( AT_MULTIPLY | AT_DIVIDE | AT_MODULO ) ^ unary )*  		while (true) {  			int alt11 = 2;  			int LA11_0 = input.LA (1);  			if ((LA11_0 == AT_DIVIDE || (LA11_0 >= AT_MODULO && LA11_0 <= AT_MULTIPLY))) {  				alt11 = 1;  			}  			switch (alt11) {  			case 1: {  				// src/java/org/apache/lucene/expressions/js/Javascript.g:295:14: ( AT_MULTIPLY | AT_DIVIDE | AT_MODULO ) ^ unary  				IToken set36 = input.LT (1);  				set36 = input.LT (1);  				if (input.LA (1) == AT_DIVIDE || (input.LA (1) >= AT_MODULO && input.LA (1) <= AT_MULTIPLY)) {  					input.Consume ();  					root = (CommonTree)m_adaptor.BecomeRoot ((CommonTree)m_adaptor.Create (set36)' root);  					state.errorRecovery = false;  				} else {  					MismatchedSetException mse = new MismatchedSetException (null' input);  					throw mse;  				}  				PushFollow (FOLLOW_unary_in_multiplicative1065);  				AstParserRuleReturnScope<ITree' IToken> unary37 = Unary ();  				state._fsp--;  				m_adaptor.AddChild (root' unary37.Tree);  				break;  			}  			default: {  				goto loop11_break;  			}  			}  			//loop11_continue: ; // LUCENENET NOTE: Not used  		}  		loop11_break:  		;  	}  	retval.Stop = input.LT (-1);  	retval.Tree = (CommonTree)m_adaptor.RulePostProcessing (root);  	m_adaptor.SetTokenBoundaries (retval.Tree' retval.Start' retval.Stop);  } catch (RecognitionException re) {  	ReportError (re);  	Recover (input' re);  	retval.Tree = (CommonTree)m_adaptor.ErrorNode (input' retval.Start' input.LT (-1)' re);  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Multiplicative,The following statement contains a magic number: while (true) {  	int alt11 = 2;  	int LA11_0 = input.LA (1);  	if ((LA11_0 == AT_DIVIDE || (LA11_0 >= AT_MODULO && LA11_0 <= AT_MULTIPLY))) {  		alt11 = 1;  	}  	switch (alt11) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:295:14: ( AT_MULTIPLY | AT_DIVIDE | AT_MODULO ) ^ unary  		IToken set36 = input.LT (1);  		set36 = input.LT (1);  		if (input.LA (1) == AT_DIVIDE || (input.LA (1) >= AT_MODULO && input.LA (1) <= AT_MULTIPLY)) {  			input.Consume ();  			root = (CommonTree)m_adaptor.BecomeRoot ((CommonTree)m_adaptor.Create (set36)' root);  			state.errorRecovery = false;  		} else {  			MismatchedSetException mse = new MismatchedSetException (null' input);  			throw mse;  		}  		PushFollow (FOLLOW_unary_in_multiplicative1065);  		AstParserRuleReturnScope<ITree' IToken> unary37 = Unary ();  		state._fsp--;  		m_adaptor.AddChild (root' unary37.Tree);  		break;  	}  	default: {  		goto loop11_break;  	}  	}  	//loop11_continue: ; // LUCENENET NOTE: Not used  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Unary,The following statement contains a magic number: try {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:299:5: ( postfix | AT_ADD ! unary | unary_operator ^ unary )  	int alt12 = 3;  	switch (input.LA (1)) {  	case AT_LPAREN:  	case DECIMAL:  	case HEX:  	case NAMESPACE_ID:  	case OCTAL: {  		alt12 = 1;  		break;  	}  	case AT_ADD: {  		alt12 = 2;  		break;  	}  	case AT_BIT_NOT:  	case AT_BOOL_NOT:  	case AT_SUBTRACT: {  		alt12 = 3;  		break;  	}  	default: {  		NoViableAltException nvae = new NoViableAltException (string.Empty' 12' 0' input);  		throw nvae;  	}  	}  	switch (alt12) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:299:7: postfix  		root = (CommonTree)m_adaptor.Nil ();  		PushFollow (FOLLOW_postfix_in_unary1084);  		AstParserRuleReturnScope<ITree' IToken> postfix38 = Postfix ();  		state._fsp--;  		m_adaptor.AddChild (root' postfix38.Tree);  		break;  	}  	case 2: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:300:7: AT_ADD ! unary  		root = (CommonTree)m_adaptor.Nil ();  		IToken AT_ADD39 = (IToken)Match (input' AT_ADD' FOLLOW_AT_ADD_in_unary1092);  		PushFollow (FOLLOW_unary_in_unary1095);  		AstParserRuleReturnScope<ITree' IToken> unary40 = Unary ();  		state._fsp--;  		m_adaptor.AddChild (root' unary40.Tree);  		break;  	}  	case 3: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:301:7: unary_operator ^ unary  		root = (CommonTree)m_adaptor.Nil ();  		PushFollow (FOLLOW_unary_operator_in_unary1103);  		AstParserRuleReturnScope<ITree' IToken> unary_operator41 = Unary_Operator ();  		state._fsp--;  		root = (CommonTree)m_adaptor.BecomeRoot (unary_operator41.Tree' root);  		PushFollow (FOLLOW_unary_in_unary1106);  		AstParserRuleReturnScope<ITree' IToken> unary42 = Unary ();  		state._fsp--;  		m_adaptor.AddChild (root' unary42.Tree);  		break;  	}  	}  	retval.Stop = input.LT (-1);  	retval.Tree = (CommonTree)m_adaptor.RulePostProcessing (root);  	m_adaptor.SetTokenBoundaries (retval.Tree' retval.Start' retval.Stop);  } catch (RecognitionException re) {  	ReportError (re);  	Recover (input' re);  	retval.Tree = (CommonTree)m_adaptor.ErrorNode (input' retval.Start' input.LT (-1)' re);  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Unary,The following statement contains a magic number: try {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:299:5: ( postfix | AT_ADD ! unary | unary_operator ^ unary )  	int alt12 = 3;  	switch (input.LA (1)) {  	case AT_LPAREN:  	case DECIMAL:  	case HEX:  	case NAMESPACE_ID:  	case OCTAL: {  		alt12 = 1;  		break;  	}  	case AT_ADD: {  		alt12 = 2;  		break;  	}  	case AT_BIT_NOT:  	case AT_BOOL_NOT:  	case AT_SUBTRACT: {  		alt12 = 3;  		break;  	}  	default: {  		NoViableAltException nvae = new NoViableAltException (string.Empty' 12' 0' input);  		throw nvae;  	}  	}  	switch (alt12) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:299:7: postfix  		root = (CommonTree)m_adaptor.Nil ();  		PushFollow (FOLLOW_postfix_in_unary1084);  		AstParserRuleReturnScope<ITree' IToken> postfix38 = Postfix ();  		state._fsp--;  		m_adaptor.AddChild (root' postfix38.Tree);  		break;  	}  	case 2: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:300:7: AT_ADD ! unary  		root = (CommonTree)m_adaptor.Nil ();  		IToken AT_ADD39 = (IToken)Match (input' AT_ADD' FOLLOW_AT_ADD_in_unary1092);  		PushFollow (FOLLOW_unary_in_unary1095);  		AstParserRuleReturnScope<ITree' IToken> unary40 = Unary ();  		state._fsp--;  		m_adaptor.AddChild (root' unary40.Tree);  		break;  	}  	case 3: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:301:7: unary_operator ^ unary  		root = (CommonTree)m_adaptor.Nil ();  		PushFollow (FOLLOW_unary_operator_in_unary1103);  		AstParserRuleReturnScope<ITree' IToken> unary_operator41 = Unary_Operator ();  		state._fsp--;  		root = (CommonTree)m_adaptor.BecomeRoot (unary_operator41.Tree' root);  		PushFollow (FOLLOW_unary_in_unary1106);  		AstParserRuleReturnScope<ITree' IToken> unary42 = Unary ();  		state._fsp--;  		m_adaptor.AddChild (root' unary42.Tree);  		break;  	}  	}  	retval.Stop = input.LT (-1);  	retval.Tree = (CommonTree)m_adaptor.RulePostProcessing (root);  	m_adaptor.SetTokenBoundaries (retval.Tree' retval.Start' retval.Stop);  } catch (RecognitionException re) {  	ReportError (re);  	Recover (input' re);  	retval.Tree = (CommonTree)m_adaptor.ErrorNode (input' retval.Start' input.LT (-1)' re);  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Unary,The following statement contains a magic number: try {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:299:5: ( postfix | AT_ADD ! unary | unary_operator ^ unary )  	int alt12 = 3;  	switch (input.LA (1)) {  	case AT_LPAREN:  	case DECIMAL:  	case HEX:  	case NAMESPACE_ID:  	case OCTAL: {  		alt12 = 1;  		break;  	}  	case AT_ADD: {  		alt12 = 2;  		break;  	}  	case AT_BIT_NOT:  	case AT_BOOL_NOT:  	case AT_SUBTRACT: {  		alt12 = 3;  		break;  	}  	default: {  		NoViableAltException nvae = new NoViableAltException (string.Empty' 12' 0' input);  		throw nvae;  	}  	}  	switch (alt12) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:299:7: postfix  		root = (CommonTree)m_adaptor.Nil ();  		PushFollow (FOLLOW_postfix_in_unary1084);  		AstParserRuleReturnScope<ITree' IToken> postfix38 = Postfix ();  		state._fsp--;  		m_adaptor.AddChild (root' postfix38.Tree);  		break;  	}  	case 2: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:300:7: AT_ADD ! unary  		root = (CommonTree)m_adaptor.Nil ();  		IToken AT_ADD39 = (IToken)Match (input' AT_ADD' FOLLOW_AT_ADD_in_unary1092);  		PushFollow (FOLLOW_unary_in_unary1095);  		AstParserRuleReturnScope<ITree' IToken> unary40 = Unary ();  		state._fsp--;  		m_adaptor.AddChild (root' unary40.Tree);  		break;  	}  	case 3: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:301:7: unary_operator ^ unary  		root = (CommonTree)m_adaptor.Nil ();  		PushFollow (FOLLOW_unary_operator_in_unary1103);  		AstParserRuleReturnScope<ITree' IToken> unary_operator41 = Unary_Operator ();  		state._fsp--;  		root = (CommonTree)m_adaptor.BecomeRoot (unary_operator41.Tree' root);  		PushFollow (FOLLOW_unary_in_unary1106);  		AstParserRuleReturnScope<ITree' IToken> unary42 = Unary ();  		state._fsp--;  		m_adaptor.AddChild (root' unary42.Tree);  		break;  	}  	}  	retval.Stop = input.LT (-1);  	retval.Tree = (CommonTree)m_adaptor.RulePostProcessing (root);  	m_adaptor.SetTokenBoundaries (retval.Tree' retval.Start' retval.Stop);  } catch (RecognitionException re) {  	ReportError (re);  	Recover (input' re);  	retval.Tree = (CommonTree)m_adaptor.ErrorNode (input' retval.Start' input.LT (-1)' re);  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Unary,The following statement contains a magic number: try {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:299:5: ( postfix | AT_ADD ! unary | unary_operator ^ unary )  	int alt12 = 3;  	switch (input.LA (1)) {  	case AT_LPAREN:  	case DECIMAL:  	case HEX:  	case NAMESPACE_ID:  	case OCTAL: {  		alt12 = 1;  		break;  	}  	case AT_ADD: {  		alt12 = 2;  		break;  	}  	case AT_BIT_NOT:  	case AT_BOOL_NOT:  	case AT_SUBTRACT: {  		alt12 = 3;  		break;  	}  	default: {  		NoViableAltException nvae = new NoViableAltException (string.Empty' 12' 0' input);  		throw nvae;  	}  	}  	switch (alt12) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:299:7: postfix  		root = (CommonTree)m_adaptor.Nil ();  		PushFollow (FOLLOW_postfix_in_unary1084);  		AstParserRuleReturnScope<ITree' IToken> postfix38 = Postfix ();  		state._fsp--;  		m_adaptor.AddChild (root' postfix38.Tree);  		break;  	}  	case 2: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:300:7: AT_ADD ! unary  		root = (CommonTree)m_adaptor.Nil ();  		IToken AT_ADD39 = (IToken)Match (input' AT_ADD' FOLLOW_AT_ADD_in_unary1092);  		PushFollow (FOLLOW_unary_in_unary1095);  		AstParserRuleReturnScope<ITree' IToken> unary40 = Unary ();  		state._fsp--;  		m_adaptor.AddChild (root' unary40.Tree);  		break;  	}  	case 3: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:301:7: unary_operator ^ unary  		root = (CommonTree)m_adaptor.Nil ();  		PushFollow (FOLLOW_unary_operator_in_unary1103);  		AstParserRuleReturnScope<ITree' IToken> unary_operator41 = Unary_Operator ();  		state._fsp--;  		root = (CommonTree)m_adaptor.BecomeRoot (unary_operator41.Tree' root);  		PushFollow (FOLLOW_unary_in_unary1106);  		AstParserRuleReturnScope<ITree' IToken> unary42 = Unary ();  		state._fsp--;  		m_adaptor.AddChild (root' unary42.Tree);  		break;  	}  	}  	retval.Stop = input.LT (-1);  	retval.Tree = (CommonTree)m_adaptor.RulePostProcessing (root);  	m_adaptor.SetTokenBoundaries (retval.Tree' retval.Start' retval.Stop);  } catch (RecognitionException re) {  	ReportError (re);  	Recover (input' re);  	retval.Tree = (CommonTree)m_adaptor.ErrorNode (input' retval.Start' input.LT (-1)' re);  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Unary,The following statement contains a magic number: try {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:299:5: ( postfix | AT_ADD ! unary | unary_operator ^ unary )  	int alt12 = 3;  	switch (input.LA (1)) {  	case AT_LPAREN:  	case DECIMAL:  	case HEX:  	case NAMESPACE_ID:  	case OCTAL: {  		alt12 = 1;  		break;  	}  	case AT_ADD: {  		alt12 = 2;  		break;  	}  	case AT_BIT_NOT:  	case AT_BOOL_NOT:  	case AT_SUBTRACT: {  		alt12 = 3;  		break;  	}  	default: {  		NoViableAltException nvae = new NoViableAltException (string.Empty' 12' 0' input);  		throw nvae;  	}  	}  	switch (alt12) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:299:7: postfix  		root = (CommonTree)m_adaptor.Nil ();  		PushFollow (FOLLOW_postfix_in_unary1084);  		AstParserRuleReturnScope<ITree' IToken> postfix38 = Postfix ();  		state._fsp--;  		m_adaptor.AddChild (root' postfix38.Tree);  		break;  	}  	case 2: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:300:7: AT_ADD ! unary  		root = (CommonTree)m_adaptor.Nil ();  		IToken AT_ADD39 = (IToken)Match (input' AT_ADD' FOLLOW_AT_ADD_in_unary1092);  		PushFollow (FOLLOW_unary_in_unary1095);  		AstParserRuleReturnScope<ITree' IToken> unary40 = Unary ();  		state._fsp--;  		m_adaptor.AddChild (root' unary40.Tree);  		break;  	}  	case 3: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:301:7: unary_operator ^ unary  		root = (CommonTree)m_adaptor.Nil ();  		PushFollow (FOLLOW_unary_operator_in_unary1103);  		AstParserRuleReturnScope<ITree' IToken> unary_operator41 = Unary_Operator ();  		state._fsp--;  		root = (CommonTree)m_adaptor.BecomeRoot (unary_operator41.Tree' root);  		PushFollow (FOLLOW_unary_in_unary1106);  		AstParserRuleReturnScope<ITree' IToken> unary42 = Unary ();  		state._fsp--;  		m_adaptor.AddChild (root' unary42.Tree);  		break;  	}  	}  	retval.Stop = input.LT (-1);  	retval.Tree = (CommonTree)m_adaptor.RulePostProcessing (root);  	m_adaptor.SetTokenBoundaries (retval.Tree' retval.Start' retval.Stop);  } catch (RecognitionException re) {  	ReportError (re);  	Recover (input' re);  	retval.Tree = (CommonTree)m_adaptor.ErrorNode (input' retval.Start' input.LT (-1)' re);  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Unary,The following statement contains a magic number: try {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:299:5: ( postfix | AT_ADD ! unary | unary_operator ^ unary )  	int alt12 = 3;  	switch (input.LA (1)) {  	case AT_LPAREN:  	case DECIMAL:  	case HEX:  	case NAMESPACE_ID:  	case OCTAL: {  		alt12 = 1;  		break;  	}  	case AT_ADD: {  		alt12 = 2;  		break;  	}  	case AT_BIT_NOT:  	case AT_BOOL_NOT:  	case AT_SUBTRACT: {  		alt12 = 3;  		break;  	}  	default: {  		NoViableAltException nvae = new NoViableAltException (string.Empty' 12' 0' input);  		throw nvae;  	}  	}  	switch (alt12) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:299:7: postfix  		root = (CommonTree)m_adaptor.Nil ();  		PushFollow (FOLLOW_postfix_in_unary1084);  		AstParserRuleReturnScope<ITree' IToken> postfix38 = Postfix ();  		state._fsp--;  		m_adaptor.AddChild (root' postfix38.Tree);  		break;  	}  	case 2: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:300:7: AT_ADD ! unary  		root = (CommonTree)m_adaptor.Nil ();  		IToken AT_ADD39 = (IToken)Match (input' AT_ADD' FOLLOW_AT_ADD_in_unary1092);  		PushFollow (FOLLOW_unary_in_unary1095);  		AstParserRuleReturnScope<ITree' IToken> unary40 = Unary ();  		state._fsp--;  		m_adaptor.AddChild (root' unary40.Tree);  		break;  	}  	case 3: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:301:7: unary_operator ^ unary  		root = (CommonTree)m_adaptor.Nil ();  		PushFollow (FOLLOW_unary_operator_in_unary1103);  		AstParserRuleReturnScope<ITree' IToken> unary_operator41 = Unary_Operator ();  		state._fsp--;  		root = (CommonTree)m_adaptor.BecomeRoot (unary_operator41.Tree' root);  		PushFollow (FOLLOW_unary_in_unary1106);  		AstParserRuleReturnScope<ITree' IToken> unary42 = Unary ();  		state._fsp--;  		m_adaptor.AddChild (root' unary42.Tree);  		break;  	}  	}  	retval.Stop = input.LT (-1);  	retval.Tree = (CommonTree)m_adaptor.RulePostProcessing (root);  	m_adaptor.SetTokenBoundaries (retval.Tree' retval.Start' retval.Stop);  } catch (RecognitionException re) {  	ReportError (re);  	Recover (input' re);  	retval.Tree = (CommonTree)m_adaptor.ErrorNode (input' retval.Start' input.LT (-1)' re);  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Unary,The following statement contains a magic number: switch (input.LA (1)) {  case AT_LPAREN:  case DECIMAL:  case HEX:  case NAMESPACE_ID:  case OCTAL: {  	alt12 = 1;  	break;  }  case AT_ADD: {  	alt12 = 2;  	break;  }  case AT_BIT_NOT:  case AT_BOOL_NOT:  case AT_SUBTRACT: {  	alt12 = 3;  	break;  }  default: {  	NoViableAltException nvae = new NoViableAltException (string.Empty' 12' 0' input);  	throw nvae;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Unary,The following statement contains a magic number: switch (input.LA (1)) {  case AT_LPAREN:  case DECIMAL:  case HEX:  case NAMESPACE_ID:  case OCTAL: {  	alt12 = 1;  	break;  }  case AT_ADD: {  	alt12 = 2;  	break;  }  case AT_BIT_NOT:  case AT_BOOL_NOT:  case AT_SUBTRACT: {  	alt12 = 3;  	break;  }  default: {  	NoViableAltException nvae = new NoViableAltException (string.Empty' 12' 0' input);  	throw nvae;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Unary,The following statement contains a magic number: switch (input.LA (1)) {  case AT_LPAREN:  case DECIMAL:  case HEX:  case NAMESPACE_ID:  case OCTAL: {  	alt12 = 1;  	break;  }  case AT_ADD: {  	alt12 = 2;  	break;  }  case AT_BIT_NOT:  case AT_BOOL_NOT:  case AT_SUBTRACT: {  	alt12 = 3;  	break;  }  default: {  	NoViableAltException nvae = new NoViableAltException (string.Empty' 12' 0' input);  	throw nvae;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Unary,The following statement contains a magic number: alt12 = 2;  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Unary,The following statement contains a magic number: alt12 = 3;  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Unary,The following statement contains a magic number: switch (alt12) {  case 1: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:299:7: postfix  	root = (CommonTree)m_adaptor.Nil ();  	PushFollow (FOLLOW_postfix_in_unary1084);  	AstParserRuleReturnScope<ITree' IToken> postfix38 = Postfix ();  	state._fsp--;  	m_adaptor.AddChild (root' postfix38.Tree);  	break;  }  case 2: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:300:7: AT_ADD ! unary  	root = (CommonTree)m_adaptor.Nil ();  	IToken AT_ADD39 = (IToken)Match (input' AT_ADD' FOLLOW_AT_ADD_in_unary1092);  	PushFollow (FOLLOW_unary_in_unary1095);  	AstParserRuleReturnScope<ITree' IToken> unary40 = Unary ();  	state._fsp--;  	m_adaptor.AddChild (root' unary40.Tree);  	break;  }  case 3: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:301:7: unary_operator ^ unary  	root = (CommonTree)m_adaptor.Nil ();  	PushFollow (FOLLOW_unary_operator_in_unary1103);  	AstParserRuleReturnScope<ITree' IToken> unary_operator41 = Unary_Operator ();  	state._fsp--;  	root = (CommonTree)m_adaptor.BecomeRoot (unary_operator41.Tree' root);  	PushFollow (FOLLOW_unary_in_unary1106);  	AstParserRuleReturnScope<ITree' IToken> unary42 = Unary ();  	state._fsp--;  	m_adaptor.AddChild (root' unary42.Tree);  	break;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Unary,The following statement contains a magic number: switch (alt12) {  case 1: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:299:7: postfix  	root = (CommonTree)m_adaptor.Nil ();  	PushFollow (FOLLOW_postfix_in_unary1084);  	AstParserRuleReturnScope<ITree' IToken> postfix38 = Postfix ();  	state._fsp--;  	m_adaptor.AddChild (root' postfix38.Tree);  	break;  }  case 2: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:300:7: AT_ADD ! unary  	root = (CommonTree)m_adaptor.Nil ();  	IToken AT_ADD39 = (IToken)Match (input' AT_ADD' FOLLOW_AT_ADD_in_unary1092);  	PushFollow (FOLLOW_unary_in_unary1095);  	AstParserRuleReturnScope<ITree' IToken> unary40 = Unary ();  	state._fsp--;  	m_adaptor.AddChild (root' unary40.Tree);  	break;  }  case 3: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:301:7: unary_operator ^ unary  	root = (CommonTree)m_adaptor.Nil ();  	PushFollow (FOLLOW_unary_operator_in_unary1103);  	AstParserRuleReturnScope<ITree' IToken> unary_operator41 = Unary_Operator ();  	state._fsp--;  	root = (CommonTree)m_adaptor.BecomeRoot (unary_operator41.Tree' root);  	PushFollow (FOLLOW_unary_in_unary1106);  	AstParserRuleReturnScope<ITree' IToken> unary42 = Unary ();  	state._fsp--;  	m_adaptor.AddChild (root' unary42.Tree);  	break;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Unary_Operator,The following statement contains a magic number: try {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:305:5: ( AT_SUBTRACT -> AT_NEGATE | AT_BIT_NOT | AT_BOOL_NOT )  	int alt13 = 3;  	switch (input.LA (1)) {  	case AT_SUBTRACT: {  		alt13 = 1;  		break;  	}  	case AT_BIT_NOT: {  		alt13 = 2;  		break;  	}  	case AT_BOOL_NOT: {  		alt13 = 3;  		break;  	}  	default: {  		NoViableAltException nvae = new NoViableAltException (string.Empty' 13' 0' input);  		throw nvae;  	}  	}  	switch (alt13) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:305:7: AT_SUBTRACT  		IToken AT_SUBTRACT43 = (IToken)Match (input' AT_SUBTRACT' FOLLOW_AT_SUBTRACT_in_unary_operator1123);  		stream_AT_SUBTRACT.Add (AT_SUBTRACT43);  		// AST REWRITE  		// elements:   		// token labels:   		// rule labels: retval  		// token list labels:   		// rule list labels:   		// wildcard labels:   		retval.Tree = root;  		RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream (m_adaptor' "rule retval"' retval != null ? ((CommonTree)retval.Tree) : null);  		root = (CommonTree)m_adaptor.Nil ();  		{  			// 305:19: -> AT_NEGATE  			m_adaptor.AddChild (root' (CommonTree)m_adaptor.Create (AT_NEGATE' "AT_NEGATE"));  		}  		retval.Tree = root;  		break;  	}  	case 2: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:306:7: AT_BIT_NOT  		root = (CommonTree)m_adaptor.Nil ();  		IToken AT_BIT_NOT44 = (IToken)Match (input' AT_BIT_NOT' FOLLOW_AT_BIT_NOT_in_unary_operator1135);  		CommonTree AT_BIT_NOT44_tree = (CommonTree)m_adaptor.Create (AT_BIT_NOT44);  		m_adaptor.AddChild (root' AT_BIT_NOT44_tree);  		break;  	}  	case 3: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:307:7: AT_BOOL_NOT  		root = (CommonTree)m_adaptor.Nil ();  		IToken AT_BOOL_NOT45 = (IToken)Match (input' AT_BOOL_NOT' FOLLOW_AT_BOOL_NOT_in_unary_operator1143);  		CommonTree AT_BOOL_NOT45_tree = (CommonTree)m_adaptor.Create (AT_BOOL_NOT45);  		m_adaptor.AddChild (root' AT_BOOL_NOT45_tree);  		break;  	}  	}  	retval.Stop = input.LT (-1);  	retval.Tree = (CommonTree)m_adaptor.RulePostProcessing (root);  	m_adaptor.SetTokenBoundaries (retval.Tree' retval.Start' retval.Stop);  } catch (RecognitionException re) {  	ReportError (re);  	Recover (input' re);  	retval.Tree = (CommonTree)m_adaptor.ErrorNode (input' retval.Start' input.LT (-1)' re);  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Unary_Operator,The following statement contains a magic number: try {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:305:5: ( AT_SUBTRACT -> AT_NEGATE | AT_BIT_NOT | AT_BOOL_NOT )  	int alt13 = 3;  	switch (input.LA (1)) {  	case AT_SUBTRACT: {  		alt13 = 1;  		break;  	}  	case AT_BIT_NOT: {  		alt13 = 2;  		break;  	}  	case AT_BOOL_NOT: {  		alt13 = 3;  		break;  	}  	default: {  		NoViableAltException nvae = new NoViableAltException (string.Empty' 13' 0' input);  		throw nvae;  	}  	}  	switch (alt13) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:305:7: AT_SUBTRACT  		IToken AT_SUBTRACT43 = (IToken)Match (input' AT_SUBTRACT' FOLLOW_AT_SUBTRACT_in_unary_operator1123);  		stream_AT_SUBTRACT.Add (AT_SUBTRACT43);  		// AST REWRITE  		// elements:   		// token labels:   		// rule labels: retval  		// token list labels:   		// rule list labels:   		// wildcard labels:   		retval.Tree = root;  		RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream (m_adaptor' "rule retval"' retval != null ? ((CommonTree)retval.Tree) : null);  		root = (CommonTree)m_adaptor.Nil ();  		{  			// 305:19: -> AT_NEGATE  			m_adaptor.AddChild (root' (CommonTree)m_adaptor.Create (AT_NEGATE' "AT_NEGATE"));  		}  		retval.Tree = root;  		break;  	}  	case 2: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:306:7: AT_BIT_NOT  		root = (CommonTree)m_adaptor.Nil ();  		IToken AT_BIT_NOT44 = (IToken)Match (input' AT_BIT_NOT' FOLLOW_AT_BIT_NOT_in_unary_operator1135);  		CommonTree AT_BIT_NOT44_tree = (CommonTree)m_adaptor.Create (AT_BIT_NOT44);  		m_adaptor.AddChild (root' AT_BIT_NOT44_tree);  		break;  	}  	case 3: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:307:7: AT_BOOL_NOT  		root = (CommonTree)m_adaptor.Nil ();  		IToken AT_BOOL_NOT45 = (IToken)Match (input' AT_BOOL_NOT' FOLLOW_AT_BOOL_NOT_in_unary_operator1143);  		CommonTree AT_BOOL_NOT45_tree = (CommonTree)m_adaptor.Create (AT_BOOL_NOT45);  		m_adaptor.AddChild (root' AT_BOOL_NOT45_tree);  		break;  	}  	}  	retval.Stop = input.LT (-1);  	retval.Tree = (CommonTree)m_adaptor.RulePostProcessing (root);  	m_adaptor.SetTokenBoundaries (retval.Tree' retval.Start' retval.Stop);  } catch (RecognitionException re) {  	ReportError (re);  	Recover (input' re);  	retval.Tree = (CommonTree)m_adaptor.ErrorNode (input' retval.Start' input.LT (-1)' re);  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Unary_Operator,The following statement contains a magic number: try {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:305:5: ( AT_SUBTRACT -> AT_NEGATE | AT_BIT_NOT | AT_BOOL_NOT )  	int alt13 = 3;  	switch (input.LA (1)) {  	case AT_SUBTRACT: {  		alt13 = 1;  		break;  	}  	case AT_BIT_NOT: {  		alt13 = 2;  		break;  	}  	case AT_BOOL_NOT: {  		alt13 = 3;  		break;  	}  	default: {  		NoViableAltException nvae = new NoViableAltException (string.Empty' 13' 0' input);  		throw nvae;  	}  	}  	switch (alt13) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:305:7: AT_SUBTRACT  		IToken AT_SUBTRACT43 = (IToken)Match (input' AT_SUBTRACT' FOLLOW_AT_SUBTRACT_in_unary_operator1123);  		stream_AT_SUBTRACT.Add (AT_SUBTRACT43);  		// AST REWRITE  		// elements:   		// token labels:   		// rule labels: retval  		// token list labels:   		// rule list labels:   		// wildcard labels:   		retval.Tree = root;  		RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream (m_adaptor' "rule retval"' retval != null ? ((CommonTree)retval.Tree) : null);  		root = (CommonTree)m_adaptor.Nil ();  		{  			// 305:19: -> AT_NEGATE  			m_adaptor.AddChild (root' (CommonTree)m_adaptor.Create (AT_NEGATE' "AT_NEGATE"));  		}  		retval.Tree = root;  		break;  	}  	case 2: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:306:7: AT_BIT_NOT  		root = (CommonTree)m_adaptor.Nil ();  		IToken AT_BIT_NOT44 = (IToken)Match (input' AT_BIT_NOT' FOLLOW_AT_BIT_NOT_in_unary_operator1135);  		CommonTree AT_BIT_NOT44_tree = (CommonTree)m_adaptor.Create (AT_BIT_NOT44);  		m_adaptor.AddChild (root' AT_BIT_NOT44_tree);  		break;  	}  	case 3: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:307:7: AT_BOOL_NOT  		root = (CommonTree)m_adaptor.Nil ();  		IToken AT_BOOL_NOT45 = (IToken)Match (input' AT_BOOL_NOT' FOLLOW_AT_BOOL_NOT_in_unary_operator1143);  		CommonTree AT_BOOL_NOT45_tree = (CommonTree)m_adaptor.Create (AT_BOOL_NOT45);  		m_adaptor.AddChild (root' AT_BOOL_NOT45_tree);  		break;  	}  	}  	retval.Stop = input.LT (-1);  	retval.Tree = (CommonTree)m_adaptor.RulePostProcessing (root);  	m_adaptor.SetTokenBoundaries (retval.Tree' retval.Start' retval.Stop);  } catch (RecognitionException re) {  	ReportError (re);  	Recover (input' re);  	retval.Tree = (CommonTree)m_adaptor.ErrorNode (input' retval.Start' input.LT (-1)' re);  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Unary_Operator,The following statement contains a magic number: try {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:305:5: ( AT_SUBTRACT -> AT_NEGATE | AT_BIT_NOT | AT_BOOL_NOT )  	int alt13 = 3;  	switch (input.LA (1)) {  	case AT_SUBTRACT: {  		alt13 = 1;  		break;  	}  	case AT_BIT_NOT: {  		alt13 = 2;  		break;  	}  	case AT_BOOL_NOT: {  		alt13 = 3;  		break;  	}  	default: {  		NoViableAltException nvae = new NoViableAltException (string.Empty' 13' 0' input);  		throw nvae;  	}  	}  	switch (alt13) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:305:7: AT_SUBTRACT  		IToken AT_SUBTRACT43 = (IToken)Match (input' AT_SUBTRACT' FOLLOW_AT_SUBTRACT_in_unary_operator1123);  		stream_AT_SUBTRACT.Add (AT_SUBTRACT43);  		// AST REWRITE  		// elements:   		// token labels:   		// rule labels: retval  		// token list labels:   		// rule list labels:   		// wildcard labels:   		retval.Tree = root;  		RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream (m_adaptor' "rule retval"' retval != null ? ((CommonTree)retval.Tree) : null);  		root = (CommonTree)m_adaptor.Nil ();  		{  			// 305:19: -> AT_NEGATE  			m_adaptor.AddChild (root' (CommonTree)m_adaptor.Create (AT_NEGATE' "AT_NEGATE"));  		}  		retval.Tree = root;  		break;  	}  	case 2: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:306:7: AT_BIT_NOT  		root = (CommonTree)m_adaptor.Nil ();  		IToken AT_BIT_NOT44 = (IToken)Match (input' AT_BIT_NOT' FOLLOW_AT_BIT_NOT_in_unary_operator1135);  		CommonTree AT_BIT_NOT44_tree = (CommonTree)m_adaptor.Create (AT_BIT_NOT44);  		m_adaptor.AddChild (root' AT_BIT_NOT44_tree);  		break;  	}  	case 3: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:307:7: AT_BOOL_NOT  		root = (CommonTree)m_adaptor.Nil ();  		IToken AT_BOOL_NOT45 = (IToken)Match (input' AT_BOOL_NOT' FOLLOW_AT_BOOL_NOT_in_unary_operator1143);  		CommonTree AT_BOOL_NOT45_tree = (CommonTree)m_adaptor.Create (AT_BOOL_NOT45);  		m_adaptor.AddChild (root' AT_BOOL_NOT45_tree);  		break;  	}  	}  	retval.Stop = input.LT (-1);  	retval.Tree = (CommonTree)m_adaptor.RulePostProcessing (root);  	m_adaptor.SetTokenBoundaries (retval.Tree' retval.Start' retval.Stop);  } catch (RecognitionException re) {  	ReportError (re);  	Recover (input' re);  	retval.Tree = (CommonTree)m_adaptor.ErrorNode (input' retval.Start' input.LT (-1)' re);  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Unary_Operator,The following statement contains a magic number: try {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:305:5: ( AT_SUBTRACT -> AT_NEGATE | AT_BIT_NOT | AT_BOOL_NOT )  	int alt13 = 3;  	switch (input.LA (1)) {  	case AT_SUBTRACT: {  		alt13 = 1;  		break;  	}  	case AT_BIT_NOT: {  		alt13 = 2;  		break;  	}  	case AT_BOOL_NOT: {  		alt13 = 3;  		break;  	}  	default: {  		NoViableAltException nvae = new NoViableAltException (string.Empty' 13' 0' input);  		throw nvae;  	}  	}  	switch (alt13) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:305:7: AT_SUBTRACT  		IToken AT_SUBTRACT43 = (IToken)Match (input' AT_SUBTRACT' FOLLOW_AT_SUBTRACT_in_unary_operator1123);  		stream_AT_SUBTRACT.Add (AT_SUBTRACT43);  		// AST REWRITE  		// elements:   		// token labels:   		// rule labels: retval  		// token list labels:   		// rule list labels:   		// wildcard labels:   		retval.Tree = root;  		RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream (m_adaptor' "rule retval"' retval != null ? ((CommonTree)retval.Tree) : null);  		root = (CommonTree)m_adaptor.Nil ();  		{  			// 305:19: -> AT_NEGATE  			m_adaptor.AddChild (root' (CommonTree)m_adaptor.Create (AT_NEGATE' "AT_NEGATE"));  		}  		retval.Tree = root;  		break;  	}  	case 2: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:306:7: AT_BIT_NOT  		root = (CommonTree)m_adaptor.Nil ();  		IToken AT_BIT_NOT44 = (IToken)Match (input' AT_BIT_NOT' FOLLOW_AT_BIT_NOT_in_unary_operator1135);  		CommonTree AT_BIT_NOT44_tree = (CommonTree)m_adaptor.Create (AT_BIT_NOT44);  		m_adaptor.AddChild (root' AT_BIT_NOT44_tree);  		break;  	}  	case 3: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:307:7: AT_BOOL_NOT  		root = (CommonTree)m_adaptor.Nil ();  		IToken AT_BOOL_NOT45 = (IToken)Match (input' AT_BOOL_NOT' FOLLOW_AT_BOOL_NOT_in_unary_operator1143);  		CommonTree AT_BOOL_NOT45_tree = (CommonTree)m_adaptor.Create (AT_BOOL_NOT45);  		m_adaptor.AddChild (root' AT_BOOL_NOT45_tree);  		break;  	}  	}  	retval.Stop = input.LT (-1);  	retval.Tree = (CommonTree)m_adaptor.RulePostProcessing (root);  	m_adaptor.SetTokenBoundaries (retval.Tree' retval.Start' retval.Stop);  } catch (RecognitionException re) {  	ReportError (re);  	Recover (input' re);  	retval.Tree = (CommonTree)m_adaptor.ErrorNode (input' retval.Start' input.LT (-1)' re);  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Unary_Operator,The following statement contains a magic number: try {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:305:5: ( AT_SUBTRACT -> AT_NEGATE | AT_BIT_NOT | AT_BOOL_NOT )  	int alt13 = 3;  	switch (input.LA (1)) {  	case AT_SUBTRACT: {  		alt13 = 1;  		break;  	}  	case AT_BIT_NOT: {  		alt13 = 2;  		break;  	}  	case AT_BOOL_NOT: {  		alt13 = 3;  		break;  	}  	default: {  		NoViableAltException nvae = new NoViableAltException (string.Empty' 13' 0' input);  		throw nvae;  	}  	}  	switch (alt13) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:305:7: AT_SUBTRACT  		IToken AT_SUBTRACT43 = (IToken)Match (input' AT_SUBTRACT' FOLLOW_AT_SUBTRACT_in_unary_operator1123);  		stream_AT_SUBTRACT.Add (AT_SUBTRACT43);  		// AST REWRITE  		// elements:   		// token labels:   		// rule labels: retval  		// token list labels:   		// rule list labels:   		// wildcard labels:   		retval.Tree = root;  		RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream (m_adaptor' "rule retval"' retval != null ? ((CommonTree)retval.Tree) : null);  		root = (CommonTree)m_adaptor.Nil ();  		{  			// 305:19: -> AT_NEGATE  			m_adaptor.AddChild (root' (CommonTree)m_adaptor.Create (AT_NEGATE' "AT_NEGATE"));  		}  		retval.Tree = root;  		break;  	}  	case 2: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:306:7: AT_BIT_NOT  		root = (CommonTree)m_adaptor.Nil ();  		IToken AT_BIT_NOT44 = (IToken)Match (input' AT_BIT_NOT' FOLLOW_AT_BIT_NOT_in_unary_operator1135);  		CommonTree AT_BIT_NOT44_tree = (CommonTree)m_adaptor.Create (AT_BIT_NOT44);  		m_adaptor.AddChild (root' AT_BIT_NOT44_tree);  		break;  	}  	case 3: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:307:7: AT_BOOL_NOT  		root = (CommonTree)m_adaptor.Nil ();  		IToken AT_BOOL_NOT45 = (IToken)Match (input' AT_BOOL_NOT' FOLLOW_AT_BOOL_NOT_in_unary_operator1143);  		CommonTree AT_BOOL_NOT45_tree = (CommonTree)m_adaptor.Create (AT_BOOL_NOT45);  		m_adaptor.AddChild (root' AT_BOOL_NOT45_tree);  		break;  	}  	}  	retval.Stop = input.LT (-1);  	retval.Tree = (CommonTree)m_adaptor.RulePostProcessing (root);  	m_adaptor.SetTokenBoundaries (retval.Tree' retval.Start' retval.Stop);  } catch (RecognitionException re) {  	ReportError (re);  	Recover (input' re);  	retval.Tree = (CommonTree)m_adaptor.ErrorNode (input' retval.Start' input.LT (-1)' re);  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Unary_Operator,The following statement contains a magic number: switch (input.LA (1)) {  case AT_SUBTRACT: {  	alt13 = 1;  	break;  }  case AT_BIT_NOT: {  	alt13 = 2;  	break;  }  case AT_BOOL_NOT: {  	alt13 = 3;  	break;  }  default: {  	NoViableAltException nvae = new NoViableAltException (string.Empty' 13' 0' input);  	throw nvae;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Unary_Operator,The following statement contains a magic number: switch (input.LA (1)) {  case AT_SUBTRACT: {  	alt13 = 1;  	break;  }  case AT_BIT_NOT: {  	alt13 = 2;  	break;  }  case AT_BOOL_NOT: {  	alt13 = 3;  	break;  }  default: {  	NoViableAltException nvae = new NoViableAltException (string.Empty' 13' 0' input);  	throw nvae;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Unary_Operator,The following statement contains a magic number: switch (input.LA (1)) {  case AT_SUBTRACT: {  	alt13 = 1;  	break;  }  case AT_BIT_NOT: {  	alt13 = 2;  	break;  }  case AT_BOOL_NOT: {  	alt13 = 3;  	break;  }  default: {  	NoViableAltException nvae = new NoViableAltException (string.Empty' 13' 0' input);  	throw nvae;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Unary_Operator,The following statement contains a magic number: alt13 = 2;  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Unary_Operator,The following statement contains a magic number: alt13 = 3;  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Unary_Operator,The following statement contains a magic number: switch (alt13) {  case 1: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:305:7: AT_SUBTRACT  	IToken AT_SUBTRACT43 = (IToken)Match (input' AT_SUBTRACT' FOLLOW_AT_SUBTRACT_in_unary_operator1123);  	stream_AT_SUBTRACT.Add (AT_SUBTRACT43);  	// AST REWRITE  	// elements:   	// token labels:   	// rule labels: retval  	// token list labels:   	// rule list labels:   	// wildcard labels:   	retval.Tree = root;  	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream (m_adaptor' "rule retval"' retval != null ? ((CommonTree)retval.Tree) : null);  	root = (CommonTree)m_adaptor.Nil ();  	{  		// 305:19: -> AT_NEGATE  		m_adaptor.AddChild (root' (CommonTree)m_adaptor.Create (AT_NEGATE' "AT_NEGATE"));  	}  	retval.Tree = root;  	break;  }  case 2: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:306:7: AT_BIT_NOT  	root = (CommonTree)m_adaptor.Nil ();  	IToken AT_BIT_NOT44 = (IToken)Match (input' AT_BIT_NOT' FOLLOW_AT_BIT_NOT_in_unary_operator1135);  	CommonTree AT_BIT_NOT44_tree = (CommonTree)m_adaptor.Create (AT_BIT_NOT44);  	m_adaptor.AddChild (root' AT_BIT_NOT44_tree);  	break;  }  case 3: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:307:7: AT_BOOL_NOT  	root = (CommonTree)m_adaptor.Nil ();  	IToken AT_BOOL_NOT45 = (IToken)Match (input' AT_BOOL_NOT' FOLLOW_AT_BOOL_NOT_in_unary_operator1143);  	CommonTree AT_BOOL_NOT45_tree = (CommonTree)m_adaptor.Create (AT_BOOL_NOT45);  	m_adaptor.AddChild (root' AT_BOOL_NOT45_tree);  	break;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Unary_Operator,The following statement contains a magic number: switch (alt13) {  case 1: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:305:7: AT_SUBTRACT  	IToken AT_SUBTRACT43 = (IToken)Match (input' AT_SUBTRACT' FOLLOW_AT_SUBTRACT_in_unary_operator1123);  	stream_AT_SUBTRACT.Add (AT_SUBTRACT43);  	// AST REWRITE  	// elements:   	// token labels:   	// rule labels: retval  	// token list labels:   	// rule list labels:   	// wildcard labels:   	retval.Tree = root;  	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream (m_adaptor' "rule retval"' retval != null ? ((CommonTree)retval.Tree) : null);  	root = (CommonTree)m_adaptor.Nil ();  	{  		// 305:19: -> AT_NEGATE  		m_adaptor.AddChild (root' (CommonTree)m_adaptor.Create (AT_NEGATE' "AT_NEGATE"));  	}  	retval.Tree = root;  	break;  }  case 2: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:306:7: AT_BIT_NOT  	root = (CommonTree)m_adaptor.Nil ();  	IToken AT_BIT_NOT44 = (IToken)Match (input' AT_BIT_NOT' FOLLOW_AT_BIT_NOT_in_unary_operator1135);  	CommonTree AT_BIT_NOT44_tree = (CommonTree)m_adaptor.Create (AT_BIT_NOT44);  	m_adaptor.AddChild (root' AT_BIT_NOT44_tree);  	break;  }  case 3: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:307:7: AT_BOOL_NOT  	root = (CommonTree)m_adaptor.Nil ();  	IToken AT_BOOL_NOT45 = (IToken)Match (input' AT_BOOL_NOT' FOLLOW_AT_BOOL_NOT_in_unary_operator1143);  	CommonTree AT_BOOL_NOT45_tree = (CommonTree)m_adaptor.Create (AT_BOOL_NOT45);  	m_adaptor.AddChild (root' AT_BOOL_NOT45_tree);  	break;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Postfix,The following statement contains a magic number: try {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:311:5: ( primary | NAMESPACE_ID arguments -> ^( AT_CALL NAMESPACE_ID ( arguments )? ) )  	int alt14 = 2;  	int LA14_0 = input.LA (1);  	if ((LA14_0 == NAMESPACE_ID)) {  		int LA14_1 = input.LA (2);  		if ((LA14_1 == EOF || (LA14_1 >= AT_ADD && LA14_1 <= AT_BIT_AND) || (LA14_1 >= AT_BIT_OR && LA14_1 <= AT_BOOL_AND) || LA14_1 == AT_BOOL_OR || (LA14_1 >= AT_COLON && LA14_1 <= AT_DIVIDE) || (LA14_1 >= AT_MODULO && LA14_1 <= AT_MULTIPLY) || (LA14_1 >= AT_RPAREN && LA14_1 <= AT_SUBTRACT))) {  			alt14 = 1;  		} else {  			if ((LA14_1 == AT_LPAREN)) {  				alt14 = 2;  			} else {  				int nvaeMark = input.Mark ();  				try {  					input.Consume ();  					NoViableAltException nvae = new NoViableAltException (string.Empty' 14' 1' input);  					throw nvae;  				} finally {  					input.Rewind (nvaeMark);  				}  			}  		}  	} else {  		if ((LA14_0 == AT_LPAREN || LA14_0 == DECIMAL || LA14_0 == HEX || LA14_0 == OCTAL)) {  			alt14 = 1;  		} else {  			NoViableAltException nvae = new NoViableAltException (string.Empty' 14' 0' input);  			throw nvae;  		}  	}  	switch (alt14) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:311:7: primary  		root = (CommonTree)m_adaptor.Nil ();  		PushFollow (FOLLOW_primary_in_postfix1160);  		AstParserRuleReturnScope<ITree' IToken> primary46 = Primary ();  		state._fsp--;  		m_adaptor.AddChild (root' primary46.Tree);  		break;  	}  	case 2: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:312:7: NAMESPACE_ID arguments  		IToken NAMESPACE_ID47 = (IToken)Match (input' NAMESPACE_ID' FOLLOW_NAMESPACE_ID_in_postfix1168);  		streamNamespaceId.Add (NAMESPACE_ID47);  		PushFollow (FOLLOW_arguments_in_postfix1170);  		AstParserRuleReturnScope<ITree' IToken> arguments48 = Arguments ();  		state._fsp--;  		streamArguments.Add (arguments48.Tree);  		// AST REWRITE  		// elements: NAMESPACE_ID' arguments  		// token labels:   		// rule labels: retval  		// token list labels:   		// rule list labels:   		// wildcard labels:   		retval.Tree = root;  		RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream (m_adaptor' "rule retval"' retval != null ? ((CommonTree)retval.Tree) : null);  		root = (CommonTree)m_adaptor.Nil ();  		{  			{  				// 312:30: -> ^( AT_CALL NAMESPACE_ID ( arguments )? )  				// src/java/org/apache/lucene/expressions/js/Javascript.g:312:33: ^( AT_CALL NAMESPACE_ID ( arguments )? )  				CommonTree root_1 = (CommonTree)m_adaptor.Nil ();  				root_1 = (CommonTree)m_adaptor.BecomeRoot ((CommonTree)m_adaptor.Create (AT_CALL' "AT_CALL")' root_1);  				m_adaptor.AddChild (root_1' streamNamespaceId.NextNode ());  				// src/java/org/apache/lucene/expressions/js/Javascript.g:312:56: ( arguments )?  				if (streamArguments.HasNext) {  					m_adaptor.AddChild (root_1' streamArguments.NextTree ());  				}  				streamArguments.Reset ();  				m_adaptor.AddChild (root' root_1);  			}  		}  		retval.Tree = root;  		break;  	}  	}  	retval.Stop = input.LT (-1);  	retval.Tree = (CommonTree)m_adaptor.RulePostProcessing (root);  	m_adaptor.SetTokenBoundaries (retval.Tree' retval.Start' retval.Stop);  } catch (RecognitionException re) {  	ReportError (re);  	Recover (input' re);  	retval.Tree = (CommonTree)m_adaptor.ErrorNode (input' retval.Start' input.LT (-1)' re);  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Postfix,The following statement contains a magic number: try {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:311:5: ( primary | NAMESPACE_ID arguments -> ^( AT_CALL NAMESPACE_ID ( arguments )? ) )  	int alt14 = 2;  	int LA14_0 = input.LA (1);  	if ((LA14_0 == NAMESPACE_ID)) {  		int LA14_1 = input.LA (2);  		if ((LA14_1 == EOF || (LA14_1 >= AT_ADD && LA14_1 <= AT_BIT_AND) || (LA14_1 >= AT_BIT_OR && LA14_1 <= AT_BOOL_AND) || LA14_1 == AT_BOOL_OR || (LA14_1 >= AT_COLON && LA14_1 <= AT_DIVIDE) || (LA14_1 >= AT_MODULO && LA14_1 <= AT_MULTIPLY) || (LA14_1 >= AT_RPAREN && LA14_1 <= AT_SUBTRACT))) {  			alt14 = 1;  		} else {  			if ((LA14_1 == AT_LPAREN)) {  				alt14 = 2;  			} else {  				int nvaeMark = input.Mark ();  				try {  					input.Consume ();  					NoViableAltException nvae = new NoViableAltException (string.Empty' 14' 1' input);  					throw nvae;  				} finally {  					input.Rewind (nvaeMark);  				}  			}  		}  	} else {  		if ((LA14_0 == AT_LPAREN || LA14_0 == DECIMAL || LA14_0 == HEX || LA14_0 == OCTAL)) {  			alt14 = 1;  		} else {  			NoViableAltException nvae = new NoViableAltException (string.Empty' 14' 0' input);  			throw nvae;  		}  	}  	switch (alt14) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:311:7: primary  		root = (CommonTree)m_adaptor.Nil ();  		PushFollow (FOLLOW_primary_in_postfix1160);  		AstParserRuleReturnScope<ITree' IToken> primary46 = Primary ();  		state._fsp--;  		m_adaptor.AddChild (root' primary46.Tree);  		break;  	}  	case 2: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:312:7: NAMESPACE_ID arguments  		IToken NAMESPACE_ID47 = (IToken)Match (input' NAMESPACE_ID' FOLLOW_NAMESPACE_ID_in_postfix1168);  		streamNamespaceId.Add (NAMESPACE_ID47);  		PushFollow (FOLLOW_arguments_in_postfix1170);  		AstParserRuleReturnScope<ITree' IToken> arguments48 = Arguments ();  		state._fsp--;  		streamArguments.Add (arguments48.Tree);  		// AST REWRITE  		// elements: NAMESPACE_ID' arguments  		// token labels:   		// rule labels: retval  		// token list labels:   		// rule list labels:   		// wildcard labels:   		retval.Tree = root;  		RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream (m_adaptor' "rule retval"' retval != null ? ((CommonTree)retval.Tree) : null);  		root = (CommonTree)m_adaptor.Nil ();  		{  			{  				// 312:30: -> ^( AT_CALL NAMESPACE_ID ( arguments )? )  				// src/java/org/apache/lucene/expressions/js/Javascript.g:312:33: ^( AT_CALL NAMESPACE_ID ( arguments )? )  				CommonTree root_1 = (CommonTree)m_adaptor.Nil ();  				root_1 = (CommonTree)m_adaptor.BecomeRoot ((CommonTree)m_adaptor.Create (AT_CALL' "AT_CALL")' root_1);  				m_adaptor.AddChild (root_1' streamNamespaceId.NextNode ());  				// src/java/org/apache/lucene/expressions/js/Javascript.g:312:56: ( arguments )?  				if (streamArguments.HasNext) {  					m_adaptor.AddChild (root_1' streamArguments.NextTree ());  				}  				streamArguments.Reset ();  				m_adaptor.AddChild (root' root_1);  			}  		}  		retval.Tree = root;  		break;  	}  	}  	retval.Stop = input.LT (-1);  	retval.Tree = (CommonTree)m_adaptor.RulePostProcessing (root);  	m_adaptor.SetTokenBoundaries (retval.Tree' retval.Start' retval.Stop);  } catch (RecognitionException re) {  	ReportError (re);  	Recover (input' re);  	retval.Tree = (CommonTree)m_adaptor.ErrorNode (input' retval.Start' input.LT (-1)' re);  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Postfix,The following statement contains a magic number: try {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:311:5: ( primary | NAMESPACE_ID arguments -> ^( AT_CALL NAMESPACE_ID ( arguments )? ) )  	int alt14 = 2;  	int LA14_0 = input.LA (1);  	if ((LA14_0 == NAMESPACE_ID)) {  		int LA14_1 = input.LA (2);  		if ((LA14_1 == EOF || (LA14_1 >= AT_ADD && LA14_1 <= AT_BIT_AND) || (LA14_1 >= AT_BIT_OR && LA14_1 <= AT_BOOL_AND) || LA14_1 == AT_BOOL_OR || (LA14_1 >= AT_COLON && LA14_1 <= AT_DIVIDE) || (LA14_1 >= AT_MODULO && LA14_1 <= AT_MULTIPLY) || (LA14_1 >= AT_RPAREN && LA14_1 <= AT_SUBTRACT))) {  			alt14 = 1;  		} else {  			if ((LA14_1 == AT_LPAREN)) {  				alt14 = 2;  			} else {  				int nvaeMark = input.Mark ();  				try {  					input.Consume ();  					NoViableAltException nvae = new NoViableAltException (string.Empty' 14' 1' input);  					throw nvae;  				} finally {  					input.Rewind (nvaeMark);  				}  			}  		}  	} else {  		if ((LA14_0 == AT_LPAREN || LA14_0 == DECIMAL || LA14_0 == HEX || LA14_0 == OCTAL)) {  			alt14 = 1;  		} else {  			NoViableAltException nvae = new NoViableAltException (string.Empty' 14' 0' input);  			throw nvae;  		}  	}  	switch (alt14) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:311:7: primary  		root = (CommonTree)m_adaptor.Nil ();  		PushFollow (FOLLOW_primary_in_postfix1160);  		AstParserRuleReturnScope<ITree' IToken> primary46 = Primary ();  		state._fsp--;  		m_adaptor.AddChild (root' primary46.Tree);  		break;  	}  	case 2: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:312:7: NAMESPACE_ID arguments  		IToken NAMESPACE_ID47 = (IToken)Match (input' NAMESPACE_ID' FOLLOW_NAMESPACE_ID_in_postfix1168);  		streamNamespaceId.Add (NAMESPACE_ID47);  		PushFollow (FOLLOW_arguments_in_postfix1170);  		AstParserRuleReturnScope<ITree' IToken> arguments48 = Arguments ();  		state._fsp--;  		streamArguments.Add (arguments48.Tree);  		// AST REWRITE  		// elements: NAMESPACE_ID' arguments  		// token labels:   		// rule labels: retval  		// token list labels:   		// rule list labels:   		// wildcard labels:   		retval.Tree = root;  		RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream (m_adaptor' "rule retval"' retval != null ? ((CommonTree)retval.Tree) : null);  		root = (CommonTree)m_adaptor.Nil ();  		{  			{  				// 312:30: -> ^( AT_CALL NAMESPACE_ID ( arguments )? )  				// src/java/org/apache/lucene/expressions/js/Javascript.g:312:33: ^( AT_CALL NAMESPACE_ID ( arguments )? )  				CommonTree root_1 = (CommonTree)m_adaptor.Nil ();  				root_1 = (CommonTree)m_adaptor.BecomeRoot ((CommonTree)m_adaptor.Create (AT_CALL' "AT_CALL")' root_1);  				m_adaptor.AddChild (root_1' streamNamespaceId.NextNode ());  				// src/java/org/apache/lucene/expressions/js/Javascript.g:312:56: ( arguments )?  				if (streamArguments.HasNext) {  					m_adaptor.AddChild (root_1' streamArguments.NextTree ());  				}  				streamArguments.Reset ();  				m_adaptor.AddChild (root' root_1);  			}  		}  		retval.Tree = root;  		break;  	}  	}  	retval.Stop = input.LT (-1);  	retval.Tree = (CommonTree)m_adaptor.RulePostProcessing (root);  	m_adaptor.SetTokenBoundaries (retval.Tree' retval.Start' retval.Stop);  } catch (RecognitionException re) {  	ReportError (re);  	Recover (input' re);  	retval.Tree = (CommonTree)m_adaptor.ErrorNode (input' retval.Start' input.LT (-1)' re);  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Postfix,The following statement contains a magic number: try {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:311:5: ( primary | NAMESPACE_ID arguments -> ^( AT_CALL NAMESPACE_ID ( arguments )? ) )  	int alt14 = 2;  	int LA14_0 = input.LA (1);  	if ((LA14_0 == NAMESPACE_ID)) {  		int LA14_1 = input.LA (2);  		if ((LA14_1 == EOF || (LA14_1 >= AT_ADD && LA14_1 <= AT_BIT_AND) || (LA14_1 >= AT_BIT_OR && LA14_1 <= AT_BOOL_AND) || LA14_1 == AT_BOOL_OR || (LA14_1 >= AT_COLON && LA14_1 <= AT_DIVIDE) || (LA14_1 >= AT_MODULO && LA14_1 <= AT_MULTIPLY) || (LA14_1 >= AT_RPAREN && LA14_1 <= AT_SUBTRACT))) {  			alt14 = 1;  		} else {  			if ((LA14_1 == AT_LPAREN)) {  				alt14 = 2;  			} else {  				int nvaeMark = input.Mark ();  				try {  					input.Consume ();  					NoViableAltException nvae = new NoViableAltException (string.Empty' 14' 1' input);  					throw nvae;  				} finally {  					input.Rewind (nvaeMark);  				}  			}  		}  	} else {  		if ((LA14_0 == AT_LPAREN || LA14_0 == DECIMAL || LA14_0 == HEX || LA14_0 == OCTAL)) {  			alt14 = 1;  		} else {  			NoViableAltException nvae = new NoViableAltException (string.Empty' 14' 0' input);  			throw nvae;  		}  	}  	switch (alt14) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:311:7: primary  		root = (CommonTree)m_adaptor.Nil ();  		PushFollow (FOLLOW_primary_in_postfix1160);  		AstParserRuleReturnScope<ITree' IToken> primary46 = Primary ();  		state._fsp--;  		m_adaptor.AddChild (root' primary46.Tree);  		break;  	}  	case 2: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:312:7: NAMESPACE_ID arguments  		IToken NAMESPACE_ID47 = (IToken)Match (input' NAMESPACE_ID' FOLLOW_NAMESPACE_ID_in_postfix1168);  		streamNamespaceId.Add (NAMESPACE_ID47);  		PushFollow (FOLLOW_arguments_in_postfix1170);  		AstParserRuleReturnScope<ITree' IToken> arguments48 = Arguments ();  		state._fsp--;  		streamArguments.Add (arguments48.Tree);  		// AST REWRITE  		// elements: NAMESPACE_ID' arguments  		// token labels:   		// rule labels: retval  		// token list labels:   		// rule list labels:   		// wildcard labels:   		retval.Tree = root;  		RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream (m_adaptor' "rule retval"' retval != null ? ((CommonTree)retval.Tree) : null);  		root = (CommonTree)m_adaptor.Nil ();  		{  			{  				// 312:30: -> ^( AT_CALL NAMESPACE_ID ( arguments )? )  				// src/java/org/apache/lucene/expressions/js/Javascript.g:312:33: ^( AT_CALL NAMESPACE_ID ( arguments )? )  				CommonTree root_1 = (CommonTree)m_adaptor.Nil ();  				root_1 = (CommonTree)m_adaptor.BecomeRoot ((CommonTree)m_adaptor.Create (AT_CALL' "AT_CALL")' root_1);  				m_adaptor.AddChild (root_1' streamNamespaceId.NextNode ());  				// src/java/org/apache/lucene/expressions/js/Javascript.g:312:56: ( arguments )?  				if (streamArguments.HasNext) {  					m_adaptor.AddChild (root_1' streamArguments.NextTree ());  				}  				streamArguments.Reset ();  				m_adaptor.AddChild (root' root_1);  			}  		}  		retval.Tree = root;  		break;  	}  	}  	retval.Stop = input.LT (-1);  	retval.Tree = (CommonTree)m_adaptor.RulePostProcessing (root);  	m_adaptor.SetTokenBoundaries (retval.Tree' retval.Start' retval.Stop);  } catch (RecognitionException re) {  	ReportError (re);  	Recover (input' re);  	retval.Tree = (CommonTree)m_adaptor.ErrorNode (input' retval.Start' input.LT (-1)' re);  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Postfix,The following statement contains a magic number: try {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:311:5: ( primary | NAMESPACE_ID arguments -> ^( AT_CALL NAMESPACE_ID ( arguments )? ) )  	int alt14 = 2;  	int LA14_0 = input.LA (1);  	if ((LA14_0 == NAMESPACE_ID)) {  		int LA14_1 = input.LA (2);  		if ((LA14_1 == EOF || (LA14_1 >= AT_ADD && LA14_1 <= AT_BIT_AND) || (LA14_1 >= AT_BIT_OR && LA14_1 <= AT_BOOL_AND) || LA14_1 == AT_BOOL_OR || (LA14_1 >= AT_COLON && LA14_1 <= AT_DIVIDE) || (LA14_1 >= AT_MODULO && LA14_1 <= AT_MULTIPLY) || (LA14_1 >= AT_RPAREN && LA14_1 <= AT_SUBTRACT))) {  			alt14 = 1;  		} else {  			if ((LA14_1 == AT_LPAREN)) {  				alt14 = 2;  			} else {  				int nvaeMark = input.Mark ();  				try {  					input.Consume ();  					NoViableAltException nvae = new NoViableAltException (string.Empty' 14' 1' input);  					throw nvae;  				} finally {  					input.Rewind (nvaeMark);  				}  			}  		}  	} else {  		if ((LA14_0 == AT_LPAREN || LA14_0 == DECIMAL || LA14_0 == HEX || LA14_0 == OCTAL)) {  			alt14 = 1;  		} else {  			NoViableAltException nvae = new NoViableAltException (string.Empty' 14' 0' input);  			throw nvae;  		}  	}  	switch (alt14) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:311:7: primary  		root = (CommonTree)m_adaptor.Nil ();  		PushFollow (FOLLOW_primary_in_postfix1160);  		AstParserRuleReturnScope<ITree' IToken> primary46 = Primary ();  		state._fsp--;  		m_adaptor.AddChild (root' primary46.Tree);  		break;  	}  	case 2: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:312:7: NAMESPACE_ID arguments  		IToken NAMESPACE_ID47 = (IToken)Match (input' NAMESPACE_ID' FOLLOW_NAMESPACE_ID_in_postfix1168);  		streamNamespaceId.Add (NAMESPACE_ID47);  		PushFollow (FOLLOW_arguments_in_postfix1170);  		AstParserRuleReturnScope<ITree' IToken> arguments48 = Arguments ();  		state._fsp--;  		streamArguments.Add (arguments48.Tree);  		// AST REWRITE  		// elements: NAMESPACE_ID' arguments  		// token labels:   		// rule labels: retval  		// token list labels:   		// rule list labels:   		// wildcard labels:   		retval.Tree = root;  		RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream (m_adaptor' "rule retval"' retval != null ? ((CommonTree)retval.Tree) : null);  		root = (CommonTree)m_adaptor.Nil ();  		{  			{  				// 312:30: -> ^( AT_CALL NAMESPACE_ID ( arguments )? )  				// src/java/org/apache/lucene/expressions/js/Javascript.g:312:33: ^( AT_CALL NAMESPACE_ID ( arguments )? )  				CommonTree root_1 = (CommonTree)m_adaptor.Nil ();  				root_1 = (CommonTree)m_adaptor.BecomeRoot ((CommonTree)m_adaptor.Create (AT_CALL' "AT_CALL")' root_1);  				m_adaptor.AddChild (root_1' streamNamespaceId.NextNode ());  				// src/java/org/apache/lucene/expressions/js/Javascript.g:312:56: ( arguments )?  				if (streamArguments.HasNext) {  					m_adaptor.AddChild (root_1' streamArguments.NextTree ());  				}  				streamArguments.Reset ();  				m_adaptor.AddChild (root' root_1);  			}  		}  		retval.Tree = root;  		break;  	}  	}  	retval.Stop = input.LT (-1);  	retval.Tree = (CommonTree)m_adaptor.RulePostProcessing (root);  	m_adaptor.SetTokenBoundaries (retval.Tree' retval.Start' retval.Stop);  } catch (RecognitionException re) {  	ReportError (re);  	Recover (input' re);  	retval.Tree = (CommonTree)m_adaptor.ErrorNode (input' retval.Start' input.LT (-1)' re);  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Postfix,The following statement contains a magic number: try {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:311:5: ( primary | NAMESPACE_ID arguments -> ^( AT_CALL NAMESPACE_ID ( arguments )? ) )  	int alt14 = 2;  	int LA14_0 = input.LA (1);  	if ((LA14_0 == NAMESPACE_ID)) {  		int LA14_1 = input.LA (2);  		if ((LA14_1 == EOF || (LA14_1 >= AT_ADD && LA14_1 <= AT_BIT_AND) || (LA14_1 >= AT_BIT_OR && LA14_1 <= AT_BOOL_AND) || LA14_1 == AT_BOOL_OR || (LA14_1 >= AT_COLON && LA14_1 <= AT_DIVIDE) || (LA14_1 >= AT_MODULO && LA14_1 <= AT_MULTIPLY) || (LA14_1 >= AT_RPAREN && LA14_1 <= AT_SUBTRACT))) {  			alt14 = 1;  		} else {  			if ((LA14_1 == AT_LPAREN)) {  				alt14 = 2;  			} else {  				int nvaeMark = input.Mark ();  				try {  					input.Consume ();  					NoViableAltException nvae = new NoViableAltException (string.Empty' 14' 1' input);  					throw nvae;  				} finally {  					input.Rewind (nvaeMark);  				}  			}  		}  	} else {  		if ((LA14_0 == AT_LPAREN || LA14_0 == DECIMAL || LA14_0 == HEX || LA14_0 == OCTAL)) {  			alt14 = 1;  		} else {  			NoViableAltException nvae = new NoViableAltException (string.Empty' 14' 0' input);  			throw nvae;  		}  	}  	switch (alt14) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:311:7: primary  		root = (CommonTree)m_adaptor.Nil ();  		PushFollow (FOLLOW_primary_in_postfix1160);  		AstParserRuleReturnScope<ITree' IToken> primary46 = Primary ();  		state._fsp--;  		m_adaptor.AddChild (root' primary46.Tree);  		break;  	}  	case 2: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:312:7: NAMESPACE_ID arguments  		IToken NAMESPACE_ID47 = (IToken)Match (input' NAMESPACE_ID' FOLLOW_NAMESPACE_ID_in_postfix1168);  		streamNamespaceId.Add (NAMESPACE_ID47);  		PushFollow (FOLLOW_arguments_in_postfix1170);  		AstParserRuleReturnScope<ITree' IToken> arguments48 = Arguments ();  		state._fsp--;  		streamArguments.Add (arguments48.Tree);  		// AST REWRITE  		// elements: NAMESPACE_ID' arguments  		// token labels:   		// rule labels: retval  		// token list labels:   		// rule list labels:   		// wildcard labels:   		retval.Tree = root;  		RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream (m_adaptor' "rule retval"' retval != null ? ((CommonTree)retval.Tree) : null);  		root = (CommonTree)m_adaptor.Nil ();  		{  			{  				// 312:30: -> ^( AT_CALL NAMESPACE_ID ( arguments )? )  				// src/java/org/apache/lucene/expressions/js/Javascript.g:312:33: ^( AT_CALL NAMESPACE_ID ( arguments )? )  				CommonTree root_1 = (CommonTree)m_adaptor.Nil ();  				root_1 = (CommonTree)m_adaptor.BecomeRoot ((CommonTree)m_adaptor.Create (AT_CALL' "AT_CALL")' root_1);  				m_adaptor.AddChild (root_1' streamNamespaceId.NextNode ());  				// src/java/org/apache/lucene/expressions/js/Javascript.g:312:56: ( arguments )?  				if (streamArguments.HasNext) {  					m_adaptor.AddChild (root_1' streamArguments.NextTree ());  				}  				streamArguments.Reset ();  				m_adaptor.AddChild (root' root_1);  			}  		}  		retval.Tree = root;  		break;  	}  	}  	retval.Stop = input.LT (-1);  	retval.Tree = (CommonTree)m_adaptor.RulePostProcessing (root);  	m_adaptor.SetTokenBoundaries (retval.Tree' retval.Start' retval.Stop);  } catch (RecognitionException re) {  	ReportError (re);  	Recover (input' re);  	retval.Tree = (CommonTree)m_adaptor.ErrorNode (input' retval.Start' input.LT (-1)' re);  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Postfix,The following statement contains a magic number: if ((LA14_0 == NAMESPACE_ID)) {  	int LA14_1 = input.LA (2);  	if ((LA14_1 == EOF || (LA14_1 >= AT_ADD && LA14_1 <= AT_BIT_AND) || (LA14_1 >= AT_BIT_OR && LA14_1 <= AT_BOOL_AND) || LA14_1 == AT_BOOL_OR || (LA14_1 >= AT_COLON && LA14_1 <= AT_DIVIDE) || (LA14_1 >= AT_MODULO && LA14_1 <= AT_MULTIPLY) || (LA14_1 >= AT_RPAREN && LA14_1 <= AT_SUBTRACT))) {  		alt14 = 1;  	} else {  		if ((LA14_1 == AT_LPAREN)) {  			alt14 = 2;  		} else {  			int nvaeMark = input.Mark ();  			try {  				input.Consume ();  				NoViableAltException nvae = new NoViableAltException (string.Empty' 14' 1' input);  				throw nvae;  			} finally {  				input.Rewind (nvaeMark);  			}  		}  	}  } else {  	if ((LA14_0 == AT_LPAREN || LA14_0 == DECIMAL || LA14_0 == HEX || LA14_0 == OCTAL)) {  		alt14 = 1;  	} else {  		NoViableAltException nvae = new NoViableAltException (string.Empty' 14' 0' input);  		throw nvae;  	}  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Postfix,The following statement contains a magic number: if ((LA14_0 == NAMESPACE_ID)) {  	int LA14_1 = input.LA (2);  	if ((LA14_1 == EOF || (LA14_1 >= AT_ADD && LA14_1 <= AT_BIT_AND) || (LA14_1 >= AT_BIT_OR && LA14_1 <= AT_BOOL_AND) || LA14_1 == AT_BOOL_OR || (LA14_1 >= AT_COLON && LA14_1 <= AT_DIVIDE) || (LA14_1 >= AT_MODULO && LA14_1 <= AT_MULTIPLY) || (LA14_1 >= AT_RPAREN && LA14_1 <= AT_SUBTRACT))) {  		alt14 = 1;  	} else {  		if ((LA14_1 == AT_LPAREN)) {  			alt14 = 2;  		} else {  			int nvaeMark = input.Mark ();  			try {  				input.Consume ();  				NoViableAltException nvae = new NoViableAltException (string.Empty' 14' 1' input);  				throw nvae;  			} finally {  				input.Rewind (nvaeMark);  			}  		}  	}  } else {  	if ((LA14_0 == AT_LPAREN || LA14_0 == DECIMAL || LA14_0 == HEX || LA14_0 == OCTAL)) {  		alt14 = 1;  	} else {  		NoViableAltException nvae = new NoViableAltException (string.Empty' 14' 0' input);  		throw nvae;  	}  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Postfix,The following statement contains a magic number: if ((LA14_0 == NAMESPACE_ID)) {  	int LA14_1 = input.LA (2);  	if ((LA14_1 == EOF || (LA14_1 >= AT_ADD && LA14_1 <= AT_BIT_AND) || (LA14_1 >= AT_BIT_OR && LA14_1 <= AT_BOOL_AND) || LA14_1 == AT_BOOL_OR || (LA14_1 >= AT_COLON && LA14_1 <= AT_DIVIDE) || (LA14_1 >= AT_MODULO && LA14_1 <= AT_MULTIPLY) || (LA14_1 >= AT_RPAREN && LA14_1 <= AT_SUBTRACT))) {  		alt14 = 1;  	} else {  		if ((LA14_1 == AT_LPAREN)) {  			alt14 = 2;  		} else {  			int nvaeMark = input.Mark ();  			try {  				input.Consume ();  				NoViableAltException nvae = new NoViableAltException (string.Empty' 14' 1' input);  				throw nvae;  			} finally {  				input.Rewind (nvaeMark);  			}  		}  	}  } else {  	if ((LA14_0 == AT_LPAREN || LA14_0 == DECIMAL || LA14_0 == HEX || LA14_0 == OCTAL)) {  		alt14 = 1;  	} else {  		NoViableAltException nvae = new NoViableAltException (string.Empty' 14' 0' input);  		throw nvae;  	}  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Postfix,The following statement contains a magic number: if ((LA14_0 == NAMESPACE_ID)) {  	int LA14_1 = input.LA (2);  	if ((LA14_1 == EOF || (LA14_1 >= AT_ADD && LA14_1 <= AT_BIT_AND) || (LA14_1 >= AT_BIT_OR && LA14_1 <= AT_BOOL_AND) || LA14_1 == AT_BOOL_OR || (LA14_1 >= AT_COLON && LA14_1 <= AT_DIVIDE) || (LA14_1 >= AT_MODULO && LA14_1 <= AT_MULTIPLY) || (LA14_1 >= AT_RPAREN && LA14_1 <= AT_SUBTRACT))) {  		alt14 = 1;  	} else {  		if ((LA14_1 == AT_LPAREN)) {  			alt14 = 2;  		} else {  			int nvaeMark = input.Mark ();  			try {  				input.Consume ();  				NoViableAltException nvae = new NoViableAltException (string.Empty' 14' 1' input);  				throw nvae;  			} finally {  				input.Rewind (nvaeMark);  			}  		}  	}  } else {  	if ((LA14_0 == AT_LPAREN || LA14_0 == DECIMAL || LA14_0 == HEX || LA14_0 == OCTAL)) {  		alt14 = 1;  	} else {  		NoViableAltException nvae = new NoViableAltException (string.Empty' 14' 0' input);  		throw nvae;  	}  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Postfix,The following statement contains a magic number: if ((LA14_1 == EOF || (LA14_1 >= AT_ADD && LA14_1 <= AT_BIT_AND) || (LA14_1 >= AT_BIT_OR && LA14_1 <= AT_BOOL_AND) || LA14_1 == AT_BOOL_OR || (LA14_1 >= AT_COLON && LA14_1 <= AT_DIVIDE) || (LA14_1 >= AT_MODULO && LA14_1 <= AT_MULTIPLY) || (LA14_1 >= AT_RPAREN && LA14_1 <= AT_SUBTRACT))) {  	alt14 = 1;  } else {  	if ((LA14_1 == AT_LPAREN)) {  		alt14 = 2;  	} else {  		int nvaeMark = input.Mark ();  		try {  			input.Consume ();  			NoViableAltException nvae = new NoViableAltException (string.Empty' 14' 1' input);  			throw nvae;  		} finally {  			input.Rewind (nvaeMark);  		}  	}  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Postfix,The following statement contains a magic number: if ((LA14_1 == EOF || (LA14_1 >= AT_ADD && LA14_1 <= AT_BIT_AND) || (LA14_1 >= AT_BIT_OR && LA14_1 <= AT_BOOL_AND) || LA14_1 == AT_BOOL_OR || (LA14_1 >= AT_COLON && LA14_1 <= AT_DIVIDE) || (LA14_1 >= AT_MODULO && LA14_1 <= AT_MULTIPLY) || (LA14_1 >= AT_RPAREN && LA14_1 <= AT_SUBTRACT))) {  	alt14 = 1;  } else {  	if ((LA14_1 == AT_LPAREN)) {  		alt14 = 2;  	} else {  		int nvaeMark = input.Mark ();  		try {  			input.Consume ();  			NoViableAltException nvae = new NoViableAltException (string.Empty' 14' 1' input);  			throw nvae;  		} finally {  			input.Rewind (nvaeMark);  		}  	}  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Postfix,The following statement contains a magic number: if ((LA14_1 == AT_LPAREN)) {  	alt14 = 2;  } else {  	int nvaeMark = input.Mark ();  	try {  		input.Consume ();  		NoViableAltException nvae = new NoViableAltException (string.Empty' 14' 1' input);  		throw nvae;  	} finally {  		input.Rewind (nvaeMark);  	}  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Postfix,The following statement contains a magic number: if ((LA14_1 == AT_LPAREN)) {  	alt14 = 2;  } else {  	int nvaeMark = input.Mark ();  	try {  		input.Consume ();  		NoViableAltException nvae = new NoViableAltException (string.Empty' 14' 1' input);  		throw nvae;  	} finally {  		input.Rewind (nvaeMark);  	}  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Postfix,The following statement contains a magic number: alt14 = 2;  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Postfix,The following statement contains a magic number: try {  	input.Consume ();  	NoViableAltException nvae = new NoViableAltException (string.Empty' 14' 1' input);  	throw nvae;  } finally {  	input.Rewind (nvaeMark);  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Postfix,The following statement contains a magic number: if ((LA14_0 == AT_LPAREN || LA14_0 == DECIMAL || LA14_0 == HEX || LA14_0 == OCTAL)) {  	alt14 = 1;  } else {  	NoViableAltException nvae = new NoViableAltException (string.Empty' 14' 0' input);  	throw nvae;  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Postfix,The following statement contains a magic number: switch (alt14) {  case 1: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:311:7: primary  	root = (CommonTree)m_adaptor.Nil ();  	PushFollow (FOLLOW_primary_in_postfix1160);  	AstParserRuleReturnScope<ITree' IToken> primary46 = Primary ();  	state._fsp--;  	m_adaptor.AddChild (root' primary46.Tree);  	break;  }  case 2: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:312:7: NAMESPACE_ID arguments  	IToken NAMESPACE_ID47 = (IToken)Match (input' NAMESPACE_ID' FOLLOW_NAMESPACE_ID_in_postfix1168);  	streamNamespaceId.Add (NAMESPACE_ID47);  	PushFollow (FOLLOW_arguments_in_postfix1170);  	AstParserRuleReturnScope<ITree' IToken> arguments48 = Arguments ();  	state._fsp--;  	streamArguments.Add (arguments48.Tree);  	// AST REWRITE  	// elements: NAMESPACE_ID' arguments  	// token labels:   	// rule labels: retval  	// token list labels:   	// rule list labels:   	// wildcard labels:   	retval.Tree = root;  	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream (m_adaptor' "rule retval"' retval != null ? ((CommonTree)retval.Tree) : null);  	root = (CommonTree)m_adaptor.Nil ();  	{  		{  			// 312:30: -> ^( AT_CALL NAMESPACE_ID ( arguments )? )  			// src/java/org/apache/lucene/expressions/js/Javascript.g:312:33: ^( AT_CALL NAMESPACE_ID ( arguments )? )  			CommonTree root_1 = (CommonTree)m_adaptor.Nil ();  			root_1 = (CommonTree)m_adaptor.BecomeRoot ((CommonTree)m_adaptor.Create (AT_CALL' "AT_CALL")' root_1);  			m_adaptor.AddChild (root_1' streamNamespaceId.NextNode ());  			// src/java/org/apache/lucene/expressions/js/Javascript.g:312:56: ( arguments )?  			if (streamArguments.HasNext) {  				m_adaptor.AddChild (root_1' streamArguments.NextTree ());  			}  			streamArguments.Reset ();  			m_adaptor.AddChild (root' root_1);  		}  	}  	retval.Tree = root;  	break;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Primary,The following statement contains a magic number: try {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:316:5: ( NAMESPACE_ID | numeric | AT_LPAREN ! conditional AT_RPAREN !)  	int alt15 = 3;  	switch (input.LA (1)) {  	case NAMESPACE_ID: {  		alt15 = 1;  		break;  	}  	case DECIMAL:  	case HEX:  	case OCTAL: {  		alt15 = 2;  		break;  	}  	case AT_LPAREN: {  		alt15 = 3;  		break;  	}  	default: {  		NoViableAltException nvae = new NoViableAltException (string.Empty' 15' 0' input);  		throw nvae;  	}  	}  	switch (alt15) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:316:7: NAMESPACE_ID  		root = (CommonTree)m_adaptor.Nil ();  		IToken NAMESPACE_ID49 = (IToken)Match (input' NAMESPACE_ID' FOLLOW_NAMESPACE_ID_in_primary1198);  		NAMESPACE_ID49_tree = (CommonTree)m_adaptor.Create (NAMESPACE_ID49);  		m_adaptor.AddChild (root' NAMESPACE_ID49_tree);  		break;  	}  	case 2: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:317:7: numeric  		root = (CommonTree)m_adaptor.Nil ();  		PushFollow (FOLLOW_numeric_in_primary1206);  		AstParserRuleReturnScope<ITree' IToken> numeric50 = Numeric ();  		state._fsp--;  		m_adaptor.AddChild (root' numeric50.Tree);  		break;  	}  	case 3: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:318:7: AT_LPAREN ! conditional AT_RPAREN !  		root = (CommonTree)m_adaptor.Nil ();  		AT_LPAREN51 = (IToken)Match (input' AT_LPAREN' FOLLOW_AT_LPAREN_in_primary1214);  		PushFollow (FOLLOW_conditional_in_primary1217);  		AstParserRuleReturnScope<ITree' IToken> conditional52 = Conditional ();  		state._fsp--;  		m_adaptor.AddChild (root' conditional52.Tree);  		AT_RPAREN53 = (IToken)Match (input' AT_RPAREN' FOLLOW_AT_RPAREN_in_primary1219);  		break;  	}  	}  	retval.Stop = input.LT (-1);  	retval.Tree = (CommonTree)m_adaptor.RulePostProcessing (root);  	m_adaptor.SetTokenBoundaries (retval.Tree' retval.Start' retval.Stop);  } catch (RecognitionException re) {  	ReportError (re);  	Recover (input' re);  	retval.Tree = (CommonTree)m_adaptor.ErrorNode (input' retval.Start' input.LT (-1)' re);  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Primary,The following statement contains a magic number: try {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:316:5: ( NAMESPACE_ID | numeric | AT_LPAREN ! conditional AT_RPAREN !)  	int alt15 = 3;  	switch (input.LA (1)) {  	case NAMESPACE_ID: {  		alt15 = 1;  		break;  	}  	case DECIMAL:  	case HEX:  	case OCTAL: {  		alt15 = 2;  		break;  	}  	case AT_LPAREN: {  		alt15 = 3;  		break;  	}  	default: {  		NoViableAltException nvae = new NoViableAltException (string.Empty' 15' 0' input);  		throw nvae;  	}  	}  	switch (alt15) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:316:7: NAMESPACE_ID  		root = (CommonTree)m_adaptor.Nil ();  		IToken NAMESPACE_ID49 = (IToken)Match (input' NAMESPACE_ID' FOLLOW_NAMESPACE_ID_in_primary1198);  		NAMESPACE_ID49_tree = (CommonTree)m_adaptor.Create (NAMESPACE_ID49);  		m_adaptor.AddChild (root' NAMESPACE_ID49_tree);  		break;  	}  	case 2: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:317:7: numeric  		root = (CommonTree)m_adaptor.Nil ();  		PushFollow (FOLLOW_numeric_in_primary1206);  		AstParserRuleReturnScope<ITree' IToken> numeric50 = Numeric ();  		state._fsp--;  		m_adaptor.AddChild (root' numeric50.Tree);  		break;  	}  	case 3: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:318:7: AT_LPAREN ! conditional AT_RPAREN !  		root = (CommonTree)m_adaptor.Nil ();  		AT_LPAREN51 = (IToken)Match (input' AT_LPAREN' FOLLOW_AT_LPAREN_in_primary1214);  		PushFollow (FOLLOW_conditional_in_primary1217);  		AstParserRuleReturnScope<ITree' IToken> conditional52 = Conditional ();  		state._fsp--;  		m_adaptor.AddChild (root' conditional52.Tree);  		AT_RPAREN53 = (IToken)Match (input' AT_RPAREN' FOLLOW_AT_RPAREN_in_primary1219);  		break;  	}  	}  	retval.Stop = input.LT (-1);  	retval.Tree = (CommonTree)m_adaptor.RulePostProcessing (root);  	m_adaptor.SetTokenBoundaries (retval.Tree' retval.Start' retval.Stop);  } catch (RecognitionException re) {  	ReportError (re);  	Recover (input' re);  	retval.Tree = (CommonTree)m_adaptor.ErrorNode (input' retval.Start' input.LT (-1)' re);  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Primary,The following statement contains a magic number: try {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:316:5: ( NAMESPACE_ID | numeric | AT_LPAREN ! conditional AT_RPAREN !)  	int alt15 = 3;  	switch (input.LA (1)) {  	case NAMESPACE_ID: {  		alt15 = 1;  		break;  	}  	case DECIMAL:  	case HEX:  	case OCTAL: {  		alt15 = 2;  		break;  	}  	case AT_LPAREN: {  		alt15 = 3;  		break;  	}  	default: {  		NoViableAltException nvae = new NoViableAltException (string.Empty' 15' 0' input);  		throw nvae;  	}  	}  	switch (alt15) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:316:7: NAMESPACE_ID  		root = (CommonTree)m_adaptor.Nil ();  		IToken NAMESPACE_ID49 = (IToken)Match (input' NAMESPACE_ID' FOLLOW_NAMESPACE_ID_in_primary1198);  		NAMESPACE_ID49_tree = (CommonTree)m_adaptor.Create (NAMESPACE_ID49);  		m_adaptor.AddChild (root' NAMESPACE_ID49_tree);  		break;  	}  	case 2: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:317:7: numeric  		root = (CommonTree)m_adaptor.Nil ();  		PushFollow (FOLLOW_numeric_in_primary1206);  		AstParserRuleReturnScope<ITree' IToken> numeric50 = Numeric ();  		state._fsp--;  		m_adaptor.AddChild (root' numeric50.Tree);  		break;  	}  	case 3: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:318:7: AT_LPAREN ! conditional AT_RPAREN !  		root = (CommonTree)m_adaptor.Nil ();  		AT_LPAREN51 = (IToken)Match (input' AT_LPAREN' FOLLOW_AT_LPAREN_in_primary1214);  		PushFollow (FOLLOW_conditional_in_primary1217);  		AstParserRuleReturnScope<ITree' IToken> conditional52 = Conditional ();  		state._fsp--;  		m_adaptor.AddChild (root' conditional52.Tree);  		AT_RPAREN53 = (IToken)Match (input' AT_RPAREN' FOLLOW_AT_RPAREN_in_primary1219);  		break;  	}  	}  	retval.Stop = input.LT (-1);  	retval.Tree = (CommonTree)m_adaptor.RulePostProcessing (root);  	m_adaptor.SetTokenBoundaries (retval.Tree' retval.Start' retval.Stop);  } catch (RecognitionException re) {  	ReportError (re);  	Recover (input' re);  	retval.Tree = (CommonTree)m_adaptor.ErrorNode (input' retval.Start' input.LT (-1)' re);  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Primary,The following statement contains a magic number: try {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:316:5: ( NAMESPACE_ID | numeric | AT_LPAREN ! conditional AT_RPAREN !)  	int alt15 = 3;  	switch (input.LA (1)) {  	case NAMESPACE_ID: {  		alt15 = 1;  		break;  	}  	case DECIMAL:  	case HEX:  	case OCTAL: {  		alt15 = 2;  		break;  	}  	case AT_LPAREN: {  		alt15 = 3;  		break;  	}  	default: {  		NoViableAltException nvae = new NoViableAltException (string.Empty' 15' 0' input);  		throw nvae;  	}  	}  	switch (alt15) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:316:7: NAMESPACE_ID  		root = (CommonTree)m_adaptor.Nil ();  		IToken NAMESPACE_ID49 = (IToken)Match (input' NAMESPACE_ID' FOLLOW_NAMESPACE_ID_in_primary1198);  		NAMESPACE_ID49_tree = (CommonTree)m_adaptor.Create (NAMESPACE_ID49);  		m_adaptor.AddChild (root' NAMESPACE_ID49_tree);  		break;  	}  	case 2: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:317:7: numeric  		root = (CommonTree)m_adaptor.Nil ();  		PushFollow (FOLLOW_numeric_in_primary1206);  		AstParserRuleReturnScope<ITree' IToken> numeric50 = Numeric ();  		state._fsp--;  		m_adaptor.AddChild (root' numeric50.Tree);  		break;  	}  	case 3: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:318:7: AT_LPAREN ! conditional AT_RPAREN !  		root = (CommonTree)m_adaptor.Nil ();  		AT_LPAREN51 = (IToken)Match (input' AT_LPAREN' FOLLOW_AT_LPAREN_in_primary1214);  		PushFollow (FOLLOW_conditional_in_primary1217);  		AstParserRuleReturnScope<ITree' IToken> conditional52 = Conditional ();  		state._fsp--;  		m_adaptor.AddChild (root' conditional52.Tree);  		AT_RPAREN53 = (IToken)Match (input' AT_RPAREN' FOLLOW_AT_RPAREN_in_primary1219);  		break;  	}  	}  	retval.Stop = input.LT (-1);  	retval.Tree = (CommonTree)m_adaptor.RulePostProcessing (root);  	m_adaptor.SetTokenBoundaries (retval.Tree' retval.Start' retval.Stop);  } catch (RecognitionException re) {  	ReportError (re);  	Recover (input' re);  	retval.Tree = (CommonTree)m_adaptor.ErrorNode (input' retval.Start' input.LT (-1)' re);  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Primary,The following statement contains a magic number: try {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:316:5: ( NAMESPACE_ID | numeric | AT_LPAREN ! conditional AT_RPAREN !)  	int alt15 = 3;  	switch (input.LA (1)) {  	case NAMESPACE_ID: {  		alt15 = 1;  		break;  	}  	case DECIMAL:  	case HEX:  	case OCTAL: {  		alt15 = 2;  		break;  	}  	case AT_LPAREN: {  		alt15 = 3;  		break;  	}  	default: {  		NoViableAltException nvae = new NoViableAltException (string.Empty' 15' 0' input);  		throw nvae;  	}  	}  	switch (alt15) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:316:7: NAMESPACE_ID  		root = (CommonTree)m_adaptor.Nil ();  		IToken NAMESPACE_ID49 = (IToken)Match (input' NAMESPACE_ID' FOLLOW_NAMESPACE_ID_in_primary1198);  		NAMESPACE_ID49_tree = (CommonTree)m_adaptor.Create (NAMESPACE_ID49);  		m_adaptor.AddChild (root' NAMESPACE_ID49_tree);  		break;  	}  	case 2: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:317:7: numeric  		root = (CommonTree)m_adaptor.Nil ();  		PushFollow (FOLLOW_numeric_in_primary1206);  		AstParserRuleReturnScope<ITree' IToken> numeric50 = Numeric ();  		state._fsp--;  		m_adaptor.AddChild (root' numeric50.Tree);  		break;  	}  	case 3: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:318:7: AT_LPAREN ! conditional AT_RPAREN !  		root = (CommonTree)m_adaptor.Nil ();  		AT_LPAREN51 = (IToken)Match (input' AT_LPAREN' FOLLOW_AT_LPAREN_in_primary1214);  		PushFollow (FOLLOW_conditional_in_primary1217);  		AstParserRuleReturnScope<ITree' IToken> conditional52 = Conditional ();  		state._fsp--;  		m_adaptor.AddChild (root' conditional52.Tree);  		AT_RPAREN53 = (IToken)Match (input' AT_RPAREN' FOLLOW_AT_RPAREN_in_primary1219);  		break;  	}  	}  	retval.Stop = input.LT (-1);  	retval.Tree = (CommonTree)m_adaptor.RulePostProcessing (root);  	m_adaptor.SetTokenBoundaries (retval.Tree' retval.Start' retval.Stop);  } catch (RecognitionException re) {  	ReportError (re);  	Recover (input' re);  	retval.Tree = (CommonTree)m_adaptor.ErrorNode (input' retval.Start' input.LT (-1)' re);  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Primary,The following statement contains a magic number: try {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:316:5: ( NAMESPACE_ID | numeric | AT_LPAREN ! conditional AT_RPAREN !)  	int alt15 = 3;  	switch (input.LA (1)) {  	case NAMESPACE_ID: {  		alt15 = 1;  		break;  	}  	case DECIMAL:  	case HEX:  	case OCTAL: {  		alt15 = 2;  		break;  	}  	case AT_LPAREN: {  		alt15 = 3;  		break;  	}  	default: {  		NoViableAltException nvae = new NoViableAltException (string.Empty' 15' 0' input);  		throw nvae;  	}  	}  	switch (alt15) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:316:7: NAMESPACE_ID  		root = (CommonTree)m_adaptor.Nil ();  		IToken NAMESPACE_ID49 = (IToken)Match (input' NAMESPACE_ID' FOLLOW_NAMESPACE_ID_in_primary1198);  		NAMESPACE_ID49_tree = (CommonTree)m_adaptor.Create (NAMESPACE_ID49);  		m_adaptor.AddChild (root' NAMESPACE_ID49_tree);  		break;  	}  	case 2: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:317:7: numeric  		root = (CommonTree)m_adaptor.Nil ();  		PushFollow (FOLLOW_numeric_in_primary1206);  		AstParserRuleReturnScope<ITree' IToken> numeric50 = Numeric ();  		state._fsp--;  		m_adaptor.AddChild (root' numeric50.Tree);  		break;  	}  	case 3: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:318:7: AT_LPAREN ! conditional AT_RPAREN !  		root = (CommonTree)m_adaptor.Nil ();  		AT_LPAREN51 = (IToken)Match (input' AT_LPAREN' FOLLOW_AT_LPAREN_in_primary1214);  		PushFollow (FOLLOW_conditional_in_primary1217);  		AstParserRuleReturnScope<ITree' IToken> conditional52 = Conditional ();  		state._fsp--;  		m_adaptor.AddChild (root' conditional52.Tree);  		AT_RPAREN53 = (IToken)Match (input' AT_RPAREN' FOLLOW_AT_RPAREN_in_primary1219);  		break;  	}  	}  	retval.Stop = input.LT (-1);  	retval.Tree = (CommonTree)m_adaptor.RulePostProcessing (root);  	m_adaptor.SetTokenBoundaries (retval.Tree' retval.Start' retval.Stop);  } catch (RecognitionException re) {  	ReportError (re);  	Recover (input' re);  	retval.Tree = (CommonTree)m_adaptor.ErrorNode (input' retval.Start' input.LT (-1)' re);  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Primary,The following statement contains a magic number: switch (input.LA (1)) {  case NAMESPACE_ID: {  	alt15 = 1;  	break;  }  case DECIMAL:  case HEX:  case OCTAL: {  	alt15 = 2;  	break;  }  case AT_LPAREN: {  	alt15 = 3;  	break;  }  default: {  	NoViableAltException nvae = new NoViableAltException (string.Empty' 15' 0' input);  	throw nvae;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Primary,The following statement contains a magic number: switch (input.LA (1)) {  case NAMESPACE_ID: {  	alt15 = 1;  	break;  }  case DECIMAL:  case HEX:  case OCTAL: {  	alt15 = 2;  	break;  }  case AT_LPAREN: {  	alt15 = 3;  	break;  }  default: {  	NoViableAltException nvae = new NoViableAltException (string.Empty' 15' 0' input);  	throw nvae;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Primary,The following statement contains a magic number: switch (input.LA (1)) {  case NAMESPACE_ID: {  	alt15 = 1;  	break;  }  case DECIMAL:  case HEX:  case OCTAL: {  	alt15 = 2;  	break;  }  case AT_LPAREN: {  	alt15 = 3;  	break;  }  default: {  	NoViableAltException nvae = new NoViableAltException (string.Empty' 15' 0' input);  	throw nvae;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Primary,The following statement contains a magic number: alt15 = 2;  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Primary,The following statement contains a magic number: alt15 = 3;  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Primary,The following statement contains a magic number: switch (alt15) {  case 1: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:316:7: NAMESPACE_ID  	root = (CommonTree)m_adaptor.Nil ();  	IToken NAMESPACE_ID49 = (IToken)Match (input' NAMESPACE_ID' FOLLOW_NAMESPACE_ID_in_primary1198);  	NAMESPACE_ID49_tree = (CommonTree)m_adaptor.Create (NAMESPACE_ID49);  	m_adaptor.AddChild (root' NAMESPACE_ID49_tree);  	break;  }  case 2: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:317:7: numeric  	root = (CommonTree)m_adaptor.Nil ();  	PushFollow (FOLLOW_numeric_in_primary1206);  	AstParserRuleReturnScope<ITree' IToken> numeric50 = Numeric ();  	state._fsp--;  	m_adaptor.AddChild (root' numeric50.Tree);  	break;  }  case 3: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:318:7: AT_LPAREN ! conditional AT_RPAREN !  	root = (CommonTree)m_adaptor.Nil ();  	AT_LPAREN51 = (IToken)Match (input' AT_LPAREN' FOLLOW_AT_LPAREN_in_primary1214);  	PushFollow (FOLLOW_conditional_in_primary1217);  	AstParserRuleReturnScope<ITree' IToken> conditional52 = Conditional ();  	state._fsp--;  	m_adaptor.AddChild (root' conditional52.Tree);  	AT_RPAREN53 = (IToken)Match (input' AT_RPAREN' FOLLOW_AT_RPAREN_in_primary1219);  	break;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Primary,The following statement contains a magic number: switch (alt15) {  case 1: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:316:7: NAMESPACE_ID  	root = (CommonTree)m_adaptor.Nil ();  	IToken NAMESPACE_ID49 = (IToken)Match (input' NAMESPACE_ID' FOLLOW_NAMESPACE_ID_in_primary1198);  	NAMESPACE_ID49_tree = (CommonTree)m_adaptor.Create (NAMESPACE_ID49);  	m_adaptor.AddChild (root' NAMESPACE_ID49_tree);  	break;  }  case 2: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:317:7: numeric  	root = (CommonTree)m_adaptor.Nil ();  	PushFollow (FOLLOW_numeric_in_primary1206);  	AstParserRuleReturnScope<ITree' IToken> numeric50 = Numeric ();  	state._fsp--;  	m_adaptor.AddChild (root' numeric50.Tree);  	break;  }  case 3: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:318:7: AT_LPAREN ! conditional AT_RPAREN !  	root = (CommonTree)m_adaptor.Nil ();  	AT_LPAREN51 = (IToken)Match (input' AT_LPAREN' FOLLOW_AT_LPAREN_in_primary1214);  	PushFollow (FOLLOW_conditional_in_primary1217);  	AstParserRuleReturnScope<ITree' IToken> conditional52 = Conditional ();  	state._fsp--;  	m_adaptor.AddChild (root' conditional52.Tree);  	AT_RPAREN53 = (IToken)Match (input' AT_RPAREN' FOLLOW_AT_RPAREN_in_primary1219);  	break;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Arguments,The following statement contains a magic number: try {  	{  		// src/java/org/apache/lucene/expressions/js/Javascript.g:322:5: ( AT_LPAREN ! ( conditional ( AT_COMMA ! conditional )* )? AT_RPAREN !)  		// src/java/org/apache/lucene/expressions/js/Javascript.g:322:7: AT_LPAREN ! ( conditional ( AT_COMMA ! conditional )* )? AT_RPAREN !  		root = (CommonTree)m_adaptor.Nil ();  		AT_LPAREN54 = (IToken)Match (input' AT_LPAREN' FOLLOW_AT_LPAREN_in_arguments1237);  		// src/java/org/apache/lucene/expressions/js/Javascript.g:322:18: ( conditional ( AT_COMMA ! conditional )* )?  		int alt17 = 2;  		int LA17_0 = input.LA (1);  		if ((LA17_0 == AT_ADD || LA17_0 == AT_BIT_NOT || LA17_0 == AT_BOOL_NOT || LA17_0 == AT_LPAREN || (LA17_0 >= AT_SUBTRACT && LA17_0 <= DECIMAL) || LA17_0 == HEX || (LA17_0 >= NAMESPACE_ID && LA17_0 <= OCTAL))) {  			alt17 = 1;  		}  		switch (alt17) {  		case 1: {  			// src/java/org/apache/lucene/expressions/js/Javascript.g:322:19: conditional ( AT_COMMA ! conditional )*  			PushFollow (FOLLOW_conditional_in_arguments1241);  			AstParserRuleReturnScope<ITree' IToken> conditional55 = Conditional ();  			state._fsp--;  			m_adaptor.AddChild (root' conditional55.Tree);  			// src/java/org/apache/lucene/expressions/js/Javascript.g:322:31: ( AT_COMMA ! conditional )*  			while (true) {  				int alt16 = 2;  				int LA16_0 = input.LA (1);  				if ((LA16_0 == AT_COMMA)) {  					alt16 = 1;  				}  				switch (alt16) {  				case 1: {  					// src/java/org/apache/lucene/expressions/js/Javascript.g:322:32: AT_COMMA ! conditional  					AT_COMMA56 = (IToken)Match (input' AT_COMMA' FOLLOW_AT_COMMA_in_arguments1244);  					PushFollow (FOLLOW_conditional_in_arguments1247);  					AstParserRuleReturnScope<ITree' IToken> conditional57 = Conditional ();  					state._fsp--;  					m_adaptor.AddChild (root' conditional57.Tree);  					break;  				}  				default: {  					goto loop16_break;  				}  				}  				//loop16_continue: ; // LUCENENET NOTE: Not used  			}  			loop16_break:  			;  			break;  		}  		}  		AT_RPAREN58 = (IToken)Match (input' AT_RPAREN' FOLLOW_AT_RPAREN_in_arguments1253);  	}  	retval.Stop = input.LT (-1);  	retval.Tree = (CommonTree)m_adaptor.RulePostProcessing (root);  	m_adaptor.SetTokenBoundaries (retval.Tree' retval.Start' retval.Stop);  } catch (RecognitionException re) {  	ReportError (re);  	Recover (input' re);  	retval.Tree = (CommonTree)m_adaptor.ErrorNode (input' retval.Start' input.LT (-1)' re);  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Arguments,The following statement contains a magic number: try {  	{  		// src/java/org/apache/lucene/expressions/js/Javascript.g:322:5: ( AT_LPAREN ! ( conditional ( AT_COMMA ! conditional )* )? AT_RPAREN !)  		// src/java/org/apache/lucene/expressions/js/Javascript.g:322:7: AT_LPAREN ! ( conditional ( AT_COMMA ! conditional )* )? AT_RPAREN !  		root = (CommonTree)m_adaptor.Nil ();  		AT_LPAREN54 = (IToken)Match (input' AT_LPAREN' FOLLOW_AT_LPAREN_in_arguments1237);  		// src/java/org/apache/lucene/expressions/js/Javascript.g:322:18: ( conditional ( AT_COMMA ! conditional )* )?  		int alt17 = 2;  		int LA17_0 = input.LA (1);  		if ((LA17_0 == AT_ADD || LA17_0 == AT_BIT_NOT || LA17_0 == AT_BOOL_NOT || LA17_0 == AT_LPAREN || (LA17_0 >= AT_SUBTRACT && LA17_0 <= DECIMAL) || LA17_0 == HEX || (LA17_0 >= NAMESPACE_ID && LA17_0 <= OCTAL))) {  			alt17 = 1;  		}  		switch (alt17) {  		case 1: {  			// src/java/org/apache/lucene/expressions/js/Javascript.g:322:19: conditional ( AT_COMMA ! conditional )*  			PushFollow (FOLLOW_conditional_in_arguments1241);  			AstParserRuleReturnScope<ITree' IToken> conditional55 = Conditional ();  			state._fsp--;  			m_adaptor.AddChild (root' conditional55.Tree);  			// src/java/org/apache/lucene/expressions/js/Javascript.g:322:31: ( AT_COMMA ! conditional )*  			while (true) {  				int alt16 = 2;  				int LA16_0 = input.LA (1);  				if ((LA16_0 == AT_COMMA)) {  					alt16 = 1;  				}  				switch (alt16) {  				case 1: {  					// src/java/org/apache/lucene/expressions/js/Javascript.g:322:32: AT_COMMA ! conditional  					AT_COMMA56 = (IToken)Match (input' AT_COMMA' FOLLOW_AT_COMMA_in_arguments1244);  					PushFollow (FOLLOW_conditional_in_arguments1247);  					AstParserRuleReturnScope<ITree' IToken> conditional57 = Conditional ();  					state._fsp--;  					m_adaptor.AddChild (root' conditional57.Tree);  					break;  				}  				default: {  					goto loop16_break;  				}  				}  				//loop16_continue: ; // LUCENENET NOTE: Not used  			}  			loop16_break:  			;  			break;  		}  		}  		AT_RPAREN58 = (IToken)Match (input' AT_RPAREN' FOLLOW_AT_RPAREN_in_arguments1253);  	}  	retval.Stop = input.LT (-1);  	retval.Tree = (CommonTree)m_adaptor.RulePostProcessing (root);  	m_adaptor.SetTokenBoundaries (retval.Tree' retval.Start' retval.Stop);  } catch (RecognitionException re) {  	ReportError (re);  	Recover (input' re);  	retval.Tree = (CommonTree)m_adaptor.ErrorNode (input' retval.Start' input.LT (-1)' re);  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Arguments,The following statement contains a magic number: switch (alt17) {  case 1: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:322:19: conditional ( AT_COMMA ! conditional )*  	PushFollow (FOLLOW_conditional_in_arguments1241);  	AstParserRuleReturnScope<ITree' IToken> conditional55 = Conditional ();  	state._fsp--;  	m_adaptor.AddChild (root' conditional55.Tree);  	// src/java/org/apache/lucene/expressions/js/Javascript.g:322:31: ( AT_COMMA ! conditional )*  	while (true) {  		int alt16 = 2;  		int LA16_0 = input.LA (1);  		if ((LA16_0 == AT_COMMA)) {  			alt16 = 1;  		}  		switch (alt16) {  		case 1: {  			// src/java/org/apache/lucene/expressions/js/Javascript.g:322:32: AT_COMMA ! conditional  			AT_COMMA56 = (IToken)Match (input' AT_COMMA' FOLLOW_AT_COMMA_in_arguments1244);  			PushFollow (FOLLOW_conditional_in_arguments1247);  			AstParserRuleReturnScope<ITree' IToken> conditional57 = Conditional ();  			state._fsp--;  			m_adaptor.AddChild (root' conditional57.Tree);  			break;  		}  		default: {  			goto loop16_break;  		}  		}  		//loop16_continue: ; // LUCENENET NOTE: Not used  	}  	loop16_break:  	;  	break;  }  }  
Magic Number,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Arguments,The following statement contains a magic number: while (true) {  	int alt16 = 2;  	int LA16_0 = input.LA (1);  	if ((LA16_0 == AT_COMMA)) {  		alt16 = 1;  	}  	switch (alt16) {  	case 1: {  		// src/java/org/apache/lucene/expressions/js/Javascript.g:322:32: AT_COMMA ! conditional  		AT_COMMA56 = (IToken)Match (input' AT_COMMA' FOLLOW_AT_COMMA_in_arguments1244);  		PushFollow (FOLLOW_conditional_in_arguments1247);  		AstParserRuleReturnScope<ITree' IToken> conditional57 = Conditional ();  		state._fsp--;  		m_adaptor.AddChild (root' conditional57.Tree);  		break;  	}  	default: {  		goto loop16_break;  	}  	}  	//loop16_continue: ; // LUCENENET NOTE: Not used  }  
Missing Default,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MDECIMAL,The following switch statement is missing a default case: switch (alt5) {  case 1: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:347:43: EXPONENT  	MEXPONENT ();  	break;  }  }  
Missing Default,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MDECIMAL,The following switch statement is missing a default case: switch (alt7) {  case 1: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:348:28: EXPONENT  	MEXPONENT ();  	break;  }  }  
Missing Default,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MDECIMAL,The following switch statement is missing a default case: switch (alt8) {  case 1: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:349:22: EXPONENT  	MEXPONENT ();  	break;  }  }  
Missing Default,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MHEX,The following switch statement is missing a default case: switch (alt11) {  case 1: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:357:8: '0x'  	Match ("0x");  	break;  }  case 2: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:357:13: '0X'  	Match ("0X");  	break;  }  }  
Missing Default,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,MEXPONENT,The following switch statement is missing a default case: switch (alt15) {  case 1: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:  	if (input.LA (1) == '+' || input.LA (1) == '-') {  		input.Consume ();  	} else {  		MismatchedSetException mse = new MismatchedSetException (null' input);  		Recover (mse);  		throw mse;  	}  	break;  }  }  
Missing Default,Lucene.Net.Expressions.JS,JavascriptLexer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptLexer.cs,mTokens,The following switch statement is missing a default case: switch (alt17) {  case 1: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD  	MAT_ADD ();  	break;  }  case 2: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND  	MAT_BIT_AND ();  	break;  }  case 3: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT  	MAT_BIT_NOT ();  	break;  }  case 4: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR  	MAT_BIT_OR ();  	break;  }  case 5: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL  	MAT_BIT_SHL ();  	break;  }  case 6: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR  	MAT_BIT_SHR ();  	break;  }  case 7: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU  	MAT_BIT_SHU ();  	break;  }  case 8: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR  	MAT_BIT_XOR ();  	break;  }  case 9: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND  	MAT_BOOL_AND ();  	break;  }  case 10: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT  	MAT_BOOL_NOT ();  	break;  }  case 11: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR  	MAT_BOOL_OR ();  	break;  }  case 12: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON  	MAT_COLON ();  	break;  }  case 13: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA  	MAT_COMMA ();  	break;  }  case 14: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ  	MAT_COMP_EQ ();  	break;  }  case 15: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT  	MAT_COMP_GT ();  	break;  }  case 16: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE  	MAT_COMP_GTE ();  	break;  }  case 17: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT  	MAT_COMP_LT ();  	break;  }  case 18: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE  	MAT_COMP_LTE ();  	break;  }  case 19: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ  	MAT_COMP_NEQ ();  	break;  }  case 20: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE  	MAT_COND_QUE ();  	break;  }  case 21: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE  	MAT_DIVIDE ();  	break;  }  case 22: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT  	MAT_DOT ();  	break;  }  case 23: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN  	MAT_LPAREN ();  	break;  }  case 24: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO  	MAT_MODULO ();  	break;  }  case 25: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY  	MAT_MULTIPLY ();  	break;  }  case 26: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN  	MAT_RPAREN ();  	break;  }  case 27: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT  	MAT_SUBTRACT ();  	break;  }  case 28: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: NAMESPACE_ID  	MNAMESPACE_ID ();  	break;  }  case 29: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:311: WS  	MWS ();  	break;  }  case 30: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:314: DECIMAL  	MDECIMAL ();  	break;  }  case 31: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:322: OCTAL  	MOCTAL ();  	break;  }  case 32: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:1:328: HEX  	MHEX ();  	break;  }  }  
Missing Default,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Conditional,The following switch statement is missing a default case: switch (alt1) {  case 1: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:255:19: AT_COND_QUE ^ conditional AT_COLON ! conditional  	AT_COND_QUE4 = (IToken)Match (input' AT_COND_QUE' FOLLOW_AT_COND_QUE_in_conditional760);  	AT_COND_QUE4_tree = (CommonTree)m_adaptor.Create (AT_COND_QUE4);  	root_0 = (CommonTree)m_adaptor.BecomeRoot (AT_COND_QUE4_tree' root_0);  	PushFollow (FOLLOW_conditional_in_conditional763);  	conditional5 = Conditional ();  	state._fsp--;  	m_adaptor.AddChild (root_0' conditional5.Tree);  	AT_COLON6 = (IToken)Match (input' AT_COLON' FOLLOW_AT_COLON_in_conditional765);  	PushFollow (FOLLOW_conditional_in_conditional768);  	conditional7 = Conditional ();  	state._fsp--;  	m_adaptor.AddChild (root_0' conditional7.Tree);  	break;  }  }  
Missing Default,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Unary,The following switch statement is missing a default case: switch (alt12) {  case 1: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:299:7: postfix  	root = (CommonTree)m_adaptor.Nil ();  	PushFollow (FOLLOW_postfix_in_unary1084);  	AstParserRuleReturnScope<ITree' IToken> postfix38 = Postfix ();  	state._fsp--;  	m_adaptor.AddChild (root' postfix38.Tree);  	break;  }  case 2: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:300:7: AT_ADD ! unary  	root = (CommonTree)m_adaptor.Nil ();  	IToken AT_ADD39 = (IToken)Match (input' AT_ADD' FOLLOW_AT_ADD_in_unary1092);  	PushFollow (FOLLOW_unary_in_unary1095);  	AstParserRuleReturnScope<ITree' IToken> unary40 = Unary ();  	state._fsp--;  	m_adaptor.AddChild (root' unary40.Tree);  	break;  }  case 3: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:301:7: unary_operator ^ unary  	root = (CommonTree)m_adaptor.Nil ();  	PushFollow (FOLLOW_unary_operator_in_unary1103);  	AstParserRuleReturnScope<ITree' IToken> unary_operator41 = Unary_Operator ();  	state._fsp--;  	root = (CommonTree)m_adaptor.BecomeRoot (unary_operator41.Tree' root);  	PushFollow (FOLLOW_unary_in_unary1106);  	AstParserRuleReturnScope<ITree' IToken> unary42 = Unary ();  	state._fsp--;  	m_adaptor.AddChild (root' unary42.Tree);  	break;  }  }  
Missing Default,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Unary_Operator,The following switch statement is missing a default case: switch (alt13) {  case 1: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:305:7: AT_SUBTRACT  	IToken AT_SUBTRACT43 = (IToken)Match (input' AT_SUBTRACT' FOLLOW_AT_SUBTRACT_in_unary_operator1123);  	stream_AT_SUBTRACT.Add (AT_SUBTRACT43);  	// AST REWRITE  	// elements:   	// token labels:   	// rule labels: retval  	// token list labels:   	// rule list labels:   	// wildcard labels:   	retval.Tree = root;  	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream (m_adaptor' "rule retval"' retval != null ? ((CommonTree)retval.Tree) : null);  	root = (CommonTree)m_adaptor.Nil ();  	{  		// 305:19: -> AT_NEGATE  		m_adaptor.AddChild (root' (CommonTree)m_adaptor.Create (AT_NEGATE' "AT_NEGATE"));  	}  	retval.Tree = root;  	break;  }  case 2: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:306:7: AT_BIT_NOT  	root = (CommonTree)m_adaptor.Nil ();  	IToken AT_BIT_NOT44 = (IToken)Match (input' AT_BIT_NOT' FOLLOW_AT_BIT_NOT_in_unary_operator1135);  	CommonTree AT_BIT_NOT44_tree = (CommonTree)m_adaptor.Create (AT_BIT_NOT44);  	m_adaptor.AddChild (root' AT_BIT_NOT44_tree);  	break;  }  case 3: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:307:7: AT_BOOL_NOT  	root = (CommonTree)m_adaptor.Nil ();  	IToken AT_BOOL_NOT45 = (IToken)Match (input' AT_BOOL_NOT' FOLLOW_AT_BOOL_NOT_in_unary_operator1143);  	CommonTree AT_BOOL_NOT45_tree = (CommonTree)m_adaptor.Create (AT_BOOL_NOT45);  	m_adaptor.AddChild (root' AT_BOOL_NOT45_tree);  	break;  }  }  
Missing Default,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Postfix,The following switch statement is missing a default case: switch (alt14) {  case 1: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:311:7: primary  	root = (CommonTree)m_adaptor.Nil ();  	PushFollow (FOLLOW_primary_in_postfix1160);  	AstParserRuleReturnScope<ITree' IToken> primary46 = Primary ();  	state._fsp--;  	m_adaptor.AddChild (root' primary46.Tree);  	break;  }  case 2: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:312:7: NAMESPACE_ID arguments  	IToken NAMESPACE_ID47 = (IToken)Match (input' NAMESPACE_ID' FOLLOW_NAMESPACE_ID_in_postfix1168);  	streamNamespaceId.Add (NAMESPACE_ID47);  	PushFollow (FOLLOW_arguments_in_postfix1170);  	AstParserRuleReturnScope<ITree' IToken> arguments48 = Arguments ();  	state._fsp--;  	streamArguments.Add (arguments48.Tree);  	// AST REWRITE  	// elements: NAMESPACE_ID' arguments  	// token labels:   	// rule labels: retval  	// token list labels:   	// rule list labels:   	// wildcard labels:   	retval.Tree = root;  	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream (m_adaptor' "rule retval"' retval != null ? ((CommonTree)retval.Tree) : null);  	root = (CommonTree)m_adaptor.Nil ();  	{  		{  			// 312:30: -> ^( AT_CALL NAMESPACE_ID ( arguments )? )  			// src/java/org/apache/lucene/expressions/js/Javascript.g:312:33: ^( AT_CALL NAMESPACE_ID ( arguments )? )  			CommonTree root_1 = (CommonTree)m_adaptor.Nil ();  			root_1 = (CommonTree)m_adaptor.BecomeRoot ((CommonTree)m_adaptor.Create (AT_CALL' "AT_CALL")' root_1);  			m_adaptor.AddChild (root_1' streamNamespaceId.NextNode ());  			// src/java/org/apache/lucene/expressions/js/Javascript.g:312:56: ( arguments )?  			if (streamArguments.HasNext) {  				m_adaptor.AddChild (root_1' streamArguments.NextTree ());  			}  			streamArguments.Reset ();  			m_adaptor.AddChild (root' root_1);  		}  	}  	retval.Tree = root;  	break;  }  }  
Missing Default,Lucene.Net.Expressions.JS,JavascriptParser,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Expressions\JS\JavascriptParser.cs,Primary,The following switch statement is missing a default case: switch (alt15) {  case 1: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:316:7: NAMESPACE_ID  	root = (CommonTree)m_adaptor.Nil ();  	IToken NAMESPACE_ID49 = (IToken)Match (input' NAMESPACE_ID' FOLLOW_NAMESPACE_ID_in_primary1198);  	NAMESPACE_ID49_tree = (CommonTree)m_adaptor.Create (NAMESPACE_ID49);  	m_adaptor.AddChild (root' NAMESPACE_ID49_tree);  	break;  }  case 2: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:317:7: numeric  	root = (CommonTree)m_adaptor.Nil ();  	PushFollow (FOLLOW_numeric_in_primary1206);  	AstParserRuleReturnScope<ITree' IToken> numeric50 = Numeric ();  	state._fsp--;  	m_adaptor.AddChild (root' numeric50.Tree);  	break;  }  case 3: {  	// src/java/org/apache/lucene/expressions/js/Javascript.g:318:7: AT_LPAREN ! conditional AT_RPAREN !  	root = (CommonTree)m_adaptor.Nil ();  	AT_LPAREN51 = (IToken)Match (input' AT_LPAREN' FOLLOW_AT_LPAREN_in_primary1214);  	PushFollow (FOLLOW_conditional_in_primary1217);  	AstParserRuleReturnScope<ITree' IToken> conditional52 = Conditional ();  	state._fsp--;  	m_adaptor.AddChild (root' conditional52.Tree);  	AT_RPAREN53 = (IToken)Match (input' AT_RPAREN' FOLLOW_AT_RPAREN_in_primary1219);  	break;  }  }  
