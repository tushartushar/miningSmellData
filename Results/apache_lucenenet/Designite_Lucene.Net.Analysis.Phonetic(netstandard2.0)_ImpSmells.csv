Implementation smell,Namespace,Class,File,Method,Description
Long Method,Lucene.Net.Analysis.Phonetic.Language,ColognePhonetic,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\ColognePhonetic.cs,GetColognePhonetic,The method has 117 lines of code.
Long Method,Lucene.Net.Analysis.Phonetic.Language,DoubleMetaphone,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\DoubleMetaphone.cs,GetDoubleMetaphone,The method has 105 lines of code.
Long Method,Lucene.Net.Analysis.Phonetic.Language,Metaphone,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\Metaphone.cs,GetMetaphone,The method has 303 lines of code.
Long Method,Lucene.Net.Analysis.Phonetic.Language.Bm,Rule,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\Bm\Rule.cs,GetPattern,The method has 149 lines of code.
Complex Method,Lucene.Net.Analysis.Phonetic,DoubleMetaphoneFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\DoubleMetaphoneFilter.cs,IncrementToken,Cyclomatic complexity of the method is 11
Complex Method,Lucene.Net.Analysis.Phonetic.Language,ColognePhonetic,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\ColognePhonetic.cs,GetColognePhonetic,Cyclomatic complexity of the method is 22
Complex Method,Lucene.Net.Analysis.Phonetic.Language,DaitchMokotoffSoundex,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\DaitchMokotoffSoundex.cs,ParseRules,Cyclomatic complexity of the method is 12
Complex Method,Lucene.Net.Analysis.Phonetic.Language,DaitchMokotoffSoundex,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\DaitchMokotoffSoundex.cs,GetSoundex,Cyclomatic complexity of the method is 14
Complex Method,Lucene.Net.Analysis.Phonetic.Language,DoubleMetaphone,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\DoubleMetaphone.cs,GetDoubleMetaphone,Cyclomatic complexity of the method is 26
Complex Method,Lucene.Net.Analysis.Phonetic.Language,DoubleMetaphone,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\DoubleMetaphone.cs,HandleC,Cyclomatic complexity of the method is 12
Complex Method,Lucene.Net.Analysis.Phonetic.Language,DoubleMetaphone,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\DoubleMetaphone.cs,HandleG,Cyclomatic complexity of the method is 12
Complex Method,Lucene.Net.Analysis.Phonetic.Language,DoubleMetaphone,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\DoubleMetaphone.cs,HandleJ,Cyclomatic complexity of the method is 8
Complex Method,Lucene.Net.Analysis.Phonetic.Language,DoubleMetaphone,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\DoubleMetaphone.cs,HandleS,Cyclomatic complexity of the method is 10
Complex Method,Lucene.Net.Analysis.Phonetic.Language,Metaphone,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\Metaphone.cs,GetMetaphone,Cyclomatic complexity of the method is 55
Complex Method,Lucene.Net.Analysis.Phonetic.Language,Nysiis,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\Nysiis.cs,TranscodeRemaining,Cyclomatic complexity of the method is 12
Complex Method,Lucene.Net.Analysis.Phonetic.Language,Nysiis,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\Nysiis.cs,GetNysiis,Cyclomatic complexity of the method is 10
Complex Method,Lucene.Net.Analysis.Phonetic.Language.Bm,Lang,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\Bm\Lang.cs,LoadFromResource,Cyclomatic complexity of the method is 9
Complex Method,Lucene.Net.Analysis.Phonetic.Language.Bm,Lang,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\Bm\Lang.cs,GuessLanguages,Cyclomatic complexity of the method is 8
Complex Method,Lucene.Net.Analysis.Phonetic.Language.Bm,PhoneticEngine,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\Bm\PhoneticEngine.cs,Encode,Cyclomatic complexity of the method is 13
Complex Method,Lucene.Net.Analysis.Phonetic.Language.Bm,Rule,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\Bm\Rule.cs,ParseRules,Cyclomatic complexity of the method is 11
Complex Method,Lucene.Net.Analysis.Phonetic.Language.Bm,Rule,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\Bm\Rule.cs,GetPattern,Cyclomatic complexity of the method is 13
Long Parameter List,Lucene.Net.Analysis.Phonetic.Language.Bm,RulesApplication,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\Bm\PhoneticEngine.cs,RulesApplication,The method has 5 parameters. Parameters: finalRules' input' phonemeBuilder' i' maxPhonemes
Long Parameter List,Lucene.Net.Analysis.Phonetic.Language.Bm,RuleAnonymousHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\Bm\Rule.cs,RuleAnonymousHelper,The method has 6 parameters. Parameters: pat' lCon' rCon' ph' cLine' location
Long Identifier,Lucene.Net.Analysis.Phonetic.Language,DoubleMetaphone,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\DoubleMetaphone.cs,,The length of the parameter ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER is 32.
Long Statement,Lucene.Net.Analysis.Phonetic,DoubleMetaphoneFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\DoubleMetaphoneFilter.cs,IncrementToken,The length of the statement  "                if (primaryPhoneticValue != null && primaryPhoneticValue.Length > 0 && !primaryPhoneticValue.Equals(v' StringComparison.Ordinal)) " is 129.
Long Statement,Lucene.Net.Analysis.Phonetic,PhoneticFilterFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\PhoneticFilterFactory.cs,ResolveEncoder,The length of the statement  "                throw new ArgumentException("Error loading encoder '" + name + "': must be full class name or one of " + Collections.ToString(registry.Keys)' e); " is 145.
Long Statement,Lucene.Net.Analysis.Phonetic.Language,Branch,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\DaitchMokotoffSoundex.cs,ProcessNextReplacement,The length of the statement  "                bool append = lastReplacement == null || !lastReplacement.EndsWith(replacement' StringComparison.Ordinal) || forceAppend; " is 121.
Long Statement,Lucene.Net.Analysis.Phonetic.Language,MatchRatingApproachEncoder,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\MatchRatingApproachEncoder.cs,IsEncodeEquals,The length of the statement  "            if (name1 == null || EMPTY.Equals(name1' StringComparison.OrdinalIgnoreCase) || SPACE.Equals(name1' StringComparison.OrdinalIgnoreCase)) " is 136.
Long Statement,Lucene.Net.Analysis.Phonetic.Language,MatchRatingApproachEncoder,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\MatchRatingApproachEncoder.cs,IsEncodeEquals,The length of the statement  "            else if (name2 == null || EMPTY.Equals(name2' StringComparison.OrdinalIgnoreCase) || SPACE.Equals(name2' StringComparison.OrdinalIgnoreCase)) " is 141.
Long Statement,Lucene.Net.Analysis.Phonetic.Language,MatchRatingApproachEncoder,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\MatchRatingApproachEncoder.cs,IsVowel,The length of the statement  "            return letter.Equals("E"' StringComparison.OrdinalIgnoreCase) || letter.Equals("A"' StringComparison.OrdinalIgnoreCase) || letter.Equals("O"' StringComparison.OrdinalIgnoreCase) || " is 180.
Long Statement,Lucene.Net.Analysis.Phonetic.Language.Bm,Lang,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\Bm\Lang.cs,LoadFromResource,The length of the statement  "            Stream lRulesIS = typeof(Lang).GetTypeInfo().Assembly.FindAndGetManifestResourceStream(typeof(Lang)' languageRulesResourceName); " is 128.
Long Statement,Lucene.Net.Analysis.Phonetic.Language.Bm,Languages,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\Bm\Languages.cs,GetInstance,The length of the statement  "            Stream langIS = typeof(Languages).GetTypeInfo().Assembly.FindAndGetManifestResourceStream(typeof(Languages)' languagesResourceName); " is 132.
Long Statement,Lucene.Net.Analysis.Phonetic.Language.Bm,Rule,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\Bm\Rule.cs,GetPattern,The length of the statement  "            string content = regex.Substring(startsWith ? 1 : 0' (endsWith ? regex.Length - 1 : regex.Length) - (startsWith ? 1 : 0)); " is 122.
Complex Conditional,Lucene.Net.Analysis.Phonetic,DoubleMetaphoneFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\DoubleMetaphoneFilter.cs,IncrementToken,The conditional expression  "alternatePhoneticValue != null && alternatePhoneticValue.Length > 0                          && !alternatePhoneticValue.Equals(primaryPhoneticValue' StringComparison.Ordinal)                          && !primaryPhoneticValue.Equals(v' StringComparison.Ordinal)"  is complex.
Complex Conditional,Lucene.Net.Analysis.Phonetic.Language,ColognePhonetic,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\ColognePhonetic.cs,GetColognePhonetic,The conditional expression  "code != '-' && (lastCode != code && (code != '0' || lastCode == '/') || code < '0' || code > '8')"  is complex.
Complex Conditional,Lucene.Net.Analysis.Phonetic.Language,DoubleMetaphone,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\DoubleMetaphone.cs,HandleG,The conditional expression  "(Contains(value' index + 1' 2' "ER") ||                        CharAt(value' index + 1) == 'Y') &&                       !Contains(value' 0' 6' "DANGER"' "RANGER"' "MANGER") &&                       !Contains(value' index - 1' 1' "E"' "I") &&                       !Contains(value' index - 1' 3' "RGY"' "OGY")"  is complex.
Complex Conditional,Lucene.Net.Analysis.Phonetic.Language,DoubleMetaphone,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\DoubleMetaphone.cs,HandleGH,The conditional expression  "(index > 1 && Contains(value' index - 2' 1' "B"' "H"' "D")) ||                       (index > 2 && Contains(value' index - 3' 1' "B"' "H"' "D")) ||                       (index > 3 && Contains(value' index - 4' 1' "B"' "H"))"  is complex.
Complex Conditional,Lucene.Net.Analysis.Phonetic.Language,DoubleMetaphone,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\DoubleMetaphone.cs,HandleJ,The conditional expression  "(index == 0 && (CharAt(value' index + 4) == ' ') ||                       value.Length == 4) || Contains(value' 0' 4' "SAN ")"  is complex.
Complex Conditional,Lucene.Net.Analysis.Phonetic.Language,DoubleMetaphone,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\DoubleMetaphone.cs,HandleJ,The conditional expression  "IsVowel(CharAt(value' index - 1)) && !slavoGermanic &&                           (CharAt(value' index + 1) == 'A' || CharAt(value' index + 1) == 'O')"  is complex.
Complex Conditional,Lucene.Net.Analysis.Phonetic.Language,DoubleMetaphone,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\DoubleMetaphone.cs,HandleR,The conditional expression  "index == value.Length - 1 && !slavoGermanic &&                  Contains(value' index - 2' 2' "IE") &&                  !Contains(value' index - 4' 2' "ME"' "MA")"  is complex.
Complex Conditional,Lucene.Net.Analysis.Phonetic.Language,DoubleMetaphone,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\DoubleMetaphone.cs,HandleW,The conditional expression  "(index == value.Length - 1 && IsVowel(CharAt(value' index - 1))) ||                           Contains(value' index - 1' 5' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY") ||                           Contains(value' 0' 3' "SCH")"  is complex.
Complex Conditional,Lucene.Net.Analysis.Phonetic.Language,DoubleMetaphone,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\DoubleMetaphone.cs,HandleZ,The conditional expression  "Contains(value' index + 1' 2' "ZO"' "ZI"' "ZA") ||                      (slavoGermanic && (index > 0 && CharAt(value' index - 1) != 'T'))"  is complex.
Complex Conditional,Lucene.Net.Analysis.Phonetic.Language,MatchRatingApproachEncoder,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\MatchRatingApproachEncoder.cs,Encode,The conditional expression  "name == null || EMPTY.Equals(name' StringComparison.OrdinalIgnoreCase) ||                  SPACE.Equals(name' StringComparison.OrdinalIgnoreCase) || name.Length == 1"  is complex.
Complex Conditional,Lucene.Net.Analysis.Phonetic.Language.Bm,Rule,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\Bm\Rule.cs,GetInstanceMap,The conditional expression  "RULES.TryGetValue(nameType' out nameTypes) && nameTypes != null &&                  nameTypes.TryGetValue(rt' out ruleTypes) && ruleTypes != null &&                  ruleTypes.TryGetValue(lang' out rules) && rules != null"  is complex.
Empty Catch Block,Lucene.Net.Analysis.Phonetic,PhoneticFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\PhoneticFilter.cs,IncrementToken,The method has an empty catch block.
Magic Number,Lucene.Net.Analysis.Phonetic.Language,ColognePhonetic,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\ColognePhonetic.cs,GetColognePhonetic,The following statement contains a magic number: CologneOutputBuffer output = new CologneOutputBuffer(text.Length * 2);
Magic Number,Lucene.Net.Analysis.Phonetic.Language,DoubleMetaphone,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\DoubleMetaphone.cs,GetDoubleMetaphone,The following statement contains a magic number: switch (value[index])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          index = HandleAEIOUY(result' index);                          break;                      case 'B':                          result.Append('P');                          index = CharAt(value' index + 1) == 'B' ? index + 2 : index + 1;                          break;                      case '\u00C7':                          // A C with a Cedilla                          result.Append('S');                          index++;                          break;                      case 'C':                          index = HandleC(value' result' index);                          break;                      case 'D':                          index = HandleD(value' result' index);                          break;                      case 'F':                          result.Append('F');                          index = CharAt(value' index + 1) == 'F' ? index + 2 : index + 1;                          break;                      case 'G':                          index = HandleG(value' result' index' slavoGermanic);                          break;                      case 'H':                          index = HandleH(value' result' index);                          break;                      case 'J':                          index = HandleJ(value' result' index' slavoGermanic);                          break;                      case 'K':                          result.Append('K');                          index = CharAt(value' index + 1) == 'K' ? index + 2 : index + 1;                          break;                      case 'L':                          index = HandleL(value' result' index);                          break;                      case 'M':                          result.Append('M');                          index = ConditionM0(value' index) ? index + 2 : index + 1;                          break;                      case 'N':                          result.Append('N');                          index = CharAt(value' index + 1) == 'N' ? index + 2 : index + 1;                          break;                      case '\u00D1':                          // N with a tilde (spanish ene)                          result.Append('N');                          index++;                          break;                      case 'P':                          index = HandleP(value' result' index);                          break;                      case 'Q':                          result.Append('K');                          index = CharAt(value' index + 1) == 'Q' ? index + 2 : index + 1;                          break;                      case 'R':                          index = HandleR(value' result' index' slavoGermanic);                          break;                      case 'S':                          index = HandleS(value' result' index' slavoGermanic);                          break;                      case 'T':                          index = HandleT(value' result' index);                          break;                      case 'V':                          result.Append('F');                          index = CharAt(value' index + 1) == 'V' ? index + 2 : index + 1;                          break;                      case 'W':                          index = HandleW(value' result' index);                          break;                      case 'X':                          index = HandleX(value' result' index);                          break;                      case 'Z':                          index = HandleZ(value' result' index' slavoGermanic);                          break;                      default:                          index++;                          break;                  }
Magic Number,Lucene.Net.Analysis.Phonetic.Language,DoubleMetaphone,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\DoubleMetaphone.cs,GetDoubleMetaphone,The following statement contains a magic number: switch (value[index])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          index = HandleAEIOUY(result' index);                          break;                      case 'B':                          result.Append('P');                          index = CharAt(value' index + 1) == 'B' ? index + 2 : index + 1;                          break;                      case '\u00C7':                          // A C with a Cedilla                          result.Append('S');                          index++;                          break;                      case 'C':                          index = HandleC(value' result' index);                          break;                      case 'D':                          index = HandleD(value' result' index);                          break;                      case 'F':                          result.Append('F');                          index = CharAt(value' index + 1) == 'F' ? index + 2 : index + 1;                          break;                      case 'G':                          index = HandleG(value' result' index' slavoGermanic);                          break;                      case 'H':                          index = HandleH(value' result' index);                          break;                      case 'J':                          index = HandleJ(value' result' index' slavoGermanic);                          break;                      case 'K':                          result.Append('K');                          index = CharAt(value' index + 1) == 'K' ? index + 2 : index + 1;                          break;                      case 'L':                          index = HandleL(value' result' index);                          break;                      case 'M':                          result.Append('M');                          index = ConditionM0(value' index) ? index + 2 : index + 1;                          break;                      case 'N':                          result.Append('N');                          index = CharAt(value' index + 1) == 'N' ? index + 2 : index + 1;                          break;                      case '\u00D1':                          // N with a tilde (spanish ene)                          result.Append('N');                          index++;                          break;                      case 'P':                          index = HandleP(value' result' index);                          break;                      case 'Q':                          result.Append('K');                          index = CharAt(value' index + 1) == 'Q' ? index + 2 : index + 1;                          break;                      case 'R':                          index = HandleR(value' result' index' slavoGermanic);                          break;                      case 'S':                          index = HandleS(value' result' index' slavoGermanic);                          break;                      case 'T':                          index = HandleT(value' result' index);                          break;                      case 'V':                          result.Append('F');                          index = CharAt(value' index + 1) == 'V' ? index + 2 : index + 1;                          break;                      case 'W':                          index = HandleW(value' result' index);                          break;                      case 'X':                          index = HandleX(value' result' index);                          break;                      case 'Z':                          index = HandleZ(value' result' index' slavoGermanic);                          break;                      default:                          index++;                          break;                  }
Magic Number,Lucene.Net.Analysis.Phonetic.Language,DoubleMetaphone,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\DoubleMetaphone.cs,GetDoubleMetaphone,The following statement contains a magic number: switch (value[index])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          index = HandleAEIOUY(result' index);                          break;                      case 'B':                          result.Append('P');                          index = CharAt(value' index + 1) == 'B' ? index + 2 : index + 1;                          break;                      case '\u00C7':                          // A C with a Cedilla                          result.Append('S');                          index++;                          break;                      case 'C':                          index = HandleC(value' result' index);                          break;                      case 'D':                          index = HandleD(value' result' index);                          break;                      case 'F':                          result.Append('F');                          index = CharAt(value' index + 1) == 'F' ? index + 2 : index + 1;                          break;                      case 'G':                          index = HandleG(value' result' index' slavoGermanic);                          break;                      case 'H':                          index = HandleH(value' result' index);                          break;                      case 'J':                          index = HandleJ(value' result' index' slavoGermanic);                          break;                      case 'K':                          result.Append('K');                          index = CharAt(value' index + 1) == 'K' ? index + 2 : index + 1;                          break;                      case 'L':                          index = HandleL(value' result' index);                          break;                      case 'M':                          result.Append('M');                          index = ConditionM0(value' index) ? index + 2 : index + 1;                          break;                      case 'N':                          result.Append('N');                          index = CharAt(value' index + 1) == 'N' ? index + 2 : index + 1;                          break;                      case '\u00D1':                          // N with a tilde (spanish ene)                          result.Append('N');                          index++;                          break;                      case 'P':                          index = HandleP(value' result' index);                          break;                      case 'Q':                          result.Append('K');                          index = CharAt(value' index + 1) == 'Q' ? index + 2 : index + 1;                          break;                      case 'R':                          index = HandleR(value' result' index' slavoGermanic);                          break;                      case 'S':                          index = HandleS(value' result' index' slavoGermanic);                          break;                      case 'T':                          index = HandleT(value' result' index);                          break;                      case 'V':                          result.Append('F');                          index = CharAt(value' index + 1) == 'V' ? index + 2 : index + 1;                          break;                      case 'W':                          index = HandleW(value' result' index);                          break;                      case 'X':                          index = HandleX(value' result' index);                          break;                      case 'Z':                          index = HandleZ(value' result' index' slavoGermanic);                          break;                      default:                          index++;                          break;                  }
Magic Number,Lucene.Net.Analysis.Phonetic.Language,DoubleMetaphone,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\DoubleMetaphone.cs,GetDoubleMetaphone,The following statement contains a magic number: switch (value[index])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          index = HandleAEIOUY(result' index);                          break;                      case 'B':                          result.Append('P');                          index = CharAt(value' index + 1) == 'B' ? index + 2 : index + 1;                          break;                      case '\u00C7':                          // A C with a Cedilla                          result.Append('S');                          index++;                          break;                      case 'C':                          index = HandleC(value' result' index);                          break;                      case 'D':                          index = HandleD(value' result' index);                          break;                      case 'F':                          result.Append('F');                          index = CharAt(value' index + 1) == 'F' ? index + 2 : index + 1;                          break;                      case 'G':                          index = HandleG(value' result' index' slavoGermanic);                          break;                      case 'H':                          index = HandleH(value' result' index);                          break;                      case 'J':                          index = HandleJ(value' result' index' slavoGermanic);                          break;                      case 'K':                          result.Append('K');                          index = CharAt(value' index + 1) == 'K' ? index + 2 : index + 1;                          break;                      case 'L':                          index = HandleL(value' result' index);                          break;                      case 'M':                          result.Append('M');                          index = ConditionM0(value' index) ? index + 2 : index + 1;                          break;                      case 'N':                          result.Append('N');                          index = CharAt(value' index + 1) == 'N' ? index + 2 : index + 1;                          break;                      case '\u00D1':                          // N with a tilde (spanish ene)                          result.Append('N');                          index++;                          break;                      case 'P':                          index = HandleP(value' result' index);                          break;                      case 'Q':                          result.Append('K');                          index = CharAt(value' index + 1) == 'Q' ? index + 2 : index + 1;                          break;                      case 'R':                          index = HandleR(value' result' index' slavoGermanic);                          break;                      case 'S':                          index = HandleS(value' result' index' slavoGermanic);                          break;                      case 'T':                          index = HandleT(value' result' index);                          break;                      case 'V':                          result.Append('F');                          index = CharAt(value' index + 1) == 'V' ? index + 2 : index + 1;                          break;                      case 'W':                          index = HandleW(value' result' index);                          break;                      case 'X':                          index = HandleX(value' result' index);                          break;                      case 'Z':                          index = HandleZ(value' result' index' slavoGermanic);                          break;                      default:                          index++;                          break;                  }
Magic Number,Lucene.Net.Analysis.Phonetic.Language,DoubleMetaphone,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\DoubleMetaphone.cs,GetDoubleMetaphone,The following statement contains a magic number: switch (value[index])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          index = HandleAEIOUY(result' index);                          break;                      case 'B':                          result.Append('P');                          index = CharAt(value' index + 1) == 'B' ? index + 2 : index + 1;                          break;                      case '\u00C7':                          // A C with a Cedilla                          result.Append('S');                          index++;                          break;                      case 'C':                          index = HandleC(value' result' index);                          break;                      case 'D':                          index = HandleD(value' result' index);                          break;                      case 'F':                          result.Append('F');                          index = CharAt(value' index + 1) == 'F' ? index + 2 : index + 1;                          break;                      case 'G':                          index = HandleG(value' result' index' slavoGermanic);                          break;                      case 'H':                          index = HandleH(value' result' index);                          break;                      case 'J':                          index = HandleJ(value' result' index' slavoGermanic);                          break;                      case 'K':                          result.Append('K');                          index = CharAt(value' index + 1) == 'K' ? index + 2 : index + 1;                          break;                      case 'L':                          index = HandleL(value' result' index);                          break;                      case 'M':                          result.Append('M');                          index = ConditionM0(value' index) ? index + 2 : index + 1;                          break;                      case 'N':                          result.Append('N');                          index = CharAt(value' index + 1) == 'N' ? index + 2 : index + 1;                          break;                      case '\u00D1':                          // N with a tilde (spanish ene)                          result.Append('N');                          index++;                          break;                      case 'P':                          index = HandleP(value' result' index);                          break;                      case 'Q':                          result.Append('K');                          index = CharAt(value' index + 1) == 'Q' ? index + 2 : index + 1;                          break;                      case 'R':                          index = HandleR(value' result' index' slavoGermanic);                          break;                      case 'S':                          index = HandleS(value' result' index' slavoGermanic);                          break;                      case 'T':                          index = HandleT(value' result' index);                          break;                      case 'V':                          result.Append('F');                          index = CharAt(value' index + 1) == 'V' ? index + 2 : index + 1;                          break;                      case 'W':                          index = HandleW(value' result' index);                          break;                      case 'X':                          index = HandleX(value' result' index);                          break;                      case 'Z':                          index = HandleZ(value' result' index' slavoGermanic);                          break;                      default:                          index++;                          break;                  }
Magic Number,Lucene.Net.Analysis.Phonetic.Language,DoubleMetaphone,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\DoubleMetaphone.cs,GetDoubleMetaphone,The following statement contains a magic number: switch (value[index])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          index = HandleAEIOUY(result' index);                          break;                      case 'B':                          result.Append('P');                          index = CharAt(value' index + 1) == 'B' ? index + 2 : index + 1;                          break;                      case '\u00C7':                          // A C with a Cedilla                          result.Append('S');                          index++;                          break;                      case 'C':                          index = HandleC(value' result' index);                          break;                      case 'D':                          index = HandleD(value' result' index);                          break;                      case 'F':                          result.Append('F');                          index = CharAt(value' index + 1) == 'F' ? index + 2 : index + 1;                          break;                      case 'G':                          index = HandleG(value' result' index' slavoGermanic);                          break;                      case 'H':                          index = HandleH(value' result' index);                          break;                      case 'J':                          index = HandleJ(value' result' index' slavoGermanic);                          break;                      case 'K':                          result.Append('K');                          index = CharAt(value' index + 1) == 'K' ? index + 2 : index + 1;                          break;                      case 'L':                          index = HandleL(value' result' index);                          break;                      case 'M':                          result.Append('M');                          index = ConditionM0(value' index) ? index + 2 : index + 1;                          break;                      case 'N':                          result.Append('N');                          index = CharAt(value' index + 1) == 'N' ? index + 2 : index + 1;                          break;                      case '\u00D1':                          // N with a tilde (spanish ene)                          result.Append('N');                          index++;                          break;                      case 'P':                          index = HandleP(value' result' index);                          break;                      case 'Q':                          result.Append('K');                          index = CharAt(value' index + 1) == 'Q' ? index + 2 : index + 1;                          break;                      case 'R':                          index = HandleR(value' result' index' slavoGermanic);                          break;                      case 'S':                          index = HandleS(value' result' index' slavoGermanic);                          break;                      case 'T':                          index = HandleT(value' result' index);                          break;                      case 'V':                          result.Append('F');                          index = CharAt(value' index + 1) == 'V' ? index + 2 : index + 1;                          break;                      case 'W':                          index = HandleW(value' result' index);                          break;                      case 'X':                          index = HandleX(value' result' index);                          break;                      case 'Z':                          index = HandleZ(value' result' index' slavoGermanic);                          break;                      default:                          index++;                          break;                  }
Magic Number,Lucene.Net.Analysis.Phonetic.Language,DoubleMetaphone,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\DoubleMetaphone.cs,GetDoubleMetaphone,The following statement contains a magic number: switch (value[index])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          index = HandleAEIOUY(result' index);                          break;                      case 'B':                          result.Append('P');                          index = CharAt(value' index + 1) == 'B' ? index + 2 : index + 1;                          break;                      case '\u00C7':                          // A C with a Cedilla                          result.Append('S');                          index++;                          break;                      case 'C':                          index = HandleC(value' result' index);                          break;                      case 'D':                          index = HandleD(value' result' index);                          break;                      case 'F':                          result.Append('F');                          index = CharAt(value' index + 1) == 'F' ? index + 2 : index + 1;                          break;                      case 'G':                          index = HandleG(value' result' index' slavoGermanic);                          break;                      case 'H':                          index = HandleH(value' result' index);                          break;                      case 'J':                          index = HandleJ(value' result' index' slavoGermanic);                          break;                      case 'K':                          result.Append('K');                          index = CharAt(value' index + 1) == 'K' ? index + 2 : index + 1;                          break;                      case 'L':                          index = HandleL(value' result' index);                          break;                      case 'M':                          result.Append('M');                          index = ConditionM0(value' index) ? index + 2 : index + 1;                          break;                      case 'N':                          result.Append('N');                          index = CharAt(value' index + 1) == 'N' ? index + 2 : index + 1;                          break;                      case '\u00D1':                          // N with a tilde (spanish ene)                          result.Append('N');                          index++;                          break;                      case 'P':                          index = HandleP(value' result' index);                          break;                      case 'Q':                          result.Append('K');                          index = CharAt(value' index + 1) == 'Q' ? index + 2 : index + 1;                          break;                      case 'R':                          index = HandleR(value' result' index' slavoGermanic);                          break;                      case 'S':                          index = HandleS(value' result' index' slavoGermanic);                          break;                      case 'T':                          index = HandleT(value' result' index);                          break;                      case 'V':                          result.Append('F');                          index = CharAt(value' index + 1) == 'V' ? index + 2 : index + 1;                          break;                      case 'W':                          index = HandleW(value' result' index);                          break;                      case 'X':                          index = HandleX(value' result' index);                          break;                      case 'Z':                          index = HandleZ(value' result' index' slavoGermanic);                          break;                      default:                          index++;                          break;                  }
Magic Number,Lucene.Net.Analysis.Phonetic.Language,DoubleMetaphone,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\DoubleMetaphone.cs,HandleC,The following statement contains a magic number: index += 2;
Magic Number,Lucene.Net.Analysis.Phonetic.Language,DoubleMetaphone,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\DoubleMetaphone.cs,HandleCC,The following statement contains a magic number: (index == 1 && CharAt(value' index - 1) == 'A') ||                      Contains(value' index - 1' 5' "UCCEE"' "UCCES")
Magic Number,Lucene.Net.Analysis.Phonetic.Language,DoubleMetaphone,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\DoubleMetaphone.cs,HandleCC,The following statement contains a magic number: index += 3;
Magic Number,Lucene.Net.Analysis.Phonetic.Language,DoubleMetaphone,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\DoubleMetaphone.cs,HandleCC,The following statement contains a magic number: Contains(value' index + 2' 1' "I"' "E"' "H") &&                  !Contains(value' index + 2' 2' "HU")
Magic Number,Lucene.Net.Analysis.Phonetic.Language,DoubleMetaphone,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\DoubleMetaphone.cs,HandleCC,The following statement contains a magic number: Contains(value' index + 2' 1' "I"' "E"' "H") &&                  !Contains(value' index + 2' 2' "HU")
Magic Number,Lucene.Net.Analysis.Phonetic.Language,DoubleMetaphone,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\DoubleMetaphone.cs,HandleCC,The following statement contains a magic number: Contains(value' index + 2' 1' "I"' "E"' "H") &&                  !Contains(value' index + 2' 2' "HU")
Magic Number,Lucene.Net.Analysis.Phonetic.Language,DoubleMetaphone,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\DoubleMetaphone.cs,HandleCH,The following statement contains a magic number: return index + 2;
Magic Number,Lucene.Net.Analysis.Phonetic.Language,DoubleMetaphone,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\DoubleMetaphone.cs,HandleCH,The following statement contains a magic number: index > 0 && Contains(value' index' 4' "CHAE")
Magic Number,Lucene.Net.Analysis.Phonetic.Language,DoubleMetaphone,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\DoubleMetaphone.cs,HandleD,The following statement contains a magic number: index += 3;
Magic Number,Lucene.Net.Analysis.Phonetic.Language,DoubleMetaphone,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\DoubleMetaphone.cs,HandleD,The following statement contains a magic number: Contains(value' index + 2' 1' "I"' "E"' "Y")
Magic Number,Lucene.Net.Analysis.Phonetic.Language,DoubleMetaphone,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\DoubleMetaphone.cs,HandleD,The following statement contains a magic number: Contains(value' index' 2' "DG")
Magic Number,Lucene.Net.Analysis.Phonetic.Language,DoubleMetaphone,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\DoubleMetaphone.cs,HandleGH,The following statement contains a magic number: index += 2;
Magic Number,Lucene.Net.Analysis.Phonetic.Language,DoubleMetaphone,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\DoubleMetaphone.cs,HandleH,The following statement contains a magic number: index += 2;
Magic Number,Lucene.Net.Analysis.Phonetic.Language,DoubleMetaphone,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\DoubleMetaphone.cs,HandleJ,The following statement contains a magic number: (index == 0 && (CharAt(value' index + 4) == ' ') ||                       value.Length == 4) || Contains(value' 0' 4' "SAN ")
Magic Number,Lucene.Net.Analysis.Phonetic.Language,DoubleMetaphone,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\DoubleMetaphone.cs,HandleJ,The following statement contains a magic number: (index == 0 && (CharAt(value' index + 4) == ' ') ||                       value.Length == 4) || Contains(value' 0' 4' "SAN ")
Magic Number,Lucene.Net.Analysis.Phonetic.Language,DoubleMetaphone,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\DoubleMetaphone.cs,HandleJ,The following statement contains a magic number: (index == 0 && (CharAt(value' index + 4) == ' ') ||                       value.Length == 4) || Contains(value' 0' 4' "SAN ")
Magic Number,Lucene.Net.Analysis.Phonetic.Language,DoubleMetaphone,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\DoubleMetaphone.cs,HandleJ,The following statement contains a magic number: Contains(value' index' 4' "JOSE") || Contains(value' 0' 4' "SAN ")
Magic Number,Lucene.Net.Analysis.Phonetic.Language,DoubleMetaphone,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\DoubleMetaphone.cs,HandleJ,The following statement contains a magic number: Contains(value' index' 4' "JOSE") || Contains(value' 0' 4' "SAN ")
Magic Number,Lucene.Net.Analysis.Phonetic.Language,DoubleMetaphone,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\DoubleMetaphone.cs,HandleL,The following statement contains a magic number: index += 2;
Magic Number,Lucene.Net.Analysis.Phonetic.Language,DoubleMetaphone,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\DoubleMetaphone.cs,HandleP,The following statement contains a magic number: index += 2;
Magic Number,Lucene.Net.Analysis.Phonetic.Language,DoubleMetaphone,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\DoubleMetaphone.cs,HandleR,The following statement contains a magic number: index == value.Length - 1 && !slavoGermanic &&                  Contains(value' index - 2' 2' "IE") &&                  !Contains(value' index - 4' 2' "ME"' "MA")
Magic Number,Lucene.Net.Analysis.Phonetic.Language,DoubleMetaphone,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\DoubleMetaphone.cs,HandleR,The following statement contains a magic number: index == value.Length - 1 && !slavoGermanic &&                  Contains(value' index - 2' 2' "IE") &&                  !Contains(value' index - 4' 2' "ME"' "MA")
Magic Number,Lucene.Net.Analysis.Phonetic.Language,DoubleMetaphone,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\DoubleMetaphone.cs,HandleR,The following statement contains a magic number: index == value.Length - 1 && !slavoGermanic &&                  Contains(value' index - 2' 2' "IE") &&                  !Contains(value' index - 4' 2' "ME"' "MA")
Magic Number,Lucene.Net.Analysis.Phonetic.Language,DoubleMetaphone,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\DoubleMetaphone.cs,HandleR,The following statement contains a magic number: index == value.Length - 1 && !slavoGermanic &&                  Contains(value' index - 2' 2' "IE") &&                  !Contains(value' index - 4' 2' "ME"' "MA")
Magic Number,Lucene.Net.Analysis.Phonetic.Language,DoubleMetaphone,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\DoubleMetaphone.cs,HandleR,The following statement contains a magic number: return CharAt(value' index + 1) == 'R' ? index + 2 : index + 1;
Magic Number,Lucene.Net.Analysis.Phonetic.Language,DoubleMetaphone,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\DoubleMetaphone.cs,HandleS,The following statement contains a magic number: Contains(value' index - 1' 3' "ISL"' "YSL")
Magic Number,Lucene.Net.Analysis.Phonetic.Language,DoubleMetaphone,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\DoubleMetaphone.cs,HandleSC,The following statement contains a magic number: Contains(value' index + 3' 2' "ER"' "EN")
Magic Number,Lucene.Net.Analysis.Phonetic.Language,DoubleMetaphone,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\DoubleMetaphone.cs,HandleSC,The following statement contains a magic number: Contains(value' index + 3' 2' "ER"' "EN")
Magic Number,Lucene.Net.Analysis.Phonetic.Language,DoubleMetaphone,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\DoubleMetaphone.cs,HandleSC,The following statement contains a magic number: Contains(value' index + 3' 2' "OO"' "ER"' "EN"' "UY"' "ED"' "EM")
Magic Number,Lucene.Net.Analysis.Phonetic.Language,DoubleMetaphone,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\DoubleMetaphone.cs,HandleSC,The following statement contains a magic number: Contains(value' index + 3' 2' "OO"' "ER"' "EN"' "UY"' "ED"' "EM")
Magic Number,Lucene.Net.Analysis.Phonetic.Language,DoubleMetaphone,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\DoubleMetaphone.cs,HandleSC,The following statement contains a magic number: CharAt(value' index + 2) == 'H'
Magic Number,Lucene.Net.Analysis.Phonetic.Language,DoubleMetaphone,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\DoubleMetaphone.cs,HandleSC,The following statement contains a magic number: return index + 3;
Magic Number,Lucene.Net.Analysis.Phonetic.Language,DoubleMetaphone,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\DoubleMetaphone.cs,HandleT,The following statement contains a magic number: index += 3;
Magic Number,Lucene.Net.Analysis.Phonetic.Language,DoubleMetaphone,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\DoubleMetaphone.cs,HandleT,The following statement contains a magic number: Contains(value' index' 4' "TION")
Magic Number,Lucene.Net.Analysis.Phonetic.Language,DoubleMetaphone,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\DoubleMetaphone.cs,HandleW,The following statement contains a magic number: index += 2;
Magic Number,Lucene.Net.Analysis.Phonetic.Language,DoubleMetaphone,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\DoubleMetaphone.cs,HandleW,The following statement contains a magic number: Contains(value' index' 2' "WR")
Magic Number,Lucene.Net.Analysis.Phonetic.Language,DoubleMetaphone,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\DoubleMetaphone.cs,HandleZ,The following statement contains a magic number: index += 2;
Magic Number,Lucene.Net.Analysis.Phonetic.Language,DoubleMetaphone,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\DoubleMetaphone.cs,ConditionC0,The following statement contains a magic number: Contains(value' index' 4' "CHIA")
Magic Number,Lucene.Net.Analysis.Phonetic.Language,DoubleMetaphone,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\DoubleMetaphone.cs,ConditionCH1,The following statement contains a magic number: return ((Contains(value' 0' 4' "VAN "' "VON ") || Contains(value' 0' 3' "SCH")) ||                      Contains(value' index - 2' 6' "ORCHES"' "ARCHIT"' "ORCHID") ||                      Contains(value' index + 2' 1' "T"' "S") ||                      ((Contains(value' index - 1' 1' "A"' "O"' "U"' "E") || index == 0) &&                       (Contains(value' index + 2' 1' L_R_N_M_B_H_F_V_W_SPACE) || index + 1 == value.Length - 1)));
Magic Number,Lucene.Net.Analysis.Phonetic.Language,DoubleMetaphone,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\DoubleMetaphone.cs,ConditionCH1,The following statement contains a magic number: return ((Contains(value' 0' 4' "VAN "' "VON ") || Contains(value' 0' 3' "SCH")) ||                      Contains(value' index - 2' 6' "ORCHES"' "ARCHIT"' "ORCHID") ||                      Contains(value' index + 2' 1' "T"' "S") ||                      ((Contains(value' index - 1' 1' "A"' "O"' "U"' "E") || index == 0) &&                       (Contains(value' index + 2' 1' L_R_N_M_B_H_F_V_W_SPACE) || index + 1 == value.Length - 1)));
Magic Number,Lucene.Net.Analysis.Phonetic.Language,DoubleMetaphone,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\DoubleMetaphone.cs,ConditionCH1,The following statement contains a magic number: return ((Contains(value' 0' 4' "VAN "' "VON ") || Contains(value' 0' 3' "SCH")) ||                      Contains(value' index - 2' 6' "ORCHES"' "ARCHIT"' "ORCHID") ||                      Contains(value' index + 2' 1' "T"' "S") ||                      ((Contains(value' index - 1' 1' "A"' "O"' "U"' "E") || index == 0) &&                       (Contains(value' index + 2' 1' L_R_N_M_B_H_F_V_W_SPACE) || index + 1 == value.Length - 1)));
Magic Number,Lucene.Net.Analysis.Phonetic.Language,DoubleMetaphone,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\DoubleMetaphone.cs,ConditionCH1,The following statement contains a magic number: return ((Contains(value' 0' 4' "VAN "' "VON ") || Contains(value' 0' 3' "SCH")) ||                      Contains(value' index - 2' 6' "ORCHES"' "ARCHIT"' "ORCHID") ||                      Contains(value' index + 2' 1' "T"' "S") ||                      ((Contains(value' index - 1' 1' "A"' "O"' "U"' "E") || index == 0) &&                       (Contains(value' index + 2' 1' L_R_N_M_B_H_F_V_W_SPACE) || index + 1 == value.Length - 1)));
Magic Number,Lucene.Net.Analysis.Phonetic.Language,DoubleMetaphone,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\DoubleMetaphone.cs,ConditionCH1,The following statement contains a magic number: return ((Contains(value' 0' 4' "VAN "' "VON ") || Contains(value' 0' 3' "SCH")) ||                      Contains(value' index - 2' 6' "ORCHES"' "ARCHIT"' "ORCHID") ||                      Contains(value' index + 2' 1' "T"' "S") ||                      ((Contains(value' index - 1' 1' "A"' "O"' "U"' "E") || index == 0) &&                       (Contains(value' index + 2' 1' L_R_N_M_B_H_F_V_W_SPACE) || index + 1 == value.Length - 1)));
Magic Number,Lucene.Net.Analysis.Phonetic.Language,DoubleMetaphone,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\DoubleMetaphone.cs,ConditionCH1,The following statement contains a magic number: return ((Contains(value' 0' 4' "VAN "' "VON ") || Contains(value' 0' 3' "SCH")) ||                      Contains(value' index - 2' 6' "ORCHES"' "ARCHIT"' "ORCHID") ||                      Contains(value' index + 2' 1' "T"' "S") ||                      ((Contains(value' index - 1' 1' "A"' "O"' "U"' "E") || index == 0) &&                       (Contains(value' index + 2' 1' L_R_N_M_B_H_F_V_W_SPACE) || index + 1 == value.Length - 1)));
Magic Number,Lucene.Net.Analysis.Phonetic.Language,DoubleMetaphone,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\DoubleMetaphone.cs,ConditionL0,The following statement contains a magic number: index == value.Length - 3 &&                  Contains(value' index - 1' 4' "ILLO"' "ILLA"' "ALLE")
Magic Number,Lucene.Net.Analysis.Phonetic.Language,DoubleMetaphone,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\DoubleMetaphone.cs,ConditionL0,The following statement contains a magic number: index == value.Length - 3 &&                  Contains(value' index - 1' 4' "ILLO"' "ILLA"' "ALLE")
Magic Number,Lucene.Net.Analysis.Phonetic.Language,DoubleMetaphone,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\DoubleMetaphone.cs,ConditionM0,The following statement contains a magic number: return Contains(value' index - 1' 3' "UMB") &&                     ((index + 1) == value.Length - 1 || Contains(value' index + 2' 2' "ER"));
Magic Number,Lucene.Net.Analysis.Phonetic.Language,DoubleMetaphone,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\DoubleMetaphone.cs,ConditionM0,The following statement contains a magic number: return Contains(value' index - 1' 3' "UMB") &&                     ((index + 1) == value.Length - 1 || Contains(value' index + 2' 2' "ER"));
Magic Number,Lucene.Net.Analysis.Phonetic.Language,DoubleMetaphone,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\DoubleMetaphone.cs,ConditionM0,The following statement contains a magic number: return Contains(value' index - 1' 3' "UMB") &&                     ((index + 1) == value.Length - 1 || Contains(value' index + 2' 2' "ER"));
Magic Number,Lucene.Net.Analysis.Phonetic.Language,Metaphone,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\Metaphone.cs,GetMetaphone,The following statement contains a magic number: StringBuilder local = new StringBuilder(40);
Magic Number,Lucene.Net.Analysis.Phonetic.Language,Metaphone,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\Metaphone.cs,GetMetaphone,The following statement contains a magic number: StringBuilder code = new StringBuilder(10);
Magic Number,Lucene.Net.Analysis.Phonetic.Language,Nysiis,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\Nysiis.cs,GetNysiis,The following statement contains a magic number: char aNext = i < len - 2 ? chars[i + 2] : SPACE;
Magic Number,Lucene.Net.Analysis.Phonetic.Language,Nysiis,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\Nysiis.cs,GetNysiis,The following statement contains a magic number: char aNext = i < len - 2 ? chars[i + 2] : SPACE;
Magic Number,Lucene.Net.Analysis.Phonetic.Language,Nysiis,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\Nysiis.cs,GetNysiis,The following statement contains a magic number: char last2Char = key[key.Length - 2];
Magic Number,Lucene.Net.Analysis.Phonetic.Language,Nysiis,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\Nysiis.cs,GetNysiis,The following statement contains a magic number: key.Remove(key.Length - 2' 1);
Magic Number,Lucene.Net.Analysis.Phonetic.Language,Nysiis,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\Nysiis.cs,GetNysiis,The following statement contains a magic number: key.Length > 2
Magic Number,Lucene.Net.Analysis.Phonetic.Language.Bm,PhoneticEngine,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\Bm\PhoneticEngine.cs,Encode,The following statement contains a magic number: string remainder = input.Substring(2);
Magic Number,Lucene.Net.Analysis.Phonetic.Language.Bm,PhoneticEngine,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\Bm\PhoneticEngine.cs,Encode,The following statement contains a magic number: input.Length >= 2 && input.Substring(0' 2 - 0).Equals("d'"' StringComparison.Ordinal)
Magic Number,Lucene.Net.Analysis.Phonetic.Language.Bm,PhoneticEngine,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\Bm\PhoneticEngine.cs,Encode,The following statement contains a magic number: input.Length >= 2 && input.Substring(0' 2 - 0).Equals("d'"' StringComparison.Ordinal)
Missing Default,Lucene.Net.Analysis.Phonetic.Language.Bm,NameTypeExtensions,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\Bm\NameType.cs,GetName,The following switch statement is missing a default case: switch (nameType)              {                  case NameType.ASHKENAZI:                      return "ash";                  case NameType.GENERIC:                      return "gen";                  case NameType.SEPHARDIC:                      return "sep";              }
Missing Default,Lucene.Net.Analysis.Phonetic.Language.Bm,RuleTypeExtensions,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Analysis.Phonetic\Language\Bm\RuleType.cs,GetName,The following switch statement is missing a default case: switch (ruleType)              {                  case RuleType.APPROX:                      return "approx";                  case RuleType.EXACT:                      return "exact";                  case RuleType.RULES:                      return "rules";              }
