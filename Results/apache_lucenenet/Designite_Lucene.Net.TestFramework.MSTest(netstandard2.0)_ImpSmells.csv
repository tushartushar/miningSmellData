Implementation smell,Namespace,Class,File,Method,Description
Long Method,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,AssertTokenStreamContents,The method has 255 lines of code.
Long Method,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,CheckRandomData,The method has 124 lines of code.
Long Method,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,CheckAnalysisConsistency,The method has 232 lines of code.
Long Method,Lucene.Net.Analysis,LookaheadTokenFilter<T>,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\LookaheadTokenFilter.cs,NextToken,The method has 105 lines of code.
Long Method,Lucene.Net.Codecs.Lucene40,Lucene40DocValuesWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene40\Lucene40DocValuesWriter.cs,AddBinaryField,The method has 122 lines of code.
Long Method,Lucene.Net.Codecs.Lucene42,Lucene42DocValuesConsumer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene42\Lucene42DocValuesConsumer.cs,AddNumericField,The method has 109 lines of code.
Long Method,Lucene.Net.Codecs.MockRandom,MockRandomPostingsFormat,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\MockRandom\MockRandomPostingsFormat.cs,FieldsConsumer,The method has 211 lines of code.
Long Method,Lucene.Net.Codecs.MockRandom,MockRandomPostingsFormat,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\MockRandom\MockRandomPostingsFormat.cs,FieldsProducer,The method has 193 lines of code.
Long Method,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestHugeBinaryValues,The method has 132 lines of code.
Long Method,Lucene.Net.Index,ThreadAnonymousInnerClassHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,Run,The method has 211 lines of code.
Long Method,Lucene.Net.Index,BasePostingsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,BeforeClass,The method has 106 lines of code.
Long Method,Lucene.Net.Index,BasePostingsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,BuildIndex,The method has 126 lines of code.
Long Method,Lucene.Net.Index,BasePostingsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,VerifyEnum,The method has 353 lines of code.
Long Method,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,TestRandomStoredFields,The method has 105 lines of code.
Long Method,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,TestWriteReadMerge,The method has 103 lines of code.
Long Method,Lucene.Net.Index,BaseTermVectorsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseTermVectorsFormatTestCase.cs,AssertEquals,The method has 134 lines of code.
Long Method,Lucene.Net.Index,ThreadedIndexingAndSearchingTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\ThreadedIndexingAndSearchingTestCase.cs,RunTest,The method has 195 lines of code.
Long Method,Lucene.Net.Store,MockDirectoryWrapper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\MockDirectoryWrapper.cs,Crash,The method has 109 lines of code.
Long Method,Lucene.Net.Store,MockDirectoryWrapper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\MockDirectoryWrapper.cs,Dispose,The method has 169 lines of code.
Long Method,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,NewIndexWriterConfig,The method has 111 lines of code.
Long Method,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,AssertDocValuesEquals,The method has 124 lines of code.
Long Method,Lucene.Net.Util,English,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\English.cs,Int64ToEnglish,The method has 157 lines of code.
Long Method,Lucene.Net.Util,TestRuleSetupAndRestoreClassEnv,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestRuleSetupAndRestoreClassEnv.cs,Before,The method has 182 lines of code.
Long Method,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,RandomHtmlishString,The method has 170 lines of code.
Long Method,Lucene.Net.Util.Fst,FSTTester<T>,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\Fst\FSTTester.cs,VerifyUnPruned,The method has 350 lines of code.
Long Method,Lucene.Net.Util.Fst,FSTTester<T>,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\Fst\FSTTester.cs,VerifyPruned,The method has 197 lines of code.
Complex Method,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,AssertTokenStreamContents,Cyclomatic complexity of the method is 41
Complex Method,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,CheckRandomData,Cyclomatic complexity of the method is 17
Complex Method,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,CheckAnalysisConsistency,Cyclomatic complexity of the method is 26
Complex Method,Lucene.Net.Analysis,LookaheadTokenFilter<T>,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\LookaheadTokenFilter.cs,PeekToken,Cyclomatic complexity of the method is 8
Complex Method,Lucene.Net.Analysis,LookaheadTokenFilter<T>,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\LookaheadTokenFilter.cs,NextToken,Cyclomatic complexity of the method is 18
Complex Method,Lucene.Net.Analysis,MockAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\MockAnalyzer.cs,MaybePayload,Cyclomatic complexity of the method is 10
Complex Method,Lucene.Net.Analysis,MockGraphTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\MockGraphTokenFilter.cs,AfterPosition,Cyclomatic complexity of the method is 8
Complex Method,Lucene.Net.Analysis,MockRandomLookaheadTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\MockRandomLookaheadTokenFilter.cs,IncrementToken,Cyclomatic complexity of the method is 12
Complex Method,Lucene.Net.Analysis,TokenStreamToDot,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\TokenStreamToDot.cs,ToDot,Cyclomatic complexity of the method is 9
Complex Method,Lucene.Net.Analysis,ValidatingTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\ValidatingTokenFilter.cs,IncrementToken,Cyclomatic complexity of the method is 11
Complex Method,Lucene.Net.Codecs.Lucene3x,PreFlexRWFieldInfosReader,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene3x\PreFlexRWFieldInfosReader.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,Lucene.Net.Codecs.Lucene3x,PreFlexRWFieldInfosWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene3x\PreFlexRWFieldInfosWriter.cs,Write,Cyclomatic complexity of the method is 9
Complex Method,Lucene.Net.Codecs.Lucene3x,PreFlexRWStoredFieldsWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene3x\PreFlexRWStoredFieldsWriter.cs,WriteField,Cyclomatic complexity of the method is 14
Complex Method,Lucene.Net.Codecs.Lucene40,Lucene40DocValuesWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene40\Lucene40DocValuesWriter.cs,AddBinaryField,Cyclomatic complexity of the method is 10
Complex Method,Lucene.Net.Codecs.Lucene40,Lucene40FieldInfosWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene40\Lucene40FieldInfosWriter.cs,Write,Cyclomatic complexity of the method is 9
Complex Method,Lucene.Net.Codecs.Lucene42,Lucene42DocValuesConsumer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene42\Lucene42DocValuesConsumer.cs,AddNumericField,Cyclomatic complexity of the method is 17
Complex Method,Lucene.Net.Codecs.Lucene42,Lucene42FieldInfosWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene42\Lucene42FieldInfosWriter.cs,Write,Cyclomatic complexity of the method is 9
Complex Method,Lucene.Net.Codecs.MockRandom,MockRandomPostingsFormat,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\MockRandom\MockRandomPostingsFormat.cs,FieldsConsumer,Cyclomatic complexity of the method is 19
Complex Method,Lucene.Net.Codecs.MockRandom,MockRandomPostingsFormat,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\MockRandom\MockRandomPostingsFormat.cs,FieldsProducer,Cyclomatic complexity of the method is 19
Complex Method,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestRandomSortedBytes,Cyclomatic complexity of the method is 11
Complex Method,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,DoTestSortedSetVsStoredFields,Cyclomatic complexity of the method is 12
Complex Method,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,AssertEquals,Cyclomatic complexity of the method is 9
Complex Method,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,DoTestSortedSetVsUninvertedField,Cyclomatic complexity of the method is 9
Complex Method,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestThreads2,Cyclomatic complexity of the method is 10
Complex Method,Lucene.Net.Index,ThreadAnonymousInnerClassHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,Run,Cyclomatic complexity of the method is 33
Complex Method,Lucene.Net.Index,ThreadAnonymousInnerClassHelper2,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,Run,Cyclomatic complexity of the method is 12
Complex Method,Lucene.Net.Index,ThreadAnonymousInnerClassHelper2,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,Run,Cyclomatic complexity of the method is 12
Complex Method,Lucene.Net.Index,BasePostingsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,BeforeClass,Cyclomatic complexity of the method is 16
Complex Method,Lucene.Net.Index,BasePostingsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,BuildIndex,Cyclomatic complexity of the method is 17
Complex Method,Lucene.Net.Index,BasePostingsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,VerifyEnum,Cyclomatic complexity of the method is 60
Complex Method,Lucene.Net.Index,BasePostingsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,TestTermsOneThread,Cyclomatic complexity of the method is 10
Complex Method,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,TestRandomStoredFields,Cyclomatic complexity of the method is 17
Complex Method,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,TestWriteReadMerge,Cyclomatic complexity of the method is 12
Complex Method,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,TestBigDocuments,Cyclomatic complexity of the method is 8
Complex Method,Lucene.Net.Index,BaseTermVectorsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseTermVectorsFormatTestCase.cs,AssertEquals,Cyclomatic complexity of the method is 19
Complex Method,Lucene.Net.Index,BaseTermVectorsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseTermVectorsFormatTestCase.cs,TestMerge,Cyclomatic complexity of the method is 9
Complex Method,Lucene.Net.Index,BaseTermVectorsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseTermVectorsFormatTestCase.cs,TestClone,Cyclomatic complexity of the method is 8
Complex Method,Lucene.Net.Index,RandomTokenStream,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseTermVectorsFormatTestCase.cs,RandomTokenStream,Cyclomatic complexity of the method is 13
Complex Method,Lucene.Net.Index,DocHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\DocHelper.cs,DocHelper,Cyclomatic complexity of the method is 10
Complex Method,Lucene.Net.Index,MockRandomMergePolicy,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\MockRandomMergePolicy.cs,FindForcedMerges,Cyclomatic complexity of the method is 8
Complex Method,Lucene.Net.Index,ThreadedIndexingAndSearchingTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\ThreadedIndexingAndSearchingTestCase.cs,RunTest,Cyclomatic complexity of the method is 28
Complex Method,Lucene.Net.Search,CheckHits,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Search\CheckHits.cs,VerifyExplanation,Cyclomatic complexity of the method is 14
Complex Method,Lucene.Net.Store,BaseDirectoryTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\BaseDirectoryTestCase.cs,TestCopyBytes,Cyclomatic complexity of the method is 8
Complex Method,Lucene.Net.Store,MockDirectoryWrapper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\MockDirectoryWrapper.cs,Crash,Cyclomatic complexity of the method is 11
Complex Method,Lucene.Net.Store,MockDirectoryWrapper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\MockDirectoryWrapper.cs,CreateOutput,Cyclomatic complexity of the method is 13
Complex Method,Lucene.Net.Store,MockDirectoryWrapper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\MockDirectoryWrapper.cs,OpenInput,Cyclomatic complexity of the method is 8
Complex Method,Lucene.Net.Store,MockDirectoryWrapper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\MockDirectoryWrapper.cs,Dispose,Cyclomatic complexity of the method is 26
Complex Method,Lucene.Net.Support,ApiScanTestBase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\ApiScanTestBase.cs,GetInvalidPublicFields,Cyclomatic complexity of the method is 8
Complex Method,Lucene.Net.Support,ApiScanTestBase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\ApiScanTestBase.cs,GetMembersContainingComparer,Cyclomatic complexity of the method is 8
Complex Method,Lucene.Net.Support,ApiScanTestBase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\ApiScanTestBase.cs,GetMembersContainingNonNetNumeric,Cyclomatic complexity of the method is 8
Complex Method,Lucene.Net.Support,ApiScanTestBase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\ApiScanTestBase.cs,GetMethodsThatReturnWritableArray,Cyclomatic complexity of the method is 9
Complex Method,Lucene.Net.Support,ApiScanTestBase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\ApiScanTestBase.cs,GetPublicNullableEnumMembers,Cyclomatic complexity of the method is 17
Complex Method,Lucene.Net.Support,ApiScanTestBase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\ApiScanTestBase.cs,GetMembersAcceptingOrReturningType,Cyclomatic complexity of the method is 19
Complex Method,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,NewIndexWriterConfig,Cyclomatic complexity of the method is 12
Complex Method,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,MaybeWrapReader,Cyclomatic complexity of the method is 14
Complex Method,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,NewIOContext,Cyclomatic complexity of the method is 8
Complex Method,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,NewSearcher,Cyclomatic complexity of the method is 9
Complex Method,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,AssertTermsSeekingEquals,Cyclomatic complexity of the method is 15
Complex Method,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,AssertDocValuesEquals,Cyclomatic complexity of the method is 14
Complex Method,Lucene.Net.Util,BaseDocIdSetTestCase<T>,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\BaseDocIdSetTestCase.cs,AssertEquals,Cyclomatic complexity of the method is 12
Complex Method,Lucene.Net.Util,English,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\English.cs,Int64ToEnglish,Cyclomatic complexity of the method is 38
Complex Method,Lucene.Net.Util,LineFileDocs,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\LineFileDocs.cs,Open,Cyclomatic complexity of the method is 8
Complex Method,Lucene.Net.Util,TestRuleSetupAndRestoreClassEnv,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestRuleSetupAndRestoreClassEnv.cs,Before,Cyclomatic complexity of the method is 22
Complex Method,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,RandomHtmlishString,Cyclomatic complexity of the method is 36
Complex Method,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,RandomFixedByteLengthUnicodeString,Cyclomatic complexity of the method is 10
Complex Method,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,CloneDocument,Cyclomatic complexity of the method is 11
Complex Method,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,RandomSubString,Cyclomatic complexity of the method is 11
Complex Method,Lucene.Net.Util.Automaton,AutomatonTestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\Automaton\AutomatonTestUtil.cs,RandomRegexpString,Cyclomatic complexity of the method is 18
Complex Method,Lucene.Net.Util.Automaton,AutomatonTestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\Automaton\AutomatonTestUtil.cs,DeterminizeSimple,Cyclomatic complexity of the method is 10
Complex Method,Lucene.Net.Util.Automaton,RandomAcceptedStrings,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\Automaton\AutomatonTestUtil.cs,RandomAcceptedStrings,Cyclomatic complexity of the method is 10
Complex Method,Lucene.Net.Util.Automaton,RandomAcceptedStrings,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\Automaton\AutomatonTestUtil.cs,GetRandomAcceptedString,Cyclomatic complexity of the method is 12
Complex Method,Lucene.Net.Util.Fst,FSTTester<T>,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\Fst\FSTTester.cs,DoTest,Cyclomatic complexity of the method is 12
Complex Method,Lucene.Net.Util.Fst,FSTTester<T>,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\Fst\FSTTester.cs,VerifyUnPruned,Cyclomatic complexity of the method is 54
Complex Method,Lucene.Net.Util.Fst,FSTTester<T>,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\Fst\FSTTester.cs,VerifyPruned,Cyclomatic complexity of the method is 32
Long Parameter List,Lucene.Net.TestFramework,Assert,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework.MSTest\Support\TestFramework\Assert.cs,AreEqual,The method has 5 parameters. Parameters: expected' actual' delta' message' args
Long Parameter List,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,AssertTokenStreamContents,The method has 12 parameters. Parameters: ts' output' startOffsets' endOffsets' types' posIncrements' posLengths' finalOffset' finalPosInc' keywordAtts' offsetsAreCorrect' payloads
Long Parameter List,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,AssertTokenStreamContents,The method has 10 parameters. Parameters: ts' output' startOffsets' endOffsets' types' posIncrements' posLengths' finalOffset' keywordAtts' offsetsAreCorrect
Long Parameter List,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,AssertTokenStreamContents,The method has 9 parameters. Parameters: ts' output' startOffsets' endOffsets' types' posIncrements' posLengths' finalOffset' offsetsAreCorrect
Long Parameter List,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,AssertTokenStreamContents,The method has 8 parameters. Parameters: ts' output' startOffsets' endOffsets' types' posIncrements' posLengths' finalOffset
Long Parameter List,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,AssertTokenStreamContents,The method has 7 parameters. Parameters: ts' output' startOffsets' endOffsets' types' posIncrements' finalOffset
Long Parameter List,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,AssertTokenStreamContents,The method has 6 parameters. Parameters: ts' output' startOffsets' endOffsets' types' posIncrements
Long Parameter List,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,AssertTokenStreamContents,The method has 5 parameters. Parameters: ts' output' startOffsets' endOffsets' finalOffset
Long Parameter List,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,AssertTokenStreamContents,The method has 5 parameters. Parameters: ts' output' startOffsets' endOffsets' posIncrements
Long Parameter List,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,AssertTokenStreamContents,The method has 6 parameters. Parameters: ts' output' startOffsets' endOffsets' posIncrements' finalOffset
Long Parameter List,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,AssertTokenStreamContents,The method has 7 parameters. Parameters: ts' output' startOffsets' endOffsets' posIncrements' posLengths' finalOffset
Long Parameter List,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,AssertAnalyzesTo,The method has 7 parameters. Parameters: a' input' output' startOffsets' endOffsets' types' posIncrements
Long Parameter List,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,AssertAnalyzesTo,The method has 8 parameters. Parameters: a' input' output' startOffsets' endOffsets' types' posIncrements' posLengths
Long Parameter List,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,AssertAnalyzesTo,The method has 9 parameters. Parameters: a' input' output' startOffsets' endOffsets' types' posIncrements' posLengths' offsetsAreCorrect
Long Parameter List,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,AssertAnalyzesTo,The method has 10 parameters. Parameters: a' input' output' startOffsets' endOffsets' types' posIncrements' posLengths' graphOffsetsAreCorrect' payloads
Long Parameter List,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,AssertAnalyzesToPositions,The method has 5 parameters. Parameters: a' input' output' posIncrements' posLengths
Long Parameter List,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,AssertAnalyzesTo,The method has 5 parameters. Parameters: a' input' output' startOffsets' endOffsets
Long Parameter List,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,AssertAnalyzesTo,The method has 6 parameters. Parameters: a' input' output' startOffsets' endOffsets' posIncrements
Long Parameter List,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,CheckRandomData,The method has 5 parameters. Parameters: random' a' iterations' maxWordLength' simple
Long Parameter List,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,CheckRandomData,The method has 6 parameters. Parameters: random' a' iterations' maxWordLength' simple' offsetsAreCorrect
Long Parameter List,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,CheckRandomData,The method has 8 parameters. Parameters: random' a' iterations' maxWordLength' useCharFilter' simple' offsetsAreCorrect' iw
Long Parameter List,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,CheckAnalysisConsistency,The method has 5 parameters. Parameters: random' a' useCharFilter' text' offsetsAreCorrect
Long Parameter List,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,CheckAnalysisConsistency,The method has 6 parameters. Parameters: random' a' useCharFilter' text' offsetsAreCorrect' field
Long Parameter List,Lucene.Net.Analysis,AnalysisThread,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,AnalysisThread,The method has 9 parameters. Parameters: seed' latch' a' iterations' maxWordLength' useCharFilter' simple' offsetsAreCorrect' iw
Long Parameter List,Lucene.Net.Analysis,CollationTestBase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\CollationTestBase.cs,TestFarsiRangeFilterCollating,The method has 5 parameters. Parameters: analyzer' firstBeg' firstEnd' secondBeg' secondEnd
Long Parameter List,Lucene.Net.Analysis,CollationTestBase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\CollationTestBase.cs,TestFarsiRangeQueryCollating,The method has 5 parameters. Parameters: analyzer' firstBeg' firstEnd' secondBeg' secondEnd
Long Parameter List,Lucene.Net.Analysis,CollationTestBase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\CollationTestBase.cs,TestFarsiTermRangeQuery,The method has 5 parameters. Parameters: analyzer' firstBeg' firstEnd' secondBeg' secondEnd
Long Parameter List,Lucene.Net.Analysis,CollationTestBase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\CollationTestBase.cs,TestCollationKeySort,The method has 8 parameters. Parameters: usAnalyzer' franceAnalyzer' swedenAnalyzer' denmarkAnalyzer' usResult' frResult' svResult' dkResult
Long Parameter List,Lucene.Net.Analysis,MockTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\MockTokenizer.cs,MockTokenizer,The method has 5 parameters. Parameters: factory' input' runAutomaton' lowerCase' maxTokenLength
Long Parameter List,Lucene.Net.Codecs.Asserting,AssertingTermVectorsWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Asserting\AssertingTermVectorsFormat.cs,StartField,The method has 5 parameters. Parameters: info' numTerms' positions' offsets' payloads
Long Parameter List,Lucene.Net.Codecs.Compressing.Dummy,DecompressorAnonymousInnerClassHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Compressing\Dummy\DummyCompressingCodec.cs,Decompress,The method has 5 parameters. Parameters: in' originalLength' offset' length' bytes
Long Parameter List,Lucene.Net.Codecs.Lucene3x,PreFlexRWFieldInfosWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene3x\PreFlexRWFieldInfosWriter.cs,Write,The method has 5 parameters. Parameters: directory' segmentName' segmentSuffix' infos' context
Long Parameter List,Lucene.Net.Codecs.Lucene3x,Lucene3xFieldsAnonymousInnerClassHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene3x\PreFlexRWPostingsFormat.cs,Lucene3xFieldsAnonymousInnerClassHelper,The method has 6 parameters. Parameters: outerInstance' directory' fieldInfos' segmentInfo' context' termsIndexDivisor
Long Parameter List,Lucene.Net.Codecs.Lucene3x,PreFlexRWSkipListWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene3x\PreFlexRWSkipListWriter.cs,PreFlexRWSkipListWriter,The method has 5 parameters. Parameters: skipInterval' numberOfSkipLevels' docCount' freqOutput' proxOutput
Long Parameter List,Lucene.Net.Codecs.Lucene3x,Lucene3xTermVectorsReaderAnonymousInnerClassHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene3x\PreFlexRWTermVectorsFormat.cs,Lucene3xTermVectorsReaderAnonymousInnerClassHelper,The method has 5 parameters. Parameters: outerInstance' directory' segmentInfo' fieldInfos' context
Long Parameter List,Lucene.Net.Codecs.Lucene3x,PreFlexRWTermVectorsWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene3x\PreFlexRWTermVectorsWriter.cs,StartField,The method has 5 parameters. Parameters: info' numTerms' positions' offsets' payloads
Long Parameter List,Lucene.Net.Codecs.Lucene3x,TermInfosWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene3x\TermInfosWriter.cs,TermInfosWriter,The method has 5 parameters. Parameters: directory' segment' fis' interval' isIndex
Long Parameter List,Lucene.Net.Codecs.Lucene3x,TermInfosWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene3x\TermInfosWriter.cs,Initialize,The method has 5 parameters. Parameters: directory' segment' fis' interval' isi
Long Parameter List,Lucene.Net.Codecs.Lucene40,Lucene40DocValuesWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene40\Lucene40DocValuesWriter.cs,AddVarIntsField,The method has 5 parameters. Parameters: field' output' values' minValue' maxValue
Long Parameter List,Lucene.Net.Codecs.Lucene40,Lucene40DocValuesWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene40\Lucene40DocValuesWriter.cs,AddFixedDerefBytesField,The method has 5 parameters. Parameters: field' data' index' values' length
Long Parameter List,Lucene.Net.Codecs.Lucene40,Lucene40DocValuesWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene40\Lucene40DocValuesWriter.cs,AddFixedSortedBytesField,The method has 6 parameters. Parameters: field' data' index' values' docToOrd' length
Long Parameter List,Lucene.Net.Codecs.Lucene40,Lucene40DocValuesWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene40\Lucene40DocValuesWriter.cs,AddVarSortedBytesField,The method has 5 parameters. Parameters: field' data' index' values' docToOrd
Long Parameter List,Lucene.Net.Codecs.Lucene40,Lucene40FieldInfosWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene40\Lucene40FieldInfosWriter.cs,Write,The method has 5 parameters. Parameters: directory' segmentName' segmentSuffix' infos' context
Long Parameter List,Lucene.Net.Codecs.Lucene40,Lucene40PostingsWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene40\Lucene40PostingsWriter.cs,EncodeTerm,The method has 5 parameters. Parameters: empty' out' fieldInfo' state' absolute
Long Parameter List,Lucene.Net.Codecs.Lucene40,Lucene40SkipListWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene40\Lucene40SkipListWriter.cs,Lucene40SkipListWriter,The method has 5 parameters. Parameters: skipInterval' numberOfSkipLevels' docCount' freqOutput' proxOutput
Long Parameter List,Lucene.Net.Codecs.Lucene40,Lucene40SkipListWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene40\Lucene40SkipListWriter.cs,SetSkipData,The method has 5 parameters. Parameters: doc' storePayloads' payloadLength' storeOffsets' offsetLength
Long Parameter List,Lucene.Net.Codecs.Lucene42,Lucene42DocValuesConsumer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene42\Lucene42DocValuesConsumer.cs,Lucene42DocValuesConsumer,The method has 6 parameters. Parameters: state' dataCodec' dataExtension' metaCodec' metaExtension' acceptableOverheadRatio
Long Parameter List,Lucene.Net.Codecs.Lucene42,Lucene42FieldInfosWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene42\Lucene42FieldInfosWriter.cs,Write,The method has 5 parameters. Parameters: directory' segmentName' segmentSuffix' infos' context
Long Parameter List,Lucene.Net.Index,ThreadAnonymousInnerClassHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,ThreadAnonymousInnerClassHelper,The method has 6 parameters. Parameters: numDocs' rd' searcher' readsPerThread' ex' i
Long Parameter List,Lucene.Net.Index,ThreadAnonymousInnerClassHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,ThreadAnonymousInnerClassHelper,The method has 6 parameters. Parameters: outerInstance' numDocs' docs' reader' exception' i
Long Parameter List,Lucene.Net.Index,ThreadAnonymousInnerClassHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,ThreadAnonymousInnerClassHelper,The method has 6 parameters. Parameters: outerInstance' docs' stopTime' delIDs' delPackIDs' allSubDocs
Long Parameter List,Lucene.Net.Index,BasePostingsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,VerifyEnum,The method has 8 parameters. Parameters: threadState' field' term' termsEnum' maxTestOptions' maxIndexOptions' options' alwaysTestMax
Long Parameter List,Lucene.Net.Index,BasePostingsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,TestTerms,The method has 5 parameters. Parameters: fieldsSource' options' maxTestOptions' maxIndexOptions' alwaysTestMax
Long Parameter List,Lucene.Net.Index,BasePostingsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,TestTermsOneThread,The method has 5 parameters. Parameters: fieldsSource' options' maxTestOptions' maxIndexOptions' alwaysTestMax
Long Parameter List,Lucene.Net.Index,SeedPostings,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,SeedPostings,The method has 5 parameters. Parameters: seed' minDocFreq' maxDocFreq' liveDocs' options
Long Parameter List,Lucene.Net.Index,TestThread,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,TestThread,The method has 6 parameters. Parameters: testCase' fieldsSource' options' maxTestOptions' maxIndexOptions' alwaysTestMax
Long Parameter List,Lucene.Net.Index,RandomTokenStream,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseTermVectorsFormatTestCase.cs,RandomTokenStream,The method has 5 parameters. Parameters: outerInstance' len' sampleTerms' sampleTermBytes' offsetsGoBackwards
Long Parameter List,Lucene.Net.Index,RandomDocument,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseTermVectorsFormatTestCase.cs,RandomDocument,The method has 7 parameters. Parameters: outerInstance' fieldCount' maxTermCount' options' fieldNames' sampleTerms' sampleTermBytes
Long Parameter List,Lucene.Net.Index,DocHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\DocHelper.cs,WriteDoc,The method has 5 parameters. Parameters: random' dir' analyzer' similarity' doc
Long Parameter List,Lucene.Net.Index,ThreadedIndexingAndSearchingTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\ThreadedIndexingAndSearchingTestCase.cs,LaunchIndexingThreads,The method has 6 parameters. Parameters: docs' numThreads' stopTime' delIDs' delPackIDs' allSubDocs
Long Parameter List,Lucene.Net.Search,CheckHits,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Search\CheckHits.cs,CheckHitCollector,The method has 5 parameters. Parameters: random' query' defaultFieldName' searcher' results
Long Parameter List,Lucene.Net.Search,CheckHits,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Search\CheckHits.cs,DoCheckHits,The method has 5 parameters. Parameters: random' query' defaultFieldName' searcher' results
Long Parameter List,Lucene.Net.Search,CheckHits,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Search\CheckHits.cs,VerifyExplanation,The method has 5 parameters. Parameters: q' doc' score' deep' expl
Long Parameter List,Lucene.Net.Search,CollectorAnonymousInnerClassHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Search\QueryUtils.cs,CollectorAnonymousInnerClassHelper,The method has 9 parameters. Parameters: q' s' readerContextArray' skip_op' order' opidx' lastDoc' maxDiff' lastReader
Long Parameter List,Lucene.Net.Search,CollectorAnonymousInnerClassHelper2,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Search\QueryUtils.cs,CollectorAnonymousInnerClassHelper2,The method has 6 parameters. Parameters: q' s' maxDiff' lastDoc' lastReader' context
Long Parameter List,Lucene.Net.Search,ShardSearchingTestBase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Search\ShardSearchingTestBase.cs,SearchNode,The method has 6 parameters. Parameters: nodeID' nodeVersions' q' sort' numHits' searchAfter
Long Parameter List,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,AssertFieldsEquals,The method has 5 parameters. Parameters: info' leftReader' leftFields' rightFields' deep
Long Parameter List,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,AssertTermsEquals,The method has 5 parameters. Parameters: info' leftReader' leftTerms' rightTerms' deep
Long Parameter List,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,AssertTermsEnumEquals,The method has 5 parameters. Parameters: info' leftReader' leftTermsEnum' rightTermsEnum' deep
Long Parameter List,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,AssertDocsSkippingEquals,The method has 6 parameters. Parameters: info' leftReader' docFreq' leftDocs' rightDocs' hasFreqs
Long Parameter List,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,AssertPositionsSkippingEquals,The method has 5 parameters. Parameters: info' leftReader' docFreq' leftDocs' rightDocs
Long Parameter List,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,Docs,The method has 7 parameters. Parameters: random' r' field' term' liveDocs' reuse' flags
Long Parameter List,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,Docs,The method has 5 parameters. Parameters: random' termsEnum' liveDocs' reuse' flags
Long Parameter List,Lucene.Net.Util,ThrottledIndexOutput,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\ThrottledIndexOutput.cs,ThrottledIndexOutput,The method has 6 parameters. Parameters: bytesPerSecond' flushDelayMillis' closeDelayMillis' seekDelayMillis' minBytesWritten' delegate
Long Parameter List,Lucene.Net.Util.Fst,FSTTester<T>,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\Fst\FSTTester.cs,FSTTester,The method has 6 parameters. Parameters: random' dir' inputMode' pairs' outputs' doReverseLookup
Long Identifier,Lucene.Net.Analysis,CollationTestBase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\CollationTestBase.cs,,The length of the parameter m_secondRangeBeginningOriginal is 30.
Long Identifier,Lucene.Net.Codecs.Lucene3x,TermInfosWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene3x\TermInfosWriter.cs,,The length of the parameter FORMAT_VERSION_UTF8_LENGTH_IN_BYTES is 35.
Long Identifier,Lucene.Net.Search,CheckHits,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Search\CheckHits.cs,,The length of the parameter EXPLAIN_SCORE_TOLERANCE_MINIMUM is 31.
Long Identifier,Lucene.Net.Store,MockDirectoryWrapper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\MockDirectoryWrapper.cs,,The length of the parameter allowRandomFileNotFoundException is 32.
Long Identifier,Lucene.Net.Store,MockDirectoryWrapper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\MockDirectoryWrapper.cs,,The length of the parameter allowReadingFilesStillOpenForWrite is 34.
Long Identifier,Lucene.Net.Store,MockDirectoryWrapper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\MockDirectoryWrapper.cs,,The length of the parameter assertNoUnreferencedFilesOnClose is 32.
Long Statement,Lucene.Net.TestFramework,Assert,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework.MSTest\Support\TestFramework\Assert.cs,ThrowsAnyOf,The length of the statement  "            var messagePrefix = $"Expected one of: {Collections.ToString(expectedExceptionTypes.Select(ex => ex.FullName).ToArray())}\nBut was:"; " is 133.
Long Statement,Lucene.Net.Analysis,CheckClearAttributesAttribute,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,Equals,The length of the statement  "            return (other is CheckClearAttributesAttribute && ((CheckClearAttributesAttribute)other).clearCalled == this.clearCalled); " is 122.
Long Statement,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,AssertTokenStreamContents,The length of the statement  "                    Assert.AreEqual(output[i]' termAtt.ToString()' "term " + i + "' output[i] = " + output[i] + "' termAtt = " + termAtt.ToString()); " is 129.
Long Statement,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,AssertTokenStreamContents,The length of the statement  "                            Assert.IsTrue(endOffset <= (int)finalOffset' "endOffset must be <= finalOffset: got endOffset=" + endOffset + " vs finalOffset=" + (int)finalOffset); " is 149.
Long Statement,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,AssertTokenStreamContents,The length of the statement  "                            Assert.IsTrue(offsetAtt.StartOffset >= lastStartOffset' "offsets must not go backwards startOffset=" + startOffset + " is < lastStartOffset=" + lastStartOffset); " is 161.
Long Statement,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,AssertTokenStreamContents,The length of the statement  "                    Assert.Fail("TokenStream has more tokens than expected (expected count=" + output.Length + "); extra token=" + termAtt); " is 120.
Long Statement,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,AssertTokenStreamContents,The length of the statement  "                Assert.IsTrue(checkClearAtt.GetAndResetClearCalled()' "base.End()/ClearAttributes() was not called correctly in End()"); " is 120.
Long Statement,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,AssertTokenStreamContents,The length of the statement  "            AssertTokenStreamContents(ts' output' startOffsets' endOffsets' types' posIncrements' posLengths' finalOffset' null' null' offsetsAreCorrect' null); " is 148.
Long Statement,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,AssertTokenStreamContents,The length of the statement  "            AssertTokenStreamContents(ts' output' startOffsets' endOffsets' types' posIncrements' posLengths' finalOffset' null' offsetsAreCorrect); " is 136.
Long Statement,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,AssertAnalyzesTo,The length of the statement  "            AssertTokenStreamContents(a.GetTokenStream("dummy"' new StringReader(input))' output' startOffsets' endOffsets' types' posIncrements' null' input.Length); " is 154.
Long Statement,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,AssertAnalyzesTo,The length of the statement  "            AssertTokenStreamContents(a.GetTokenStream("dummy"' new StringReader(input))' output' startOffsets' endOffsets' types' posIncrements' posLengths' input.Length); " is 160.
Long Statement,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,AssertAnalyzesTo,The length of the statement  "            AssertTokenStreamContents(a.GetTokenStream("dummy"' new StringReader(input))' output' startOffsets' endOffsets' types' posIncrements' posLengths' input.Length' offsetsAreCorrect); " is 179.
Long Statement,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,AssertAnalyzesTo,The length of the statement  "            AssertTokenStreamContents(a.GetTokenStream("dummy"' input)' output' startOffsets' endOffsets' types' posIncrements' posLengths' input.Length' null' null' graphOffsetsAreCorrect' payloads); " is 188.
Long Statement,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,CheckRandomData,The length of the statement  "                    threads[i] = new AnalysisThread(seed' startingGun' a' iterations' maxWordLength' useCharFilter' simple' offsetsAreCorrect' iw); " is 127.
Long Statement,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,CheckAnalysisConsistency,The length of the statement  "                Console.WriteLine(Thread.CurrentThread.Name + ": NOTE: baseTokenStreamTestCase: get first token stream now text=" + text); " is 122.
Long Statement,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,CheckAnalysisConsistency,The length of the statement  "                            Console.WriteLine(Thread.CurrentThread.Name + ": NOTE: baseTokenStreamTestCase: re-run analysis' only consuming " + numTokensToRead + " of " + tokens.Count + " tokens"); " is 169.
Long Statement,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,CheckAnalysisConsistency,The length of the statement  "                Console.WriteLine(Thread.CurrentThread.Name + ": NOTE: baseTokenStreamTestCase: re-run analysis; " + tokens.Count + " tokens"); " is 127.
Long Statement,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,CheckAnalysisConsistency,The length of the statement  "                AssertTokenStreamContents(ts' tokens.ToArray()' ToIntArray(startOffsets)' ToIntArray(endOffsets)' types.ToArray()' ToIntArray(positions)' ToIntArray(positionLengths)' text.Length' offsetsAreCorrect); " is 199.
Long Statement,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,CheckAnalysisConsistency,The length of the statement  "                AssertTokenStreamContents(ts' tokens.ToArray()' ToIntArray(startOffsets)' ToIntArray(endOffsets)' types.ToArray()' ToIntArray(positions)' null' text.Length' offsetsAreCorrect); " is 176.
Long Statement,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,CheckAnalysisConsistency,The length of the statement  "                AssertTokenStreamContents(ts' tokens.ToArray()' ToIntArray(startOffsets)' ToIntArray(endOffsets)' null' ToIntArray(positions)' ToIntArray(positionLengths)' text.Length' offsetsAreCorrect); " is 188.
Long Statement,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,CheckAnalysisConsistency,The length of the statement  "                AssertTokenStreamContents(ts' tokens.ToArray()' ToIntArray(startOffsets)' ToIntArray(endOffsets)' null' ToIntArray(positions)' null' text.Length' offsetsAreCorrect); " is 165.
Long Statement,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,CheckAnalysisConsistency,The length of the statement  "                AssertTokenStreamContents(ts' tokens.ToArray()' ToIntArray(startOffsets)' ToIntArray(endOffsets)' null' null' null' text.Length' offsetsAreCorrect); " is 148.
Long Statement,Lucene.Net.Analysis,CollationTestBase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\CollationTestBase.cs,TestFarsiRangeFilterCollating,The length of the statement  "                    ScoreDoc[] result = searcher.Search(query' new TermRangeFilter("content"' firstBeg' firstEnd' true' true)' 1).ScoreDocs; " is 120.
Long Statement,Lucene.Net.Analysis,CollationTestBase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\CollationTestBase.cs,TestFarsiTermRangeQuery,The length of the statement  "                using (IndexWriter writer = new IndexWriter(farsiIndex' new IndexWriterConfig(LuceneTestCase.TEST_VERSION_CURRENT' analyzer))) " is 126.
Long Statement,Lucene.Net.Analysis,CollationTestBase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\CollationTestBase.cs,TestCollationKeySort,The length of the statement  "                using (IndexWriter writer = new IndexWriter(indexStore' new IndexWriterConfig(LuceneTestCase.TEST_VERSION_CURRENT' new MockAnalyzer(Random' MockTokenizer.WHITESPACE' false)))) " is 175.
Long Statement,Lucene.Net.Analysis,CollationTestBase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\CollationTestBase.cs,TestCollationKeySort,The length of the statement  "                    string[][] sortData = new string[][] { new string[] { "A"' "x"' "p\u00EAche"' "p\u00EAche"' "p\u00EAche"' "p\u00EAche" }' new string[] { "B"' "y"' "HAT"' "HAT"' "HAT"' "HAT" }' new string[] { "C"' "x"' "p\u00E9ch\u00E9"' "p\u00E9ch\u00E9"' "p\u00E9ch\u00E9"' "p\u00E9ch\u00E9" }' new string[] { "D"' "y"' "HUT"' "HUT"' "HUT"' "HUT" }' new string[] { "E"' "x"' "peach"' "peach"' "peach"' "peach" }' new string[] { "F"' "y"' "H\u00C5T"' "H\u00C5T"' "H\u00C5T"' "H\u00C5T" }' new string[] { "G"' "x"' "sin"' "sin"' "sin"' "sin" }' new string[] { "H"' "y"' "H\u00D8T"' "H\u00D8T"' "H\u00D8T"' "H\u00D8T" }' new string[] { "I"' "x"' "s\u00EDn"' "s\u00EDn"' "s\u00EDn"' "s\u00EDn" }' new string[] { "J"' "y"' "HOT"' "HOT"' "HOT"' "HOT" } }; " is 734.
Long Statement,Lucene.Net.Analysis,LookaheadTokenFilter<T>,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\LookaheadTokenFilter.cs,PeekToken,The length of the statement  "                Console.WriteLine("LTF.peekToken inputPos=" + m_inputPos + " outputPos=" + m_outputPos + " tokenPending=" + tokenPending); " is 122.
Long Statement,Lucene.Net.Analysis,LookaheadTokenFilter<T>,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\LookaheadTokenFilter.cs,PeekToken,The length of the statement  "                    Debug.Assert(startPosData.StartOffset == startOffset' "prev startOffset=" + startPosData.StartOffset + " vs new startOffset=" + startOffset + " inputPos=" + m_inputPos); " is 169.
Long Statement,Lucene.Net.Analysis,LookaheadTokenFilter<T>,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\LookaheadTokenFilter.cs,PeekToken,The length of the statement  "                    Debug.Assert(endPosData.EndOffset == endOffset' "prev endOffset=" + endPosData.EndOffset + " vs new endOffset=" + endOffset + " inputPos=" + m_inputPos); " is 153.
Long Statement,Lucene.Net.Analysis,LookaheadTokenFilter<T>,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\LookaheadTokenFilter.cs,NextToken,The length of the statement  "                Console.WriteLine("LTF.nextToken inputPos=" + m_inputPos + " outputPos=" + m_outputPos + " tokenPending=" + tokenPending); " is 122.
Long Statement,Lucene.Net.Analysis,LookaheadTokenFilter<T>,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\LookaheadTokenFilter.cs,InsertedTokenConsistent,The length of the statement  "            Debug.Assert(m_offsetAtt.EndOffset == endPosData.EndOffset' "offsetAtt.endOffset=" + m_offsetAtt.EndOffset + " vs expected=" + endPosData.EndOffset); " is 149.
Long Statement,Lucene.Net.Analysis,MockGraphTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\MockGraphTokenFilter.cs,AfterPosition,The length of the statement  "                        Console.WriteLine("  inject: outputPos=" + m_outputPos + " startOffset=" + m_offsetAtt.StartOffset + " endOffset=" + m_offsetAtt.EndOffset + " posLength=" + m_posLenAtt.PositionLength); " is 185.
Long Statement,Lucene.Net.Analysis,MockTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\MockTokenizer.cs,IncrementToken,The length of the statement  "            Debug.Assert(!enableChecks || (streamState == State.RESET || streamState == State.INCREMENT)' "IncrementToken() called while in wrong state: " + streamState); " is 158.
Long Statement,Lucene.Net.Analysis,MockTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\MockTokenizer.cs,ReadCodePoint,The length of the statement  "                        Debug.Assert(char.IsLowSurrogate((char)ch2)' "unpaired high surrogate: " + ch.ToString("x") + "' followed by: " + ch2.ToString("x")); " is 133.
Long Statement,Lucene.Net.Analysis,MockTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\MockTokenizer.cs,Dispose,The length of the statement  "                Debug.Assert(!enableChecks || streamState == State.END || streamState == State.CLOSE' "Dispose() called in wrong state: " + streamState); " is 137.
Long Statement,Lucene.Net.Analysis,MockTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\MockTokenizer.cs,End,The length of the statement  "                Debug.Assert(!enableChecks || streamState == State.INCREMENT_FALSE' "End() called before IncrementToken() returned false!"); " is 124.
Long Statement,Lucene.Net.Analysis,ValidatingTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\ValidatingTokenFilter.cs,IncrementToken,The length of the statement  "                    throw new Exception(name + ": offsets must not go backwards startOffset=" + startOffset + " is < lastStartOffset=" + lastStartOffset); " is 134.
Long Statement,Lucene.Net.Analysis,ValidatingTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\ValidatingTokenFilter.cs,IncrementToken,The length of the statement  "                        throw new Exception(name + ": inconsistent startOffset at pos=" + pos + ": " + oldStartOffset + " vs " + startOffset + "; token=" + termAtt); " is 141.
Long Statement,Lucene.Net.Analysis,ValidatingTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\ValidatingTokenFilter.cs,IncrementToken,The length of the statement  "                        throw new Exception(name + ": inconsistent endOffset at pos=" + endPos + ": " + oldEndOffset + " vs " + endOffset + "; token=" + termAtt); " is 138.
Long Statement,Lucene.Net.Codecs.Asserting,AssertingTermsConsumer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Asserting\AssertingPostingsFormat.cs,StartTerm,The length of the statement  "                Debug.Assert(state == TermsConsumerState.INITIAL || state == TermsConsumerState.START && lastPostingsConsumer.docFreq == 0); " is 124.
Long Statement,Lucene.Net.Codecs.Asserting,AssertingTermsConsumer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Asserting\AssertingPostingsFormat.cs,Finish,The length of the statement  "                Debug.Assert(state == TermsConsumerState.INITIAL || state == TermsConsumerState.START && lastPostingsConsumer.docFreq == 0); " is 124.
Long Statement,Lucene.Net.Codecs.Lucene3x,PreFlexRWFieldInfosReader,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene3x\PreFlexRWFieldInfosReader.cs,Read,The length of the statement  "                            throw new CorruptIndexException("Corrupt fieldinfos' OMIT_POSITIONS set but format=" + format + " (resource: " + input + ")"); " is 126.
Long Statement,Lucene.Net.Codecs.Lucene3x,PreFlexRWFieldInfosReader,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene3x\PreFlexRWFieldInfosReader.cs,Read,The length of the statement  "                    throw new CorruptIndexException("did not read all bytes from file \"" + fileName + "\": read " + input.GetFilePointer() + " vs size " + input.Length + " (resource: " + input + ")"); " is 181.
Long Statement,Lucene.Net.Codecs.Lucene3x,PostingsWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene3x\PreFlexRWFieldsWriter.cs,StartDoc,The length of the statement  "                    Debug.Assert(docID < outerInstance.outerInstance.totalNumDocs' "docID=" + docID + " totalNumDocs=" + outerInstance.outerInstance.totalNumDocs); " is 143.
Long Statement,Lucene.Net.Codecs.Lucene3x,PreFlexRWNormsConsumer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene3x\PreFlexRWNormsConsumer.cs,AddNumericField,The length of the statement  "            Debug.Assert(field.Number > lastFieldNumber' "writing norms fields out of order" + lastFieldNumber + " -> " + field.Number); " is 124.
Long Statement,Lucene.Net.Codecs.Lucene3x,PreFlexRWNormsConsumer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene3x\PreFlexRWNormsConsumer.cs,AddNumericField,The length of the statement  "                    throw new System.NotSupportedException("3.x cannot index norms that won't fit in a byte' got: " + ((sbyte)(byte)(long)n)); " is 122.
Long Statement,Lucene.Net.Codecs.Lucene3x,PreFlexRWPostingsFormat,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene3x\PreFlexRWPostingsFormat.cs,FieldsProducer,The length of the statement  "            return new Lucene3xFieldsAnonymousInnerClassHelper(this' state.Directory' state.FieldInfos' state.SegmentInfo' state.Context' state.TermsIndexDivisor); " is 151.
Long Statement,Lucene.Net.Codecs.Lucene3x,PreFlexRWStoredFieldsWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene3x\PreFlexRWStoredFieldsWriter.cs,WriteField,The length of the statement  "                        throw new System.ArgumentException("field " + field.Name + " is stored but does not have binaryValue' stringValue nor numericValue"); " is 133.
Long Statement,Lucene.Net.Codecs.Lucene3x,PreFlexRWStoredFieldsWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene3x\PreFlexRWStoredFieldsWriter.cs,Finish,The length of the statement  "                throw new Exception("fdx size mismatch: docCount is " + numDocs + " but fdx file size is " + indexStream.GetFilePointer() + " file=" + indexStream.ToString() + "; now aborting this merge to prevent index corruption"); " is 217.
Long Statement,Lucene.Net.Codecs.Lucene3x,PreFlexRWTermVectorsWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene3x\PreFlexRWTermVectorsWriter.cs,StartField,The length of the statement  "            Debug.Assert(lastFieldName == null || info.Name.CompareToOrdinal(lastFieldName) > 0' "fieldName=" + info.Name + " lastFieldName=" + lastFieldName); " is 147.
Long Statement,Lucene.Net.Codecs.Lucene3x,PreFlexRWTermVectorsWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene3x\PreFlexRWTermVectorsWriter.cs,Abort,The length of the statement  "            IOUtils.DeleteFilesIgnoringExceptions(directory' IndexFileNames.SegmentFileName(segment' ""' Lucene3xTermVectorsReader.VECTORS_INDEX_EXTENSION)' IndexFileNames.SegmentFileName(segment' ""' Lucene3xTermVectorsReader.VECTORS_DOCUMENTS_EXTENSION)' IndexFileNames.SegmentFileName(segment' ""' Lucene3xTermVectorsReader.VECTORS_FIELDS_EXTENSION)); " is 342.
Long Statement,Lucene.Net.Codecs.Lucene3x,PreFlexRWTermVectorsWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene3x\PreFlexRWTermVectorsWriter.cs,Finish,The length of the statement  "                throw new Exception("tvx size mismatch: mergedDocs is " + numDocs + " but tvx size is " + tvx.GetFilePointer() + " file=" + tvx.ToString() + "; now aborting this merge to prevent index corruption"); " is 198.
Long Statement,Lucene.Net.Codecs.Lucene3x,TermInfosWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene3x\TermInfosWriter.cs,Initialize,The length of the statement  "            output = directory.CreateOutput(IndexFileNames.SegmentFileName(segment' ""' (isIndex ? Lucene3xPostingsFormat.TERMS_INDEX_EXTENSION : Lucene3xPostingsFormat.TERMS_EXTENSION))' IOContext.DEFAULT); " is 195.
Long Statement,Lucene.Net.Codecs.Lucene3x,TermInfosWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene3x\TermInfosWriter.cs,Initialize,The length of the statement  "                        directory.DeleteFile(IndexFileNames.SegmentFileName(segment' ""' (isIndex ? Lucene3xPostingsFormat.TERMS_INDEX_EXTENSION : Lucene3xPostingsFormat.TERMS_EXTENSION))); " is 165.
Long Statement,Lucene.Net.Codecs.Lucene3x,TermInfosWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene3x\TermInfosWriter.cs,Add,The length of the statement  "            Debug.Assert(CompareToLastTerm(fieldNumber' term) < 0 || (isIndex && term.Length == 0 && lastTerm.Length == 0)' "Terms are out of order: field=" + FieldName(fieldInfos' fieldNumber) + " (number " + fieldNumber + ")" + " lastField=" + FieldName(fieldInfos' lastFieldNumber) + " (number " + lastFieldNumber + ")" + " text=" + term.Utf8ToString() + " lastText=" + lastTerm.Utf8ToString()); " is 386.
Long Statement,Lucene.Net.Codecs.Lucene3x,TermInfosWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene3x\TermInfosWriter.cs,Add,The length of the statement  "            Debug.Assert(ti.FreqPointer >= lastTi.FreqPointer' "freqPointer out of order (" + ti.FreqPointer + " < " + lastTi.FreqPointer + ")"); " is 133.
Long Statement,Lucene.Net.Codecs.Lucene3x,TermInfosWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene3x\TermInfosWriter.cs,Add,The length of the statement  "            Debug.Assert(ti.ProxPointer >= lastTi.ProxPointer' "proxPointer out of order (" + ti.ProxPointer + " < " + lastTi.ProxPointer + ")"); " is 133.
Long Statement,Lucene.Net.Codecs.Lucene40,Lucene40DocValuesWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene40\Lucene40DocValuesWriter.cs,AddNumericField,The length of the statement  "            string fileName = IndexFileNames.SegmentFileName(state.SegmentInfo.Name + "_" + Convert.ToString(field.Number' CultureInfo.InvariantCulture)' segmentSuffix' "dat"); " is 164.
Long Statement,Lucene.Net.Codecs.Lucene40,Lucene40DocValuesWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene40\Lucene40DocValuesWriter.cs,AddNumericField,The length of the statement  "                else if (minValue >= short.MinValue && maxValue <= short.MaxValue && PackedInt32s.BitsRequired(maxValue - minValue) > 8) " is 120.
Long Statement,Lucene.Net.Codecs.Lucene40,Lucene40DocValuesWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene40\Lucene40DocValuesWriter.cs,AddVarIntsField,The length of the statement  "            CodecUtil.WriteHeader(output' Lucene40DocValuesFormat.VAR_INTS_CODEC_NAME' Lucene40DocValuesFormat.VAR_INTS_VERSION_CURRENT); " is 125.
Long Statement,Lucene.Net.Codecs.Lucene40,Lucene40DocValuesWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene40\Lucene40DocValuesWriter.cs,AddVarIntsField,The length of the statement  "                PackedInt32s.Writer writer = PackedInt32s.GetWriter(output' state.SegmentInfo.DocCount' PackedInt32s.BitsRequired(delta)' PackedInt32s.DEFAULT); " is 144.
Long Statement,Lucene.Net.Codecs.Lucene40,Lucene40DocValuesWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene40\Lucene40DocValuesWriter.cs,AddBinaryField,The length of the statement  "                    throw new System.ArgumentException("DocValuesField \"" + field.Name + "\" is too large' must be <= " + Lucene40DocValuesFormat.MAX_BINARY_FIELD_LENGTH); " is 152.
Long Statement,Lucene.Net.Codecs.Lucene40,Lucene40DocValuesWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene40\Lucene40DocValuesWriter.cs,AddBinaryField,The length of the statement  "                string dataName = IndexFileNames.SegmentFileName(state.SegmentInfo.Name + "_" + Convert.ToString(field.Number' CultureInfo.InvariantCulture)' segmentSuffix' "dat"); " is 164.
Long Statement,Lucene.Net.Codecs.Lucene40,Lucene40DocValuesWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene40\Lucene40DocValuesWriter.cs,AddBinaryField,The length of the statement  "                string indexName = IndexFileNames.SegmentFileName(state.SegmentInfo.Name + "_" + Convert.ToString(field.Number' CultureInfo.InvariantCulture)' segmentSuffix' "idx"); " is 165.
Long Statement,Lucene.Net.Codecs.Lucene40,Lucene40DocValuesWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene40\Lucene40DocValuesWriter.cs,AddBinaryField,The length of the statement  "                    string fileName = IndexFileNames.SegmentFileName(state.SegmentInfo.Name + "_" + Convert.ToString(field.Number' CultureInfo.InvariantCulture)' segmentSuffix' "dat"); " is 164.
Long Statement,Lucene.Net.Codecs.Lucene40,Lucene40DocValuesWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene40\Lucene40DocValuesWriter.cs,AddBinaryField,The length of the statement  "                    string dataName = IndexFileNames.SegmentFileName(state.SegmentInfo.Name + "_" + Convert.ToString(field.Number' CultureInfo.InvariantCulture)' segmentSuffix' "dat"); " is 164.
Long Statement,Lucene.Net.Codecs.Lucene40,Lucene40DocValuesWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene40\Lucene40DocValuesWriter.cs,AddBinaryField,The length of the statement  "                    string indexName = IndexFileNames.SegmentFileName(state.SegmentInfo.Name + "_" + Convert.ToString(field.Number' CultureInfo.InvariantCulture)' segmentSuffix' "idx"); " is 165.
Long Statement,Lucene.Net.Codecs.Lucene40,Lucene40DocValuesWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene40\Lucene40DocValuesWriter.cs,AddFixedStraightBytesField,The length of the statement  "            CodecUtil.WriteHeader(output' Lucene40DocValuesFormat.BYTES_FIXED_STRAIGHT_CODEC_NAME' Lucene40DocValuesFormat.BYTES_FIXED_STRAIGHT_VERSION_CURRENT); " is 149.
Long Statement,Lucene.Net.Codecs.Lucene40,Lucene40DocValuesWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene40\Lucene40DocValuesWriter.cs,AddVarStraightBytesField,The length of the statement  "            CodecUtil.WriteHeader(data' Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_CODEC_NAME_DAT' Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_CURRENT); " is 147.
Long Statement,Lucene.Net.Codecs.Lucene40,Lucene40DocValuesWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene40\Lucene40DocValuesWriter.cs,AddVarStraightBytesField,The length of the statement  "            CodecUtil.WriteHeader(index' Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_CODEC_NAME_IDX' Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_CURRENT); " is 148.
Long Statement,Lucene.Net.Codecs.Lucene40,Lucene40DocValuesWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene40\Lucene40DocValuesWriter.cs,AddVarStraightBytesField,The length of the statement  "            PackedInt32s.Writer w = PackedInt32s.GetWriter(index' maxDoc + 1' PackedInt32s.BitsRequired(maxAddress)' PackedInt32s.DEFAULT); " is 127.
Long Statement,Lucene.Net.Codecs.Lucene40,Lucene40DocValuesWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene40\Lucene40DocValuesWriter.cs,AddFixedDerefBytesField,The length of the statement  "            CodecUtil.WriteHeader(data' Lucene40DocValuesFormat.BYTES_FIXED_DEREF_CODEC_NAME_DAT' Lucene40DocValuesFormat.BYTES_FIXED_DEREF_VERSION_CURRENT); " is 145.
Long Statement,Lucene.Net.Codecs.Lucene40,Lucene40DocValuesWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene40\Lucene40DocValuesWriter.cs,AddFixedDerefBytesField,The length of the statement  "            CodecUtil.WriteHeader(index' Lucene40DocValuesFormat.BYTES_FIXED_DEREF_CODEC_NAME_IDX' Lucene40DocValuesFormat.BYTES_FIXED_DEREF_VERSION_CURRENT); " is 146.
Long Statement,Lucene.Net.Codecs.Lucene40,Lucene40DocValuesWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene40\Lucene40DocValuesWriter.cs,AddFixedDerefBytesField,The length of the statement  "            PackedInt32s.Writer w = PackedInt32s.GetWriter(index' maxDoc' PackedInt32s.BitsRequired(valueCount - 1)' PackedInt32s.DEFAULT); " is 127.
Long Statement,Lucene.Net.Codecs.Lucene40,Lucene40DocValuesWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene40\Lucene40DocValuesWriter.cs,AddVarDerefBytesField,The length of the statement  "            CodecUtil.WriteHeader(data' Lucene40DocValuesFormat.BYTES_VAR_DEREF_CODEC_NAME_DAT' Lucene40DocValuesFormat.BYTES_VAR_DEREF_VERSION_CURRENT); " is 141.
Long Statement,Lucene.Net.Codecs.Lucene40,Lucene40DocValuesWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene40\Lucene40DocValuesWriter.cs,AddVarDerefBytesField,The length of the statement  "            CodecUtil.WriteHeader(index' Lucene40DocValuesFormat.BYTES_VAR_DEREF_CODEC_NAME_IDX' Lucene40DocValuesFormat.BYTES_VAR_DEREF_VERSION_CURRENT); " is 142.
Long Statement,Lucene.Net.Codecs.Lucene40,Lucene40DocValuesWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene40\Lucene40DocValuesWriter.cs,AddVarDerefBytesField,The length of the statement  "            PackedInt32s.Writer w = PackedInt32s.GetWriter(index' maxDoc' PackedInt32s.BitsRequired(currentAddress)' PackedInt32s.DEFAULT); " is 127.
Long Statement,Lucene.Net.Codecs.Lucene40,Lucene40DocValuesWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene40\Lucene40DocValuesWriter.cs,AddSortedField,The length of the statement  "            string dataName = IndexFileNames.SegmentFileName(state.SegmentInfo.Name + "_" + Convert.ToString(field.Number' CultureInfo.InvariantCulture)' segmentSuffix' "dat"); " is 164.
Long Statement,Lucene.Net.Codecs.Lucene40,Lucene40DocValuesWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene40\Lucene40DocValuesWriter.cs,AddSortedField,The length of the statement  "            string indexName = IndexFileNames.SegmentFileName(state.SegmentInfo.Name + "_" + Convert.ToString(field.Number' CultureInfo.InvariantCulture)' segmentSuffix' "idx"); " is 165.
Long Statement,Lucene.Net.Codecs.Lucene40,Lucene40DocValuesWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene40\Lucene40DocValuesWriter.cs,AddSortedField,The length of the statement  "                        AddVarSortedBytesField(field' data' index' MissingOrdRemapper.InsertEmptyValue(values)' MissingOrdRemapper.MapAllOrds(docToOrd)); " is 129.
Long Statement,Lucene.Net.Codecs.Lucene40,Lucene40DocValuesWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene40\Lucene40DocValuesWriter.cs,AddFixedSortedBytesField,The length of the statement  "            CodecUtil.WriteHeader(data' Lucene40DocValuesFormat.BYTES_FIXED_SORTED_CODEC_NAME_DAT' Lucene40DocValuesFormat.BYTES_FIXED_SORTED_VERSION_CURRENT); " is 147.
Long Statement,Lucene.Net.Codecs.Lucene40,Lucene40DocValuesWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene40\Lucene40DocValuesWriter.cs,AddFixedSortedBytesField,The length of the statement  "            CodecUtil.WriteHeader(index' Lucene40DocValuesFormat.BYTES_FIXED_SORTED_CODEC_NAME_IDX' Lucene40DocValuesFormat.BYTES_FIXED_SORTED_VERSION_CURRENT); " is 148.
Long Statement,Lucene.Net.Codecs.Lucene40,Lucene40DocValuesWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene40\Lucene40DocValuesWriter.cs,AddFixedSortedBytesField,The length of the statement  "            PackedInt32s.Writer w = PackedInt32s.GetWriter(index' maxDoc' PackedInt32s.BitsRequired(valueCount - 1)' PackedInt32s.DEFAULT); " is 127.
Long Statement,Lucene.Net.Codecs.Lucene40,Lucene40DocValuesWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene40\Lucene40DocValuesWriter.cs,AddVarSortedBytesField,The length of the statement  "            CodecUtil.WriteHeader(data' Lucene40DocValuesFormat.BYTES_VAR_SORTED_CODEC_NAME_DAT' Lucene40DocValuesFormat.BYTES_VAR_SORTED_VERSION_CURRENT); " is 143.
Long Statement,Lucene.Net.Codecs.Lucene40,Lucene40DocValuesWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene40\Lucene40DocValuesWriter.cs,AddVarSortedBytesField,The length of the statement  "            CodecUtil.WriteHeader(index' Lucene40DocValuesFormat.BYTES_VAR_SORTED_CODEC_NAME_IDX' Lucene40DocValuesFormat.BYTES_VAR_SORTED_VERSION_CURRENT); " is 144.
Long Statement,Lucene.Net.Codecs.Lucene40,Lucene40DocValuesWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene40\Lucene40DocValuesWriter.cs,AddVarSortedBytesField,The length of the statement  "            PackedInt32s.Writer w = PackedInt32s.GetWriter(index' valueCount + 1' PackedInt32s.BitsRequired(maxAddress)' PackedInt32s.DEFAULT); " is 131.
Long Statement,Lucene.Net.Codecs.Lucene40,Lucene40DocValuesWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene40\Lucene40DocValuesWriter.cs,AddVarSortedBytesField,The length of the statement  "            PackedInt32s.Writer ords = PackedInt32s.GetWriter(index' maxDoc' PackedInt32s.BitsRequired(valueCount - 1)' PackedInt32s.DEFAULT); " is 130.
Long Statement,Lucene.Net.Codecs.Lucene40,Lucene40PostingsWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene40\Lucene40PostingsWriter.cs,StartDoc,The length of the statement  "            // if (DEBUG) System.out.println("SPW:   startDoc seg=" + segment + " docID=" + docID + " tf=" + termDocFreq + " freqOut.fp=" + freqOut.getFilePointer()); " is 154.
Long Statement,Lucene.Net.Codecs.Lucene40,Lucene40PostingsWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene40\Lucene40PostingsWriter.cs,AddPosition,The length of the statement  "            //if (DEBUG) System.out.println("SPW:     addPos pos=" + position + " payload=" + (payload == null ? "null" : (payload.Length + " bytes")) + " proxFP=" + proxOut.getFilePointer()); " is 180.
Long Statement,Lucene.Net.Codecs.Lucene40,Lucene40PostingsWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene40\Lucene40PostingsWriter.cs,AddPosition,The length of the statement  "            Debug.Assert(indexOptions.CompareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0' "invalid indexOptions: " + indexOptions); " is 126.
Long Statement,Lucene.Net.Codecs.Lucene40,Lucene40PostingsWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene40\Lucene40PostingsWriter.cs,AddPosition,The length of the statement  "            Debug.Assert(delta >= 0' "position=" + position + " lastPosition=" + lastPosition); // not quite right (if pos=0 is repeated twice we don't catch it) " is 149.
Long Statement,Lucene.Net.Codecs.Lucene40,Lucene40PostingsWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene40\Lucene40PostingsWriter.cs,AddPosition,The length of the statement  "                Debug.Assert(offsetDelta >= 0 && offsetLength >= 0' "startOffset=" + startOffset + "'lastOffset=" + lastOffset + "'endOffset=" + endOffset); " is 140.
Long Statement,Lucene.Net.Codecs.Lucene40,Lucene40RWNormsFormat,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene40\Lucene40RWNormsFormat.cs,NormsConsumer,The length of the statement  "                string filename = IndexFileNames.SegmentFileName(state.SegmentInfo.Name' "nrm"' IndexFileNames.COMPOUND_FILE_EXTENSION); " is 120.
Long Statement,Lucene.Net.Codecs.Lucene41Ords,Lucene41WithOrds,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene41Ords\Lucene41WithOrds.cs,FieldsProducer,The length of the statement  "            PostingsReaderBase postings = new Lucene41PostingsReader(state.Directory' state.FieldInfos' state.SegmentInfo' state.Context' state.SegmentSuffix); " is 147.
Long Statement,Lucene.Net.Codecs.Lucene42,Lucene42DocValuesConsumer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene42\Lucene42DocValuesConsumer.cs,AddNumericField,The length of the statement  "                    PackedInt32s.Writer writer = PackedInt32s.GetWriterNoHeader(data' formatAndBits.Format' maxDoc' formatAndBits.BitsPerValue' PackedInt32s.DEFAULT_BUFFER_SIZE); " is 158.
Long Statement,Lucene.Net.Codecs.Lucene42,Lucene42DocValuesConsumer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene42\Lucene42DocValuesConsumer.cs,AddBinaryField,The length of the statement  "                    throw new System.ArgumentException("DocValuesField \"" + field.Name + "\" is too large' must be <= " + Lucene42DocValuesFormat.MAX_BINARY_FIELD_LENGTH); " is 152.
Long Statement,Lucene.Net.Codecs.Lucene42,Lucene42RWDocValuesFormat,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene42\Lucene42RWDocValuesFormat.cs,FieldsConsumer,The length of the statement  "                return new Lucene42DocValuesConsumer(state' DATA_CODEC' DATA_EXTENSION' METADATA_CODEC' METADATA_EXTENSION' m_acceptableOverheadRatio); " is 135.
Long Statement,Lucene.Net.Codecs.MockRandom,MockRandomPostingsFormat,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\MockRandom\MockRandomPostingsFormat.cs,FieldsConsumer,The length of the statement  "                Console.WriteLine("MockRandomCodec: writing to seg=" + state.SegmentInfo.Name + " formatID=" + state.SegmentSuffix + " seed=" + seed); " is 134.
Long Statement,Lucene.Net.Codecs.MockRandom,MockRandomPostingsFormat,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\MockRandom\MockRandomPostingsFormat.cs,FieldsProducer,The length of the statement  "                Console.WriteLine("MockRandomCodec: reading from seg=" + state.SegmentInfo.Name + " formatID=" + state.SegmentSuffix + " seed=" + seed); " is 136.
Long Statement,Lucene.Net.Codecs.MockRandom,MockRandomPostingsFormat,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\MockRandom\MockRandomPostingsFormat.cs,FieldsProducer,The length of the statement  "                postingsReader = new Lucene41PostingsReader(state.Directory' state.FieldInfos' state.SegmentInfo' state.Context' state.SegmentSuffix); " is 134.
Long Statement,Lucene.Net.Codecs.NestedPulsing,NestedPulsingPostingsFormat,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\NestedPulsing\NestedPulsingPostingsFormat.cs,FieldsProducer,The length of the statement  "                docsReader = new Lucene41PostingsReader(state.Directory' state.FieldInfos' state.SegmentInfo' state.Context' state.SegmentSuffix); " is 130.
Long Statement,Lucene.Net.Codecs.RAMOnly,RAMOnlyPostingsFormat,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\RAMOnly\RAMOnlyPostingsFormat.cs,FieldsConsumer,The length of the statement  "            string idFileName = IndexFileNames.SegmentFileName(writeState.SegmentInfo.Name' writeState.SegmentSuffix' ID_EXTENSION); " is 120.
Long Statement,Lucene.Net.Codecs.RAMOnly,RAMTermsEnum,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\RAMOnly\RAMOnlyPostingsFormat.cs,Next,The length of the statement  "                        it = ramField.termToDocs.Where(kvpair => String.CompareOrdinal(kvpair.Key' current) >= 0).ToDictionary(kvpair => kvpair.Key' kvpair => kvpair.Value).Keys.GetEnumerator(); " is 170.
Long Statement,Lucene.Net.Index,AssertingDocsAndPositionsEnum,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\AssertingAtomicReader.cs,GetPayload,The length of the statement  "                Debug.Assert(payload == null || payload.IsValid() && payload.Length > 0' "GetPayload() returned payload with invalid length!"); " is 127.
Long Statement,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestOneNumber,The length of the statement  "            string longTerm = "longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm"; " is 165.
Long Statement,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestOneNumber,The length of the statement  "                        NumericDocValues dv = ((AtomicReader)((AtomicReader)((AtomicReader)ireader.Leaves[0].Reader))).GetNumericDocValues("dv"); " is 121.
Long Statement,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestOneNumber,The length of the statement  "                        Assert.AreEqual(5L' dv.Get(hits.ScoreDocs[i].Doc)); // LUCENENET specific - 5L required because types don't match (xUnit checks this) " is 133.
Long Statement,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestOneSingle,The length of the statement  "            string longTerm = "longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm"; " is 165.
Long Statement,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestOneSingle,The length of the statement  "                        Assert.AreEqual((long)Number.SingleToInt32Bits(5.7f)' dv.Get(hits.ScoreDocs[i].Doc)); // LUCENENET specific - cast required because types don't match (xUnit checks this) " is 169.
Long Statement,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestTwoNumbers,The length of the statement  "            string longTerm = "longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm"; " is 165.
Long Statement,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestTwoNumbers,The length of the statement  "                        Assert.AreEqual(5L' dv.Get(hits.ScoreDocs[i].Doc)); // LUCENENET specific - 5L required because types don't match (xUnit checks this) " is 133.
Long Statement,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestTwoNumbers,The length of the statement  "                        Assert.AreEqual(17L' dv.Get(hits.ScoreDocs[i].Doc)); // LUCENENET specific - 17L required because types don't match (xUnit checks this) " is 135.
Long Statement,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestTwoBinaryValues,The length of the statement  "            string longTerm = "longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm"; " is 165.
Long Statement,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestTwoFieldsMixed,The length of the statement  "            string longTerm = "longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm"; " is 165.
Long Statement,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestTwoFieldsMixed,The length of the statement  "                        Assert.AreEqual(5L' dv.Get(hits.ScoreDocs[i].Doc)); // LUCENENET specific - 5L required because types don't match (xUnit checks this) " is 133.
Long Statement,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestThreeFieldsMixed,The length of the statement  "            string longTerm = "longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm"; " is 165.
Long Statement,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestThreeFieldsMixed,The length of the statement  "                        Assert.AreEqual(5L' dv2.Get(hits.ScoreDocs[i].Doc)); // LUCENENET specific - 5L required because types don't match (xUnit checks this) " is 134.
Long Statement,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestThreeFieldsMixed2,The length of the statement  "            string longTerm = "longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm"; " is 165.
Long Statement,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestThreeFieldsMixed2,The length of the statement  "                        Assert.AreEqual(5L' dv2.Get(hits.ScoreDocs[i].Doc)); // LUCENENET specific - 5L required because types don't match (xUnit checks this) " is 134.
Long Statement,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestBytes,The length of the statement  "            string longTerm = "longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm"; " is 165.
Long Statement,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestSortedBytes,The length of the statement  "            string longTerm = "longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm"; " is 165.
Long Statement,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestDocValuesSimple,The length of the statement  "                        Assert.AreEqual((long)i' docValues.Get(scoreDocs[i].Doc)); // LUCENENET specific - cast required because types don't match (xUnit checks this) " is 142.
Long Statement,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestHugeBinaryValues,The length of the statement  "                                    throw /*iae*/; // LUCENENET: CA2200: Rethrow to preserve stack details (https://docs.microsoft.com/en-us/visualstudio/code-quality/ca2200-rethrow-to-preserve-stack-details) " is 172.
Long Statement,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestHugeBinaryValues,The length of the statement  "                                throw; // LUCENENET: CA2200: Rethrow to preserve stack details (https://docs.microsoft.com/en-us/visualstudio/code-quality/ca2200-rethrow-to-preserve-stack-details) " is 164.
Long Statement,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestHugeBinaryValues,The length of the statement  "                    r?.Dispose(); // LUCENENET specific - small chance w.Dispose() will throw' this is just here to cover that case. It is safe to call r.Dispose() more than once. " is 159.
Long Statement,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestHugeBinaryValueLimit,The length of the statement  "                    r?.Dispose(); // LUCENENET specific - small chance w.Dispose() will throw' this is just here to cover that case. It is safe to call r.Dispose() more than once. " is 159.
Long Statement,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestEmptyBinaryValueOnPageSizes,The length of the statement  "                        r?.Dispose(); // LUCENENET specific - small chance w.Dispose() will throw' this is just here to cover that case. It is safe to call r.Dispose() more than once. " is 159.
Long Statement,Lucene.Net.Index,ThreadAnonymousInnerClassHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,Run,The length of the statement  "                                        Console.WriteLine(Thread.CurrentThread.Name + ": update pack packID=" + delSubDocs.PackID + " count=" + docsList.Count + " docs=" + Arrays.ToString(docIDs)); " is 157.
Long Statement,Lucene.Net.Index,ThreadAnonymousInnerClassHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,Run,The length of the statement  "                                        Console.WriteLine(Thread.CurrentThread.Name + ": add pack packID=" + packID + " count=" + docsList.Count + " docs=" + Arrays.ToString(docIDs)); " is 143.
Long Statement,Lucene.Net.Index,ThreadAnonymousInnerClassHelper2,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,Run,The length of the statement  "                                    assertTrue("sub reader " + sub + " wasn't warmed: warmed=" + outerInstance.warmed + " diagnostics=" + diagnostics + " si=" + segReader.SegmentInfo' " is 147.
Long Statement,Lucene.Net.Index,BaseIndexFileFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseIndexFileFormatTestCase.cs,TestMergeStability,The length of the statement  "                var cfg = (new IndexWriterConfig(TEST_VERSION_CURRENT' new MockAnalyzer(Random))).SetUseCompoundFile(false).SetMergePolicy(mp); " is 127.
Long Statement,Lucene.Net.Index,BaseIndexFileFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseIndexFileFormatTestCase.cs,TestMergeStability,The length of the statement  "                        cfg = (new IndexWriterConfig(TEST_VERSION_CURRENT' new MockAnalyzer(Random))).SetUseCompoundFile(false).SetMergePolicy(mp); " is 123.
Long Statement,Lucene.Net.Index,BaseMergePolicyTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseMergePolicyTestCase.cs,TestForceMergeNotNeeded,The length of the statement  "                using (IndexWriter writer = new IndexWriter(dir' NewIndexWriterConfig(TEST_VERSION_CURRENT' new MockAnalyzer(Random)).SetMergeScheduler(mergeScheduler).SetMergePolicy(NewMergePolicy()))) " is 186.
Long Statement,Lucene.Net.Index,BasePostingsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,BeforeClass,The length of the statement  "                Console.WriteLine("TEST: done init postings; " + allTerms.Count + " total terms' across " + fieldInfos.Count + " fields"); " is 122.
Long Statement,Lucene.Net.Index,BasePostingsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,BuildIndex,The length of the statement  "            int maxIndexOptionNoOffsets = Enum.GetValues(typeof(IndexOptions)).Cast<IndexOptions>().ToList().IndexOf(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); " is 148.
Long Statement,Lucene.Net.Index,BasePostingsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,BuildIndex,The length of the statement  "                IndexOptions indexOptions = Enum.GetValues(typeof(IndexOptions)).Cast<IndexOptions>().ToArray()[alwaysTestMax ? fieldMaxIndexOption : Random.Next(1' 1 + fieldMaxIndexOption)]; // LUCENENET: Skipping NONE option " is 210.
Long Statement,Lucene.Net.Index,BasePostingsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,BuildIndex,The length of the statement  "                newFieldInfoArray[fieldUpto] = new FieldInfo(oldFieldInfo.Name' true' fieldUpto' false' false' doPayloads' indexOptions' DocValuesType.NONE' DocValuesType.NUMERIC' null); " is 170.
Long Statement,Lucene.Net.Index,BasePostingsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,BuildIndex,The length of the statement  "            SegmentWriteState writeState = new SegmentWriteState(null' dir' segmentInfo' newFieldInfos' 32' null' new IOContext(new FlushInfo(maxDoc' bytes))); " is 147.
Long Statement,Lucene.Net.Index,BasePostingsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,BuildIndex,The length of the statement  "                            Console.WriteLine("  term=" + field + ":" + term.Utf8ToString() + " docFreq=" + postings.DocFreq + " seed=" + termEnt.Value); " is 125.
Long Statement,Lucene.Net.Index,BasePostingsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,BuildIndex,The length of the statement  "                                    postingsConsumer.AddPosition(pos' doPayloads ? payload : null' doOffsets ? postings.StartOffset : -1' doOffsets ? postings.EndOffset : -1); " is 139.
Long Statement,Lucene.Net.Index,BasePostingsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,VerifyEnum,The length of the statement  "            bool doCheckPayloads = options.Contains(Option.PAYLOADS) && allowPositions && fieldInfo.HasPayloads && (alwaysTestMax || Random.Next(3) <= 2); " is 142.
Long Statement,Lucene.Net.Index,BasePostingsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,VerifyEnum,The length of the statement  "                    threadState.ReuseDocsAndPositionsEnum = termsEnum.DocsAndPositions(liveDocs' (DocsAndPositionsEnum)prevDocsEnum' flags); " is 120.
Long Statement,Lucene.Net.Index,BasePostingsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,VerifyEnum,The length of the statement  "                threadState.ReuseDocsAndPositionsEnum = termsEnum.DocsAndPositions(liveDocs' (DocsAndPositionsEnum)prevDocsEnum' flags); " is 120.
Long Statement,Lucene.Net.Index,BasePostingsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,VerifyEnum,The length of the statement  "                                Console.WriteLine("  now advance to random target=" + targetDocID + " (" + expected.Upto + " of " + stopAt + ") current=" + docsEnum.DocID); " is 140.
Long Statement,Lucene.Net.Index,BasePostingsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,VerifyEnum,The length of the statement  "                                Console.WriteLine("  now advance to known-exists target=" + expected.DocID + " (" + expected.Upto + " of " + stopAt + ") current=" + docsEnum.DocID); " is 149.
Long Statement,Lucene.Net.Index,BasePostingsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,VerifyEnum,The length of the statement  "                                        Assert.AreEqual(expectedPayload.Bytes[expectedPayload.Offset + byteUpto]' payload.Bytes[payload.Offset + byteUpto]' "payload bytes are wrong"); " is 143.
Long Statement,Lucene.Net.Index,BasePostingsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,TestTermsOneThread,The length of the statement  "                        Console.WriteLine("\nTEST: seek using TermState to term=" + fieldAndTerm.Field + ":" + fieldAndTerm.Term.Utf8ToString()); " is 121.
Long Statement,Lucene.Net.Index,BasePostingsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,TestFull,The length of the statement  "                    var allOptions = ((IndexOptions[])Enum.GetValues(typeof(IndexOptions))).Skip(1).ToArray(); // LUCENENET: Skip our NONE option " is 125.
Long Statement,Lucene.Net.Index,BasePostingsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,TestRandom,The length of the statement  "                    using (FieldsProducer fieldsProducer = BuildIndex(dir' IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS' indexPayloads' false)) " is 132.
Long Statement,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,TestRandomStoredFields,The length of the statement  "                using (RandomIndexWriter w = new RandomIndexWriter(rand' dir' NewIndexWriterConfig(TEST_VERSION_CURRENT' new MockAnalyzer(Random)).SetMaxBufferedDocs(TestUtil.NextInt32(rand' 5' 20)))) " is 184.
Long Statement,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,TestReadSkip,The length of the statement  "                    IList<Field> fields = Arrays.AsList(new Field("bytes"' bytes' ft)' new Field("string"' @string' ft)' new Int64Field("long"' l' Field.Store.YES)' new Int32Field("int"' i' Field.Store.YES)' new SingleField("float"' f' Field.Store.YES)' new DoubleField("double"' d' Field.Store.YES) " is 279.
Long Statement,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,TestWriteReadMerge,The length of the statement  "                        int fieldCount = Rarely() ? RandomInts.RandomInt32Between(Random' 1' 500) : RandomInts.RandomInt32Between(Random' 1' 5); " is 120.
Long Statement,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,TestBigDocuments,The length of the statement  "                    Field bigField = new Field("fld"' RandomByteArray(RandomInts.RandomInt32Between(Random' 1000000' 5000000)' 2)' onlyStored); " is 123.
Long Statement,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,TestBulkMergeWithDeletes,The length of the statement  "                RandomIndexWriter w = new RandomIndexWriter(Random' dir' NewIndexWriterConfig(TEST_VERSION_CURRENT' new MockAnalyzer(Random)).SetMergePolicy(NoMergePolicy.COMPOUND_FILES)); " is 172.
Long Statement,Lucene.Net.Index,BaseTermVectorsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseTermVectorsFormatTestCase.cs,AssertEquals,The length of the statement  "            Assert.AreEqual((long)termCount' terms.Count); // LUCENENET specific - cast required because types don't match (xUnit checks this) " is 130.
Long Statement,Lucene.Net.Index,BaseTermVectorsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseTermVectorsFormatTestCase.cs,AssertEquals,The length of the statement  "            Assert.AreEqual((long)termCount' terms.SumDocFreq); // LUCENENET specific - cast required because types don't match (xUnit checks this) " is 135.
Long Statement,Lucene.Net.Index,BaseTermVectorsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseTermVectorsFormatTestCase.cs,AssertEquals,The length of the statement  "                DocsAndPositionsEnum docsAndPositionsEnum = termsEnum.DocsAndPositions(bits' Random.NextBoolean() ? null : this.docsAndPositionsEnum.Value); " is 140.
Long Statement,Lucene.Net.Index,BaseTermVectorsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseTermVectorsFormatTestCase.cs,AssertEquals,The length of the statement  "                docsAndPositionsEnum = termsEnum.DocsAndPositions(Random.NextBoolean() ? bits : null' Random.NextBoolean() ? null : docsAndPositionsEnum); " is 138.
Long Statement,Lucene.Net.Index,BaseTermVectorsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseTermVectorsFormatTestCase.cs,AssertEquals,The length of the statement  "                                    if (tk.termBytes[index].Equals(termsEnum.Term) && tk.startOffsets[index] == docsAndPositionsEnum.StartOffset && tk.endOffsets[index] == docsAndPositionsEnum.EndOffset) " is 167.
Long Statement,Lucene.Net.Index,BaseTermVectorsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseTermVectorsFormatTestCase.cs,TestRandom,The length of the statement  "                docs[i] = docFactory.NewDocument(TestUtil.NextInt32(Random' 1' 3)' TestUtil.NextInt32(Random' 10' 50)' RandomOptions()); " is 120.
Long Statement,Lucene.Net.Index,DocHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\DocHelper.cs,WriteDoc,The length of the statement  "            using (IndexWriter writer = new IndexWriter(dir' (new IndexWriterConfig(Util.LuceneTestCase.TEST_VERSION_CURRENT' analyzer)).SetSimilarity(similarity ?? IndexSearcher.DefaultSimilarity))) // LuceneTestCase.newIndexWriterConfig(random' " is 234.
Long Statement,Lucene.Net.Index,RandomCodec,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\RandomCodec.cs,GetPostingsFormatForField,The length of the statement  "            Console.WriteLine("RandomCodec.GetPostingsFormatForField(\"" + name + "\") returned '" + codec.Name + "' with underlying type '" + codec.GetType().ToString() + "'."); " is 166.
Long Statement,Lucene.Net.Index,RandomCodec,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\RandomCodec.cs,GetDocValuesFormatForField,The length of the statement  "                Console.WriteLine("RandomCodec.GetDocValuesFormatForField(\"" + name + "\") returned '" + codec.Name + "' with underlying type '" + codec.GetType().ToString() + "'."); " is 167.
Long Statement,Lucene.Net.Index,RandomCodec,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\RandomCodec.cs,ToString,The length of the statement  "            return base.ToString() + ": " + Collections.ToString(previousMappings) + "' docValues:" + Collections.ToString(previousDVMappings); " is 131.
Long Statement,Lucene.Net.Index,RandomIndexWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\RandomIndexWriter.cs,_DoRandomForceMerge,The length of the statement  "                    Debug.Assert(!doRandomForceMergeAssert || IndexWriter.SegmentCount <= limit' "limit=" + limit + " actual=" + IndexWriter.SegmentCount); " is 135.
Long Statement,Lucene.Net.Index,ThreadedIndexingAndSearchingTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\ThreadedIndexingAndSearchingTestCase.cs,RunTest,The length of the statement  "            IndexWriterConfig conf = NewIndexWriterConfig(TEST_VERSION_CURRENT' analyzer).SetInfoStream(new FailOnNonBulkMergesInfoStream()); " is 129.
Long Statement,Lucene.Net.Index,ThreadedIndexingAndSearchingTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\ThreadedIndexingAndSearchingTestCase.cs,RunTest,The length of the statement  "            ThreadClass[] indexThreads = LaunchIndexingThreads(docs' NUM_INDEX_THREADS' stopTime' delIDs' delPackIDs' allSubDocs.ToList()); " is 127.
Long Statement,Lucene.Net.Index,ThreadedIndexingAndSearchingTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\ThreadedIndexingAndSearchingTestCase.cs,RunTest,The length of the statement  "                Console.WriteLine("TEST: DONE start " + NUM_INDEX_THREADS + " indexing threads [" + (Environment.TickCount - t0) + " ms]"); " is 123.
Long Statement,Lucene.Net.Index,ThreadedIndexingAndSearchingTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\ThreadedIndexingAndSearchingTestCase.cs,RunTest,The length of the statement  "                Console.WriteLine("TEST: done join indexing threads [" + (Environment.TickCount - t0) + " ms]; addCount=" + m_addCount + " delCount=" + m_delCount); " is 148.
Long Statement,Lucene.Net.Index,ThreadedIndexingAndSearchingTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\ThreadedIndexingAndSearchingTestCase.cs,RunTest,The length of the statement  "                    Console.WriteLine("doc id=" + id + " is supposed to be deleted' but got " + hits.TotalHits + " hits; first docID=" + hits.ScoreDocs[0].Doc); " is 140.
Long Statement,Lucene.Net.Index,ThreadedIndexingAndSearchingTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\ThreadedIndexingAndSearchingTestCase.cs,RunTest,The length of the statement  "                        Console.WriteLine("packID=" + subDocs.PackID + ": expected " + subDocs.SubIDs.Count + " hits but got " + hits.TotalHits); " is 121.
Long Statement,Lucene.Net.Index,ThreadedIndexingAndSearchingTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\ThreadedIndexingAndSearchingTestCase.cs,RunTest,The length of the statement  "                        Console.WriteLine("doc id=" + stringID + " is not supposed to be deleted' but got hitCount=" + hits.TotalHits + "; delIDs=" + string.Join("'"'  delIDs.ToArray())); " is 163.
Long Statement,Lucene.Net.Index,ThreadedIndexingAndSearchingTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\ThreadedIndexingAndSearchingTestCase.cs,RunTest,The length of the statement  "            assertEquals("index=" + m_writer.SegString() + " addCount=" + m_addCount + " delCount=" + m_delCount' m_addCount.Get() - m_delCount.Get()' s.IndexReader.NumDocs); " is 162.
Long Statement,Lucene.Net.Index,ThreadedIndexingAndSearchingTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\ThreadedIndexingAndSearchingTestCase.cs,RunTest,The length of the statement  "            assertEquals("index=" + m_writer.SegString() + " addCount=" + m_addCount + " delCount=" + m_delCount' m_addCount.Get() - m_delCount.Get()' m_writer.NumDocs); " is 157.
Long Statement,Lucene.Net.Search,AssertingBulkScorer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Search\AssertingBulkScorer.cs,ShouldWrap,The length of the statement  "            return SCORE_COLLECTOR.IsOverriddenAsOf(inScorer.GetType()) || SCORE_COLLECTOR_RANGE.IsOverriddenAsOf(inScorer.GetType()); " is 122.
Long Statement,Lucene.Net.Search,CheckHits,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Search\CheckHits.cs,CheckNoMatchExplanations,The length of the statement  "                Assert.IsFalse(exp.IsMatch' "Explanation of [[" + d + "]] for #" + doc + " doesn't indicate non-match: " + exp.ToString()); " is 123.
Long Statement,Lucene.Net.Search,CheckHits,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Search\CheckHits.cs,CheckEqual,The length of the statement  "                    Assert.Fail("Hit " + i + "' doc nrs " + hits1[i].Doc + " and " + hits2[i].Doc + "\nunequal       : " + hits1[i].Score + "\n           and: " + hits2[i].Score + "\nfor query:" + query.ToString()); " is 195.
Long Statement,Lucene.Net.Search,CheckHits,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Search\CheckHits.cs,VerifyExplanation,The length of the statement  "            Assert.AreEqual(score' value' ExplainToleranceDelta(score' value)' q + ": score(doc=" + doc + ")=" + score + " != explanationScore=" + value + " Explanation: " + expl); " is 168.
Long Statement,Lucene.Net.Search,CheckHits,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Search\CheckHits.cs,VerifyExplanation,The length of the statement  "                    Assert.IsTrue(productOf || sumOf || maxOf || maxTimesOthers' q + ": multi valued explanation description=\"" + descr + "\" must be 'max of plus x times others' or end with 'product of'" + " or 'sum of:' or 'max of:' - " + expl); " is 228.
Long Statement,Lucene.Net.Search,CheckHits,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Search\CheckHits.cs,VerifyExplanation,The length of the statement  "                    Assert.AreEqual(combined' value' ExplainToleranceDelta(combined' value)' q + ": actual subDetails combined==" + combined + " != value=" + value + " Explanation: " + expl); " is 171.
Long Statement,Lucene.Net.Search,QueryUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Search\QueryUtils.cs,MakeEmptyIndex,The length of the statement  "            IndexWriter w = new IndexWriter(d' new IndexWriterConfig(LuceneTestCase.TEST_VERSION_CURRENT' new MockAnalyzer(random))); " is 121.
Long Statement,Lucene.Net.Search,QueryUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Search\QueryUtils.cs,CheckSkipTo,The length of the statement  "            if (s.CreateNormalizedWeight(q).ScoresDocsOutOfOrder) // in this case order of skipTo() might differ from that of next(). " is 121.
Long Statement,Lucene.Net.Search,QueryUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Search\QueryUtils.cs,CheckSkipTo,The length of the statement  "            int[][] orders = new int[][] { new int[] { next_op }' new int[] { skip_op }' new int[] { skip_op' next_op }' new int[] { next_op' skip_op }' new int[] { skip_op' skip_op' next_op' next_op }' new int[] { next_op' next_op' skip_op' skip_op }' new int[] { skip_op' skip_op' skip_op' next_op' next_op } }; " is 301.
Long Statement,Lucene.Net.Search,QueryUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Search\QueryUtils.cs,CheckSkipTo,The length of the statement  "                        Assert.IsFalse(more' "query's last doc was " + lastDoc[0] + " but skipTo(" + (lastDoc[0] + 1) + ") got to " + scorer.DocID); " is 124.
Long Statement,Lucene.Net.Search,QueryUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Search\QueryUtils.cs,CheckFirstSkipTo,The length of the statement  "                    Assert.IsFalse(more' "query's last doc was " + lastDoc[0] + " but skipTo(" + (lastDoc[0] + 1) + ") got to " + scorer.DocID); " is 124.
Long Statement,Lucene.Net.Search,CollectorAnonymousInnerClassHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Search\QueryUtils.cs,Collect,The length of the statement  "                    bool more = op == skip_op ? scorer.Advance(scorer.DocID + 1) != DocIdSetIterator.NO_MORE_DOCS : scorer.NextDoc() != DocIdSetIterator.NO_MORE_DOCS; " is 146.
Long Statement,Lucene.Net.Search,CollectorAnonymousInnerClassHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Search\QueryUtils.cs,Collect,The length of the statement  "                        throw new Exception("ERROR matching docs:" + "\n\t" + (doc != scorerDoc ? "--> " : "") + "doc=" + doc + "' scorerDoc=" + scorerDoc + "\n\t" + (!more ? "--> " : "") + "tscorer.more=" + more + "\n\t" + (scoreDiff > maxDiff ? "--> " : "") + "scorerScore=" + scorerScore + " scoreDiff=" + scoreDiff + " maxDiff=" + maxDiff + "\n\t" + (scorerDiff > maxDiff ? "--> " : "") + "scorerScore2=" + scorerScore2 + " scorerDiff=" + scorerDiff + "\n\thitCollector.Doc=" + doc + " score=" + score + "\n\t Scorer=" + scorer + "\n\t Query=" + q + "  " + q.GetType().Name + "\n\t Searcher=" + s + "\n\t Order=" + sbord + "\n\t Op=" + (op == skip_op ? " skip()" : " next()")); " is 657.
Long Statement,Lucene.Net.Search,CollectorAnonymousInnerClassHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Search\QueryUtils.cs,SetNextReader,The length of the statement  "                        Assert.IsFalse(more' "query's last doc was " + lastDoc[0] + " but skipTo(" + (lastDoc[0] + 1) + ") got to " + scorer.DocID); " is 124.
Long Statement,Lucene.Net.Search,CollectorAnonymousInnerClassHelper2,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Search\QueryUtils.cs,Collect,The length of the statement  "                        Assert.IsTrue(scorer_.Advance(i) != DocIdSetIterator.NO_MORE_DOCS' "query collected " + doc + " but skipTo(" + i + ") says no more docs!"); " is 139.
Long Statement,Lucene.Net.Search,CollectorAnonymousInnerClassHelper2,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Search\QueryUtils.cs,Collect,The length of the statement  "                        Assert.AreEqual(score' skipToScore' maxDiff' "query assigned doc " + doc + " a score of <" + score + "> but skipTo(" + i + ") has <" + skipToScore + ">!"); " is 155.
Long Statement,Lucene.Net.Search,CollectorAnonymousInnerClassHelper2,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Search\QueryUtils.cs,SetNextReader,The length of the statement  "                        Assert.IsFalse(more' "query's last doc was " + lastDoc[0] + " but skipTo(" + (lastDoc[0] + 1) + ") got to " + scorer.DocID); " is 124.
Long Statement,Lucene.Net.Search,RandomSimilarityProvider,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Search\RandomSimilarityProvider.cs,ToString,The length of the statement  "                return "RandomSimilarityProvider(queryNorm=" + shouldQueryNorm + "'coord=" + coordMethod + "): " + Arrays.ToString(previousMappings); " is 133.
Long Statement,Lucene.Net.Search,ShardIndexSearcher,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Search\ShardSearchingTestBase.cs,Rewrite,The length of the statement  "                            foreach (KeyValuePair<Term' TermStatistics> ent in outerInstance.outerInstance.GetNodeTermStats(missing' nodeID' nodeVersions[nodeID])) " is 135.
Long Statement,Lucene.Net.Search,ShardIndexSearcher,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Search\ShardSearchingTestBase.cs,CollectionStatistics,The length of the statement  "                        Debug.Assert(nodeStats != null' "myNodeID=" + MyNodeID + " nodeID=" + nodeID + " version=" + nodeVersions[nodeID] + " field=" + field); " is 135.
Long Statement,Lucene.Net.Store,MockDirectoryWrapper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\MockDirectoryWrapper.cs,MaybeThrowIOException,The length of the statement  "                    Console.WriteLine(Thread.CurrentThread.Name + ": MockDirectoryWrapper: now throw random exception" + (message == null ? "" : " (" + message + ")")); " is 148.
Long Statement,Lucene.Net.Store,MockDirectoryWrapper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\MockDirectoryWrapper.cs,MaybeThrowIOExceptionOnOpen,The length of the statement  "                  Console.WriteLine(Thread.CurrentThread.Name + ": MockDirectoryWrapper: now throw random exception during open file=" + name); " is 125.
Long Statement,Lucene.Net.Store,MockDirectoryWrapper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\MockDirectoryWrapper.cs,MaybeThrowIOExceptionOnOpen,The length of the statement  "                    throw randomState.NextBoolean() ? (IOException)new FileNotFoundException("a random IOException (" + name + ")") : new DirectoryNotFoundException("a random IOException (" + name + ")"); " is 184.
Long Statement,Lucene.Net.Store,MockDirectoryWrapper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\MockDirectoryWrapper.cs,WithAdditionalErrorInformation,The length of the statement  "                    if (input && ent.Key is MockIndexInputWrapper && ((MockIndexInputWrapper)ent.Key).name.Equals(name' StringComparison.Ordinal)) " is 126.
Long Statement,Lucene.Net.Store,MockDirectoryWrapper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\MockDirectoryWrapper.cs,WithAdditionalErrorInformation,The length of the statement  "                    else if (!input && ent.Key is MockIndexOutputWrapper && ((MockIndexOutputWrapper)ent.Key).name.Equals(name' StringComparison.Ordinal)) " is 134.
Long Statement,Lucene.Net.Store,MockDirectoryWrapper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\MockDirectoryWrapper.cs,DeleteFile,The length of the statement  "                            throw WithAdditionalErrorInformation(new IOException("MockDirectoryWrapper: file \"" + name + "\" is still open: cannot delete")' name' true); " is 142.
Long Statement,Lucene.Net.Store,MockDirectoryWrapper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\MockDirectoryWrapper.cs,DeleteFile,The length of the statement  "                            throw WithAdditionalErrorInformation(new AssertionError("MockDirectoryWrapper: file \"" + name + "\" is still open: cannot delete")' name' true); " is 145.
Long Statement,Lucene.Net.Store,MockDirectoryWrapper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\MockDirectoryWrapper.cs,CreateOutput,The length of the statement  "                            ramdir.m_sizeInBytes.AddAndGet(-existing.GetSizeInBytes()); // LUCENENET: GetAndAdd in Lucene' but we are not using the value " is 125.
Long Statement,Lucene.Net.Store,MockDirectoryWrapper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\MockDirectoryWrapper.cs,CreateOutput,The length of the statement  "                    delegateOutput = new BufferedIndexOutputWrapper(1 + randomState.Next(BufferedIndexOutput.DEFAULT_BUFFER_SIZE)' delegateOutput); " is 127.
Long Statement,Lucene.Net.Store,MockDirectoryWrapper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\MockDirectoryWrapper.cs,CreateOutput,The length of the statement  "                if (throttling == Throttling.ALWAYS || (throttling == Throttling.SOMETIMES && randomState.Next(50) == 0) && !(m_input is RateLimitedDirectoryWrapper)) " is 150.
Long Statement,Lucene.Net.Store,MockDirectoryWrapper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\MockDirectoryWrapper.cs,OpenInput,The length of the statement  "                    throw randomState.NextBoolean() ? (IOException)new FileNotFoundException(name + " in dir=" + m_input) : new DirectoryNotFoundException(name + " in dir=" + m_input); " is 164.
Long Statement,Lucene.Net.Store,MockDirectoryWrapper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\MockDirectoryWrapper.cs,OpenInput,The length of the statement  "                if (!allowReadingFilesStillOpenForWrite && openFilesForWrite.Contains(name' StringComparer.Ordinal) && !name.StartsWith("segments"' StringComparison.Ordinal)) " is 158.
Long Statement,Lucene.Net.Store,MockDirectoryWrapper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\MockDirectoryWrapper.cs,OpenInput,The length of the statement  "                    throw WithAdditionalErrorInformation(new IOException("MockDirectoryWrapper: file \"" + name + "\" is still open for writing")' name' false); " is 140.
Long Statement,Lucene.Net.Store,MockDirectoryWrapper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\MockDirectoryWrapper.cs,Dispose,The length of the statement  "                                    if (file.StartsWith("segments"' StringComparison.Ordinal) && !file.Equals("segments.gen"' StringComparison.Ordinal) && endSet.Contains(file' StringComparer.Ordinal)) " is 165.
Long Statement,Lucene.Net.Store,MockDirectoryWrapper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\MockDirectoryWrapper.cs,Dispose,The length of the statement  "                                    Debug.Assert(false' "unreferenced files: before delete:\n    " + Arrays.ToString(startFiles) + "\n  after delete:\n    " + Arrays.ToString(endFiles) + extras); " is 159.
Long Statement,Lucene.Net.Store,MockDirectoryWrapper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\MockDirectoryWrapper.cs,Dispose,The length of the statement  "                                Debug.Assert(numDocs1 == numDocs2' "numDocs changed after opening/closing IW: before=" + numDocs1 + " after=" + numDocs2); " is 122.
Long Statement,Lucene.Net.Store,MockDirectoryWrapper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\MockDirectoryWrapper.cs,CreateSlicer,The length of the statement  "                throw WithAdditionalErrorInformation(new IOException("MockDirectoryWrapper: file \"" + name + "\" is still open for writing")' name' false); " is 140.
Long Statement,Lucene.Net.Store,IndexInputSlicerAnonymousInnerClassHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\MockDirectoryWrapper.cs,OpenSlice,The length of the statement  "                IndexInput ii = new MockIndexInputWrapper(outerInstance' name' delegateHandle.OpenSlice(sliceDescription' offset' length)); " is 123.
Long Statement,Lucene.Net.Store,MockIndexOutputWrapper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\MockIndexOutputWrapper.cs,CheckDiskFull,The length of the statement  "                string message = "fake disk full at " + dir.GetRecomputedActualSizeInBytes() + " bytes when writing " + name + " (file length=" + @delegate.Length; " is 147.
Long Statement,Lucene.Net.Support,ApiScanTestBase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\ApiScanTestBase.cs,TestForTypesContainingNonNetNumeric,The length of the statement  "                "\n\nIMPORTANT: Before making changes' make sure to rename any types with ambiguous use of the word `Single` (meaning 'singular' rather than `System.Single`) to avoid confusion."); " is 180.
Long Statement,Lucene.Net.Support,ApiScanTestBase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\ApiScanTestBase.cs,TestForMembersAcceptingOrReturningIEnumerable,The length of the statement  "            var names = GetMembersAcceptingOrReturningType(typeof(IEnumerable<>)' typeFromTargetAssembly.GetTypeInfo().Assembly' false' exceptionRegex); " is 140.
Long Statement,Lucene.Net.Support,ApiScanTestBase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\ApiScanTestBase.cs,TestForMembersAcceptingOrReturningListOrDictionary,The length of the statement  "            names.AddRange(GetMembersAcceptingOrReturningType(typeof(List<>)' typeFromTargetAssembly.GetTypeInfo().Assembly' true' exceptionRegex)); " is 136.
Long Statement,Lucene.Net.Support,ApiScanTestBase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\ApiScanTestBase.cs,TestForMembersAcceptingOrReturningListOrDictionary,The length of the statement  "            names.AddRange(GetMembersAcceptingOrReturningType(typeof(Dictionary<'>)' typeFromTargetAssembly.GetTypeInfo().Assembly' true' exceptionRegex)); " is 143.
Long Statement,Lucene.Net.Support,ApiScanTestBase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\ApiScanTestBase.cs,GetInvalidPrivateFields,The length of the statement  "                    if ((field.IsPrivate || field.IsAssembly) && !PrivateFieldName.IsMatch(field.Name) && field.DeclaringType.Equals(c.GetTypeInfo().UnderlyingSystemType)) " is 151.
Long Statement,Lucene.Net.Support,ApiScanTestBase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\ApiScanTestBase.cs,GetInvalidProtectedFields,The length of the statement  "                    if ((field.IsFamily || field.IsFamilyOrAssembly) && !ProtectedFieldName.IsMatch(field.Name) && field.DeclaringType.Equals(c.GetTypeInfo().UnderlyingSystemType)) " is 160.
Long Statement,Lucene.Net.Support,ApiScanTestBase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\ApiScanTestBase.cs,GetPropertiesWithNoGetter,The length of the statement  "                    if (property.GetSetMethod(true) != null && property.GetGetMethod(true) == null && property.DeclaringType.Equals(c.GetTypeInfo().UnderlyingSystemType)) " is 150.
Long Statement,Lucene.Net.Support,ApiScanTestBase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\ApiScanTestBase.cs,GetPropertiesThatReturnArray,The length of the statement  "                    if (getMethod != null && getMethod.ReturnParameter != null && getMethod.ReturnParameter.ParameterType.IsArray && property.DeclaringType.Equals(c.GetTypeInfo().UnderlyingSystemType)) " is 181.
Long Statement,Lucene.Net.Support,ApiScanTestBase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\ApiScanTestBase.cs,GetProtectedFieldsContainingComparer,The length of the statement  "                    if ((field.IsFamily || field.IsFamilyOrAssembly) && ContainsComparer.IsMatch(field.Name) && field.DeclaringType.Equals(c.GetTypeInfo().UnderlyingSystemType)) " is 157.
Long Statement,Lucene.Net.Support,ApiScanTestBase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\ApiScanTestBase.cs,GetMembersContainingComparer,The length of the statement  "                        if (member.MemberType == MemberTypes.Method && !(member.Name.StartsWith("get_"' StringComparison.Ordinal) || member.Name.StartsWith("set_"' StringComparison.Ordinal))) " is 167.
Long Statement,Lucene.Net.Support,ApiScanTestBase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\ApiScanTestBase.cs,GetMembersNamedSize,The length of the statement  "                    if ("Size".Equals(member.Name' StringComparison.OrdinalIgnoreCase) && member.DeclaringType.Equals(t.GetTypeInfo().UnderlyingSystemType)) " is 136.
Long Statement,Lucene.Net.Support,ApiScanTestBase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\ApiScanTestBase.cs,GetMembersNamedSize,The length of the statement  "                        if (member.MemberType == MemberTypes.Method && !(member.Name.StartsWith("get_"' StringComparison.Ordinal) || member.Name.StartsWith("set_"' StringComparison.Ordinal))) " is 167.
Long Statement,Lucene.Net.Support,ApiScanTestBase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\ApiScanTestBase.cs,GetMembersContainingNonNetNumeric,The length of the statement  "                        if (member.MemberType == MemberTypes.Method && !(member.Name.StartsWith("get_"' StringComparison.Ordinal) || member.Name.StartsWith("set_"' StringComparison.Ordinal))) " is 167.
Long Statement,Lucene.Net.Support,ApiScanTestBase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\ApiScanTestBase.cs,GetMethodsThatReturnWritableArray,The length of the statement  "                    if (method.Name.StartsWith("get_"' StringComparison.Ordinal) || method.Name.StartsWith("set_"' StringComparison.Ordinal)) " is 121.
Long Statement,Lucene.Net.Support,ApiScanTestBase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\ApiScanTestBase.cs,GetPublicNullableEnumMembers,The length of the statement  "                        if (member.MemberType == MemberTypes.Method && !(member.Name.StartsWith("get_"' StringComparison.Ordinal) || member.Name.StartsWith("set_"' StringComparison.Ordinal))) " is 167.
Long Statement,Lucene.Net.Support,ApiScanTestBase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\ApiScanTestBase.cs,GetMembersAcceptingOrReturningType,The length of the statement  "                        if (member.MemberType == MemberTypes.Method && !(member.Name.StartsWith("get_"' StringComparison.Ordinal) || member.Name.StartsWith("set_"' StringComparison.Ordinal))) " is 167.
Long Statement,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,GetTestClass,The length of the statement  "            testClass = referencedAssemblies.SelectMany(a => a.GetTypes().Where(t => t.FullName == testClassName)).FirstOrDefault(); " is 120.
Long Statement,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,AssertSaneFieldCaches,The length of the statement  "                    throw;  // LUCENENET: CA2200: Rethrow to preserve stack details (https://docs.microsoft.com/en-us/visualstudio/code-quality/ca2200-rethrow-to-preserve-stack-details) " is 165.
Long Statement,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,NewIndexWriterConfig,The length of the statement  "                    c.SetTermIndexInterval(random.NextBoolean() ? TestUtil.NextInt32(random' 1' 31) : TestUtil.NextInt32(random' 129' 1000)); " is 121.
Long Statement,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,NewIndexWriterConfig,The length of the statement  "                int maxNumThreadStates = Rarely(random) ? TestUtil.NextInt32(random' 5' 20) : TestUtil.NextInt32(random' 1' 4); // reasonable value -  crazy value " is 146.
Long Statement,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,NewIndexWriterConfig,The length of the statement  "                    ////MethodInfo setIndexerThreadPoolMethod = typeof(IndexWriterConfig).GetTypeInfo().GetMethod("SetIndexerThreadPool"' new Type[] { typeof(DocumentsWriterPerThreadPool) }); " is 171.
Long Statement,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,NewStringField,The length of the statement  "            return NewField(Random' name' value' stored == Field.Store.YES ? StringField.TYPE_STORED : StringField.TYPE_NOT_STORED); " is 120.
Long Statement,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,NewStringField,The length of the statement  "            return NewField(random' name' value' stored == Field.Store.YES ? StringField.TYPE_STORED : StringField.TYPE_NOT_STORED); " is 120.
Long Statement,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,MaybeWrapReader,The length of the statement  "                            r = (r is AtomicReader) ? (IndexReader)new ParallelAtomicReader((AtomicReader)r) : new ParallelCompositeReader((CompositeReader)r); " is 131.
Long Statement,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,MaybeWrapReader,The length of the statement  "                            r = new ParallelAtomicReader(new FieldFilterAtomicReader(ar' fields' false)' new FieldFilterAtomicReader(ar' fields' true)); " is 124.
Long Statement,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,NewIOContext,The length of the statement  "                return new IOContext(new MergeInfo(randomNumDocs' Math.Max(oldContext.MergeInfo.EstimatedMergeBytes' size)' random.NextBoolean()' TestUtil.NextInt32(random' 1' 100))); " is 167.
Long Statement,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,NewSearcher,The length of the statement  "                ret.Similarity = luceneTestCase?.ClassEnvRule.similarity; // LUCENENET special case: passing null allows us to skip the Similarity " is 130.
Long Statement,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,NewSearcher,The length of the statement  "                    //ex = new ThreadPoolExecutor(threads' threads' 0L' TimeUnit.MILLISECONDS' new LinkedBlockingQueue<IThreadRunnable>()' new NamedThreadFactory("LuceneTestCase")); " is 161.
Long Statement,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,NewSearcher,The length of the statement  "                    //r.AddReaderClosedListener(new ReaderClosedListenerAnonymousInnerClassHelper(ex)); // LUCENENET TODO: Implement event (see the commented ReaderClosedListenerAnonymousInnerClassHelper class near the bottom of this file) " is 219.
Long Statement,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,NewSearcher,The length of the statement  "                    ret = random.NextBoolean() ? new AssertingIndexSearcher(random' r' ex) : new AssertingIndexSearcher(random' r.Context' ex); " is 123.
Long Statement,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,NewSearcher,The length of the statement  "                ret.Similarity = luceneTestCase?.ClassEnvRule.similarity; // LUCENENET special case: passing null allows us to skip the Similarity " is 130.
Long Statement,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,AssertTermsEnumEquals,The length of the statement  "                    AssertDocsAndPositionsEnumEquals(info' leftPositions = leftTermsEnum.DocsAndPositions(null' leftPositions)' rightPositions = rightTermsEnum.DocsAndPositions(null' rightPositions)); " is 180.
Long Statement,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,AssertTermsEnumEquals,The length of the statement  "                    AssertDocsAndPositionsEnumEquals(info' leftPositions = leftTermsEnum.DocsAndPositions(randomBits' leftPositions)' rightPositions = rightTermsEnum.DocsAndPositions(randomBits' rightPositions)); " is 192.
Long Statement,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,AssertTermsEnumEquals,The length of the statement  "                    AssertPositionsSkippingEquals(info' leftReader' leftTermsEnum.DocFreq' leftPositions = leftTermsEnum.DocsAndPositions(null' leftPositions)' rightPositions = rightTermsEnum.DocsAndPositions(null' rightPositions)); " is 212.
Long Statement,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,AssertTermsEnumEquals,The length of the statement  "                    AssertPositionsSkippingEquals(info' leftReader' leftTermsEnum.DocFreq' leftPositions = leftTermsEnum.DocsAndPositions(randomBits' leftPositions)' rightPositions = rightTermsEnum.DocsAndPositions(randomBits' rightPositions)); " is 224.
Long Statement,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,AssertTermsEnumEquals,The length of the statement  "                    AssertDocsEnumEquals(info' leftDocs = leftTermsEnum.Docs(null' leftDocs)' rightDocs = rightTermsEnum.Docs(null' rightDocs)' true); " is 130.
Long Statement,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,AssertTermsEnumEquals,The length of the statement  "                    AssertDocsEnumEquals(info' leftDocs = leftTermsEnum.Docs(randomBits' leftDocs)' rightDocs = rightTermsEnum.Docs(randomBits' rightDocs)' true); " is 142.
Long Statement,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,AssertTermsEnumEquals,The length of the statement  "                    AssertDocsEnumEquals(info' leftDocs = leftTermsEnum.Docs(null' leftDocs' DocsFlags.NONE)' rightDocs = rightTermsEnum.Docs(null' rightDocs' DocsFlags.NONE)' false); " is 163.
Long Statement,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,AssertTermsEnumEquals,The length of the statement  "                    AssertDocsEnumEquals(info' leftDocs = leftTermsEnum.Docs(randomBits' leftDocs' DocsFlags.NONE)' rightDocs = rightTermsEnum.Docs(randomBits' rightDocs' DocsFlags.NONE)' false); " is 175.
Long Statement,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,AssertTermsEnumEquals,The length of the statement  "                    AssertDocsSkippingEquals(info' leftReader' leftTermsEnum.DocFreq' leftDocs = leftTermsEnum.Docs(null' leftDocs)' rightDocs = rightTermsEnum.Docs(null' rightDocs)' true); " is 169.
Long Statement,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,AssertTermsEnumEquals,The length of the statement  "                    AssertDocsSkippingEquals(info' leftReader' leftTermsEnum.DocFreq' leftDocs = leftTermsEnum.Docs(randomBits' leftDocs)' rightDocs = rightTermsEnum.Docs(randomBits' rightDocs)' true); " is 181.
Long Statement,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,AssertTermsEnumEquals,The length of the statement  "                    AssertDocsSkippingEquals(info' leftReader' leftTermsEnum.DocFreq' leftDocs = leftTermsEnum.Docs(null' leftDocs' DocsFlags.NONE)' rightDocs = rightTermsEnum.Docs(null' rightDocs' DocsFlags.NONE)' false); " is 202.
Long Statement,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,AssertTermsEnumEquals,The length of the statement  "                    AssertDocsSkippingEquals(info' leftReader' leftTermsEnum.DocFreq' leftDocs = leftTermsEnum.Docs(randomBits' leftDocs' DocsFlags.NONE)' rightDocs = rightTermsEnum.Docs(randomBits' rightDocs' DocsFlags.NONE)' false); " is 214.
Long Statement,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,CreateTempDir,The length of the statement  "                    throw new Exception("Failed to get a temporary name too many times' check your temp directory and consider manually cleaning it: " + System.IO.Path.GetTempPath()); " is 163.
Long Statement,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,CreateTempDir,The length of the statement  "                f = new DirectoryInfo(Path.Combine(System.IO.Path.GetTempPath()' "LuceneTemp"' prefix + "-" + Path.GetFileNameWithoutExtension(Path.GetRandomFileName()))); " is 155.
Long Statement,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,CreateTempFile,The length of the statement  "            //        throw new Exception("Failed to get a temporary name too many times' check your temp directory and consider manually cleaning it: " + System.IO.Path.GetTempPath()); " is 173.
Long Statement,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,CreateTempFile,The length of the statement  "            //    //f = new FileInfo(Path.Combine(System.IO.Path.GetTempPath()' prefix + "-" + string.Format(CultureInfo.InvariantCulture' "{0:D3}"' attempt) + suffix)); " is 157.
Long Statement,Lucene.Net.Util,StackTraceHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\StackTraceHelper.cs,DoesStackTraceContainMethod,The length of the statement  "                if (method.DeclaringType.Name.Equals(className' StringComparison.Ordinal) && method.Name.Equals(methodName' StringComparison.Ordinal)) " is 134.
Long Statement,Lucene.Net.Util,LineFileDocs,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\LineFileDocs.cs,Open,The length of the statement  "                //CharsetDecoder decoder = StandardCharsets.UTF_8.newDecoder().onMalformedInput(CodingErrorAction.REPORT).onUnmappableCharacter(CodingErrorAction.REPORT); " is 154.
Long Statement,Lucene.Net.Util,TestRuleSetupAndRestoreClassEnv,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestRuleSetupAndRestoreClassEnv.cs,Before,The length of the statement  "                    Console.WriteLine("Loaded postingsFormat: '" + postingsFormat + "': " + PostingsFormat.ForName(postingsFormat).GetType().Name); " is 127.
Long Statement,Lucene.Net.Util,TestRuleSetupAndRestoreClassEnv,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestRuleSetupAndRestoreClassEnv.cs,Before,The length of the statement  "            if ("Lucene3x".Equals(LuceneTestCase.TEST_CODEC' StringComparison.Ordinal) || ("random".Equals(LuceneTestCase.TEST_CODEC' StringComparison.Ordinal) && " is 150.
Long Statement,Lucene.Net.Util,TestRuleSetupAndRestoreClassEnv,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestRuleSetupAndRestoreClassEnv.cs,Before,The length of the statement  "                Debug.Assert((codec is PreFlexRWCodec)' "fix your ICodecFactory to scan Lucene.Net.Tests before Lucene.Net.TestFramework"); " is 123.
Long Statement,Lucene.Net.Util,TestRuleSetupAndRestoreClassEnv,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestRuleSetupAndRestoreClassEnv.cs,Before,The length of the statement  "            else if ("Lucene40".Equals(LuceneTestCase.TEST_CODEC' StringComparison.Ordinal) || ("random".Equals(LuceneTestCase.TEST_CODEC' StringComparison.Ordinal) && " is 155.
Long Statement,Lucene.Net.Util,TestRuleSetupAndRestoreClassEnv,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestRuleSetupAndRestoreClassEnv.cs,Before,The length of the statement  "                Debug.Assert((codec is Lucene40RWCodec)' "fix your ICodecFactory to scan Lucene.Net.Tests before Lucene.Net.TestFramework"); " is 124.
Long Statement,Lucene.Net.Util,TestRuleSetupAndRestoreClassEnv,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestRuleSetupAndRestoreClassEnv.cs,Before,The length of the statement  "                Debug.Assert((PostingsFormat.ForName("Lucene40") is Lucene40RWPostingsFormat)' "fix your IPostingsFormatFactory to scan Lucene.Net.Tests before Lucene.Net.TestFramework"); " is 171.
Long Statement,Lucene.Net.Util,TestRuleSetupAndRestoreClassEnv,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestRuleSetupAndRestoreClassEnv.cs,Before,The length of the statement  "            else if ("Lucene41".Equals(LuceneTestCase.TEST_CODEC' StringComparison.Ordinal) || ("random".Equals(LuceneTestCase.TEST_CODEC' StringComparison.Ordinal) && " is 155.
Long Statement,Lucene.Net.Util,TestRuleSetupAndRestoreClassEnv,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestRuleSetupAndRestoreClassEnv.cs,Before,The length of the statement  "                Debug.Assert((codec is Lucene41RWCodec)' "fix your ICodecFactory to scan Lucene.Net.Tests before Lucene.Net.TestFramework"); " is 124.
Long Statement,Lucene.Net.Util,TestRuleSetupAndRestoreClassEnv,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestRuleSetupAndRestoreClassEnv.cs,Before,The length of the statement  "            else if ("Lucene42".Equals(LuceneTestCase.TEST_CODEC' StringComparison.Ordinal) || ("random".Equals(LuceneTestCase.TEST_CODEC' StringComparison.Ordinal) && " is 155.
Long Statement,Lucene.Net.Util,TestRuleSetupAndRestoreClassEnv,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestRuleSetupAndRestoreClassEnv.cs,Before,The length of the statement  "                Debug.Assert((codec is Lucene42RWCodec)' "fix your ICodecFactory to scan Lucene.Net.Tests before Lucene.Net.TestFramework"); " is 124.
Long Statement,Lucene.Net.Util,TestRuleSetupAndRestoreClassEnv,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestRuleSetupAndRestoreClassEnv.cs,Before,The length of the statement  "            else if ("Lucene45".Equals(LuceneTestCase.TEST_CODEC' StringComparison.Ordinal) || ("random".Equals(LuceneTestCase.TEST_CODEC' StringComparison.Ordinal) && " is 155.
Long Statement,Lucene.Net.Util,TestRuleSetupAndRestoreClassEnv,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestRuleSetupAndRestoreClassEnv.cs,Before,The length of the statement  "                Debug.Assert((codec is Lucene45RWCodec)' "fix your ICodecFactory to scan Lucene.Net.Tests before Lucene.Net.TestFramework"); " is 124.
Long Statement,Lucene.Net.Util,TestRuleSetupAndRestoreClassEnv,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestRuleSetupAndRestoreClassEnv.cs,Before,The length of the statement  "                || ("random".Equals(LuceneTestCase.TEST_CODEC' StringComparison.Ordinal) && randomVal == 9 && LuceneTestCase.Rarely(random) && !ShouldAvoidCodec("SimpleText"))) " is 160.
Long Statement,Lucene.Net.Util,TestRuleSetupAndRestoreClassEnv,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestRuleSetupAndRestoreClassEnv.cs,Before,The length of the statement  "                || ("random".Equals(LuceneTestCase.TEST_CODEC' StringComparison.Ordinal) && randomVal == 8 && !ShouldAvoidCodec("CheapBastard") && !ShouldAvoidCodec("Lucene41"))) " is 162.
Long Statement,Lucene.Net.Util,TestRuleSetupAndRestoreClassEnv,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestRuleSetupAndRestoreClassEnv.cs,Before,The length of the statement  "                || ("random".Equals(LuceneTestCase.TEST_CODEC' StringComparison.Ordinal) && randomVal == 6 && !ShouldAvoidCodec("Asserting"))) " is 126.
Long Statement,Lucene.Net.Util,TestRuleSetupAndRestoreClassEnv,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestRuleSetupAndRestoreClassEnv.cs,Before,The length of the statement  "                || ("random".Equals(LuceneTestCase.TEST_CODEC' StringComparison.Ordinal) && randomVal == 5 && !ShouldAvoidCodec("Compressing"))) " is 128.
Long Statement,Lucene.Net.Util,TestRuleSetupAndRestoreClassEnv,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestRuleSetupAndRestoreClassEnv.cs,Before,The length of the statement  "            locale = testLocale.Equals("random"' StringComparison.Ordinal) ? randomLocale : LuceneTestCase.CultureForName(testLocale); " is 122.
Long Statement,Lucene.Net.Util,TestRuleSetupAndRestoreClassEnv,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestRuleSetupAndRestoreClassEnv.cs,Before,The length of the statement  "            timeZone = testTimeZone.Equals("random"' StringComparison.Ordinal) ? randomTimeZone : TimeZoneInfo.FindSystemTimeZoneById(testTimeZone); " is 136.
Long Statement,Lucene.Net.Util,TestRuleSetupAndRestoreClassEnv,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestRuleSetupAndRestoreClassEnv.cs,Before,The length of the statement  "            //TimeZone.Default = TimeZone; // LUCENENET NOTE: There doesn't seem to be an equivalent to this' but I don't think we need it. " is 127.
Long Statement,Lucene.Net.Util,TestRuleSetupAndRestoreClassEnv,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestRuleSetupAndRestoreClassEnv.cs,Before,The length of the statement  "                throw; // LUCENENET: CA2200: Rethrow to preserve stack details (https://docs.microsoft.com/en-us/visualstudio/code-quality/ca2200-rethrow-to-preserve-stack-details) " is 164.
Long Statement,Lucene.Net.Util,TestRuleSetupAndRestoreClassEnv,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestRuleSetupAndRestoreClassEnv.cs,CheckCodecRestrictions,The length of the statement  "            LuceneTestCase.AssumeFalse("Class not allowed to use postings format: " + LuceneTestCase.TEST_POSTINGSFORMAT + "."' ShouldAvoidCodec(LuceneTestCase.TEST_POSTINGSFORMAT)); " is 170.
Long Statement,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,CheckReader,The length of the statement  "            CheckIndex.Status.TermVectorStatus termVectorStatus = Index.CheckIndex.TestTermVectors(reader' infoStream' false' crossCheckTermVectors); " is 137.
Long Statement,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,CheckReader,The length of the statement  "            if (fieldNormStatus.Error != null || termIndexStatus.Error != null || storedFieldStatus.Error != null || termVectorStatus.Error != null || docValuesStatus.Error != null) " is 169.
Long Statement,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,NextInt64,The length of the statement  "                long result = (long)(ulongRand % uRange) + start + r.Next(0' 1); // Randomly decide whether to increment by 1 to make the second parameter "inclusive" " is 150.
Long Statement,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,RandomSubString,The length of the statement  "                    sb.Append(random.NextBoolean() ? TestUtil.RandomSimpleString(random' wordLength) : TestUtil.RandomHtmlishString(random' wordLength)); " is 133.
Long Statement,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,RandomSubString,The length of the statement  "                Assert.True(mixedUp.Length == sb.Length' "Lengths are not the same: mixedUp = " + mixedUp + "' length = " + mixedUp.Length + "' sb = " + sb + "' length = " + sb.Length); " is 169.
Long Statement,Lucene.Net.Util,ThrottledIndexOutput,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\ThrottledIndexOutput.cs,NewFromDelegate,The length of the statement  "            return new ThrottledIndexOutput(bytesPerSecond' flushDelayMillis' closeDelayMillis' seekDelayMillis' minBytesWritten' output); " is 126.
Long Statement,Lucene.Net.Util.Automaton,AutomatonTestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\Automaton\AutomatonTestUtil.cs,GetRandomCodePoint,The length of the statement  "            Debug.Assert(code >= t.Min && code <= t.Max && (code < UnicodeUtil.UNI_SUR_HIGH_START || code > UnicodeUtil.UNI_SUR_LOW_END)' "code=" + code + " min=" + t.Min + " max=" + t.Max); " is 178.
Long Statement,Lucene.Net.Util.Automaton,AutomatonTestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\Automaton\AutomatonTestUtil.cs,AssertNoDetachedStates,The length of the statement  "            Debug.Assert(numStates == a.GetNumberOfStates()' "automaton has " + (numStates - a.GetNumberOfStates()) + " detached states"); " is 126.
Long Statement,Lucene.Net.Util.Fst,FSTTester<T>,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\Fst\FSTTester.cs,Run,The length of the statement  "                // System.out.println("   loop i=" + i + " label=" + label + " output=" + fst.Outputs.outputToString(output) + " curArc: target=" + arc.target + " isFinal?=" + arc.isFinal()); " is 175.
Long Statement,Lucene.Net.Util.Fst,FSTTester<T>,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\Fst\FSTTester.cs,VerifyUnPruned,The length of the statement  "                        Console.WriteLine("TEST: check term=" + InputToString(inputMode' term) + " output=" + fst.Outputs.OutputToString(pair.Output)); " is 127.
Long Statement,Lucene.Net.Util.Fst,FSTTester<T>,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\Fst\FSTTester.cs,VerifyUnPruned,The length of the statement  "                    Assert.AreEqual(term' t.Input' "expected input=" + InputToString(inputMode' term) + " but fstEnum returned " + InputToString(inputMode' t.Input)); " is 146.
Long Statement,Lucene.Net.Util.Fst,FSTTester<T>,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\Fst\FSTTester.cs,VerifyUnPruned,The length of the statement  "                                //System.out.println("    got " + inputToString(inputMode'seekResult.input) + " output=" + fst.Outputs.outputToString(seekResult.Output)); " is 138.
Long Statement,Lucene.Net.Util.Fst,FSTTester<T>,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\Fst\FSTTester.cs,VerifyUnPruned,The length of the statement  "                                Assert.AreEqual(pairs[pos].Input' seekResult.Input' "expected " + InputToString(inputMode' pairs[pos].Input) + " but got " + InputToString(inputMode' seekResult.Input)); " is 169.
Long Statement,Lucene.Net.Util.Fst,FSTTester<T>,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\Fst\FSTTester.cs,VerifyUnPruned,The length of the statement  "                                Assert.IsNull(seekResult' "expected null but got " + (seekResult == null ? "null" : InputToString(inputMode' seekResult.Input))); " is 129.
Long Statement,Lucene.Net.Util.Fst,FSTTester<T>,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\Fst\FSTTester.cs,VerifyUnPruned,The length of the statement  "                    Assert.AreEqual(pair.Input' seekResult.Input' "got " + InputToString(inputMode' seekResult.Input) + " but expected " + InputToString(inputMode' pair.Input)); " is 157.
Long Statement,Lucene.Net.Util.Fst,FSTTester<T>,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\Fst\FSTTester.cs,VerifyUnPruned,The length of the statement  "                          System.out.println("TEST: call beforeNext(" + inputToString(inputMode' t) + "); current=" + inputToString(inputMode' pairs.get(upto).input) + " next=" + inputToString(inputMode' pairs.get(upto+1).input) + " expected=" + expected); " is 230.
Long Statement,Lucene.Net.Util.Fst,FSTTester<T>,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\Fst\FSTTester.cs,VerifyPruned,The length of the statement  "                    Console.WriteLine("  term prefix=" + InputToString(inputMode' prefix' false) + " count=" + cmo.Count + " isLeaf=" + cmo.IsLeaf + " output=" + outputs.OutputToString(cmo.Output) + " isFinal=" + cmo.IsFinal); " is 206.
Long Statement,Lucene.Net.Util.Fst,FSTTester<T>,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\Fst\FSTTester.cs,VerifyPruned,The length of the statement  "                        keep = cmo2 != null && ((prune2 > 1 && cmo2.Count >= prune2) || (prune2 == 1 && (cmo2.Count >= 2 || prefix.Length <= 1))); " is 122.
Long Statement,Lucene.Net.Util.Fst,FSTTester<T>,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\Fst\FSTTester.cs,VerifyPruned,The length of the statement  "                    Console.WriteLine("  " + InputToString(inputMode' ent.Key' false) + ": isLeaf=" + ent.Value.IsLeaf + " isFinal=" + ent.Value.IsFinal); " is 134.
Long Statement,Lucene.Net.Util.Fst,FSTTester<T>,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\Fst\FSTTester.cs,VerifyPruned,The length of the statement  "                    Console.WriteLine("  fstEnum.next prefix=" + InputToString(inputMode' current.Input' false) + " output=" + outputs.OutputToString(current.Output)); " is 147.
Long Statement,Lucene.Net.Util.Fst,FSTTester<T>,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\Fst\FSTTester.cs,VerifyPruned,The length of the statement  "                        Console.WriteLine("TEST: verify prefix=" + InputToString(inputMode' ent.Key' false) + " output=" + outputs.OutputToString(cmo.Output)); " is 135.
Complex Conditional,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,CheckAnalysisConsistency,The conditional expression  "typeAtt != null && posIncAtt != null && posLengthAtt != null && offsetAtt != null"  is complex.
Complex Conditional,Lucene.Net.Index,BasePostingsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,VerifyEnum,The conditional expression  "!alwaysTestMax && options.Contains(Option.PARTIAL_DOC_CONSUME) && expected.DocFreq > 1 && Random.Next(10) == 7"  is complex.
Complex Conditional,Lucene.Net.Index,BasePostingsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,TestTermsOneThread,The conditional expression  "options.Contains(Option.TERM_STATE) && !useTermState && !savedTermState && Random.Next(5) == 1"  is complex.
Complex Conditional,Lucene.Net.Search,CollectorAnonymousInnerClassHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Search\QueryUtils.cs,Collect,The conditional expression  "!more || doc != scorerDoc || scoreDiff > maxDiff || scorerDiff > maxDiff"  is complex.
Complex Conditional,Lucene.Net.Store,MockDirectoryWrapper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\MockDirectoryWrapper.cs,CreateOutput,The conditional expression  "throttling == Throttling.ALWAYS || (throttling == Throttling.SOMETIMES && randomState.Next(50) == 0) && !(m_input is RateLimitedDirectoryWrapper)"  is complex.
Complex Conditional,Lucene.Net.Support,ApiScanTestBase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\ApiScanTestBase.cs,GetInvalidPrivateFields,The conditional expression  "(field.IsPrivate || field.IsAssembly) && !PrivateFieldName.IsMatch(field.Name) && field.DeclaringType.Equals(c.GetTypeInfo().UnderlyingSystemType)"  is complex.
Complex Conditional,Lucene.Net.Support,ApiScanTestBase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\ApiScanTestBase.cs,GetInvalidProtectedFields,The conditional expression  "(field.IsFamily || field.IsFamilyOrAssembly) && !ProtectedFieldName.IsMatch(field.Name) && field.DeclaringType.Equals(c.GetTypeInfo().UnderlyingSystemType)"  is complex.
Complex Conditional,Lucene.Net.Support,ApiScanTestBase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\ApiScanTestBase.cs,GetPropertiesThatReturnArray,The conditional expression  "getMethod != null && getMethod.ReturnParameter != null && getMethod.ReturnParameter.ParameterType.IsArray && property.DeclaringType.Equals(c.GetTypeInfo().UnderlyingSystemType)"  is complex.
Complex Conditional,Lucene.Net.Support,ApiScanTestBase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\ApiScanTestBase.cs,GetProtectedFieldsContainingComparer,The conditional expression  "(field.IsFamily || field.IsFamilyOrAssembly) && ContainsComparer.IsMatch(field.Name) && field.DeclaringType.Equals(c.GetTypeInfo().UnderlyingSystemType)"  is complex.
Complex Conditional,Lucene.Net.Support,ApiScanTestBase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\ApiScanTestBase.cs,GetMethodsThatReturnWritableArray,The conditional expression  "method != null && method.ReturnParameter != null                           && method.ReturnParameter.ParameterType.IsArray                           && method.DeclaringType.Equals(c.GetTypeInfo().UnderlyingSystemType)"  is complex.
Complex Conditional,Lucene.Net.Support,ApiScanTestBase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\ApiScanTestBase.cs,GetPublicNullableEnumMembers,The conditional expression  "member.MemberType == MemberTypes.Property                               && Nullable.GetUnderlyingType(((PropertyInfo)member).PropertyType) != null                               && ((PropertyInfo)member).PropertyType.GetGenericArguments()[0].GetTypeInfo().IsEnum                               && IsNonPrivateProperty((PropertyInfo)member)"  is complex.
Complex Conditional,Lucene.Net.Support,ApiScanTestBase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\ApiScanTestBase.cs,GetPublicNullableEnumMembers,The conditional expression  "member.MemberType == MemberTypes.Field                               && Nullable.GetUnderlyingType(((FieldInfo)member).FieldType) != null                               && ((FieldInfo)member).FieldType.GetGenericArguments()[0].GetTypeInfo().IsEnum                               && (((FieldInfo)member).IsFamily || ((FieldInfo)member).IsFamilyOrAssembly)"  is complex.
Complex Conditional,Lucene.Net.Support,ApiScanTestBase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\ApiScanTestBase.cs,GetMembersAcceptingOrReturningType,The conditional expression  "member.MemberType == MemberTypes.Property                              && ((PropertyInfo)member).PropertyType.GetTypeInfo().IsGenericType                              && ((PropertyInfo)member).PropertyType.GetGenericTypeDefinition().IsAssignableFrom(lookFor)                              && (!publiclyVisibleOnly || IsNonPrivateProperty((PropertyInfo)member))"  is complex.
Complex Conditional,Lucene.Net.Util,TestRuleSetupAndRestoreClassEnv,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestRuleSetupAndRestoreClassEnv.cs,Before,The conditional expression  ""Lucene3x".Equals(LuceneTestCase.TEST_CODEC' StringComparison.Ordinal) || ("random".Equals(LuceneTestCase.TEST_CODEC' StringComparison.Ordinal) &&                                                                  "random".Equals(LuceneTestCase.TEST_POSTINGSFORMAT' StringComparison.Ordinal) &&                                                                  "random".Equals(LuceneTestCase.TEST_DOCVALUESFORMAT' StringComparison.Ordinal) &&                                                                  randomVal == 3 &&                                                                  !ShouldAvoidCodec("Lucene3x"))"  is complex.
Complex Conditional,Lucene.Net.Util,TestRuleSetupAndRestoreClassEnv,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestRuleSetupAndRestoreClassEnv.cs,Before,The conditional expression  ""Lucene40".Equals(LuceneTestCase.TEST_CODEC' StringComparison.Ordinal) || ("random".Equals(LuceneTestCase.TEST_CODEC' StringComparison.Ordinal) &&                                                                      "random".Equals(LuceneTestCase.TEST_POSTINGSFORMAT' StringComparison.Ordinal) &&                                                                      randomVal == 0 &&                                                                      !ShouldAvoidCodec("Lucene40"))"  is complex.
Complex Conditional,Lucene.Net.Util,TestRuleSetupAndRestoreClassEnv,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestRuleSetupAndRestoreClassEnv.cs,Before,The conditional expression  ""Lucene41".Equals(LuceneTestCase.TEST_CODEC' StringComparison.Ordinal) || ("random".Equals(LuceneTestCase.TEST_CODEC' StringComparison.Ordinal) &&                                                                      "random".Equals(LuceneTestCase.TEST_POSTINGSFORMAT' StringComparison.Ordinal) &&                                                                      "random".Equals(LuceneTestCase.TEST_DOCVALUESFORMAT' StringComparison.Ordinal) &&                                                                      randomVal == 1 &&                                                                      !ShouldAvoidCodec("Lucene41"))"  is complex.
Complex Conditional,Lucene.Net.Util,TestRuleSetupAndRestoreClassEnv,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestRuleSetupAndRestoreClassEnv.cs,Before,The conditional expression  ""Lucene42".Equals(LuceneTestCase.TEST_CODEC' StringComparison.Ordinal) || ("random".Equals(LuceneTestCase.TEST_CODEC' StringComparison.Ordinal) &&                                                                      "random".Equals(LuceneTestCase.TEST_POSTINGSFORMAT' StringComparison.Ordinal) &&                                                                      "random".Equals(LuceneTestCase.TEST_DOCVALUESFORMAT' StringComparison.Ordinal) &&                                                                      randomVal == 2 &&                                                                      !ShouldAvoidCodec("Lucene42"))"  is complex.
Complex Conditional,Lucene.Net.Util,TestRuleSetupAndRestoreClassEnv,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestRuleSetupAndRestoreClassEnv.cs,Before,The conditional expression  ""Lucene45".Equals(LuceneTestCase.TEST_CODEC' StringComparison.Ordinal) || ("random".Equals(LuceneTestCase.TEST_CODEC' StringComparison.Ordinal) &&                                                                      "random".Equals(LuceneTestCase.TEST_POSTINGSFORMAT' StringComparison.Ordinal) &&                                                                      "random".Equals(LuceneTestCase.TEST_DOCVALUESFORMAT' StringComparison.Ordinal) &&                                                                      randomVal == 5 &&                                                                      !ShouldAvoidCodec("Lucene45"))"  is complex.
Complex Conditional,Lucene.Net.Util,TestRuleSetupAndRestoreClassEnv,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestRuleSetupAndRestoreClassEnv.cs,Before,The conditional expression  ""SimpleText".Equals(LuceneTestCase.TEST_CODEC' StringComparison.Ordinal)                   || ("random".Equals(LuceneTestCase.TEST_CODEC' StringComparison.Ordinal) && randomVal == 9 && LuceneTestCase.Rarely(random) && !ShouldAvoidCodec("SimpleText"))"  is complex.
Complex Conditional,Lucene.Net.Util,TestRuleSetupAndRestoreClassEnv,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestRuleSetupAndRestoreClassEnv.cs,Before,The conditional expression  ""CheapBastard".Equals(LuceneTestCase.TEST_CODEC' StringComparison.Ordinal)                   || ("random".Equals(LuceneTestCase.TEST_CODEC' StringComparison.Ordinal) && randomVal == 8 && !ShouldAvoidCodec("CheapBastard") && !ShouldAvoidCodec("Lucene41"))"  is complex.
Complex Conditional,Lucene.Net.Util,TestRuleSetupAndRestoreClassEnv,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestRuleSetupAndRestoreClassEnv.cs,Before,The conditional expression  ""Asserting".Equals(LuceneTestCase.TEST_CODEC' StringComparison.Ordinal)                   || ("random".Equals(LuceneTestCase.TEST_CODEC' StringComparison.Ordinal) && randomVal == 6 && !ShouldAvoidCodec("Asserting"))"  is complex.
Complex Conditional,Lucene.Net.Util,TestRuleSetupAndRestoreClassEnv,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestRuleSetupAndRestoreClassEnv.cs,Before,The conditional expression  ""Compressing".Equals(LuceneTestCase.TEST_CODEC' StringComparison.Ordinal)                   || ("random".Equals(LuceneTestCase.TEST_CODEC' StringComparison.Ordinal) && randomVal == 5 && !ShouldAvoidCodec("Compressing"))"  is complex.
Complex Conditional,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,CheckReader,The conditional expression  "fieldNormStatus.Error != null || termIndexStatus.Error != null || storedFieldStatus.Error != null || termVectorStatus.Error != null || docValuesStatus.Error != null"  is complex.
Virtual Method Call from Constructor,Lucene.Net.Codecs.Lucene3x,PreFlexTermsWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene3x\PreFlexRWFieldsWriter.cs,PreFlexTermsWriter,The constructor "PreFlexTermsWriter" calls a virtual method "InitializeInstanceFields".
Virtual Method Call from Constructor,Lucene.Net.Index,RandomTokenStream,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseTermVectorsFormatTestCase.cs,RandomTokenStream,The constructor "RandomTokenStream" calls a virtual method "RandomPayload".
Virtual Method Call from Constructor,Lucene.Net.Index,RandomTokenStream,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseTermVectorsFormatTestCase.cs,RandomTokenStream,The constructor "RandomTokenStream" calls a virtual method "RandomPayload".
Virtual Method Call from Constructor,Lucene.Net.Index,RandomDocument,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseTermVectorsFormatTestCase.cs,RandomDocument,The constructor "RandomDocument" calls a virtual method "FieldType".
Virtual Method Call from Constructor,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,LuceneTestCase,The constructor "LuceneTestCase" calls a virtual method "BeforeClass".
Empty Catch Block,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,CheckResetException,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,CheckResetException,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,CheckAnalysisConsistency,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,CheckAnalysisConsistency,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,CheckAnalysisConsistency,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Codecs.Asserting,AssertingDocValuesFormat,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Asserting\AssertingDocValuesFormat.cs,CheckIterator,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Codecs.Lucene3x,PreFlexRWStoredFieldsWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene3x\PreFlexRWStoredFieldsWriter.cs,Abort,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Codecs.Lucene3x,PreFlexRWTermVectorsWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene3x\PreFlexRWTermVectorsWriter.cs,Abort,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Codecs.Lucene3x,TermInfosWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene3x\TermInfosWriter.cs,TermInfosWriter,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Codecs.Lucene3x,TermInfosWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene3x\TermInfosWriter.cs,Initialize,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Index,BaseTermVectorsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseTermVectorsFormatTestCase.cs,AssertEquals,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Index,DocHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\DocHelper.cs,DocHelper,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Search,CheckHits,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Search\CheckHits.cs,VerifyExplanation,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Store,MockDirectoryWrapper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\MockDirectoryWrapper.cs,Crash,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Store,MockDirectoryWrapper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\MockDirectoryWrapper.cs,Dispose,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Store,SlowOpeningMockIndexInputWrapper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\SlowOpeningMockIndexInputWrapper.cs,SlowOpeningMockIndexInputWrapper,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,RandomRegex,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Util.Automaton,AutomatonTestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\Automaton\AutomatonTestUtil.cs,RandomRegexp,The method has an empty catch block.
Magic Number,Lucene.Net.Analysis,CheckClearAttributesAttribute,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,GetHashCode,The following statement contains a magic number: return 76137213 ^ clearCalled.GetHashCode();
Magic Number,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,AssertTokenStreamContents,The following statement contains a magic number: offsetAtt.SetOffset(14584724' 24683243);
Magic Number,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,AssertTokenStreamContents,The following statement contains a magic number: offsetAtt.SetOffset(14584724' 24683243);
Magic Number,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,AssertTokenStreamContents,The following statement contains a magic number: posIncrAtt.PositionIncrement = 45987657;
Magic Number,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,AssertTokenStreamContents,The following statement contains a magic number: posLengthAtt.PositionLength = 45987653;
Magic Number,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,AssertTokenStreamContents,The following statement contains a magic number: offsetAtt.SetOffset(14584724' 24683243);
Magic Number,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,AssertTokenStreamContents,The following statement contains a magic number: offsetAtt.SetOffset(14584724' 24683243);
Magic Number,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,AssertTokenStreamContents,The following statement contains a magic number: posIncrAtt.PositionIncrement = 45987657;
Magic Number,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,AssertTokenStreamContents,The following statement contains a magic number: posLengthAtt.PositionLength = 45987653;
Magic Number,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,CheckRandomData,The following statement contains a magic number: CheckRandomData(random' a' iterations' 20' false' true);
Magic Number,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,CheckRandomData,The following statement contains a magic number: CheckRandomData(random' a' iterations' 20' simple' true);
Magic Number,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,CheckRandomData,The following statement contains a magic number: bool codecOk = iterations * maxWordLength < 100000                  || !(postingsFormat.Equals("Memory"' StringComparison.Ordinal)                   || postingsFormat.Equals("SimpleText"' StringComparison.Ordinal));
Magic Number,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,CheckRandomData,The following statement contains a magic number: int numThreads = TestUtil.NextInt32(random' 2' 4);
Magic Number,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,CheckRandomData,The following statement contains a magic number: int numThreads = TestUtil.NextInt32(random' 2' 4);
Magic Number,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,CheckRandomData,The following statement contains a magic number: switch (random.Next(4))                  {                      case 0:                          ft.IndexOptions = IndexOptions.DOCS_ONLY;                          break;                        case 1:                          ft.IndexOptions = IndexOptions.DOCS_AND_FREQS;                          break;                        case 2:                          ft.IndexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;                          break;                        default:                          if (supportsOffsets && offsetsAreCorrect)                          {                              ft.IndexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;                          }                          else                          {                              ft.IndexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;                          }                          break;                  }
Magic Number,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,CheckRandomData,The following statement contains a magic number: switch (random.Next(4))                  {                      case 0:                          ft.IndexOptions = IndexOptions.DOCS_ONLY;                          break;                        case 1:                          ft.IndexOptions = IndexOptions.DOCS_AND_FREQS;                          break;                        case 2:                          ft.IndexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;                          break;                        default:                          if (supportsOffsets && offsetsAreCorrect)                          {                              ft.IndexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;                          }                          else                          {                              ft.IndexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;                          }                          break;                  }
Magic Number,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,CheckRandomData,The following statement contains a magic number: random.Next(10) == 7
Magic Number,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,CheckRandomData,The following statement contains a magic number: random.Next(10) == 7
Magic Number,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,CheckRandomData,The following statement contains a magic number: random.Next(7) == 0
Magic Number,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,CheckAnalysisConsistency,The following statement contains a magic number: int remainder = random.Next(10);
Magic Number,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,CheckAnalysisConsistency,The following statement contains a magic number: int evilness = random.Next(50);
Magic Number,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,CheckAnalysisConsistency,The following statement contains a magic number: evilness == 17
Magic Number,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,CheckAnalysisConsistency,The following statement contains a magic number: random.Next(30) == 7
Magic Number,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,CheckAnalysisConsistency,The following statement contains a magic number: random.Next(30) == 7
Magic Number,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,CheckAnalysisConsistency,The following statement contains a magic number: random.Next(30) == 7
Magic Number,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,CheckAnalysisConsistency,The following statement contains a magic number: random.Next(30) == 7
Magic Number,Lucene.Net.Analysis,BaseTokenStreamTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\BaseTokenStreamTestCase.cs,NewAttributeFactory,The following statement contains a magic number: switch (random.nextInt(2))              {                  case 0:                      return Token.TOKEN_ATTRIBUTE_FACTORY;                  case 1:                      return AttributeFactory.DEFAULT_ATTRIBUTE_FACTORY;                  default:                      throw new AssertionError("Please fix the Random.nextInt() call above");              }
Magic Number,Lucene.Net.Analysis,CollationTestBase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\CollationTestBase.cs,TestFarsiRangeQueryCollating,The following statement contains a magic number: ScoreDoc[] hits = searcher.Search(query' null' 1000).ScoreDocs;
Magic Number,Lucene.Net.Analysis,CollationTestBase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\CollationTestBase.cs,TestFarsiRangeQueryCollating,The following statement contains a magic number: hits = searcher.Search(query' null' 1000).ScoreDocs;
Magic Number,Lucene.Net.Analysis,CollationTestBase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\CollationTestBase.cs,TestFarsiTermRangeQuery,The following statement contains a magic number: ScoreDoc[] result = search.Search(csrq' null' 1000).ScoreDocs;
Magic Number,Lucene.Net.Analysis,CollationTestBase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\CollationTestBase.cs,TestFarsiTermRangeQuery,The following statement contains a magic number: result = search.Search(csrq' null' 1000).ScoreDocs;
Magic Number,Lucene.Net.Analysis,CollationTestBase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\CollationTestBase.cs,TestCollationKeySort,The following statement contains a magic number: doc.Add(new TextField("US"' usAnalyzer.GetTokenStream("US"' new StringReader(sortData[i][2]))));
Magic Number,Lucene.Net.Analysis,CollationTestBase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\CollationTestBase.cs,TestCollationKeySort,The following statement contains a magic number: sortData[i][2] != null
Magic Number,Lucene.Net.Analysis,CollationTestBase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\CollationTestBase.cs,TestCollationKeySort,The following statement contains a magic number: doc.Add(new TextField("France"' franceAnalyzer.GetTokenStream("France"' new StringReader(sortData[i][3]))));
Magic Number,Lucene.Net.Analysis,CollationTestBase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\CollationTestBase.cs,TestCollationKeySort,The following statement contains a magic number: sortData[i][3] != null
Magic Number,Lucene.Net.Analysis,CollationTestBase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\CollationTestBase.cs,TestCollationKeySort,The following statement contains a magic number: doc.Add(new TextField("Sweden"' swedenAnalyzer.GetTokenStream("Sweden"' new StringReader(sortData[i][4]))));
Magic Number,Lucene.Net.Analysis,CollationTestBase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\CollationTestBase.cs,TestCollationKeySort,The following statement contains a magic number: sortData[i][4] != null
Magic Number,Lucene.Net.Analysis,CollationTestBase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\CollationTestBase.cs,TestCollationKeySort,The following statement contains a magic number: doc.Add(new TextField("Denmark"' denmarkAnalyzer.GetTokenStream("Denmark"' new StringReader(sortData[i][5]))));
Magic Number,Lucene.Net.Analysis,CollationTestBase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\CollationTestBase.cs,TestCollationKeySort,The following statement contains a magic number: sortData[i][5] != null
Magic Number,Lucene.Net.Analysis,CollationTestBase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\CollationTestBase.cs,AssertMatches,The following statement contains a magic number: ScoreDoc[] result = searcher.Search(query' null' 1000' sort).ScoreDocs;
Magic Number,Lucene.Net.Analysis,CollationTestBase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\CollationTestBase.cs,AssertMatches,The following statement contains a magic number: StringBuilder buff = new StringBuilder(10);
Magic Number,Lucene.Net.Analysis,CollationTestBase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\CollationTestBase.cs,AssertThreadSafe,The following statement contains a magic number: int numTestPoints = 100;
Magic Number,Lucene.Net.Analysis,CollationTestBase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\CollationTestBase.cs,AssertThreadSafe,The following statement contains a magic number: int numThreads = TestUtil.NextInt32(Random' 3' 5);
Magic Number,Lucene.Net.Analysis,CollationTestBase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\CollationTestBase.cs,AssertThreadSafe,The following statement contains a magic number: int numThreads = TestUtil.NextInt32(Random' 3' 5);
Magic Number,Lucene.Net.Analysis,MockAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\MockAnalyzer.cs,MaybePayload,The following statement contains a magic number: switch (random.Next(3))                          {                              case 0: // no payloads                                  val = -1;                                  break;                                case 1: // variable length payload                                  val = int.MaxValue;                                  break;                                case 2: // fixed length payload                                  val = random.Next(12);                                  break;                          }
Magic Number,Lucene.Net.Analysis,MockAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\MockAnalyzer.cs,MaybePayload,The following statement contains a magic number: switch (random.Next(3))                          {                              case 0: // no payloads                                  val = -1;                                  break;                                case 1: // variable length payload                                  val = int.MaxValue;                                  break;                                case 2: // fixed length payload                                  val = random.Next(12);                                  break;                          }
Magic Number,Lucene.Net.Analysis,MockAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\MockAnalyzer.cs,MaybePayload,The following statement contains a magic number: switch (random.Next(3))                          {                              case 0: // no payloads                                  val = -1;                                  break;                                case 1: // variable length payload                                  val = int.MaxValue;                                  break;                                case 2: // fixed length payload                                  val = random.Next(12);                                  break;                          }
Magic Number,Lucene.Net.Analysis,MockCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\MockCharFilter.cs,MockCharFilter,The following statement contains a magic number: remainder < 0 || remainder >= 10
Magic Number,Lucene.Net.Analysis,MockCharFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\MockCharFilter.cs,Read,The following statement contains a magic number: (c % 10) != remainder || char.IsHighSurrogate((char)c) || char.IsLowSurrogate((char)c)
Magic Number,Lucene.Net.Analysis,MockGraphTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\MockGraphTokenFilter.cs,AfterPosition,The following statement contains a magic number: int posLength = TestUtil.NextInt32(random' 1' 5);
Magic Number,Lucene.Net.Analysis,MockGraphTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\MockGraphTokenFilter.cs,AfterPosition,The following statement contains a magic number: random.Next(7) == 5
Magic Number,Lucene.Net.Analysis,MockGraphTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\MockGraphTokenFilter.cs,AfterPosition,The following statement contains a magic number: random.Next(7) == 5
Magic Number,Lucene.Net.Analysis,MockHoleInjectingTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\MockHoleInjectingTokenFilter.cs,IncrementToken,The following statement contains a magic number: int holeSize = TestUtil.NextInt32(random' 1' 5);
Magic Number,Lucene.Net.Analysis,MockHoleInjectingTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\MockHoleInjectingTokenFilter.cs,IncrementToken,The following statement contains a magic number: posInc > 0 && maxPos <= nextPos && random.Next(5) == 3
Magic Number,Lucene.Net.Analysis,MockHoleInjectingTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\MockHoleInjectingTokenFilter.cs,IncrementToken,The following statement contains a magic number: posInc > 0 && maxPos <= nextPos && random.Next(5) == 3
Magic Number,Lucene.Net.Analysis,MockPayloadFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\MockPayloadAnalyzer.cs,IncrementToken,The following statement contains a magic number: pos == 0 || i % 2 == 1
Magic Number,Lucene.Net.Analysis,MockRandomLookaheadTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\MockRandomLookaheadTokenFilter.cs,AfterPosition,The following statement contains a magic number: !m_end && random.Next(4) == 2
Magic Number,Lucene.Net.Analysis,MockRandomLookaheadTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\MockRandomLookaheadTokenFilter.cs,AfterPosition,The following statement contains a magic number: !m_end && random.Next(4) == 2
Magic Number,Lucene.Net.Analysis,MockRandomLookaheadTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\MockRandomLookaheadTokenFilter.cs,IncrementToken,The following statement contains a magic number: random.Next(3) == 1
Magic Number,Lucene.Net.Analysis,MockTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\MockTokenizer.cs,ReadChar,The following statement contains a magic number: switch (random.Next(0' 10))              {                  case 0:                      {                          // read(char[])                          char[] c = new char[1];                          int ret = m_input.Read(c' 0' c.Length);                          return ret <= 0 ? -1 : c[0];                      }                  case 1:                      {                          // read(char[]' int' int)                          char[] c = new char[2];                          int ret = m_input.Read(c' 1' 1);                          return ret <= 0 ? -1 : c[1];                      }                  // LUCENENET NOTE: CharBuffer not supported                  //case 2:                  //    {                  //        // read(CharBuffer)                  //        char[] c = new char[1];                  //        CharBuffer cb = CharBuffer.Wrap(c);                  //        int ret = m_input.Read(cb);                  //        return ret < 0 ? ret : c[0];                  //    }                  default:                      // read()                      return m_input.Read();              }
Magic Number,Lucene.Net.Analysis,MockTokenizer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\MockTokenizer.cs,ReadChar,The following statement contains a magic number: switch (random.Next(0' 10))              {                  case 0:                      {                          // read(char[])                          char[] c = new char[1];                          int ret = m_input.Read(c' 0' c.Length);                          return ret <= 0 ? -1 : c[0];                      }                  case 1:                      {                          // read(char[]' int' int)                          char[] c = new char[2];                          int ret = m_input.Read(c' 1' 1);                          return ret <= 0 ? -1 : c[1];                      }                  // LUCENENET NOTE: CharBuffer not supported                  //case 2:                  //    {                  //        // read(CharBuffer)                  //        char[] c = new char[1];                  //        CharBuffer cb = CharBuffer.Wrap(c);                  //        int ret = m_input.Read(cb);                  //        return ret < 0 ? ret : c[0];                  //    }                  default:                      // read()                      return m_input.Read();              }
Magic Number,Lucene.Net.Analysis,TokenStreamToDot,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\TokenStreamToDot.cs,ToDot,The following statement contains a magic number: WriteNode(-2' null);
Magic Number,Lucene.Net.Analysis,TokenStreamToDot,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\TokenStreamToDot.cs,ToDot,The following statement contains a magic number: WriteArc(lastEndPos' -2' null' null);
Magic Number,Lucene.Net.TestFramework.Analysis,CrankyTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\CrankyTokenFilter.cs,Reset,The following statement contains a magic number: thingToDo = random.nextInt(100);
Magic Number,Lucene.Net.TestFramework.Analysis,CrankyTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\CrankyTokenFilter.cs,Reset,The following statement contains a magic number: thingToDo == 2 && random.nextBoolean()
Magic Number,Lucene.Net.TestFramework.Analysis,CrankyTokenFilter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\CrankyTokenFilter.cs,Dispose,The following statement contains a magic number: thingToDo == 3 && random.nextBoolean()
Magic Number,Lucene.Net.Codecs.Bloom,LowMemoryBloomFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Bloom\TestBloomFilteredLucene41Postings.cs,GetSetForField,The following statement contains a magic number: return FuzzySet.CreateSetBasedOnMaxMemory(1024);
Magic Number,Lucene.Net.Codecs.Compressing,CompressingCodec,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Compressing\CompressingCodec.cs,RandomInstance,The following statement contains a magic number: switch (random.Next(4))              {                  case 0:                      return new FastCompressingCodec(chunkSize' withSegmentSuffix);                    case 1:                      return new FastDecompressionCompressingCodec(chunkSize' withSegmentSuffix);                    case 2:                      return new HighCompressionCompressingCodec(chunkSize' withSegmentSuffix);                    case 3:                      return new DummyCompressingCodec(chunkSize' withSegmentSuffix);                    default:                      throw new InvalidOperationException();              }
Magic Number,Lucene.Net.Codecs.Compressing,CompressingCodec,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Compressing\CompressingCodec.cs,RandomInstance,The following statement contains a magic number: switch (random.Next(4))              {                  case 0:                      return new FastCompressingCodec(chunkSize' withSegmentSuffix);                    case 1:                      return new FastDecompressionCompressingCodec(chunkSize' withSegmentSuffix);                    case 2:                      return new HighCompressionCompressingCodec(chunkSize' withSegmentSuffix);                    case 3:                      return new DummyCompressingCodec(chunkSize' withSegmentSuffix);                    default:                      throw new InvalidOperationException();              }
Magic Number,Lucene.Net.Codecs.Compressing,CompressingCodec,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Compressing\CompressingCodec.cs,RandomInstance,The following statement contains a magic number: switch (random.Next(4))              {                  case 0:                      return new FastCompressingCodec(chunkSize' withSegmentSuffix);                    case 1:                      return new FastDecompressionCompressingCodec(chunkSize' withSegmentSuffix);                    case 2:                      return new HighCompressionCompressingCodec(chunkSize' withSegmentSuffix);                    case 3:                      return new DummyCompressingCodec(chunkSize' withSegmentSuffix);                    default:                      throw new InvalidOperationException();              }
Magic Number,Lucene.Net.Codecs.Compressing,CompressingCodec,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Compressing\CompressingCodec.cs,RandomInstance,The following statement contains a magic number: return RandomInstance(random' RandomInts.RandomInt32Between(random' 1' 500)' false);
Magic Number,Lucene.Net.Codecs.Compressing,CompressingCodec,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Compressing\CompressingCodec.cs,RandomInstance,The following statement contains a magic number: return RandomInstance(random' RandomInts.RandomInt32Between(random' 1' 500)' withSegmentSuffix);
Magic Number,Lucene.Net.Codecs.Lucene3x,PreFlexRWSkipListWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene3x\PreFlexRWSkipListWriter.cs,WriteSkipData,The following statement contains a magic number: skipBuffer.WriteVInt32(delta * 2);
Magic Number,Lucene.Net.Codecs.Lucene3x,PreFlexRWStoredFieldsWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene3x\PreFlexRWStoredFieldsWriter.cs,Finish,The following statement contains a magic number: 4 + ((long)numDocs) * 8 != indexStream.GetFilePointer()
Magic Number,Lucene.Net.Codecs.Lucene3x,PreFlexRWStoredFieldsWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene3x\PreFlexRWStoredFieldsWriter.cs,Finish,The following statement contains a magic number: 4 + ((long)numDocs) * 8 != indexStream.GetFilePointer()
Magic Number,Lucene.Net.Codecs.Lucene3x,PreFlexRWTermVectorsWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene3x\PreFlexRWTermVectorsWriter.cs,Finish,The following statement contains a magic number: 4 + ((long)numDocs) * 16 != tvx.GetFilePointer()
Magic Number,Lucene.Net.Codecs.Lucene3x,PreFlexRWTermVectorsWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene3x\PreFlexRWTermVectorsWriter.cs,Finish,The following statement contains a magic number: 4 + ((long)numDocs) * 16 != tvx.GetFilePointer()
Magic Number,Lucene.Net.Codecs.Lucene3x,TermInfosWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene3x\TermInfosWriter.cs,InitUTF16Results,The following statement contains a magic number: utf16Result1 = new CharsRef(10);
Magic Number,Lucene.Net.Codecs.Lucene3x,TermInfosWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene3x\TermInfosWriter.cs,InitUTF16Results,The following statement contains a magic number: utf16Result2 = new CharsRef(10);
Magic Number,Lucene.Net.Codecs.Lucene3x,TermInfosWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene3x\TermInfosWriter.cs,Dispose,The following statement contains a magic number: output.Seek(4);
Magic Number,Lucene.Net.Codecs.Lucene40,Lucene40DocValuesWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene40\Lucene40DocValuesWriter.cs,AddNumericField,The following statement contains a magic number: minValue >= sbyte.MinValue && maxValue <= sbyte.MaxValue && PackedInt32s.BitsRequired(maxValue - minValue) > 4
Magic Number,Lucene.Net.Codecs.Lucene40,Lucene40DocValuesWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene40\Lucene40DocValuesWriter.cs,AddShortsField,The following statement contains a magic number: output.WriteInt32(2);
Magic Number,Lucene.Net.Codecs.Lucene40,Lucene40DocValuesWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene40\Lucene40DocValuesWriter.cs,AddIntsField,The following statement contains a magic number: output.WriteInt32(4);
Magic Number,Lucene.Net.Codecs.Lucene40,Lucene40DocValuesWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene40\Lucene40DocValuesWriter.cs,AddBinaryField,The following statement contains a magic number: uniqueValues.Count > 256
Magic Number,Lucene.Net.Codecs.Lucene40,Lucene40DocValuesWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene40\Lucene40DocValuesWriter.cs,AddBinaryField,The following statement contains a magic number: bool dedup = uniqueValues != null && uniqueValues.Count * 2 < maxDoc;
Magic Number,Lucene.Net.Codecs.Lucene40,Lucene40DocValuesWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene40\Lucene40DocValuesWriter.cs,WriteVShort,The following statement contains a magic number: i < 128
Magic Number,Lucene.Net.Codecs.Lucene40,Lucene40FieldInfosWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene40\Lucene40FieldInfosWriter.cs,Write,The following statement contains a magic number: var val = (byte)(0xff & ((nrm << 4) | (byte)dv));
Magic Number,Lucene.Net.Codecs.Lucene42,Lucene42DocValuesConsumer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene42\Lucene42DocValuesConsumer.cs,AddNumericField,The following statement contains a magic number: v < long.MinValue / 2 || v > long.MaxValue / 2
Magic Number,Lucene.Net.Codecs.Lucene42,Lucene42DocValuesConsumer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene42\Lucene42DocValuesConsumer.cs,AddNumericField,The following statement contains a magic number: v < long.MinValue / 2 || v > long.MaxValue / 2
Magic Number,Lucene.Net.Codecs.Lucene42,Lucene42DocValuesConsumer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene42\Lucene42DocValuesConsumer.cs,AddNumericField,The following statement contains a magic number: uniqueValues.Count > 256
Magic Number,Lucene.Net.Codecs.Lucene42,Lucene42DocValuesConsumer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene42\Lucene42DocValuesConsumer.cs,AddNumericField,The following statement contains a magic number: formatAndBits.BitsPerValue == 8 && minValue >= sbyte.MinValue && maxValue <= sbyte.MaxValue
Magic Number,Lucene.Net.Codecs.Lucene42,SortedSetIterator,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene42\Lucene42DocValuesConsumer.cs,MoveNext,The following statement contains a magic number: int maxSize = count * 9;
Magic Number,Lucene.Net.Codecs.Lucene42,Lucene42FieldInfosWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\Lucene42\Lucene42FieldInfosWriter.cs,Write,The following statement contains a magic number: var val = (byte)(0xff & ((nrm << 4) | (byte)dv));
Magic Number,Lucene.Net.Codecs.MockIntBlock,BlockReaderAnonymousHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\MockIntBlock\MockFixedIntBlockPostingsFormat.cs,ReadBlock,The following statement contains a magic number: int count = buffer[0] <= 3 ? baseBlockSize - 1 : 2 * baseBlockSize - 1;
Magic Number,Lucene.Net.Codecs.MockIntBlock,BlockReaderAnonymousHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\MockIntBlock\MockFixedIntBlockPostingsFormat.cs,ReadBlock,The following statement contains a magic number: int count = buffer[0] <= 3 ? baseBlockSize - 1 : 2 * baseBlockSize - 1;
Magic Number,Lucene.Net.Codecs.MockIntBlock,VariableInt32BlockIndexOutputAnonymousHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\MockIntBlock\MockVariableIntBlockPostingsFormat.cs,VariableInt32BlockIndexOutputAnonymousHelper,The following statement contains a magic number: this.buffer = new int[2 + 2 * baseBlockSize];
Magic Number,Lucene.Net.Codecs.MockIntBlock,VariableInt32BlockIndexOutputAnonymousHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\MockIntBlock\MockVariableIntBlockPostingsFormat.cs,VariableInt32BlockIndexOutputAnonymousHelper,The following statement contains a magic number: this.buffer = new int[2 + 2 * baseBlockSize];
Magic Number,Lucene.Net.Codecs.MockIntBlock,VariableInt32BlockIndexOutputAnonymousHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\MockIntBlock\MockVariableIntBlockPostingsFormat.cs,Add,The following statement contains a magic number: int flushAt = buffer[0] <= 3 ? baseBlockSize : 2 * baseBlockSize;
Magic Number,Lucene.Net.Codecs.MockIntBlock,VariableInt32BlockIndexOutputAnonymousHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\MockIntBlock\MockVariableIntBlockPostingsFormat.cs,Add,The following statement contains a magic number: int flushAt = buffer[0] <= 3 ? baseBlockSize : 2 * baseBlockSize;
Magic Number,Lucene.Net.Codecs.MockRandom,MockRandomPostingsFormat,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\MockRandom\MockRandomPostingsFormat.cs,FieldsConsumer,The following statement contains a magic number: minSkipInterval = 3;
Magic Number,Lucene.Net.Codecs.MockRandom,MockRandomPostingsFormat,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\MockRandom\MockRandomPostingsFormat.cs,FieldsConsumer,The following statement contains a magic number: state.SegmentInfo.DocCount > 1000000
Magic Number,Lucene.Net.Codecs.MockRandom,MockRandomPostingsFormat,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\MockRandom\MockRandomPostingsFormat.cs,FieldsConsumer,The following statement contains a magic number: int skipInterval = TestUtil.NextInt32(seedRandom' minSkipInterval' 10);
Magic Number,Lucene.Net.Codecs.MockRandom,MockRandomPostingsFormat,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\MockRandom\MockRandomPostingsFormat.cs,FieldsConsumer,The following statement contains a magic number: int totTFCutoff = TestUtil.NextInt32(random' 1' 20);
Magic Number,Lucene.Net.Codecs.MockRandom,MockRandomPostingsFormat,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\MockRandom\MockRandomPostingsFormat.cs,FieldsConsumer,The following statement contains a magic number: int t1 = random.nextInt(4);
Magic Number,Lucene.Net.Codecs.MockRandom,MockRandomPostingsFormat,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\MockRandom\MockRandomPostingsFormat.cs,FieldsProducer,The following statement contains a magic number: int readBufferSize = TestUtil.NextInt32(random' 1' 4096);
Magic Number,Lucene.Net.Codecs.MockRandom,MockRandomPostingsFormat,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\MockRandom\MockRandomPostingsFormat.cs,FieldsProducer,The following statement contains a magic number: int totTFCutoff = TestUtil.NextInt32(random' 1' 20);
Magic Number,Lucene.Net.Codecs.MockRandom,MockRandomPostingsFormat,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\MockRandom\MockRandomPostingsFormat.cs,FieldsProducer,The following statement contains a magic number: int t1 = random.nextInt(4);
Magic Number,Lucene.Net.Codecs.MockRandom,MockInt32StreamFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\MockRandom\MockRandomPostingsFormat.cs,MockInt32StreamFactory,The following statement contains a magic number: int blockSize = TestUtil.NextInt32(random' 1' 2000);
Magic Number,Lucene.Net.Codecs.MockRandom,MockInt32StreamFactory,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\MockRandom\MockRandomPostingsFormat.cs,MockInt32StreamFactory,The following statement contains a magic number: int baseBlockSize = TestUtil.NextInt32(random' 1' 127);
Magic Number,Lucene.Net.Codecs.MockRandom,IndexTermSelectorAnonymousHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\MockRandom\MockRandomPostingsFormat.cs,IsIndexTerm,The following statement contains a magic number: return rand.Next(gap) == gap / 2;
Magic Number,Lucene.Net.Codecs.NestedPulsing,NestedPulsingPostingsFormat,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Codecs\NestedPulsing\NestedPulsingPostingsFormat.cs,FieldsConsumer,The following statement contains a magic number: pulsingWriterInner = new PulsingPostingsWriter(state' 2' docsWriter);
Magic Number,Lucene.Net.Index,AlcoholicMergePolicy,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\AlcoholicMergePolicy.cs,AlcoholicMergePolicy,The following statement contains a magic number: m_maxMergeSize = TestUtil.NextInt32(random' 1024 * 1024' int.MaxValue);
Magic Number,Lucene.Net.Index,AlcoholicMergePolicy,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\AlcoholicMergePolicy.cs,AlcoholicMergePolicy,The following statement contains a magic number: m_maxMergeSize = TestUtil.NextInt32(random' 1024 * 1024' int.MaxValue);
Magic Number,Lucene.Net.Index,AlcoholicMergePolicy,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\AlcoholicMergePolicy.cs,Size,The following statement contains a magic number: hourOfDay < 6 || hourOfDay > 20 || random.Next(23) == 5
Magic Number,Lucene.Net.Index,AlcoholicMergePolicy,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\AlcoholicMergePolicy.cs,Size,The following statement contains a magic number: hourOfDay < 6 || hourOfDay > 20 || random.Next(23) == 5
Magic Number,Lucene.Net.Index,AlcoholicMergePolicy,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\AlcoholicMergePolicy.cs,Size,The following statement contains a magic number: hourOfDay < 6 || hourOfDay > 20 || random.Next(23) == 5
Magic Number,Lucene.Net.Index,AlcoholicMergePolicy,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\AlcoholicMergePolicy.cs,Size,The following statement contains a magic number: hourOfDay < 6 || hourOfDay > 20 || random.Next(23) == 5
Magic Number,Lucene.Net.Index,AssertingSortedSetDocValues,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\AssertingAtomicReader.cs,SetDocument,The following statement contains a magic number: lastOrd = -2;
Magic Number,Lucene.Net.Index,BaseCompressingDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseCompressingDocValuesFormatTestCase.cs,TestUniqueValuesCompression,The following statement contains a magic number: int uniqueValueCount = TestUtil.NextInt32(Random' 1' 256);
Magic Number,Lucene.Net.Index,BaseCompressingDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseCompressingDocValuesFormatTestCase.cs,TestUniqueValuesCompression,The following statement contains a magic number: Assert.IsTrue(size2 < size1 + 8 * 20);
Magic Number,Lucene.Net.Index,BaseCompressingDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseCompressingDocValuesFormatTestCase.cs,TestUniqueValuesCompression,The following statement contains a magic number: Assert.IsTrue(size2 < size1 + 8 * 20);
Magic Number,Lucene.Net.Index,BaseCompressingDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseCompressingDocValuesFormatTestCase.cs,TestDateCompression,The following statement contains a magic number: const long @base = 13;
Magic Number,Lucene.Net.Index,BaseCompressingDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseCompressingDocValuesFormatTestCase.cs,TestDateCompression,The following statement contains a magic number: long day = 1000L * 60 * 60 * 24;
Magic Number,Lucene.Net.Index,BaseCompressingDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseCompressingDocValuesFormatTestCase.cs,TestDateCompression,The following statement contains a magic number: long day = 1000L * 60 * 60 * 24;
Magic Number,Lucene.Net.Index,BaseCompressingDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseCompressingDocValuesFormatTestCase.cs,TestDateCompression,The following statement contains a magic number: long day = 1000L * 60 * 60 * 24;
Magic Number,Lucene.Net.Index,BaseCompressingDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseCompressingDocValuesFormatTestCase.cs,TestDateCompression,The following statement contains a magic number: long day = 1000L * 60 * 60 * 24;
Magic Number,Lucene.Net.Index,BaseCompressingDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseCompressingDocValuesFormatTestCase.cs,TestDateCompression,The following statement contains a magic number: dvf.SetInt64Value(@base + Random.Next(1000) * day);
Magic Number,Lucene.Net.Index,BaseCompressingDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseCompressingDocValuesFormatTestCase.cs,TestDateCompression,The following statement contains a magic number: dvf.SetInt64Value(@base + Random.Next(1000) * day);
Magic Number,Lucene.Net.Index,BaseCompressingDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseCompressingDocValuesFormatTestCase.cs,TestDateCompression,The following statement contains a magic number: Assert.IsTrue(size2 < size1 + (PackedInt32s.BitsRequired(day) * 50) / 8);
Magic Number,Lucene.Net.Index,BaseCompressingDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseCompressingDocValuesFormatTestCase.cs,TestDateCompression,The following statement contains a magic number: Assert.IsTrue(size2 < size1 + (PackedInt32s.BitsRequired(day) * 50) / 8);
Magic Number,Lucene.Net.Index,BaseCompressingDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseCompressingDocValuesFormatTestCase.cs,TestSingleBigValueCompression,The following statement contains a magic number: dvf.SetInt64Value(i & 1023);
Magic Number,Lucene.Net.Index,BaseCompressingDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseCompressingDocValuesFormatTestCase.cs,TestSingleBigValueCompression,The following statement contains a magic number: Assert.IsTrue(size2 < size1 + (20000 * (63 - 10)) / 8);
Magic Number,Lucene.Net.Index,BaseCompressingDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseCompressingDocValuesFormatTestCase.cs,TestSingleBigValueCompression,The following statement contains a magic number: Assert.IsTrue(size2 < size1 + (20000 * (63 - 10)) / 8);
Magic Number,Lucene.Net.Index,BaseCompressingDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseCompressingDocValuesFormatTestCase.cs,TestSingleBigValueCompression,The following statement contains a magic number: Assert.IsTrue(size2 < size1 + (20000 * (63 - 10)) / 8);
Magic Number,Lucene.Net.Index,BaseCompressingDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseCompressingDocValuesFormatTestCase.cs,TestSingleBigValueCompression,The following statement contains a magic number: Assert.IsTrue(size2 < size1 + (20000 * (63 - 10)) / 8);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,AddRandomFields,The following statement contains a magic number: doc.Add(new NumericDocValuesField("ndv"' Random.Next(1 << 12)));
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,AddRandomFields,The following statement contains a magic number: doc.Add(new SortedDocValuesField("sdv"' new BytesRef(TestUtil.RandomSimpleString(Random' 2))));
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,AddRandomFields,The following statement contains a magic number: int numValues = Random.Next(5);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,AddRandomFields,The following statement contains a magic number: doc.Add(new SortedSetDocValuesField("ssdv"' new BytesRef(TestUtil.RandomSimpleString(Random' 2))));
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestOneNumber,The following statement contains a magic number: doc.Add(new NumericDocValuesField("dv"' 5));
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestOneNumber,The following statement contains a magic number: Assert.AreEqual(5L' dv.Get(hits.ScoreDocs[i].Doc));
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestOneSingle,The following statement contains a magic number: doc.Add(new SingleDocValuesField("dv"' 5.7f));
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestOneSingle,The following statement contains a magic number: Assert.AreEqual((long)Number.SingleToInt32Bits(5.7f)' dv.Get(hits.ScoreDocs[i].Doc));
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestTwoNumbers,The following statement contains a magic number: doc.Add(new NumericDocValuesField("dv1"' 5));
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestTwoNumbers,The following statement contains a magic number: doc.Add(new NumericDocValuesField("dv2"' 17));
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestTwoNumbers,The following statement contains a magic number: Assert.AreEqual(5L' dv.Get(hits.ScoreDocs[i].Doc));
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestTwoNumbers,The following statement contains a magic number: Assert.AreEqual(17L' dv.Get(hits.ScoreDocs[i].Doc));
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestTwoFieldsMixed,The following statement contains a magic number: doc.Add(new NumericDocValuesField("dv1"' 5));
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestTwoFieldsMixed,The following statement contains a magic number: Assert.AreEqual(5L' dv.Get(hits.ScoreDocs[i].Doc));
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestThreeFieldsMixed,The following statement contains a magic number: doc.Add(new NumericDocValuesField("dv2"' 5));
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestThreeFieldsMixed,The following statement contains a magic number: Assert.AreEqual(5L' dv2.Get(hits.ScoreDocs[i].Doc));
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestThreeFieldsMixed2,The following statement contains a magic number: doc.Add(new NumericDocValuesField("dv3"' 5));
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestThreeFieldsMixed2,The following statement contains a magic number: Assert.AreEqual(5L' dv2.Get(hits.ScoreDocs[i].Doc));
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestTwoDocumentsNumeric,The following statement contains a magic number: doc.Add(new NumericDocValuesField("dv"' 2));
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestTwoDocumentsNumeric,The following statement contains a magic number: Assert.AreEqual(2L' dv.Get(1));
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestTwoDocumentsMerged,The following statement contains a magic number: doc.Add(new NumericDocValuesField("dv"' -10));
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestTwoDocumentsMerged,The following statement contains a magic number: doc.Add(new NumericDocValuesField("dv"' 99));
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestTwoDocumentsMerged,The following statement contains a magic number: expected = -10;
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestTwoDocumentsMerged,The following statement contains a magic number: i < 2
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestBigNumericRange2,The following statement contains a magic number: doc.Add(new NumericDocValuesField("dv"' -8841491950446638677L));
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestBigNumericRange2,The following statement contains a magic number: doc.Add(new NumericDocValuesField("dv"' 9062230939892376225L));
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestBigNumericRange2,The following statement contains a magic number: Assert.AreEqual(-8841491950446638677L' dv.Get(0));
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestBigNumericRange2,The following statement contains a magic number: Assert.AreEqual(9062230939892376225L' dv.Get(1));
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestBytesTwoDocumentsMerged,The following statement contains a magic number: i < 2
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestSortedBytesThreeDocuments,The following statement contains a magic number: Assert.AreEqual(2' dv.ValueCount);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestSortedBytesThreeDocuments,The following statement contains a magic number: Assert.AreEqual(0' dv.GetOrd(2));
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestSortedBytesTwoDocumentsMerged,The following statement contains a magic number: Assert.AreEqual(2' dv.ValueCount);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestSortedBytesTwoDocumentsMerged,The following statement contains a magic number: i < 2
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestSortedTermsEnum,The following statement contains a magic number: Assert.AreEqual(3' dv.ValueCount);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestSortedTermsEnum,The following statement contains a magic number: Assert.AreEqual(2L' termsEnum.Ord);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestSortedTermsEnum,The following statement contains a magic number: Assert.AreEqual(2L' termsEnum.Ord);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestSortedTermsEnum,The following statement contains a magic number: termsEnum.SeekExact(2);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestSortedTermsEnum,The following statement contains a magic number: Assert.AreEqual(2L' termsEnum.Ord);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestVeryLargeButLegalBytes,The following statement contains a magic number: var bytes = new byte[32766];
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestVeryLargeButLegalSortedBytes,The following statement contains a magic number: var bytes = new byte[32766];
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestCodecUsesOwnBytes,The following statement contains a magic number: var mybytes = new byte[20];
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestCodecUsesOwnSortedBytes,The following statement contains a magic number: var mybytes = new byte[20];
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestDocValuesSimple,The following statement contains a magic number: i < 5
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestDocValuesSimple,The following statement contains a magic number: TopDocs search = searcher.Search(query' 10);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestDocValuesSimple,The following statement contains a magic number: Assert.AreEqual(5' search.TotalHits);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestRandomSortedBytes,The following statement contains a magic number: int numDocs = AtLeast(100);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestRandomSortedBytes,The following statement contains a magic number: int maxLength = TestUtil.NextInt32(Random' 1' 50);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestRandomSortedBytes,The following statement contains a magic number: int numDocsNoValue = AtLeast(10);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,DoTestNumericsVsStoredFields,The following statement contains a magic number: int numDocs = AtLeast(300);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,DoTestNumericsVsStoredFields,The following statement contains a magic number: Debug.Assert(numDocs > 256);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,DoTestNumericsVsStoredFields,The following statement contains a magic number: Random.Next(31) == 0
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,DoTestNumericsVsStoredFields,The following statement contains a magic number: int numDeletions = Random.Next(numDocs / 10);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,DoTestNumericsVsStoredFields,The following statement contains a magic number: writer.ForceMerge(numDocs / 256);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,DoTestMissingVsFieldCache,The following statement contains a magic number: int numDocs = AtLeast(300);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,DoTestMissingVsFieldCache,The following statement contains a magic number: Debug.Assert(numDocs > 256);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,DoTestMissingVsFieldCache,The following statement contains a magic number: Random.Next(4) > 0
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,DoTestMissingVsFieldCache,The following statement contains a magic number: Random.Next(31) == 0
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,DoTestMissingVsFieldCache,The following statement contains a magic number: int numDeletions = Random.Next(numDocs / 10);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,DoTestMissingVsFieldCache,The following statement contains a magic number: writer.ForceMerge(numDocs / 256);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,DoTestBinaryVsStoredFields,The following statement contains a magic number: int numDocs = AtLeast(300);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,DoTestBinaryVsStoredFields,The following statement contains a magic number: Random.Next(31) == 0
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,DoTestBinaryVsStoredFields,The following statement contains a magic number: int numDeletions = Random.Next(numDocs / 10);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestBinaryFixedLengthVsStoredFields,The following statement contains a magic number: int fixedLength = TestUtil.NextInt32(Random' 0' 10);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestBinaryVariableLengthVsStoredFields,The following statement contains a magic number: DoTestBinaryVsStoredFields(0' 10);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,DoTestSortedVsStoredFields,The following statement contains a magic number: int numDocs = AtLeast(300);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,DoTestSortedVsStoredFields,The following statement contains a magic number: Random.Next(31) == 0
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,DoTestSortedVsStoredFields,The following statement contains a magic number: int numDeletions = Random.Next(numDocs / 10);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,DoTestSortedVsFieldCache,The following statement contains a magic number: int numDocs = AtLeast(300);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,DoTestSortedVsFieldCache,The following statement contains a magic number: Random.Next(31) == 0
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,DoTestSortedVsFieldCache,The following statement contains a magic number: int numDeletions = Random.Next(numDocs / 10);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestSortedFixedLengthVsStoredFields,The following statement contains a magic number: int fixedLength = TestUtil.NextInt32(Random' 1' 10);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestSortedFixedLengthVsFieldCache,The following statement contains a magic number: int fixedLength = TestUtil.NextInt32(Random' 1' 10);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestSortedVariableLengthVsFieldCache,The following statement contains a magic number: DoTestSortedVsFieldCache(1' 10);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestSortedVariableLengthVsStoredFields,The following statement contains a magic number: DoTestSortedVsStoredFields(1' 10);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestSortedSetTwoDocumentsMerged,The following statement contains a magic number: Assert.AreEqual(2L' dv.ValueCount);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestSortedSetThreeValuesTwoDocs,The following statement contains a magic number: Assert.AreEqual(3L' dv.ValueCount);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestSortedSetThreeValuesTwoDocs,The following statement contains a magic number: Assert.AreEqual(2L' dv.NextOrd());
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestSortedSetThreeValuesTwoDocs,The following statement contains a magic number: dv.LookupOrd(2' bytes);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestSortedSetTermsEnum,The following statement contains a magic number: Assert.AreEqual(3L' dv.ValueCount);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestSortedSetTermsEnum,The following statement contains a magic number: Assert.AreEqual(2L' termsEnum.Ord);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestSortedSetTermsEnum,The following statement contains a magic number: Assert.AreEqual(2L' termsEnum.Ord);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestSortedSetTermsEnum,The following statement contains a magic number: termsEnum.SeekExact(2);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestSortedSetTermsEnum,The following statement contains a magic number: Assert.AreEqual(2L' termsEnum.Ord);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,DoTestSortedSetVsStoredFields,The following statement contains a magic number: int numDocs = AtLeast(300);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,DoTestSortedSetVsStoredFields,The following statement contains a magic number: Random.Next(31) == 0
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,DoTestSortedSetVsStoredFields,The following statement contains a magic number: int numDeletions = Random.Next(numDocs / 10);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestSortedSetFixedLengthVsStoredFields,The following statement contains a magic number: int fixedLength = TestUtil.NextInt32(Random' 1' 10);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestSortedSetFixedLengthVsStoredFields,The following statement contains a magic number: DoTestSortedSetVsStoredFields(fixedLength' fixedLength' 16);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestSortedSetVariableLengthVsStoredFields,The following statement contains a magic number: DoTestSortedSetVsStoredFields(1' 10' 16);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestSortedSetVariableLengthVsStoredFields,The following statement contains a magic number: DoTestSortedSetVsStoredFields(1' 10' 16);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestSortedSetFixedLengthSingleValuedVsStoredFields,The following statement contains a magic number: int fixedLength = TestUtil.NextInt32(Random' 1' 10);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestSortedSetVariableLengthSingleValuedVsStoredFields,The following statement contains a magic number: DoTestSortedSetVsStoredFields(1' 10' 1);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,DoTestSortedSetVsUninvertedField,The following statement contains a magic number: int numDocs = AtLeast(300);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,DoTestSortedSetVsUninvertedField,The following statement contains a magic number: int numValues = Random.Next(17);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,DoTestSortedSetVsUninvertedField,The following statement contains a magic number: Random.Next(31) == 0
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,DoTestSortedSetVsUninvertedField,The following statement contains a magic number: int numDeletions = Random.Next(numDocs / 10);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestSortedSetFixedLengthVsUninvertedField,The following statement contains a magic number: int fixedLength = TestUtil.NextInt32(Random' 1' 10);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestSortedSetVariableLengthVsUninvertedField,The following statement contains a magic number: DoTestSortedSetVsUninvertedField(1' 10);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestGCDCompression,The following statement contains a magic number: long min = -(((long)Random.Next(1 << 30)) << 32);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestGCDCompression,The following statement contains a magic number: long min = -(((long)Random.Next(1 << 30)) << 32);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestThreeNumbersOneMissingWithMerging,The following statement contains a magic number: doc.Add(new NumericDocValuesField("dv1"' 5));
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestThreeNumbersOneMissingWithMerging,The following statement contains a magic number: Assert.AreEqual(5L' dv.Get(2));
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestThreeNumbersOneMissingWithMerging,The following statement contains a magic number: Assert.AreEqual(5L' dv.Get(2));
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestThreeNumbersOneMissingWithMerging,The following statement contains a magic number: Assert.IsTrue(docsWithField.Get(2));
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestThreeBytesOneMissingWithMerging,The following statement contains a magic number: dv.Get(2' @ref);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestThreeBytesOneMissingWithMerging,The following statement contains a magic number: Assert.IsTrue(docsWithField.Get(2));
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestHugeBinaryValues,The following statement contains a magic number: numDocs = TestUtil.NextInt32(Random' 10' 20);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestHugeBinaryValues,The following statement contains a magic number: numDocs = TestUtil.NextInt32(Random' 10' 20);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestHugeBinaryValues,The following statement contains a magic number: fixedLength = TestUtil.NextInt32(Random' 65537' 256 * 1024);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestHugeBinaryValues,The following statement contains a magic number: fixedLength = TestUtil.NextInt32(Random' 65537' 256 * 1024);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestHugeBinaryValues,The following statement contains a magic number: fixedLength = TestUtil.NextInt32(Random' 65537' 256 * 1024);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestHugeBinaryValues,The following statement contains a magic number: totalBytes > 5 * 1024 * 1024
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestHugeBinaryValues,The following statement contains a magic number: totalBytes > 5 * 1024 * 1024
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestHugeBinaryValues,The following statement contains a magic number: totalBytes > 5 * 1024 * 1024
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestHugeBinaryValueLimit,The following statement contains a magic number: numDocs = TestUtil.NextInt32(Random' 10' 20);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestHugeBinaryValueLimit,The following statement contains a magic number: numDocs = TestUtil.NextInt32(Random' 10' 20);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestHugeBinaryValueLimit,The following statement contains a magic number: totalBytes > 5 * 1024 * 1024
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestHugeBinaryValueLimit,The following statement contains a magic number: totalBytes > 5 * 1024 * 1024
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestHugeBinaryValueLimit,The following statement contains a magic number: totalBytes > 5 * 1024 * 1024
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestThreads,The following statement contains a magic number: int numDocs = AtLeast(300);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestThreads,The following statement contains a magic number: int length = TestUtil.NextInt32(Random' 0' 8);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestThreads,The following statement contains a magic number: Random.Next(31) == 0
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestThreads,The following statement contains a magic number: int numDeletions = Random.Next(numDocs / 10);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestThreads,The following statement contains a magic number: int numThreads = TestUtil.NextInt32(Random' 2' 7);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestThreads,The following statement contains a magic number: int numThreads = TestUtil.NextInt32(Random' 2' 7);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestThreads2,The following statement contains a magic number: int numDocs = AtLeast(300);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestThreads2,The following statement contains a magic number: int length = TestUtil.NextInt32(Random' 0' 8);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestThreads2,The following statement contains a magic number: Random.Next(4) > 0
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestThreads2,The following statement contains a magic number: Random.Next(4) > 0
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestThreads2,The following statement contains a magic number: int numSortedSetFields = Random.Next(3);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestThreads2,The following statement contains a magic number: Random.Next(31) == 0
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestThreads2,The following statement contains a magic number: int numDeletions = Random.Next(numDocs / 10);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestThreads2,The following statement contains a magic number: int numThreads = TestUtil.NextInt32(Random' 2' 7);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestThreads2,The following statement contains a magic number: int numThreads = TestUtil.NextInt32(Random' 2' 7);
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestEmptyBinaryValueOnPageSizes,The following statement contains a magic number: i > 14 && CodecAcceptsHugeBinaryValues("field") == false
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestEmptyBinaryValueOnPageSizes,The following statement contains a magic number: j < 4
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestEmptyBinaryValueOnPageSizes,The following statement contains a magic number: j < 5
Magic Number,Lucene.Net.Index,BaseDocValuesFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,TestEmptyBinaryValueOnPageSizes,The following statement contains a magic number: i < 20
Magic Number,Lucene.Net.Index,Int64ProducerAnonymousInnerClassHelper3,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,Next,The following statement contains a magic number: return min + mul * Random.Next(1 << 20);
Magic Number,Lucene.Net.Index,ThreadAnonymousInnerClassHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,Run,The following statement contains a magic number: i < AtLeast(100)
Magic Number,Lucene.Net.Index,ThreadAnonymousInnerClassHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,Run,The following statement contains a magic number: Thread.Sleep(TestUtil.NextInt32(Random' 50' 500));
Magic Number,Lucene.Net.Index,ThreadAnonymousInnerClassHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,Run,The following statement contains a magic number: Thread.Sleep(TestUtil.NextInt32(Random' 50' 500));
Magic Number,Lucene.Net.Index,ThreadAnonymousInnerClassHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,Run,The following statement contains a magic number: LuceneTestCase.TEST_NIGHTLY && Random.Next(6) == 3
Magic Number,Lucene.Net.Index,ThreadAnonymousInnerClassHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,Run,The following statement contains a magic number: LuceneTestCase.TEST_NIGHTLY && Random.Next(6) == 3
Magic Number,Lucene.Net.Index,ThreadAnonymousInnerClassHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,Run,The following statement contains a magic number: Thread.Sleep(TestUtil.NextInt32(Random' 1' 10));
Magic Number,Lucene.Net.Index,ThreadAnonymousInnerClassHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,Run,The following statement contains a magic number: Random.Next(7) == 5
Magic Number,Lucene.Net.Index,ThreadAnonymousInnerClassHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,Run,The following statement contains a magic number: Random.Next(7) == 5
Magic Number,Lucene.Net.Index,ThreadAnonymousInnerClassHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,Run,The following statement contains a magic number: addedField = "extra" + Random.Next(40);
Magic Number,Lucene.Net.Index,ThreadAnonymousInnerClassHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,Run,The following statement contains a magic number: int maxDocCount = TestUtil.NextInt32(Random' 1' 10);
Magic Number,Lucene.Net.Index,ThreadAnonymousInnerClassHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,Run,The following statement contains a magic number: Random.Next(5) == 2
Magic Number,Lucene.Net.Index,ThreadAnonymousInnerClassHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,Run,The following statement contains a magic number: Random.Next(5) == 2
Magic Number,Lucene.Net.Index,ThreadAnonymousInnerClassHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,Run,The following statement contains a magic number: Random.Next(30) == 17
Magic Number,Lucene.Net.Index,ThreadAnonymousInnerClassHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,Run,The following statement contains a magic number: Random.Next(30) == 17
Magic Number,Lucene.Net.Index,ThreadAnonymousInnerClassHelper2,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseDocValuesFormatTestCase.cs,Run,The following statement contains a magic number: totTermCount.Get() < 30
Magic Number,Lucene.Net.Index,BaseIndexFileFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseIndexFileFormatTestCase.cs,TestMergeStability,The following statement contains a magic number: var numDocs = AtLeast(500);
Magic Number,Lucene.Net.Index,BaseMergePolicyTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseMergePolicyTestCase.cs,TestForceMergeNotNeeded,The following statement contains a magic number: int numSegments = TestUtil.NextInt32(Random' 2' 20);
Magic Number,Lucene.Net.Index,BaseMergePolicyTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseMergePolicyTestCase.cs,TestForceMergeNotNeeded,The following statement contains a magic number: int numSegments = TestUtil.NextInt32(Random' 2' 20);
Magic Number,Lucene.Net.Index,BaseMergePolicyTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseMergePolicyTestCase.cs,TestForceMergeNotNeeded,The following statement contains a magic number: int numDocs = TestUtil.NextInt32(Random' 1' 5);
Magic Number,Lucene.Net.Index,BaseMergePolicyTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseMergePolicyTestCase.cs,TestForceMergeNotNeeded,The following statement contains a magic number: int maxNumSegments = i == 0 ? 1 : TestUtil.NextInt32(Random' 1' 10);
Magic Number,Lucene.Net.Index,BasePostingsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,GetSeedPostings,The following statement contains a magic number: minDocFreq = RANDOM_MULTIPLIER * 50000;
Magic Number,Lucene.Net.Index,BasePostingsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,GetSeedPostings,The following statement contains a magic number: maxDocFreq = RANDOM_MULTIPLIER * 70000;
Magic Number,Lucene.Net.Index,BasePostingsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,BeforeClass,The following statement contains a magic number: int numFields = TestUtil.NextInt32(Random' 1' 5);
Magic Number,Lucene.Net.Index,BasePostingsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,BeforeClass,The following statement contains a magic number: numTerms = AtLeast(50);
Magic Number,Lucene.Net.Index,BasePostingsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,BeforeClass,The following statement contains a magic number: Random.Next(10) == 7
Magic Number,Lucene.Net.Index,BasePostingsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,BeforeClass,The following statement contains a magic number: Random.Next(10) == 7
Magic Number,Lucene.Net.Index,BasePostingsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,BuildIndex,The following statement contains a magic number: long bytes = totalPostings * 8 + totalPayloadBytes;
Magic Number,Lucene.Net.Index,BasePostingsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,BuildIndex,The following statement contains a magic number: SegmentWriteState writeState = new SegmentWriteState(null' dir' segmentInfo' newFieldInfos' 32' null' new IOContext(new FlushInfo(maxDoc' bytes)));
Magic Number,Lucene.Net.Index,BasePostingsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,VerifyEnum,The following statement contains a magic number: bool doCheckFreqs = allowFreqs && (alwaysTestMax || Random.Next(3) <= 2);
Magic Number,Lucene.Net.Index,BasePostingsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,VerifyEnum,The following statement contains a magic number: bool doCheckFreqs = allowFreqs && (alwaysTestMax || Random.Next(3) <= 2);
Magic Number,Lucene.Net.Index,BasePostingsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,VerifyEnum,The following statement contains a magic number: bool doCheckPositions = allowPositions && (alwaysTestMax || Random.Next(3) <= 2);
Magic Number,Lucene.Net.Index,BasePostingsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,VerifyEnum,The following statement contains a magic number: bool doCheckPositions = allowPositions && (alwaysTestMax || Random.Next(3) <= 2);
Magic Number,Lucene.Net.Index,BasePostingsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,VerifyEnum,The following statement contains a magic number: bool doCheckOffsets = allowOffsets && (alwaysTestMax || Random.Next(3) <= 2);
Magic Number,Lucene.Net.Index,BasePostingsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,VerifyEnum,The following statement contains a magic number: bool doCheckOffsets = allowOffsets && (alwaysTestMax || Random.Next(3) <= 2);
Magic Number,Lucene.Net.Index,BasePostingsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,VerifyEnum,The following statement contains a magic number: bool doCheckPayloads = options.Contains(Option.PAYLOADS) && allowPositions && fieldInfo.HasPayloads && (alwaysTestMax || Random.Next(3) <= 2);
Magic Number,Lucene.Net.Index,BasePostingsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,VerifyEnum,The following statement contains a magic number: bool doCheckPayloads = options.Contains(Option.PAYLOADS) && allowPositions && fieldInfo.HasPayloads && (alwaysTestMax || Random.Next(3) <= 2);
Magic Number,Lucene.Net.Index,BasePostingsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,VerifyEnum,The following statement contains a magic number: options.Contains(Option.REUSE_ENUMS) && Random.Next(10) < 9
Magic Number,Lucene.Net.Index,BasePostingsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,VerifyEnum,The following statement contains a magic number: options.Contains(Option.REUSE_ENUMS) && Random.Next(10) < 9
Magic Number,Lucene.Net.Index,BasePostingsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,VerifyEnum,The following statement contains a magic number: allowPositions && Random.Next(10) == 7
Magic Number,Lucene.Net.Index,BasePostingsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,VerifyEnum,The following statement contains a magic number: allowPositions && Random.Next(10) == 7
Magic Number,Lucene.Net.Index,BasePostingsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,VerifyEnum,The following statement contains a magic number: !alwaysTestMax && options.Contains(Option.PARTIAL_DOC_CONSUME) && expected.DocFreq > 1 && Random.Next(10) == 7
Magic Number,Lucene.Net.Index,BasePostingsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,VerifyEnum,The following statement contains a magic number: !alwaysTestMax && options.Contains(Option.PARTIAL_DOC_CONSUME) && expected.DocFreq > 1 && Random.Next(10) == 7
Magic Number,Lucene.Net.Index,BasePostingsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,VerifyEnum,The following statement contains a magic number: double skipChance = alwaysTestMax ? 0.5 : Random.NextDouble();
Magic Number,Lucene.Net.Index,BasePostingsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,VerifyEnum,The following statement contains a magic number: int numSkips = expected.DocFreq < 3 ? 1 : TestUtil.NextInt32(Random' 1' Math.Min(20' expected.DocFreq / 3));
Magic Number,Lucene.Net.Index,BasePostingsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,VerifyEnum,The following statement contains a magic number: int numSkips = expected.DocFreq < 3 ? 1 : TestUtil.NextInt32(Random' 1' Math.Min(20' expected.DocFreq / 3));
Magic Number,Lucene.Net.Index,BasePostingsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,VerifyEnum,The following statement contains a magic number: int numSkips = expected.DocFreq < 3 ? 1 : TestUtil.NextInt32(Random' 1' Math.Min(20' expected.DocFreq / 3));
Magic Number,Lucene.Net.Index,BasePostingsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,VerifyEnum,The following statement contains a magic number: bool doAllSkipping = options.Contains(Option.SKIPPING) && Random.Next(7) == 1;
Magic Number,Lucene.Net.Index,BasePostingsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,VerifyEnum,The following statement contains a magic number: !alwaysTestMax && options.Contains(Option.PARTIAL_POS_CONSUME) && Random.Next(5) == 1
Magic Number,Lucene.Net.Index,BasePostingsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,TestTerms,The following statement contains a magic number: int numThreads = TestUtil.NextInt32(Random' 2' 5);
Magic Number,Lucene.Net.Index,BasePostingsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,TestTerms,The following statement contains a magic number: int numThreads = TestUtil.NextInt32(Random' 2' 5);
Magic Number,Lucene.Net.Index,BasePostingsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,TestTermsOneThread,The following statement contains a magic number: bool useTermState = termStates.Count != 0 && Random.Next(5) == 1;
Magic Number,Lucene.Net.Index,BasePostingsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,TestTermsOneThread,The following statement contains a magic number: options.Contains(Option.TERM_STATE) && !useTermState && Random.Next(5) == 1
Magic Number,Lucene.Net.Index,BasePostingsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,TestTermsOneThread,The following statement contains a magic number: options.Contains(Option.TERM_STATE) && !useTermState && !savedTermState && Random.Next(5) == 1
Magic Number,Lucene.Net.Index,BasePostingsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,TestTermsOneThread,The following statement contains a magic number: alwaysTestMax || Random.Next(10) == 7
Magic Number,Lucene.Net.Index,BasePostingsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,TestTermsOneThread,The following statement contains a magic number: alwaysTestMax || Random.Next(10) == 7
Magic Number,Lucene.Net.Index,BasePostingsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,TestRandom,The following statement contains a magic number: int iters = 5;
Magic Number,Lucene.Net.Index,BasePostingsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,AddRandomFields,The following statement contains a magic number: int numFields = Random.Next(5);
Magic Number,Lucene.Net.Index,BasePostingsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,AddRandomFields,The following statement contains a magic number: doc.Add(new Field("f_" + opts' TestUtil.RandomSimpleString(Random' 2)' ft));
Magic Number,Lucene.Net.Index,SeedPostings,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,SeedPostings,The following statement contains a magic number: maxDocSpacing = TestUtil.NextInt32(random' 1' 100);
Magic Number,Lucene.Net.Index,SeedPostings,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,SeedPostings,The following statement contains a magic number: payloadSize = 1 + random.Next(3);
Magic Number,Lucene.Net.Index,SeedPostings,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,SeedPostings,The following statement contains a magic number: random.Next(10) == 7
Magic Number,Lucene.Net.Index,SeedPostings,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,SeedPostings,The following statement contains a magic number: random.Next(10) == 7
Magic Number,Lucene.Net.Index,SeedPostings,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,_nextDoc,The following statement contains a magic number: freq = TestUtil.NextInt32(random' 1' 1000);
Magic Number,Lucene.Net.Index,SeedPostings,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,_nextDoc,The following statement contains a magic number: random.Next(200) == 17
Magic Number,Lucene.Net.Index,SeedPostings,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,_nextDoc,The following statement contains a magic number: random.Next(200) == 17
Magic Number,Lucene.Net.Index,SeedPostings,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,_nextDoc,The following statement contains a magic number: posSpacing = TestUtil.NextInt32(random' 1' 100);
Magic Number,Lucene.Net.Index,SeedPostings,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,NextPosition,The following statement contains a magic number: startOffset = offset + random.Next(5);
Magic Number,Lucene.Net.Index,SeedPostings,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BasePostingsFormatTestCase.cs,NextPosition,The following statement contains a magic number: endOffset = startOffset + random.Next(10);
Magic Number,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,AddRandomFields,The following statement contains a magic number: int numValues = Random.Next(3);
Magic Number,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,AddRandomFields,The following statement contains a magic number: d.Add(new StoredField("f"' TestUtil.RandomSimpleString(Random' 100)));
Magic Number,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,TestRandomStoredFields,The following statement contains a magic number: int docCount = AtLeast(200);
Magic Number,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,TestRandomStoredFields,The following statement contains a magic number: int fieldCount = TestUtil.NextInt32(rand' 1' 5);
Magic Number,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,TestRandomStoredFields,The following statement contains a magic number: s = TestUtil.RandomUnicodeString(rand' 1000);
Magic Number,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,TestRandomStoredFields,The following statement contains a magic number: rand.Next(4) != 3
Magic Number,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,TestRandomStoredFields,The following statement contains a magic number: rand.Next(4) != 3
Magic Number,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,TestRandomStoredFields,The following statement contains a magic number: rand.Next(50) == 17
Magic Number,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,TestRandomStoredFields,The following statement contains a magic number: rand.Next(50) == 17
Magic Number,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,TestRandomStoredFields,The following statement contains a magic number: rand.Next(5) == 3 && i > 0
Magic Number,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,TestRandomStoredFields,The following statement contains a magic number: rand.Next(5) == 3 && i > 0
Magic Number,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,TestRandomStoredFields,The following statement contains a magic number: int num = AtLeast(1000);
Magic Number,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,TestRandomStoredFields,The following statement contains a magic number: x < 2
Magic Number,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,TestBinaryFieldOffsetLength,The following statement contains a magic number: var b = new byte[50];
Magic Number,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,TestBinaryFieldOffsetLength,The following statement contains a magic number: b[i] = (byte)(i + 77);
Magic Number,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,TestBinaryFieldOffsetLength,The following statement contains a magic number: i < 50
Magic Number,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,TestBinaryFieldOffsetLength,The following statement contains a magic number: Field f = new StoredField("binary"' b' 10' 17);
Magic Number,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,TestBinaryFieldOffsetLength,The following statement contains a magic number: Field f = new StoredField("binary"' b' 10' 17);
Magic Number,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,TestBinaryFieldOffsetLength,The following statement contains a magic number: Assert.AreEqual(50' bx.Length);
Magic Number,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,TestBinaryFieldOffsetLength,The following statement contains a magic number: Assert.AreEqual(10' f.GetBinaryValue().Offset);
Magic Number,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,TestBinaryFieldOffsetLength,The following statement contains a magic number: Assert.AreEqual(17' f.GetBinaryValue().Length);
Magic Number,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,TestBinaryFieldOffsetLength,The following statement contains a magic number: Assert.AreEqual(17' b.Length' 17);
Magic Number,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,TestBinaryFieldOffsetLength,The following statement contains a magic number: Assert.AreEqual(17' b.Length' 17);
Magic Number,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,TestBinaryFieldOffsetLength,The following statement contains a magic number: Assert.AreEqual(87' b[0]);
Magic Number,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,TestNumericField,The following statement contains a magic number: var numDocs = AtLeast(500);
Magic Number,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,TestReadSkip,The following statement contains a magic number: iwConf.SetMaxBufferedDocs(RandomInts.RandomInt32Between(Random' 2' 30));
Magic Number,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,TestReadSkip,The following statement contains a magic number: iwConf.SetMaxBufferedDocs(RandomInts.RandomInt32Between(Random' 2' 30));
Magic Number,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,TestReadSkip,The following statement contains a magic number: string @string = TestUtil.RandomSimpleString(Random' 50);
Magic Number,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,TestReadSkip,The following statement contains a magic number: long l = Random.NextBoolean() ? Random.Next(42) : Random.NextInt64();
Magic Number,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,TestReadSkip,The following statement contains a magic number: int i = Random.NextBoolean() ? Random.Next(42) : Random.Next();
Magic Number,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,TestReadSkip,The following statement contains a magic number: k < 100
Magic Number,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,TestReadSkip,The following statement contains a magic number: int docID = Random.Next(100);
Magic Number,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,TestEmptyDocs,The following statement contains a magic number: iwConf.SetMaxBufferedDocs(RandomInts.RandomInt32Between(Random' 2' 30));
Magic Number,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,TestEmptyDocs,The following statement contains a magic number: iwConf.SetMaxBufferedDocs(RandomInts.RandomInt32Between(Random' 2' 30));
Magic Number,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,TestEmptyDocs,The following statement contains a magic number: int numDocs = Random.NextBoolean() ? 1 : AtLeast(1000);
Magic Number,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,TestConcurrentReads,The following statement contains a magic number: iwConf.SetMaxBufferedDocs(RandomInts.RandomInt32Between(Random' 2' 30));
Magic Number,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,TestConcurrentReads,The following statement contains a magic number: iwConf.SetMaxBufferedDocs(RandomInts.RandomInt32Between(Random' 2' 30));
Magic Number,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,TestConcurrentReads,The following statement contains a magic number: int numDocs = AtLeast(1000);
Magic Number,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,TestConcurrentReads,The following statement contains a magic number: int concurrentReads = AtLeast(5);
Magic Number,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,TestConcurrentReads,The following statement contains a magic number: int readsPerThread = AtLeast(50);
Magic Number,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,TestWriteReadMerge,The following statement contains a magic number: iwConf.SetMaxBufferedDocs(RandomInts.RandomInt32Between(Random' 2' 30));
Magic Number,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,TestWriteReadMerge,The following statement contains a magic number: iwConf.SetMaxBufferedDocs(RandomInts.RandomInt32Between(Random' 2' 30));
Magic Number,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,TestWriteReadMerge,The following statement contains a magic number: int docCount = AtLeast(200);
Magic Number,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,TestWriteReadMerge,The following statement contains a magic number: int fieldCount = Rarely() ? RandomInts.RandomInt32Between(Random' 1' 500) : RandomInts.RandomInt32Between(Random' 1' 5);
Magic Number,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,TestWriteReadMerge,The following statement contains a magic number: int fieldCount = Rarely() ? RandomInts.RandomInt32Between(Random' 1' 500) : RandomInts.RandomInt32Between(Random' 1' 5);
Magic Number,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,TestWriteReadMerge,The following statement contains a magic number: int length = Rarely() ? Random.Next(1000) : Random.Next(10);
Magic Number,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,TestWriteReadMerge,The following statement contains a magic number: int length = Rarely() ? Random.Next(1000) : Random.Next(10);
Magic Number,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,TestWriteReadMerge,The following statement contains a magic number: int max = Rarely() ? 256 : 2;
Magic Number,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,TestWriteReadMerge,The following statement contains a magic number: int max = Rarely() ? 256 : 2;
Magic Number,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,TestWriteReadMerge,The following statement contains a magic number: Random.NextBoolean() && (i % (data.Length / 10) == 0)
Magic Number,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,TestWriteReadMerge,The following statement contains a magic number: int max = min + Random.Next(20);
Magic Number,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,TestWriteReadMerge,The following statement contains a magic number: i < 10
Magic Number,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,TestWriteReadMerge,The following statement contains a magic number: iw.ForceMerge(2);
Magic Number,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,TestBigDocuments,The following statement contains a magic number: iwConf.SetMaxBufferedDocs(RandomInts.RandomInt32Between(Random' 2' 30));
Magic Number,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,TestBigDocuments,The following statement contains a magic number: iwConf.SetMaxBufferedDocs(RandomInts.RandomInt32Between(Random' 2' 30));
Magic Number,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,TestBigDocuments,The following statement contains a magic number: Field smallField = new Field("fld"' RandomByteArray(Random.Next(10)' 256)' onlyStored);
Magic Number,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,TestBigDocuments,The following statement contains a magic number: Field smallField = new Field("fld"' RandomByteArray(Random.Next(10)' 256)' onlyStored);
Magic Number,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,TestBigDocuments,The following statement contains a magic number: int numFields = RandomInts.RandomInt32Between(Random' 500000' 1000000);
Magic Number,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,TestBigDocuments,The following statement contains a magic number: int numFields = RandomInts.RandomInt32Between(Random' 500000' 1000000);
Magic Number,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,TestBigDocuments,The following statement contains a magic number: Field bigField = new Field("fld"' RandomByteArray(RandomInts.RandomInt32Between(Random' 1000000' 5000000)' 2)' onlyStored);
Magic Number,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,TestBigDocuments,The following statement contains a magic number: Field bigField = new Field("fld"' RandomByteArray(RandomInts.RandomInt32Between(Random' 1000000' 5000000)' 2)' onlyStored);
Magic Number,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,TestBigDocuments,The following statement contains a magic number: Field bigField = new Field("fld"' RandomByteArray(RandomInts.RandomInt32Between(Random' 1000000' 5000000)' 2)' onlyStored);
Magic Number,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,TestBigDocuments,The following statement contains a magic number: int numDocs = AtLeast(5);
Magic Number,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,TestBulkMergeWithDeletes,The following statement contains a magic number: int numDocs = AtLeast(200);
Magic Number,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,TestBulkMergeWithDeletes,The following statement contains a magic number: int deleteCount = TestUtil.NextInt32(Random' 5' numDocs);
Magic Number,Lucene.Net.Index,BaseStoredFieldsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseStoredFieldsFormatTestCase.cs,TestBulkMergeWithDeletes,The following statement contains a magic number: w.ForceMerge(TestUtil.NextInt32(Random' 1' 3));
Magic Number,Lucene.Net.Index,BaseTermVectorsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseTermVectorsFormatTestCase.cs,RandomPayload,The following statement contains a magic number: int len = Random.Next(5);
Magic Number,Lucene.Net.Index,BaseTermVectorsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseTermVectorsFormatTestCase.cs,AddRandomFields,The following statement contains a magic number: int numFields = Random.Next(5);
Magic Number,Lucene.Net.Index,BaseTermVectorsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseTermVectorsFormatTestCase.cs,AddRandomFields,The following statement contains a magic number: doc.Add(new Field("f_" + opts' TestUtil.RandomSimpleString(Random' 2)' ft));
Magic Number,Lucene.Net.Index,BaseTermVectorsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseTermVectorsFormatTestCase.cs,AssertEquals,The following statement contains a magic number: i < 5
Magic Number,Lucene.Net.Index,BaseTermVectorsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseTermVectorsFormatTestCase.cs,TestRareVectors,The following statement contains a magic number: RandomDocumentFactory docFactory = new RandomDocumentFactory(this' 10' 20);
Magic Number,Lucene.Net.Index,BaseTermVectorsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseTermVectorsFormatTestCase.cs,TestRareVectors,The following statement contains a magic number: RandomDocumentFactory docFactory = new RandomDocumentFactory(this' 10' 20);
Magic Number,Lucene.Net.Index,BaseTermVectorsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseTermVectorsFormatTestCase.cs,TestRareVectors,The following statement contains a magic number: int numDocs = AtLeast(200);
Magic Number,Lucene.Net.Index,BaseTermVectorsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseTermVectorsFormatTestCase.cs,TestRareVectors,The following statement contains a magic number: RandomDocument doc = docFactory.NewDocument(TestUtil.NextInt32(Random' 1' 3)' 20' options);
Magic Number,Lucene.Net.Index,BaseTermVectorsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseTermVectorsFormatTestCase.cs,TestRareVectors,The following statement contains a magic number: RandomDocument doc = docFactory.NewDocument(TestUtil.NextInt32(Random' 1' 3)' 20' options);
Magic Number,Lucene.Net.Index,BaseTermVectorsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseTermVectorsFormatTestCase.cs,TestHighFreqs,The following statement contains a magic number: RandomDocumentFactory docFactory = new RandomDocumentFactory(this' 3' 5);
Magic Number,Lucene.Net.Index,BaseTermVectorsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseTermVectorsFormatTestCase.cs,TestHighFreqs,The following statement contains a magic number: RandomDocumentFactory docFactory = new RandomDocumentFactory(this' 3' 5);
Magic Number,Lucene.Net.Index,BaseTermVectorsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseTermVectorsFormatTestCase.cs,TestHighFreqs,The following statement contains a magic number: RandomDocument doc = docFactory.NewDocument(TestUtil.NextInt32(Random' 1' 2)' AtLeast(20000)'                          options);
Magic Number,Lucene.Net.Index,BaseTermVectorsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseTermVectorsFormatTestCase.cs,TestHighFreqs,The following statement contains a magic number: RandomDocument doc = docFactory.NewDocument(TestUtil.NextInt32(Random' 1' 2)' AtLeast(20000)'                          options);
Magic Number,Lucene.Net.Index,BaseTermVectorsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseTermVectorsFormatTestCase.cs,TestLotsOfFields,The following statement contains a magic number: RandomDocumentFactory docFactory = new RandomDocumentFactory(this' 500' 10);
Magic Number,Lucene.Net.Index,BaseTermVectorsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseTermVectorsFormatTestCase.cs,TestLotsOfFields,The following statement contains a magic number: RandomDocumentFactory docFactory = new RandomDocumentFactory(this' 500' 10);
Magic Number,Lucene.Net.Index,BaseTermVectorsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseTermVectorsFormatTestCase.cs,TestLotsOfFields,The following statement contains a magic number: RandomDocument doc = docFactory.NewDocument(AtLeast(100)' 5' options);
Magic Number,Lucene.Net.Index,BaseTermVectorsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseTermVectorsFormatTestCase.cs,TestLotsOfFields,The following statement contains a magic number: RandomDocument doc = docFactory.NewDocument(AtLeast(100)' 5' options);
Magic Number,Lucene.Net.Index,BaseTermVectorsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseTermVectorsFormatTestCase.cs,TestMixedOptions,The following statement contains a magic number: int numFields = TestUtil.NextInt32(Random' 1' 3);
Magic Number,Lucene.Net.Index,BaseTermVectorsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseTermVectorsFormatTestCase.cs,TestMixedOptions,The following statement contains a magic number: var docFactory = new RandomDocumentFactory(this' numFields' 10);
Magic Number,Lucene.Net.Index,BaseTermVectorsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseTermVectorsFormatTestCase.cs,TestMixedOptions,The following statement contains a magic number: RandomDocument doc1 = docFactory.NewDocument(numFields' 20' options1);
Magic Number,Lucene.Net.Index,BaseTermVectorsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseTermVectorsFormatTestCase.cs,TestMixedOptions,The following statement contains a magic number: RandomDocument doc2 = docFactory.NewDocument(numFields' 20' options2);
Magic Number,Lucene.Net.Index,BaseTermVectorsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseTermVectorsFormatTestCase.cs,TestRandom,The following statement contains a magic number: RandomDocumentFactory docFactory = new RandomDocumentFactory(this' 5' 20);
Magic Number,Lucene.Net.Index,BaseTermVectorsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseTermVectorsFormatTestCase.cs,TestRandom,The following statement contains a magic number: RandomDocumentFactory docFactory = new RandomDocumentFactory(this' 5' 20);
Magic Number,Lucene.Net.Index,BaseTermVectorsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseTermVectorsFormatTestCase.cs,TestRandom,The following statement contains a magic number: int numDocs = AtLeast(100);
Magic Number,Lucene.Net.Index,BaseTermVectorsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseTermVectorsFormatTestCase.cs,TestRandom,The following statement contains a magic number: docs[i] = docFactory.NewDocument(TestUtil.NextInt32(Random' 1' 3)' TestUtil.NextInt32(Random' 10' 50)' RandomOptions());
Magic Number,Lucene.Net.Index,BaseTermVectorsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseTermVectorsFormatTestCase.cs,TestRandom,The following statement contains a magic number: docs[i] = docFactory.NewDocument(TestUtil.NextInt32(Random' 1' 3)' TestUtil.NextInt32(Random' 10' 50)' RandomOptions());
Magic Number,Lucene.Net.Index,BaseTermVectorsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseTermVectorsFormatTestCase.cs,TestRandom,The following statement contains a magic number: docs[i] = docFactory.NewDocument(TestUtil.NextInt32(Random' 1' 3)' TestUtil.NextInt32(Random' 10' 50)' RandomOptions());
Magic Number,Lucene.Net.Index,BaseTermVectorsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseTermVectorsFormatTestCase.cs,TestMerge,The following statement contains a magic number: RandomDocumentFactory docFactory = new RandomDocumentFactory(this' 5' 20);
Magic Number,Lucene.Net.Index,BaseTermVectorsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseTermVectorsFormatTestCase.cs,TestMerge,The following statement contains a magic number: RandomDocumentFactory docFactory = new RandomDocumentFactory(this' 5' 20);
Magic Number,Lucene.Net.Index,BaseTermVectorsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseTermVectorsFormatTestCase.cs,TestMerge,The following statement contains a magic number: int numDocs = AtLeast(100);
Magic Number,Lucene.Net.Index,BaseTermVectorsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseTermVectorsFormatTestCase.cs,TestMerge,The following statement contains a magic number: docs[i] = docFactory.NewDocument(TestUtil.NextInt32(Random' 1' 3)' AtLeast(10)' options);
Magic Number,Lucene.Net.Index,BaseTermVectorsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseTermVectorsFormatTestCase.cs,TestMerge,The following statement contains a magic number: docs[i] = docFactory.NewDocument(TestUtil.NextInt32(Random' 1' 3)' AtLeast(10)' options);
Magic Number,Lucene.Net.Index,BaseTermVectorsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseTermVectorsFormatTestCase.cs,TestClone,The following statement contains a magic number: RandomDocumentFactory docFactory = new RandomDocumentFactory(this' 5' 20);
Magic Number,Lucene.Net.Index,BaseTermVectorsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseTermVectorsFormatTestCase.cs,TestClone,The following statement contains a magic number: RandomDocumentFactory docFactory = new RandomDocumentFactory(this' 5' 20);
Magic Number,Lucene.Net.Index,BaseTermVectorsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseTermVectorsFormatTestCase.cs,TestClone,The following statement contains a magic number: int numDocs = AtLeast(100);
Magic Number,Lucene.Net.Index,BaseTermVectorsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseTermVectorsFormatTestCase.cs,TestClone,The following statement contains a magic number: docs[i] = docFactory.NewDocument(TestUtil.NextInt32(Random' 1' 3)' AtLeast(10)' options);
Magic Number,Lucene.Net.Index,BaseTermVectorsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseTermVectorsFormatTestCase.cs,TestClone,The following statement contains a magic number: docs[i] = docFactory.NewDocument(TestUtil.NextInt32(Random' 1' 3)' AtLeast(10)' options);
Magic Number,Lucene.Net.Index,BaseTermVectorsFormatTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseTermVectorsFormatTestCase.cs,TestClone,The following statement contains a magic number: ThreadClass[] threads = new ThreadClass[2];
Magic Number,Lucene.Net.Index,PermissiveOffsetAttribute,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseTermVectorsFormatTestCase.cs,GetHashCode,The following statement contains a magic number: return start + 31 * end;
Magic Number,Lucene.Net.Index,RandomTokenStream,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\BaseTermVectorsFormatTestCase.cs,RandomTokenStream,The following statement contains a magic number: positionsIncrements[i] = TestUtil.NextInt32(Random' i == 0 ? 1 : 0' 10);
Magic Number,Lucene.Net.Index,DocHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\DocHelper.cs,DocHelper,The following statement contains a magic number: i < 10000
Magic Number,Lucene.Net.Index,DocHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\DocHelper.cs,DocHelper,The following statement contains a magic number: Fields[Fields.Length - 2] = LazyFieldBinary;
Magic Number,Lucene.Net.Index,MockRandomMergePolicy,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\MockRandomMergePolicy.cs,FindMerges,The following statement contains a magic number: numSegments > 1 && (numSegments > 30 || random.Next(5) == 3)
Magic Number,Lucene.Net.Index,MockRandomMergePolicy,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\MockRandomMergePolicy.cs,FindMerges,The following statement contains a magic number: numSegments > 1 && (numSegments > 30 || random.Next(5) == 3)
Magic Number,Lucene.Net.Index,MockRandomMergePolicy,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\MockRandomMergePolicy.cs,FindMerges,The following statement contains a magic number: numSegments > 1 && (numSegments > 30 || random.Next(5) == 3)
Magic Number,Lucene.Net.Index,MockRandomMergePolicy,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\MockRandomMergePolicy.cs,FindForcedMerges,The following statement contains a magic number: int max = Math.Min(10' eligibleSegments.Count - upto);
Magic Number,Lucene.Net.Index,MockRandomMergePolicy,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\MockRandomMergePolicy.cs,FindForcedMerges,The following statement contains a magic number: int inc = max <= 2 ? max : TestUtil.NextInt32(random' 2' max);
Magic Number,Lucene.Net.Index,MockRandomMergePolicy,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\MockRandomMergePolicy.cs,FindForcedMerges,The following statement contains a magic number: int inc = max <= 2 ? max : TestUtil.NextInt32(random' 2' max);
Magic Number,Lucene.Net.Index,MockRandomMergePolicy,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\MockRandomMergePolicy.cs,UseCompoundFile,The following statement contains a magic number: return random.Next(5) != 1;
Magic Number,Lucene.Net.Index,RandomCodec,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\RandomCodec.cs,GetPostingsFormatForField,The following statement contains a magic number: codec is SimpleTextPostingsFormat && perFieldSeed % 5 != 0
Magic Number,Lucene.Net.Index,RandomCodec,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\RandomCodec.cs,GetPostingsFormatForField,The following statement contains a magic number: Debug.Assert(previousMappings.Count < 10000' "test went insane");
Magic Number,Lucene.Net.Index,RandomCodec,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\RandomCodec.cs,GetDocValuesFormatForField,The following statement contains a magic number: codec is SimpleTextDocValuesFormat && perFieldSeed % 5 != 0
Magic Number,Lucene.Net.Index,RandomCodec,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\RandomCodec.cs,GetDocValuesFormatForField,The following statement contains a magic number: Debug.Assert(previousDVMappings.Count < 10000' "test went insane");
Magic Number,Lucene.Net.Index,RandomCodec,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\RandomCodec.cs,RandomCodec,The following statement contains a magic number: int minItemsPerBlock = TestUtil.NextInt32(random' 2' 100);
Magic Number,Lucene.Net.Index,RandomCodec,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\RandomCodec.cs,RandomCodec,The following statement contains a magic number: int minItemsPerBlock = TestUtil.NextInt32(random' 2' 100);
Magic Number,Lucene.Net.Index,RandomCodec,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\RandomCodec.cs,RandomCodec,The following statement contains a magic number: int maxItemsPerBlock = 2 * (Math.Max(2' minItemsPerBlock - 1)) + random.Next(100);
Magic Number,Lucene.Net.Index,RandomCodec,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\RandomCodec.cs,RandomCodec,The following statement contains a magic number: int maxItemsPerBlock = 2 * (Math.Max(2' minItemsPerBlock - 1)) + random.Next(100);
Magic Number,Lucene.Net.Index,RandomCodec,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\RandomCodec.cs,RandomCodec,The following statement contains a magic number: int maxItemsPerBlock = 2 * (Math.Max(2' minItemsPerBlock - 1)) + random.Next(100);
Magic Number,Lucene.Net.Index,RandomCodec,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\RandomCodec.cs,RandomCodec,The following statement contains a magic number: int lowFreqCutoff = TestUtil.NextInt32(random' 2' 100);
Magic Number,Lucene.Net.Index,RandomCodec,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\RandomCodec.cs,RandomCodec,The following statement contains a magic number: int lowFreqCutoff = TestUtil.NextInt32(random' 2' 100);
Magic Number,Lucene.Net.Index,RandomCodec,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\RandomCodec.cs,RandomCodec,The following statement contains a magic number: Add(avoidCodecs'                  new Lucene41PostingsFormat(minItemsPerBlock' maxItemsPerBlock)'                  new FSTPostingsFormat()'                  new FSTOrdPostingsFormat()'                  new FSTPulsing41PostingsFormat(1 + random.Next(20))' new FSTOrdPulsing41PostingsFormat(1 + random.Next(20))'                  new DirectPostingsFormat(LuceneTestCase.Rarely(random) ? 1 : (LuceneTestCase.Rarely(random) ? int.MaxValue : maxItemsPerBlock)'                                           LuceneTestCase.Rarely(random) ? 1 : (LuceneTestCase.Rarely(random) ? int.MaxValue : lowFreqCutoff))'                  new Pulsing41PostingsFormat(1 + random.Next(20)' minItemsPerBlock' maxItemsPerBlock)'                  // add pulsing again with (usually) different parameters                  new Pulsing41PostingsFormat(1 + random.Next(20)' minItemsPerBlock' maxItemsPerBlock)'                  //TODO as a PostingsFormat which wraps others' we should allow TestBloomFilteredLucene41Postings to be constructed                   //with a choice of concrete PostingsFormats. Maybe useful to have a generic means of marking and dealing                   //with such "wrapper" classes?                  new TestBloomFilteredLucene41Postings()'                   new MockSepPostingsFormat()'                   new MockFixedInt32BlockPostingsFormat(TestUtil.NextInt32(random' 1' 2000))'                  new MockVariableInt32BlockPostingsFormat(TestUtil.NextInt32(random' 1' 127))'                   new MockRandomPostingsFormat(random)'                  new NestedPulsingPostingsFormat()'                   new Lucene41WithOrds()'                   new SimpleTextPostingsFormat()'                  new AssertingPostingsFormat()'                  new MemoryPostingsFormat(true' random.nextFloat())'                   new MemoryPostingsFormat(false' random.nextFloat())              );
Magic Number,Lucene.Net.Index,RandomCodec,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\RandomCodec.cs,RandomCodec,The following statement contains a magic number: Add(avoidCodecs'                  new Lucene41PostingsFormat(minItemsPerBlock' maxItemsPerBlock)'                  new FSTPostingsFormat()'                  new FSTOrdPostingsFormat()'                  new FSTPulsing41PostingsFormat(1 + random.Next(20))' new FSTOrdPulsing41PostingsFormat(1 + random.Next(20))'                  new DirectPostingsFormat(LuceneTestCase.Rarely(random) ? 1 : (LuceneTestCase.Rarely(random) ? int.MaxValue : maxItemsPerBlock)'                                           LuceneTestCase.Rarely(random) ? 1 : (LuceneTestCase.Rarely(random) ? int.MaxValue : lowFreqCutoff))'                  new Pulsing41PostingsFormat(1 + random.Next(20)' minItemsPerBlock' maxItemsPerBlock)'                  // add pulsing again with (usually) different parameters                  new Pulsing41PostingsFormat(1 + random.Next(20)' minItemsPerBlock' maxItemsPerBlock)'                  //TODO as a PostingsFormat which wraps others' we should allow TestBloomFilteredLucene41Postings to be constructed                   //with a choice of concrete PostingsFormats. Maybe useful to have a generic means of marking and dealing                   //with such "wrapper" classes?                  new TestBloomFilteredLucene41Postings()'                   new MockSepPostingsFormat()'                   new MockFixedInt32BlockPostingsFormat(TestUtil.NextInt32(random' 1' 2000))'                  new MockVariableInt32BlockPostingsFormat(TestUtil.NextInt32(random' 1' 127))'                   new MockRandomPostingsFormat(random)'                  new NestedPulsingPostingsFormat()'                   new Lucene41WithOrds()'                   new SimpleTextPostingsFormat()'                  new AssertingPostingsFormat()'                  new MemoryPostingsFormat(true' random.nextFloat())'                   new MemoryPostingsFormat(false' random.nextFloat())              );
Magic Number,Lucene.Net.Index,RandomCodec,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\RandomCodec.cs,RandomCodec,The following statement contains a magic number: Add(avoidCodecs'                  new Lucene41PostingsFormat(minItemsPerBlock' maxItemsPerBlock)'                  new FSTPostingsFormat()'                  new FSTOrdPostingsFormat()'                  new FSTPulsing41PostingsFormat(1 + random.Next(20))' new FSTOrdPulsing41PostingsFormat(1 + random.Next(20))'                  new DirectPostingsFormat(LuceneTestCase.Rarely(random) ? 1 : (LuceneTestCase.Rarely(random) ? int.MaxValue : maxItemsPerBlock)'                                           LuceneTestCase.Rarely(random) ? 1 : (LuceneTestCase.Rarely(random) ? int.MaxValue : lowFreqCutoff))'                  new Pulsing41PostingsFormat(1 + random.Next(20)' minItemsPerBlock' maxItemsPerBlock)'                  // add pulsing again with (usually) different parameters                  new Pulsing41PostingsFormat(1 + random.Next(20)' minItemsPerBlock' maxItemsPerBlock)'                  //TODO as a PostingsFormat which wraps others' we should allow TestBloomFilteredLucene41Postings to be constructed                   //with a choice of concrete PostingsFormats. Maybe useful to have a generic means of marking and dealing                   //with such "wrapper" classes?                  new TestBloomFilteredLucene41Postings()'                   new MockSepPostingsFormat()'                   new MockFixedInt32BlockPostingsFormat(TestUtil.NextInt32(random' 1' 2000))'                  new MockVariableInt32BlockPostingsFormat(TestUtil.NextInt32(random' 1' 127))'                   new MockRandomPostingsFormat(random)'                  new NestedPulsingPostingsFormat()'                   new Lucene41WithOrds()'                   new SimpleTextPostingsFormat()'                  new AssertingPostingsFormat()'                  new MemoryPostingsFormat(true' random.nextFloat())'                   new MemoryPostingsFormat(false' random.nextFloat())              );
Magic Number,Lucene.Net.Index,RandomCodec,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\RandomCodec.cs,RandomCodec,The following statement contains a magic number: Add(avoidCodecs'                  new Lucene41PostingsFormat(minItemsPerBlock' maxItemsPerBlock)'                  new FSTPostingsFormat()'                  new FSTOrdPostingsFormat()'                  new FSTPulsing41PostingsFormat(1 + random.Next(20))' new FSTOrdPulsing41PostingsFormat(1 + random.Next(20))'                  new DirectPostingsFormat(LuceneTestCase.Rarely(random) ? 1 : (LuceneTestCase.Rarely(random) ? int.MaxValue : maxItemsPerBlock)'                                           LuceneTestCase.Rarely(random) ? 1 : (LuceneTestCase.Rarely(random) ? int.MaxValue : lowFreqCutoff))'                  new Pulsing41PostingsFormat(1 + random.Next(20)' minItemsPerBlock' maxItemsPerBlock)'                  // add pulsing again with (usually) different parameters                  new Pulsing41PostingsFormat(1 + random.Next(20)' minItemsPerBlock' maxItemsPerBlock)'                  //TODO as a PostingsFormat which wraps others' we should allow TestBloomFilteredLucene41Postings to be constructed                   //with a choice of concrete PostingsFormats. Maybe useful to have a generic means of marking and dealing                   //with such "wrapper" classes?                  new TestBloomFilteredLucene41Postings()'                   new MockSepPostingsFormat()'                   new MockFixedInt32BlockPostingsFormat(TestUtil.NextInt32(random' 1' 2000))'                  new MockVariableInt32BlockPostingsFormat(TestUtil.NextInt32(random' 1' 127))'                   new MockRandomPostingsFormat(random)'                  new NestedPulsingPostingsFormat()'                   new Lucene41WithOrds()'                   new SimpleTextPostingsFormat()'                  new AssertingPostingsFormat()'                  new MemoryPostingsFormat(true' random.nextFloat())'                   new MemoryPostingsFormat(false' random.nextFloat())              );
Magic Number,Lucene.Net.Index,RandomCodec,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\RandomCodec.cs,RandomCodec,The following statement contains a magic number: Add(avoidCodecs'                  new Lucene41PostingsFormat(minItemsPerBlock' maxItemsPerBlock)'                  new FSTPostingsFormat()'                  new FSTOrdPostingsFormat()'                  new FSTPulsing41PostingsFormat(1 + random.Next(20))' new FSTOrdPulsing41PostingsFormat(1 + random.Next(20))'                  new DirectPostingsFormat(LuceneTestCase.Rarely(random) ? 1 : (LuceneTestCase.Rarely(random) ? int.MaxValue : maxItemsPerBlock)'                                           LuceneTestCase.Rarely(random) ? 1 : (LuceneTestCase.Rarely(random) ? int.MaxValue : lowFreqCutoff))'                  new Pulsing41PostingsFormat(1 + random.Next(20)' minItemsPerBlock' maxItemsPerBlock)'                  // add pulsing again with (usually) different parameters                  new Pulsing41PostingsFormat(1 + random.Next(20)' minItemsPerBlock' maxItemsPerBlock)'                  //TODO as a PostingsFormat which wraps others' we should allow TestBloomFilteredLucene41Postings to be constructed                   //with a choice of concrete PostingsFormats. Maybe useful to have a generic means of marking and dealing                   //with such "wrapper" classes?                  new TestBloomFilteredLucene41Postings()'                   new MockSepPostingsFormat()'                   new MockFixedInt32BlockPostingsFormat(TestUtil.NextInt32(random' 1' 2000))'                  new MockVariableInt32BlockPostingsFormat(TestUtil.NextInt32(random' 1' 127))'                   new MockRandomPostingsFormat(random)'                  new NestedPulsingPostingsFormat()'                   new Lucene41WithOrds()'                   new SimpleTextPostingsFormat()'                  new AssertingPostingsFormat()'                  new MemoryPostingsFormat(true' random.nextFloat())'                   new MemoryPostingsFormat(false' random.nextFloat())              );
Magic Number,Lucene.Net.Index,RandomCodec,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\RandomCodec.cs,RandomCodec,The following statement contains a magic number: Add(avoidCodecs'                  new Lucene41PostingsFormat(minItemsPerBlock' maxItemsPerBlock)'                  new FSTPostingsFormat()'                  new FSTOrdPostingsFormat()'                  new FSTPulsing41PostingsFormat(1 + random.Next(20))' new FSTOrdPulsing41PostingsFormat(1 + random.Next(20))'                  new DirectPostingsFormat(LuceneTestCase.Rarely(random) ? 1 : (LuceneTestCase.Rarely(random) ? int.MaxValue : maxItemsPerBlock)'                                           LuceneTestCase.Rarely(random) ? 1 : (LuceneTestCase.Rarely(random) ? int.MaxValue : lowFreqCutoff))'                  new Pulsing41PostingsFormat(1 + random.Next(20)' minItemsPerBlock' maxItemsPerBlock)'                  // add pulsing again with (usually) different parameters                  new Pulsing41PostingsFormat(1 + random.Next(20)' minItemsPerBlock' maxItemsPerBlock)'                  //TODO as a PostingsFormat which wraps others' we should allow TestBloomFilteredLucene41Postings to be constructed                   //with a choice of concrete PostingsFormats. Maybe useful to have a generic means of marking and dealing                   //with such "wrapper" classes?                  new TestBloomFilteredLucene41Postings()'                   new MockSepPostingsFormat()'                   new MockFixedInt32BlockPostingsFormat(TestUtil.NextInt32(random' 1' 2000))'                  new MockVariableInt32BlockPostingsFormat(TestUtil.NextInt32(random' 1' 127))'                   new MockRandomPostingsFormat(random)'                  new NestedPulsingPostingsFormat()'                   new Lucene41WithOrds()'                   new SimpleTextPostingsFormat()'                  new AssertingPostingsFormat()'                  new MemoryPostingsFormat(true' random.nextFloat())'                   new MemoryPostingsFormat(false' random.nextFloat())              );
Magic Number,Lucene.Net.Index,RandomCodec,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\RandomCodec.cs,RandomCodec,The following statement contains a magic number: formats = formats.SubList(0' 4);
Magic Number,Lucene.Net.Index,RandomCodec,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\RandomCodec.cs,RandomCodec,The following statement contains a magic number: formats.Count > 4
Magic Number,Lucene.Net.Index,RandomCodec,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\RandomCodec.cs,RandomCodec,The following statement contains a magic number: dvFormats = dvFormats.SubList(0' 4);
Magic Number,Lucene.Net.Index,RandomCodec,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\RandomCodec.cs,RandomCodec,The following statement contains a magic number: dvFormats.Count > 4
Magic Number,Lucene.Net.Index,RandomDocumentsWriterPerThreadPool,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\RandomDocumentsWriterPerThreadPool.cs,RandomDocumentsWriterPerThreadPool,The following statement contains a magic number: this.maxRetry = 1 + random.Next(10);
Magic Number,Lucene.Net.Index,RandomDocumentsWriterPerThreadPool,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\RandomDocumentsWriterPerThreadPool.cs,GetAndLock,The following statement contains a magic number: random.Next(20) == 0
Magic Number,Lucene.Net.Index,RandomIndexWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\RandomIndexWriter.cs,RandomIndexWriter,The following statement contains a magic number: flushAt = TestUtil.NextInt32(r' 10' 1000);
Magic Number,Lucene.Net.Index,RandomIndexWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\RandomIndexWriter.cs,RandomIndexWriter,The following statement contains a magic number: flushAt = TestUtil.NextInt32(r' 10' 1000);
Magic Number,Lucene.Net.Index,RandomIndexWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\RandomIndexWriter.cs,AddDocument,The following statement contains a magic number: r.Next(5) == 3
Magic Number,Lucene.Net.Index,RandomIndexWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\RandomIndexWriter.cs,AddDocument,The following statement contains a magic number: r.Next(5) == 3
Magic Number,Lucene.Net.Index,RandomIndexWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\RandomIndexWriter.cs,MaybeCommit,The following statement contains a magic number: flushAt += TestUtil.NextInt32(r' (int)(flushAtFactor * 10)' (int)(flushAtFactor * 1000));
Magic Number,Lucene.Net.Index,RandomIndexWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\RandomIndexWriter.cs,MaybeCommit,The following statement contains a magic number: flushAt += TestUtil.NextInt32(r' (int)(flushAtFactor * 10)' (int)(flushAtFactor * 1000));
Magic Number,Lucene.Net.Index,RandomIndexWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\RandomIndexWriter.cs,MaybeCommit,The following statement contains a magic number: flushAtFactor *= 1.05;
Magic Number,Lucene.Net.Index,RandomIndexWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\RandomIndexWriter.cs,MaybeCommit,The following statement contains a magic number: flushAtFactor < 2e6
Magic Number,Lucene.Net.Index,RandomIndexWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\RandomIndexWriter.cs,UpdateDocument,The following statement contains a magic number: r.Next(5) == 3
Magic Number,Lucene.Net.Index,RandomIndexWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\RandomIndexWriter.cs,UpdateDocument,The following statement contains a magic number: r.Next(5) == 3
Magic Number,Lucene.Net.Index,RandomIndexWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\RandomIndexWriter.cs,GetReader,The following statement contains a magic number: r.Next(20) == 2
Magic Number,Lucene.Net.Index,RandomIndexWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\RandomIndexWriter.cs,GetReader,The following statement contains a magic number: r.Next(20) == 2
Magic Number,Lucene.Net.Index,RandomIndexWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\RandomIndexWriter.cs,GetReader,The following statement contains a magic number: r.Next(5) == 1
Magic Number,Lucene.Net.Index,RandomIndexWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\RandomIndexWriter.cs,Dispose,The following statement contains a magic number: getReaderCalled == false && r.Next(8) == 2
Magic Number,Lucene.Net.Index,RandomIndexWriter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\RandomIndexWriter.cs,Dispose,The following statement contains a magic number: getReaderCalled == false && r.Next(8) == 2
Magic Number,Lucene.Net.Index,TestPointAnonymousInnerClassHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\RandomIndexWriter.cs,Apply,The following statement contains a magic number: random.Next(4) == 2
Magic Number,Lucene.Net.Index,TestPointAnonymousInnerClassHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\RandomIndexWriter.cs,Apply,The following statement contains a magic number: random.Next(4) == 2
Magic Number,Lucene.Net.Index,ThreadedIndexingAndSearchingTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\ThreadedIndexingAndSearchingTestCase.cs,RunSearchThreads,The following statement contains a magic number: int numThreads = TestUtil.NextInt32(Random' 1' 5);
Magic Number,Lucene.Net.Index,ThreadedIndexingAndSearchingTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\ThreadedIndexingAndSearchingTestCase.cs,RunSearchThreads,The following statement contains a magic number: AtomicInt32 totTermCount = new AtomicInt32(100);
Magic Number,Lucene.Net.Index,ThreadedIndexingAndSearchingTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\ThreadedIndexingAndSearchingTestCase.cs,RunTest,The following statement contains a magic number: ((TieredMergePolicy)mp).MaxMergedSegmentMB = 5000.0;
Magic Number,Lucene.Net.Index,ThreadedIndexingAndSearchingTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\ThreadedIndexingAndSearchingTestCase.cs,RunTest,The following statement contains a magic number: int NUM_INDEX_THREADS = TestUtil.NextInt32(LuceneTestCase.Random' 2' 4);
Magic Number,Lucene.Net.Index,ThreadedIndexingAndSearchingTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\ThreadedIndexingAndSearchingTestCase.cs,RunTest,The following statement contains a magic number: int NUM_INDEX_THREADS = TestUtil.NextInt32(LuceneTestCase.Random' 2' 4);
Magic Number,Lucene.Net.Index,ThreadedIndexingAndSearchingTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\ThreadedIndexingAndSearchingTestCase.cs,RunTest,The following statement contains a magic number: int RUN_TIME_SEC = LuceneTestCase.TEST_NIGHTLY ? 300 : RANDOM_MULTIPLIER;
Magic Number,Lucene.Net.Index,ThreadedIndexingAndSearchingTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\ThreadedIndexingAndSearchingTestCase.cs,RunTest,The following statement contains a magic number: long stopTime = Environment.TickCount + (RUN_TIME_SEC * 1000);
Magic Number,Lucene.Net.Index,ThreadedIndexingAndSearchingTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\ThreadedIndexingAndSearchingTestCase.cs,RunTest,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,Lucene.Net.Index,ThreadedIndexingAndSearchingTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\ThreadedIndexingAndSearchingTestCase.cs,RunTest,The following statement contains a magic number: TopDocs hits = s.Search(new TermQuery(new Term("packID"' subDocs.PackID))' 20);
Magic Number,Lucene.Net.Index,ThreadedIndexingAndSearchingTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\ThreadedIndexingAndSearchingTestCase.cs,RunQuery,The following statement contains a magic number: s.Search(q' 10);
Magic Number,Lucene.Net.Index,ThreadedIndexingAndSearchingTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\ThreadedIndexingAndSearchingTestCase.cs,RunQuery,The following statement contains a magic number: int hitCount = s.Search(q' null' 10' new Sort(new SortField("title"' SortFieldType.STRING))).TotalHits;
Magic Number,Lucene.Net.Index,ThreadedIndexingAndSearchingTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\ThreadedIndexingAndSearchingTestCase.cs,RunQuery,The following statement contains a magic number: int hitCount2 = s.Search(q' null' 10' dvSort).TotalHits;
Magic Number,Lucene.Net.Index,IndexReaderWarmerAnonymousInnerClassHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\ThreadedIndexingAndSearchingTestCase.cs,Warm,The following statement contains a magic number: int inc = Math.Max(1' maxDoc / 50);
Magic Number,Lucene.Net.Index,IndexReaderWarmerAnonymousInnerClassHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Index\ThreadedIndexingAndSearchingTestCase.cs,Warm,The following statement contains a magic number: sum += searcher.Search(new TermQuery(new Term("body"' "united"))' 10).TotalHits;
Magic Number,Lucene.Net.Search,CheckHits,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Search\CheckHits.cs,CheckHitCollector,The following statement contains a magic number: i < 2
Magic Number,Lucene.Net.Search,CheckHits,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Search\CheckHits.cs,DoCheckHits,The following statement contains a magic number: ScoreDoc[] hits = searcher.Search(query' 1000).ScoreDocs;
Magic Number,Lucene.Net.Search,CheckHits,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Search\CheckHits.cs,CheckEqual,The following statement contains a magic number: const float scoreTolerance = 1.0e-6f;
Magic Number,Lucene.Net.Search,QueryUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Search\QueryUtils.cs,CheckHashEquals,The following statement contains a magic number: q3.Boost = 7.21792348f;
Magic Number,Lucene.Net.Search,QueryUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Search\QueryUtils.cs,WrapUnderlyingReader,The following statement contains a magic number: IndexReader[] readers = new IndexReader[] {                  edge < 0 ? r : emptyReaders[0]'                  emptyReaders[0]'                  new FCInvisibleMultiReader(edge < 0 ? emptyReaders[4] : emptyReaders[0]'                       emptyReaders[0]'                       0 == edge ? r : emptyReaders[0])'                  0 < edge ? emptyReaders[0] : emptyReaders[7]'                  emptyReaders[0]'                  new FCInvisibleMultiReader(0 < edge ? emptyReaders[0] : emptyReaders[5]'                       emptyReaders[0]'                       0 < edge ? r : emptyReaders[0])              };
Magic Number,Lucene.Net.Search,QueryUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Search\QueryUtils.cs,WrapUnderlyingReader,The following statement contains a magic number: IndexReader[] readers = new IndexReader[] {                  edge < 0 ? r : emptyReaders[0]'                  emptyReaders[0]'                  new FCInvisibleMultiReader(edge < 0 ? emptyReaders[4] : emptyReaders[0]'                       emptyReaders[0]'                       0 == edge ? r : emptyReaders[0])'                  0 < edge ? emptyReaders[0] : emptyReaders[7]'                  emptyReaders[0]'                  new FCInvisibleMultiReader(0 < edge ? emptyReaders[0] : emptyReaders[5]'                       emptyReaders[0]'                       0 < edge ? r : emptyReaders[0])              };
Magic Number,Lucene.Net.Search,QueryUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Search\QueryUtils.cs,WrapUnderlyingReader,The following statement contains a magic number: IndexReader[] readers = new IndexReader[] {                  edge < 0 ? r : emptyReaders[0]'                  emptyReaders[0]'                  new FCInvisibleMultiReader(edge < 0 ? emptyReaders[4] : emptyReaders[0]'                       emptyReaders[0]'                       0 == edge ? r : emptyReaders[0])'                  0 < edge ? emptyReaders[0] : emptyReaders[7]'                  emptyReaders[0]'                  new FCInvisibleMultiReader(0 < edge ? emptyReaders[0] : emptyReaders[5]'                       emptyReaders[0]'                       0 < edge ? r : emptyReaders[0])              };
Magic Number,Lucene.Net.Search,QueryUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Search\QueryUtils.cs,LoadEmptyReaders,The following statement contains a magic number: var emptyReaders = new IndexReader[8];
Magic Number,Lucene.Net.Search,QueryUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Search\QueryUtils.cs,LoadEmptyReaders,The following statement contains a magic number: emptyReaders[4] = MakeEmptyIndex(new Random(0)' 4);
Magic Number,Lucene.Net.Search,QueryUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Search\QueryUtils.cs,LoadEmptyReaders,The following statement contains a magic number: emptyReaders[4] = MakeEmptyIndex(new Random(0)' 4);
Magic Number,Lucene.Net.Search,QueryUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Search\QueryUtils.cs,LoadEmptyReaders,The following statement contains a magic number: emptyReaders[5] = MakeEmptyIndex(new Random(0)' 5);
Magic Number,Lucene.Net.Search,QueryUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Search\QueryUtils.cs,LoadEmptyReaders,The following statement contains a magic number: emptyReaders[5] = MakeEmptyIndex(new Random(0)' 5);
Magic Number,Lucene.Net.Search,QueryUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Search\QueryUtils.cs,LoadEmptyReaders,The following statement contains a magic number: emptyReaders[7] = MakeEmptyIndex(new Random(0)' 7);
Magic Number,Lucene.Net.Search,QueryUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Search\QueryUtils.cs,LoadEmptyReaders,The following statement contains a magic number: emptyReaders[7] = MakeEmptyIndex(new Random(0)' 7);
Magic Number,Lucene.Net.Search,QueryUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Search\QueryUtils.cs,CheckSkipTo,The following statement contains a magic number: const float maxDiff = 1e-5f;
Magic Number,Lucene.Net.Search,QueryUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Search\QueryUtils.cs,CheckFirstSkipTo,The following statement contains a magic number: const float maxDiff = 1e-3f;
Magic Number,Lucene.Net.Search,CollectorAnonymousInnerClassHelper2,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Search\QueryUtils.cs,Collect,The following statement contains a magic number: i < doc && Environment.TickCount - startMS > 5
Magic Number,Lucene.Net.Search,RandomOrderCollector,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Search\RandomOrderCollector.cs,RandomOrderCollector,The following statement contains a magic number: bufferSize = 1 + random.Next(100);
Magic Number,Lucene.Net.Search,RandomSimilarityProvider,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Search\RandomSimilarityProvider.cs,RandomSimilarityProvider,The following statement contains a magic number: coordType = random.Next(3);
Magic Number,Lucene.Net.Search,RandomSimilarityProvider,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Search\RandomSimilarityProvider.cs,LoadAllSims,The following statement contains a magic number: allSims.Add(new LMJelinekMercerSimilarity(0.1f));
Magic Number,Lucene.Net.Search,RandomSimilarityProvider,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Search\RandomSimilarityProvider.cs,LoadAllSims,The following statement contains a magic number: allSims.Add(new LMJelinekMercerSimilarity(0.7f));
Magic Number,Lucene.Net.Search,SearchEquivalenceTestBase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Search\SearchEquivalenceTestBase.cs,BeforeClass,The following statement contains a magic number: int numDocs = AtLeast(1000);
Magic Number,Lucene.Net.Search,SearchEquivalenceTestBase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Search\SearchEquivalenceTestBase.cs,BeforeClass,The following statement contains a magic number: int numDeletes = numDocs / 20;
Magic Number,Lucene.Net.Search,SearchEquivalenceTestBase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Search\SearchEquivalenceTestBase.cs,RandomFieldContents,The following statement contains a magic number: int numTerms = Random.Next(15);
Magic Number,Lucene.Net.Search,ShardSearchingTestBase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Search\ShardSearchingTestBase.cs,Start,The following statement contains a magic number: endTimeNanos = Time.NanoTime() + (long)(runTimeSec * 1000000000);
Magic Number,Lucene.Net.Search,ChangeIndices,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Search\ShardSearchingTestBase.cs,Run,The following statement contains a magic number: int what = Random.Next(3);
Magic Number,Lucene.Net.Search,ChangeIndices,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Search\ShardSearchingTestBase.cs,Run,The following statement contains a magic number: Random.Next(17) == 12
Magic Number,Lucene.Net.Search,ChangeIndices,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Search\ShardSearchingTestBase.cs,Run,The following statement contains a magic number: Random.Next(17) == 12
Magic Number,Lucene.Net.Search,ChangeIndices,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Search\ShardSearchingTestBase.cs,Run,The following statement contains a magic number: Random.Next(17) == 12
Magic Number,Lucene.Net.Search,ChangeIndices,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Search\ShardSearchingTestBase.cs,Run,The following statement contains a magic number: Random.Next(17) == 12
Magic Number,Lucene.Net.Store,BaseDirectoryTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\BaseDirectoryTestCase.cs,TestByte,The following statement contains a magic number: output.WriteByte((byte)128);
Magic Number,Lucene.Net.Store,BaseDirectoryTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\BaseDirectoryTestCase.cs,TestByte,The following statement contains a magic number: assertEquals((byte)128' input.ReadByte());
Magic Number,Lucene.Net.Store,BaseDirectoryTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\BaseDirectoryTestCase.cs,TestInt16,The following statement contains a magic number: output.WriteInt16((short)-20);
Magic Number,Lucene.Net.Store,BaseDirectoryTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\BaseDirectoryTestCase.cs,TestInt16,The following statement contains a magic number: assertEquals(2' input.Length);
Magic Number,Lucene.Net.Store,BaseDirectoryTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\BaseDirectoryTestCase.cs,TestInt16,The following statement contains a magic number: assertEquals((short)-20' input.ReadInt16());
Magic Number,Lucene.Net.Store,BaseDirectoryTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\BaseDirectoryTestCase.cs,TestInt32,The following statement contains a magic number: output.WriteInt32(-500);
Magic Number,Lucene.Net.Store,BaseDirectoryTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\BaseDirectoryTestCase.cs,TestInt32,The following statement contains a magic number: assertEquals(4' input.Length);
Magic Number,Lucene.Net.Store,BaseDirectoryTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\BaseDirectoryTestCase.cs,TestInt32,The following statement contains a magic number: assertEquals(-500' input.ReadInt32());
Magic Number,Lucene.Net.Store,BaseDirectoryTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\BaseDirectoryTestCase.cs,TestInt64,The following statement contains a magic number: output.WriteInt64(-5000);
Magic Number,Lucene.Net.Store,BaseDirectoryTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\BaseDirectoryTestCase.cs,TestInt64,The following statement contains a magic number: assertEquals(8' input.Length);
Magic Number,Lucene.Net.Store,BaseDirectoryTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\BaseDirectoryTestCase.cs,TestInt64,The following statement contains a magic number: assertEquals(-5000L' input.ReadInt64());
Magic Number,Lucene.Net.Store,BaseDirectoryTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\BaseDirectoryTestCase.cs,TestString,The following statement contains a magic number: assertEquals(7' input.Length);
Magic Number,Lucene.Net.Store,BaseDirectoryTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\BaseDirectoryTestCase.cs,TestVInt32,The following statement contains a magic number: output.WriteVInt32(500);
Magic Number,Lucene.Net.Store,BaseDirectoryTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\BaseDirectoryTestCase.cs,TestVInt32,The following statement contains a magic number: assertEquals(2' input.Length);
Magic Number,Lucene.Net.Store,BaseDirectoryTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\BaseDirectoryTestCase.cs,TestVInt32,The following statement contains a magic number: assertEquals(500' input.ReadVInt32());
Magic Number,Lucene.Net.Store,BaseDirectoryTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\BaseDirectoryTestCase.cs,TestVInt64,The following statement contains a magic number: assertEquals(9' input.Length);
Magic Number,Lucene.Net.Store,BaseDirectoryTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\BaseDirectoryTestCase.cs,TestChecksum,The following statement contains a magic number: int numBytes = Random.nextInt(20000);
Magic Number,Lucene.Net.Store,BaseDirectoryTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\BaseDirectoryTestCase.cs,TestSeekToEOFThenBack,The following statement contains a magic number: int bufferLength = 1024;
Magic Number,Lucene.Net.Store,BaseDirectoryTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\BaseDirectoryTestCase.cs,TestSeekToEOFThenBack,The following statement contains a magic number: byte[] bytes = new byte[3 * bufferLength];
Magic Number,Lucene.Net.Store,BaseDirectoryTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\BaseDirectoryTestCase.cs,TestSeekToEOFThenBack,The following statement contains a magic number: i.Seek(2 * bufferLength - 1);
Magic Number,Lucene.Net.Store,BaseDirectoryTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\BaseDirectoryTestCase.cs,TestSeekToEOFThenBack,The following statement contains a magic number: i.Seek(3 * bufferLength);
Magic Number,Lucene.Net.Store,BaseDirectoryTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\BaseDirectoryTestCase.cs,TestSeekToEOFThenBack,The following statement contains a magic number: i.ReadBytes(bytes' 0' 2 * bufferLength);
Magic Number,Lucene.Net.Store,BaseDirectoryTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\BaseDirectoryTestCase.cs,TestIllegalEOF,The following statement contains a magic number: byte[] b = new byte[1024];
Magic Number,Lucene.Net.Store,BaseDirectoryTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\BaseDirectoryTestCase.cs,TestIllegalEOF,The following statement contains a magic number: o.WriteBytes(b' 0' 1024);
Magic Number,Lucene.Net.Store,BaseDirectoryTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\BaseDirectoryTestCase.cs,TestIllegalEOF,The following statement contains a magic number: i.Seek(1024);
Magic Number,Lucene.Net.Store,BaseDirectoryTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\BaseDirectoryTestCase.cs,TestCopyBytes,The following statement contains a magic number: byte[] bytes = new byte[TestUtil.NextInt32(Random' 1' 77777)];
Magic Number,Lucene.Net.Store,BaseDirectoryTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\BaseDirectoryTestCase.cs,TestCopyBytes,The following statement contains a magic number: int size = TestUtil.NextInt32(Random' 1' 1777777);
Magic Number,Lucene.Net.Store,BaseDirectoryTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\BaseDirectoryTestCase.cs,Value,The following statement contains a magic number: return (byte)((idx % 256) * (1 + (idx / 256)));
Magic Number,Lucene.Net.Store,BaseDirectoryTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\BaseDirectoryTestCase.cs,Value,The following statement contains a magic number: return (byte)((idx % 256) * (1 + (idx / 256)));
Magic Number,Lucene.Net.Store,BaseDirectoryTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\BaseDirectoryTestCase.cs,TestCopyBytesWithThreads,The following statement contains a magic number: byte[] data = RandomBytes.RandomBytesOfLengthBetween(Random' 101' 10000);
Magic Number,Lucene.Net.Store,BaseDirectoryTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\BaseDirectoryTestCase.cs,TestCopyBytesWithThreads,The following statement contains a magic number: byte[] data = RandomBytes.RandomBytesOfLengthBetween(Random' 101' 10000);
Magic Number,Lucene.Net.Store,BaseDirectoryTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\BaseDirectoryTestCase.cs,TestCopyBytesWithThreads,The following statement contains a magic number: outputHeader.CopyBytes(input' 100);
Magic Number,Lucene.Net.Store,BaseDirectoryTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\BaseDirectoryTestCase.cs,TestCopyBytesWithThreads,The following statement contains a magic number: int threads = 10;
Magic Number,Lucene.Net.Store,BaseDirectoryTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\BaseDirectoryTestCase.cs,TestCopyBytesWithThreads,The following statement contains a magic number: System.Array.Copy(data' 0' dataCopy' 0' 100);
Magic Number,Lucene.Net.Store,BaseDirectoryTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\BaseDirectoryTestCase.cs,TestCopyBytesWithThreads,The following statement contains a magic number: copiedData.ReadBytes(dataCopy' 100' data.Length - 100);
Magic Number,Lucene.Net.Store,BaseDirectoryTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\BaseDirectoryTestCase.cs,TestCopyBytesWithThreads,The following statement contains a magic number: copiedData.ReadBytes(dataCopy' 100' data.Length - 100);
Magic Number,Lucene.Net.Store,BaseDirectoryTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\BaseDirectoryTestCase.cs,TestLargeWrites,The following statement contains a magic number: byte[] largeBuf = new byte[2048];
Magic Number,Lucene.Net.Store,BaseDirectoryTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\BaseDirectoryTestCase.cs,TestSeekToEndOfFile,The following statement contains a magic number: i < 1024
Magic Number,Lucene.Net.Store,BaseDirectoryTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\BaseDirectoryTestCase.cs,TestSeekToEndOfFile,The following statement contains a magic number: @in.Seek(100);
Magic Number,Lucene.Net.Store,BaseDirectoryTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\BaseDirectoryTestCase.cs,TestSeekToEndOfFile,The following statement contains a magic number: assertEquals(100' @in.GetFilePointer());
Magic Number,Lucene.Net.Store,BaseDirectoryTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\BaseDirectoryTestCase.cs,TestSeekToEndOfFile,The following statement contains a magic number: @in.Seek(1024);
Magic Number,Lucene.Net.Store,BaseDirectoryTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\BaseDirectoryTestCase.cs,TestSeekToEndOfFile,The following statement contains a magic number: assertEquals(1024' @in.GetFilePointer());
Magic Number,Lucene.Net.Store,CopyBytesThread,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\BaseDirectoryTestCase.cs,Run,The following statement contains a magic number: dst.CopyBytes(src' src.Length - 100);
Magic Number,Lucene.Net.Store,MockDirectoryWrapper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\MockDirectoryWrapper.cs,MockDirectoryWrapper,The following statement contains a magic number: this.throttledOutput = new ThrottledIndexOutput(ThrottledIndexOutput.MBitsToBytes(40 + randomState.Next(10))' 5 + randomState.Next(5)' null);
Magic Number,Lucene.Net.Store,MockDirectoryWrapper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\MockDirectoryWrapper.cs,MockDirectoryWrapper,The following statement contains a magic number: this.throttledOutput = new ThrottledIndexOutput(ThrottledIndexOutput.MBitsToBytes(40 + randomState.Next(10))' 5 + randomState.Next(5)' null);
Magic Number,Lucene.Net.Store,MockDirectoryWrapper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\MockDirectoryWrapper.cs,MockDirectoryWrapper,The following statement contains a magic number: this.throttledOutput = new ThrottledIndexOutput(ThrottledIndexOutput.MBitsToBytes(40 + randomState.Next(10))' 5 + randomState.Next(5)' null);
Magic Number,Lucene.Net.Store,MockDirectoryWrapper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\MockDirectoryWrapper.cs,MockDirectoryWrapper,The following statement contains a magic number: this.throttledOutput = new ThrottledIndexOutput(ThrottledIndexOutput.MBitsToBytes(40 + randomState.Next(10))' 5 + randomState.Next(5)' null);
Magic Number,Lucene.Net.Store,MockDirectoryWrapper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\MockDirectoryWrapper.cs,Crash,The following statement contains a magic number: int damage = randomState.Next(5);
Magic Number,Lucene.Net.Store,MockDirectoryWrapper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\MockDirectoryWrapper.cs,CreateOutput,The following statement contains a magic number: randomState.Next(10) == 0
Magic Number,Lucene.Net.Store,MockDirectoryWrapper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\MockDirectoryWrapper.cs,CreateOutput,The following statement contains a magic number: throttling == Throttling.ALWAYS || (throttling == Throttling.SOMETIMES && randomState.Next(50) == 0) && !(m_input is RateLimitedDirectoryWrapper)
Magic Number,Lucene.Net.Store,MockDirectoryWrapper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\MockDirectoryWrapper.cs,OpenInput,The following statement contains a magic number: int randomInt = randomState.Next(500);
Magic Number,Lucene.Net.Store,MockIndexOutputWrapper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\MockIndexOutputWrapper.cs,WriteBytes,The following statement contains a magic number: int half = len / 2;
Magic Number,Lucene.Net.Store,MockIndexOutputWrapper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\MockIndexOutputWrapper.cs,WriteBytes,The following statement contains a magic number: dir.randomState.Next(200) == 0
Magic Number,Lucene.Net.Store,SlowClosingMockIndexInputWrapper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\SlowClosingMockIndexInputWrapper.cs,Dispose,The following statement contains a magic number: Thread.Sleep(50);
Magic Number,Lucene.Net.Store,SlowOpeningMockIndexInputWrapper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Store\SlowOpeningMockIndexInputWrapper.cs,SlowOpeningMockIndexInputWrapper,The following statement contains a magic number: Thread.Sleep(50);
Magic Number,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,AtLeast,The following statement contains a magic number: int min = (TEST_NIGHTLY ? 2 * i : i) * RANDOM_MULTIPLIER;
Magic Number,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,AtLeast,The following statement contains a magic number: int max = min + (min / 2);
Magic Number,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,Rarely,The following statement contains a magic number: int p = TEST_NIGHTLY ? 10 : 1;
Magic Number,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,Rarely,The following statement contains a magic number: int min = 100 - Math.Min(p' 50);
Magic Number,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,Rarely,The following statement contains a magic number: int min = 100 - Math.Min(p' 50);
Magic Number,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,Rarely,The following statement contains a magic number: return random.Next(100) >= min;
Magic Number,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,NewIndexWriterConfig,The following statement contains a magic number: c.SetMaxBufferedDocs(TestUtil.NextInt32(random' 2' 15));
Magic Number,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,NewIndexWriterConfig,The following statement contains a magic number: c.SetMaxBufferedDocs(TestUtil.NextInt32(random' 2' 15));
Magic Number,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,NewIndexWriterConfig,The following statement contains a magic number: c.SetTermIndexInterval(random.NextBoolean() ? TestUtil.NextInt32(random' 1' 31) : TestUtil.NextInt32(random' 129' 1000));
Magic Number,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,NewIndexWriterConfig,The following statement contains a magic number: c.SetTermIndexInterval(random.NextBoolean() ? TestUtil.NextInt32(random' 1' 31) : TestUtil.NextInt32(random' 129' 1000));
Magic Number,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,NewIndexWriterConfig,The following statement contains a magic number: c.SetTermIndexInterval(random.NextBoolean() ? TestUtil.NextInt32(random' 1' 31) : TestUtil.NextInt32(random' 129' 1000));
Magic Number,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,NewIndexWriterConfig,The following statement contains a magic number: int maxNumThreadStates = Rarely(random) ? TestUtil.NextInt32(random' 5' 20) : TestUtil.NextInt32(random' 1' 4);
Magic Number,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,NewIndexWriterConfig,The following statement contains a magic number: int maxNumThreadStates = Rarely(random) ? TestUtil.NextInt32(random' 5' 20) : TestUtil.NextInt32(random' 1' 4);
Magic Number,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,NewIndexWriterConfig,The following statement contains a magic number: int maxNumThreadStates = Rarely(random) ? TestUtil.NextInt32(random' 5' 20) : TestUtil.NextInt32(random' 1' 4);
Magic Number,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,NewIndexWriterConfig,The following statement contains a magic number: c.SetReaderTermsIndexDivisor(TestUtil.NextInt32(random' 1' 4));
Magic Number,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,NewLogMergePolicy,The following statement contains a magic number: logmp.MergeFactor = TestUtil.NextInt32(random' 2' 9);
Magic Number,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,NewLogMergePolicy,The following statement contains a magic number: logmp.MergeFactor = TestUtil.NextInt32(random' 2' 9);
Magic Number,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,ConfigureRandom,The following statement contains a magic number: mergePolicy.NoCFSRatio = 0.1 + random.NextDouble() * 0.8;
Magic Number,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,ConfigureRandom,The following statement contains a magic number: mergePolicy.NoCFSRatio = 0.1 + random.NextDouble() * 0.8;
Magic Number,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,ConfigureRandom,The following statement contains a magic number: mergePolicy.MaxCFSSegmentSizeMB = 0.2 + random.NextDouble() * 2.0;
Magic Number,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,ConfigureRandom,The following statement contains a magic number: mergePolicy.MaxCFSSegmentSizeMB = 0.2 + random.NextDouble() * 2.0;
Magic Number,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,NewTieredMergePolicy,The following statement contains a magic number: tmp.MaxMergeAtOnce = TestUtil.NextInt32(random' 2' 9);
Magic Number,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,NewTieredMergePolicy,The following statement contains a magic number: tmp.MaxMergeAtOnce = TestUtil.NextInt32(random' 2' 9);
Magic Number,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,NewTieredMergePolicy,The following statement contains a magic number: tmp.MaxMergeAtOnceExplicit = TestUtil.NextInt32(random' 2' 9);
Magic Number,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,NewTieredMergePolicy,The following statement contains a magic number: tmp.MaxMergeAtOnceExplicit = TestUtil.NextInt32(random' 2' 9);
Magic Number,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,NewTieredMergePolicy,The following statement contains a magic number: tmp.MaxMergedSegmentMB = 0.2 + random.NextDouble() * 2.0;
Magic Number,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,NewTieredMergePolicy,The following statement contains a magic number: tmp.MaxMergedSegmentMB = 0.2 + random.NextDouble() * 2.0;
Magic Number,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,NewTieredMergePolicy,The following statement contains a magic number: tmp.FloorSegmentMB = 0.2 + random.NextDouble() * 2.0;
Magic Number,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,NewTieredMergePolicy,The following statement contains a magic number: tmp.FloorSegmentMB = 0.2 + random.NextDouble() * 2.0;
Magic Number,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,NewTieredMergePolicy,The following statement contains a magic number: tmp.ForceMergeDeletesPctAllowed = 0.0 + random.NextDouble() * 30.0;
Magic Number,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,NewTieredMergePolicy,The following statement contains a magic number: tmp.SegmentsPerTier = TestUtil.NextInt32(random' 2' 20);
Magic Number,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,NewTieredMergePolicy,The following statement contains a magic number: tmp.SegmentsPerTier = TestUtil.NextInt32(random' 2' 20);
Magic Number,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,NewTieredMergePolicy,The following statement contains a magic number: tmp.ReclaimDeletesWeight = random.NextDouble() * 4;
Magic Number,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,WrapDirectory,The following statement contains a magic number: double maxMBPerSec = 10 + 5 * (random.NextDouble() - 0.5);
Magic Number,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,WrapDirectory,The following statement contains a magic number: double maxMBPerSec = 10 + 5 * (random.NextDouble() - 0.5);
Magic Number,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,WrapDirectory,The following statement contains a magic number: double maxMBPerSec = 10 + 5 * (random.NextDouble() - 0.5);
Magic Number,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,WrapDirectory,The following statement contains a magic number: switch (random.Next(10))                  {                      case 3: // sometimes rate limit on flush                          rateLimitedDirectoryWrapper.SetMaxWriteMBPerSec(maxMBPerSec' IOContext.UsageContext.FLUSH);                          break;                        case 2: // sometimes rate limit flush & merge                          rateLimitedDirectoryWrapper.SetMaxWriteMBPerSec(maxMBPerSec' IOContext.UsageContext.FLUSH);                          rateLimitedDirectoryWrapper.SetMaxWriteMBPerSec(maxMBPerSec' IOContext.UsageContext.MERGE);                          break;                        default:                          rateLimitedDirectoryWrapper.SetMaxWriteMBPerSec(maxMBPerSec' IOContext.UsageContext.MERGE);                          break;                  }
Magic Number,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,WrapDirectory,The following statement contains a magic number: switch (random.Next(10))                  {                      case 3: // sometimes rate limit on flush                          rateLimitedDirectoryWrapper.SetMaxWriteMBPerSec(maxMBPerSec' IOContext.UsageContext.FLUSH);                          break;                        case 2: // sometimes rate limit flush & merge                          rateLimitedDirectoryWrapper.SetMaxWriteMBPerSec(maxMBPerSec' IOContext.UsageContext.FLUSH);                          rateLimitedDirectoryWrapper.SetMaxWriteMBPerSec(maxMBPerSec' IOContext.UsageContext.MERGE);                          break;                        default:                          rateLimitedDirectoryWrapper.SetMaxWriteMBPerSec(maxMBPerSec' IOContext.UsageContext.MERGE);                          break;                  }
Magic Number,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,WrapDirectory,The following statement contains a magic number: switch (random.Next(10))                  {                      case 3: // sometimes rate limit on flush                          rateLimitedDirectoryWrapper.SetMaxWriteMBPerSec(maxMBPerSec' IOContext.UsageContext.FLUSH);                          break;                        case 2: // sometimes rate limit flush & merge                          rateLimitedDirectoryWrapper.SetMaxWriteMBPerSec(maxMBPerSec' IOContext.UsageContext.FLUSH);                          rateLimitedDirectoryWrapper.SetMaxWriteMBPerSec(maxMBPerSec' IOContext.UsageContext.MERGE);                          break;                        default:                          rateLimitedDirectoryWrapper.SetMaxWriteMBPerSec(maxMBPerSec' IOContext.UsageContext.MERGE);                          break;                  }
Magic Number,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,MaybeWrapReader,The following statement contains a magic number: switch (random.Next(5))                      {                          case 0:                              r = SlowCompositeReaderWrapper.Wrap(r);                              break;                            case 1:                              // will create no FC insanity in atomic case' as ParallelAtomicReader has own cache key:                              r = (r is AtomicReader) ? (IndexReader)new ParallelAtomicReader((AtomicReader)r) : new ParallelCompositeReader((CompositeReader)r);                              break;                            case 2:                              // Häckidy-Hick-Hack: a standard MultiReader will cause FC insanity' so we use                              // QueryUtils' reader with a fake cache key' so insanity checker cannot walk                              // along our reader:                              r = new FCInvisibleMultiReader(r);                              break;                            case 3:                              AtomicReader ar = SlowCompositeReaderWrapper.Wrap(r);                              IList<string> allFields = new List<string>();                              foreach (FieldInfo fi in ar.FieldInfos)                              {                                  allFields.Add(fi.Name);                              }                              Collections.Shuffle(allFields);                              int end = allFields.Count == 0 ? 0 : random.Next(allFields.Count);                              HashSet<string> fields = new HashSet<string>(allFields.SubList(0' end));                              // will create no FC insanity as ParallelAtomicReader has own cache key:                              r = new ParallelAtomicReader(new FieldFilterAtomicReader(ar' fields' false)' new FieldFilterAtomicReader(ar' fields' true));                              break;                            case 4:                              // Häckidy-Hick-Hack: a standard Reader will cause FC insanity' so we use                              // QueryUtils' reader with a fake cache key' so insanity checker cannot walk                              // along our reader:                              if (r is AtomicReader)                              {                                  r = new AssertingAtomicReader((AtomicReader)r);                              }                              else if (r is DirectoryReader)                              {                                  r = new AssertingDirectoryReader((DirectoryReader)r);                              }                              break;                            default:                              Assert.Fail("should not get here");                              break;                      }
Magic Number,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,MaybeWrapReader,The following statement contains a magic number: switch (random.Next(5))                      {                          case 0:                              r = SlowCompositeReaderWrapper.Wrap(r);                              break;                            case 1:                              // will create no FC insanity in atomic case' as ParallelAtomicReader has own cache key:                              r = (r is AtomicReader) ? (IndexReader)new ParallelAtomicReader((AtomicReader)r) : new ParallelCompositeReader((CompositeReader)r);                              break;                            case 2:                              // Häckidy-Hick-Hack: a standard MultiReader will cause FC insanity' so we use                              // QueryUtils' reader with a fake cache key' so insanity checker cannot walk                              // along our reader:                              r = new FCInvisibleMultiReader(r);                              break;                            case 3:                              AtomicReader ar = SlowCompositeReaderWrapper.Wrap(r);                              IList<string> allFields = new List<string>();                              foreach (FieldInfo fi in ar.FieldInfos)                              {                                  allFields.Add(fi.Name);                              }                              Collections.Shuffle(allFields);                              int end = allFields.Count == 0 ? 0 : random.Next(allFields.Count);                              HashSet<string> fields = new HashSet<string>(allFields.SubList(0' end));                              // will create no FC insanity as ParallelAtomicReader has own cache key:                              r = new ParallelAtomicReader(new FieldFilterAtomicReader(ar' fields' false)' new FieldFilterAtomicReader(ar' fields' true));                              break;                            case 4:                              // Häckidy-Hick-Hack: a standard Reader will cause FC insanity' so we use                              // QueryUtils' reader with a fake cache key' so insanity checker cannot walk                              // along our reader:                              if (r is AtomicReader)                              {                                  r = new AssertingAtomicReader((AtomicReader)r);                              }                              else if (r is DirectoryReader)                              {                                  r = new AssertingDirectoryReader((DirectoryReader)r);                              }                              break;                            default:                              Assert.Fail("should not get here");                              break;                      }
Magic Number,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,MaybeWrapReader,The following statement contains a magic number: switch (random.Next(5))                      {                          case 0:                              r = SlowCompositeReaderWrapper.Wrap(r);                              break;                            case 1:                              // will create no FC insanity in atomic case' as ParallelAtomicReader has own cache key:                              r = (r is AtomicReader) ? (IndexReader)new ParallelAtomicReader((AtomicReader)r) : new ParallelCompositeReader((CompositeReader)r);                              break;                            case 2:                              // Häckidy-Hick-Hack: a standard MultiReader will cause FC insanity' so we use                              // QueryUtils' reader with a fake cache key' so insanity checker cannot walk                              // along our reader:                              r = new FCInvisibleMultiReader(r);                              break;                            case 3:                              AtomicReader ar = SlowCompositeReaderWrapper.Wrap(r);                              IList<string> allFields = new List<string>();                              foreach (FieldInfo fi in ar.FieldInfos)                              {                                  allFields.Add(fi.Name);                              }                              Collections.Shuffle(allFields);                              int end = allFields.Count == 0 ? 0 : random.Next(allFields.Count);                              HashSet<string> fields = new HashSet<string>(allFields.SubList(0' end));                              // will create no FC insanity as ParallelAtomicReader has own cache key:                              r = new ParallelAtomicReader(new FieldFilterAtomicReader(ar' fields' false)' new FieldFilterAtomicReader(ar' fields' true));                              break;                            case 4:                              // Häckidy-Hick-Hack: a standard Reader will cause FC insanity' so we use                              // QueryUtils' reader with a fake cache key' so insanity checker cannot walk                              // along our reader:                              if (r is AtomicReader)                              {                                  r = new AssertingAtomicReader((AtomicReader)r);                              }                              else if (r is DirectoryReader)                              {                                  r = new AssertingDirectoryReader((DirectoryReader)r);                              }                              break;                            default:                              Assert.Fail("should not get here");                              break;                      }
Magic Number,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,MaybeWrapReader,The following statement contains a magic number: switch (random.Next(5))                      {                          case 0:                              r = SlowCompositeReaderWrapper.Wrap(r);                              break;                            case 1:                              // will create no FC insanity in atomic case' as ParallelAtomicReader has own cache key:                              r = (r is AtomicReader) ? (IndexReader)new ParallelAtomicReader((AtomicReader)r) : new ParallelCompositeReader((CompositeReader)r);                              break;                            case 2:                              // Häckidy-Hick-Hack: a standard MultiReader will cause FC insanity' so we use                              // QueryUtils' reader with a fake cache key' so insanity checker cannot walk                              // along our reader:                              r = new FCInvisibleMultiReader(r);                              break;                            case 3:                              AtomicReader ar = SlowCompositeReaderWrapper.Wrap(r);                              IList<string> allFields = new List<string>();                              foreach (FieldInfo fi in ar.FieldInfos)                              {                                  allFields.Add(fi.Name);                              }                              Collections.Shuffle(allFields);                              int end = allFields.Count == 0 ? 0 : random.Next(allFields.Count);                              HashSet<string> fields = new HashSet<string>(allFields.SubList(0' end));                              // will create no FC insanity as ParallelAtomicReader has own cache key:                              r = new ParallelAtomicReader(new FieldFilterAtomicReader(ar' fields' false)' new FieldFilterAtomicReader(ar' fields' true));                              break;                            case 4:                              // Häckidy-Hick-Hack: a standard Reader will cause FC insanity' so we use                              // QueryUtils' reader with a fake cache key' so insanity checker cannot walk                              // along our reader:                              if (r is AtomicReader)                              {                                  r = new AssertingAtomicReader((AtomicReader)r);                              }                              else if (r is DirectoryReader)                              {                                  r = new AssertingDirectoryReader((DirectoryReader)r);                              }                              break;                            default:                              Assert.Fail("should not get here");                              break;                      }
Magic Number,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,NewIOContext,The following statement contains a magic number: int randomNumDocs = random.Next(4192);
Magic Number,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,NewIOContext,The following statement contains a magic number: int size = random.Next(512) * randomNumDocs;
Magic Number,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,NewSearcher,The following statement contains a magic number: random.Next(500) == 0 && r is AtomicReader
Magic Number,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,AssertTermsEquals,The following statement contains a magic number: int numIntersections = AtLeast(3);
Magic Number,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,AssertDocsSkippingEquals,The following statement contains a magic number: int skipInterval = 16;
Magic Number,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,AssertPositionsSkippingEquals,The following statement contains a magic number: int skipInterval = 16;
Magic Number,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,AssertTermsSeekingEquals,The following statement contains a magic number: int numTests = AtLeast(20);
Magic Number,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,AssertTermsSeekingEquals,The following statement contains a magic number: int code = random.Next(10);
Magic Number,Lucene.Net.Util,LuceneTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\JavaCompatibility\LuceneTestCase.cs,AssertTermsSeekingEquals,The following statement contains a magic number: numPasses < 10 && tests.Count < numTests
Magic Number,Lucene.Net.Util,BaseDocIdSetTestCase<T>,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\BaseDocIdSetTestCase.cs,Test2Bits,The following statement contains a magic number: BitArray bs = new BitArray(2);
Magic Number,Lucene.Net.Util,BaseDocIdSetTestCase<T>,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\BaseDocIdSetTestCase.cs,Test2Bits,The following statement contains a magic number: T copy = CopyOf(bs' 2);
Magic Number,Lucene.Net.Util,BaseDocIdSetTestCase<T>,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\BaseDocIdSetTestCase.cs,Test2Bits,The following statement contains a magic number: AssertEquals(2' bs' copy);
Magic Number,Lucene.Net.Util,BaseDocIdSetTestCase<T>,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\BaseDocIdSetTestCase.cs,TestAgainstBitSet,The following statement contains a magic number: int numBits = TestUtil.NextInt32(Random' 100' 1 << 20);
Magic Number,Lucene.Net.Util,BaseDocIdSetTestCase<T>,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\BaseDocIdSetTestCase.cs,TestAgainstBitSet,The following statement contains a magic number: int numBits = TestUtil.NextInt32(Random' 100' 1 << 20);
Magic Number,Lucene.Net.Util,BaseDocIdSetTestCase<T>,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\BaseDocIdSetTestCase.cs,TestAgainstBitSet,The following statement contains a magic number: new float[] { 0f' 0.0001f' (float)Random.NextDouble() / 2' 0.9f' 1f }
Magic Number,Lucene.Net.Util,BaseDocIdSetTestCase<T>,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\BaseDocIdSetTestCase.cs,TestAgainstBitSet,The following statement contains a magic number: new float[] { 0f' 0.0001f' (float)Random.NextDouble() / 2' 0.9f' 1f }
Magic Number,Lucene.Net.Util,BaseDocIdSetTestCase<T>,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\BaseDocIdSetTestCase.cs,TestAgainstBitSet,The following statement contains a magic number: new float[] { 0f' 0.0001f' (float)Random.NextDouble() / 2' 0.9f' 1f }
Magic Number,Lucene.Net.Util,BaseDocIdSetTestCase<T>,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\BaseDocIdSetTestCase.cs,TestAgainstBitSet,The following statement contains a magic number: inc < 1000
Magic Number,Lucene.Net.Util,English,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\English.cs,Int64ToEnglish,The following statement contains a magic number: Int64ToEnglish(i / 1000000000000000000L' result);
Magic Number,Lucene.Net.Util,English,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\English.cs,Int64ToEnglish,The following statement contains a magic number: i = i % 1000000000000000000L;
Magic Number,Lucene.Net.Util,English,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\English.cs,Int64ToEnglish,The following statement contains a magic number: i >= 1000000000000000000L
Magic Number,Lucene.Net.Util,English,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\English.cs,Int64ToEnglish,The following statement contains a magic number: Int64ToEnglish(i / 1000000000000000L' result);
Magic Number,Lucene.Net.Util,English,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\English.cs,Int64ToEnglish,The following statement contains a magic number: i = i % 1000000000000000L;
Magic Number,Lucene.Net.Util,English,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\English.cs,Int64ToEnglish,The following statement contains a magic number: i >= 1000000000000000L
Magic Number,Lucene.Net.Util,English,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\English.cs,Int64ToEnglish,The following statement contains a magic number: Int64ToEnglish(i / 1000000000000L' result);
Magic Number,Lucene.Net.Util,English,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\English.cs,Int64ToEnglish,The following statement contains a magic number: i = i % 1000000000000L;
Magic Number,Lucene.Net.Util,English,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\English.cs,Int64ToEnglish,The following statement contains a magic number: i >= 1000000000000L
Magic Number,Lucene.Net.Util,English,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\English.cs,Int64ToEnglish,The following statement contains a magic number: Int64ToEnglish(i / 1000000000' result);
Magic Number,Lucene.Net.Util,English,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\English.cs,Int64ToEnglish,The following statement contains a magic number: i = i % 1000000000;
Magic Number,Lucene.Net.Util,English,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\English.cs,Int64ToEnglish,The following statement contains a magic number: i >= 1000000000
Magic Number,Lucene.Net.Util,English,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\English.cs,Int64ToEnglish,The following statement contains a magic number: Int64ToEnglish(i / 1000000' result);
Magic Number,Lucene.Net.Util,English,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\English.cs,Int64ToEnglish,The following statement contains a magic number: i = i % 1000000;
Magic Number,Lucene.Net.Util,English,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\English.cs,Int64ToEnglish,The following statement contains a magic number: i >= 1000000
Magic Number,Lucene.Net.Util,English,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\English.cs,Int64ToEnglish,The following statement contains a magic number: Int64ToEnglish(i / 1000' result);
Magic Number,Lucene.Net.Util,English,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\English.cs,Int64ToEnglish,The following statement contains a magic number: i = i % 1000;
Magic Number,Lucene.Net.Util,English,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\English.cs,Int64ToEnglish,The following statement contains a magic number: i >= 1000
Magic Number,Lucene.Net.Util,English,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\English.cs,Int64ToEnglish,The following statement contains a magic number: Int64ToEnglish(i / 100' result);
Magic Number,Lucene.Net.Util,English,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\English.cs,Int64ToEnglish,The following statement contains a magic number: i = i % 100;
Magic Number,Lucene.Net.Util,English,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\English.cs,Int64ToEnglish,The following statement contains a magic number: i >= 100
Magic Number,Lucene.Net.Util,English,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\English.cs,Int64ToEnglish,The following statement contains a magic number: switch (((int)i) / 10)                  {                      case 9:                          result.Append("ninety");                          break;                        case 8:                          result.Append("eighty");                          break;                        case 7:                          result.Append("seventy");                          break;                        case 6:                          result.Append("sixty");                          break;                        case 5:                          result.Append("fifty");                          break;                        case 4:                          result.Append("forty");                          break;                        case 3:                          result.Append("thirty");                          break;                        case 2:                          result.Append("twenty");                          break;                  }
Magic Number,Lucene.Net.Util,English,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\English.cs,Int64ToEnglish,The following statement contains a magic number: switch (((int)i) / 10)                  {                      case 9:                          result.Append("ninety");                          break;                        case 8:                          result.Append("eighty");                          break;                        case 7:                          result.Append("seventy");                          break;                        case 6:                          result.Append("sixty");                          break;                        case 5:                          result.Append("fifty");                          break;                        case 4:                          result.Append("forty");                          break;                        case 3:                          result.Append("thirty");                          break;                        case 2:                          result.Append("twenty");                          break;                  }
Magic Number,Lucene.Net.Util,English,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\English.cs,Int64ToEnglish,The following statement contains a magic number: switch (((int)i) / 10)                  {                      case 9:                          result.Append("ninety");                          break;                        case 8:                          result.Append("eighty");                          break;                        case 7:                          result.Append("seventy");                          break;                        case 6:                          result.Append("sixty");                          break;                        case 5:                          result.Append("fifty");                          break;                        case 4:                          result.Append("forty");                          break;                        case 3:                          result.Append("thirty");                          break;                        case 2:                          result.Append("twenty");                          break;                  }
Magic Number,Lucene.Net.Util,English,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\English.cs,Int64ToEnglish,The following statement contains a magic number: switch (((int)i) / 10)                  {                      case 9:                          result.Append("ninety");                          break;                        case 8:                          result.Append("eighty");                          break;                        case 7:                          result.Append("seventy");                          break;                        case 6:                          result.Append("sixty");                          break;                        case 5:                          result.Append("fifty");                          break;                        case 4:                          result.Append("forty");                          break;                        case 3:                          result.Append("thirty");                          break;                        case 2:                          result.Append("twenty");                          break;                  }
Magic Number,Lucene.Net.Util,English,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\English.cs,Int64ToEnglish,The following statement contains a magic number: switch (((int)i) / 10)                  {                      case 9:                          result.Append("ninety");                          break;                        case 8:                          result.Append("eighty");                          break;                        case 7:                          result.Append("seventy");                          break;                        case 6:                          result.Append("sixty");                          break;                        case 5:                          result.Append("fifty");                          break;                        case 4:                          result.Append("forty");                          break;                        case 3:                          result.Append("thirty");                          break;                        case 2:                          result.Append("twenty");                          break;                  }
Magic Number,Lucene.Net.Util,English,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\English.cs,Int64ToEnglish,The following statement contains a magic number: switch (((int)i) / 10)                  {                      case 9:                          result.Append("ninety");                          break;                        case 8:                          result.Append("eighty");                          break;                        case 7:                          result.Append("seventy");                          break;                        case 6:                          result.Append("sixty");                          break;                        case 5:                          result.Append("fifty");                          break;                        case 4:                          result.Append("forty");                          break;                        case 3:                          result.Append("thirty");                          break;                        case 2:                          result.Append("twenty");                          break;                  }
Magic Number,Lucene.Net.Util,English,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\English.cs,Int64ToEnglish,The following statement contains a magic number: switch (((int)i) / 10)                  {                      case 9:                          result.Append("ninety");                          break;                        case 8:                          result.Append("eighty");                          break;                        case 7:                          result.Append("seventy");                          break;                        case 6:                          result.Append("sixty");                          break;                        case 5:                          result.Append("fifty");                          break;                        case 4:                          result.Append("forty");                          break;                        case 3:                          result.Append("thirty");                          break;                        case 2:                          result.Append("twenty");                          break;                  }
Magic Number,Lucene.Net.Util,English,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\English.cs,Int64ToEnglish,The following statement contains a magic number: switch (((int)i) / 10)                  {                      case 9:                          result.Append("ninety");                          break;                        case 8:                          result.Append("eighty");                          break;                        case 7:                          result.Append("seventy");                          break;                        case 6:                          result.Append("sixty");                          break;                        case 5:                          result.Append("fifty");                          break;                        case 4:                          result.Append("forty");                          break;                        case 3:                          result.Append("thirty");                          break;                        case 2:                          result.Append("twenty");                          break;                  }
Magic Number,Lucene.Net.Util,English,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\English.cs,Int64ToEnglish,The following statement contains a magic number: switch (((int)i) / 10)                  {                      case 9:                          result.Append("ninety");                          break;                        case 8:                          result.Append("eighty");                          break;                        case 7:                          result.Append("seventy");                          break;                        case 6:                          result.Append("sixty");                          break;                        case 5:                          result.Append("fifty");                          break;                        case 4:                          result.Append("forty");                          break;                        case 3:                          result.Append("thirty");                          break;                        case 2:                          result.Append("twenty");                          break;                  }
Magic Number,Lucene.Net.Util,English,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\English.cs,Int64ToEnglish,The following statement contains a magic number: i = i % 10;
Magic Number,Lucene.Net.Util,English,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\English.cs,Int64ToEnglish,The following statement contains a magic number: i >= 20
Magic Number,Lucene.Net.Util,English,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\English.cs,Int64ToEnglish,The following statement contains a magic number: switch ((int)i)              {                  case 19:                      result.Append("nineteen ");                      break;                    case 18:                      result.Append("eighteen ");                      break;                    case 17:                      result.Append("seventeen ");                      break;                    case 16:                      result.Append("sixteen ");                      break;                    case 15:                      result.Append("fifteen ");                      break;                    case 14:                      result.Append("fourteen ");                      break;                    case 13:                      result.Append("thirteen ");                      break;                    case 12:                      result.Append("twelve ");                      break;                    case 11:                      result.Append("eleven ");                      break;                    case 10:                      result.Append("ten ");                      break;                    case 9:                      result.Append("nine ");                      break;                    case 8:                      result.Append("eight ");                      break;                    case 7:                      result.Append("seven ");                      break;                    case 6:                      result.Append("six ");                      break;                    case 5:                      result.Append("five ");                      break;                    case 4:                      result.Append("four ");                      break;                    case 3:                      result.Append("three ");                      break;                    case 2:                      result.Append("two ");                      break;                    case 1:                      result.Append("one ");                      break;                    case 0:                      result.Append("");                      break;              }
Magic Number,Lucene.Net.Util,English,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\English.cs,Int64ToEnglish,The following statement contains a magic number: switch ((int)i)              {                  case 19:                      result.Append("nineteen ");                      break;                    case 18:                      result.Append("eighteen ");                      break;                    case 17:                      result.Append("seventeen ");                      break;                    case 16:                      result.Append("sixteen ");                      break;                    case 15:                      result.Append("fifteen ");                      break;                    case 14:                      result.Append("fourteen ");                      break;                    case 13:                      result.Append("thirteen ");                      break;                    case 12:                      result.Append("twelve ");                      break;                    case 11:                      result.Append("eleven ");                      break;                    case 10:                      result.Append("ten ");                      break;                    case 9:                      result.Append("nine ");                      break;                    case 8:                      result.Append("eight ");                      break;                    case 7:                      result.Append("seven ");                      break;                    case 6:                      result.Append("six ");                      break;                    case 5:                      result.Append("five ");                      break;                    case 4:                      result.Append("four ");                      break;                    case 3:                      result.Append("three ");                      break;                    case 2:                      result.Append("two ");                      break;                    case 1:                      result.Append("one ");                      break;                    case 0:                      result.Append("");                      break;              }
Magic Number,Lucene.Net.Util,English,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\English.cs,Int64ToEnglish,The following statement contains a magic number: switch ((int)i)              {                  case 19:                      result.Append("nineteen ");                      break;                    case 18:                      result.Append("eighteen ");                      break;                    case 17:                      result.Append("seventeen ");                      break;                    case 16:                      result.Append("sixteen ");                      break;                    case 15:                      result.Append("fifteen ");                      break;                    case 14:                      result.Append("fourteen ");                      break;                    case 13:                      result.Append("thirteen ");                      break;                    case 12:                      result.Append("twelve ");                      break;                    case 11:                      result.Append("eleven ");                      break;                    case 10:                      result.Append("ten ");                      break;                    case 9:                      result.Append("nine ");                      break;                    case 8:                      result.Append("eight ");                      break;                    case 7:                      result.Append("seven ");                      break;                    case 6:                      result.Append("six ");                      break;                    case 5:                      result.Append("five ");                      break;                    case 4:                      result.Append("four ");                      break;                    case 3:                      result.Append("three ");                      break;                    case 2:                      result.Append("two ");                      break;                    case 1:                      result.Append("one ");                      break;                    case 0:                      result.Append("");                      break;              }
Magic Number,Lucene.Net.Util,English,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\English.cs,Int64ToEnglish,The following statement contains a magic number: switch ((int)i)              {                  case 19:                      result.Append("nineteen ");                      break;                    case 18:                      result.Append("eighteen ");                      break;                    case 17:                      result.Append("seventeen ");                      break;                    case 16:                      result.Append("sixteen ");                      break;                    case 15:                      result.Append("fifteen ");                      break;                    case 14:                      result.Append("fourteen ");                      break;                    case 13:                      result.Append("thirteen ");                      break;                    case 12:                      result.Append("twelve ");                      break;                    case 11:                      result.Append("eleven ");                      break;                    case 10:                      result.Append("ten ");                      break;                    case 9:                      result.Append("nine ");                      break;                    case 8:                      result.Append("eight ");                      break;                    case 7:                      result.Append("seven ");                      break;                    case 6:                      result.Append("six ");                      break;                    case 5:                      result.Append("five ");                      break;                    case 4:                      result.Append("four ");                      break;                    case 3:                      result.Append("three ");                      break;                    case 2:                      result.Append("two ");                      break;                    case 1:                      result.Append("one ");                      break;                    case 0:                      result.Append("");                      break;              }
Magic Number,Lucene.Net.Util,English,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\English.cs,Int64ToEnglish,The following statement contains a magic number: switch ((int)i)              {                  case 19:                      result.Append("nineteen ");                      break;                    case 18:                      result.Append("eighteen ");                      break;                    case 17:                      result.Append("seventeen ");                      break;                    case 16:                      result.Append("sixteen ");                      break;                    case 15:                      result.Append("fifteen ");                      break;                    case 14:                      result.Append("fourteen ");                      break;                    case 13:                      result.Append("thirteen ");                      break;                    case 12:                      result.Append("twelve ");                      break;                    case 11:                      result.Append("eleven ");                      break;                    case 10:                      result.Append("ten ");                      break;                    case 9:                      result.Append("nine ");                      break;                    case 8:                      result.Append("eight ");                      break;                    case 7:                      result.Append("seven ");                      break;                    case 6:                      result.Append("six ");                      break;                    case 5:                      result.Append("five ");                      break;                    case 4:                      result.Append("four ");                      break;                    case 3:                      result.Append("three ");                      break;                    case 2:                      result.Append("two ");                      break;                    case 1:                      result.Append("one ");                      break;                    case 0:                      result.Append("");                      break;              }
Magic Number,Lucene.Net.Util,English,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\English.cs,Int64ToEnglish,The following statement contains a magic number: switch ((int)i)              {                  case 19:                      result.Append("nineteen ");                      break;                    case 18:                      result.Append("eighteen ");                      break;                    case 17:                      result.Append("seventeen ");                      break;                    case 16:                      result.Append("sixteen ");                      break;                    case 15:                      result.Append("fifteen ");                      break;                    case 14:                      result.Append("fourteen ");                      break;                    case 13:                      result.Append("thirteen ");                      break;                    case 12:                      result.Append("twelve ");                      break;                    case 11:                      result.Append("eleven ");                      break;                    case 10:                      result.Append("ten ");                      break;                    case 9:                      result.Append("nine ");                      break;                    case 8:                      result.Append("eight ");                      break;                    case 7:                      result.Append("seven ");                      break;                    case 6:                      result.Append("six ");                      break;                    case 5:                      result.Append("five ");                      break;                    case 4:                      result.Append("four ");                      break;                    case 3:                      result.Append("three ");                      break;                    case 2:                      result.Append("two ");                      break;                    case 1:                      result.Append("one ");                      break;                    case 0:                      result.Append("");                      break;              }
Magic Number,Lucene.Net.Util,English,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\English.cs,Int64ToEnglish,The following statement contains a magic number: switch ((int)i)              {                  case 19:                      result.Append("nineteen ");                      break;                    case 18:                      result.Append("eighteen ");                      break;                    case 17:                      result.Append("seventeen ");                      break;                    case 16:                      result.Append("sixteen ");                      break;                    case 15:                      result.Append("fifteen ");                      break;                    case 14:                      result.Append("fourteen ");                      break;                    case 13:                      result.Append("thirteen ");                      break;                    case 12:                      result.Append("twelve ");                      break;                    case 11:                      result.Append("eleven ");                      break;                    case 10:                      result.Append("ten ");                      break;                    case 9:                      result.Append("nine ");                      break;                    case 8:                      result.Append("eight ");                      break;                    case 7:                      result.Append("seven ");                      break;                    case 6:                      result.Append("six ");                      break;                    case 5:                      result.Append("five ");                      break;                    case 4:                      result.Append("four ");                      break;                    case 3:                      result.Append("three ");                      break;                    case 2:                      result.Append("two ");                      break;                    case 1:                      result.Append("one ");                      break;                    case 0:                      result.Append("");                      break;              }
Magic Number,Lucene.Net.Util,English,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\English.cs,Int64ToEnglish,The following statement contains a magic number: switch ((int)i)              {                  case 19:                      result.Append("nineteen ");                      break;                    case 18:                      result.Append("eighteen ");                      break;                    case 17:                      result.Append("seventeen ");                      break;                    case 16:                      result.Append("sixteen ");                      break;                    case 15:                      result.Append("fifteen ");                      break;                    case 14:                      result.Append("fourteen ");                      break;                    case 13:                      result.Append("thirteen ");                      break;                    case 12:                      result.Append("twelve ");                      break;                    case 11:                      result.Append("eleven ");                      break;                    case 10:                      result.Append("ten ");                      break;                    case 9:                      result.Append("nine ");                      break;                    case 8:                      result.Append("eight ");                      break;                    case 7:                      result.Append("seven ");                      break;                    case 6:                      result.Append("six ");                      break;                    case 5:                      result.Append("five ");                      break;                    case 4:                      result.Append("four ");                      break;                    case 3:                      result.Append("three ");                      break;                    case 2:                      result.Append("two ");                      break;                    case 1:                      result.Append("one ");                      break;                    case 0:                      result.Append("");                      break;              }
Magic Number,Lucene.Net.Util,English,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\English.cs,Int64ToEnglish,The following statement contains a magic number: switch ((int)i)              {                  case 19:                      result.Append("nineteen ");                      break;                    case 18:                      result.Append("eighteen ");                      break;                    case 17:                      result.Append("seventeen ");                      break;                    case 16:                      result.Append("sixteen ");                      break;                    case 15:                      result.Append("fifteen ");                      break;                    case 14:                      result.Append("fourteen ");                      break;                    case 13:                      result.Append("thirteen ");                      break;                    case 12:                      result.Append("twelve ");                      break;                    case 11:                      result.Append("eleven ");                      break;                    case 10:                      result.Append("ten ");                      break;                    case 9:                      result.Append("nine ");                      break;                    case 8:                      result.Append("eight ");                      break;                    case 7:                      result.Append("seven ");                      break;                    case 6:                      result.Append("six ");                      break;                    case 5:                      result.Append("five ");                      break;                    case 4:                      result.Append("four ");                      break;                    case 3:                      result.Append("three ");                      break;                    case 2:                      result.Append("two ");                      break;                    case 1:                      result.Append("one ");                      break;                    case 0:                      result.Append("");                      break;              }
Magic Number,Lucene.Net.Util,English,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\English.cs,Int64ToEnglish,The following statement contains a magic number: switch ((int)i)              {                  case 19:                      result.Append("nineteen ");                      break;                    case 18:                      result.Append("eighteen ");                      break;                    case 17:                      result.Append("seventeen ");                      break;                    case 16:                      result.Append("sixteen ");                      break;                    case 15:                      result.Append("fifteen ");                      break;                    case 14:                      result.Append("fourteen ");                      break;                    case 13:                      result.Append("thirteen ");                      break;                    case 12:                      result.Append("twelve ");                      break;                    case 11:                      result.Append("eleven ");                      break;                    case 10:                      result.Append("ten ");                      break;                    case 9:                      result.Append("nine ");                      break;                    case 8:                      result.Append("eight ");                      break;                    case 7:                      result.Append("seven ");                      break;                    case 6:                      result.Append("six ");                      break;                    case 5:                      result.Append("five ");                      break;                    case 4:                      result.Append("four ");                      break;                    case 3:                      result.Append("three ");                      break;                    case 2:                      result.Append("two ");                      break;                    case 1:                      result.Append("one ");                      break;                    case 0:                      result.Append("");                      break;              }
Magic Number,Lucene.Net.Util,English,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\English.cs,Int64ToEnglish,The following statement contains a magic number: switch ((int)i)              {                  case 19:                      result.Append("nineteen ");                      break;                    case 18:                      result.Append("eighteen ");                      break;                    case 17:                      result.Append("seventeen ");                      break;                    case 16:                      result.Append("sixteen ");                      break;                    case 15:                      result.Append("fifteen ");                      break;                    case 14:                      result.Append("fourteen ");                      break;                    case 13:                      result.Append("thirteen ");                      break;                    case 12:                      result.Append("twelve ");                      break;                    case 11:                      result.Append("eleven ");                      break;                    case 10:                      result.Append("ten ");                      break;                    case 9:                      result.Append("nine ");                      break;                    case 8:                      result.Append("eight ");                      break;                    case 7:                      result.Append("seven ");                      break;                    case 6:                      result.Append("six ");                      break;                    case 5:                      result.Append("five ");                      break;                    case 4:                      result.Append("four ");                      break;                    case 3:                      result.Append("three ");                      break;                    case 2:                      result.Append("two ");                      break;                    case 1:                      result.Append("one ");                      break;                    case 0:                      result.Append("");                      break;              }
Magic Number,Lucene.Net.Util,English,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\English.cs,Int64ToEnglish,The following statement contains a magic number: switch ((int)i)              {                  case 19:                      result.Append("nineteen ");                      break;                    case 18:                      result.Append("eighteen ");                      break;                    case 17:                      result.Append("seventeen ");                      break;                    case 16:                      result.Append("sixteen ");                      break;                    case 15:                      result.Append("fifteen ");                      break;                    case 14:                      result.Append("fourteen ");                      break;                    case 13:                      result.Append("thirteen ");                      break;                    case 12:                      result.Append("twelve ");                      break;                    case 11:                      result.Append("eleven ");                      break;                    case 10:                      result.Append("ten ");                      break;                    case 9:                      result.Append("nine ");                      break;                    case 8:                      result.Append("eight ");                      break;                    case 7:                      result.Append("seven ");                      break;                    case 6:                      result.Append("six ");                      break;                    case 5:                      result.Append("five ");                      break;                    case 4:                      result.Append("four ");                      break;                    case 3:                      result.Append("three ");                      break;                    case 2:                      result.Append("two ");                      break;                    case 1:                      result.Append("one ");                      break;                    case 0:                      result.Append("");                      break;              }
Magic Number,Lucene.Net.Util,English,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\English.cs,Int64ToEnglish,The following statement contains a magic number: switch ((int)i)              {                  case 19:                      result.Append("nineteen ");                      break;                    case 18:                      result.Append("eighteen ");                      break;                    case 17:                      result.Append("seventeen ");                      break;                    case 16:                      result.Append("sixteen ");                      break;                    case 15:                      result.Append("fifteen ");                      break;                    case 14:                      result.Append("fourteen ");                      break;                    case 13:                      result.Append("thirteen ");                      break;                    case 12:                      result.Append("twelve ");                      break;                    case 11:                      result.Append("eleven ");                      break;                    case 10:                      result.Append("ten ");                      break;                    case 9:                      result.Append("nine ");                      break;                    case 8:                      result.Append("eight ");                      break;                    case 7:                      result.Append("seven ");                      break;                    case 6:                      result.Append("six ");                      break;                    case 5:                      result.Append("five ");                      break;                    case 4:                      result.Append("four ");                      break;                    case 3:                      result.Append("three ");                      break;                    case 2:                      result.Append("two ");                      break;                    case 1:                      result.Append("one ");                      break;                    case 0:                      result.Append("");                      break;              }
Magic Number,Lucene.Net.Util,English,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\English.cs,Int64ToEnglish,The following statement contains a magic number: switch ((int)i)              {                  case 19:                      result.Append("nineteen ");                      break;                    case 18:                      result.Append("eighteen ");                      break;                    case 17:                      result.Append("seventeen ");                      break;                    case 16:                      result.Append("sixteen ");                      break;                    case 15:                      result.Append("fifteen ");                      break;                    case 14:                      result.Append("fourteen ");                      break;                    case 13:                      result.Append("thirteen ");                      break;                    case 12:                      result.Append("twelve ");                      break;                    case 11:                      result.Append("eleven ");                      break;                    case 10:                      result.Append("ten ");                      break;                    case 9:                      result.Append("nine ");                      break;                    case 8:                      result.Append("eight ");                      break;                    case 7:                      result.Append("seven ");                      break;                    case 6:                      result.Append("six ");                      break;                    case 5:                      result.Append("five ");                      break;                    case 4:                      result.Append("four ");                      break;                    case 3:                      result.Append("three ");                      break;                    case 2:                      result.Append("two ");                      break;                    case 1:                      result.Append("one ");                      break;                    case 0:                      result.Append("");                      break;              }
Magic Number,Lucene.Net.Util,English,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\English.cs,Int64ToEnglish,The following statement contains a magic number: switch ((int)i)              {                  case 19:                      result.Append("nineteen ");                      break;                    case 18:                      result.Append("eighteen ");                      break;                    case 17:                      result.Append("seventeen ");                      break;                    case 16:                      result.Append("sixteen ");                      break;                    case 15:                      result.Append("fifteen ");                      break;                    case 14:                      result.Append("fourteen ");                      break;                    case 13:                      result.Append("thirteen ");                      break;                    case 12:                      result.Append("twelve ");                      break;                    case 11:                      result.Append("eleven ");                      break;                    case 10:                      result.Append("ten ");                      break;                    case 9:                      result.Append("nine ");                      break;                    case 8:                      result.Append("eight ");                      break;                    case 7:                      result.Append("seven ");                      break;                    case 6:                      result.Append("six ");                      break;                    case 5:                      result.Append("five ");                      break;                    case 4:                      result.Append("four ");                      break;                    case 3:                      result.Append("three ");                      break;                    case 2:                      result.Append("two ");                      break;                    case 1:                      result.Append("one ");                      break;                    case 0:                      result.Append("");                      break;              }
Magic Number,Lucene.Net.Util,English,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\English.cs,Int64ToEnglish,The following statement contains a magic number: switch ((int)i)              {                  case 19:                      result.Append("nineteen ");                      break;                    case 18:                      result.Append("eighteen ");                      break;                    case 17:                      result.Append("seventeen ");                      break;                    case 16:                      result.Append("sixteen ");                      break;                    case 15:                      result.Append("fifteen ");                      break;                    case 14:                      result.Append("fourteen ");                      break;                    case 13:                      result.Append("thirteen ");                      break;                    case 12:                      result.Append("twelve ");                      break;                    case 11:                      result.Append("eleven ");                      break;                    case 10:                      result.Append("ten ");                      break;                    case 9:                      result.Append("nine ");                      break;                    case 8:                      result.Append("eight ");                      break;                    case 7:                      result.Append("seven ");                      break;                    case 6:                      result.Append("six ");                      break;                    case 5:                      result.Append("five ");                      break;                    case 4:                      result.Append("four ");                      break;                    case 3:                      result.Append("three ");                      break;                    case 2:                      result.Append("two ");                      break;                    case 1:                      result.Append("one ");                      break;                    case 0:                      result.Append("");                      break;              }
Magic Number,Lucene.Net.Util,English,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\English.cs,Int64ToEnglish,The following statement contains a magic number: switch ((int)i)              {                  case 19:                      result.Append("nineteen ");                      break;                    case 18:                      result.Append("eighteen ");                      break;                    case 17:                      result.Append("seventeen ");                      break;                    case 16:                      result.Append("sixteen ");                      break;                    case 15:                      result.Append("fifteen ");                      break;                    case 14:                      result.Append("fourteen ");                      break;                    case 13:                      result.Append("thirteen ");                      break;                    case 12:                      result.Append("twelve ");                      break;                    case 11:                      result.Append("eleven ");                      break;                    case 10:                      result.Append("ten ");                      break;                    case 9:                      result.Append("nine ");                      break;                    case 8:                      result.Append("eight ");                      break;                    case 7:                      result.Append("seven ");                      break;                    case 6:                      result.Append("six ");                      break;                    case 5:                      result.Append("five ");                      break;                    case 4:                      result.Append("four ");                      break;                    case 3:                      result.Append("three ");                      break;                    case 2:                      result.Append("two ");                      break;                    case 1:                      result.Append("one ");                      break;                    case 0:                      result.Append("");                      break;              }
Magic Number,Lucene.Net.Util,English,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\English.cs,Int64ToEnglish,The following statement contains a magic number: switch ((int)i)              {                  case 19:                      result.Append("nineteen ");                      break;                    case 18:                      result.Append("eighteen ");                      break;                    case 17:                      result.Append("seventeen ");                      break;                    case 16:                      result.Append("sixteen ");                      break;                    case 15:                      result.Append("fifteen ");                      break;                    case 14:                      result.Append("fourteen ");                      break;                    case 13:                      result.Append("thirteen ");                      break;                    case 12:                      result.Append("twelve ");                      break;                    case 11:                      result.Append("eleven ");                      break;                    case 10:                      result.Append("ten ");                      break;                    case 9:                      result.Append("nine ");                      break;                    case 8:                      result.Append("eight ");                      break;                    case 7:                      result.Append("seven ");                      break;                    case 6:                      result.Append("six ");                      break;                    case 5:                      result.Append("five ");                      break;                    case 4:                      result.Append("four ");                      break;                    case 3:                      result.Append("three ");                      break;                    case 2:                      result.Append("two ");                      break;                    case 1:                      result.Append("one ");                      break;                    case 0:                      result.Append("");                      break;              }
Magic Number,Lucene.Net.Util,LineFileDocs,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\LineFileDocs.cs,RandomSeekPos,The following statement contains a magic number: random == null || size <= 3L
Magic Number,Lucene.Net.Util,LineFileDocs,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\LineFileDocs.cs,RandomSeekPos,The following statement contains a magic number: return (random.NextInt64() & long.MaxValue) % (size / 3);
Magic Number,Lucene.Net.Util,LineFileDocs,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\LineFileDocs.cs,Open,The following statement contains a magic number: size = (long)(size * 2.8);
Magic Number,Lucene.Net.Util,TestRuleSetupAndRestoreClassEnv,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestRuleSetupAndRestoreClassEnv.cs,Before,The following statement contains a magic number: int randomVal = random.Next(10);
Magic Number,Lucene.Net.Util,TestRuleSetupAndRestoreClassEnv,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestRuleSetupAndRestoreClassEnv.cs,Before,The following statement contains a magic number: "Lucene3x".Equals(LuceneTestCase.TEST_CODEC' StringComparison.Ordinal) || ("random".Equals(LuceneTestCase.TEST_CODEC' StringComparison.Ordinal) &&                                                                  "random".Equals(LuceneTestCase.TEST_POSTINGSFORMAT' StringComparison.Ordinal) &&                                                                  "random".Equals(LuceneTestCase.TEST_DOCVALUESFORMAT' StringComparison.Ordinal) &&                                                                  randomVal == 3 &&                                                                  !ShouldAvoidCodec("Lucene3x"))
Magic Number,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,CheckIndex,The following statement contains a magic number: ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);
Magic Number,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,CheckReader,The following statement contains a magic number: ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);
Magic Number,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,RandomSimpleString,The following statement contains a magic number: return RandomSimpleString(r' 0' 20);
Magic Number,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,RandomUnicodeString,The following statement contains a magic number: return RandomUnicodeString(r' 20);
Magic Number,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,RandomFixedLengthUnicodeString,The following statement contains a magic number: int t = random.Next(5);
Magic Number,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,RandomRegexpishString,The following statement contains a magic number: return RandomRegexpishString(r' 20);
Magic Number,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,RandomHtmlishString,The following statement contains a magic number: int val = random.Next(25);
Magic Number,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,RandomHtmlishString,The following statement contains a magic number: switch (val)                  {                      case 0:                          sb.Append("<p>");                          break;                        case 1:                          {                              sb.Append("<");                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(RandomSimpleString(random));                              for (int j = 0; j < NextInt32(random' 0' 10); ++j)                              {                                  sb.Append(' ');                                  sb.Append(RandomSimpleString(random));                                  sb.Append(" ".Substring(NextInt32(random' 0' 1)));                                  sb.Append('=');                                  sb.Append(" ".Substring(NextInt32(random' 0' 1)));                                  sb.Append("\"".Substring(NextInt32(random' 0' 1)));                                  sb.Append(RandomSimpleString(random));                                  sb.Append("\"".Substring(NextInt32(random' 0' 1)));                              }                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append("/".Substring(NextInt32(random' 0' 1)));                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 2:                          {                              sb.Append("</");                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(RandomSimpleString(random));                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 3:                          sb.Append(">");                          break;                        case 4:                          sb.Append("</p>");                          break;                        case 5:                          sb.Append("<!--");                          break;                        case 6:                          sb.Append("<!--#");                          break;                        case 7:                          sb.Append("<script><!-- f('");                          break;                        case 8:                          sb.Append("</script>");                          break;                        case 9:                          sb.Append("<?");                          break;                        case 10:                          sb.Append("?>");                          break;                        case 11:                          sb.Append("\"");                          break;                        case 12:                          sb.Append("\\\"");                          break;                        case 13:                          sb.Append("'");                          break;                        case 14:                          sb.Append("\\'");                          break;                        case 15:                          sb.Append("-->");                          break;                        case 16:                          {                              sb.Append("&");                              switch (NextInt32(random' 0' 2))                              {                                  case 0:                                      sb.Append(RandomSimpleString(random));                                      break;                                    case 1:                                      sb.Append(HTML_CHAR_ENTITIES[random.Next(HTML_CHAR_ENTITIES.Length)]);                                      break;                              }                              sb.Append(";".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 17:                          {                              sb.Append("&#");                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append(NextInt32(random' 0' int.MaxValue - 1));                                  sb.Append(";".Substring(NextInt32(random' 0' 1)));                              }                              break;                          }                      case 18:                          {                              sb.Append("&#x");                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append(Convert.ToString(NextInt32(random' 0' int.MaxValue - 1)' 16));                                  sb.Append(";".Substring(NextInt32(random' 0' 1)));                              }                              break;                          }                        case 19:                          sb.Append(";");                          break;                        case 20:                          sb.Append(NextInt32(random' 0' int.MaxValue - 1));                          break;                        case 21:                          sb.Append("\n");                          break;                        case 22:                          sb.Append("          ".Substring(NextInt32(random' 0' 10)));                          break;                        case 23:                          {                              sb.Append("<");                              if (0 == NextInt32(random' 0' 3))                              {                                  sb.Append("          ".Substring(NextInt32(random' 1' 10)));                              }                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append("/");                                  if (0 == NextInt32(random' 0' 3))                                  {                                      sb.Append("          ".Substring(NextInt32(random' 1' 10)));                                  }                              }                              switch (NextInt32(random' 0' 3))                              {                                  case 0:                                      sb.Append(RandomlyRecaseString(random' "script"));                                      break;                                    case 1:                                      sb.Append(RandomlyRecaseString(random' "style"));                                      break;                                    case 2:                                      sb.Append(RandomlyRecaseString(random' "br"));                                      break;                                  // default: append nothing                              }                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      default:                          sb.Append(RandomSimpleString(random));                          break;                  }
Magic Number,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,RandomHtmlishString,The following statement contains a magic number: switch (val)                  {                      case 0:                          sb.Append("<p>");                          break;                        case 1:                          {                              sb.Append("<");                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(RandomSimpleString(random));                              for (int j = 0; j < NextInt32(random' 0' 10); ++j)                              {                                  sb.Append(' ');                                  sb.Append(RandomSimpleString(random));                                  sb.Append(" ".Substring(NextInt32(random' 0' 1)));                                  sb.Append('=');                                  sb.Append(" ".Substring(NextInt32(random' 0' 1)));                                  sb.Append("\"".Substring(NextInt32(random' 0' 1)));                                  sb.Append(RandomSimpleString(random));                                  sb.Append("\"".Substring(NextInt32(random' 0' 1)));                              }                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append("/".Substring(NextInt32(random' 0' 1)));                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 2:                          {                              sb.Append("</");                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(RandomSimpleString(random));                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 3:                          sb.Append(">");                          break;                        case 4:                          sb.Append("</p>");                          break;                        case 5:                          sb.Append("<!--");                          break;                        case 6:                          sb.Append("<!--#");                          break;                        case 7:                          sb.Append("<script><!-- f('");                          break;                        case 8:                          sb.Append("</script>");                          break;                        case 9:                          sb.Append("<?");                          break;                        case 10:                          sb.Append("?>");                          break;                        case 11:                          sb.Append("\"");                          break;                        case 12:                          sb.Append("\\\"");                          break;                        case 13:                          sb.Append("'");                          break;                        case 14:                          sb.Append("\\'");                          break;                        case 15:                          sb.Append("-->");                          break;                        case 16:                          {                              sb.Append("&");                              switch (NextInt32(random' 0' 2))                              {                                  case 0:                                      sb.Append(RandomSimpleString(random));                                      break;                                    case 1:                                      sb.Append(HTML_CHAR_ENTITIES[random.Next(HTML_CHAR_ENTITIES.Length)]);                                      break;                              }                              sb.Append(";".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 17:                          {                              sb.Append("&#");                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append(NextInt32(random' 0' int.MaxValue - 1));                                  sb.Append(";".Substring(NextInt32(random' 0' 1)));                              }                              break;                          }                      case 18:                          {                              sb.Append("&#x");                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append(Convert.ToString(NextInt32(random' 0' int.MaxValue - 1)' 16));                                  sb.Append(";".Substring(NextInt32(random' 0' 1)));                              }                              break;                          }                        case 19:                          sb.Append(";");                          break;                        case 20:                          sb.Append(NextInt32(random' 0' int.MaxValue - 1));                          break;                        case 21:                          sb.Append("\n");                          break;                        case 22:                          sb.Append("          ".Substring(NextInt32(random' 0' 10)));                          break;                        case 23:                          {                              sb.Append("<");                              if (0 == NextInt32(random' 0' 3))                              {                                  sb.Append("          ".Substring(NextInt32(random' 1' 10)));                              }                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append("/");                                  if (0 == NextInt32(random' 0' 3))                                  {                                      sb.Append("          ".Substring(NextInt32(random' 1' 10)));                                  }                              }                              switch (NextInt32(random' 0' 3))                              {                                  case 0:                                      sb.Append(RandomlyRecaseString(random' "script"));                                      break;                                    case 1:                                      sb.Append(RandomlyRecaseString(random' "style"));                                      break;                                    case 2:                                      sb.Append(RandomlyRecaseString(random' "br"));                                      break;                                  // default: append nothing                              }                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      default:                          sb.Append(RandomSimpleString(random));                          break;                  }
Magic Number,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,RandomHtmlishString,The following statement contains a magic number: switch (val)                  {                      case 0:                          sb.Append("<p>");                          break;                        case 1:                          {                              sb.Append("<");                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(RandomSimpleString(random));                              for (int j = 0; j < NextInt32(random' 0' 10); ++j)                              {                                  sb.Append(' ');                                  sb.Append(RandomSimpleString(random));                                  sb.Append(" ".Substring(NextInt32(random' 0' 1)));                                  sb.Append('=');                                  sb.Append(" ".Substring(NextInt32(random' 0' 1)));                                  sb.Append("\"".Substring(NextInt32(random' 0' 1)));                                  sb.Append(RandomSimpleString(random));                                  sb.Append("\"".Substring(NextInt32(random' 0' 1)));                              }                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append("/".Substring(NextInt32(random' 0' 1)));                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 2:                          {                              sb.Append("</");                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(RandomSimpleString(random));                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 3:                          sb.Append(">");                          break;                        case 4:                          sb.Append("</p>");                          break;                        case 5:                          sb.Append("<!--");                          break;                        case 6:                          sb.Append("<!--#");                          break;                        case 7:                          sb.Append("<script><!-- f('");                          break;                        case 8:                          sb.Append("</script>");                          break;                        case 9:                          sb.Append("<?");                          break;                        case 10:                          sb.Append("?>");                          break;                        case 11:                          sb.Append("\"");                          break;                        case 12:                          sb.Append("\\\"");                          break;                        case 13:                          sb.Append("'");                          break;                        case 14:                          sb.Append("\\'");                          break;                        case 15:                          sb.Append("-->");                          break;                        case 16:                          {                              sb.Append("&");                              switch (NextInt32(random' 0' 2))                              {                                  case 0:                                      sb.Append(RandomSimpleString(random));                                      break;                                    case 1:                                      sb.Append(HTML_CHAR_ENTITIES[random.Next(HTML_CHAR_ENTITIES.Length)]);                                      break;                              }                              sb.Append(";".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 17:                          {                              sb.Append("&#");                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append(NextInt32(random' 0' int.MaxValue - 1));                                  sb.Append(";".Substring(NextInt32(random' 0' 1)));                              }                              break;                          }                      case 18:                          {                              sb.Append("&#x");                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append(Convert.ToString(NextInt32(random' 0' int.MaxValue - 1)' 16));                                  sb.Append(";".Substring(NextInt32(random' 0' 1)));                              }                              break;                          }                        case 19:                          sb.Append(";");                          break;                        case 20:                          sb.Append(NextInt32(random' 0' int.MaxValue - 1));                          break;                        case 21:                          sb.Append("\n");                          break;                        case 22:                          sb.Append("          ".Substring(NextInt32(random' 0' 10)));                          break;                        case 23:                          {                              sb.Append("<");                              if (0 == NextInt32(random' 0' 3))                              {                                  sb.Append("          ".Substring(NextInt32(random' 1' 10)));                              }                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append("/");                                  if (0 == NextInt32(random' 0' 3))                                  {                                      sb.Append("          ".Substring(NextInt32(random' 1' 10)));                                  }                              }                              switch (NextInt32(random' 0' 3))                              {                                  case 0:                                      sb.Append(RandomlyRecaseString(random' "script"));                                      break;                                    case 1:                                      sb.Append(RandomlyRecaseString(random' "style"));                                      break;                                    case 2:                                      sb.Append(RandomlyRecaseString(random' "br"));                                      break;                                  // default: append nothing                              }                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      default:                          sb.Append(RandomSimpleString(random));                          break;                  }
Magic Number,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,RandomHtmlishString,The following statement contains a magic number: switch (val)                  {                      case 0:                          sb.Append("<p>");                          break;                        case 1:                          {                              sb.Append("<");                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(RandomSimpleString(random));                              for (int j = 0; j < NextInt32(random' 0' 10); ++j)                              {                                  sb.Append(' ');                                  sb.Append(RandomSimpleString(random));                                  sb.Append(" ".Substring(NextInt32(random' 0' 1)));                                  sb.Append('=');                                  sb.Append(" ".Substring(NextInt32(random' 0' 1)));                                  sb.Append("\"".Substring(NextInt32(random' 0' 1)));                                  sb.Append(RandomSimpleString(random));                                  sb.Append("\"".Substring(NextInt32(random' 0' 1)));                              }                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append("/".Substring(NextInt32(random' 0' 1)));                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 2:                          {                              sb.Append("</");                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(RandomSimpleString(random));                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 3:                          sb.Append(">");                          break;                        case 4:                          sb.Append("</p>");                          break;                        case 5:                          sb.Append("<!--");                          break;                        case 6:                          sb.Append("<!--#");                          break;                        case 7:                          sb.Append("<script><!-- f('");                          break;                        case 8:                          sb.Append("</script>");                          break;                        case 9:                          sb.Append("<?");                          break;                        case 10:                          sb.Append("?>");                          break;                        case 11:                          sb.Append("\"");                          break;                        case 12:                          sb.Append("\\\"");                          break;                        case 13:                          sb.Append("'");                          break;                        case 14:                          sb.Append("\\'");                          break;                        case 15:                          sb.Append("-->");                          break;                        case 16:                          {                              sb.Append("&");                              switch (NextInt32(random' 0' 2))                              {                                  case 0:                                      sb.Append(RandomSimpleString(random));                                      break;                                    case 1:                                      sb.Append(HTML_CHAR_ENTITIES[random.Next(HTML_CHAR_ENTITIES.Length)]);                                      break;                              }                              sb.Append(";".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 17:                          {                              sb.Append("&#");                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append(NextInt32(random' 0' int.MaxValue - 1));                                  sb.Append(";".Substring(NextInt32(random' 0' 1)));                              }                              break;                          }                      case 18:                          {                              sb.Append("&#x");                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append(Convert.ToString(NextInt32(random' 0' int.MaxValue - 1)' 16));                                  sb.Append(";".Substring(NextInt32(random' 0' 1)));                              }                              break;                          }                        case 19:                          sb.Append(";");                          break;                        case 20:                          sb.Append(NextInt32(random' 0' int.MaxValue - 1));                          break;                        case 21:                          sb.Append("\n");                          break;                        case 22:                          sb.Append("          ".Substring(NextInt32(random' 0' 10)));                          break;                        case 23:                          {                              sb.Append("<");                              if (0 == NextInt32(random' 0' 3))                              {                                  sb.Append("          ".Substring(NextInt32(random' 1' 10)));                              }                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append("/");                                  if (0 == NextInt32(random' 0' 3))                                  {                                      sb.Append("          ".Substring(NextInt32(random' 1' 10)));                                  }                              }                              switch (NextInt32(random' 0' 3))                              {                                  case 0:                                      sb.Append(RandomlyRecaseString(random' "script"));                                      break;                                    case 1:                                      sb.Append(RandomlyRecaseString(random' "style"));                                      break;                                    case 2:                                      sb.Append(RandomlyRecaseString(random' "br"));                                      break;                                  // default: append nothing                              }                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      default:                          sb.Append(RandomSimpleString(random));                          break;                  }
Magic Number,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,RandomHtmlishString,The following statement contains a magic number: switch (val)                  {                      case 0:                          sb.Append("<p>");                          break;                        case 1:                          {                              sb.Append("<");                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(RandomSimpleString(random));                              for (int j = 0; j < NextInt32(random' 0' 10); ++j)                              {                                  sb.Append(' ');                                  sb.Append(RandomSimpleString(random));                                  sb.Append(" ".Substring(NextInt32(random' 0' 1)));                                  sb.Append('=');                                  sb.Append(" ".Substring(NextInt32(random' 0' 1)));                                  sb.Append("\"".Substring(NextInt32(random' 0' 1)));                                  sb.Append(RandomSimpleString(random));                                  sb.Append("\"".Substring(NextInt32(random' 0' 1)));                              }                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append("/".Substring(NextInt32(random' 0' 1)));                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 2:                          {                              sb.Append("</");                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(RandomSimpleString(random));                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 3:                          sb.Append(">");                          break;                        case 4:                          sb.Append("</p>");                          break;                        case 5:                          sb.Append("<!--");                          break;                        case 6:                          sb.Append("<!--#");                          break;                        case 7:                          sb.Append("<script><!-- f('");                          break;                        case 8:                          sb.Append("</script>");                          break;                        case 9:                          sb.Append("<?");                          break;                        case 10:                          sb.Append("?>");                          break;                        case 11:                          sb.Append("\"");                          break;                        case 12:                          sb.Append("\\\"");                          break;                        case 13:                          sb.Append("'");                          break;                        case 14:                          sb.Append("\\'");                          break;                        case 15:                          sb.Append("-->");                          break;                        case 16:                          {                              sb.Append("&");                              switch (NextInt32(random' 0' 2))                              {                                  case 0:                                      sb.Append(RandomSimpleString(random));                                      break;                                    case 1:                                      sb.Append(HTML_CHAR_ENTITIES[random.Next(HTML_CHAR_ENTITIES.Length)]);                                      break;                              }                              sb.Append(";".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 17:                          {                              sb.Append("&#");                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append(NextInt32(random' 0' int.MaxValue - 1));                                  sb.Append(";".Substring(NextInt32(random' 0' 1)));                              }                              break;                          }                      case 18:                          {                              sb.Append("&#x");                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append(Convert.ToString(NextInt32(random' 0' int.MaxValue - 1)' 16));                                  sb.Append(";".Substring(NextInt32(random' 0' 1)));                              }                              break;                          }                        case 19:                          sb.Append(";");                          break;                        case 20:                          sb.Append(NextInt32(random' 0' int.MaxValue - 1));                          break;                        case 21:                          sb.Append("\n");                          break;                        case 22:                          sb.Append("          ".Substring(NextInt32(random' 0' 10)));                          break;                        case 23:                          {                              sb.Append("<");                              if (0 == NextInt32(random' 0' 3))                              {                                  sb.Append("          ".Substring(NextInt32(random' 1' 10)));                              }                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append("/");                                  if (0 == NextInt32(random' 0' 3))                                  {                                      sb.Append("          ".Substring(NextInt32(random' 1' 10)));                                  }                              }                              switch (NextInt32(random' 0' 3))                              {                                  case 0:                                      sb.Append(RandomlyRecaseString(random' "script"));                                      break;                                    case 1:                                      sb.Append(RandomlyRecaseString(random' "style"));                                      break;                                    case 2:                                      sb.Append(RandomlyRecaseString(random' "br"));                                      break;                                  // default: append nothing                              }                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      default:                          sb.Append(RandomSimpleString(random));                          break;                  }
Magic Number,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,RandomHtmlishString,The following statement contains a magic number: switch (val)                  {                      case 0:                          sb.Append("<p>");                          break;                        case 1:                          {                              sb.Append("<");                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(RandomSimpleString(random));                              for (int j = 0; j < NextInt32(random' 0' 10); ++j)                              {                                  sb.Append(' ');                                  sb.Append(RandomSimpleString(random));                                  sb.Append(" ".Substring(NextInt32(random' 0' 1)));                                  sb.Append('=');                                  sb.Append(" ".Substring(NextInt32(random' 0' 1)));                                  sb.Append("\"".Substring(NextInt32(random' 0' 1)));                                  sb.Append(RandomSimpleString(random));                                  sb.Append("\"".Substring(NextInt32(random' 0' 1)));                              }                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append("/".Substring(NextInt32(random' 0' 1)));                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 2:                          {                              sb.Append("</");                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(RandomSimpleString(random));                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 3:                          sb.Append(">");                          break;                        case 4:                          sb.Append("</p>");                          break;                        case 5:                          sb.Append("<!--");                          break;                        case 6:                          sb.Append("<!--#");                          break;                        case 7:                          sb.Append("<script><!-- f('");                          break;                        case 8:                          sb.Append("</script>");                          break;                        case 9:                          sb.Append("<?");                          break;                        case 10:                          sb.Append("?>");                          break;                        case 11:                          sb.Append("\"");                          break;                        case 12:                          sb.Append("\\\"");                          break;                        case 13:                          sb.Append("'");                          break;                        case 14:                          sb.Append("\\'");                          break;                        case 15:                          sb.Append("-->");                          break;                        case 16:                          {                              sb.Append("&");                              switch (NextInt32(random' 0' 2))                              {                                  case 0:                                      sb.Append(RandomSimpleString(random));                                      break;                                    case 1:                                      sb.Append(HTML_CHAR_ENTITIES[random.Next(HTML_CHAR_ENTITIES.Length)]);                                      break;                              }                              sb.Append(";".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 17:                          {                              sb.Append("&#");                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append(NextInt32(random' 0' int.MaxValue - 1));                                  sb.Append(";".Substring(NextInt32(random' 0' 1)));                              }                              break;                          }                      case 18:                          {                              sb.Append("&#x");                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append(Convert.ToString(NextInt32(random' 0' int.MaxValue - 1)' 16));                                  sb.Append(";".Substring(NextInt32(random' 0' 1)));                              }                              break;                          }                        case 19:                          sb.Append(";");                          break;                        case 20:                          sb.Append(NextInt32(random' 0' int.MaxValue - 1));                          break;                        case 21:                          sb.Append("\n");                          break;                        case 22:                          sb.Append("          ".Substring(NextInt32(random' 0' 10)));                          break;                        case 23:                          {                              sb.Append("<");                              if (0 == NextInt32(random' 0' 3))                              {                                  sb.Append("          ".Substring(NextInt32(random' 1' 10)));                              }                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append("/");                                  if (0 == NextInt32(random' 0' 3))                                  {                                      sb.Append("          ".Substring(NextInt32(random' 1' 10)));                                  }                              }                              switch (NextInt32(random' 0' 3))                              {                                  case 0:                                      sb.Append(RandomlyRecaseString(random' "script"));                                      break;                                    case 1:                                      sb.Append(RandomlyRecaseString(random' "style"));                                      break;                                    case 2:                                      sb.Append(RandomlyRecaseString(random' "br"));                                      break;                                  // default: append nothing                              }                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      default:                          sb.Append(RandomSimpleString(random));                          break;                  }
Magic Number,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,RandomHtmlishString,The following statement contains a magic number: switch (val)                  {                      case 0:                          sb.Append("<p>");                          break;                        case 1:                          {                              sb.Append("<");                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(RandomSimpleString(random));                              for (int j = 0; j < NextInt32(random' 0' 10); ++j)                              {                                  sb.Append(' ');                                  sb.Append(RandomSimpleString(random));                                  sb.Append(" ".Substring(NextInt32(random' 0' 1)));                                  sb.Append('=');                                  sb.Append(" ".Substring(NextInt32(random' 0' 1)));                                  sb.Append("\"".Substring(NextInt32(random' 0' 1)));                                  sb.Append(RandomSimpleString(random));                                  sb.Append("\"".Substring(NextInt32(random' 0' 1)));                              }                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append("/".Substring(NextInt32(random' 0' 1)));                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 2:                          {                              sb.Append("</");                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(RandomSimpleString(random));                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 3:                          sb.Append(">");                          break;                        case 4:                          sb.Append("</p>");                          break;                        case 5:                          sb.Append("<!--");                          break;                        case 6:                          sb.Append("<!--#");                          break;                        case 7:                          sb.Append("<script><!-- f('");                          break;                        case 8:                          sb.Append("</script>");                          break;                        case 9:                          sb.Append("<?");                          break;                        case 10:                          sb.Append("?>");                          break;                        case 11:                          sb.Append("\"");                          break;                        case 12:                          sb.Append("\\\"");                          break;                        case 13:                          sb.Append("'");                          break;                        case 14:                          sb.Append("\\'");                          break;                        case 15:                          sb.Append("-->");                          break;                        case 16:                          {                              sb.Append("&");                              switch (NextInt32(random' 0' 2))                              {                                  case 0:                                      sb.Append(RandomSimpleString(random));                                      break;                                    case 1:                                      sb.Append(HTML_CHAR_ENTITIES[random.Next(HTML_CHAR_ENTITIES.Length)]);                                      break;                              }                              sb.Append(";".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 17:                          {                              sb.Append("&#");                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append(NextInt32(random' 0' int.MaxValue - 1));                                  sb.Append(";".Substring(NextInt32(random' 0' 1)));                              }                              break;                          }                      case 18:                          {                              sb.Append("&#x");                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append(Convert.ToString(NextInt32(random' 0' int.MaxValue - 1)' 16));                                  sb.Append(";".Substring(NextInt32(random' 0' 1)));                              }                              break;                          }                        case 19:                          sb.Append(";");                          break;                        case 20:                          sb.Append(NextInt32(random' 0' int.MaxValue - 1));                          break;                        case 21:                          sb.Append("\n");                          break;                        case 22:                          sb.Append("          ".Substring(NextInt32(random' 0' 10)));                          break;                        case 23:                          {                              sb.Append("<");                              if (0 == NextInt32(random' 0' 3))                              {                                  sb.Append("          ".Substring(NextInt32(random' 1' 10)));                              }                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append("/");                                  if (0 == NextInt32(random' 0' 3))                                  {                                      sb.Append("          ".Substring(NextInt32(random' 1' 10)));                                  }                              }                              switch (NextInt32(random' 0' 3))                              {                                  case 0:                                      sb.Append(RandomlyRecaseString(random' "script"));                                      break;                                    case 1:                                      sb.Append(RandomlyRecaseString(random' "style"));                                      break;                                    case 2:                                      sb.Append(RandomlyRecaseString(random' "br"));                                      break;                                  // default: append nothing                              }                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      default:                          sb.Append(RandomSimpleString(random));                          break;                  }
Magic Number,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,RandomHtmlishString,The following statement contains a magic number: switch (val)                  {                      case 0:                          sb.Append("<p>");                          break;                        case 1:                          {                              sb.Append("<");                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(RandomSimpleString(random));                              for (int j = 0; j < NextInt32(random' 0' 10); ++j)                              {                                  sb.Append(' ');                                  sb.Append(RandomSimpleString(random));                                  sb.Append(" ".Substring(NextInt32(random' 0' 1)));                                  sb.Append('=');                                  sb.Append(" ".Substring(NextInt32(random' 0' 1)));                                  sb.Append("\"".Substring(NextInt32(random' 0' 1)));                                  sb.Append(RandomSimpleString(random));                                  sb.Append("\"".Substring(NextInt32(random' 0' 1)));                              }                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append("/".Substring(NextInt32(random' 0' 1)));                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 2:                          {                              sb.Append("</");                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(RandomSimpleString(random));                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 3:                          sb.Append(">");                          break;                        case 4:                          sb.Append("</p>");                          break;                        case 5:                          sb.Append("<!--");                          break;                        case 6:                          sb.Append("<!--#");                          break;                        case 7:                          sb.Append("<script><!-- f('");                          break;                        case 8:                          sb.Append("</script>");                          break;                        case 9:                          sb.Append("<?");                          break;                        case 10:                          sb.Append("?>");                          break;                        case 11:                          sb.Append("\"");                          break;                        case 12:                          sb.Append("\\\"");                          break;                        case 13:                          sb.Append("'");                          break;                        case 14:                          sb.Append("\\'");                          break;                        case 15:                          sb.Append("-->");                          break;                        case 16:                          {                              sb.Append("&");                              switch (NextInt32(random' 0' 2))                              {                                  case 0:                                      sb.Append(RandomSimpleString(random));                                      break;                                    case 1:                                      sb.Append(HTML_CHAR_ENTITIES[random.Next(HTML_CHAR_ENTITIES.Length)]);                                      break;                              }                              sb.Append(";".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 17:                          {                              sb.Append("&#");                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append(NextInt32(random' 0' int.MaxValue - 1));                                  sb.Append(";".Substring(NextInt32(random' 0' 1)));                              }                              break;                          }                      case 18:                          {                              sb.Append("&#x");                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append(Convert.ToString(NextInt32(random' 0' int.MaxValue - 1)' 16));                                  sb.Append(";".Substring(NextInt32(random' 0' 1)));                              }                              break;                          }                        case 19:                          sb.Append(";");                          break;                        case 20:                          sb.Append(NextInt32(random' 0' int.MaxValue - 1));                          break;                        case 21:                          sb.Append("\n");                          break;                        case 22:                          sb.Append("          ".Substring(NextInt32(random' 0' 10)));                          break;                        case 23:                          {                              sb.Append("<");                              if (0 == NextInt32(random' 0' 3))                              {                                  sb.Append("          ".Substring(NextInt32(random' 1' 10)));                              }                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append("/");                                  if (0 == NextInt32(random' 0' 3))                                  {                                      sb.Append("          ".Substring(NextInt32(random' 1' 10)));                                  }                              }                              switch (NextInt32(random' 0' 3))                              {                                  case 0:                                      sb.Append(RandomlyRecaseString(random' "script"));                                      break;                                    case 1:                                      sb.Append(RandomlyRecaseString(random' "style"));                                      break;                                    case 2:                                      sb.Append(RandomlyRecaseString(random' "br"));                                      break;                                  // default: append nothing                              }                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      default:                          sb.Append(RandomSimpleString(random));                          break;                  }
Magic Number,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,RandomHtmlishString,The following statement contains a magic number: switch (val)                  {                      case 0:                          sb.Append("<p>");                          break;                        case 1:                          {                              sb.Append("<");                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(RandomSimpleString(random));                              for (int j = 0; j < NextInt32(random' 0' 10); ++j)                              {                                  sb.Append(' ');                                  sb.Append(RandomSimpleString(random));                                  sb.Append(" ".Substring(NextInt32(random' 0' 1)));                                  sb.Append('=');                                  sb.Append(" ".Substring(NextInt32(random' 0' 1)));                                  sb.Append("\"".Substring(NextInt32(random' 0' 1)));                                  sb.Append(RandomSimpleString(random));                                  sb.Append("\"".Substring(NextInt32(random' 0' 1)));                              }                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append("/".Substring(NextInt32(random' 0' 1)));                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 2:                          {                              sb.Append("</");                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(RandomSimpleString(random));                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 3:                          sb.Append(">");                          break;                        case 4:                          sb.Append("</p>");                          break;                        case 5:                          sb.Append("<!--");                          break;                        case 6:                          sb.Append("<!--#");                          break;                        case 7:                          sb.Append("<script><!-- f('");                          break;                        case 8:                          sb.Append("</script>");                          break;                        case 9:                          sb.Append("<?");                          break;                        case 10:                          sb.Append("?>");                          break;                        case 11:                          sb.Append("\"");                          break;                        case 12:                          sb.Append("\\\"");                          break;                        case 13:                          sb.Append("'");                          break;                        case 14:                          sb.Append("\\'");                          break;                        case 15:                          sb.Append("-->");                          break;                        case 16:                          {                              sb.Append("&");                              switch (NextInt32(random' 0' 2))                              {                                  case 0:                                      sb.Append(RandomSimpleString(random));                                      break;                                    case 1:                                      sb.Append(HTML_CHAR_ENTITIES[random.Next(HTML_CHAR_ENTITIES.Length)]);                                      break;                              }                              sb.Append(";".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 17:                          {                              sb.Append("&#");                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append(NextInt32(random' 0' int.MaxValue - 1));                                  sb.Append(";".Substring(NextInt32(random' 0' 1)));                              }                              break;                          }                      case 18:                          {                              sb.Append("&#x");                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append(Convert.ToString(NextInt32(random' 0' int.MaxValue - 1)' 16));                                  sb.Append(";".Substring(NextInt32(random' 0' 1)));                              }                              break;                          }                        case 19:                          sb.Append(";");                          break;                        case 20:                          sb.Append(NextInt32(random' 0' int.MaxValue - 1));                          break;                        case 21:                          sb.Append("\n");                          break;                        case 22:                          sb.Append("          ".Substring(NextInt32(random' 0' 10)));                          break;                        case 23:                          {                              sb.Append("<");                              if (0 == NextInt32(random' 0' 3))                              {                                  sb.Append("          ".Substring(NextInt32(random' 1' 10)));                              }                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append("/");                                  if (0 == NextInt32(random' 0' 3))                                  {                                      sb.Append("          ".Substring(NextInt32(random' 1' 10)));                                  }                              }                              switch (NextInt32(random' 0' 3))                              {                                  case 0:                                      sb.Append(RandomlyRecaseString(random' "script"));                                      break;                                    case 1:                                      sb.Append(RandomlyRecaseString(random' "style"));                                      break;                                    case 2:                                      sb.Append(RandomlyRecaseString(random' "br"));                                      break;                                  // default: append nothing                              }                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      default:                          sb.Append(RandomSimpleString(random));                          break;                  }
Magic Number,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,RandomHtmlishString,The following statement contains a magic number: switch (val)                  {                      case 0:                          sb.Append("<p>");                          break;                        case 1:                          {                              sb.Append("<");                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(RandomSimpleString(random));                              for (int j = 0; j < NextInt32(random' 0' 10); ++j)                              {                                  sb.Append(' ');                                  sb.Append(RandomSimpleString(random));                                  sb.Append(" ".Substring(NextInt32(random' 0' 1)));                                  sb.Append('=');                                  sb.Append(" ".Substring(NextInt32(random' 0' 1)));                                  sb.Append("\"".Substring(NextInt32(random' 0' 1)));                                  sb.Append(RandomSimpleString(random));                                  sb.Append("\"".Substring(NextInt32(random' 0' 1)));                              }                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append("/".Substring(NextInt32(random' 0' 1)));                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 2:                          {                              sb.Append("</");                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(RandomSimpleString(random));                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 3:                          sb.Append(">");                          break;                        case 4:                          sb.Append("</p>");                          break;                        case 5:                          sb.Append("<!--");                          break;                        case 6:                          sb.Append("<!--#");                          break;                        case 7:                          sb.Append("<script><!-- f('");                          break;                        case 8:                          sb.Append("</script>");                          break;                        case 9:                          sb.Append("<?");                          break;                        case 10:                          sb.Append("?>");                          break;                        case 11:                          sb.Append("\"");                          break;                        case 12:                          sb.Append("\\\"");                          break;                        case 13:                          sb.Append("'");                          break;                        case 14:                          sb.Append("\\'");                          break;                        case 15:                          sb.Append("-->");                          break;                        case 16:                          {                              sb.Append("&");                              switch (NextInt32(random' 0' 2))                              {                                  case 0:                                      sb.Append(RandomSimpleString(random));                                      break;                                    case 1:                                      sb.Append(HTML_CHAR_ENTITIES[random.Next(HTML_CHAR_ENTITIES.Length)]);                                      break;                              }                              sb.Append(";".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 17:                          {                              sb.Append("&#");                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append(NextInt32(random' 0' int.MaxValue - 1));                                  sb.Append(";".Substring(NextInt32(random' 0' 1)));                              }                              break;                          }                      case 18:                          {                              sb.Append("&#x");                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append(Convert.ToString(NextInt32(random' 0' int.MaxValue - 1)' 16));                                  sb.Append(";".Substring(NextInt32(random' 0' 1)));                              }                              break;                          }                        case 19:                          sb.Append(";");                          break;                        case 20:                          sb.Append(NextInt32(random' 0' int.MaxValue - 1));                          break;                        case 21:                          sb.Append("\n");                          break;                        case 22:                          sb.Append("          ".Substring(NextInt32(random' 0' 10)));                          break;                        case 23:                          {                              sb.Append("<");                              if (0 == NextInt32(random' 0' 3))                              {                                  sb.Append("          ".Substring(NextInt32(random' 1' 10)));                              }                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append("/");                                  if (0 == NextInt32(random' 0' 3))                                  {                                      sb.Append("          ".Substring(NextInt32(random' 1' 10)));                                  }                              }                              switch (NextInt32(random' 0' 3))                              {                                  case 0:                                      sb.Append(RandomlyRecaseString(random' "script"));                                      break;                                    case 1:                                      sb.Append(RandomlyRecaseString(random' "style"));                                      break;                                    case 2:                                      sb.Append(RandomlyRecaseString(random' "br"));                                      break;                                  // default: append nothing                              }                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      default:                          sb.Append(RandomSimpleString(random));                          break;                  }
Magic Number,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,RandomHtmlishString,The following statement contains a magic number: switch (val)                  {                      case 0:                          sb.Append("<p>");                          break;                        case 1:                          {                              sb.Append("<");                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(RandomSimpleString(random));                              for (int j = 0; j < NextInt32(random' 0' 10); ++j)                              {                                  sb.Append(' ');                                  sb.Append(RandomSimpleString(random));                                  sb.Append(" ".Substring(NextInt32(random' 0' 1)));                                  sb.Append('=');                                  sb.Append(" ".Substring(NextInt32(random' 0' 1)));                                  sb.Append("\"".Substring(NextInt32(random' 0' 1)));                                  sb.Append(RandomSimpleString(random));                                  sb.Append("\"".Substring(NextInt32(random' 0' 1)));                              }                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append("/".Substring(NextInt32(random' 0' 1)));                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 2:                          {                              sb.Append("</");                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(RandomSimpleString(random));                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 3:                          sb.Append(">");                          break;                        case 4:                          sb.Append("</p>");                          break;                        case 5:                          sb.Append("<!--");                          break;                        case 6:                          sb.Append("<!--#");                          break;                        case 7:                          sb.Append("<script><!-- f('");                          break;                        case 8:                          sb.Append("</script>");                          break;                        case 9:                          sb.Append("<?");                          break;                        case 10:                          sb.Append("?>");                          break;                        case 11:                          sb.Append("\"");                          break;                        case 12:                          sb.Append("\\\"");                          break;                        case 13:                          sb.Append("'");                          break;                        case 14:                          sb.Append("\\'");                          break;                        case 15:                          sb.Append("-->");                          break;                        case 16:                          {                              sb.Append("&");                              switch (NextInt32(random' 0' 2))                              {                                  case 0:                                      sb.Append(RandomSimpleString(random));                                      break;                                    case 1:                                      sb.Append(HTML_CHAR_ENTITIES[random.Next(HTML_CHAR_ENTITIES.Length)]);                                      break;                              }                              sb.Append(";".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 17:                          {                              sb.Append("&#");                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append(NextInt32(random' 0' int.MaxValue - 1));                                  sb.Append(";".Substring(NextInt32(random' 0' 1)));                              }                              break;                          }                      case 18:                          {                              sb.Append("&#x");                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append(Convert.ToString(NextInt32(random' 0' int.MaxValue - 1)' 16));                                  sb.Append(";".Substring(NextInt32(random' 0' 1)));                              }                              break;                          }                        case 19:                          sb.Append(";");                          break;                        case 20:                          sb.Append(NextInt32(random' 0' int.MaxValue - 1));                          break;                        case 21:                          sb.Append("\n");                          break;                        case 22:                          sb.Append("          ".Substring(NextInt32(random' 0' 10)));                          break;                        case 23:                          {                              sb.Append("<");                              if (0 == NextInt32(random' 0' 3))                              {                                  sb.Append("          ".Substring(NextInt32(random' 1' 10)));                              }                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append("/");                                  if (0 == NextInt32(random' 0' 3))                                  {                                      sb.Append("          ".Substring(NextInt32(random' 1' 10)));                                  }                              }                              switch (NextInt32(random' 0' 3))                              {                                  case 0:                                      sb.Append(RandomlyRecaseString(random' "script"));                                      break;                                    case 1:                                      sb.Append(RandomlyRecaseString(random' "style"));                                      break;                                    case 2:                                      sb.Append(RandomlyRecaseString(random' "br"));                                      break;                                  // default: append nothing                              }                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      default:                          sb.Append(RandomSimpleString(random));                          break;                  }
Magic Number,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,RandomHtmlishString,The following statement contains a magic number: switch (val)                  {                      case 0:                          sb.Append("<p>");                          break;                        case 1:                          {                              sb.Append("<");                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(RandomSimpleString(random));                              for (int j = 0; j < NextInt32(random' 0' 10); ++j)                              {                                  sb.Append(' ');                                  sb.Append(RandomSimpleString(random));                                  sb.Append(" ".Substring(NextInt32(random' 0' 1)));                                  sb.Append('=');                                  sb.Append(" ".Substring(NextInt32(random' 0' 1)));                                  sb.Append("\"".Substring(NextInt32(random' 0' 1)));                                  sb.Append(RandomSimpleString(random));                                  sb.Append("\"".Substring(NextInt32(random' 0' 1)));                              }                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append("/".Substring(NextInt32(random' 0' 1)));                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 2:                          {                              sb.Append("</");                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(RandomSimpleString(random));                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 3:                          sb.Append(">");                          break;                        case 4:                          sb.Append("</p>");                          break;                        case 5:                          sb.Append("<!--");                          break;                        case 6:                          sb.Append("<!--#");                          break;                        case 7:                          sb.Append("<script><!-- f('");                          break;                        case 8:                          sb.Append("</script>");                          break;                        case 9:                          sb.Append("<?");                          break;                        case 10:                          sb.Append("?>");                          break;                        case 11:                          sb.Append("\"");                          break;                        case 12:                          sb.Append("\\\"");                          break;                        case 13:                          sb.Append("'");                          break;                        case 14:                          sb.Append("\\'");                          break;                        case 15:                          sb.Append("-->");                          break;                        case 16:                          {                              sb.Append("&");                              switch (NextInt32(random' 0' 2))                              {                                  case 0:                                      sb.Append(RandomSimpleString(random));                                      break;                                    case 1:                                      sb.Append(HTML_CHAR_ENTITIES[random.Next(HTML_CHAR_ENTITIES.Length)]);                                      break;                              }                              sb.Append(";".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 17:                          {                              sb.Append("&#");                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append(NextInt32(random' 0' int.MaxValue - 1));                                  sb.Append(";".Substring(NextInt32(random' 0' 1)));                              }                              break;                          }                      case 18:                          {                              sb.Append("&#x");                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append(Convert.ToString(NextInt32(random' 0' int.MaxValue - 1)' 16));                                  sb.Append(";".Substring(NextInt32(random' 0' 1)));                              }                              break;                          }                        case 19:                          sb.Append(";");                          break;                        case 20:                          sb.Append(NextInt32(random' 0' int.MaxValue - 1));                          break;                        case 21:                          sb.Append("\n");                          break;                        case 22:                          sb.Append("          ".Substring(NextInt32(random' 0' 10)));                          break;                        case 23:                          {                              sb.Append("<");                              if (0 == NextInt32(random' 0' 3))                              {                                  sb.Append("          ".Substring(NextInt32(random' 1' 10)));                              }                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append("/");                                  if (0 == NextInt32(random' 0' 3))                                  {                                      sb.Append("          ".Substring(NextInt32(random' 1' 10)));                                  }                              }                              switch (NextInt32(random' 0' 3))                              {                                  case 0:                                      sb.Append(RandomlyRecaseString(random' "script"));                                      break;                                    case 1:                                      sb.Append(RandomlyRecaseString(random' "style"));                                      break;                                    case 2:                                      sb.Append(RandomlyRecaseString(random' "br"));                                      break;                                  // default: append nothing                              }                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      default:                          sb.Append(RandomSimpleString(random));                          break;                  }
Magic Number,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,RandomHtmlishString,The following statement contains a magic number: switch (val)                  {                      case 0:                          sb.Append("<p>");                          break;                        case 1:                          {                              sb.Append("<");                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(RandomSimpleString(random));                              for (int j = 0; j < NextInt32(random' 0' 10); ++j)                              {                                  sb.Append(' ');                                  sb.Append(RandomSimpleString(random));                                  sb.Append(" ".Substring(NextInt32(random' 0' 1)));                                  sb.Append('=');                                  sb.Append(" ".Substring(NextInt32(random' 0' 1)));                                  sb.Append("\"".Substring(NextInt32(random' 0' 1)));                                  sb.Append(RandomSimpleString(random));                                  sb.Append("\"".Substring(NextInt32(random' 0' 1)));                              }                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append("/".Substring(NextInt32(random' 0' 1)));                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 2:                          {                              sb.Append("</");                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(RandomSimpleString(random));                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 3:                          sb.Append(">");                          break;                        case 4:                          sb.Append("</p>");                          break;                        case 5:                          sb.Append("<!--");                          break;                        case 6:                          sb.Append("<!--#");                          break;                        case 7:                          sb.Append("<script><!-- f('");                          break;                        case 8:                          sb.Append("</script>");                          break;                        case 9:                          sb.Append("<?");                          break;                        case 10:                          sb.Append("?>");                          break;                        case 11:                          sb.Append("\"");                          break;                        case 12:                          sb.Append("\\\"");                          break;                        case 13:                          sb.Append("'");                          break;                        case 14:                          sb.Append("\\'");                          break;                        case 15:                          sb.Append("-->");                          break;                        case 16:                          {                              sb.Append("&");                              switch (NextInt32(random' 0' 2))                              {                                  case 0:                                      sb.Append(RandomSimpleString(random));                                      break;                                    case 1:                                      sb.Append(HTML_CHAR_ENTITIES[random.Next(HTML_CHAR_ENTITIES.Length)]);                                      break;                              }                              sb.Append(";".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 17:                          {                              sb.Append("&#");                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append(NextInt32(random' 0' int.MaxValue - 1));                                  sb.Append(";".Substring(NextInt32(random' 0' 1)));                              }                              break;                          }                      case 18:                          {                              sb.Append("&#x");                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append(Convert.ToString(NextInt32(random' 0' int.MaxValue - 1)' 16));                                  sb.Append(";".Substring(NextInt32(random' 0' 1)));                              }                              break;                          }                        case 19:                          sb.Append(";");                          break;                        case 20:                          sb.Append(NextInt32(random' 0' int.MaxValue - 1));                          break;                        case 21:                          sb.Append("\n");                          break;                        case 22:                          sb.Append("          ".Substring(NextInt32(random' 0' 10)));                          break;                        case 23:                          {                              sb.Append("<");                              if (0 == NextInt32(random' 0' 3))                              {                                  sb.Append("          ".Substring(NextInt32(random' 1' 10)));                              }                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append("/");                                  if (0 == NextInt32(random' 0' 3))                                  {                                      sb.Append("          ".Substring(NextInt32(random' 1' 10)));                                  }                              }                              switch (NextInt32(random' 0' 3))                              {                                  case 0:                                      sb.Append(RandomlyRecaseString(random' "script"));                                      break;                                    case 1:                                      sb.Append(RandomlyRecaseString(random' "style"));                                      break;                                    case 2:                                      sb.Append(RandomlyRecaseString(random' "br"));                                      break;                                  // default: append nothing                              }                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      default:                          sb.Append(RandomSimpleString(random));                          break;                  }
Magic Number,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,RandomHtmlishString,The following statement contains a magic number: switch (val)                  {                      case 0:                          sb.Append("<p>");                          break;                        case 1:                          {                              sb.Append("<");                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(RandomSimpleString(random));                              for (int j = 0; j < NextInt32(random' 0' 10); ++j)                              {                                  sb.Append(' ');                                  sb.Append(RandomSimpleString(random));                                  sb.Append(" ".Substring(NextInt32(random' 0' 1)));                                  sb.Append('=');                                  sb.Append(" ".Substring(NextInt32(random' 0' 1)));                                  sb.Append("\"".Substring(NextInt32(random' 0' 1)));                                  sb.Append(RandomSimpleString(random));                                  sb.Append("\"".Substring(NextInt32(random' 0' 1)));                              }                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append("/".Substring(NextInt32(random' 0' 1)));                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 2:                          {                              sb.Append("</");                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(RandomSimpleString(random));                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 3:                          sb.Append(">");                          break;                        case 4:                          sb.Append("</p>");                          break;                        case 5:                          sb.Append("<!--");                          break;                        case 6:                          sb.Append("<!--#");                          break;                        case 7:                          sb.Append("<script><!-- f('");                          break;                        case 8:                          sb.Append("</script>");                          break;                        case 9:                          sb.Append("<?");                          break;                        case 10:                          sb.Append("?>");                          break;                        case 11:                          sb.Append("\"");                          break;                        case 12:                          sb.Append("\\\"");                          break;                        case 13:                          sb.Append("'");                          break;                        case 14:                          sb.Append("\\'");                          break;                        case 15:                          sb.Append("-->");                          break;                        case 16:                          {                              sb.Append("&");                              switch (NextInt32(random' 0' 2))                              {                                  case 0:                                      sb.Append(RandomSimpleString(random));                                      break;                                    case 1:                                      sb.Append(HTML_CHAR_ENTITIES[random.Next(HTML_CHAR_ENTITIES.Length)]);                                      break;                              }                              sb.Append(";".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 17:                          {                              sb.Append("&#");                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append(NextInt32(random' 0' int.MaxValue - 1));                                  sb.Append(";".Substring(NextInt32(random' 0' 1)));                              }                              break;                          }                      case 18:                          {                              sb.Append("&#x");                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append(Convert.ToString(NextInt32(random' 0' int.MaxValue - 1)' 16));                                  sb.Append(";".Substring(NextInt32(random' 0' 1)));                              }                              break;                          }                        case 19:                          sb.Append(";");                          break;                        case 20:                          sb.Append(NextInt32(random' 0' int.MaxValue - 1));                          break;                        case 21:                          sb.Append("\n");                          break;                        case 22:                          sb.Append("          ".Substring(NextInt32(random' 0' 10)));                          break;                        case 23:                          {                              sb.Append("<");                              if (0 == NextInt32(random' 0' 3))                              {                                  sb.Append("          ".Substring(NextInt32(random' 1' 10)));                              }                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append("/");                                  if (0 == NextInt32(random' 0' 3))                                  {                                      sb.Append("          ".Substring(NextInt32(random' 1' 10)));                                  }                              }                              switch (NextInt32(random' 0' 3))                              {                                  case 0:                                      sb.Append(RandomlyRecaseString(random' "script"));                                      break;                                    case 1:                                      sb.Append(RandomlyRecaseString(random' "style"));                                      break;                                    case 2:                                      sb.Append(RandomlyRecaseString(random' "br"));                                      break;                                  // default: append nothing                              }                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      default:                          sb.Append(RandomSimpleString(random));                          break;                  }
Magic Number,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,RandomHtmlishString,The following statement contains a magic number: switch (val)                  {                      case 0:                          sb.Append("<p>");                          break;                        case 1:                          {                              sb.Append("<");                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(RandomSimpleString(random));                              for (int j = 0; j < NextInt32(random' 0' 10); ++j)                              {                                  sb.Append(' ');                                  sb.Append(RandomSimpleString(random));                                  sb.Append(" ".Substring(NextInt32(random' 0' 1)));                                  sb.Append('=');                                  sb.Append(" ".Substring(NextInt32(random' 0' 1)));                                  sb.Append("\"".Substring(NextInt32(random' 0' 1)));                                  sb.Append(RandomSimpleString(random));                                  sb.Append("\"".Substring(NextInt32(random' 0' 1)));                              }                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append("/".Substring(NextInt32(random' 0' 1)));                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 2:                          {                              sb.Append("</");                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(RandomSimpleString(random));                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 3:                          sb.Append(">");                          break;                        case 4:                          sb.Append("</p>");                          break;                        case 5:                          sb.Append("<!--");                          break;                        case 6:                          sb.Append("<!--#");                          break;                        case 7:                          sb.Append("<script><!-- f('");                          break;                        case 8:                          sb.Append("</script>");                          break;                        case 9:                          sb.Append("<?");                          break;                        case 10:                          sb.Append("?>");                          break;                        case 11:                          sb.Append("\"");                          break;                        case 12:                          sb.Append("\\\"");                          break;                        case 13:                          sb.Append("'");                          break;                        case 14:                          sb.Append("\\'");                          break;                        case 15:                          sb.Append("-->");                          break;                        case 16:                          {                              sb.Append("&");                              switch (NextInt32(random' 0' 2))                              {                                  case 0:                                      sb.Append(RandomSimpleString(random));                                      break;                                    case 1:                                      sb.Append(HTML_CHAR_ENTITIES[random.Next(HTML_CHAR_ENTITIES.Length)]);                                      break;                              }                              sb.Append(";".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 17:                          {                              sb.Append("&#");                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append(NextInt32(random' 0' int.MaxValue - 1));                                  sb.Append(";".Substring(NextInt32(random' 0' 1)));                              }                              break;                          }                      case 18:                          {                              sb.Append("&#x");                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append(Convert.ToString(NextInt32(random' 0' int.MaxValue - 1)' 16));                                  sb.Append(";".Substring(NextInt32(random' 0' 1)));                              }                              break;                          }                        case 19:                          sb.Append(";");                          break;                        case 20:                          sb.Append(NextInt32(random' 0' int.MaxValue - 1));                          break;                        case 21:                          sb.Append("\n");                          break;                        case 22:                          sb.Append("          ".Substring(NextInt32(random' 0' 10)));                          break;                        case 23:                          {                              sb.Append("<");                              if (0 == NextInt32(random' 0' 3))                              {                                  sb.Append("          ".Substring(NextInt32(random' 1' 10)));                              }                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append("/");                                  if (0 == NextInt32(random' 0' 3))                                  {                                      sb.Append("          ".Substring(NextInt32(random' 1' 10)));                                  }                              }                              switch (NextInt32(random' 0' 3))                              {                                  case 0:                                      sb.Append(RandomlyRecaseString(random' "script"));                                      break;                                    case 1:                                      sb.Append(RandomlyRecaseString(random' "style"));                                      break;                                    case 2:                                      sb.Append(RandomlyRecaseString(random' "br"));                                      break;                                  // default: append nothing                              }                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      default:                          sb.Append(RandomSimpleString(random));                          break;                  }
Magic Number,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,RandomHtmlishString,The following statement contains a magic number: switch (val)                  {                      case 0:                          sb.Append("<p>");                          break;                        case 1:                          {                              sb.Append("<");                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(RandomSimpleString(random));                              for (int j = 0; j < NextInt32(random' 0' 10); ++j)                              {                                  sb.Append(' ');                                  sb.Append(RandomSimpleString(random));                                  sb.Append(" ".Substring(NextInt32(random' 0' 1)));                                  sb.Append('=');                                  sb.Append(" ".Substring(NextInt32(random' 0' 1)));                                  sb.Append("\"".Substring(NextInt32(random' 0' 1)));                                  sb.Append(RandomSimpleString(random));                                  sb.Append("\"".Substring(NextInt32(random' 0' 1)));                              }                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append("/".Substring(NextInt32(random' 0' 1)));                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 2:                          {                              sb.Append("</");                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(RandomSimpleString(random));                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 3:                          sb.Append(">");                          break;                        case 4:                          sb.Append("</p>");                          break;                        case 5:                          sb.Append("<!--");                          break;                        case 6:                          sb.Append("<!--#");                          break;                        case 7:                          sb.Append("<script><!-- f('");                          break;                        case 8:                          sb.Append("</script>");                          break;                        case 9:                          sb.Append("<?");                          break;                        case 10:                          sb.Append("?>");                          break;                        case 11:                          sb.Append("\"");                          break;                        case 12:                          sb.Append("\\\"");                          break;                        case 13:                          sb.Append("'");                          break;                        case 14:                          sb.Append("\\'");                          break;                        case 15:                          sb.Append("-->");                          break;                        case 16:                          {                              sb.Append("&");                              switch (NextInt32(random' 0' 2))                              {                                  case 0:                                      sb.Append(RandomSimpleString(random));                                      break;                                    case 1:                                      sb.Append(HTML_CHAR_ENTITIES[random.Next(HTML_CHAR_ENTITIES.Length)]);                                      break;                              }                              sb.Append(";".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 17:                          {                              sb.Append("&#");                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append(NextInt32(random' 0' int.MaxValue - 1));                                  sb.Append(";".Substring(NextInt32(random' 0' 1)));                              }                              break;                          }                      case 18:                          {                              sb.Append("&#x");                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append(Convert.ToString(NextInt32(random' 0' int.MaxValue - 1)' 16));                                  sb.Append(";".Substring(NextInt32(random' 0' 1)));                              }                              break;                          }                        case 19:                          sb.Append(";");                          break;                        case 20:                          sb.Append(NextInt32(random' 0' int.MaxValue - 1));                          break;                        case 21:                          sb.Append("\n");                          break;                        case 22:                          sb.Append("          ".Substring(NextInt32(random' 0' 10)));                          break;                        case 23:                          {                              sb.Append("<");                              if (0 == NextInt32(random' 0' 3))                              {                                  sb.Append("          ".Substring(NextInt32(random' 1' 10)));                              }                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append("/");                                  if (0 == NextInt32(random' 0' 3))                                  {                                      sb.Append("          ".Substring(NextInt32(random' 1' 10)));                                  }                              }                              switch (NextInt32(random' 0' 3))                              {                                  case 0:                                      sb.Append(RandomlyRecaseString(random' "script"));                                      break;                                    case 1:                                      sb.Append(RandomlyRecaseString(random' "style"));                                      break;                                    case 2:                                      sb.Append(RandomlyRecaseString(random' "br"));                                      break;                                  // default: append nothing                              }                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      default:                          sb.Append(RandomSimpleString(random));                          break;                  }
Magic Number,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,RandomHtmlishString,The following statement contains a magic number: switch (val)                  {                      case 0:                          sb.Append("<p>");                          break;                        case 1:                          {                              sb.Append("<");                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(RandomSimpleString(random));                              for (int j = 0; j < NextInt32(random' 0' 10); ++j)                              {                                  sb.Append(' ');                                  sb.Append(RandomSimpleString(random));                                  sb.Append(" ".Substring(NextInt32(random' 0' 1)));                                  sb.Append('=');                                  sb.Append(" ".Substring(NextInt32(random' 0' 1)));                                  sb.Append("\"".Substring(NextInt32(random' 0' 1)));                                  sb.Append(RandomSimpleString(random));                                  sb.Append("\"".Substring(NextInt32(random' 0' 1)));                              }                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append("/".Substring(NextInt32(random' 0' 1)));                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 2:                          {                              sb.Append("</");                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(RandomSimpleString(random));                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 3:                          sb.Append(">");                          break;                        case 4:                          sb.Append("</p>");                          break;                        case 5:                          sb.Append("<!--");                          break;                        case 6:                          sb.Append("<!--#");                          break;                        case 7:                          sb.Append("<script><!-- f('");                          break;                        case 8:                          sb.Append("</script>");                          break;                        case 9:                          sb.Append("<?");                          break;                        case 10:                          sb.Append("?>");                          break;                        case 11:                          sb.Append("\"");                          break;                        case 12:                          sb.Append("\\\"");                          break;                        case 13:                          sb.Append("'");                          break;                        case 14:                          sb.Append("\\'");                          break;                        case 15:                          sb.Append("-->");                          break;                        case 16:                          {                              sb.Append("&");                              switch (NextInt32(random' 0' 2))                              {                                  case 0:                                      sb.Append(RandomSimpleString(random));                                      break;                                    case 1:                                      sb.Append(HTML_CHAR_ENTITIES[random.Next(HTML_CHAR_ENTITIES.Length)]);                                      break;                              }                              sb.Append(";".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 17:                          {                              sb.Append("&#");                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append(NextInt32(random' 0' int.MaxValue - 1));                                  sb.Append(";".Substring(NextInt32(random' 0' 1)));                              }                              break;                          }                      case 18:                          {                              sb.Append("&#x");                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append(Convert.ToString(NextInt32(random' 0' int.MaxValue - 1)' 16));                                  sb.Append(";".Substring(NextInt32(random' 0' 1)));                              }                              break;                          }                        case 19:                          sb.Append(";");                          break;                        case 20:                          sb.Append(NextInt32(random' 0' int.MaxValue - 1));                          break;                        case 21:                          sb.Append("\n");                          break;                        case 22:                          sb.Append("          ".Substring(NextInt32(random' 0' 10)));                          break;                        case 23:                          {                              sb.Append("<");                              if (0 == NextInt32(random' 0' 3))                              {                                  sb.Append("          ".Substring(NextInt32(random' 1' 10)));                              }                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append("/");                                  if (0 == NextInt32(random' 0' 3))                                  {                                      sb.Append("          ".Substring(NextInt32(random' 1' 10)));                                  }                              }                              switch (NextInt32(random' 0' 3))                              {                                  case 0:                                      sb.Append(RandomlyRecaseString(random' "script"));                                      break;                                    case 1:                                      sb.Append(RandomlyRecaseString(random' "style"));                                      break;                                    case 2:                                      sb.Append(RandomlyRecaseString(random' "br"));                                      break;                                  // default: append nothing                              }                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      default:                          sb.Append(RandomSimpleString(random));                          break;                  }
Magic Number,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,RandomHtmlishString,The following statement contains a magic number: switch (val)                  {                      case 0:                          sb.Append("<p>");                          break;                        case 1:                          {                              sb.Append("<");                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(RandomSimpleString(random));                              for (int j = 0; j < NextInt32(random' 0' 10); ++j)                              {                                  sb.Append(' ');                                  sb.Append(RandomSimpleString(random));                                  sb.Append(" ".Substring(NextInt32(random' 0' 1)));                                  sb.Append('=');                                  sb.Append(" ".Substring(NextInt32(random' 0' 1)));                                  sb.Append("\"".Substring(NextInt32(random' 0' 1)));                                  sb.Append(RandomSimpleString(random));                                  sb.Append("\"".Substring(NextInt32(random' 0' 1)));                              }                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append("/".Substring(NextInt32(random' 0' 1)));                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 2:                          {                              sb.Append("</");                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(RandomSimpleString(random));                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 3:                          sb.Append(">");                          break;                        case 4:                          sb.Append("</p>");                          break;                        case 5:                          sb.Append("<!--");                          break;                        case 6:                          sb.Append("<!--#");                          break;                        case 7:                          sb.Append("<script><!-- f('");                          break;                        case 8:                          sb.Append("</script>");                          break;                        case 9:                          sb.Append("<?");                          break;                        case 10:                          sb.Append("?>");                          break;                        case 11:                          sb.Append("\"");                          break;                        case 12:                          sb.Append("\\\"");                          break;                        case 13:                          sb.Append("'");                          break;                        case 14:                          sb.Append("\\'");                          break;                        case 15:                          sb.Append("-->");                          break;                        case 16:                          {                              sb.Append("&");                              switch (NextInt32(random' 0' 2))                              {                                  case 0:                                      sb.Append(RandomSimpleString(random));                                      break;                                    case 1:                                      sb.Append(HTML_CHAR_ENTITIES[random.Next(HTML_CHAR_ENTITIES.Length)]);                                      break;                              }                              sb.Append(";".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 17:                          {                              sb.Append("&#");                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append(NextInt32(random' 0' int.MaxValue - 1));                                  sb.Append(";".Substring(NextInt32(random' 0' 1)));                              }                              break;                          }                      case 18:                          {                              sb.Append("&#x");                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append(Convert.ToString(NextInt32(random' 0' int.MaxValue - 1)' 16));                                  sb.Append(";".Substring(NextInt32(random' 0' 1)));                              }                              break;                          }                        case 19:                          sb.Append(";");                          break;                        case 20:                          sb.Append(NextInt32(random' 0' int.MaxValue - 1));                          break;                        case 21:                          sb.Append("\n");                          break;                        case 22:                          sb.Append("          ".Substring(NextInt32(random' 0' 10)));                          break;                        case 23:                          {                              sb.Append("<");                              if (0 == NextInt32(random' 0' 3))                              {                                  sb.Append("          ".Substring(NextInt32(random' 1' 10)));                              }                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append("/");                                  if (0 == NextInt32(random' 0' 3))                                  {                                      sb.Append("          ".Substring(NextInt32(random' 1' 10)));                                  }                              }                              switch (NextInt32(random' 0' 3))                              {                                  case 0:                                      sb.Append(RandomlyRecaseString(random' "script"));                                      break;                                    case 1:                                      sb.Append(RandomlyRecaseString(random' "style"));                                      break;                                    case 2:                                      sb.Append(RandomlyRecaseString(random' "br"));                                      break;                                  // default: append nothing                              }                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      default:                          sb.Append(RandomSimpleString(random));                          break;                  }
Magic Number,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,RandomHtmlishString,The following statement contains a magic number: switch (val)                  {                      case 0:                          sb.Append("<p>");                          break;                        case 1:                          {                              sb.Append("<");                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(RandomSimpleString(random));                              for (int j = 0; j < NextInt32(random' 0' 10); ++j)                              {                                  sb.Append(' ');                                  sb.Append(RandomSimpleString(random));                                  sb.Append(" ".Substring(NextInt32(random' 0' 1)));                                  sb.Append('=');                                  sb.Append(" ".Substring(NextInt32(random' 0' 1)));                                  sb.Append("\"".Substring(NextInt32(random' 0' 1)));                                  sb.Append(RandomSimpleString(random));                                  sb.Append("\"".Substring(NextInt32(random' 0' 1)));                              }                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append("/".Substring(NextInt32(random' 0' 1)));                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 2:                          {                              sb.Append("</");                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(RandomSimpleString(random));                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 3:                          sb.Append(">");                          break;                        case 4:                          sb.Append("</p>");                          break;                        case 5:                          sb.Append("<!--");                          break;                        case 6:                          sb.Append("<!--#");                          break;                        case 7:                          sb.Append("<script><!-- f('");                          break;                        case 8:                          sb.Append("</script>");                          break;                        case 9:                          sb.Append("<?");                          break;                        case 10:                          sb.Append("?>");                          break;                        case 11:                          sb.Append("\"");                          break;                        case 12:                          sb.Append("\\\"");                          break;                        case 13:                          sb.Append("'");                          break;                        case 14:                          sb.Append("\\'");                          break;                        case 15:                          sb.Append("-->");                          break;                        case 16:                          {                              sb.Append("&");                              switch (NextInt32(random' 0' 2))                              {                                  case 0:                                      sb.Append(RandomSimpleString(random));                                      break;                                    case 1:                                      sb.Append(HTML_CHAR_ENTITIES[random.Next(HTML_CHAR_ENTITIES.Length)]);                                      break;                              }                              sb.Append(";".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 17:                          {                              sb.Append("&#");                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append(NextInt32(random' 0' int.MaxValue - 1));                                  sb.Append(";".Substring(NextInt32(random' 0' 1)));                              }                              break;                          }                      case 18:                          {                              sb.Append("&#x");                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append(Convert.ToString(NextInt32(random' 0' int.MaxValue - 1)' 16));                                  sb.Append(";".Substring(NextInt32(random' 0' 1)));                              }                              break;                          }                        case 19:                          sb.Append(";");                          break;                        case 20:                          sb.Append(NextInt32(random' 0' int.MaxValue - 1));                          break;                        case 21:                          sb.Append("\n");                          break;                        case 22:                          sb.Append("          ".Substring(NextInt32(random' 0' 10)));                          break;                        case 23:                          {                              sb.Append("<");                              if (0 == NextInt32(random' 0' 3))                              {                                  sb.Append("          ".Substring(NextInt32(random' 1' 10)));                              }                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append("/");                                  if (0 == NextInt32(random' 0' 3))                                  {                                      sb.Append("          ".Substring(NextInt32(random' 1' 10)));                                  }                              }                              switch (NextInt32(random' 0' 3))                              {                                  case 0:                                      sb.Append(RandomlyRecaseString(random' "script"));                                      break;                                    case 1:                                      sb.Append(RandomlyRecaseString(random' "style"));                                      break;                                    case 2:                                      sb.Append(RandomlyRecaseString(random' "br"));                                      break;                                  // default: append nothing                              }                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      default:                          sb.Append(RandomSimpleString(random));                          break;                  }
Magic Number,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,RandomHtmlishString,The following statement contains a magic number: switch (val)                  {                      case 0:                          sb.Append("<p>");                          break;                        case 1:                          {                              sb.Append("<");                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(RandomSimpleString(random));                              for (int j = 0; j < NextInt32(random' 0' 10); ++j)                              {                                  sb.Append(' ');                                  sb.Append(RandomSimpleString(random));                                  sb.Append(" ".Substring(NextInt32(random' 0' 1)));                                  sb.Append('=');                                  sb.Append(" ".Substring(NextInt32(random' 0' 1)));                                  sb.Append("\"".Substring(NextInt32(random' 0' 1)));                                  sb.Append(RandomSimpleString(random));                                  sb.Append("\"".Substring(NextInt32(random' 0' 1)));                              }                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append("/".Substring(NextInt32(random' 0' 1)));                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 2:                          {                              sb.Append("</");                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(RandomSimpleString(random));                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 3:                          sb.Append(">");                          break;                        case 4:                          sb.Append("</p>");                          break;                        case 5:                          sb.Append("<!--");                          break;                        case 6:                          sb.Append("<!--#");                          break;                        case 7:                          sb.Append("<script><!-- f('");                          break;                        case 8:                          sb.Append("</script>");                          break;                        case 9:                          sb.Append("<?");                          break;                        case 10:                          sb.Append("?>");                          break;                        case 11:                          sb.Append("\"");                          break;                        case 12:                          sb.Append("\\\"");                          break;                        case 13:                          sb.Append("'");                          break;                        case 14:                          sb.Append("\\'");                          break;                        case 15:                          sb.Append("-->");                          break;                        case 16:                          {                              sb.Append("&");                              switch (NextInt32(random' 0' 2))                              {                                  case 0:                                      sb.Append(RandomSimpleString(random));                                      break;                                    case 1:                                      sb.Append(HTML_CHAR_ENTITIES[random.Next(HTML_CHAR_ENTITIES.Length)]);                                      break;                              }                              sb.Append(";".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 17:                          {                              sb.Append("&#");                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append(NextInt32(random' 0' int.MaxValue - 1));                                  sb.Append(";".Substring(NextInt32(random' 0' 1)));                              }                              break;                          }                      case 18:                          {                              sb.Append("&#x");                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append(Convert.ToString(NextInt32(random' 0' int.MaxValue - 1)' 16));                                  sb.Append(";".Substring(NextInt32(random' 0' 1)));                              }                              break;                          }                        case 19:                          sb.Append(";");                          break;                        case 20:                          sb.Append(NextInt32(random' 0' int.MaxValue - 1));                          break;                        case 21:                          sb.Append("\n");                          break;                        case 22:                          sb.Append("          ".Substring(NextInt32(random' 0' 10)));                          break;                        case 23:                          {                              sb.Append("<");                              if (0 == NextInt32(random' 0' 3))                              {                                  sb.Append("          ".Substring(NextInt32(random' 1' 10)));                              }                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append("/");                                  if (0 == NextInt32(random' 0' 3))                                  {                                      sb.Append("          ".Substring(NextInt32(random' 1' 10)));                                  }                              }                              switch (NextInt32(random' 0' 3))                              {                                  case 0:                                      sb.Append(RandomlyRecaseString(random' "script"));                                      break;                                    case 1:                                      sb.Append(RandomlyRecaseString(random' "style"));                                      break;                                    case 2:                                      sb.Append(RandomlyRecaseString(random' "br"));                                      break;                                  // default: append nothing                              }                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      default:                          sb.Append(RandomSimpleString(random));                          break;                  }
Magic Number,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,RandomHtmlishString,The following statement contains a magic number: switch (val)                  {                      case 0:                          sb.Append("<p>");                          break;                        case 1:                          {                              sb.Append("<");                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(RandomSimpleString(random));                              for (int j = 0; j < NextInt32(random' 0' 10); ++j)                              {                                  sb.Append(' ');                                  sb.Append(RandomSimpleString(random));                                  sb.Append(" ".Substring(NextInt32(random' 0' 1)));                                  sb.Append('=');                                  sb.Append(" ".Substring(NextInt32(random' 0' 1)));                                  sb.Append("\"".Substring(NextInt32(random' 0' 1)));                                  sb.Append(RandomSimpleString(random));                                  sb.Append("\"".Substring(NextInt32(random' 0' 1)));                              }                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append("/".Substring(NextInt32(random' 0' 1)));                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 2:                          {                              sb.Append("</");                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(RandomSimpleString(random));                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 3:                          sb.Append(">");                          break;                        case 4:                          sb.Append("</p>");                          break;                        case 5:                          sb.Append("<!--");                          break;                        case 6:                          sb.Append("<!--#");                          break;                        case 7:                          sb.Append("<script><!-- f('");                          break;                        case 8:                          sb.Append("</script>");                          break;                        case 9:                          sb.Append("<?");                          break;                        case 10:                          sb.Append("?>");                          break;                        case 11:                          sb.Append("\"");                          break;                        case 12:                          sb.Append("\\\"");                          break;                        case 13:                          sb.Append("'");                          break;                        case 14:                          sb.Append("\\'");                          break;                        case 15:                          sb.Append("-->");                          break;                        case 16:                          {                              sb.Append("&");                              switch (NextInt32(random' 0' 2))                              {                                  case 0:                                      sb.Append(RandomSimpleString(random));                                      break;                                    case 1:                                      sb.Append(HTML_CHAR_ENTITIES[random.Next(HTML_CHAR_ENTITIES.Length)]);                                      break;                              }                              sb.Append(";".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 17:                          {                              sb.Append("&#");                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append(NextInt32(random' 0' int.MaxValue - 1));                                  sb.Append(";".Substring(NextInt32(random' 0' 1)));                              }                              break;                          }                      case 18:                          {                              sb.Append("&#x");                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append(Convert.ToString(NextInt32(random' 0' int.MaxValue - 1)' 16));                                  sb.Append(";".Substring(NextInt32(random' 0' 1)));                              }                              break;                          }                        case 19:                          sb.Append(";");                          break;                        case 20:                          sb.Append(NextInt32(random' 0' int.MaxValue - 1));                          break;                        case 21:                          sb.Append("\n");                          break;                        case 22:                          sb.Append("          ".Substring(NextInt32(random' 0' 10)));                          break;                        case 23:                          {                              sb.Append("<");                              if (0 == NextInt32(random' 0' 3))                              {                                  sb.Append("          ".Substring(NextInt32(random' 1' 10)));                              }                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append("/");                                  if (0 == NextInt32(random' 0' 3))                                  {                                      sb.Append("          ".Substring(NextInt32(random' 1' 10)));                                  }                              }                              switch (NextInt32(random' 0' 3))                              {                                  case 0:                                      sb.Append(RandomlyRecaseString(random' "script"));                                      break;                                    case 1:                                      sb.Append(RandomlyRecaseString(random' "style"));                                      break;                                    case 2:                                      sb.Append(RandomlyRecaseString(random' "br"));                                      break;                                  // default: append nothing                              }                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      default:                          sb.Append(RandomSimpleString(random));                          break;                  }
Magic Number,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,RandomHtmlishString,The following statement contains a magic number: switch (val)                  {                      case 0:                          sb.Append("<p>");                          break;                        case 1:                          {                              sb.Append("<");                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(RandomSimpleString(random));                              for (int j = 0; j < NextInt32(random' 0' 10); ++j)                              {                                  sb.Append(' ');                                  sb.Append(RandomSimpleString(random));                                  sb.Append(" ".Substring(NextInt32(random' 0' 1)));                                  sb.Append('=');                                  sb.Append(" ".Substring(NextInt32(random' 0' 1)));                                  sb.Append("\"".Substring(NextInt32(random' 0' 1)));                                  sb.Append(RandomSimpleString(random));                                  sb.Append("\"".Substring(NextInt32(random' 0' 1)));                              }                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append("/".Substring(NextInt32(random' 0' 1)));                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 2:                          {                              sb.Append("</");                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(RandomSimpleString(random));                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 3:                          sb.Append(">");                          break;                        case 4:                          sb.Append("</p>");                          break;                        case 5:                          sb.Append("<!--");                          break;                        case 6:                          sb.Append("<!--#");                          break;                        case 7:                          sb.Append("<script><!-- f('");                          break;                        case 8:                          sb.Append("</script>");                          break;                        case 9:                          sb.Append("<?");                          break;                        case 10:                          sb.Append("?>");                          break;                        case 11:                          sb.Append("\"");                          break;                        case 12:                          sb.Append("\\\"");                          break;                        case 13:                          sb.Append("'");                          break;                        case 14:                          sb.Append("\\'");                          break;                        case 15:                          sb.Append("-->");                          break;                        case 16:                          {                              sb.Append("&");                              switch (NextInt32(random' 0' 2))                              {                                  case 0:                                      sb.Append(RandomSimpleString(random));                                      break;                                    case 1:                                      sb.Append(HTML_CHAR_ENTITIES[random.Next(HTML_CHAR_ENTITIES.Length)]);                                      break;                              }                              sb.Append(";".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 17:                          {                              sb.Append("&#");                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append(NextInt32(random' 0' int.MaxValue - 1));                                  sb.Append(";".Substring(NextInt32(random' 0' 1)));                              }                              break;                          }                      case 18:                          {                              sb.Append("&#x");                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append(Convert.ToString(NextInt32(random' 0' int.MaxValue - 1)' 16));                                  sb.Append(";".Substring(NextInt32(random' 0' 1)));                              }                              break;                          }                        case 19:                          sb.Append(";");                          break;                        case 20:                          sb.Append(NextInt32(random' 0' int.MaxValue - 1));                          break;                        case 21:                          sb.Append("\n");                          break;                        case 22:                          sb.Append("          ".Substring(NextInt32(random' 0' 10)));                          break;                        case 23:                          {                              sb.Append("<");                              if (0 == NextInt32(random' 0' 3))                              {                                  sb.Append("          ".Substring(NextInt32(random' 1' 10)));                              }                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append("/");                                  if (0 == NextInt32(random' 0' 3))                                  {                                      sb.Append("          ".Substring(NextInt32(random' 1' 10)));                                  }                              }                              switch (NextInt32(random' 0' 3))                              {                                  case 0:                                      sb.Append(RandomlyRecaseString(random' "script"));                                      break;                                    case 1:                                      sb.Append(RandomlyRecaseString(random' "style"));                                      break;                                    case 2:                                      sb.Append(RandomlyRecaseString(random' "br"));                                      break;                                  // default: append nothing                              }                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      default:                          sb.Append(RandomSimpleString(random));                          break;                  }
Magic Number,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,RandomHtmlishString,The following statement contains a magic number: switch (val)                  {                      case 0:                          sb.Append("<p>");                          break;                        case 1:                          {                              sb.Append("<");                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(RandomSimpleString(random));                              for (int j = 0; j < NextInt32(random' 0' 10); ++j)                              {                                  sb.Append(' ');                                  sb.Append(RandomSimpleString(random));                                  sb.Append(" ".Substring(NextInt32(random' 0' 1)));                                  sb.Append('=');                                  sb.Append(" ".Substring(NextInt32(random' 0' 1)));                                  sb.Append("\"".Substring(NextInt32(random' 0' 1)));                                  sb.Append(RandomSimpleString(random));                                  sb.Append("\"".Substring(NextInt32(random' 0' 1)));                              }                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append("/".Substring(NextInt32(random' 0' 1)));                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 2:                          {                              sb.Append("</");                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(RandomSimpleString(random));                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 3:                          sb.Append(">");                          break;                        case 4:                          sb.Append("</p>");                          break;                        case 5:                          sb.Append("<!--");                          break;                        case 6:                          sb.Append("<!--#");                          break;                        case 7:                          sb.Append("<script><!-- f('");                          break;                        case 8:                          sb.Append("</script>");                          break;                        case 9:                          sb.Append("<?");                          break;                        case 10:                          sb.Append("?>");                          break;                        case 11:                          sb.Append("\"");                          break;                        case 12:                          sb.Append("\\\"");                          break;                        case 13:                          sb.Append("'");                          break;                        case 14:                          sb.Append("\\'");                          break;                        case 15:                          sb.Append("-->");                          break;                        case 16:                          {                              sb.Append("&");                              switch (NextInt32(random' 0' 2))                              {                                  case 0:                                      sb.Append(RandomSimpleString(random));                                      break;                                    case 1:                                      sb.Append(HTML_CHAR_ENTITIES[random.Next(HTML_CHAR_ENTITIES.Length)]);                                      break;                              }                              sb.Append(";".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 17:                          {                              sb.Append("&#");                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append(NextInt32(random' 0' int.MaxValue - 1));                                  sb.Append(";".Substring(NextInt32(random' 0' 1)));                              }                              break;                          }                      case 18:                          {                              sb.Append("&#x");                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append(Convert.ToString(NextInt32(random' 0' int.MaxValue - 1)' 16));                                  sb.Append(";".Substring(NextInt32(random' 0' 1)));                              }                              break;                          }                        case 19:                          sb.Append(";");                          break;                        case 20:                          sb.Append(NextInt32(random' 0' int.MaxValue - 1));                          break;                        case 21:                          sb.Append("\n");                          break;                        case 22:                          sb.Append("          ".Substring(NextInt32(random' 0' 10)));                          break;                        case 23:                          {                              sb.Append("<");                              if (0 == NextInt32(random' 0' 3))                              {                                  sb.Append("          ".Substring(NextInt32(random' 1' 10)));                              }                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append("/");                                  if (0 == NextInt32(random' 0' 3))                                  {                                      sb.Append("          ".Substring(NextInt32(random' 1' 10)));                                  }                              }                              switch (NextInt32(random' 0' 3))                              {                                  case 0:                                      sb.Append(RandomlyRecaseString(random' "script"));                                      break;                                    case 1:                                      sb.Append(RandomlyRecaseString(random' "style"));                                      break;                                    case 2:                                      sb.Append(RandomlyRecaseString(random' "br"));                                      break;                                  // default: append nothing                              }                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      default:                          sb.Append(RandomSimpleString(random));                          break;                  }
Magic Number,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,RandomHtmlishString,The following statement contains a magic number: switch (val)                  {                      case 0:                          sb.Append("<p>");                          break;                        case 1:                          {                              sb.Append("<");                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(RandomSimpleString(random));                              for (int j = 0; j < NextInt32(random' 0' 10); ++j)                              {                                  sb.Append(' ');                                  sb.Append(RandomSimpleString(random));                                  sb.Append(" ".Substring(NextInt32(random' 0' 1)));                                  sb.Append('=');                                  sb.Append(" ".Substring(NextInt32(random' 0' 1)));                                  sb.Append("\"".Substring(NextInt32(random' 0' 1)));                                  sb.Append(RandomSimpleString(random));                                  sb.Append("\"".Substring(NextInt32(random' 0' 1)));                              }                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append("/".Substring(NextInt32(random' 0' 1)));                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 2:                          {                              sb.Append("</");                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(RandomSimpleString(random));                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 3:                          sb.Append(">");                          break;                        case 4:                          sb.Append("</p>");                          break;                        case 5:                          sb.Append("<!--");                          break;                        case 6:                          sb.Append("<!--#");                          break;                        case 7:                          sb.Append("<script><!-- f('");                          break;                        case 8:                          sb.Append("</script>");                          break;                        case 9:                          sb.Append("<?");                          break;                        case 10:                          sb.Append("?>");                          break;                        case 11:                          sb.Append("\"");                          break;                        case 12:                          sb.Append("\\\"");                          break;                        case 13:                          sb.Append("'");                          break;                        case 14:                          sb.Append("\\'");                          break;                        case 15:                          sb.Append("-->");                          break;                        case 16:                          {                              sb.Append("&");                              switch (NextInt32(random' 0' 2))                              {                                  case 0:                                      sb.Append(RandomSimpleString(random));                                      break;                                    case 1:                                      sb.Append(HTML_CHAR_ENTITIES[random.Next(HTML_CHAR_ENTITIES.Length)]);                                      break;                              }                              sb.Append(";".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 17:                          {                              sb.Append("&#");                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append(NextInt32(random' 0' int.MaxValue - 1));                                  sb.Append(";".Substring(NextInt32(random' 0' 1)));                              }                              break;                          }                      case 18:                          {                              sb.Append("&#x");                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append(Convert.ToString(NextInt32(random' 0' int.MaxValue - 1)' 16));                                  sb.Append(";".Substring(NextInt32(random' 0' 1)));                              }                              break;                          }                        case 19:                          sb.Append(";");                          break;                        case 20:                          sb.Append(NextInt32(random' 0' int.MaxValue - 1));                          break;                        case 21:                          sb.Append("\n");                          break;                        case 22:                          sb.Append("          ".Substring(NextInt32(random' 0' 10)));                          break;                        case 23:                          {                              sb.Append("<");                              if (0 == NextInt32(random' 0' 3))                              {                                  sb.Append("          ".Substring(NextInt32(random' 1' 10)));                              }                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append("/");                                  if (0 == NextInt32(random' 0' 3))                                  {                                      sb.Append("          ".Substring(NextInt32(random' 1' 10)));                                  }                              }                              switch (NextInt32(random' 0' 3))                              {                                  case 0:                                      sb.Append(RandomlyRecaseString(random' "script"));                                      break;                                    case 1:                                      sb.Append(RandomlyRecaseString(random' "style"));                                      break;                                    case 2:                                      sb.Append(RandomlyRecaseString(random' "br"));                                      break;                                  // default: append nothing                              }                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      default:                          sb.Append(RandomSimpleString(random));                          break;                  }
Magic Number,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,RandomHtmlishString,The following statement contains a magic number: switch (val)                  {                      case 0:                          sb.Append("<p>");                          break;                        case 1:                          {                              sb.Append("<");                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(RandomSimpleString(random));                              for (int j = 0; j < NextInt32(random' 0' 10); ++j)                              {                                  sb.Append(' ');                                  sb.Append(RandomSimpleString(random));                                  sb.Append(" ".Substring(NextInt32(random' 0' 1)));                                  sb.Append('=');                                  sb.Append(" ".Substring(NextInt32(random' 0' 1)));                                  sb.Append("\"".Substring(NextInt32(random' 0' 1)));                                  sb.Append(RandomSimpleString(random));                                  sb.Append("\"".Substring(NextInt32(random' 0' 1)));                              }                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append("/".Substring(NextInt32(random' 0' 1)));                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 2:                          {                              sb.Append("</");                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(RandomSimpleString(random));                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 3:                          sb.Append(">");                          break;                        case 4:                          sb.Append("</p>");                          break;                        case 5:                          sb.Append("<!--");                          break;                        case 6:                          sb.Append("<!--#");                          break;                        case 7:                          sb.Append("<script><!-- f('");                          break;                        case 8:                          sb.Append("</script>");                          break;                        case 9:                          sb.Append("<?");                          break;                        case 10:                          sb.Append("?>");                          break;                        case 11:                          sb.Append("\"");                          break;                        case 12:                          sb.Append("\\\"");                          break;                        case 13:                          sb.Append("'");                          break;                        case 14:                          sb.Append("\\'");                          break;                        case 15:                          sb.Append("-->");                          break;                        case 16:                          {                              sb.Append("&");                              switch (NextInt32(random' 0' 2))                              {                                  case 0:                                      sb.Append(RandomSimpleString(random));                                      break;                                    case 1:                                      sb.Append(HTML_CHAR_ENTITIES[random.Next(HTML_CHAR_ENTITIES.Length)]);                                      break;                              }                              sb.Append(";".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 17:                          {                              sb.Append("&#");                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append(NextInt32(random' 0' int.MaxValue - 1));                                  sb.Append(";".Substring(NextInt32(random' 0' 1)));                              }                              break;                          }                      case 18:                          {                              sb.Append("&#x");                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append(Convert.ToString(NextInt32(random' 0' int.MaxValue - 1)' 16));                                  sb.Append(";".Substring(NextInt32(random' 0' 1)));                              }                              break;                          }                        case 19:                          sb.Append(";");                          break;                        case 20:                          sb.Append(NextInt32(random' 0' int.MaxValue - 1));                          break;                        case 21:                          sb.Append("\n");                          break;                        case 22:                          sb.Append("          ".Substring(NextInt32(random' 0' 10)));                          break;                        case 23:                          {                              sb.Append("<");                              if (0 == NextInt32(random' 0' 3))                              {                                  sb.Append("          ".Substring(NextInt32(random' 1' 10)));                              }                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append("/");                                  if (0 == NextInt32(random' 0' 3))                                  {                                      sb.Append("          ".Substring(NextInt32(random' 1' 10)));                                  }                              }                              switch (NextInt32(random' 0' 3))                              {                                  case 0:                                      sb.Append(RandomlyRecaseString(random' "script"));                                      break;                                    case 1:                                      sb.Append(RandomlyRecaseString(random' "style"));                                      break;                                    case 2:                                      sb.Append(RandomlyRecaseString(random' "br"));                                      break;                                  // default: append nothing                              }                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      default:                          sb.Append(RandomSimpleString(random));                          break;                  }
Magic Number,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,RandomHtmlishString,The following statement contains a magic number: switch (val)                  {                      case 0:                          sb.Append("<p>");                          break;                        case 1:                          {                              sb.Append("<");                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(RandomSimpleString(random));                              for (int j = 0; j < NextInt32(random' 0' 10); ++j)                              {                                  sb.Append(' ');                                  sb.Append(RandomSimpleString(random));                                  sb.Append(" ".Substring(NextInt32(random' 0' 1)));                                  sb.Append('=');                                  sb.Append(" ".Substring(NextInt32(random' 0' 1)));                                  sb.Append("\"".Substring(NextInt32(random' 0' 1)));                                  sb.Append(RandomSimpleString(random));                                  sb.Append("\"".Substring(NextInt32(random' 0' 1)));                              }                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append("/".Substring(NextInt32(random' 0' 1)));                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 2:                          {                              sb.Append("</");                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(RandomSimpleString(random));                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 3:                          sb.Append(">");                          break;                        case 4:                          sb.Append("</p>");                          break;                        case 5:                          sb.Append("<!--");                          break;                        case 6:                          sb.Append("<!--#");                          break;                        case 7:                          sb.Append("<script><!-- f('");                          break;                        case 8:                          sb.Append("</script>");                          break;                        case 9:                          sb.Append("<?");                          break;                        case 10:                          sb.Append("?>");                          break;                        case 11:                          sb.Append("\"");                          break;                        case 12:                          sb.Append("\\\"");                          break;                        case 13:                          sb.Append("'");                          break;                        case 14:                          sb.Append("\\'");                          break;                        case 15:                          sb.Append("-->");                          break;                        case 16:                          {                              sb.Append("&");                              switch (NextInt32(random' 0' 2))                              {                                  case 0:                                      sb.Append(RandomSimpleString(random));                                      break;                                    case 1:                                      sb.Append(HTML_CHAR_ENTITIES[random.Next(HTML_CHAR_ENTITIES.Length)]);                                      break;                              }                              sb.Append(";".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 17:                          {                              sb.Append("&#");                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append(NextInt32(random' 0' int.MaxValue - 1));                                  sb.Append(";".Substring(NextInt32(random' 0' 1)));                              }                              break;                          }                      case 18:                          {                              sb.Append("&#x");                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append(Convert.ToString(NextInt32(random' 0' int.MaxValue - 1)' 16));                                  sb.Append(";".Substring(NextInt32(random' 0' 1)));                              }                              break;                          }                        case 19:                          sb.Append(";");                          break;                        case 20:                          sb.Append(NextInt32(random' 0' int.MaxValue - 1));                          break;                        case 21:                          sb.Append("\n");                          break;                        case 22:                          sb.Append("          ".Substring(NextInt32(random' 0' 10)));                          break;                        case 23:                          {                              sb.Append("<");                              if (0 == NextInt32(random' 0' 3))                              {                                  sb.Append("          ".Substring(NextInt32(random' 1' 10)));                              }                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append("/");                                  if (0 == NextInt32(random' 0' 3))                                  {                                      sb.Append("          ".Substring(NextInt32(random' 1' 10)));                                  }                              }                              switch (NextInt32(random' 0' 3))                              {                                  case 0:                                      sb.Append(RandomlyRecaseString(random' "script"));                                      break;                                    case 1:                                      sb.Append(RandomlyRecaseString(random' "style"));                                      break;                                    case 2:                                      sb.Append(RandomlyRecaseString(random' "br"));                                      break;                                  // default: append nothing                              }                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      default:                          sb.Append(RandomSimpleString(random));                          break;                  }
Magic Number,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,RandomHtmlishString,The following statement contains a magic number: switch (val)                  {                      case 0:                          sb.Append("<p>");                          break;                        case 1:                          {                              sb.Append("<");                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(RandomSimpleString(random));                              for (int j = 0; j < NextInt32(random' 0' 10); ++j)                              {                                  sb.Append(' ');                                  sb.Append(RandomSimpleString(random));                                  sb.Append(" ".Substring(NextInt32(random' 0' 1)));                                  sb.Append('=');                                  sb.Append(" ".Substring(NextInt32(random' 0' 1)));                                  sb.Append("\"".Substring(NextInt32(random' 0' 1)));                                  sb.Append(RandomSimpleString(random));                                  sb.Append("\"".Substring(NextInt32(random' 0' 1)));                              }                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append("/".Substring(NextInt32(random' 0' 1)));                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 2:                          {                              sb.Append("</");                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(RandomSimpleString(random));                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 3:                          sb.Append(">");                          break;                        case 4:                          sb.Append("</p>");                          break;                        case 5:                          sb.Append("<!--");                          break;                        case 6:                          sb.Append("<!--#");                          break;                        case 7:                          sb.Append("<script><!-- f('");                          break;                        case 8:                          sb.Append("</script>");                          break;                        case 9:                          sb.Append("<?");                          break;                        case 10:                          sb.Append("?>");                          break;                        case 11:                          sb.Append("\"");                          break;                        case 12:                          sb.Append("\\\"");                          break;                        case 13:                          sb.Append("'");                          break;                        case 14:                          sb.Append("\\'");                          break;                        case 15:                          sb.Append("-->");                          break;                        case 16:                          {                              sb.Append("&");                              switch (NextInt32(random' 0' 2))                              {                                  case 0:                                      sb.Append(RandomSimpleString(random));                                      break;                                    case 1:                                      sb.Append(HTML_CHAR_ENTITIES[random.Next(HTML_CHAR_ENTITIES.Length)]);                                      break;                              }                              sb.Append(";".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 17:                          {                              sb.Append("&#");                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append(NextInt32(random' 0' int.MaxValue - 1));                                  sb.Append(";".Substring(NextInt32(random' 0' 1)));                              }                              break;                          }                      case 18:                          {                              sb.Append("&#x");                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append(Convert.ToString(NextInt32(random' 0' int.MaxValue - 1)' 16));                                  sb.Append(";".Substring(NextInt32(random' 0' 1)));                              }                              break;                          }                        case 19:                          sb.Append(";");                          break;                        case 20:                          sb.Append(NextInt32(random' 0' int.MaxValue - 1));                          break;                        case 21:                          sb.Append("\n");                          break;                        case 22:                          sb.Append("          ".Substring(NextInt32(random' 0' 10)));                          break;                        case 23:                          {                              sb.Append("<");                              if (0 == NextInt32(random' 0' 3))                              {                                  sb.Append("          ".Substring(NextInt32(random' 1' 10)));                              }                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append("/");                                  if (0 == NextInt32(random' 0' 3))                                  {                                      sb.Append("          ".Substring(NextInt32(random' 1' 10)));                                  }                              }                              switch (NextInt32(random' 0' 3))                              {                                  case 0:                                      sb.Append(RandomlyRecaseString(random' "script"));                                      break;                                    case 1:                                      sb.Append(RandomlyRecaseString(random' "style"));                                      break;                                    case 2:                                      sb.Append(RandomlyRecaseString(random' "br"));                                      break;                                  // default: append nothing                              }                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      default:                          sb.Append(RandomSimpleString(random));                          break;                  }
Magic Number,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,RandomHtmlishString,The following statement contains a magic number: switch (val)                  {                      case 0:                          sb.Append("<p>");                          break;                        case 1:                          {                              sb.Append("<");                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(RandomSimpleString(random));                              for (int j = 0; j < NextInt32(random' 0' 10); ++j)                              {                                  sb.Append(' ');                                  sb.Append(RandomSimpleString(random));                                  sb.Append(" ".Substring(NextInt32(random' 0' 1)));                                  sb.Append('=');                                  sb.Append(" ".Substring(NextInt32(random' 0' 1)));                                  sb.Append("\"".Substring(NextInt32(random' 0' 1)));                                  sb.Append(RandomSimpleString(random));                                  sb.Append("\"".Substring(NextInt32(random' 0' 1)));                              }                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append("/".Substring(NextInt32(random' 0' 1)));                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 2:                          {                              sb.Append("</");                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(RandomSimpleString(random));                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 3:                          sb.Append(">");                          break;                        case 4:                          sb.Append("</p>");                          break;                        case 5:                          sb.Append("<!--");                          break;                        case 6:                          sb.Append("<!--#");                          break;                        case 7:                          sb.Append("<script><!-- f('");                          break;                        case 8:                          sb.Append("</script>");                          break;                        case 9:                          sb.Append("<?");                          break;                        case 10:                          sb.Append("?>");                          break;                        case 11:                          sb.Append("\"");                          break;                        case 12:                          sb.Append("\\\"");                          break;                        case 13:                          sb.Append("'");                          break;                        case 14:                          sb.Append("\\'");                          break;                        case 15:                          sb.Append("-->");                          break;                        case 16:                          {                              sb.Append("&");                              switch (NextInt32(random' 0' 2))                              {                                  case 0:                                      sb.Append(RandomSimpleString(random));                                      break;                                    case 1:                                      sb.Append(HTML_CHAR_ENTITIES[random.Next(HTML_CHAR_ENTITIES.Length)]);                                      break;                              }                              sb.Append(";".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 17:                          {                              sb.Append("&#");                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append(NextInt32(random' 0' int.MaxValue - 1));                                  sb.Append(";".Substring(NextInt32(random' 0' 1)));                              }                              break;                          }                      case 18:                          {                              sb.Append("&#x");                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append(Convert.ToString(NextInt32(random' 0' int.MaxValue - 1)' 16));                                  sb.Append(";".Substring(NextInt32(random' 0' 1)));                              }                              break;                          }                        case 19:                          sb.Append(";");                          break;                        case 20:                          sb.Append(NextInt32(random' 0' int.MaxValue - 1));                          break;                        case 21:                          sb.Append("\n");                          break;                        case 22:                          sb.Append("          ".Substring(NextInt32(random' 0' 10)));                          break;                        case 23:                          {                              sb.Append("<");                              if (0 == NextInt32(random' 0' 3))                              {                                  sb.Append("          ".Substring(NextInt32(random' 1' 10)));                              }                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append("/");                                  if (0 == NextInt32(random' 0' 3))                                  {                                      sb.Append("          ".Substring(NextInt32(random' 1' 10)));                                  }                              }                              switch (NextInt32(random' 0' 3))                              {                                  case 0:                                      sb.Append(RandomlyRecaseString(random' "script"));                                      break;                                    case 1:                                      sb.Append(RandomlyRecaseString(random' "style"));                                      break;                                    case 2:                                      sb.Append(RandomlyRecaseString(random' "br"));                                      break;                                  // default: append nothing                              }                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      default:                          sb.Append(RandomSimpleString(random));                          break;                  }
Magic Number,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,RandomHtmlishString,The following statement contains a magic number: switch (val)                  {                      case 0:                          sb.Append("<p>");                          break;                        case 1:                          {                              sb.Append("<");                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(RandomSimpleString(random));                              for (int j = 0; j < NextInt32(random' 0' 10); ++j)                              {                                  sb.Append(' ');                                  sb.Append(RandomSimpleString(random));                                  sb.Append(" ".Substring(NextInt32(random' 0' 1)));                                  sb.Append('=');                                  sb.Append(" ".Substring(NextInt32(random' 0' 1)));                                  sb.Append("\"".Substring(NextInt32(random' 0' 1)));                                  sb.Append(RandomSimpleString(random));                                  sb.Append("\"".Substring(NextInt32(random' 0' 1)));                              }                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append("/".Substring(NextInt32(random' 0' 1)));                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 2:                          {                              sb.Append("</");                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(RandomSimpleString(random));                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 3:                          sb.Append(">");                          break;                        case 4:                          sb.Append("</p>");                          break;                        case 5:                          sb.Append("<!--");                          break;                        case 6:                          sb.Append("<!--#");                          break;                        case 7:                          sb.Append("<script><!-- f('");                          break;                        case 8:                          sb.Append("</script>");                          break;                        case 9:                          sb.Append("<?");                          break;                        case 10:                          sb.Append("?>");                          break;                        case 11:                          sb.Append("\"");                          break;                        case 12:                          sb.Append("\\\"");                          break;                        case 13:                          sb.Append("'");                          break;                        case 14:                          sb.Append("\\'");                          break;                        case 15:                          sb.Append("-->");                          break;                        case 16:                          {                              sb.Append("&");                              switch (NextInt32(random' 0' 2))                              {                                  case 0:                                      sb.Append(RandomSimpleString(random));                                      break;                                    case 1:                                      sb.Append(HTML_CHAR_ENTITIES[random.Next(HTML_CHAR_ENTITIES.Length)]);                                      break;                              }                              sb.Append(";".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 17:                          {                              sb.Append("&#");                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append(NextInt32(random' 0' int.MaxValue - 1));                                  sb.Append(";".Substring(NextInt32(random' 0' 1)));                              }                              break;                          }                      case 18:                          {                              sb.Append("&#x");                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append(Convert.ToString(NextInt32(random' 0' int.MaxValue - 1)' 16));                                  sb.Append(";".Substring(NextInt32(random' 0' 1)));                              }                              break;                          }                        case 19:                          sb.Append(";");                          break;                        case 20:                          sb.Append(NextInt32(random' 0' int.MaxValue - 1));                          break;                        case 21:                          sb.Append("\n");                          break;                        case 22:                          sb.Append("          ".Substring(NextInt32(random' 0' 10)));                          break;                        case 23:                          {                              sb.Append("<");                              if (0 == NextInt32(random' 0' 3))                              {                                  sb.Append("          ".Substring(NextInt32(random' 1' 10)));                              }                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append("/");                                  if (0 == NextInt32(random' 0' 3))                                  {                                      sb.Append("          ".Substring(NextInt32(random' 1' 10)));                                  }                              }                              switch (NextInt32(random' 0' 3))                              {                                  case 0:                                      sb.Append(RandomlyRecaseString(random' "script"));                                      break;                                    case 1:                                      sb.Append(RandomlyRecaseString(random' "style"));                                      break;                                    case 2:                                      sb.Append(RandomlyRecaseString(random' "br"));                                      break;                                  // default: append nothing                              }                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      default:                          sb.Append(RandomSimpleString(random));                          break;                  }
Magic Number,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,RandomHtmlishString,The following statement contains a magic number: switch (val)                  {                      case 0:                          sb.Append("<p>");                          break;                        case 1:                          {                              sb.Append("<");                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(RandomSimpleString(random));                              for (int j = 0; j < NextInt32(random' 0' 10); ++j)                              {                                  sb.Append(' ');                                  sb.Append(RandomSimpleString(random));                                  sb.Append(" ".Substring(NextInt32(random' 0' 1)));                                  sb.Append('=');                                  sb.Append(" ".Substring(NextInt32(random' 0' 1)));                                  sb.Append("\"".Substring(NextInt32(random' 0' 1)));                                  sb.Append(RandomSimpleString(random));                                  sb.Append("\"".Substring(NextInt32(random' 0' 1)));                              }                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append("/".Substring(NextInt32(random' 0' 1)));                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 2:                          {                              sb.Append("</");                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(RandomSimpleString(random));                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 3:                          sb.Append(">");                          break;                        case 4:                          sb.Append("</p>");                          break;                        case 5:                          sb.Append("<!--");                          break;                        case 6:                          sb.Append("<!--#");                          break;                        case 7:                          sb.Append("<script><!-- f('");                          break;                        case 8:                          sb.Append("</script>");                          break;                        case 9:                          sb.Append("<?");                          break;                        case 10:                          sb.Append("?>");                          break;                        case 11:                          sb.Append("\"");                          break;                        case 12:                          sb.Append("\\\"");                          break;                        case 13:                          sb.Append("'");                          break;                        case 14:                          sb.Append("\\'");                          break;                        case 15:                          sb.Append("-->");                          break;                        case 16:                          {                              sb.Append("&");                              switch (NextInt32(random' 0' 2))                              {                                  case 0:                                      sb.Append(RandomSimpleString(random));                                      break;                                    case 1:                                      sb.Append(HTML_CHAR_ENTITIES[random.Next(HTML_CHAR_ENTITIES.Length)]);                                      break;                              }                              sb.Append(";".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 17:                          {                              sb.Append("&#");                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append(NextInt32(random' 0' int.MaxValue - 1));                                  sb.Append(";".Substring(NextInt32(random' 0' 1)));                              }                              break;                          }                      case 18:                          {                              sb.Append("&#x");                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append(Convert.ToString(NextInt32(random' 0' int.MaxValue - 1)' 16));                                  sb.Append(";".Substring(NextInt32(random' 0' 1)));                              }                              break;                          }                        case 19:                          sb.Append(";");                          break;                        case 20:                          sb.Append(NextInt32(random' 0' int.MaxValue - 1));                          break;                        case 21:                          sb.Append("\n");                          break;                        case 22:                          sb.Append("          ".Substring(NextInt32(random' 0' 10)));                          break;                        case 23:                          {                              sb.Append("<");                              if (0 == NextInt32(random' 0' 3))                              {                                  sb.Append("          ".Substring(NextInt32(random' 1' 10)));                              }                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append("/");                                  if (0 == NextInt32(random' 0' 3))                                  {                                      sb.Append("          ".Substring(NextInt32(random' 1' 10)));                                  }                              }                              switch (NextInt32(random' 0' 3))                              {                                  case 0:                                      sb.Append(RandomlyRecaseString(random' "script"));                                      break;                                    case 1:                                      sb.Append(RandomlyRecaseString(random' "style"));                                      break;                                    case 2:                                      sb.Append(RandomlyRecaseString(random' "br"));                                      break;                                  // default: append nothing                              }                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      default:                          sb.Append(RandomSimpleString(random));                          break;                  }
Magic Number,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,RandomHtmlishString,The following statement contains a magic number: switch (val)                  {                      case 0:                          sb.Append("<p>");                          break;                        case 1:                          {                              sb.Append("<");                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(RandomSimpleString(random));                              for (int j = 0; j < NextInt32(random' 0' 10); ++j)                              {                                  sb.Append(' ');                                  sb.Append(RandomSimpleString(random));                                  sb.Append(" ".Substring(NextInt32(random' 0' 1)));                                  sb.Append('=');                                  sb.Append(" ".Substring(NextInt32(random' 0' 1)));                                  sb.Append("\"".Substring(NextInt32(random' 0' 1)));                                  sb.Append(RandomSimpleString(random));                                  sb.Append("\"".Substring(NextInt32(random' 0' 1)));                              }                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append("/".Substring(NextInt32(random' 0' 1)));                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 2:                          {                              sb.Append("</");                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(RandomSimpleString(random));                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 3:                          sb.Append(">");                          break;                        case 4:                          sb.Append("</p>");                          break;                        case 5:                          sb.Append("<!--");                          break;                        case 6:                          sb.Append("<!--#");                          break;                        case 7:                          sb.Append("<script><!-- f('");                          break;                        case 8:                          sb.Append("</script>");                          break;                        case 9:                          sb.Append("<?");                          break;                        case 10:                          sb.Append("?>");                          break;                        case 11:                          sb.Append("\"");                          break;                        case 12:                          sb.Append("\\\"");                          break;                        case 13:                          sb.Append("'");                          break;                        case 14:                          sb.Append("\\'");                          break;                        case 15:                          sb.Append("-->");                          break;                        case 16:                          {                              sb.Append("&");                              switch (NextInt32(random' 0' 2))                              {                                  case 0:                                      sb.Append(RandomSimpleString(random));                                      break;                                    case 1:                                      sb.Append(HTML_CHAR_ENTITIES[random.Next(HTML_CHAR_ENTITIES.Length)]);                                      break;                              }                              sb.Append(";".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 17:                          {                              sb.Append("&#");                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append(NextInt32(random' 0' int.MaxValue - 1));                                  sb.Append(";".Substring(NextInt32(random' 0' 1)));                              }                              break;                          }                      case 18:                          {                              sb.Append("&#x");                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append(Convert.ToString(NextInt32(random' 0' int.MaxValue - 1)' 16));                                  sb.Append(";".Substring(NextInt32(random' 0' 1)));                              }                              break;                          }                        case 19:                          sb.Append(";");                          break;                        case 20:                          sb.Append(NextInt32(random' 0' int.MaxValue - 1));                          break;                        case 21:                          sb.Append("\n");                          break;                        case 22:                          sb.Append("          ".Substring(NextInt32(random' 0' 10)));                          break;                        case 23:                          {                              sb.Append("<");                              if (0 == NextInt32(random' 0' 3))                              {                                  sb.Append("          ".Substring(NextInt32(random' 1' 10)));                              }                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append("/");                                  if (0 == NextInt32(random' 0' 3))                                  {                                      sb.Append("          ".Substring(NextInt32(random' 1' 10)));                                  }                              }                              switch (NextInt32(random' 0' 3))                              {                                  case 0:                                      sb.Append(RandomlyRecaseString(random' "script"));                                      break;                                    case 1:                                      sb.Append(RandomlyRecaseString(random' "style"));                                      break;                                    case 2:                                      sb.Append(RandomlyRecaseString(random' "br"));                                      break;                                  // default: append nothing                              }                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      default:                          sb.Append(RandomSimpleString(random));                          break;                  }
Magic Number,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,RandomHtmlishString,The following statement contains a magic number: switch (val)                  {                      case 0:                          sb.Append("<p>");                          break;                        case 1:                          {                              sb.Append("<");                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(RandomSimpleString(random));                              for (int j = 0; j < NextInt32(random' 0' 10); ++j)                              {                                  sb.Append(' ');                                  sb.Append(RandomSimpleString(random));                                  sb.Append(" ".Substring(NextInt32(random' 0' 1)));                                  sb.Append('=');                                  sb.Append(" ".Substring(NextInt32(random' 0' 1)));                                  sb.Append("\"".Substring(NextInt32(random' 0' 1)));                                  sb.Append(RandomSimpleString(random));                                  sb.Append("\"".Substring(NextInt32(random' 0' 1)));                              }                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append("/".Substring(NextInt32(random' 0' 1)));                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 2:                          {                              sb.Append("</");                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(RandomSimpleString(random));                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 3:                          sb.Append(">");                          break;                        case 4:                          sb.Append("</p>");                          break;                        case 5:                          sb.Append("<!--");                          break;                        case 6:                          sb.Append("<!--#");                          break;                        case 7:                          sb.Append("<script><!-- f('");                          break;                        case 8:                          sb.Append("</script>");                          break;                        case 9:                          sb.Append("<?");                          break;                        case 10:                          sb.Append("?>");                          break;                        case 11:                          sb.Append("\"");                          break;                        case 12:                          sb.Append("\\\"");                          break;                        case 13:                          sb.Append("'");                          break;                        case 14:                          sb.Append("\\'");                          break;                        case 15:                          sb.Append("-->");                          break;                        case 16:                          {                              sb.Append("&");                              switch (NextInt32(random' 0' 2))                              {                                  case 0:                                      sb.Append(RandomSimpleString(random));                                      break;                                    case 1:                                      sb.Append(HTML_CHAR_ENTITIES[random.Next(HTML_CHAR_ENTITIES.Length)]);                                      break;                              }                              sb.Append(";".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 17:                          {                              sb.Append("&#");                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append(NextInt32(random' 0' int.MaxValue - 1));                                  sb.Append(";".Substring(NextInt32(random' 0' 1)));                              }                              break;                          }                      case 18:                          {                              sb.Append("&#x");                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append(Convert.ToString(NextInt32(random' 0' int.MaxValue - 1)' 16));                                  sb.Append(";".Substring(NextInt32(random' 0' 1)));                              }                              break;                          }                        case 19:                          sb.Append(";");                          break;                        case 20:                          sb.Append(NextInt32(random' 0' int.MaxValue - 1));                          break;                        case 21:                          sb.Append("\n");                          break;                        case 22:                          sb.Append("          ".Substring(NextInt32(random' 0' 10)));                          break;                        case 23:                          {                              sb.Append("<");                              if (0 == NextInt32(random' 0' 3))                              {                                  sb.Append("          ".Substring(NextInt32(random' 1' 10)));                              }                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append("/");                                  if (0 == NextInt32(random' 0' 3))                                  {                                      sb.Append("          ".Substring(NextInt32(random' 1' 10)));                                  }                              }                              switch (NextInt32(random' 0' 3))                              {                                  case 0:                                      sb.Append(RandomlyRecaseString(random' "script"));                                      break;                                    case 1:                                      sb.Append(RandomlyRecaseString(random' "style"));                                      break;                                    case 2:                                      sb.Append(RandomlyRecaseString(random' "br"));                                      break;                                  // default: append nothing                              }                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      default:                          sb.Append(RandomSimpleString(random));                          break;                  }
Magic Number,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,RandomHtmlishString,The following statement contains a magic number: switch (val)                  {                      case 0:                          sb.Append("<p>");                          break;                        case 1:                          {                              sb.Append("<");                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(RandomSimpleString(random));                              for (int j = 0; j < NextInt32(random' 0' 10); ++j)                              {                                  sb.Append(' ');                                  sb.Append(RandomSimpleString(random));                                  sb.Append(" ".Substring(NextInt32(random' 0' 1)));                                  sb.Append('=');                                  sb.Append(" ".Substring(NextInt32(random' 0' 1)));                                  sb.Append("\"".Substring(NextInt32(random' 0' 1)));                                  sb.Append(RandomSimpleString(random));                                  sb.Append("\"".Substring(NextInt32(random' 0' 1)));                              }                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append("/".Substring(NextInt32(random' 0' 1)));                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 2:                          {                              sb.Append("</");                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(RandomSimpleString(random));                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 3:                          sb.Append(">");                          break;                        case 4:                          sb.Append("</p>");                          break;                        case 5:                          sb.Append("<!--");                          break;                        case 6:                          sb.Append("<!--#");                          break;                        case 7:                          sb.Append("<script><!-- f('");                          break;                        case 8:                          sb.Append("</script>");                          break;                        case 9:                          sb.Append("<?");                          break;                        case 10:                          sb.Append("?>");                          break;                        case 11:                          sb.Append("\"");                          break;                        case 12:                          sb.Append("\\\"");                          break;                        case 13:                          sb.Append("'");                          break;                        case 14:                          sb.Append("\\'");                          break;                        case 15:                          sb.Append("-->");                          break;                        case 16:                          {                              sb.Append("&");                              switch (NextInt32(random' 0' 2))                              {                                  case 0:                                      sb.Append(RandomSimpleString(random));                                      break;                                    case 1:                                      sb.Append(HTML_CHAR_ENTITIES[random.Next(HTML_CHAR_ENTITIES.Length)]);                                      break;                              }                              sb.Append(";".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 17:                          {                              sb.Append("&#");                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append(NextInt32(random' 0' int.MaxValue - 1));                                  sb.Append(";".Substring(NextInt32(random' 0' 1)));                              }                              break;                          }                      case 18:                          {                              sb.Append("&#x");                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append(Convert.ToString(NextInt32(random' 0' int.MaxValue - 1)' 16));                                  sb.Append(";".Substring(NextInt32(random' 0' 1)));                              }                              break;                          }                        case 19:                          sb.Append(";");                          break;                        case 20:                          sb.Append(NextInt32(random' 0' int.MaxValue - 1));                          break;                        case 21:                          sb.Append("\n");                          break;                        case 22:                          sb.Append("          ".Substring(NextInt32(random' 0' 10)));                          break;                        case 23:                          {                              sb.Append("<");                              if (0 == NextInt32(random' 0' 3))                              {                                  sb.Append("          ".Substring(NextInt32(random' 1' 10)));                              }                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append("/");                                  if (0 == NextInt32(random' 0' 3))                                  {                                      sb.Append("          ".Substring(NextInt32(random' 1' 10)));                                  }                              }                              switch (NextInt32(random' 0' 3))                              {                                  case 0:                                      sb.Append(RandomlyRecaseString(random' "script"));                                      break;                                    case 1:                                      sb.Append(RandomlyRecaseString(random' "style"));                                      break;                                    case 2:                                      sb.Append(RandomlyRecaseString(random' "br"));                                      break;                                  // default: append nothing                              }                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      default:                          sb.Append(RandomSimpleString(random));                          break;                  }
Magic Number,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,RandomHtmlishString,The following statement contains a magic number: switch (val)                  {                      case 0:                          sb.Append("<p>");                          break;                        case 1:                          {                              sb.Append("<");                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(RandomSimpleString(random));                              for (int j = 0; j < NextInt32(random' 0' 10); ++j)                              {                                  sb.Append(' ');                                  sb.Append(RandomSimpleString(random));                                  sb.Append(" ".Substring(NextInt32(random' 0' 1)));                                  sb.Append('=');                                  sb.Append(" ".Substring(NextInt32(random' 0' 1)));                                  sb.Append("\"".Substring(NextInt32(random' 0' 1)));                                  sb.Append(RandomSimpleString(random));                                  sb.Append("\"".Substring(NextInt32(random' 0' 1)));                              }                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append("/".Substring(NextInt32(random' 0' 1)));                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 2:                          {                              sb.Append("</");                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(RandomSimpleString(random));                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 3:                          sb.Append(">");                          break;                        case 4:                          sb.Append("</p>");                          break;                        case 5:                          sb.Append("<!--");                          break;                        case 6:                          sb.Append("<!--#");                          break;                        case 7:                          sb.Append("<script><!-- f('");                          break;                        case 8:                          sb.Append("</script>");                          break;                        case 9:                          sb.Append("<?");                          break;                        case 10:                          sb.Append("?>");                          break;                        case 11:                          sb.Append("\"");                          break;                        case 12:                          sb.Append("\\\"");                          break;                        case 13:                          sb.Append("'");                          break;                        case 14:                          sb.Append("\\'");                          break;                        case 15:                          sb.Append("-->");                          break;                        case 16:                          {                              sb.Append("&");                              switch (NextInt32(random' 0' 2))                              {                                  case 0:                                      sb.Append(RandomSimpleString(random));                                      break;                                    case 1:                                      sb.Append(HTML_CHAR_ENTITIES[random.Next(HTML_CHAR_ENTITIES.Length)]);                                      break;                              }                              sb.Append(";".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 17:                          {                              sb.Append("&#");                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append(NextInt32(random' 0' int.MaxValue - 1));                                  sb.Append(";".Substring(NextInt32(random' 0' 1)));                              }                              break;                          }                      case 18:                          {                              sb.Append("&#x");                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append(Convert.ToString(NextInt32(random' 0' int.MaxValue - 1)' 16));                                  sb.Append(";".Substring(NextInt32(random' 0' 1)));                              }                              break;                          }                        case 19:                          sb.Append(";");                          break;                        case 20:                          sb.Append(NextInt32(random' 0' int.MaxValue - 1));                          break;                        case 21:                          sb.Append("\n");                          break;                        case 22:                          sb.Append("          ".Substring(NextInt32(random' 0' 10)));                          break;                        case 23:                          {                              sb.Append("<");                              if (0 == NextInt32(random' 0' 3))                              {                                  sb.Append("          ".Substring(NextInt32(random' 1' 10)));                              }                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append("/");                                  if (0 == NextInt32(random' 0' 3))                                  {                                      sb.Append("          ".Substring(NextInt32(random' 1' 10)));                                  }                              }                              switch (NextInt32(random' 0' 3))                              {                                  case 0:                                      sb.Append(RandomlyRecaseString(random' "script"));                                      break;                                    case 1:                                      sb.Append(RandomlyRecaseString(random' "style"));                                      break;                                    case 2:                                      sb.Append(RandomlyRecaseString(random' "br"));                                      break;                                  // default: append nothing                              }                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      default:                          sb.Append(RandomSimpleString(random));                          break;                  }
Magic Number,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,RandomHtmlishString,The following statement contains a magic number: switch (val)                  {                      case 0:                          sb.Append("<p>");                          break;                        case 1:                          {                              sb.Append("<");                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(RandomSimpleString(random));                              for (int j = 0; j < NextInt32(random' 0' 10); ++j)                              {                                  sb.Append(' ');                                  sb.Append(RandomSimpleString(random));                                  sb.Append(" ".Substring(NextInt32(random' 0' 1)));                                  sb.Append('=');                                  sb.Append(" ".Substring(NextInt32(random' 0' 1)));                                  sb.Append("\"".Substring(NextInt32(random' 0' 1)));                                  sb.Append(RandomSimpleString(random));                                  sb.Append("\"".Substring(NextInt32(random' 0' 1)));                              }                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append("/".Substring(NextInt32(random' 0' 1)));                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 2:                          {                              sb.Append("</");                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(RandomSimpleString(random));                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 3:                          sb.Append(">");                          break;                        case 4:                          sb.Append("</p>");                          break;                        case 5:                          sb.Append("<!--");                          break;                        case 6:                          sb.Append("<!--#");                          break;                        case 7:                          sb.Append("<script><!-- f('");                          break;                        case 8:                          sb.Append("</script>");                          break;                        case 9:                          sb.Append("<?");                          break;                        case 10:                          sb.Append("?>");                          break;                        case 11:                          sb.Append("\"");                          break;                        case 12:                          sb.Append("\\\"");                          break;                        case 13:                          sb.Append("'");                          break;                        case 14:                          sb.Append("\\'");                          break;                        case 15:                          sb.Append("-->");                          break;                        case 16:                          {                              sb.Append("&");                              switch (NextInt32(random' 0' 2))                              {                                  case 0:                                      sb.Append(RandomSimpleString(random));                                      break;                                    case 1:                                      sb.Append(HTML_CHAR_ENTITIES[random.Next(HTML_CHAR_ENTITIES.Length)]);                                      break;                              }                              sb.Append(";".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 17:                          {                              sb.Append("&#");                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append(NextInt32(random' 0' int.MaxValue - 1));                                  sb.Append(";".Substring(NextInt32(random' 0' 1)));                              }                              break;                          }                      case 18:                          {                              sb.Append("&#x");                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append(Convert.ToString(NextInt32(random' 0' int.MaxValue - 1)' 16));                                  sb.Append(";".Substring(NextInt32(random' 0' 1)));                              }                              break;                          }                        case 19:                          sb.Append(";");                          break;                        case 20:                          sb.Append(NextInt32(random' 0' int.MaxValue - 1));                          break;                        case 21:                          sb.Append("\n");                          break;                        case 22:                          sb.Append("          ".Substring(NextInt32(random' 0' 10)));                          break;                        case 23:                          {                              sb.Append("<");                              if (0 == NextInt32(random' 0' 3))                              {                                  sb.Append("          ".Substring(NextInt32(random' 1' 10)));                              }                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append("/");                                  if (0 == NextInt32(random' 0' 3))                                  {                                      sb.Append("          ".Substring(NextInt32(random' 1' 10)));                                  }                              }                              switch (NextInt32(random' 0' 3))                              {                                  case 0:                                      sb.Append(RandomlyRecaseString(random' "script"));                                      break;                                    case 1:                                      sb.Append(RandomlyRecaseString(random' "style"));                                      break;                                    case 2:                                      sb.Append(RandomlyRecaseString(random' "br"));                                      break;                                  // default: append nothing                              }                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      default:                          sb.Append(RandomSimpleString(random));                          break;                  }
Magic Number,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,RandomHtmlishString,The following statement contains a magic number: switch (val)                  {                      case 0:                          sb.Append("<p>");                          break;                        case 1:                          {                              sb.Append("<");                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(RandomSimpleString(random));                              for (int j = 0; j < NextInt32(random' 0' 10); ++j)                              {                                  sb.Append(' ');                                  sb.Append(RandomSimpleString(random));                                  sb.Append(" ".Substring(NextInt32(random' 0' 1)));                                  sb.Append('=');                                  sb.Append(" ".Substring(NextInt32(random' 0' 1)));                                  sb.Append("\"".Substring(NextInt32(random' 0' 1)));                                  sb.Append(RandomSimpleString(random));                                  sb.Append("\"".Substring(NextInt32(random' 0' 1)));                              }                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append("/".Substring(NextInt32(random' 0' 1)));                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 2:                          {                              sb.Append("</");                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(RandomSimpleString(random));                              sb.Append("    ".Substring(NextInt32(random' 0' 4)));                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 3:                          sb.Append(">");                          break;                        case 4:                          sb.Append("</p>");                          break;                        case 5:                          sb.Append("<!--");                          break;                        case 6:                          sb.Append("<!--#");                          break;                        case 7:                          sb.Append("<script><!-- f('");                          break;                        case 8:                          sb.Append("</script>");                          break;                        case 9:                          sb.Append("<?");                          break;                        case 10:                          sb.Append("?>");                          break;                        case 11:                          sb.Append("\"");                          break;                        case 12:                          sb.Append("\\\"");                          break;                        case 13:                          sb.Append("'");                          break;                        case 14:                          sb.Append("\\'");                          break;                        case 15:                          sb.Append("-->");                          break;                        case 16:                          {                              sb.Append("&");                              switch (NextInt32(random' 0' 2))                              {                                  case 0:                                      sb.Append(RandomSimpleString(random));                                      break;                                    case 1:                                      sb.Append(HTML_CHAR_ENTITIES[random.Next(HTML_CHAR_ENTITIES.Length)]);                                      break;                              }                              sb.Append(";".Substring(NextInt32(random' 0' 1)));                              break;                          }                      case 17:                          {                              sb.Append("&#");                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append(NextInt32(random' 0' int.MaxValue - 1));                                  sb.Append(";".Substring(NextInt32(random' 0' 1)));                              }                              break;                          }                      case 18:                          {                              sb.Append("&#x");                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append(Convert.ToString(NextInt32(random' 0' int.MaxValue - 1)' 16));                                  sb.Append(";".Substring(NextInt32(random' 0' 1)));                              }                              break;                          }                        case 19:                          sb.Append(";");                          break;                        case 20:                          sb.Append(NextInt32(random' 0' int.MaxValue - 1));                          break;                        case 21:                          sb.Append("\n");                          break;                        case 22:                          sb.Append("          ".Substring(NextInt32(random' 0' 10)));                          break;                        case 23:                          {                              sb.Append("<");                              if (0 == NextInt32(random' 0' 3))                              {                                  sb.Append("          ".Substring(NextInt32(random' 1' 10)));                              }                              if (0 == NextInt32(random' 0' 1))                              {                                  sb.Append("/");                                  if (0 == NextInt32(random' 0' 3))                                  {                                      sb.Append("          ".Substring(NextInt32(random' 1' 10)));                                  }                              }                              switch (NextInt32(random' 0' 3))                              {                                  case 0:                                      sb.Append(RandomlyRecaseString(random' "script"));                                      break;                                    case 1:                                      sb.Append(RandomlyRecaseString(random' "style"));                                      break;                                    case 2:                                      sb.Append(RandomlyRecaseString(random' "br"));                                      break;                                  // default: append nothing                              }                              sb.Append(">".Substring(NextInt32(random' 0' 1)));                              break;                          }                      default:                          sb.Append(RandomSimpleString(random));                          break;                  }
Magic Number,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,RandomlyRecaseString,The following statement contains a magic number: toRecase = str.Substring(pos' 2);
Magic Number,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,RandomlyRecaseString,The following statement contains a magic number: switch (NextInt32(random' 0' 2))                  {                      case 0:                          builder.Append(toRecase.ToUpper()); // LUCENENET NOTE: Intentionally using current culture                          break;                      case 1:                          builder.Append(toRecase.ToLower()); // LUCENENET NOTE: Intentionally using current culture                          break;                      case 2:                          builder.Append(toRecase);                          break;                  }
Magic Number,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,RandomlyRecaseString,The following statement contains a magic number: switch (NextInt32(random' 0' 2))                  {                      case 0:                          builder.Append(toRecase.ToUpper()); // LUCENENET NOTE: Intentionally using current culture                          break;                      case 1:                          builder.Append(toRecase.ToLower()); // LUCENENET NOTE: Intentionally using current culture                          break;                      case 2:                          builder.Append(toRecase);                          break;                  }
Magic Number,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,RandomRealisticUnicodeString,The following statement contains a magic number: return RandomRealisticUnicodeString(r' 20);
Magic Number,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,RandomFixedByteLengthUnicodeString,The following statement contains a magic number: char[] buffer = new char[length * 3];
Magic Number,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,RandomFixedByteLengthUnicodeString,The following statement contains a magic number: t = r.Next(5);
Magic Number,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,RandomFixedByteLengthUnicodeString,The following statement contains a magic number: bytes >= 4
Magic Number,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,ReduceOpenFiles,The following statement contains a magic number: lmp.MergeFactor = Math.Min(5' lmp.MergeFactor);
Magic Number,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,ReduceOpenFiles,The following statement contains a magic number: ((IConcurrentMergeScheduler)ms).SetMaxMergesAndThreads(3' 2);
Magic Number,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,ReduceOpenFiles,The following statement contains a magic number: ((IConcurrentMergeScheduler)ms).SetMaxMergesAndThreads(3' 2);
Magic Number,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,Docs,The following statement contains a magic number: switch (random.Next(4))                      {                          case 0:                              posFlags = 0;                              break;                            case 1:                              posFlags = DocsAndPositionsFlags.OFFSETS;                              break;                            case 2:                              posFlags = DocsAndPositionsFlags.PAYLOADS;                              break;                            default:                              posFlags = DocsAndPositionsFlags.OFFSETS | DocsAndPositionsFlags.PAYLOADS;                              break;                      }
Magic Number,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,Docs,The following statement contains a magic number: switch (random.Next(4))                      {                          case 0:                              posFlags = 0;                              break;                            case 1:                              posFlags = DocsAndPositionsFlags.OFFSETS;                              break;                            case 2:                              posFlags = DocsAndPositionsFlags.PAYLOADS;                              break;                            default:                              posFlags = DocsAndPositionsFlags.OFFSETS | DocsAndPositionsFlags.PAYLOADS;                              break;                      }
Magic Number,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,BytesToCharSequence,The following statement contains a magic number: switch (random.Next(5))              {                  case 4:                      CharsRef chars = new CharsRef(@ref.Length);                      UnicodeUtil.UTF8toUTF16(@ref.Bytes' @ref.Offset' @ref.Length' chars);                      return chars;                  //case 3: // LUCENENET: Not ported                  //    return CharBuffer.Wrap(@ref.Utf8ToString());                  default:                      return new StringCharSequenceWrapper(@ref.Utf8ToString());              }
Magic Number,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,BytesToCharSequence,The following statement contains a magic number: switch (random.Next(5))              {                  case 4:                      CharsRef chars = new CharsRef(@ref.Length);                      UnicodeUtil.UTF8toUTF16(@ref.Bytes' @ref.Offset' @ref.Length' chars);                      return chars;                  //case 3: // LUCENENET: Not ported                  //    return CharBuffer.Wrap(@ref.Utf8ToString());                  default:                      return new StringCharSequenceWrapper(@ref.Utf8ToString());              }
Magic Number,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,RandomFilterStrategy,The following statement contains a magic number: switch (random.Next(6))              {                  case 5:                  case 4:                      return new RandomAccessFilterStrategyAnonymousInnerClassHelper();                    case 3:                      return FilteredQuery.RANDOM_ACCESS_FILTER_STRATEGY;                    case 2:                      return FilteredQuery.LEAP_FROG_FILTER_FIRST_STRATEGY;                    case 1:                      return FilteredQuery.LEAP_FROG_QUERY_FIRST_STRATEGY;                    case 0:                      return FilteredQuery.QUERY_FIRST_FILTER_STRATEGY;                    default:                      return FilteredQuery.RANDOM_ACCESS_FILTER_STRATEGY;              }
Magic Number,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,RandomFilterStrategy,The following statement contains a magic number: switch (random.Next(6))              {                  case 5:                  case 4:                      return new RandomAccessFilterStrategyAnonymousInnerClassHelper();                    case 3:                      return FilteredQuery.RANDOM_ACCESS_FILTER_STRATEGY;                    case 2:                      return FilteredQuery.LEAP_FROG_FILTER_FIRST_STRATEGY;                    case 1:                      return FilteredQuery.LEAP_FROG_QUERY_FIRST_STRATEGY;                    case 0:                      return FilteredQuery.QUERY_FIRST_FILTER_STRATEGY;                    default:                      return FilteredQuery.RANDOM_ACCESS_FILTER_STRATEGY;              }
Magic Number,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,RandomFilterStrategy,The following statement contains a magic number: switch (random.Next(6))              {                  case 5:                  case 4:                      return new RandomAccessFilterStrategyAnonymousInnerClassHelper();                    case 3:                      return FilteredQuery.RANDOM_ACCESS_FILTER_STRATEGY;                    case 2:                      return FilteredQuery.LEAP_FROG_FILTER_FIRST_STRATEGY;                    case 1:                      return FilteredQuery.LEAP_FROG_QUERY_FIRST_STRATEGY;                    case 0:                      return FilteredQuery.QUERY_FIRST_FILTER_STRATEGY;                    default:                      return FilteredQuery.RANDOM_ACCESS_FILTER_STRATEGY;              }
Magic Number,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,RandomFilterStrategy,The following statement contains a magic number: switch (random.Next(6))              {                  case 5:                  case 4:                      return new RandomAccessFilterStrategyAnonymousInnerClassHelper();                    case 3:                      return FilteredQuery.RANDOM_ACCESS_FILTER_STRATEGY;                    case 2:                      return FilteredQuery.LEAP_FROG_FILTER_FIRST_STRATEGY;                    case 1:                      return FilteredQuery.LEAP_FROG_QUERY_FIRST_STRATEGY;                    case 0:                      return FilteredQuery.QUERY_FIRST_FILTER_STRATEGY;                    default:                      return FilteredQuery.RANDOM_ACCESS_FILTER_STRATEGY;              }
Magic Number,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,RandomFilterStrategy,The following statement contains a magic number: switch (random.Next(6))              {                  case 5:                  case 4:                      return new RandomAccessFilterStrategyAnonymousInnerClassHelper();                    case 3:                      return FilteredQuery.RANDOM_ACCESS_FILTER_STRATEGY;                    case 2:                      return FilteredQuery.LEAP_FROG_FILTER_FIRST_STRATEGY;                    case 1:                      return FilteredQuery.LEAP_FROG_QUERY_FIRST_STRATEGY;                    case 0:                      return FilteredQuery.QUERY_FIRST_FILTER_STRATEGY;                    default:                      return FilteredQuery.RANDOM_ACCESS_FILTER_STRATEGY;              }
Magic Number,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,RandomAnalysisString,The following statement contains a magic number: random.Next(31) == 0
Magic Number,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,RandomAnalysisString,The following statement contains a magic number: int avgWordLength = TestUtil.NextInt32(random' 3' 8);
Magic Number,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,RandomAnalysisString,The following statement contains a magic number: int avgWordLength = TestUtil.NextInt32(random' 3' 8);
Magic Number,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,RandomAnalysisString,The following statement contains a magic number: wordLength = (int)(random.NextDouble() * 3 + avgWordLength);
Magic Number,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,RandomSubString,The following statement contains a magic number: int evilness = TestUtil.NextInt32(random' 0' 20);
Magic Number,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,RandomSubString,The following statement contains a magic number: random.Next(17) == 0
Magic Number,Lucene.Net.Util,ThrottledIndexOutput,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\ThrottledIndexOutput.cs,MBitsToBytes,The following statement contains a magic number: return mbits * 125000;
Magic Number,Lucene.Net.Util,ThrottledIndexOutput,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\ThrottledIndexOutput.cs,GetDelay,The following statement contains a magic number: long actualBps = (timeElapsed / pendingBytes) * 1000000000L;
Magic Number,Lucene.Net.Util,ThrottledIndexOutput,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\ThrottledIndexOutput.cs,GetDelay,The following statement contains a magic number: long expected = (pendingBytes * 1000L / bytesPerSecond);
Magic Number,Lucene.Net.Util,ThrottledIndexOutput,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\ThrottledIndexOutput.cs,GetDelay,The following statement contains a magic number: long delay = expected - (timeElapsed / 1000000L);
Magic Number,Lucene.Net,RandomExtensions,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\RandomExtensions.cs,NextBoolean,The following statement contains a magic number: return (random.Next(1' 100) > 50);
Magic Number,Lucene.Net,RandomExtensions,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\RandomExtensions.cs,NextBoolean,The following statement contains a magic number: return (random.Next(1' 100) > 50);
Magic Number,Lucene.Net,RandomExtensions,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Support\RandomExtensions.cs,NextInt64,The following statement contains a magic number: byte[] buffer = new byte[8];
Magic Number,Lucene.Net.Util.Automaton,AutomatonTestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\Automaton\AutomatonTestUtil.cs,RandomRegexpString,The following statement contains a magic number: int end = r.Next(20);
Magic Number,Lucene.Net.Util.Automaton,AutomatonTestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\Automaton\AutomatonTestUtil.cs,RandomRegexpString,The following statement contains a magic number: int t = r.Next(15);
Magic Number,Lucene.Net.Util.Automaton,AutomatonTestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\Automaton\AutomatonTestUtil.cs,RandomAutomaton,The following statement contains a magic number: switch (random.Next(4))              {                  case 0:                      return BasicOperations.Concatenate(a1' a2);                    case 1:                      return BasicOperations.Union(a1' a2);                    case 2:                      return BasicOperations.Intersection(a1' a2);                    default:                      return BasicOperations.Minus(a1' a2);              }
Magic Number,Lucene.Net.Util.Automaton,AutomatonTestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\Automaton\AutomatonTestUtil.cs,RandomAutomaton,The following statement contains a magic number: switch (random.Next(4))              {                  case 0:                      return BasicOperations.Concatenate(a1' a2);                    case 1:                      return BasicOperations.Union(a1' a2);                    case 2:                      return BasicOperations.Intersection(a1' a2);                    default:                      return BasicOperations.Minus(a1' a2);              }
Magic Number,Lucene.Net.Util.Fst,FSTTester<T>,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\Fst\FSTTester.cs,ToBytesRef,The following statement contains a magic number: Debug.Assert(x >= 0 && x <= 255);
Magic Number,Lucene.Net.Util.Fst,FSTTester<T>,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\Fst\FSTTester.cs,SimpleRandomString,The following statement contains a magic number: int end = r.Next(10);
Magic Number,Lucene.Net.Util.Fst,FSTTester<T>,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\Fst\FSTTester.cs,SimpleRandomString,The following statement contains a magic number: buffer[i] = (char)TestUtil.NextInt32(r' 97' 102);
Magic Number,Lucene.Net.Util.Fst,FSTTester<T>,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\Fst\FSTTester.cs,SimpleRandomString,The following statement contains a magic number: buffer[i] = (char)TestUtil.NextInt32(r' 97' 102);
Magic Number,Lucene.Net.Util.Fst,FSTTester<T>,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\Fst\FSTTester.cs,ToInt32sRef,The following statement contains a magic number: return ToInt32sRef(s' inputMode' new Int32sRef(10));
Magic Number,Lucene.Net.Util.Fst,FSTTester<T>,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\Fst\FSTTester.cs,DoTest,The following statement contains a magic number: Builder<T> builder = new Builder<T>(inputMode == 0 ? FST.INPUT_TYPE.BYTE1 : FST.INPUT_TYPE.BYTE4'                                                   prune1' prune2'                                                   prune1 == 0 && prune2 == 0'                                                   allowRandomSuffixSharing ? random.NextBoolean() : true'                                                   allowRandomSuffixSharing ? TestUtil.NextInt32(random' 1' 10) : int.MaxValue'                                                   outputs'                                                   null'                                                   willRewrite'                                                   PackedInt32s.DEFAULT'                                                   true'                                                   15);
Magic Number,Lucene.Net.Util.Fst,FSTTester<T>,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\Fst\FSTTester.cs,DoTest,The following statement contains a magic number: Builder<T> builder = new Builder<T>(inputMode == 0 ? FST.INPUT_TYPE.BYTE1 : FST.INPUT_TYPE.BYTE4'                                                   prune1' prune2'                                                   prune1 == 0 && prune2 == 0'                                                   allowRandomSuffixSharing ? random.NextBoolean() : true'                                                   allowRandomSuffixSharing ? TestUtil.NextInt32(random' 1' 10) : int.MaxValue'                                                   outputs'                                                   null'                                                   willRewrite'                                                   PackedInt32s.DEFAULT'                                                   true'                                                   15);
Magic Number,Lucene.Net.Util.Fst,FSTTester<T>,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\Fst\FSTTester.cs,DoTest,The following statement contains a magic number: LuceneTestCase.VERBOSE && pairs.Count <= 20 && fst != null
Magic Number,Lucene.Net.Util.Fst,FSTTester<T>,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\Fst\FSTTester.cs,VerifyUnPruned,The following statement contains a magic number: Assert.IsNull(Util.GetByOutput(fstLong' minLong - 7));
Magic Number,Lucene.Net.Util.Fst,FSTTester<T>,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\Fst\FSTTester.cs,VerifyUnPruned,The following statement contains a magic number: Assert.IsNull(Util.GetByOutput(fstLong' maxLong + 7));
Magic Number,Lucene.Net.Util.Fst,FSTTester<T>,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\Fst\FSTTester.cs,VerifyUnPruned,The following statement contains a magic number: int num = LuceneTestCase.AtLeast(random' 100);
Magic Number,Lucene.Net.Util.Fst,FSTTester<T>,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\Fst\FSTTester.cs,VerifyUnPruned,The following statement contains a magic number: Int32sRef scratch = new Int32sRef(10);
Magic Number,Lucene.Net.Util.Fst,FSTTester<T>,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\Fst\FSTTester.cs,VerifyUnPruned,The following statement contains a magic number: int num_ = LuceneTestCase.AtLeast(random' 500);
Magic Number,Lucene.Net.Util.Fst,FSTTester<T>,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\Fst\FSTTester.cs,VerifyUnPruned,The following statement contains a magic number: num_ = LuceneTestCase.AtLeast(random' 100);
Magic Number,Lucene.Net.Util.Fst,FSTTester<T>,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\Fst\FSTTester.cs,VerifyUnPruned,The following statement contains a magic number: random.Next(3) == 0
Magic Number,Lucene.Net.Util.Fst,FSTTester<T>,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\Fst\FSTTester.cs,VerifyUnPruned,The following statement contains a magic number: num_ = LuceneTestCase.AtLeast(random' 100);
Magic Number,Lucene.Net.Util.Fst,FSTTester<T>,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\Fst\FSTTester.cs,VerifyPruned,The following statement contains a magic number: Int32sRef scratch = new Int32sRef(10);
Missing Default,Lucene.Net.Analysis,MockAnalyzer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Analysis\MockAnalyzer.cs,MaybePayload,The following switch statement is missing a default case: switch (random.Next(3))                          {                              case 0: // no payloads                                  val = -1;                                  break;                                case 1: // variable length payload                                  val = int.MaxValue;                                  break;                                case 2: // fixed length payload                                  val = random.Next(12);                                  break;                          }
Missing Default,Lucene.Net.Util,English,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\English.cs,Int64ToEnglish,The following switch statement is missing a default case: switch (((int)i) / 10)                  {                      case 9:                          result.Append("ninety");                          break;                        case 8:                          result.Append("eighty");                          break;                        case 7:                          result.Append("seventy");                          break;                        case 6:                          result.Append("sixty");                          break;                        case 5:                          result.Append("fifty");                          break;                        case 4:                          result.Append("forty");                          break;                        case 3:                          result.Append("thirty");                          break;                        case 2:                          result.Append("twenty");                          break;                  }
Missing Default,Lucene.Net.Util,English,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\English.cs,Int64ToEnglish,The following switch statement is missing a default case: switch ((int)i)              {                  case 19:                      result.Append("nineteen ");                      break;                    case 18:                      result.Append("eighteen ");                      break;                    case 17:                      result.Append("seventeen ");                      break;                    case 16:                      result.Append("sixteen ");                      break;                    case 15:                      result.Append("fifteen ");                      break;                    case 14:                      result.Append("fourteen ");                      break;                    case 13:                      result.Append("thirteen ");                      break;                    case 12:                      result.Append("twelve ");                      break;                    case 11:                      result.Append("eleven ");                      break;                    case 10:                      result.Append("ten ");                      break;                    case 9:                      result.Append("nine ");                      break;                    case 8:                      result.Append("eight ");                      break;                    case 7:                      result.Append("seven ");                      break;                    case 6:                      result.Append("six ");                      break;                    case 5:                      result.Append("five ");                      break;                    case 4:                      result.Append("four ");                      break;                    case 3:                      result.Append("three ");                      break;                    case 2:                      result.Append("two ");                      break;                    case 1:                      result.Append("one ");                      break;                    case 0:                      result.Append("");                      break;              }
Missing Default,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,RandomHtmlishString,The following switch statement is missing a default case: switch (NextInt32(random' 0' 2))                              {                                  case 0:                                      sb.Append(RandomSimpleString(random));                                      break;                                    case 1:                                      sb.Append(HTML_CHAR_ENTITIES[random.Next(HTML_CHAR_ENTITIES.Length)]);                                      break;                              }
Missing Default,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,RandomHtmlishString,The following switch statement is missing a default case: switch (NextInt32(random' 0' 3))                              {                                  case 0:                                      sb.Append(RandomlyRecaseString(random' "script"));                                      break;                                    case 1:                                      sb.Append(RandomlyRecaseString(random' "style"));                                      break;                                    case 2:                                      sb.Append(RandomlyRecaseString(random' "br"));                                      break;                                  // default: append nothing                              }
Missing Default,Lucene.Net.Util,TestUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.TestFramework\Util\TestUtil.cs,RandomlyRecaseString,The following switch statement is missing a default case: switch (NextInt32(random' 0' 2))                  {                      case 0:                          builder.Append(toRecase.ToUpper()); // LUCENENET NOTE: Intentionally using current culture                          break;                      case 1:                          builder.Append(toRecase.ToLower()); // LUCENENET NOTE: Intentionally using current culture                          break;                      case 2:                          builder.Append(toRecase);                          break;                  }
