Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Lucene.Net.Sandbox.Queries,DuplicateFilter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Sandbox\Queries\DuplicateFilter.cs,CorrectBits,Cyclomatic complexity of the method is 8
Complex Method,Lucene.Net.Sandbox.Queries,DuplicateFilter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Sandbox\Queries\DuplicateFilter.cs,FastBits,Cyclomatic complexity of the method is 10
Complex Method,Lucene.Net.Sandbox.Queries,FuzzyLikeThisQuery,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Sandbox\Queries\FuzzyLikeThisQuery.cs,AddTerms,Cyclomatic complexity of the method is 9
Complex Method,Lucene.Net.Sandbox.Queries,FuzzyLikeThisQuery,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Sandbox\Queries\FuzzyLikeThisQuery.cs,Rewrite,Cyclomatic complexity of the method is 8
Long Parameter List,Lucene.Net.Sandbox.Queries,SlowFuzzyTermsEnum,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Sandbox\Queries\SlowFuzzyTermsEnum.cs,SlowFuzzyTermsEnum,The method has 5 parameters.
Long Statement,Lucene.Net.Sandbox.Queries,DuplicateFilter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Sandbox\Queries\DuplicateFilter.cs,Equals,The length of the statement  "	return keepMode == other.keepMode && processingMode == other.processingMode && fieldName != null && fieldName.Equals (other.fieldName); " is 135.
Magic Number,Lucene.Net.Sandbox.Queries,DuplicateFilter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Sandbox\Queries\DuplicateFilter.cs,GetHashCode,The following statement contains a magic number: hash = 31 * hash + keepMode.GetHashCode ();  
Magic Number,Lucene.Net.Sandbox.Queries,DuplicateFilter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Sandbox\Queries\DuplicateFilter.cs,GetHashCode,The following statement contains a magic number: hash = 31 * hash + processingMode.GetHashCode ();  
Magic Number,Lucene.Net.Sandbox.Queries,DuplicateFilter,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Sandbox\Queries\DuplicateFilter.cs,GetHashCode,The following statement contains a magic number: hash = 31 * hash + fieldName.GetHashCode ();  
Magic Number,Lucene.Net.Sandbox.Queries,FuzzyLikeThisQuery,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Sandbox\Queries\FuzzyLikeThisQuery.cs,GetHashCode,The following statement contains a magic number: result = prime * result + (ignoreTF ? 1231 : 1237);  
Magic Number,Lucene.Net.Sandbox.Queries,FuzzyLikeThisQuery,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Sandbox\Queries\FuzzyLikeThisQuery.cs,GetHashCode,The following statement contains a magic number: result = prime * result + (ignoreTF ? 1231 : 1237);  
Magic Number,Lucene.Net.Sandbox.Queries,FuzzyLikeThisQuery,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Sandbox\Queries\FuzzyLikeThisQuery.cs,AddTerms,The following statement contains a magic number: try {  	ICharTermAttribute termAtt = ts.AddAttribute<ICharTermAttribute> ();  	int corpusNumDocs = reader.NumDocs;  	HashSet<string> processedTerms = new HashSet<string> ();  	ts.Reset ();  	while (ts.IncrementToken ()) {  		string term = termAtt.ToString ();  		if (!processedTerms.Contains (term)) {  			processedTerms.Add (term);  			ScoreTermQueue variantsQ = new ScoreTermQueue (MAX_VARIANTS_PER_TERM);  			//maxNum variants considered for any one term  			float minScore = 0;  			Term startTerm = new Term (f.fieldName' term);  			AttributeSource atts = new AttributeSource ();  			IMaxNonCompetitiveBoostAttribute maxBoostAtt = atts.AddAttribute<IMaxNonCompetitiveBoostAttribute> ();  			#pragma  			SlowFuzzyTermsEnum fe = new SlowFuzzyTermsEnum (terms' atts' startTerm' f.minSimilarity' f.prefixLength);  			#pragma  			//store the df so all variants use same idf  			int df = reader.DocFreq (startTerm);  			int numVariants = 0;  			int totalVariantDocFreqs = 0;  			BytesRef possibleMatch;  			IBoostAttribute boostAtt = fe.Attributes.AddAttribute<IBoostAttribute> ();  			while ((possibleMatch = fe.Next ()) != null) {  				numVariants++;  				totalVariantDocFreqs += fe.DocFreq;  				float score = boostAtt.Boost;  				if (variantsQ.Count < MAX_VARIANTS_PER_TERM || score > minScore) {  					ScoreTerm st = new ScoreTerm (new Term (startTerm.Field' BytesRef.DeepCopyOf (possibleMatch))' score' startTerm);  					variantsQ.InsertWithOverflow (st);  					minScore = variantsQ.Top.Score;  					// maintain minScore  				}  				maxBoostAtt.MaxNonCompetitiveBoost = variantsQ.Count >= MAX_VARIANTS_PER_TERM ? minScore : float.NegativeInfinity;  			}  			if (numVariants > 0) {  				int avgDf = totalVariantDocFreqs / numVariants;  				if (df == 0)//no direct match we can use as df for all variants  				 {  					df = avgDf;  					//use avg df of all variants  				}  				// take the top variants (scored by edit distance) and reset the score  				// to include an IDF factor then add to the global queue for ranking  				// overall top query terms  				int size = variantsQ.Count;  				for (int i = 0; i < size; i++) {  					ScoreTerm st = variantsQ.Pop ();  					st.Score = (st.Score * st.Score) * sim.Idf (df' corpusNumDocs);  					q.InsertWithOverflow (st);  				}  			}  		}  	}  	ts.End ();  } finally {  	IOUtils.CloseWhileHandlingException (ts);  }  
Magic Number,Lucene.Net.Sandbox.Queries,FuzzyLikeThisQuery,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Sandbox\Queries\FuzzyLikeThisQuery.cs,AddTerms,The following statement contains a magic number: try {  	ICharTermAttribute termAtt = ts.AddAttribute<ICharTermAttribute> ();  	int corpusNumDocs = reader.NumDocs;  	HashSet<string> processedTerms = new HashSet<string> ();  	ts.Reset ();  	while (ts.IncrementToken ()) {  		string term = termAtt.ToString ();  		if (!processedTerms.Contains (term)) {  			processedTerms.Add (term);  			ScoreTermQueue variantsQ = new ScoreTermQueue (MAX_VARIANTS_PER_TERM);  			//maxNum variants considered for any one term  			float minScore = 0;  			Term startTerm = new Term (f.fieldName' term);  			AttributeSource atts = new AttributeSource ();  			IMaxNonCompetitiveBoostAttribute maxBoostAtt = atts.AddAttribute<IMaxNonCompetitiveBoostAttribute> ();  			#pragma  			SlowFuzzyTermsEnum fe = new SlowFuzzyTermsEnum (terms' atts' startTerm' f.minSimilarity' f.prefixLength);  			#pragma  			//store the df so all variants use same idf  			int df = reader.DocFreq (startTerm);  			int numVariants = 0;  			int totalVariantDocFreqs = 0;  			BytesRef possibleMatch;  			IBoostAttribute boostAtt = fe.Attributes.AddAttribute<IBoostAttribute> ();  			while ((possibleMatch = fe.Next ()) != null) {  				numVariants++;  				totalVariantDocFreqs += fe.DocFreq;  				float score = boostAtt.Boost;  				if (variantsQ.Count < MAX_VARIANTS_PER_TERM || score > minScore) {  					ScoreTerm st = new ScoreTerm (new Term (startTerm.Field' BytesRef.DeepCopyOf (possibleMatch))' score' startTerm);  					variantsQ.InsertWithOverflow (st);  					minScore = variantsQ.Top.Score;  					// maintain minScore  				}  				maxBoostAtt.MaxNonCompetitiveBoost = variantsQ.Count >= MAX_VARIANTS_PER_TERM ? minScore : float.NegativeInfinity;  			}  			if (numVariants > 0) {  				int avgDf = totalVariantDocFreqs / numVariants;  				if (df == 0)//no direct match we can use as df for all variants  				 {  					df = avgDf;  					//use avg df of all variants  				}  				// take the top variants (scored by edit distance) and reset the score  				// to include an IDF factor then add to the global queue for ranking  				// overall top query terms  				int size = variantsQ.Count;  				for (int i = 0; i < size; i++) {  					ScoreTerm st = variantsQ.Pop ();  					st.Score = (st.Score * st.Score) * sim.Idf (df' corpusNumDocs);  					q.InsertWithOverflow (st);  				}  			}  		}  	}  	ts.End ();  } finally {  	IOUtils.CloseWhileHandlingException (ts);  }  
Magic Number,Lucene.Net.Sandbox.Queries,FuzzyLikeThisQuery,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Sandbox\Queries\FuzzyLikeThisQuery.cs,AddTerms,The following statement contains a magic number: try {  	ICharTermAttribute termAtt = ts.AddAttribute<ICharTermAttribute> ();  	int corpusNumDocs = reader.NumDocs;  	HashSet<string> processedTerms = new HashSet<string> ();  	ts.Reset ();  	while (ts.IncrementToken ()) {  		string term = termAtt.ToString ();  		if (!processedTerms.Contains (term)) {  			processedTerms.Add (term);  			ScoreTermQueue variantsQ = new ScoreTermQueue (MAX_VARIANTS_PER_TERM);  			//maxNum variants considered for any one term  			float minScore = 0;  			Term startTerm = new Term (f.fieldName' term);  			AttributeSource atts = new AttributeSource ();  			IMaxNonCompetitiveBoostAttribute maxBoostAtt = atts.AddAttribute<IMaxNonCompetitiveBoostAttribute> ();  			#pragma  			SlowFuzzyTermsEnum fe = new SlowFuzzyTermsEnum (terms' atts' startTerm' f.minSimilarity' f.prefixLength);  			#pragma  			//store the df so all variants use same idf  			int df = reader.DocFreq (startTerm);  			int numVariants = 0;  			int totalVariantDocFreqs = 0;  			BytesRef possibleMatch;  			IBoostAttribute boostAtt = fe.Attributes.AddAttribute<IBoostAttribute> ();  			while ((possibleMatch = fe.Next ()) != null) {  				numVariants++;  				totalVariantDocFreqs += fe.DocFreq;  				float score = boostAtt.Boost;  				if (variantsQ.Count < MAX_VARIANTS_PER_TERM || score > minScore) {  					ScoreTerm st = new ScoreTerm (new Term (startTerm.Field' BytesRef.DeepCopyOf (possibleMatch))' score' startTerm);  					variantsQ.InsertWithOverflow (st);  					minScore = variantsQ.Top.Score;  					// maintain minScore  				}  				maxBoostAtt.MaxNonCompetitiveBoost = variantsQ.Count >= MAX_VARIANTS_PER_TERM ? minScore : float.NegativeInfinity;  			}  			if (numVariants > 0) {  				int avgDf = totalVariantDocFreqs / numVariants;  				if (df == 0)//no direct match we can use as df for all variants  				 {  					df = avgDf;  					//use avg df of all variants  				}  				// take the top variants (scored by edit distance) and reset the score  				// to include an IDF factor then add to the global queue for ranking  				// overall top query terms  				int size = variantsQ.Count;  				for (int i = 0; i < size; i++) {  					ScoreTerm st = variantsQ.Pop ();  					st.Score = (st.Score * st.Score) * sim.Idf (df' corpusNumDocs);  					q.InsertWithOverflow (st);  				}  			}  		}  	}  	ts.End ();  } finally {  	IOUtils.CloseWhileHandlingException (ts);  }  
Magic Number,Lucene.Net.Sandbox.Queries,FuzzyLikeThisQuery,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Sandbox\Queries\FuzzyLikeThisQuery.cs,AddTerms,The following statement contains a magic number: try {  	ICharTermAttribute termAtt = ts.AddAttribute<ICharTermAttribute> ();  	int corpusNumDocs = reader.NumDocs;  	HashSet<string> processedTerms = new HashSet<string> ();  	ts.Reset ();  	while (ts.IncrementToken ()) {  		string term = termAtt.ToString ();  		if (!processedTerms.Contains (term)) {  			processedTerms.Add (term);  			ScoreTermQueue variantsQ = new ScoreTermQueue (MAX_VARIANTS_PER_TERM);  			//maxNum variants considered for any one term  			float minScore = 0;  			Term startTerm = new Term (f.fieldName' term);  			AttributeSource atts = new AttributeSource ();  			IMaxNonCompetitiveBoostAttribute maxBoostAtt = atts.AddAttribute<IMaxNonCompetitiveBoostAttribute> ();  			#pragma  			SlowFuzzyTermsEnum fe = new SlowFuzzyTermsEnum (terms' atts' startTerm' f.minSimilarity' f.prefixLength);  			#pragma  			//store the df so all variants use same idf  			int df = reader.DocFreq (startTerm);  			int numVariants = 0;  			int totalVariantDocFreqs = 0;  			BytesRef possibleMatch;  			IBoostAttribute boostAtt = fe.Attributes.AddAttribute<IBoostAttribute> ();  			while ((possibleMatch = fe.Next ()) != null) {  				numVariants++;  				totalVariantDocFreqs += fe.DocFreq;  				float score = boostAtt.Boost;  				if (variantsQ.Count < MAX_VARIANTS_PER_TERM || score > minScore) {  					ScoreTerm st = new ScoreTerm (new Term (startTerm.Field' BytesRef.DeepCopyOf (possibleMatch))' score' startTerm);  					variantsQ.InsertWithOverflow (st);  					minScore = variantsQ.Top.Score;  					// maintain minScore  				}  				maxBoostAtt.MaxNonCompetitiveBoost = variantsQ.Count >= MAX_VARIANTS_PER_TERM ? minScore : float.NegativeInfinity;  			}  			if (numVariants > 0) {  				int avgDf = totalVariantDocFreqs / numVariants;  				if (df == 0)//no direct match we can use as df for all variants  				 {  					df = avgDf;  					//use avg df of all variants  				}  				// take the top variants (scored by edit distance) and reset the score  				// to include an IDF factor then add to the global queue for ranking  				// overall top query terms  				int size = variantsQ.Count;  				for (int i = 0; i < size; i++) {  					ScoreTerm st = variantsQ.Pop ();  					st.Score = (st.Score * st.Score) * sim.Idf (df' corpusNumDocs);  					q.InsertWithOverflow (st);  				}  			}  		}  	}  	ts.End ();  } finally {  	IOUtils.CloseWhileHandlingException (ts);  }  
Magic Number,Lucene.Net.Sandbox.Queries,FuzzyLikeThisQuery,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Sandbox\Queries\FuzzyLikeThisQuery.cs,AddTerms,The following statement contains a magic number: while (ts.IncrementToken ()) {  	string term = termAtt.ToString ();  	if (!processedTerms.Contains (term)) {  		processedTerms.Add (term);  		ScoreTermQueue variantsQ = new ScoreTermQueue (MAX_VARIANTS_PER_TERM);  		//maxNum variants considered for any one term  		float minScore = 0;  		Term startTerm = new Term (f.fieldName' term);  		AttributeSource atts = new AttributeSource ();  		IMaxNonCompetitiveBoostAttribute maxBoostAtt = atts.AddAttribute<IMaxNonCompetitiveBoostAttribute> ();  		#pragma  		SlowFuzzyTermsEnum fe = new SlowFuzzyTermsEnum (terms' atts' startTerm' f.minSimilarity' f.prefixLength);  		#pragma  		//store the df so all variants use same idf  		int df = reader.DocFreq (startTerm);  		int numVariants = 0;  		int totalVariantDocFreqs = 0;  		BytesRef possibleMatch;  		IBoostAttribute boostAtt = fe.Attributes.AddAttribute<IBoostAttribute> ();  		while ((possibleMatch = fe.Next ()) != null) {  			numVariants++;  			totalVariantDocFreqs += fe.DocFreq;  			float score = boostAtt.Boost;  			if (variantsQ.Count < MAX_VARIANTS_PER_TERM || score > minScore) {  				ScoreTerm st = new ScoreTerm (new Term (startTerm.Field' BytesRef.DeepCopyOf (possibleMatch))' score' startTerm);  				variantsQ.InsertWithOverflow (st);  				minScore = variantsQ.Top.Score;  				// maintain minScore  			}  			maxBoostAtt.MaxNonCompetitiveBoost = variantsQ.Count >= MAX_VARIANTS_PER_TERM ? minScore : float.NegativeInfinity;  		}  		if (numVariants > 0) {  			int avgDf = totalVariantDocFreqs / numVariants;  			if (df == 0)//no direct match we can use as df for all variants  			 {  				df = avgDf;  				//use avg df of all variants  			}  			// take the top variants (scored by edit distance) and reset the score  			// to include an IDF factor then add to the global queue for ranking  			// overall top query terms  			int size = variantsQ.Count;  			for (int i = 0; i < size; i++) {  				ScoreTerm st = variantsQ.Pop ();  				st.Score = (st.Score * st.Score) * sim.Idf (df' corpusNumDocs);  				q.InsertWithOverflow (st);  			}  		}  	}  }  
Magic Number,Lucene.Net.Sandbox.Queries,FuzzyLikeThisQuery,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Sandbox\Queries\FuzzyLikeThisQuery.cs,AddTerms,The following statement contains a magic number: while (ts.IncrementToken ()) {  	string term = termAtt.ToString ();  	if (!processedTerms.Contains (term)) {  		processedTerms.Add (term);  		ScoreTermQueue variantsQ = new ScoreTermQueue (MAX_VARIANTS_PER_TERM);  		//maxNum variants considered for any one term  		float minScore = 0;  		Term startTerm = new Term (f.fieldName' term);  		AttributeSource atts = new AttributeSource ();  		IMaxNonCompetitiveBoostAttribute maxBoostAtt = atts.AddAttribute<IMaxNonCompetitiveBoostAttribute> ();  		#pragma  		SlowFuzzyTermsEnum fe = new SlowFuzzyTermsEnum (terms' atts' startTerm' f.minSimilarity' f.prefixLength);  		#pragma  		//store the df so all variants use same idf  		int df = reader.DocFreq (startTerm);  		int numVariants = 0;  		int totalVariantDocFreqs = 0;  		BytesRef possibleMatch;  		IBoostAttribute boostAtt = fe.Attributes.AddAttribute<IBoostAttribute> ();  		while ((possibleMatch = fe.Next ()) != null) {  			numVariants++;  			totalVariantDocFreqs += fe.DocFreq;  			float score = boostAtt.Boost;  			if (variantsQ.Count < MAX_VARIANTS_PER_TERM || score > minScore) {  				ScoreTerm st = new ScoreTerm (new Term (startTerm.Field' BytesRef.DeepCopyOf (possibleMatch))' score' startTerm);  				variantsQ.InsertWithOverflow (st);  				minScore = variantsQ.Top.Score;  				// maintain minScore  			}  			maxBoostAtt.MaxNonCompetitiveBoost = variantsQ.Count >= MAX_VARIANTS_PER_TERM ? minScore : float.NegativeInfinity;  		}  		if (numVariants > 0) {  			int avgDf = totalVariantDocFreqs / numVariants;  			if (df == 0)//no direct match we can use as df for all variants  			 {  				df = avgDf;  				//use avg df of all variants  			}  			// take the top variants (scored by edit distance) and reset the score  			// to include an IDF factor then add to the global queue for ranking  			// overall top query terms  			int size = variantsQ.Count;  			for (int i = 0; i < size; i++) {  				ScoreTerm st = variantsQ.Pop ();  				st.Score = (st.Score * st.Score) * sim.Idf (df' corpusNumDocs);  				q.InsertWithOverflow (st);  			}  		}  	}  }  
Magic Number,Lucene.Net.Sandbox.Queries,FuzzyLikeThisQuery,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Sandbox\Queries\FuzzyLikeThisQuery.cs,AddTerms,The following statement contains a magic number: while (ts.IncrementToken ()) {  	string term = termAtt.ToString ();  	if (!processedTerms.Contains (term)) {  		processedTerms.Add (term);  		ScoreTermQueue variantsQ = new ScoreTermQueue (MAX_VARIANTS_PER_TERM);  		//maxNum variants considered for any one term  		float minScore = 0;  		Term startTerm = new Term (f.fieldName' term);  		AttributeSource atts = new AttributeSource ();  		IMaxNonCompetitiveBoostAttribute maxBoostAtt = atts.AddAttribute<IMaxNonCompetitiveBoostAttribute> ();  		#pragma  		SlowFuzzyTermsEnum fe = new SlowFuzzyTermsEnum (terms' atts' startTerm' f.minSimilarity' f.prefixLength);  		#pragma  		//store the df so all variants use same idf  		int df = reader.DocFreq (startTerm);  		int numVariants = 0;  		int totalVariantDocFreqs = 0;  		BytesRef possibleMatch;  		IBoostAttribute boostAtt = fe.Attributes.AddAttribute<IBoostAttribute> ();  		while ((possibleMatch = fe.Next ()) != null) {  			numVariants++;  			totalVariantDocFreqs += fe.DocFreq;  			float score = boostAtt.Boost;  			if (variantsQ.Count < MAX_VARIANTS_PER_TERM || score > minScore) {  				ScoreTerm st = new ScoreTerm (new Term (startTerm.Field' BytesRef.DeepCopyOf (possibleMatch))' score' startTerm);  				variantsQ.InsertWithOverflow (st);  				minScore = variantsQ.Top.Score;  				// maintain minScore  			}  			maxBoostAtt.MaxNonCompetitiveBoost = variantsQ.Count >= MAX_VARIANTS_PER_TERM ? minScore : float.NegativeInfinity;  		}  		if (numVariants > 0) {  			int avgDf = totalVariantDocFreqs / numVariants;  			if (df == 0)//no direct match we can use as df for all variants  			 {  				df = avgDf;  				//use avg df of all variants  			}  			// take the top variants (scored by edit distance) and reset the score  			// to include an IDF factor then add to the global queue for ranking  			// overall top query terms  			int size = variantsQ.Count;  			for (int i = 0; i < size; i++) {  				ScoreTerm st = variantsQ.Pop ();  				st.Score = (st.Score * st.Score) * sim.Idf (df' corpusNumDocs);  				q.InsertWithOverflow (st);  			}  		}  	}  }  
Magic Number,Lucene.Net.Sandbox.Queries,FuzzyLikeThisQuery,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Sandbox\Queries\FuzzyLikeThisQuery.cs,AddTerms,The following statement contains a magic number: while (ts.IncrementToken ()) {  	string term = termAtt.ToString ();  	if (!processedTerms.Contains (term)) {  		processedTerms.Add (term);  		ScoreTermQueue variantsQ = new ScoreTermQueue (MAX_VARIANTS_PER_TERM);  		//maxNum variants considered for any one term  		float minScore = 0;  		Term startTerm = new Term (f.fieldName' term);  		AttributeSource atts = new AttributeSource ();  		IMaxNonCompetitiveBoostAttribute maxBoostAtt = atts.AddAttribute<IMaxNonCompetitiveBoostAttribute> ();  		#pragma  		SlowFuzzyTermsEnum fe = new SlowFuzzyTermsEnum (terms' atts' startTerm' f.minSimilarity' f.prefixLength);  		#pragma  		//store the df so all variants use same idf  		int df = reader.DocFreq (startTerm);  		int numVariants = 0;  		int totalVariantDocFreqs = 0;  		BytesRef possibleMatch;  		IBoostAttribute boostAtt = fe.Attributes.AddAttribute<IBoostAttribute> ();  		while ((possibleMatch = fe.Next ()) != null) {  			numVariants++;  			totalVariantDocFreqs += fe.DocFreq;  			float score = boostAtt.Boost;  			if (variantsQ.Count < MAX_VARIANTS_PER_TERM || score > minScore) {  				ScoreTerm st = new ScoreTerm (new Term (startTerm.Field' BytesRef.DeepCopyOf (possibleMatch))' score' startTerm);  				variantsQ.InsertWithOverflow (st);  				minScore = variantsQ.Top.Score;  				// maintain minScore  			}  			maxBoostAtt.MaxNonCompetitiveBoost = variantsQ.Count >= MAX_VARIANTS_PER_TERM ? minScore : float.NegativeInfinity;  		}  		if (numVariants > 0) {  			int avgDf = totalVariantDocFreqs / numVariants;  			if (df == 0)//no direct match we can use as df for all variants  			 {  				df = avgDf;  				//use avg df of all variants  			}  			// take the top variants (scored by edit distance) and reset the score  			// to include an IDF factor then add to the global queue for ranking  			// overall top query terms  			int size = variantsQ.Count;  			for (int i = 0; i < size; i++) {  				ScoreTerm st = variantsQ.Pop ();  				st.Score = (st.Score * st.Score) * sim.Idf (df' corpusNumDocs);  				q.InsertWithOverflow (st);  			}  		}  	}  }  
Magic Number,Lucene.Net.Sandbox.Queries,FuzzyLikeThisQuery,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Sandbox\Queries\FuzzyLikeThisQuery.cs,AddTerms,The following statement contains a magic number: if (!processedTerms.Contains (term)) {  	processedTerms.Add (term);  	ScoreTermQueue variantsQ = new ScoreTermQueue (MAX_VARIANTS_PER_TERM);  	//maxNum variants considered for any one term  	float minScore = 0;  	Term startTerm = new Term (f.fieldName' term);  	AttributeSource atts = new AttributeSource ();  	IMaxNonCompetitiveBoostAttribute maxBoostAtt = atts.AddAttribute<IMaxNonCompetitiveBoostAttribute> ();  	#pragma  	SlowFuzzyTermsEnum fe = new SlowFuzzyTermsEnum (terms' atts' startTerm' f.minSimilarity' f.prefixLength);  	#pragma  	//store the df so all variants use same idf  	int df = reader.DocFreq (startTerm);  	int numVariants = 0;  	int totalVariantDocFreqs = 0;  	BytesRef possibleMatch;  	IBoostAttribute boostAtt = fe.Attributes.AddAttribute<IBoostAttribute> ();  	while ((possibleMatch = fe.Next ()) != null) {  		numVariants++;  		totalVariantDocFreqs += fe.DocFreq;  		float score = boostAtt.Boost;  		if (variantsQ.Count < MAX_VARIANTS_PER_TERM || score > minScore) {  			ScoreTerm st = new ScoreTerm (new Term (startTerm.Field' BytesRef.DeepCopyOf (possibleMatch))' score' startTerm);  			variantsQ.InsertWithOverflow (st);  			minScore = variantsQ.Top.Score;  			// maintain minScore  		}  		maxBoostAtt.MaxNonCompetitiveBoost = variantsQ.Count >= MAX_VARIANTS_PER_TERM ? minScore : float.NegativeInfinity;  	}  	if (numVariants > 0) {  		int avgDf = totalVariantDocFreqs / numVariants;  		if (df == 0)//no direct match we can use as df for all variants  		 {  			df = avgDf;  			//use avg df of all variants  		}  		// take the top variants (scored by edit distance) and reset the score  		// to include an IDF factor then add to the global queue for ranking  		// overall top query terms  		int size = variantsQ.Count;  		for (int i = 0; i < size; i++) {  			ScoreTerm st = variantsQ.Pop ();  			st.Score = (st.Score * st.Score) * sim.Idf (df' corpusNumDocs);  			q.InsertWithOverflow (st);  		}  	}  }  
Magic Number,Lucene.Net.Sandbox.Queries,FuzzyLikeThisQuery,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Sandbox\Queries\FuzzyLikeThisQuery.cs,AddTerms,The following statement contains a magic number: if (!processedTerms.Contains (term)) {  	processedTerms.Add (term);  	ScoreTermQueue variantsQ = new ScoreTermQueue (MAX_VARIANTS_PER_TERM);  	//maxNum variants considered for any one term  	float minScore = 0;  	Term startTerm = new Term (f.fieldName' term);  	AttributeSource atts = new AttributeSource ();  	IMaxNonCompetitiveBoostAttribute maxBoostAtt = atts.AddAttribute<IMaxNonCompetitiveBoostAttribute> ();  	#pragma  	SlowFuzzyTermsEnum fe = new SlowFuzzyTermsEnum (terms' atts' startTerm' f.minSimilarity' f.prefixLength);  	#pragma  	//store the df so all variants use same idf  	int df = reader.DocFreq (startTerm);  	int numVariants = 0;  	int totalVariantDocFreqs = 0;  	BytesRef possibleMatch;  	IBoostAttribute boostAtt = fe.Attributes.AddAttribute<IBoostAttribute> ();  	while ((possibleMatch = fe.Next ()) != null) {  		numVariants++;  		totalVariantDocFreqs += fe.DocFreq;  		float score = boostAtt.Boost;  		if (variantsQ.Count < MAX_VARIANTS_PER_TERM || score > minScore) {  			ScoreTerm st = new ScoreTerm (new Term (startTerm.Field' BytesRef.DeepCopyOf (possibleMatch))' score' startTerm);  			variantsQ.InsertWithOverflow (st);  			minScore = variantsQ.Top.Score;  			// maintain minScore  		}  		maxBoostAtt.MaxNonCompetitiveBoost = variantsQ.Count >= MAX_VARIANTS_PER_TERM ? minScore : float.NegativeInfinity;  	}  	if (numVariants > 0) {  		int avgDf = totalVariantDocFreqs / numVariants;  		if (df == 0)//no direct match we can use as df for all variants  		 {  			df = avgDf;  			//use avg df of all variants  		}  		// take the top variants (scored by edit distance) and reset the score  		// to include an IDF factor then add to the global queue for ranking  		// overall top query terms  		int size = variantsQ.Count;  		for (int i = 0; i < size; i++) {  			ScoreTerm st = variantsQ.Pop ();  			st.Score = (st.Score * st.Score) * sim.Idf (df' corpusNumDocs);  			q.InsertWithOverflow (st);  		}  	}  }  
Magic Number,Lucene.Net.Sandbox.Queries,FuzzyLikeThisQuery,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Sandbox\Queries\FuzzyLikeThisQuery.cs,AddTerms,The following statement contains a magic number: if (!processedTerms.Contains (term)) {  	processedTerms.Add (term);  	ScoreTermQueue variantsQ = new ScoreTermQueue (MAX_VARIANTS_PER_TERM);  	//maxNum variants considered for any one term  	float minScore = 0;  	Term startTerm = new Term (f.fieldName' term);  	AttributeSource atts = new AttributeSource ();  	IMaxNonCompetitiveBoostAttribute maxBoostAtt = atts.AddAttribute<IMaxNonCompetitiveBoostAttribute> ();  	#pragma  	SlowFuzzyTermsEnum fe = new SlowFuzzyTermsEnum (terms' atts' startTerm' f.minSimilarity' f.prefixLength);  	#pragma  	//store the df so all variants use same idf  	int df = reader.DocFreq (startTerm);  	int numVariants = 0;  	int totalVariantDocFreqs = 0;  	BytesRef possibleMatch;  	IBoostAttribute boostAtt = fe.Attributes.AddAttribute<IBoostAttribute> ();  	while ((possibleMatch = fe.Next ()) != null) {  		numVariants++;  		totalVariantDocFreqs += fe.DocFreq;  		float score = boostAtt.Boost;  		if (variantsQ.Count < MAX_VARIANTS_PER_TERM || score > minScore) {  			ScoreTerm st = new ScoreTerm (new Term (startTerm.Field' BytesRef.DeepCopyOf (possibleMatch))' score' startTerm);  			variantsQ.InsertWithOverflow (st);  			minScore = variantsQ.Top.Score;  			// maintain minScore  		}  		maxBoostAtt.MaxNonCompetitiveBoost = variantsQ.Count >= MAX_VARIANTS_PER_TERM ? minScore : float.NegativeInfinity;  	}  	if (numVariants > 0) {  		int avgDf = totalVariantDocFreqs / numVariants;  		if (df == 0)//no direct match we can use as df for all variants  		 {  			df = avgDf;  			//use avg df of all variants  		}  		// take the top variants (scored by edit distance) and reset the score  		// to include an IDF factor then add to the global queue for ranking  		// overall top query terms  		int size = variantsQ.Count;  		for (int i = 0; i < size; i++) {  			ScoreTerm st = variantsQ.Pop ();  			st.Score = (st.Score * st.Score) * sim.Idf (df' corpusNumDocs);  			q.InsertWithOverflow (st);  		}  	}  }  
Magic Number,Lucene.Net.Sandbox.Queries,FuzzyLikeThisQuery,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Sandbox\Queries\FuzzyLikeThisQuery.cs,AddTerms,The following statement contains a magic number: if (!processedTerms.Contains (term)) {  	processedTerms.Add (term);  	ScoreTermQueue variantsQ = new ScoreTermQueue (MAX_VARIANTS_PER_TERM);  	//maxNum variants considered for any one term  	float minScore = 0;  	Term startTerm = new Term (f.fieldName' term);  	AttributeSource atts = new AttributeSource ();  	IMaxNonCompetitiveBoostAttribute maxBoostAtt = atts.AddAttribute<IMaxNonCompetitiveBoostAttribute> ();  	#pragma  	SlowFuzzyTermsEnum fe = new SlowFuzzyTermsEnum (terms' atts' startTerm' f.minSimilarity' f.prefixLength);  	#pragma  	//store the df so all variants use same idf  	int df = reader.DocFreq (startTerm);  	int numVariants = 0;  	int totalVariantDocFreqs = 0;  	BytesRef possibleMatch;  	IBoostAttribute boostAtt = fe.Attributes.AddAttribute<IBoostAttribute> ();  	while ((possibleMatch = fe.Next ()) != null) {  		numVariants++;  		totalVariantDocFreqs += fe.DocFreq;  		float score = boostAtt.Boost;  		if (variantsQ.Count < MAX_VARIANTS_PER_TERM || score > minScore) {  			ScoreTerm st = new ScoreTerm (new Term (startTerm.Field' BytesRef.DeepCopyOf (possibleMatch))' score' startTerm);  			variantsQ.InsertWithOverflow (st);  			minScore = variantsQ.Top.Score;  			// maintain minScore  		}  		maxBoostAtt.MaxNonCompetitiveBoost = variantsQ.Count >= MAX_VARIANTS_PER_TERM ? minScore : float.NegativeInfinity;  	}  	if (numVariants > 0) {  		int avgDf = totalVariantDocFreqs / numVariants;  		if (df == 0)//no direct match we can use as df for all variants  		 {  			df = avgDf;  			//use avg df of all variants  		}  		// take the top variants (scored by edit distance) and reset the score  		// to include an IDF factor then add to the global queue for ranking  		// overall top query terms  		int size = variantsQ.Count;  		for (int i = 0; i < size; i++) {  			ScoreTerm st = variantsQ.Pop ();  			st.Score = (st.Score * st.Score) * sim.Idf (df' corpusNumDocs);  			q.InsertWithOverflow (st);  		}  	}  }  
Magic Number,Lucene.Net.Sandbox.Queries,SortedSetSortField,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Sandbox\Queries\SortedSetSortField.cs,GetHashCode,The following statement contains a magic number: return 31 * base.GetHashCode () + selector.GetHashCode ();  
