Implementation smell,Namespace,Class,File,Method,Description
Long Method,Egothor.Stemmer,Diff,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\Diff.cs,Exec,The method has 124 lines of code.
Complex Method,Egothor.Stemmer,Compile,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\Compile.cs,Main,Cyclomatic complexity of the method is 38
Complex Method,Egothor.Stemmer,Diff,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\Diff.cs,Apply,Cyclomatic complexity of the method is 19
Complex Method,Egothor.Stemmer,Diff,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\Diff.cs,Exec,Cyclomatic complexity of the method is 43
Complex Method,Egothor.Stemmer,Lift,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\Lift.cs,LiftUp,Cyclomatic complexity of the method is 9
Complex Method,Egothor.Stemmer,MultiTrie2,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\MultiTrie2.cs,GetFully,Cyclomatic complexity of the method is 10
Complex Method,Egothor.Stemmer,MultiTrie2,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\MultiTrie2.cs,GetLastOnPath,Cyclomatic complexity of the method is 10
Complex Method,Egothor.Stemmer,MultiTrie2,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\MultiTrie2.cs,Add,Cyclomatic complexity of the method is 10
Complex Method,Egothor.Stemmer,MultiTrie2,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\MultiTrie2.cs,LengthPP,Cyclomatic complexity of the method is 10
Complex Method,Egothor.Stemmer,Optimizer,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\Optimizer.cs,Merge,Cyclomatic complexity of the method is 9
Complex Method,Egothor.Stemmer,Row,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\Row.cs,UniformCmd,Cyclomatic complexity of the method is 8
Complex Method,Egothor.Stemmer,Trie,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\Trie.cs,GetAll,Cyclomatic complexity of the method is 14
Long Statement,Egothor.Stemmer,Compile,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\Compile.cs,Main,The length of the statement  "		using (@in = new StreamReader (new FileStream (args [i]' FileMode.Open' FileAccess.Read)' Encoding.GetEncoding (charset))) { " is 124.
Long Statement,Egothor.Stemmer,Compile,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\Compile.cs,Main,The length of the statement  "		using (DataOutputStream os = new DataOutputStream (new FileStream (args [i] + ".out"' FileMode.OpenOrCreate' FileAccess.Write))) { " is 130.
Long Statement,Egothor.Stemmer,Trie,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\Trie.cs,PrintInfo,The length of the statement  "	@out.WriteLine (prefix + "nds " + rows.Count + " cmds " + cmds.Count + " cells " + GetCells () + " valcells " + GetCellsVal () + " pntcells " + GetCellsPnt ()); " is 160.
Empty Catch Block,Egothor.Stemmer,Compile,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\Compile.cs,Main,The method has an empty catch block.
Empty Catch Block,Egothor.Stemmer,Compile,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\Compile.cs,Main,The method has an empty catch block.
Empty Catch Block,Egothor.Stemmer,Diff,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\Diff.cs,Apply,The method has an empty catch block.
Empty Catch Block,Egothor.Stemmer,Diff,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\Diff.cs,Apply,The method has an empty catch block.
Empty Catch Block,Egothor.Stemmer,DiffIt,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\DiffIt.cs,Main,The method has an empty catch block.
Empty Catch Block,Egothor.Stemmer,DiffIt,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\DiffIt.cs,Main,The method has an empty catch block.
Empty Catch Block,Egothor.Stemmer,MultiTrie2,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\MultiTrie2.cs,GetFully,The method has an empty catch block.
Empty Catch Block,Egothor.Stemmer,MultiTrie2,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\MultiTrie2.cs,GetLastOnPath,The method has an empty catch block.
Magic Number,Egothor.Stemmer,Diff,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\Diff.cs,Apply,The following statement contains a magic number: try {  	if (diff == null) {  		return;  	}  	int pos = dest.Length - 1;  	if (pos < 0) {  		return;  	}  	// orig == ""  	for (int i = 0; i < diff.Length / 2; i++) {  		char cmd = diff [2 * i];  		char param = diff [2 * i + 1];  		int par_num = (param - 'a' + 1);  		switch (cmd) {  		case '-':  			pos = pos - par_num + 1;  			break;  		case 'R':  			dest [pos] = param;  			break;  		case 'D':  			int o = pos;  			pos -= par_num - 1;  			/*                              * delete par_num chars from index pos                              */// String s = orig.toString();  			// s = s.substring( 0' pos ) + s.substring( o + 1 );  			// orig = new StringBuffer( s );  			dest.Remove (pos' (o + 1) - pos);  			break;  		case 'I':  			dest.Insert (pos += 1' param);  			break;  		}  		pos--;  	}  } catch (IndexOutOfRangeException/*x*/) {  	// x.printStackTrace();  } catch (ArgumentOutOfRangeException/*x*/) {  	// x.printStackTrace();  }  
Magic Number,Egothor.Stemmer,Diff,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\Diff.cs,Apply,The following statement contains a magic number: try {  	if (diff == null) {  		return;  	}  	int pos = dest.Length - 1;  	if (pos < 0) {  		return;  	}  	// orig == ""  	for (int i = 0; i < diff.Length / 2; i++) {  		char cmd = diff [2 * i];  		char param = diff [2 * i + 1];  		int par_num = (param - 'a' + 1);  		switch (cmd) {  		case '-':  			pos = pos - par_num + 1;  			break;  		case 'R':  			dest [pos] = param;  			break;  		case 'D':  			int o = pos;  			pos -= par_num - 1;  			/*                              * delete par_num chars from index pos                              */// String s = orig.toString();  			// s = s.substring( 0' pos ) + s.substring( o + 1 );  			// orig = new StringBuffer( s );  			dest.Remove (pos' (o + 1) - pos);  			break;  		case 'I':  			dest.Insert (pos += 1' param);  			break;  		}  		pos--;  	}  } catch (IndexOutOfRangeException/*x*/) {  	// x.printStackTrace();  } catch (ArgumentOutOfRangeException/*x*/) {  	// x.printStackTrace();  }  
Magic Number,Egothor.Stemmer,Diff,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\Diff.cs,Apply,The following statement contains a magic number: try {  	if (diff == null) {  		return;  	}  	int pos = dest.Length - 1;  	if (pos < 0) {  		return;  	}  	// orig == ""  	for (int i = 0; i < diff.Length / 2; i++) {  		char cmd = diff [2 * i];  		char param = diff [2 * i + 1];  		int par_num = (param - 'a' + 1);  		switch (cmd) {  		case '-':  			pos = pos - par_num + 1;  			break;  		case 'R':  			dest [pos] = param;  			break;  		case 'D':  			int o = pos;  			pos -= par_num - 1;  			/*                              * delete par_num chars from index pos                              */// String s = orig.toString();  			// s = s.substring( 0' pos ) + s.substring( o + 1 );  			// orig = new StringBuffer( s );  			dest.Remove (pos' (o + 1) - pos);  			break;  		case 'I':  			dest.Insert (pos += 1' param);  			break;  		}  		pos--;  	}  } catch (IndexOutOfRangeException/*x*/) {  	// x.printStackTrace();  } catch (ArgumentOutOfRangeException/*x*/) {  	// x.printStackTrace();  }  
Magic Number,Egothor.Stemmer,Diff,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\Diff.cs,Apply,The following statement contains a magic number: for (int i = 0; i < diff.Length / 2; i++) {  	char cmd = diff [2 * i];  	char param = diff [2 * i + 1];  	int par_num = (param - 'a' + 1);  	switch (cmd) {  	case '-':  		pos = pos - par_num + 1;  		break;  	case 'R':  		dest [pos] = param;  		break;  	case 'D':  		int o = pos;  		pos -= par_num - 1;  		/*                              * delete par_num chars from index pos                              */// String s = orig.toString();  		// s = s.substring( 0' pos ) + s.substring( o + 1 );  		// orig = new StringBuffer( s );  		dest.Remove (pos' (o + 1) - pos);  		break;  	case 'I':  		dest.Insert (pos += 1' param);  		break;  	}  	pos--;  }  
Magic Number,Egothor.Stemmer,Diff,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\Diff.cs,Apply,The following statement contains a magic number: for (int i = 0; i < diff.Length / 2; i++) {  	char cmd = diff [2 * i];  	char param = diff [2 * i + 1];  	int par_num = (param - 'a' + 1);  	switch (cmd) {  	case '-':  		pos = pos - par_num + 1;  		break;  	case 'R':  		dest [pos] = param;  		break;  	case 'D':  		int o = pos;  		pos -= par_num - 1;  		/*                              * delete par_num chars from index pos                              */// String s = orig.toString();  		// s = s.substring( 0' pos ) + s.substring( o + 1 );  		// orig = new StringBuffer( s );  		dest.Remove (pos' (o + 1) - pos);  		break;  	case 'I':  		dest.Insert (pos += 1' param);  		break;  	}  	pos--;  }  
Magic Number,Egothor.Stemmer,Diff,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\Diff.cs,Apply,The following statement contains a magic number: for (int i = 0; i < diff.Length / 2; i++) {  	char cmd = diff [2 * i];  	char param = diff [2 * i + 1];  	int par_num = (param - 'a' + 1);  	switch (cmd) {  	case '-':  		pos = pos - par_num + 1;  		break;  	case 'R':  		dest [pos] = param;  		break;  	case 'D':  		int o = pos;  		pos -= par_num - 1;  		/*                              * delete par_num chars from index pos                              */// String s = orig.toString();  		// s = s.substring( 0' pos ) + s.substring( o + 1 );  		// orig = new StringBuffer( s );  		dest.Remove (pos' (o + 1) - pos);  		break;  	case 'I':  		dest.Insert (pos += 1' param);  		break;  	}  	pos--;  }  
Magic Number,Egothor.Stemmer,Diff,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\Diff.cs,Exec,The following statement contains a magic number: if ((maxx >= sizex) || (maxy >= sizey)) {  	sizex = maxx + 8;  	sizey = maxy + 8;  	net = RectangularArrays.ReturnRectangularArray<int> (sizex' sizey);  	way = RectangularArrays.ReturnRectangularArray<int> (sizex' sizey);  }  
Magic Number,Egothor.Stemmer,Diff,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\Diff.cs,Exec,The following statement contains a magic number: if ((maxx >= sizex) || (maxy >= sizey)) {  	sizex = maxx + 8;  	sizey = maxy + 8;  	net = RectangularArrays.ReturnRectangularArray<int> (sizex' sizey);  	way = RectangularArrays.ReturnRectangularArray<int> (sizex' sizey);  }  
Magic Number,Egothor.Stemmer,Diff,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\Diff.cs,Exec,The following statement contains a magic number: sizex = maxx + 8;  
Magic Number,Egothor.Stemmer,Diff,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\Diff.cs,Exec,The following statement contains a magic number: sizey = maxy + 8;  
Magic Number,Egothor.Stemmer,Diff,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\Diff.cs,Exec,The following statement contains a magic number: for (x = 1; x < maxx; x++) {  	for (y = 1; y < maxy; y++) {  		go [X] = net [x - 1] [y] + DELETE;  		// way on x costs 1 unit  		go [Y] = net [x] [y - 1] + INSERT;  		// way on y costs 1 unit  		go [R] = net [x - 1] [y - 1] + REPLACE;  		go [D] = net [x - 1] [y - 1] + ((a [x - 1] == b [y - 1]) ? NOOP : 100);  		// diagonal costs 0' when no change  		ushort min = (ushort)D;  		if (go [min] >= go [X]) {  			min = (ushort)X;  		}  		if (go [min] > go [Y]) {  			min = (ushort)Y;  		}  		if (go [min] > go [R]) {  			min = (ushort)R;  		}  		way [x] [y] = min;  		net [x] [y] = (ushort)go [min];  	}  }  
Magic Number,Egothor.Stemmer,Diff,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\Diff.cs,Exec,The following statement contains a magic number: for (y = 1; y < maxy; y++) {  	go [X] = net [x - 1] [y] + DELETE;  	// way on x costs 1 unit  	go [Y] = net [x] [y - 1] + INSERT;  	// way on y costs 1 unit  	go [R] = net [x - 1] [y - 1] + REPLACE;  	go [D] = net [x - 1] [y - 1] + ((a [x - 1] == b [y - 1]) ? NOOP : 100);  	// diagonal costs 0' when no change  	ushort min = (ushort)D;  	if (go [min] >= go [X]) {  		min = (ushort)X;  	}  	if (go [min] > go [Y]) {  		min = (ushort)Y;  	}  	if (go [min] > go [R]) {  		min = (ushort)R;  	}  	way [x] [y] = min;  	net [x] [y] = (ushort)go [min];  }  
Magic Number,Egothor.Stemmer,Diff,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\Diff.cs,Exec,The following statement contains a magic number: go [D] = net [x - 1] [y - 1] + ((a [x - 1] == b [y - 1]) ? NOOP : 100);  
Magic Number,Egothor.Stemmer,MultiTrie2,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\MultiTrie2.cs,GetFully,The following statement contains a magic number: try {  	string lastkey = key;  	string[] p = new string[m_tries.Count];  	char lastch = ' ';  	for (int i = 0; i < m_tries.Count; i++) {  		string r = m_tries [i].GetFully (lastkey);  		if (r == null || (r.Length == 1 && r [0] == EOM)) {  			return result.ToString ();  		}  		if (CannotFollow (lastch' r [0])) {  			return result.ToString ();  		} else {  			lastch = r [r.Length - 2];  		}  		// key=key.substring(lengthPP(r));  		p [i] = r;  		if (p [i] [0] == '-') {  			if (i > 0) {  				if (!TrySkip (key' LengthPP (p [i - 1])' out key)) {  					break;  				}  			}  			if (!TrySkip (key' LengthPP (p [i - 1])' out key)) {  				break;  			}  		}  		// key = skip(key' lengthPP(r));  		result.Append (r);  		if (key.Length != 0) {  			lastkey = key;  		}  	}  } catch (ArgumentOutOfRangeException/*x*/) {  }  
Magic Number,Egothor.Stemmer,MultiTrie2,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\MultiTrie2.cs,GetFully,The following statement contains a magic number: for (int i = 0; i < m_tries.Count; i++) {  	string r = m_tries [i].GetFully (lastkey);  	if (r == null || (r.Length == 1 && r [0] == EOM)) {  		return result.ToString ();  	}  	if (CannotFollow (lastch' r [0])) {  		return result.ToString ();  	} else {  		lastch = r [r.Length - 2];  	}  	// key=key.substring(lengthPP(r));  	p [i] = r;  	if (p [i] [0] == '-') {  		if (i > 0) {  			if (!TrySkip (key' LengthPP (p [i - 1])' out key)) {  				break;  			}  		}  		if (!TrySkip (key' LengthPP (p [i - 1])' out key)) {  			break;  		}  	}  	// key = skip(key' lengthPP(r));  	result.Append (r);  	if (key.Length != 0) {  		lastkey = key;  	}  }  
Magic Number,Egothor.Stemmer,MultiTrie2,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\MultiTrie2.cs,GetFully,The following statement contains a magic number: if (CannotFollow (lastch' r [0])) {  	return result.ToString ();  } else {  	lastch = r [r.Length - 2];  }  
Magic Number,Egothor.Stemmer,MultiTrie2,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\MultiTrie2.cs,GetFully,The following statement contains a magic number: lastch = r [r.Length - 2];  
Magic Number,Egothor.Stemmer,MultiTrie2,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\MultiTrie2.cs,GetLastOnPath,The following statement contains a magic number: try {  	string lastkey = key;  	string[] p = new string[m_tries.Count];  	char lastch = ' ';  	for (int i = 0; i < m_tries.Count; i++) {  		string r = m_tries [i].GetLastOnPath (lastkey);  		if (r == null || (r.Length == 1 && r [0] == EOM)) {  			return result.ToString ();  		}  		// System.err.println("LP:"+key+" last:"+lastch+" new:"+r);  		if (CannotFollow (lastch' r [0])) {  			return result.ToString ();  		} else {  			lastch = r [r.Length - 2];  		}  		// key=key.substring(lengthPP(r));  		p [i] = r;  		if (p [i] [0] == '-') {  			if (i > 0) {  				if (!TrySkip (key' LengthPP (p [i - 1])' out key)) {  					break;  				}  			}  			if (!TrySkip (key' LengthPP (p [i])' out key)) {  				break;  			}  		}  		// key = skip(key' lengthPP(r));  		result.Append (r);  		if (key.Length != 0) {  			lastkey = key;  		}  	}  } catch (ArgumentOutOfRangeException/*x*/) {  }  
Magic Number,Egothor.Stemmer,MultiTrie2,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\MultiTrie2.cs,GetLastOnPath,The following statement contains a magic number: for (int i = 0; i < m_tries.Count; i++) {  	string r = m_tries [i].GetLastOnPath (lastkey);  	if (r == null || (r.Length == 1 && r [0] == EOM)) {  		return result.ToString ();  	}  	// System.err.println("LP:"+key+" last:"+lastch+" new:"+r);  	if (CannotFollow (lastch' r [0])) {  		return result.ToString ();  	} else {  		lastch = r [r.Length - 2];  	}  	// key=key.substring(lengthPP(r));  	p [i] = r;  	if (p [i] [0] == '-') {  		if (i > 0) {  			if (!TrySkip (key' LengthPP (p [i - 1])' out key)) {  				break;  			}  		}  		if (!TrySkip (key' LengthPP (p [i])' out key)) {  			break;  		}  	}  	// key = skip(key' lengthPP(r));  	result.Append (r);  	if (key.Length != 0) {  		lastkey = key;  	}  }  
Magic Number,Egothor.Stemmer,MultiTrie2,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\MultiTrie2.cs,GetLastOnPath,The following statement contains a magic number: if (CannotFollow (lastch' r [0])) {  	return result.ToString ();  } else {  	lastch = r [r.Length - 2];  }  
Magic Number,Egothor.Stemmer,MultiTrie2,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\MultiTrie2.cs,GetLastOnPath,The following statement contains a magic number: lastch = r [r.Length - 2];  
Magic Number,Egothor.Stemmer,MultiTrie2,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\MultiTrie2.cs,Decompose,The following statement contains a magic number: for (int i = 0; 0 <= i && i < cmd.Length;) {  	int next = DashEven (cmd' i);  	if (i == next) {  		parts++;  		i = next + 2;  	} else {  		parts++;  		i = next;  	}  }  
Magic Number,Egothor.Stemmer,MultiTrie2,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\MultiTrie2.cs,Decompose,The following statement contains a magic number: if (i == next) {  	parts++;  	i = next + 2;  } else {  	parts++;  	i = next;  }  
Magic Number,Egothor.Stemmer,MultiTrie2,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\MultiTrie2.cs,Decompose,The following statement contains a magic number: i = next + 2;  
Magic Number,Egothor.Stemmer,MultiTrie2,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\MultiTrie2.cs,Decompose,The following statement contains a magic number: for (int i = 0; 0 <= i && i < cmd.Length;) {  	int next = DashEven (cmd' i);  	if (i == next) {  		part [x++] = cmd.Substring (i' 2);  		i = next + 2;  	} else {  		part [x++] = (next < 0) ? cmd.Substring (i' cmd.Length - i) : cmd.Substring (i' next - i);  		i = next;  	}  }  
Magic Number,Egothor.Stemmer,MultiTrie2,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\MultiTrie2.cs,Decompose,The following statement contains a magic number: for (int i = 0; 0 <= i && i < cmd.Length;) {  	int next = DashEven (cmd' i);  	if (i == next) {  		part [x++] = cmd.Substring (i' 2);  		i = next + 2;  	} else {  		part [x++] = (next < 0) ? cmd.Substring (i' cmd.Length - i) : cmd.Substring (i' next - i);  		i = next;  	}  }  
Magic Number,Egothor.Stemmer,MultiTrie2,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\MultiTrie2.cs,Decompose,The following statement contains a magic number: if (i == next) {  	part [x++] = cmd.Substring (i' 2);  	i = next + 2;  } else {  	part [x++] = (next < 0) ? cmd.Substring (i' cmd.Length - i) : cmd.Substring (i' next - i);  	i = next;  }  
Magic Number,Egothor.Stemmer,MultiTrie2,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\MultiTrie2.cs,Decompose,The following statement contains a magic number: if (i == next) {  	part [x++] = cmd.Substring (i' 2);  	i = next + 2;  } else {  	part [x++] = (next < 0) ? cmd.Substring (i' cmd.Length - i) : cmd.Substring (i' next - i);  	i = next;  }  
Magic Number,Egothor.Stemmer,MultiTrie2,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\MultiTrie2.cs,Decompose,The following statement contains a magic number: part [x++] = cmd.Substring (i' 2);  
Magic Number,Egothor.Stemmer,MultiTrie2,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\MultiTrie2.cs,Decompose,The following statement contains a magic number: i = next + 2;  
Magic Number,Egothor.Stemmer,MultiTrie2,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\MultiTrie2.cs,DashEven,The following statement contains a magic number: while (from < @in.Length) {  	if (@in [from] == '-') {  		return from;  	} else {  		from += 2;  	}  }  
Magic Number,Egothor.Stemmer,MultiTrie2,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\MultiTrie2.cs,DashEven,The following statement contains a magic number: if (@in [from] == '-') {  	return from;  } else {  	from += 2;  }  
Magic Number,Egothor.Stemmer,MultiTrie2,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\MultiTrie2.cs,DashEven,The following statement contains a magic number: from += 2;  
Missing Default,Egothor.Stemmer,Diff,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\Diff.cs,Apply,The following switch statement is missing a default case: switch (cmd) {  case '-':  	pos = pos - par_num + 1;  	break;  case 'R':  	dest [pos] = param;  	break;  case 'D':  	int o = pos;  	pos -= par_num - 1;  	/*                              * delete par_num chars from index pos                              */// String s = orig.toString();  	// s = s.substring( 0' pos ) + s.substring( o + 1 );  	// orig = new StringBuffer( s );  	dest.Remove (pos' (o + 1) - pos);  	break;  case 'I':  	dest.Insert (pos += 1' param);  	break;  }  
Missing Default,Egothor.Stemmer,Diff,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\Diff.cs,Exec,The following switch statement is missing a default case: switch (way [x] [y]) {  case X:  	if (equals != @base) {  		result.Append ("-" + (equals));  		equals = @base;  	}  	deletes++;  	x--;  	break;  // delete  case Y:  	if (deletes != @base) {  		result.Append ("D" + (deletes));  		deletes = @base;  	}  	if (equals != @base) {  		result.Append ("-" + (equals));  		equals = @base;  	}  	result.Append ('I');  	result.Append (b [--y]);  	break;  // insert  case R:  	if (deletes != @base) {  		result.Append ("D" + (deletes));  		deletes = @base;  	}  	if (equals != @base) {  		result.Append ("-" + (equals));  		equals = @base;  	}  	result.Append ('R');  	result.Append (b [--y]);  	x--;  	break;  // replace  case D:  	if (deletes != @base) {  		result.Append ("D" + (deletes));  		deletes = @base;  	}  	equals++;  	x--;  	y--;  	break;  // no change  }  
Missing Default,Egothor.Stemmer,MultiTrie2,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\MultiTrie2.cs,CannotFollow,The following switch statement is missing a default case: switch (after) {  case '-':  case 'D':  	return after == goes;  }  
Missing Default,Egothor.Stemmer,MultiTrie2,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Analysis.Stempel\Egothor.Stemmer\MultiTrie2.cs,LengthPP,The following switch statement is missing a default case: switch (cmd [i++]) {  case '-':  case 'D':  	len += cmd [i] - 'a' + 1;  	break;  case 'R':  	len++;  	/* intentional fallthrough */goto case 'I';  case 'I':  	break;  }  
