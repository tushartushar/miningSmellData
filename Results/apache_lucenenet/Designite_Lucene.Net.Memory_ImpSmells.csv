Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Lucene.Net.Index.Memory,MemoryIndex,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Memory\MemoryIndex.cs,AddField,Cyclomatic complexity of the method is 12
Long Parameter List,Lucene.Net.Index.Memory,MemoryIndex,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Memory\MemoryIndex.cs,AddField,The method has 5 parameters.
Long Statement,Lucene.Net.Index.Memory,MemoryIndex,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Memory\MemoryIndex.cs,AddField,The length of the statement  "			fieldInfos [fieldName] = new FieldInfo (fieldName' true' fieldInfos.Count' false' false' false' this.storeOffsets ? IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS : IndexOptions.DOCS_AND_FREQS_AND_POSITIONS' DocValuesType.NONE' DocValuesType.NONE' null); " is 261.
Long Statement,Lucene.Net.Index.Memory,MemoryIndex,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Memory\MemoryIndex.cs,AddField,The length of the statement  "			fields [fieldName] = new Info (terms' sliceArray' numTokens' numOverlapTokens' boost' pos' offsetAtt.EndOffset + offset' sumTotalTermFreq); " is 139.
Magic Number,Lucene.Net.Index.Memory,MemoryIndex,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Memory\MemoryIndex.cs,ToString,The following statement contains a magic number: for (int i = 0; i < sortedFields.Length; i++) {  	KeyValuePair<string' Info> entry = sortedFields [i];  	string fieldName = entry.Key;  	Info info = entry.Value;  	info.SortTerms ();  	result.Append (fieldName + ":\n");  	SliceByteStartArray sliceArray = info.sliceArray;  	int numPositions = 0;  	Int32BlockPool.SliceReader postingsReader = new Int32BlockPool.SliceReader (intBlockPool);  	for (int j = 0; j < info.terms.Count; j++) {  		int ord = info.sortedTerms [j];  		info.terms.Get (ord' spare);  		int freq = sliceArray.freq [ord];  		result.Append ("\t'" + spare + "':" + freq + ":");  		postingsReader.Reset (sliceArray.start [ord]' sliceArray.end [ord]);  		result.Append (" [");  		int iters = storeOffsets ? 3 : 1;  		while (!postingsReader.IsEndOfSlice) {  			result.Append ("(");  			for (int k = 0; k < iters; k++) {  				result.Append (postingsReader.ReadInt32 ());  				if (k < iters - 1) {  					result.Append ("' ");  				}  			}  			result.Append (")");  			if (!postingsReader.IsEndOfSlice) {  				result.Append ("'");  			}  		}  		result.Append ("]");  		result.Append ("\n");  		numPositions += freq;  	}  	result.Append ("\tterms=" + info.terms.Count);  	result.Append ("' positions=" + numPositions);  	result.Append ("' memory=" + RamUsageEstimator.HumanReadableUnits (RamUsageEstimator.SizeOf (info)));  	result.Append ("\n");  	sumPositions += numPositions;  	sumTerms += info.terms.Count;  }  
Magic Number,Lucene.Net.Index.Memory,MemoryIndex,F:\newReposMay17\apache_lucenenet\src\Lucene.Net.Memory\MemoryIndex.cs,ToString,The following statement contains a magic number: for (int j = 0; j < info.terms.Count; j++) {  	int ord = info.sortedTerms [j];  	info.terms.Get (ord' spare);  	int freq = sliceArray.freq [ord];  	result.Append ("\t'" + spare + "':" + freq + ":");  	postingsReader.Reset (sliceArray.start [ord]' sliceArray.end [ord]);  	result.Append (" [");  	int iters = storeOffsets ? 3 : 1;  	while (!postingsReader.IsEndOfSlice) {  		result.Append ("(");  		for (int k = 0; k < iters; k++) {  			result.Append (postingsReader.ReadInt32 ());  			if (k < iters - 1) {  				result.Append ("' ");  			}  		}  		result.Append (")");  		if (!postingsReader.IsEndOfSlice) {  			result.Append ("'");  		}  	}  	result.Append ("]");  	result.Append ("\n");  	numPositions += freq;  }  
