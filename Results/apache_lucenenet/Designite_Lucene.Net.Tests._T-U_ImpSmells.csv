Implementation smell,Namespace,Class,File,Method,Description
Long Method,Lucene.Net.Util,TestFixedBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestFixedBitSet.cs,DoRandomSets,The method has 100 lines of code.
Long Method,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,DoRandomSets,The method has 141 lines of code.
Long Method,Lucene.Net.Util,TestWeakIdentityMap,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestWeakIdentityMap.cs,TestSimpleHashMap,The method has 142 lines of code.
Complex Method,Lucene.Net.Util,TestBytesRefArray,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestBytesRefArray.cs,TestAppend,Cyclomatic complexity of the method is 8
Complex Method,Lucene.Net.Util,TestMergedIterator,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestMergedIterator.cs,TestCase,Cyclomatic complexity of the method is 8
Complex Method,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,RandomLong,Cyclomatic complexity of the method is 8
Complex Method,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,DoRandomSets,Cyclomatic complexity of the method is 9
Complex Method,Lucene.Net.Util,TestPagedBytes,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPagedBytes.cs,TestDataInputOutput,Cyclomatic complexity of the method is 9
Complex Method,Lucene.Net.Util,TestPagedBytes,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPagedBytes.cs,TestDataInputOutput2,Cyclomatic complexity of the method is 8
Complex Method,Lucene.Net.Util,TestRollingBuffer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestRollingBuffer.cs,Test,Cyclomatic complexity of the method is 8
Complex Method,Lucene.Net.Util,RunnableAnonymousInnerClassHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestWeakIdentityMap.cs,Run,Cyclomatic complexity of the method is 9
Long Parameter List,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,AssertLongRangeSplit,The method has 6 parameters. Parameters: lower' upper' precisionStep' useBitSet' expectedBounds' expectedShifts
Long Parameter List,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,AssertIntRangeSplit,The method has 6 parameters. Parameters: lower' upper' precisionStep' useBitSet' expectedBounds' expectedShifts
Long Parameter List,Lucene.Net.Util,LongRangeBuilderAnonymousInnerClassHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,LongRangeBuilderAnonymousInnerClassHelper,The method has 7 parameters. Parameters: outerInstance' lower' upper' useBitSet' bits' neededBounds' neededShifts
Long Parameter List,Lucene.Net.Util,IntRangeBuilderAnonymousInnerClassHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,IntRangeBuilderAnonymousInnerClassHelper,The method has 7 parameters. Parameters: outerInstance' lower' upper' useBitSet' bits' neededBounds' neededShifts
Long Parameter List,Lucene.Net.Util,RunnableAnonymousInnerClassHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestWeakIdentityMap.cs,RunnableAnonymousInnerClassHelper,The method has 5 parameters. Parameters: outerInstance' keyCount' map' keys' rnd
Long Statement,Lucene.Net.Util,StressRamUsageEstimator,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\StressRamUsageEstimator.cs,TestSimpleByteArrays,The length of the statement  "                    Console.WriteLine(string.Format(CultureInfo.InvariantCulture' "{0}\t{1}\t{2}"' RamUsageEstimator.HumanReadableUnits(GC.GetTotalMemory(false)).PadLeft(10' ' ')' RamUsageEstimator.HumanReadableUnits(GC.MaxGeneration).PadLeft(10' ' ')' RamUsageEstimator.HumanReadableUnits(estimated).PadLeft(10' ' '))); " is 300.
Long Statement,Lucene.Net.Util,TestAttributeSource,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestAttributeSource.cs,TestCaptureState,The length of the statement  "            Assert.AreEqual(src.GetHashCode()' copy.GetHashCode()' "Both AttributeSources should have same hashCode after restore"); " is 120.
Long Statement,Lucene.Net.Util,TestAttributeSource,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestAttributeSource.cs,TestCaptureState,The length of the statement  "                Assert.Fail("The third instance is missing the TypeAttribute' so restoreState() should throw IllegalArgumentException"); " is 120.
Long Statement,Lucene.Net.Util,TestAttributeSource,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestAttributeSource.cs,TestDefaultAttributeFactory,The length of the statement  "            Assert.IsTrue(src.AddAttribute<ICharTermAttribute>() is CharTermAttribute' "CharTermAttribute is not implemented by CharTermAttributeImpl"); " is 140.
Long Statement,Lucene.Net.Util,TestAttributeSource,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestAttributeSource.cs,TestDefaultAttributeFactory,The length of the statement  "            Assert.IsTrue(src.AddAttribute<IOffsetAttribute>() is OffsetAttribute' "OffsetAttribute is not implemented by OffsetAttributeImpl"); " is 132.
Long Statement,Lucene.Net.Util,TestAttributeSource,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestAttributeSource.cs,TestDefaultAttributeFactory,The length of the statement  "            Assert.IsTrue(src.AddAttribute<IFlagsAttribute>() is FlagsAttribute' "FlagsAttribute is not implemented by FlagsAttributeImpl"); " is 128.
Long Statement,Lucene.Net.Util,TestAttributeSource,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestAttributeSource.cs,TestDefaultAttributeFactory,The length of the statement  "            Assert.IsTrue(src.AddAttribute<IPayloadAttribute>() is PayloadAttribute' "PayloadAttribute is not implemented by PayloadAttributeImpl"); " is 136.
Long Statement,Lucene.Net.Util,TestAttributeSource,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestAttributeSource.cs,TestDefaultAttributeFactory,The length of the statement  "            Assert.IsTrue(src.AddAttribute<IPositionIncrementAttribute>() is PositionIncrementAttribute' "PositionIncrementAttribute is not implemented by PositionIncrementAttributeImpl"); " is 176.
Long Statement,Lucene.Net.Util,TestAttributeSource,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestAttributeSource.cs,TestDefaultAttributeFactory,The length of the statement  "            Assert.IsTrue(src.AddAttribute<ITypeAttribute>() is TypeAttribute' "TypeAttribute is not implemented by TypeAttributeImpl"); " is 124.
Long Statement,Lucene.Net.Util,TestBroadWord,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestBroadWord.cs,TestSmalleru_87_01,The length of the statement  "                    Assert.AreEqual(ToStringUtils.Int64Hex((i < j) ? unchecked(0x80L * BroadWord.L8_L) : 0x0L)' ToStringUtils.Int64Hex(BroadWord.SmallerUpTo7_8(ii' jj))' ToStringUtils.Int64Hex(ii) + " < " + ToStringUtils.Int64Hex(jj)); " is 215.
Long Statement,Lucene.Net.Util,TestBroadWord,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestBroadWord.cs,TestSmalleru_8_01,The length of the statement  "                    Assert.AreEqual(ToStringUtils.Int64Hex((i < j) ? unchecked(0x80L * BroadWord.L8_L) : 0x0L)' ToStringUtils.Int64Hex(BroadWord.Smalleru_8(ii' jj))' ToStringUtils.Int64Hex(ii) + " < " + ToStringUtils.Int64Hex(jj)); " is 211.
Long Statement,Lucene.Net.Util,TestBroadWord,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestBroadWord.cs,TestNotEquals0_8,The length of the statement  "                Assert.AreEqual(ToStringUtils.Int64Hex((i != 0L) ? unchecked(0x80L * BroadWord.L8_L) : 0x0L)' ToStringUtils.Int64Hex(BroadWord.NotEquals0_8(ii))' ToStringUtils.Int64Hex(ii) + " <> 0"); " is 184.
Long Statement,Lucene.Net.Util,TestBytesRefHash,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestBytesRefHash.cs,NewPool,The length of the statement  "            return Random.NextBoolean() && Pool != null ? Pool : new ByteBlockPool(new RecyclingByteBlockAllocator(ByteBlockPool.BYTE_BLOCK_SIZE' Random.Next(25))); " is 152.
Long Statement,Lucene.Net.Util,TestBytesRefHash,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestBytesRefHash.cs,NewHash,The length of the statement  "            return Random.NextBoolean() ? new BytesRefHash(blockPool) : new BytesRefHash(blockPool' initSize' new BytesRefHash.DirectBytesStartArray(initSize)); " is 148.
Long Statement,Lucene.Net.Util,TestBytesRefHash,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestBytesRefHash.cs,TestLargeValue,The length of the statement  "            int[] sizes = { Random.Next(5)' ByteBlockPool.BYTE_BLOCK_SIZE - 33 + Random.Next(31)' ByteBlockPool.BYTE_BLOCK_SIZE - 1 + Random.Next(37) }; " is 140.
Long Statement,Lucene.Net.Util,TestCharsRef,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestCharsRef.cs,TestCharSequenceSubSequence,The length of the statement  "            ICharSequence[] sequences = { new CharsRef("abc")' new CharsRef("0abc".ToCharArray()' 1' 3)' new CharsRef("abc0".ToCharArray()' 0' 3)' new CharsRef("0abc0".ToCharArray()' 1' 3) }; " is 179.
Long Statement,Lucene.Net.Util,TestConstants,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestConstants.cs,TestLuceneMainVersionConstant,The length of the statement  "            Assert.IsTrue(Regex.IsMatch(Constants.LUCENE_MAIN_VERSION' "\\d+\\.\\d+(|\\.0\\.\\d+)"' RegexOptions.IgnoreCase)' "LUCENE_MAIN_VERSION does not follow pattern: 'x.y' (stable release) or 'x.y.0.z' (alpha/beta version)" + VersionDetails); " is 236.
Long Statement,Lucene.Net.Util,TestConstants,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestConstants.cs,TestLuceneMainVersionConstant,The length of the statement  "            Assert.IsTrue(Constants.LUCENE_VERSION.StartsWith(Constants.MainVersionWithoutAlphaBeta()' StringComparison.Ordinal)' "LUCENE_VERSION does not start with LUCENE_MAIN_VERSION (without alpha/beta marker)" + VersionDetails); " is 221.
Long Statement,Lucene.Net.Util,TestConstants,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestConstants.cs,TestBuildSetup,The length of the statement  "            Assert.IsTrue(versionConstant.StartsWith(version' StringComparison.Ordinal) || version.StartsWith(versionConstant' StringComparison.Ordinal)' "LUCENE_VERSION should share the same prefix with lucene.version test property ('" + version + "')." + VersionDetails); " is 261.
Long Statement,Lucene.Net.Util,TestIndexableBinaryStringTools,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestIndexableBinaryStringTools.cs,TestSingleBinaryRoundTrip,The length of the statement  "            sbyte[] binary = new sbyte[] { (sbyte)0x23' unchecked((sbyte)0x98)' (sbyte)0x13' unchecked((sbyte)0xE4)' (sbyte)0x76' (sbyte)0x41' unchecked((sbyte)0xB2)' unchecked((sbyte)0xC9)' (sbyte)0x7F' (sbyte)0x0A' unchecked((sbyte)0xA6)' unchecked((sbyte)0xD8) }; " is 254.
Long Statement,Lucene.Net.Util,TestIndexableBinaryStringTools,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestIndexableBinaryStringTools.cs,TestSingleBinaryRoundTrip,The length of the statement  "            Assert.AreEqual(BinaryDump(binary' binary.Length)' BinaryDump(decoded' decoded.Length)' "Round trip decode/decode returned different results:\noriginal: " + BinaryDump(binary' binary.Length) + "\n encoded: " + CharArrayDump(encoded' encoded.Length) + "\n decoded: " + BinaryDump(decoded' decoded.Length)); " is 305.
Long Statement,Lucene.Net.Util,TestIndexableBinaryStringTools,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestIndexableBinaryStringTools.cs,TestEncodedSortability,The length of the statement  "                Assert.AreEqual(originalComparison' encodedComparison' "Test #" + (testNum + 1) + ": Original bytes and encoded chars compare differently:" + " \nbinary 1: " + BinaryDump(originalArray1' numBytes1) + " \nbinary 2: " + BinaryDump(original2' numBytes2) + "\nencoded 1: " + CharArrayDump(encoded1' encodedLen1) + "\nencoded 2: " + CharArrayDump(encoded2' encodedLen2)); " is 366.
Long Statement,Lucene.Net.Util,TestIndexableBinaryStringTools,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestIndexableBinaryStringTools.cs,TestAllNullInput,The length of the statement  "            Assert.AreEqual(BinaryDump(binary' binary.Length)' BinaryDump(decoded' decoded.Length)' "Round trip decode/decode returned different results:" + "\n  original: " + BinaryDump(binary' binary.Length) + "\ndecodedBuf: " + BinaryDump(decoded' decoded.Length)); " is 256.
Long Statement,Lucene.Net.Util,TestIndexableBinaryStringTools,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestIndexableBinaryStringTools.cs,TestRandomBinaryRoundTrip,The length of the statement  "                Assert.AreEqual(BinaryDump(binary' numBytes)' BinaryDump(decoded' decodedLen)' "Test #" + (testNum + 1) + ": Round trip decode/decode returned different results:" + "\n  original: " + BinaryDump(binary' numBytes) + "\nencodedBuf: " + CharArrayDump(encoded' encodedLen) + "\ndecodedBuf: " + BinaryDump(decoded' decodedLen)); " is 323.
Long Statement,Lucene.Net.Util,TestMathUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestMathUtil.cs,TestAcoshMethod,The length of the statement  "            Assert.AreEqual(BitConverter.DoubleToInt64Bits(double.PositiveInfinity)' BitConverter.DoubleToInt64Bits(MathUtil.Acosh(double.PositiveInfinity))); " is 146.
Long Statement,Lucene.Net.Util,TestMathUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestMathUtil.cs,TestAsinhMethod,The length of the statement  "            Assert.AreEqual(BitConverter.DoubleToInt64Bits(double.PositiveInfinity)' BitConverter.DoubleToInt64Bits(MathUtil.Asinh(double.PositiveInfinity))); " is 146.
Long Statement,Lucene.Net.Util,TestMathUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestMathUtil.cs,TestAsinhMethod,The length of the statement  "            Assert.AreEqual(BitConverter.DoubleToInt64Bits(double.NegativeInfinity)' BitConverter.DoubleToInt64Bits(MathUtil.Asinh(double.NegativeInfinity))); " is 146.
Long Statement,Lucene.Net.Util,TestMathUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestMathUtil.cs,TestAtanhMethod,The length of the statement  "            Assert.AreEqual(BitConverter.DoubleToInt64Bits(double.PositiveInfinity)' BitConverter.DoubleToInt64Bits(MathUtil.Atanh(1D))); " is 125.
Long Statement,Lucene.Net.Util,TestMathUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestMathUtil.cs,TestAtanhMethod,The length of the statement  "            Assert.AreEqual(BitConverter.DoubleToInt64Bits(double.NegativeInfinity)' BitConverter.DoubleToInt64Bits(MathUtil.Atanh(-1D))); " is 126.
Long Statement,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestLongSpecialValues,The length of the statement  "            long[] vals = new long[] { long.MinValue' long.MinValue + 1' long.MinValue + 2' -5003400000000L' -4000L' -3000L' -2000L' -1000L' -1L' 0L' 1L' 10L' 300L' 50006789999999999L' long.MaxValue - 2' long.MaxValue - 1' long.MaxValue }; " is 227.
Long Statement,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestLongSpecialValues,The length of the statement  "                Assert.AreEqual(vals[i]' NumericUtils.PrefixCodedToInt64(prefixVals[i])' "forward and back conversion should generate same long"); " is 130.
Long Statement,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestLongSpecialValues,The length of the statement  "            // check the prefix encoding' lower precision should have the difference to original value equal to the lower removed bits " is 122.
Long Statement,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestLongSpecialValues,The length of the statement  "                    Assert.AreEqual(vals[i] & mask' vals[i] - prefixVal' "difference between prefix val and original value for " + vals[i] + " with shift=" + j); " is 141.
Long Statement,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestIntSpecialValues,The length of the statement  "            int[] vals = new int[] { int.MinValue' int.MinValue + 1' int.MinValue + 2' -64765767' -4000' -3000' -2000' -1000' -1' 0' 1' 10' 300' 765878989' int.MaxValue - 2' int.MaxValue - 1' int.MaxValue }; " is 195.
Long Statement,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestIntSpecialValues,The length of the statement  "                Assert.AreEqual(vals[i]' NumericUtils.PrefixCodedToInt32(prefixVals[i])' "forward and back conversion should generate same int"); " is 129.
Long Statement,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestIntSpecialValues,The length of the statement  "            // check the prefix encoding' lower precision should have the difference to original value equal to the lower removed bits " is 122.
Long Statement,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestIntSpecialValues,The length of the statement  "                    Assert.AreEqual(vals[i] & mask' vals[i] - prefixVal' "difference between prefix val and original value for " + vals[i] + " with shift=" + j); " is 141.
Long Statement,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestDoubles,The length of the statement  "            double[] vals = new double[] { double.NegativeInfinity' -2.3E25' -1.0E15' -1.0' -1.0E-1' -1.0E-2' -0.0' +0.0' 1.0E-2' 1.0E-1' 1.0' 1.0E15' 2.3E25' double.PositiveInfinity' double.NaN }; " is 185.
Long Statement,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestDoubles,The length of the statement  "                Assert.IsTrue(vals[i].CompareTo(NumericUtils.SortableInt64ToDouble(longVals[i])) == 0' "forward and back conversion should generate same double"); " is 146.
Long Statement,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestSortableDoubleNaN,The length of the statement  "                Assert.IsTrue((ulong)sortable > (ulong)plusInf' "Double not sorted correctly: " + nan + "' long repr: " + sortable + "' positive inf.: " + plusInf); " is 148.
Long Statement,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestFloats,The length of the statement  "            float[] vals = new float[] { float.NegativeInfinity' -2.3E25f' -1.0E15f' -1.0f' -1.0E-1f' -1.0E-2f' -0.0f' +0.0f' 1.0E-2f' 1.0E-1f' 1.0f' 1.0E15f' 2.3E25f' float.PositiveInfinity' float.NaN }; " is 192.
Long Statement,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestFloats,The length of the statement  "                Assert.IsTrue(vals[i].CompareTo(NumericUtils.SortableInt32ToSingle(intVals[i])) == 0' "forward and back conversion should generate same double"); " is 145.
Long Statement,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestSortableFloatNaN,The length of the statement  "                Assert.IsTrue(sortable > plusInf' "Float not sorted correctly: " + nan + "' int repr: " + sortable + "' positive inf.: " + plusInf); " is 132.
Long Statement,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,AssertLongRangeSplit,The length of the statement  "            NumericUtils.SplitInt64Range(new LongRangeBuilderAnonymousInnerClassHelper(this' lower' upper' useBitSet' bits' neededBounds' neededShifts)' precisionStep' lower' upper); " is 170.
Long Statement,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestLongExtremeValues,The length of the statement  "            AssertLongRangeSplit(long.MaxValue' long.MaxValue' 1' true' Arrays.AsList(unchecked((long)0xffffffffffffffffL)' unchecked((long)0xffffffffffffffffL))' Arrays.AsList(0)); " is 169.
Long Statement,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestLongExtremeValues,The length of the statement  "            AssertLongRangeSplit(long.MaxValue' long.MaxValue' 2' true' Arrays.AsList(unchecked((long)0xffffffffffffffffL)' unchecked((long)0xffffffffffffffffL))' Arrays.AsList(0)); " is 169.
Long Statement,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestLongExtremeValues,The length of the statement  "            AssertLongRangeSplit(long.MaxValue' long.MaxValue' 4' true' Arrays.AsList(unchecked((long)0xffffffffffffffffL)' unchecked((long)0xffffffffffffffffL))' Arrays.AsList(0)); " is 169.
Long Statement,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestLongExtremeValues,The length of the statement  "            AssertLongRangeSplit(long.MaxValue' long.MaxValue' 6' true' Arrays.AsList(unchecked((long)0xffffffffffffffffL)' unchecked((long)0xffffffffffffffffL))' Arrays.AsList(0)); " is 169.
Long Statement,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestLongExtremeValues,The length of the statement  "            AssertLongRangeSplit(long.MaxValue' long.MaxValue' 8' true' Arrays.AsList(unchecked((long)0xffffffffffffffffL)' unchecked((long)0xffffffffffffffffL))' Arrays.AsList(0)); " is 169.
Long Statement,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestLongExtremeValues,The length of the statement  "            AssertLongRangeSplit(long.MaxValue' long.MaxValue' 64' true' Arrays.AsList(unchecked((long)0xffffffffffffffffL)' unchecked((long)0xffffffffffffffffL))' Arrays.AsList(0)); " is 170.
Long Statement,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestLongExtremeValues,The length of the statement  "            AssertLongRangeSplit(long.MaxValue - 0xfL' long.MaxValue' 4' true' Arrays.AsList(0xfffffffffffffffL' 0xfffffffffffffffL)' Arrays.AsList(4)); " is 140.
Long Statement,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestLongExtremeValues,The length of the statement  "            AssertLongRangeSplit(long.MaxValue - 0x10L' long.MaxValue' 4' true' Arrays.AsList(unchecked((long)0xffffffffffffffefL)' unchecked((long)0xffffffffffffffefL)' 0xfffffffffffffffL' 0xfffffffffffffffL)' Arrays.AsList(0' 4)); " is 220.
Long Statement,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestLongExtremeValues,The length of the statement  "            AssertLongRangeSplit(long.MinValue' long.MinValue' 1' true' Arrays.AsList(0x0000000000000000L' 0x0000000000000000L)' Arrays.AsList(0)); " is 135.
Long Statement,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestLongExtremeValues,The length of the statement  "            AssertLongRangeSplit(long.MinValue' long.MinValue' 2' true' Arrays.AsList(0x0000000000000000L' 0x0000000000000000L)' Arrays.AsList(0)); " is 135.
Long Statement,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestLongExtremeValues,The length of the statement  "            AssertLongRangeSplit(long.MinValue' long.MinValue' 4' true' Arrays.AsList(0x0000000000000000L' 0x0000000000000000L)' Arrays.AsList(0)); " is 135.
Long Statement,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestLongExtremeValues,The length of the statement  "            AssertLongRangeSplit(long.MinValue' long.MinValue' 6' true' Arrays.AsList(0x0000000000000000L' 0x0000000000000000L)' Arrays.AsList(0)); " is 135.
Long Statement,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestLongExtremeValues,The length of the statement  "            AssertLongRangeSplit(long.MinValue' long.MinValue' 8' true' Arrays.AsList(0x0000000000000000L' 0x0000000000000000L)' Arrays.AsList(0)); " is 135.
Long Statement,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestLongExtremeValues,The length of the statement  "            AssertLongRangeSplit(long.MinValue' long.MinValue' 64' true' Arrays.AsList(0x0000000000000000L' 0x0000000000000000L)' Arrays.AsList(0)); " is 136.
Long Statement,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestLongExtremeValues,The length of the statement  "            AssertLongRangeSplit(long.MinValue' long.MinValue + 0xfL' 4' true' Arrays.AsList(0x000000000000000L' 0x000000000000000L)' Arrays.AsList(4)); " is 140.
Long Statement,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestLongExtremeValues,The length of the statement  "            AssertLongRangeSplit(long.MinValue' long.MinValue + 0x10L' 4' true' Arrays.AsList(0x0000000000000010L' 0x0000000000000010L' 0x000000000000000L' 0x000000000000000L)' Arrays.AsList(0' 4)); " is 186.
Long Statement,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestSplitLongRange,The length of the statement  "            AssertLongRangeSplit(-5000L' 9500L' 4' true' new long[] { 0x7fffffffffffec78L' 0x7fffffffffffec7fL' unchecked((long)0x8000000000002510L)' unchecked((long)0x800000000000251cL)' 0x7fffffffffffec8L' 0x7fffffffffffecfL' 0x800000000000250L' 0x800000000000250L' 0x7fffffffffffedL' 0x7fffffffffffefL' 0x80000000000020L' 0x80000000000024L' 0x7ffffffffffffL' 0x8000000000001L }' new int[] { 0' 0' 4' 4' 8' 8' 12 }); " is 406.
Long Statement,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestSplitLongRange,The length of the statement  "            AssertLongRangeSplit(-5000L' 9500L' 64' true' new long[] { 0x7fffffffffffec78L' unchecked((long)0x800000000000251cL) }' new int[] { 0 }); " is 137.
Long Statement,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestSplitLongRange,The length of the statement  "            AssertLongRangeSplit(0L' 1024L + 63L' 4' true' new long[] { 0x800000000000040L' 0x800000000000043L' 0x80000000000000L' 0x80000000000003L }' new int[] { 4' 8 }); " is 160.
Long Statement,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestSplitLongRange,The length of the statement  "            // the full long range should only consist of a lowest precision range; no bitset testing here' as too much memory needed :-) " is 125.
Long Statement,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestSplitLongRange,The length of the statement  "            AssertLongRangeSplit(9500L' 9500L' 4' false' new long[] { unchecked((long)0x800000000000251cL)' unchecked((long)0x800000000000251cL) }' new int[] { 0 }); " is 153.
Long Statement,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,AssertIntRangeSplit,The length of the statement  "            NumericUtils.SplitInt32Range(new IntRangeBuilderAnonymousInnerClassHelper(this' lower' upper' useBitSet' bits' neededBounds' neededShifts)' precisionStep' lower' upper); " is 169.
Long Statement,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestSplitIntRange,The length of the statement  "            AssertIntRangeSplit(-5000' 9500' 4' true' Arrays.AsList(0x7fffec78' 0x7fffec7f' unchecked((int)0x80002510)' unchecked((int)0x8000251c)' 0x7fffec8' 0x7fffecf' 0x8000250' 0x8000250' 0x7fffed' 0x7fffef' 0x800020' 0x800024' 0x7ffff' 0x80001)' Arrays.AsList(0' 0' 4' 4' 8' 8' 12)); " is 276.
Long Statement,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestSplitIntRange,The length of the statement  "            AssertIntRangeSplit(0' 1024 + 63' 4' true' Arrays.AsList(0x8000040' 0x8000043' 0x800000' 0x800003)' Arrays.AsList(4' 8)); " is 121.
Long Statement,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestSplitIntRange,The length of the statement  "            // the full int range should only consist of a lowest precision range; no bitset testing here' as too much memory needed :-) " is 124.
Long Statement,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestSplitIntRange,The length of the statement  "            AssertIntRangeSplit(9500' 9500' 4' false' Arrays.AsList(unchecked((int)0x8000251c)' unchecked((int)0x8000251c))' Arrays.AsList(0)); " is 131.
Long Statement,Lucene.Net.Util,IntRangeBuilderAnonymousInnerClassHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,AddRange,The length of the statement  "                //System.out.println("0x"+Integer.toHexString(min>>>shift)+"'0x"+Integer.toHexString(max>>>shift)+")/*shift="+shift+"*/'"); " is 123.
Long Statement,Lucene.Net.Util,TestPForDeltaDocIdSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPForDeltaDocIdSet.cs,CopyOf,The length of the statement  "            PForDeltaDocIdSet.Builder builder = (new PForDeltaDocIdSet.Builder()).SetIndexInterval(TestUtil.NextInt32(Random' 1' 20)); " is 122.
Long Statement,Lucene.Net.Util,TestQueryBuilder,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestQueryBuilder.cs,TestMinShouldMatchNone,The length of the statement  "            Assert.AreEqual(builder.CreateBooleanQuery("field"' "one two three four")' builder.CreateMinShouldMatchQuery("field"' "one two three four"' 0f)); " is 145.
Long Statement,Lucene.Net.Util,TestQueryBuilder,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestQueryBuilder.cs,TestMinShouldMatchAll,The length of the statement  "            Assert.AreEqual(builder.CreateBooleanQuery("field"' "one two three four"' Occur.MUST)' builder.CreateMinShouldMatchQuery("field"' "one two three four"' 1f)); " is 157.
Long Statement,Lucene.Net.Util,TestRamUsageEstimator,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestRamUsageEstimator.cs,TestSanity,The length of the statement  "            Assert.IsTrue(RamUsageEstimator.ShallowSizeOfInstance(typeof(HolderSubclass)) >= RamUsageEstimator.ShallowSizeOfInstance(typeof(Holder))); " is 138.
Long Statement,Lucene.Net.Util,TestRamUsageEstimator,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestRamUsageEstimator.cs,TestSanity,The length of the statement  "            Assert.IsTrue(RamUsageEstimator.ShallowSizeOfInstance(typeof(Holder)) == RamUsageEstimator.ShallowSizeOfInstance(typeof(HolderSubclass2))); " is 139.
Long Statement,Lucene.Net.Util,TestRamUsageEstimator,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestRamUsageEstimator.cs,TestReferenceSize,The length of the statement  "            //            Console.Error.Write("; Please note: 32bit Oracle/Sun VMs don't allow exact OBJECT_ALIGNMENT retrieval' this is a known issue."); " is 142.
Long Statement,Lucene.Net.Util,TestRecyclingIntBlockAllocator,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestRecyclingIntBlockAllocator.cs,TestAllocateAndFree,The length of the statement  "                    Assert.AreEqual(4 * size * (allocated.Count + allocator.NumBufferedBlocks)' allocator.BytesUsed' "" + (4 * size * (allocated.Count + allocator.NumBufferedBlocks) - allocator.BytesUsed)); " is 186.
Long Statement,Lucene.Net.Util,TestStringHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestStringHelper.cs,TestMurmurHash3,The length of the statement  "            Assert.AreEqual(0x111e7435' (uint)StringHelper.Murmurhash3_x86_32(new BytesRef("You want weapons? We're in a library! Books! The best weapons in the world!")' 0)); " is 163.
Long Statement,Lucene.Net.Util,TestStringHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestStringHelper.cs,TestMurmurHash3,The length of the statement  "            Assert.AreEqual(0x2c628cd0' (uint)StringHelper.Murmurhash3_x86_32(new BytesRef("You want weapons? We're in a library! Books! The best weapons in the world!")' 3476)); " is 166.
Long Statement,Lucene.Net.Util,TestTimSorter,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestTimSorter.cs,NewSorter,The length of the statement  "            return new ArrayTimSorter<Entry>(arr' ArrayUtil.GetNaturalComparer<Entry>()' TestUtil.NextInt32(Random' 0' arr.Length)); " is 120.
Long Statement,Lucene.Net.Util,TestUnicodeUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestUnicodeUtil.cs,TestNewString,The length of the statement  "            int[] codePoints = new int[] { Character.ToCodePoint(Character.MIN_HIGH_SURROGATE' Character.MAX_LOW_SURROGATE)' Character.ToCodePoint(Character.MAX_HIGH_SURROGATE' Character.MIN_LOW_SURROGATE)' Character.MAX_HIGH_SURROGATE' 'A'' -1 }; " is 235.
Long Statement,Lucene.Net.Util,TestUnicodeUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestUnicodeUtil.cs,TestNewString,The length of the statement  "            string cpString = "" + Character.MIN_HIGH_SURROGATE + Character.MAX_LOW_SURROGATE + Character.MAX_HIGH_SURROGATE + Character.MIN_LOW_SURROGATE + Character.MAX_HIGH_SURROGATE + 'A'; " is 180.
Long Statement,Lucene.Net.Util,TestUnicodeUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestUnicodeUtil.cs,TestNewString,The length of the statement  "            int[][] tests = new int[][] { new int[] { 0' 1' 0' 2 }' new int[] { 0' 2' 0' 4 }' new int[] { 1' 1' 2' 2 }' new int[] { 1' 2' 2' 3 }' new int[] { 1' 3' 2' 4 }' new int[] { 2' 2' 4' 2 }' new int[] { 2' 3' 0' -1 }' new int[] { 4' 5' 0' -1 }' new int[] { 3' -1' 0' -1 } }; " is 269.
Long Statement,Lucene.Net.Util,TestVersion,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestVersion.cs,TestDeprecations,The length of the statement  "                bool dep = typeof(LuceneVersion).GetTypeInfo().GetField(values[i].ToString()).GetCustomAttributes(typeof(ObsoleteAttribute)' false).Any(); " is 138.
Long Statement,Lucene.Net.Util,TestVersion,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestVersion.cs,TestAgainstMainVersionConstant,The length of the statement  "            Assert.AreEqual(mainVersionParsed' values[values.Length - 2]' "Constant one before last must be the same as the parsed LUCENE_MAIN_VERSION (without alpha/beta) constant: " + mainVersionWithoutAlphaBeta); " is 203.
Long Statement,Lucene.Net.Util,TestVirtualMethod,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestVirtualMethod.cs,TestGeneral,The length of the statement  "            Assert.IsTrue(VirtualMethod.CompareImplementationDistance(typeof(TestClass3)' PublicTestMethod' ProtectedTestMethod) > 0); " is 122.
Long Statement,Lucene.Net.Util,TestVirtualMethod,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestVirtualMethod.cs,TestGeneral,The length of the statement  "            Assert.AreEqual(0' VirtualMethod.CompareImplementationDistance(typeof(TestClass5)' PublicTestMethod' ProtectedTestMethod)); " is 123.
Empty Catch Block,Lucene.Net.Util,StressRamUsageEstimator,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\StressRamUsageEstimator.cs,TestChainedEstimation,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Util,StressRamUsageEstimator,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\StressRamUsageEstimator.cs,TestSimpleByteArrays,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Util,TestArrayUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestArrayUtil.cs,TestParseInt,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Util,TestArrayUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestArrayUtil.cs,TestParseInt,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Util,TestArrayUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestArrayUtil.cs,TestParseInt,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Util,TestArrayUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestArrayUtil.cs,TestParseInt,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Util,TestAttributeSource,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestAttributeSource.cs,TestCaptureState,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Util,TestAttributeSource,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestAttributeSource.cs,TestInvalidArguments,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Util,TestAttributeSource,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestAttributeSource.cs,TestInvalidArguments,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Util,TestCharsRef,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestCharsRef.cs,TestCharSequenceIndexer,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Util,TestCharsRef,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestCharsRef.cs,TestCharSequenceIndexer,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Util,TestCharsRef,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestCharsRef.cs,DoTestSequence,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Util,TestCharsRef,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestCharsRef.cs,DoTestSequence,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Util,TestCharsRef,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestCharsRef.cs,DoTestSequence,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Util,TestCharsRef,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestCharsRef.cs,DoTestSequence,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Util,TestNamedSPILoader,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNamedSPILoader.cs,TestBogusLookup,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestLongSpecialValues,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestIntSpecialValues,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestMaxSizeBounds,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestMaxSizeBounds,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestOverflow,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestOverflow,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Util,SetOnceThread,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSetOnce.cs,Run,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Util,TestUnicodeUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestUnicodeUtil.cs,TestNewString,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Util,TestUnicodeUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestUnicodeUtil.cs,TestNewString,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Util,TestVirtualMethod,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestVirtualMethod.cs,TestExceptions,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Util,TestVirtualMethod,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestVirtualMethod.cs,TestExceptions,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Util,TestVirtualMethod,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestVirtualMethod.cs,TestExceptions,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Util,TestWeakIdentityMap,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestWeakIdentityMap.cs,TestSimpleHashMap,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Util,TestWeakIdentityMap,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestWeakIdentityMap.cs,TestConcurrentHashMap,The method has an empty catch block.
Magic Number,Lucene.Net.Util,BaseSortTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\BaseSortTestCase.cs,SortTest,The following statement contains a magic number: int o = random.Next(1000);
Magic Number,Lucene.Net.Util,BaseSortTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\BaseSortTestCase.cs,SortTest,The following statement contains a magic number: var toSort = new Entry[o + arr.Length + random.Next(3)];
Magic Number,Lucene.Net.Util,BaseSortTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\BaseSortTestCase.cs,RandomLowCardinalityStrategy,The following statement contains a magic number: arr[i] = new Entry(random.nextInt(6)' i);
Magic Number,Lucene.Net.Util,BaseSortTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\BaseSortTestCase.cs,AscendingStrategy,The following statement contains a magic number: arr[i] = i == 0              ? new Entry(random.nextInt(6)' 0)              : new Entry(arr[i - 1].Value + random.nextInt(6)' i);
Magic Number,Lucene.Net.Util,BaseSortTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\BaseSortTestCase.cs,AscendingStrategy,The following statement contains a magic number: arr[i] = i == 0              ? new Entry(random.nextInt(6)' 0)              : new Entry(arr[i - 1].Value + random.nextInt(6)' i);
Magic Number,Lucene.Net.Util,BaseSortTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\BaseSortTestCase.cs,DescendingStrategy,The following statement contains a magic number: arr[i] = i == 0              ? new Entry(random.nextInt(6)' 0)              : new Entry(arr[i - 1].Value - random.nextInt(6)' i);
Magic Number,Lucene.Net.Util,BaseSortTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\BaseSortTestCase.cs,DescendingStrategy,The following statement contains a magic number: arr[i] = i == 0              ? new Entry(random.nextInt(6)' 0)              : new Entry(arr[i - 1].Value - random.nextInt(6)' i);
Magic Number,Lucene.Net.Util,BaseSortTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\BaseSortTestCase.cs,StrictlyDescendingStrategy,The following statement contains a magic number: arr[i] = i == 0              ? new Entry(random.nextInt(6)' 0)              : new Entry(arr[i - 1].Value - TestUtil.NextInt32(random' 1' 5)' i);
Magic Number,Lucene.Net.Util,BaseSortTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\BaseSortTestCase.cs,StrictlyDescendingStrategy,The following statement contains a magic number: arr[i] = i == 0              ? new Entry(random.nextInt(6)' 0)              : new Entry(arr[i - 1].Value - TestUtil.NextInt32(random' 1' 5)' i);
Magic Number,Lucene.Net.Util,BaseSortTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\BaseSortTestCase.cs,AscendingSequencesStrategy,The following statement contains a magic number: arr[i] = i == 0              ? new Entry(random.nextInt(6)' 0)              : new Entry(Rarely(random) ? random.nextInt(1000) : arr[i - 1].Value + random.nextInt(6)' i);
Magic Number,Lucene.Net.Util,BaseSortTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\BaseSortTestCase.cs,AscendingSequencesStrategy,The following statement contains a magic number: arr[i] = i == 0              ? new Entry(random.nextInt(6)' 0)              : new Entry(Rarely(random) ? random.nextInt(1000) : arr[i - 1].Value + random.nextInt(6)' i);
Magic Number,Lucene.Net.Util,BaseSortTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\BaseSortTestCase.cs,AscendingSequencesStrategy,The following statement contains a magic number: arr[i] = i == 0              ? new Entry(random.nextInt(6)' 0)              : new Entry(Rarely(random) ? random.nextInt(1000) : arr[i - 1].Value + random.nextInt(6)' i);
Magic Number,Lucene.Net.Util,BaseSortTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\BaseSortTestCase.cs,MostlyAscendingStrategy,The following statement contains a magic number: arr[i] = i == 0              ? new Entry(random.nextInt(6)' 0)              : new Entry(arr[i - 1].Value + TestUtil.NextInt32(random' -8' 10)' i);
Magic Number,Lucene.Net.Util,BaseSortTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\BaseSortTestCase.cs,MostlyAscendingStrategy,The following statement contains a magic number: arr[i] = i == 0              ? new Entry(random.nextInt(6)' 0)              : new Entry(arr[i - 1].Value + TestUtil.NextInt32(random' -8' 10)' i);
Magic Number,Lucene.Net.Util,BaseSortTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\BaseSortTestCase.cs,MostlyAscendingStrategy,The following statement contains a magic number: arr[i] = i == 0              ? new Entry(random.nextInt(6)' 0)              : new Entry(arr[i - 1].Value + TestUtil.NextInt32(random' -8' 10)' i);
Magic Number,Lucene.Net.Util,BaseSortTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\BaseSortTestCase.cs,DoTest,The following statement contains a magic number: DoTest(strategy' Random.Next(20000));
Magic Number,Lucene.Net.Util,BaseSortTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\BaseSortTestCase.cs,TestTwo,The following statement contains a magic number: DoTest(RandomStrategy' 2);
Magic Number,Lucene.Net.Util,BaseSortTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\BaseSortTestCase.cs,TestRandomLowCardinality,The following statement contains a magic number: DoTest(RandomLowCardinalityStrategy' 2);
Magic Number,Lucene.Net.Util,BaseSortTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\BaseSortTestCase.cs,TestAscending,The following statement contains a magic number: DoTest(AscendingStrategy' 2);
Magic Number,Lucene.Net.Util,BaseSortTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\BaseSortTestCase.cs,TestAscendingSequences,The following statement contains a magic number: DoTest(AscendingSequencesStrategy' 2);
Magic Number,Lucene.Net.Util,BaseSortTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\BaseSortTestCase.cs,TestDescending,The following statement contains a magic number: DoTest(DescendingStrategy' 2);
Magic Number,Lucene.Net.Util,BaseSortTestCase,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\BaseSortTestCase.cs,TestStrictlyDescendingStrategy,The following statement contains a magic number: DoTest(StrictlyDescendingStrategy' 2);
Magic Number,Lucene.Net.Util,StressRamUsageEstimator,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\StressRamUsageEstimator.cs,TestChainedEstimation,The following statement contains a magic number: first.CreateNext(new sbyte[rnd.Next(1024)]);
Magic Number,Lucene.Net.Util,StressRamUsageEstimator,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\StressRamUsageEstimator.cs,TestChainedEstimation,The following statement contains a magic number: i < 5000
Magic Number,Lucene.Net.Util,StressRamUsageEstimator,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\StressRamUsageEstimator.cs,TestLargeSetOfByteArrays,The following statement contains a magic number: object[] all = new object[1000000];
Magic Number,Lucene.Net.Util,StressRamUsageEstimator,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\StressRamUsageEstimator.cs,TestLargeSetOfByteArrays,The following statement contains a magic number: all[i] = new sbyte[Random.Next(3)];
Magic Number,Lucene.Net.Util,StressRamUsageEstimator,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\StressRamUsageEstimator.cs,TestSimpleByteArrays,The following statement contains a magic number: estimated > 50 * RamUsageEstimator.ONE_MB
Magic Number,Lucene.Net.Util,StressRamUsageEstimator,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\StressRamUsageEstimator.cs,TestSimpleByteArrays,The following statement contains a magic number: Console.WriteLine(string.Format(CultureInfo.InvariantCulture' "{0}\t{1}\t{2}"' RamUsageEstimator.HumanReadableUnits(GC.GetTotalMemory(false)).PadLeft(10' ' ')' RamUsageEstimator.HumanReadableUnits(GC.MaxGeneration).PadLeft(10' ' ')' RamUsageEstimator.HumanReadableUnits(estimated).PadLeft(10' ' ')));
Magic Number,Lucene.Net.Util,StressRamUsageEstimator,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\StressRamUsageEstimator.cs,TestSimpleByteArrays,The following statement contains a magic number: Console.WriteLine(string.Format(CultureInfo.InvariantCulture' "{0}\t{1}\t{2}"' RamUsageEstimator.HumanReadableUnits(GC.GetTotalMemory(false)).PadLeft(10' ' ')' RamUsageEstimator.HumanReadableUnits(GC.MaxGeneration).PadLeft(10' ' ')' RamUsageEstimator.HumanReadableUnits(estimated).PadLeft(10' ' ')));
Magic Number,Lucene.Net.Util,StressRamUsageEstimator,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\StressRamUsageEstimator.cs,TestSimpleByteArrays,The following statement contains a magic number: Console.WriteLine(string.Format(CultureInfo.InvariantCulture' "{0}\t{1}\t{2}"' RamUsageEstimator.HumanReadableUnits(GC.GetTotalMemory(false)).PadLeft(10' ' ')' RamUsageEstimator.HumanReadableUnits(GC.MaxGeneration).PadLeft(10' ' ')' RamUsageEstimator.HumanReadableUnits(estimated).PadLeft(10' ' ')));
Magic Number,Lucene.Net.Util,StressRamUsageEstimator,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\StressRamUsageEstimator.cs,TestSimpleByteArrays,The following statement contains a magic number: object[] seg = new object[10000];
Magic Number,Lucene.Net.Util,StressRamUsageEstimator,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\StressRamUsageEstimator.cs,TestSimpleByteArrays,The following statement contains a magic number: seg[i] = new sbyte[Random.Next(7)];
Magic Number,Lucene.Net.Util,Test2BPagedBytes,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\Test2BPagedBytes.cs,Test,The following statement contains a magic number: PagedBytes pb = new PagedBytes(15);
Magic Number,Lucene.Net.Util,Test2BPagedBytes,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\Test2BPagedBytes.cs,Test,The following statement contains a magic number: int numBytes = TestUtil.NextInt32(r2' 1' 32768);
Magic Number,Lucene.Net.Util,Test2BPagedBytes,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\Test2BPagedBytes.cs,Test,The following statement contains a magic number: netBytes < 1.1 * int.MaxValue
Magic Number,Lucene.Net.Util,Test2BPagedBytes,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\Test2BPagedBytes.cs,Test,The following statement contains a magic number: int numBytes = TestUtil.NextInt32(r2' 1' 32768);
Magic Number,Lucene.Net.Util,Test2BPagedBytes,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\Test2BPagedBytes.cs,Test,The following statement contains a magic number: netBytes < 1.1 * int.MaxValue
Magic Number,Lucene.Net.Util,TestArrayUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestArrayUtil.cs,TestGrowth,The following statement contains a magic number: Assert.IsTrue(copyCostPerElement < 10.0' "cost " + copyCostPerElement);
Magic Number,Lucene.Net.Util,TestArrayUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestArrayUtil.cs,TestMaxSize,The following statement contains a magic number: elemSize < 10
Magic Number,Lucene.Net.Util,TestArrayUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestArrayUtil.cs,TestInvalidElementSizes,The following statement contains a magic number: int num = AtLeast(10000);
Magic Number,Lucene.Net.Util,TestArrayUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestArrayUtil.cs,TestInvalidElementSizes,The following statement contains a magic number: int elemSize = rnd.Next(11);
Magic Number,Lucene.Net.Util,TestArrayUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestArrayUtil.cs,TestParseInt,The following statement contains a magic number: Assert.IsTrue(test == -10000' test + " does not equal: " + -10000);
Magic Number,Lucene.Net.Util,TestArrayUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestArrayUtil.cs,TestParseInt,The following statement contains a magic number: Assert.IsTrue(test == -10000' test + " does not equal: " + -10000);
Magic Number,Lucene.Net.Util,TestArrayUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestArrayUtil.cs,TestParseInt,The following statement contains a magic number: Assert.IsTrue(test == 1923' test + " does not equal: " + 1923);
Magic Number,Lucene.Net.Util,TestArrayUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestArrayUtil.cs,TestParseInt,The following statement contains a magic number: Assert.IsTrue(test == 1923' test + " does not equal: " + 1923);
Magic Number,Lucene.Net.Util,TestArrayUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestArrayUtil.cs,TestParseInt,The following statement contains a magic number: test = ArrayUtil.ParseInt32("foo 1923 bar".ToCharArray()' 4' 4);
Magic Number,Lucene.Net.Util,TestArrayUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestArrayUtil.cs,TestParseInt,The following statement contains a magic number: test = ArrayUtil.ParseInt32("foo 1923 bar".ToCharArray()' 4' 4);
Magic Number,Lucene.Net.Util,TestArrayUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestArrayUtil.cs,TestParseInt,The following statement contains a magic number: Assert.IsTrue(test == 1923' test + " does not equal: " + 1923);
Magic Number,Lucene.Net.Util,TestArrayUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestArrayUtil.cs,TestParseInt,The following statement contains a magic number: Assert.IsTrue(test == 1923' test + " does not equal: " + 1923);
Magic Number,Lucene.Net.Util,TestArrayUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestArrayUtil.cs,TestSliceEquals,The following statement contains a magic number: Assert.IsFalse(ArrayUtil.Equals(leftChars' 1' rightChars' 2' left.Length)' left + " does not equal: " + right);
Magic Number,Lucene.Net.Util,TestArrayUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestArrayUtil.cs,TestSliceEquals,The following statement contains a magic number: Assert.IsFalse(ArrayUtil.Equals(leftChars' 25' rightChars' 0' left.Length)' left + " does not equal: " + right);
Magic Number,Lucene.Net.Util,TestArrayUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestArrayUtil.cs,TestSliceEquals,The following statement contains a magic number: Assert.IsFalse(ArrayUtil.Equals(leftChars' 12' rightChars' 0' left.Length)' left + " does not equal: " + right);
Magic Number,Lucene.Net.Util,TestArrayUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestArrayUtil.cs,TestIntroSort,The following statement contains a magic number: int num = AtLeast(50);
Magic Number,Lucene.Net.Util,TestArrayUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestArrayUtil.cs,TestIntroSort,The following statement contains a magic number: int[] a1 = CreateRandomArray(2000);
Magic Number,Lucene.Net.Util,TestArrayUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestArrayUtil.cs,TestIntroSort,The following statement contains a magic number: a1 = CreateRandomArray(2000);
Magic Number,Lucene.Net.Util,TestArrayUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestArrayUtil.cs,CreateSparseRandomArray,The following statement contains a magic number: a[i] = Convert.ToInt32(rnd.Next(2));
Magic Number,Lucene.Net.Util,TestArrayUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestArrayUtil.cs,TestQuickToHeapSortFallback,The following statement contains a magic number: int num = AtLeast(50);
Magic Number,Lucene.Net.Util,TestArrayUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestArrayUtil.cs,TestQuickToHeapSortFallback,The following statement contains a magic number: int[] a1 = CreateSparseRandomArray(40000);
Magic Number,Lucene.Net.Util,TestArrayUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestArrayUtil.cs,TestTimSort,The following statement contains a magic number: int num = AtLeast(50);
Magic Number,Lucene.Net.Util,TestArrayUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestArrayUtil.cs,TestTimSort,The following statement contains a magic number: int[] a1 = CreateRandomArray(2000)' a2 = (int[])a1.Clone();
Magic Number,Lucene.Net.Util,TestArrayUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestArrayUtil.cs,TestTimSort,The following statement contains a magic number: a1 = CreateRandomArray(2000);
Magic Number,Lucene.Net.Util,TestArrayUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestArrayUtil.cs,TestMergeSortStability,The following statement contains a magic number: Item[] items = new Item[100];
Magic Number,Lucene.Net.Util,TestArrayUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestArrayUtil.cs,TestMergeSortStability,The following statement contains a magic number: items[i] = new Item(equal ? (i + 1) : -1' equal ? 0 : (rnd.Next(1000) + 1));
Magic Number,Lucene.Net.Util,TestArrayUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestArrayUtil.cs,TestTimSortStability,The following statement contains a magic number: Item[] items = new Item[100];
Magic Number,Lucene.Net.Util,TestArrayUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestArrayUtil.cs,TestTimSortStability,The following statement contains a magic number: items[i] = new Item(equal ? (i + 1) : -1' equal ? 0 : (rnd.Next(1000) + 1));
Magic Number,Lucene.Net.Util,TestAttributeSource,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestAttributeSource.cs,TestCaptureState,The following statement contains a magic number: flagsAtt.Flags = 12345;
Magic Number,Lucene.Net.Util,TestAttributeSource,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestAttributeSource.cs,TestCaptureState,The following statement contains a magic number: Assert.AreEqual(12345' flagsAtt.Flags' "FlagsAttribute should not be touched");
Magic Number,Lucene.Net.Util,TestAttributeSource,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestAttributeSource.cs,TestCloneAttributes,The following statement contains a magic number: flagsAtt.Flags = 1234;
Magic Number,Lucene.Net.Util,TestAttributeSource,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestAttributeSource.cs,TestCloneAttributes,The following statement contains a magic number: flagsAtt2.Flags = 4711;
Magic Number,Lucene.Net.Util,TestAttributeSource,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestAttributeSource.cs,TestCloneAttributes,The following statement contains a magic number: Assert.AreEqual(4711' flagsAtt.Flags' "FlagsAttribute of original must now contain updated term");
Magic Number,Lucene.Net.Util,TestBroadWord,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestBroadWord.cs,TestRank1,The following statement contains a magic number: TstRank(3L);
Magic Number,Lucene.Net.Util,TestBroadWord,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestBroadWord.cs,TestSelectFromZero,The following statement contains a magic number: TstSelect(0L' 1' 72);
Magic Number,Lucene.Net.Util,TestBroadWord,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestBroadWord.cs,TestSelectSingleBit,The following statement contains a magic number: i < 64
Magic Number,Lucene.Net.Util,TestBroadWord,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestBroadWord.cs,TestSelectTwoBits,The following statement contains a magic number: TstSelect(x' 2' j);
Magic Number,Lucene.Net.Util,TestBroadWord,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestBroadWord.cs,TestSelectTwoBits,The following statement contains a magic number: TstSelect(x' 3' 72);
Magic Number,Lucene.Net.Util,TestBroadWord,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestBroadWord.cs,TestSelectTwoBits,The following statement contains a magic number: TstSelect(x' 3' 72);
Magic Number,Lucene.Net.Util,TestBroadWord,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestBroadWord.cs,TestSelectTwoBits,The following statement contains a magic number: j < 64
Magic Number,Lucene.Net.Util,TestBroadWord,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestBroadWord.cs,TestSelectTwoBits,The following statement contains a magic number: i < 64
Magic Number,Lucene.Net.Util,TestBroadWord,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestBroadWord.cs,TestSelectThreeBits,The following statement contains a magic number: TstSelect(x' 2' j);
Magic Number,Lucene.Net.Util,TestBroadWord,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestBroadWord.cs,TestSelectThreeBits,The following statement contains a magic number: TstSelect(x' 3' k);
Magic Number,Lucene.Net.Util,TestBroadWord,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestBroadWord.cs,TestSelectThreeBits,The following statement contains a magic number: TstSelect(x' 4' 72);
Magic Number,Lucene.Net.Util,TestBroadWord,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestBroadWord.cs,TestSelectThreeBits,The following statement contains a magic number: TstSelect(x' 4' 72);
Magic Number,Lucene.Net.Util,TestBroadWord,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestBroadWord.cs,TestSelectThreeBits,The following statement contains a magic number: k < 64
Magic Number,Lucene.Net.Util,TestBroadWord,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestBroadWord.cs,TestSelectThreeBits,The following statement contains a magic number: j < 64
Magic Number,Lucene.Net.Util,TestBroadWord,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestBroadWord.cs,TestSelectThreeBits,The following statement contains a magic number: i < 64
Magic Number,Lucene.Net.Util,TestBroadWord,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestBroadWord.cs,TestSelectAllBits,The following statement contains a magic number: i < 64
Magic Number,Lucene.Net.Util,TestBroadWord,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestBroadWord.cs,TestPerfSelectAllBitsBroad,The following statement contains a magic number: i < 64
Magic Number,Lucene.Net.Util,TestBroadWord,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestBroadWord.cs,TestPerfSelectAllBitsBroad,The following statement contains a magic number: j < 100000
Magic Number,Lucene.Net.Util,TestBroadWord,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestBroadWord.cs,TestPerfSelectAllBitsNaive,The following statement contains a magic number: i < 64
Magic Number,Lucene.Net.Util,TestBroadWord,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestBroadWord.cs,TestPerfSelectAllBitsNaive,The following statement contains a magic number: j < 10000
Magic Number,Lucene.Net.Util,TestByteBlockPool,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestByteBlockPool.cs,TestReadAndWrite,The following statement contains a magic number: int maxLength = AtLeast(500);
Magic Number,Lucene.Net.Util,TestByteBlockPool,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestByteBlockPool.cs,TestReadAndWrite,The following statement contains a magic number: int numValues = AtLeast(100);
Magic Number,Lucene.Net.Util,TestByteBlockPool,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestByteBlockPool.cs,TestReadAndWrite,The following statement contains a magic number: j < 2
Magic Number,Lucene.Net.Util,TestBytesRef,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestBytesRef.cs,TestFromBytes,The following statement contains a magic number: Assert.AreEqual(4' b.Length);
Magic Number,Lucene.Net.Util,TestBytesRef,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestBytesRef.cs,TestFromBytes,The following statement contains a magic number: BytesRef b2 = new BytesRef(bytes' 1' 3);
Magic Number,Lucene.Net.Util,TestBytesRef,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestBytesRef.cs,TestFromChars,The following statement contains a magic number: i < 100
Magic Number,Lucene.Net.Util,TestBytesRef,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestBytesRef.cs,TestFromCharSequence,The following statement contains a magic number: i < 100
Magic Number,Lucene.Net.Util,TestBytesRef,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestBytesRef.cs,TestAppend,The following statement contains a magic number: BytesRef b = new BytesRef(bytes' 1' 3);
Magic Number,Lucene.Net.Util,TestBytesRef,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestBytesRef.cs,TestCopyBytes,The following statement contains a magic number: BytesRef b = new BytesRef(bytes' 1' 3);
Magic Number,Lucene.Net.Util,TestBytesRefArray,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestBytesRefArray.cs,TestAppend,The following statement contains a magic number: int entries = AtLeast(500);
Magic Number,Lucene.Net.Util,TestBytesRefArray,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestBytesRefArray.cs,TestAppend,The following statement contains a magic number: i < 2
Magic Number,Lucene.Net.Util,TestBytesRefArray,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestBytesRefArray.cs,TestAppend,The following statement contains a magic number: j < 2
Magic Number,Lucene.Net.Util,TestBytesRefArray,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestBytesRefArray.cs,TestSort,The following statement contains a magic number: int entries = AtLeast(500);
Magic Number,Lucene.Net.Util,TestBytesRefArray,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestBytesRefArray.cs,TestSort,The following statement contains a magic number: j < 2
Magic Number,Lucene.Net.Util,TestBytesRefHash,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestBytesRefHash.cs,NewPool,The following statement contains a magic number: return Random.NextBoolean() && Pool != null ? Pool : new ByteBlockPool(new RecyclingByteBlockAllocator(ByteBlockPool.BYTE_BLOCK_SIZE' Random.Next(25)));
Magic Number,Lucene.Net.Util,TestBytesRefHash,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestBytesRefHash.cs,NewHash,The following statement contains a magic number: int initSize = 2 << 1 + Random.Next(5);
Magic Number,Lucene.Net.Util,TestBytesRefHash,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestBytesRefHash.cs,NewHash,The following statement contains a magic number: int initSize = 2 << 1 + Random.Next(5);
Magic Number,Lucene.Net.Util,TestBytesRefHash,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestBytesRefHash.cs,TestSize,The following statement contains a magic number: int num = AtLeast(2);
Magic Number,Lucene.Net.Util,TestBytesRefHash,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestBytesRefHash.cs,TestSize,The following statement contains a magic number: int mod = 1 + Random.Next(39);
Magic Number,Lucene.Net.Util,TestBytesRefHash,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestBytesRefHash.cs,TestSize,The following statement contains a magic number: str = TestUtil.RandomRealisticUnicodeString(Random' 1000);
Magic Number,Lucene.Net.Util,TestBytesRefHash,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestBytesRefHash.cs,TestSize,The following statement contains a magic number: i < 797
Magic Number,Lucene.Net.Util,TestBytesRefHash,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestBytesRefHash.cs,TestGet,The following statement contains a magic number: int num = AtLeast(2);
Magic Number,Lucene.Net.Util,TestBytesRefHash,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestBytesRefHash.cs,TestGet,The following statement contains a magic number: str = TestUtil.RandomRealisticUnicodeString(Random' 1000);
Magic Number,Lucene.Net.Util,TestBytesRefHash,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestBytesRefHash.cs,TestGet,The following statement contains a magic number: i < 797
Magic Number,Lucene.Net.Util,TestBytesRefHash,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestBytesRefHash.cs,TestCompact,The following statement contains a magic number: int num = AtLeast(2);
Magic Number,Lucene.Net.Util,TestBytesRefHash,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestBytesRefHash.cs,TestCompact,The following statement contains a magic number: const int size = 797;
Magic Number,Lucene.Net.Util,TestBytesRefHash,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestBytesRefHash.cs,TestCompact,The following statement contains a magic number: str = TestUtil.RandomRealisticUnicodeString(Random' 1000);
Magic Number,Lucene.Net.Util,TestBytesRefHash,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestBytesRefHash.cs,TestSort,The following statement contains a magic number: int num = AtLeast(2);
Magic Number,Lucene.Net.Util,TestBytesRefHash,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestBytesRefHash.cs,TestSort,The following statement contains a magic number: str = TestUtil.RandomRealisticUnicodeString(Random' 1000);
Magic Number,Lucene.Net.Util,TestBytesRefHash,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestBytesRefHash.cs,TestSort,The following statement contains a magic number: k < 797
Magic Number,Lucene.Net.Util,TestBytesRefHash,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestBytesRefHash.cs,TestAdd,The following statement contains a magic number: int num = AtLeast(2);
Magic Number,Lucene.Net.Util,TestBytesRefHash,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestBytesRefHash.cs,TestAdd,The following statement contains a magic number: str = TestUtil.RandomRealisticUnicodeString(Random' 1000);
Magic Number,Lucene.Net.Util,TestBytesRefHash,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestBytesRefHash.cs,TestAdd,The following statement contains a magic number: i < 797
Magic Number,Lucene.Net.Util,TestBytesRefHash,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestBytesRefHash.cs,TestFind,The following statement contains a magic number: int num = AtLeast(2);
Magic Number,Lucene.Net.Util,TestBytesRefHash,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestBytesRefHash.cs,TestFind,The following statement contains a magic number: str = TestUtil.RandomRealisticUnicodeString(Random' 1000);
Magic Number,Lucene.Net.Util,TestBytesRefHash,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestBytesRefHash.cs,TestFind,The following statement contains a magic number: i < 797
Magic Number,Lucene.Net.Util,TestBytesRefHash,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestBytesRefHash.cs,TestLargeValue,The following statement contains a magic number: int[] sizes = { Random.Next(5)' ByteBlockPool.BYTE_BLOCK_SIZE - 33 + Random.Next(31)' ByteBlockPool.BYTE_BLOCK_SIZE - 1 + Random.Next(37) };
Magic Number,Lucene.Net.Util,TestBytesRefHash,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestBytesRefHash.cs,TestLargeValue,The following statement contains a magic number: int[] sizes = { Random.Next(5)' ByteBlockPool.BYTE_BLOCK_SIZE - 33 + Random.Next(31)' ByteBlockPool.BYTE_BLOCK_SIZE - 1 + Random.Next(37) };
Magic Number,Lucene.Net.Util,TestBytesRefHash,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestBytesRefHash.cs,TestLargeValue,The following statement contains a magic number: int[] sizes = { Random.Next(5)' ByteBlockPool.BYTE_BLOCK_SIZE - 33 + Random.Next(31)' ByteBlockPool.BYTE_BLOCK_SIZE - 1 + Random.Next(37) };
Magic Number,Lucene.Net.Util,TestBytesRefHash,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestBytesRefHash.cs,TestLargeValue,The following statement contains a magic number: int[] sizes = { Random.Next(5)' ByteBlockPool.BYTE_BLOCK_SIZE - 33 + Random.Next(31)' ByteBlockPool.BYTE_BLOCK_SIZE - 1 + Random.Next(37) };
Magic Number,Lucene.Net.Util,TestBytesRefHash,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestBytesRefHash.cs,TestAddByPoolOffset,The following statement contains a magic number: int num = AtLeast(2);
Magic Number,Lucene.Net.Util,TestBytesRefHash,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestBytesRefHash.cs,TestAddByPoolOffset,The following statement contains a magic number: str = TestUtil.RandomRealisticUnicodeString(Random' 1000);
Magic Number,Lucene.Net.Util,TestBytesRefHash,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestBytesRefHash.cs,TestAddByPoolOffset,The following statement contains a magic number: i < 797
Magic Number,Lucene.Net.Util,TestCharsRef,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestCharsRef.cs,TestUTF16InUTF8Order,The following statement contains a magic number: int numStrings = AtLeast(1000);
Magic Number,Lucene.Net.Util,TestCharsRef,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestCharsRef.cs,TestAppend,The following statement contains a magic number: int numStrings = AtLeast(10);
Magic Number,Lucene.Net.Util,TestCharsRef,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestCharsRef.cs,TestAppend,The following statement contains a magic number: char[] charArray = TestUtil.RandomRealisticUnicodeString(Random' 1' 100).ToCharArray();
Magic Number,Lucene.Net.Util,TestCharsRef,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestCharsRef.cs,TestCopy,The following statement contains a magic number: int numIters = AtLeast(10);
Magic Number,Lucene.Net.Util,TestCharsRef,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestCharsRef.cs,TestCopy,The following statement contains a magic number: char[] charArray = TestUtil.RandomRealisticUnicodeString(Random' 1' 100).ToCharArray();
Magic Number,Lucene.Net.Util,TestCharsRef,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestCharsRef.cs,TestAppendChars,The following statement contains a magic number: CharsRef c = new CharsRef(chars' 1' 3);
Magic Number,Lucene.Net.Util,TestCharsRef,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestCharsRef.cs,TestCopyChars,The following statement contains a magic number: CharsRef c = new CharsRef(chars' 1' 3);
Magic Number,Lucene.Net.Util,TestCharsRef,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestCharsRef.cs,TestCopyChars,The following statement contains a magic number: c.CopyChars(otherchars' 0' 4);
Magic Number,Lucene.Net.Util,TestCharsRef,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestCharsRef.cs,TestCopyCharsRef,The following statement contains a magic number: CharsRef c = new CharsRef(chars' 1' 3);
Magic Number,Lucene.Net.Util,TestCharsRef,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestCharsRef.cs,TestCopyCharsRef,The following statement contains a magic number: c.CopyChars(new CharsRef(otherchars' 0' 4));
Magic Number,Lucene.Net.Util,TestCharsRef,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestCharsRef.cs,TestCharSequenceIndexer,The following statement contains a magic number: var _ = c[3];
Magic Number,Lucene.Net.Util,TestCharsRef,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestCharsRef.cs,TestCharSequenceSubSequence,The following statement contains a magic number: ICharSequence[] sequences = { new CharsRef("abc")' new CharsRef("0abc".ToCharArray()' 1' 3)' new CharsRef("abc0".ToCharArray()' 0' 3)' new CharsRef("0abc0".ToCharArray()' 1' 3) };
Magic Number,Lucene.Net.Util,TestCharsRef,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestCharsRef.cs,TestCharSequenceSubSequence,The following statement contains a magic number: ICharSequence[] sequences = { new CharsRef("abc")' new CharsRef("0abc".ToCharArray()' 1' 3)' new CharsRef("abc0".ToCharArray()' 0' 3)' new CharsRef("0abc0".ToCharArray()' 1' 3) };
Magic Number,Lucene.Net.Util,TestCharsRef,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestCharsRef.cs,TestCharSequenceSubSequence,The following statement contains a magic number: ICharSequence[] sequences = { new CharsRef("abc")' new CharsRef("0abc".ToCharArray()' 1' 3)' new CharsRef("abc0".ToCharArray()' 0' 3)' new CharsRef("0abc0".ToCharArray()' 1' 3) };
Magic Number,Lucene.Net.Util,TestCharsRef,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestCharsRef.cs,DoTestSequence,The following statement contains a magic number: Assert.AreEqual("b"' c.SubSequence(1' 2).ToString());
Magic Number,Lucene.Net.Util,TestCharsRef,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestCharsRef.cs,DoTestSequence,The following statement contains a magic number: Assert.AreEqual("bc"' c.SubSequence(1' 3).ToString());
Magic Number,Lucene.Net.Util,TestCharsRef,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestCharsRef.cs,DoTestSequence,The following statement contains a magic number: c.SubSequence(0' 4);
Magic Number,Lucene.Net.Util,TestCharsRef,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestCharsRef.cs,DoTestSequence,The following statement contains a magic number: c.SubSequence(2' 1);
Magic Number,Lucene.Net.Util,TestCollectionUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestCollectionUtil.cs,TestIntroSort,The following statement contains a magic number: List<int> list1 = CreateRandomList(2000)' list2 = new List<int>(list1);
Magic Number,Lucene.Net.Util,TestCollectionUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestCollectionUtil.cs,TestIntroSort,The following statement contains a magic number: list1 = CreateRandomList(2000);
Magic Number,Lucene.Net.Util,TestCollectionUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestCollectionUtil.cs,TestTimSort,The following statement contains a magic number: List<int> list1 = CreateRandomList(2000)' list2 = new List<int>(list1);
Magic Number,Lucene.Net.Util,TestCollectionUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestCollectionUtil.cs,TestTimSort,The following statement contains a magic number: list1 = CreateRandomList(2000);
Magic Number,Lucene.Net.Util,TestDoubleBarrelLRUCache,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestDoubleBarrelLRUCache.cs,TestCache,The following statement contains a magic number: i < n + (n / 2)
Magic Number,Lucene.Net.Util,TestDoubleBarrelLRUCache,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestDoubleBarrelLRUCache.cs,TestCache,The following statement contains a magic number: i < n + (n * 3 / 4)
Magic Number,Lucene.Net.Util,TestDoubleBarrelLRUCache,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestDoubleBarrelLRUCache.cs,TestCache,The following statement contains a magic number: i < n + (n * 3 / 4)
Magic Number,Lucene.Net.Util,TestDoubleBarrelLRUCache,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestDoubleBarrelLRUCache.cs,TestLRUCache,The following statement contains a magic number: const int n = 100;
Magic Number,Lucene.Net.Util,TestDoubleBarrelLRUCache,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestDoubleBarrelLRUCache.cs,TestThreadCorrectness,The following statement contains a magic number: const int NUM_THREADS = 4;
Magic Number,Lucene.Net.Util,TestDoubleBarrelLRUCache,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestDoubleBarrelLRUCache.cs,TestThreadCorrectness,The following statement contains a magic number: const int CACHE_SIZE = 512;
Magic Number,Lucene.Net.Util,TestDoubleBarrelLRUCache,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestDoubleBarrelLRUCache.cs,TestThreadCorrectness,The following statement contains a magic number: int OBJ_COUNT = 3 * CACHE_SIZE;
Magic Number,Lucene.Net.Util,TestDoubleBarrelLRUCache,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestDoubleBarrelLRUCache.cs,TestThreadCorrectness,The following statement contains a magic number: DoubleBarrelLRUCache<CloneableObject' object> c = new DoubleBarrelLRUCache<CloneableObject' object>(1024);
Magic Number,Lucene.Net.Util,CacheThread,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestDoubleBarrelLRUCache.cs,Run,The following statement contains a magic number: CloneableObject obj = Objs[(int)((count / 2) % limit)];
Magic Number,Lucene.Net.Util,CacheThread,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestDoubleBarrelLRUCache.cs,Run,The following statement contains a magic number: (++count % 10000) == 0
Magic Number,Lucene.Net.Util,TestFieldCacheSanityChecker,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestFieldCacheSanityChecker.cs,SetUp,The following statement contains a magic number: 0 == i % 3
Magic Number,Lucene.Net.Util,TestFieldCacheSanityChecker,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestFieldCacheSanityChecker.cs,TestInsanity1,The following statement contains a magic number: Assert.AreEqual(2' insanity[0].CacheEntries.Length' "wrong number of entries in cache error");
Magic Number,Lucene.Net.Util,TestFieldCacheSanityChecker,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestFieldCacheSanityChecker.cs,TestInsanity2,The following statement contains a magic number: Assert.AreEqual(3' insanity[0].CacheEntries.Length' "wrong number of entries in cache error");
Magic Number,Lucene.Net.Util,TestFixedBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestFixedBitSet.cs,DoPrevSetBit,The following statement contains a magic number: int aa = a.Length + Random.Next(100);
Magic Number,Lucene.Net.Util,TestFixedBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestFixedBitSet.cs,DoIterate,The following statement contains a magic number: mode == 2
Magic Number,Lucene.Net.Util,TestFixedBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestFixedBitSet.cs,DoRandomSets,The following statement contains a magic number: int sz = TestUtil.NextInt32(Random' 2' maxSize);
Magic Number,Lucene.Net.Util,TestFixedBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestFixedBitSet.cs,DoRandomSets,The following statement contains a magic number: fromIndex = Random.Next(sz / 2);
Magic Number,Lucene.Net.Util,TestFixedBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestFixedBitSet.cs,DoRandomSets,The following statement contains a magic number: fromIndex = Random.Next(sz / 2);
Magic Number,Lucene.Net.Util,TestFixedBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestFixedBitSet.cs,DoRandomSets,The following statement contains a magic number: fromIndex = Random.Next(sz / 2);
Magic Number,Lucene.Net.Util,TestFixedBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestFixedBitSet.cs,TestSmall,The following statement contains a magic number: DoRandomSets(AtLeast(1200)' AtLeast(1000)' 1);
Magic Number,Lucene.Net.Util,TestFixedBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestFixedBitSet.cs,TestSmall,The following statement contains a magic number: DoRandomSets(AtLeast(1200)' AtLeast(1000)' 1);
Magic Number,Lucene.Net.Util,TestFixedBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestFixedBitSet.cs,TestSmall,The following statement contains a magic number: DoRandomSets(AtLeast(1200)' AtLeast(1000)' 2);
Magic Number,Lucene.Net.Util,TestFixedBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestFixedBitSet.cs,TestSmall,The following statement contains a magic number: DoRandomSets(AtLeast(1200)' AtLeast(1000)' 2);
Magic Number,Lucene.Net.Util,TestFixedBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestFixedBitSet.cs,TestSmall,The following statement contains a magic number: DoRandomSets(AtLeast(1200)' AtLeast(1000)' 2);
Magic Number,Lucene.Net.Util,TestFixedBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestFixedBitSet.cs,TestClearSmall,The following statement contains a magic number: FixedBitSet a = new FixedBitSet(30);
Magic Number,Lucene.Net.Util,TestFixedBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestFixedBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesA = { 1' 2' 5' 7' 8' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestFixedBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestFixedBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesA = { 1' 2' 5' 7' 8' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestFixedBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestFixedBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesA = { 1' 2' 5' 7' 8' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestFixedBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestFixedBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesA = { 1' 2' 5' 7' 8' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestFixedBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestFixedBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesA = { 1' 2' 5' 7' 8' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestFixedBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestFixedBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesA = { 1' 2' 5' 7' 8' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestFixedBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestFixedBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesA = { 1' 2' 5' 7' 8' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestFixedBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestFixedBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesA = { 1' 2' 5' 7' 8' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestFixedBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestFixedBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesA = { 1' 2' 5' 7' 8' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestFixedBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestFixedBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesA = { 1' 2' 5' 7' 8' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestFixedBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestFixedBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesA = { 1' 2' 5' 7' 8' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestFixedBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestFixedBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesA = { 1' 2' 5' 7' 8' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestFixedBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestFixedBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesA = { 1' 2' 5' 7' 8' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestFixedBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestFixedBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesA = { 1' 2' 5' 7' 8' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestFixedBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestFixedBitSet.cs,TestClearSmall,The following statement contains a magic number: FixedBitSet b = new FixedBitSet(30);
Magic Number,Lucene.Net.Util,TestFixedBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestFixedBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesB = { 1' 2' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestFixedBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestFixedBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesB = { 1' 2' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestFixedBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestFixedBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesB = { 1' 2' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestFixedBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestFixedBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesB = { 1' 2' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestFixedBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestFixedBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesB = { 1' 2' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestFixedBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestFixedBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesB = { 1' 2' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestFixedBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestFixedBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesB = { 1' 2' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestFixedBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestFixedBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesB = { 1' 2' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestFixedBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestFixedBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesB = { 1' 2' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestFixedBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestFixedBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesB = { 1' 2' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestFixedBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestFixedBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesB = { 1' 2' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestFixedBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestFixedBitSet.cs,TestClearSmall,The following statement contains a magic number: a.Clear(5' 9);
Magic Number,Lucene.Net.Util,TestFixedBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestFixedBitSet.cs,TestClearSmall,The following statement contains a magic number: a.Clear(5' 9);
Magic Number,Lucene.Net.Util,TestFixedBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestFixedBitSet.cs,TestClearSmall,The following statement contains a magic number: a.Clear(9' 10);
Magic Number,Lucene.Net.Util,TestFixedBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestFixedBitSet.cs,TestClearSmall,The following statement contains a magic number: a.Clear(9' 10);
Magic Number,Lucene.Net.Util,TestFixedBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestFixedBitSet.cs,TestClearSmall,The following statement contains a magic number: a.Set(9);
Magic Number,Lucene.Net.Util,TestFixedBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestFixedBitSet.cs,TestClearLarge,The following statement contains a magic number: int iters = AtLeast(1000);
Magic Number,Lucene.Net.Util,TestFixedBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestFixedBitSet.cs,TestClearLarge,The following statement contains a magic number: int sz = AtLeast(1200);
Magic Number,Lucene.Net.Util,TestFixedBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestFixedBitSet.cs,TestClearLarge,The following statement contains a magic number: i < sz / 2
Magic Number,Lucene.Net.Util,TestFixedBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestFixedBitSet.cs,TestEquals,The following statement contains a magic number: int numBits = Random.Next(2000) + 1;
Magic Number,Lucene.Net.Util,TestFixedBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestFixedBitSet.cs,TestEquals,The following statement contains a magic number: iter < 10 * RANDOM_MULTIPLIER
Magic Number,Lucene.Net.Util,TestFixedBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestFixedBitSet.cs,TestHashCodeEquals,The following statement contains a magic number: int numBits = Random.Next(2000) + 1;
Magic Number,Lucene.Net.Util,TestFixedBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestFixedBitSet.cs,TestHashCodeEquals,The following statement contains a magic number: iter < 10 * RANDOM_MULTIPLIER
Magic Number,Lucene.Net.Util,TestFixedBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestFixedBitSet.cs,TestSmallBitSets,The following statement contains a magic number: numBits < 10
Magic Number,Lucene.Net.Util,TestFixedBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestFixedBitSet.cs,MakeFixedBitSet,The following statement contains a magic number: long[] words = new long[bits2words + Random.Next(100)];
Magic Number,Lucene.Net.Util,TestFixedBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestFixedBitSet.cs,TestPrevSetBit,The following statement contains a magic number: CheckPrevSetBitArray(new int[] { 0' 2 }' 3);
Magic Number,Lucene.Net.Util,TestFixedBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestFixedBitSet.cs,TestPrevSetBit,The following statement contains a magic number: CheckPrevSetBitArray(new int[] { 0' 2 }' 3);
Magic Number,Lucene.Net.Util,TestFixedBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestFixedBitSet.cs,TestNextBitSet,The following statement contains a magic number: int[] setBits = new int[0 + Random.Next(1000)];
Magic Number,Lucene.Net.Util,TestFixedBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestFixedBitSet.cs,TestNextBitSet,The following statement contains a magic number: CheckNextSetBitArray(setBits' setBits.Length + Random.Next(10));
Magic Number,Lucene.Net.Util,TestFixedBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestFixedBitSet.cs,TestNextBitSet,The following statement contains a magic number: CheckNextSetBitArray(new int[0]' setBits.Length + Random.Next(10));
Magic Number,Lucene.Net.Util,TestFixedBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestFixedBitSet.cs,TestEnsureCapacity,The following statement contains a magic number: FixedBitSet bits = new FixedBitSet(5);
Magic Number,Lucene.Net.Util,TestFixedBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestFixedBitSet.cs,TestEnsureCapacity,The following statement contains a magic number: bits.Set(4);
Magic Number,Lucene.Net.Util,TestFixedBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestFixedBitSet.cs,TestEnsureCapacity,The following statement contains a magic number: FixedBitSet newBits = FixedBitSet.EnsureCapacity(bits' 8);
Magic Number,Lucene.Net.Util,TestFixedBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestFixedBitSet.cs,TestEnsureCapacity,The following statement contains a magic number: Assert.IsTrue(newBits.Get(4));
Magic Number,Lucene.Net.Util,TestFixedBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestFixedBitSet.cs,TestEnsureCapacity,The following statement contains a magic number: newBits = FixedBitSet.EnsureCapacity(newBits' newBits.Length - 2);
Magic Number,Lucene.Net.Util,TestFixedBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestFixedBitSet.cs,TestEnsureCapacity,The following statement contains a magic number: newBits = FixedBitSet.EnsureCapacity(bits' 72);
Magic Number,Lucene.Net.Util,TestFixedBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestFixedBitSet.cs,TestEnsureCapacity,The following statement contains a magic number: Assert.IsTrue(newBits.Get(4));
Magic Number,Lucene.Net.Util,TestIdentityHashSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestIdentityHashSet.cs,TestCheck,The following statement contains a magic number: int max = 100000;
Magic Number,Lucene.Net.Util,TestIdentityHashSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestIdentityHashSet.cs,TestCheck,The following statement contains a magic number: int threshold = 256;
Magic Number,Lucene.Net.Util,TestIndexableBinaryStringTools,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestIndexableBinaryStringTools.cs,BeforeClass,The following statement contains a magic number: NUM_RANDOM_TESTS = AtLeast(200);
Magic Number,Lucene.Net.Util,TestIndexableBinaryStringTools,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestIndexableBinaryStringTools.cs,BeforeClass,The following statement contains a magic number: MAX_RANDOM_BINARY_LENGTH = AtLeast(300);
Magic Number,Lucene.Net.Util,TestIndexableBinaryStringTools,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestIndexableBinaryStringTools.cs,TestEncodedSortability,The following statement contains a magic number: char[] encoded1 = new char[MAX_RANDOM_BINARY_LENGTH * 10];
Magic Number,Lucene.Net.Util,TestIndexableBinaryStringTools,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestIndexableBinaryStringTools.cs,TestEncodedSortability,The following statement contains a magic number: char[] encoded2 = new char[MAX_RANDOM_BINARY_LENGTH * 10];
Magic Number,Lucene.Net.Util,TestIndexableBinaryStringTools,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestIndexableBinaryStringTools.cs,TestRandomBinaryRoundTrip,The following statement contains a magic number: char[] encoded = new char[MAX_RANDOM_BINARY_LENGTH * 10];
Magic Number,Lucene.Net.Util,TestIndexableBinaryStringTools,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestIndexableBinaryStringTools.cs,CharArrayDump,The following statement contains a magic number: digit < 4 - hex.Length
Magic Number,Lucene.Net.Util,TestIntsRef,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestIntsRef.cs,TestFromInts,The following statement contains a magic number: int[] ints = new int[] { 1' 2' 3' 4 };
Magic Number,Lucene.Net.Util,TestIntsRef,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestIntsRef.cs,TestFromInts,The following statement contains a magic number: int[] ints = new int[] { 1' 2' 3' 4 };
Magic Number,Lucene.Net.Util,TestIntsRef,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestIntsRef.cs,TestFromInts,The following statement contains a magic number: int[] ints = new int[] { 1' 2' 3' 4 };
Magic Number,Lucene.Net.Util,TestIntsRef,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestIntsRef.cs,TestFromInts,The following statement contains a magic number: Int32sRef i = new Int32sRef(ints' 0' 4);
Magic Number,Lucene.Net.Util,TestIntsRef,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestIntsRef.cs,TestFromInts,The following statement contains a magic number: Assert.AreEqual(4' i.Length);
Magic Number,Lucene.Net.Util,TestIntsRef,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestIntsRef.cs,TestFromInts,The following statement contains a magic number: Int32sRef i2 = new Int32sRef(ints' 1' 3);
Magic Number,Lucene.Net.Util,TestIntsRef,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestIntsRef.cs,TestFromInts,The following statement contains a magic number: Assert.AreEqual(new Int32sRef(new int[] { 2' 3' 4 }' 0' 3)' i2);
Magic Number,Lucene.Net.Util,TestIntsRef,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestIntsRef.cs,TestFromInts,The following statement contains a magic number: Assert.AreEqual(new Int32sRef(new int[] { 2' 3' 4 }' 0' 3)' i2);
Magic Number,Lucene.Net.Util,TestIntsRef,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestIntsRef.cs,TestFromInts,The following statement contains a magic number: Assert.AreEqual(new Int32sRef(new int[] { 2' 3' 4 }' 0' 3)' i2);
Magic Number,Lucene.Net.Util,TestIntsRef,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestIntsRef.cs,TestFromInts,The following statement contains a magic number: Assert.AreEqual(new Int32sRef(new int[] { 2' 3' 4 }' 0' 3)' i2);
Magic Number,Lucene.Net.Util,TestIOUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestIOUtils.cs,TestSuppressedExceptions,The following statement contains a magic number: IOUtils.DisposeWhileHandlingException(t' new BrokenIDisposable(1)' new BrokenIDisposable(2));
Magic Number,Lucene.Net.Util,TestIOUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestIOUtils.cs,TestSuppressedExceptions,The following statement contains a magic number: IOUtils.DisposeWhileHandlingException((TestException)null' new BrokenIDisposable(1)' new BrokenIDisposable(2));
Magic Number,Lucene.Net.Util,TestLongBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestLongBitSet.cs,DoPrevSetBit,The following statement contains a magic number: int aa = a.Length + Random.Next(100);
Magic Number,Lucene.Net.Util,TestLongBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestLongBitSet.cs,DoRandomSets,The following statement contains a magic number: int sz = TestUtil.NextInt32(Random' 2' maxSize);
Magic Number,Lucene.Net.Util,TestLongBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestLongBitSet.cs,DoRandomSets,The following statement contains a magic number: fromIndex = Random.Next(sz / 2);
Magic Number,Lucene.Net.Util,TestLongBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestLongBitSet.cs,DoRandomSets,The following statement contains a magic number: fromIndex = Random.Next(sz / 2);
Magic Number,Lucene.Net.Util,TestLongBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestLongBitSet.cs,DoRandomSets,The following statement contains a magic number: fromIndex = Random.Next(sz / 2);
Magic Number,Lucene.Net.Util,TestLongBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestLongBitSet.cs,TestSmall,The following statement contains a magic number: DoRandomSets(AtLeast(1200)' AtLeast(1000)' 1);
Magic Number,Lucene.Net.Util,TestLongBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestLongBitSet.cs,TestSmall,The following statement contains a magic number: DoRandomSets(AtLeast(1200)' AtLeast(1000)' 1);
Magic Number,Lucene.Net.Util,TestLongBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestLongBitSet.cs,TestSmall,The following statement contains a magic number: DoRandomSets(AtLeast(1200)' AtLeast(1000)' 2);
Magic Number,Lucene.Net.Util,TestLongBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestLongBitSet.cs,TestSmall,The following statement contains a magic number: DoRandomSets(AtLeast(1200)' AtLeast(1000)' 2);
Magic Number,Lucene.Net.Util,TestLongBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestLongBitSet.cs,TestSmall,The following statement contains a magic number: DoRandomSets(AtLeast(1200)' AtLeast(1000)' 2);
Magic Number,Lucene.Net.Util,TestLongBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestLongBitSet.cs,TestClearSmall,The following statement contains a magic number: Int64BitSet a = new Int64BitSet(30);
Magic Number,Lucene.Net.Util,TestLongBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestLongBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesA = { 1' 2' 5' 7' 8' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestLongBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestLongBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesA = { 1' 2' 5' 7' 8' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestLongBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestLongBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesA = { 1' 2' 5' 7' 8' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestLongBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestLongBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesA = { 1' 2' 5' 7' 8' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestLongBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestLongBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesA = { 1' 2' 5' 7' 8' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestLongBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestLongBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesA = { 1' 2' 5' 7' 8' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestLongBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestLongBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesA = { 1' 2' 5' 7' 8' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestLongBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestLongBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesA = { 1' 2' 5' 7' 8' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestLongBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestLongBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesA = { 1' 2' 5' 7' 8' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestLongBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestLongBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesA = { 1' 2' 5' 7' 8' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestLongBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestLongBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesA = { 1' 2' 5' 7' 8' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestLongBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestLongBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesA = { 1' 2' 5' 7' 8' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestLongBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestLongBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesA = { 1' 2' 5' 7' 8' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestLongBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestLongBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesA = { 1' 2' 5' 7' 8' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestLongBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestLongBitSet.cs,TestClearSmall,The following statement contains a magic number: Int64BitSet b = new Int64BitSet(30);
Magic Number,Lucene.Net.Util,TestLongBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestLongBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesB = { 1' 2' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestLongBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestLongBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesB = { 1' 2' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestLongBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestLongBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesB = { 1' 2' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestLongBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestLongBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesB = { 1' 2' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestLongBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestLongBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesB = { 1' 2' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestLongBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestLongBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesB = { 1' 2' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestLongBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestLongBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesB = { 1' 2' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestLongBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestLongBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesB = { 1' 2' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestLongBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestLongBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesB = { 1' 2' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestLongBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestLongBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesB = { 1' 2' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestLongBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestLongBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesB = { 1' 2' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestLongBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestLongBitSet.cs,TestClearSmall,The following statement contains a magic number: a.Clear(5' 9);
Magic Number,Lucene.Net.Util,TestLongBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestLongBitSet.cs,TestClearSmall,The following statement contains a magic number: a.Clear(5' 9);
Magic Number,Lucene.Net.Util,TestLongBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestLongBitSet.cs,TestClearSmall,The following statement contains a magic number: a.Clear(9' 10);
Magic Number,Lucene.Net.Util,TestLongBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestLongBitSet.cs,TestClearSmall,The following statement contains a magic number: a.Clear(9' 10);
Magic Number,Lucene.Net.Util,TestLongBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestLongBitSet.cs,TestClearSmall,The following statement contains a magic number: a.Set(9);
Magic Number,Lucene.Net.Util,TestLongBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestLongBitSet.cs,TestClearLarge,The following statement contains a magic number: int iters = AtLeast(1000);
Magic Number,Lucene.Net.Util,TestLongBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestLongBitSet.cs,TestClearLarge,The following statement contains a magic number: int sz = AtLeast(1200);
Magic Number,Lucene.Net.Util,TestLongBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestLongBitSet.cs,TestClearLarge,The following statement contains a magic number: i < sz / 2
Magic Number,Lucene.Net.Util,TestLongBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestLongBitSet.cs,TestEquals,The following statement contains a magic number: int numBits = Random.Next(2000) + 1;
Magic Number,Lucene.Net.Util,TestLongBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestLongBitSet.cs,TestEquals,The following statement contains a magic number: iter < 10 * RANDOM_MULTIPLIER
Magic Number,Lucene.Net.Util,TestLongBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestLongBitSet.cs,TestHashCodeEquals,The following statement contains a magic number: int numBits = Random.Next(2000) + 1;
Magic Number,Lucene.Net.Util,TestLongBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestLongBitSet.cs,TestHashCodeEquals,The following statement contains a magic number: iter < 10 * RANDOM_MULTIPLIER
Magic Number,Lucene.Net.Util,TestLongBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestLongBitSet.cs,TestSmallBitSets,The following statement contains a magic number: numBits < 10
Magic Number,Lucene.Net.Util,TestLongBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestLongBitSet.cs,MakeLongFixedBitSet,The following statement contains a magic number: long[] words = new long[bits2words + Random.Next(100)];
Magic Number,Lucene.Net.Util,TestLongBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestLongBitSet.cs,TestPrevSetBit,The following statement contains a magic number: CheckPrevSetBitArray(new int[] { 0' 2 }' 3);
Magic Number,Lucene.Net.Util,TestLongBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestLongBitSet.cs,TestPrevSetBit,The following statement contains a magic number: CheckPrevSetBitArray(new int[] { 0' 2 }' 3);
Magic Number,Lucene.Net.Util,TestLongBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestLongBitSet.cs,TestNextBitSet,The following statement contains a magic number: int[] setBits = new int[0 + Random.Next(1000)];
Magic Number,Lucene.Net.Util,TestLongBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestLongBitSet.cs,TestNextBitSet,The following statement contains a magic number: CheckNextSetBitArray(setBits' setBits.Length + Random.Next(10));
Magic Number,Lucene.Net.Util,TestLongBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestLongBitSet.cs,TestNextBitSet,The following statement contains a magic number: CheckNextSetBitArray(new int[0]' setBits.Length + Random.Next(10));
Magic Number,Lucene.Net.Util,TestLongBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestLongBitSet.cs,TestEnsureCapacity,The following statement contains a magic number: Int64BitSet bits = new Int64BitSet(5);
Magic Number,Lucene.Net.Util,TestLongBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestLongBitSet.cs,TestEnsureCapacity,The following statement contains a magic number: bits.Set(4);
Magic Number,Lucene.Net.Util,TestLongBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestLongBitSet.cs,TestEnsureCapacity,The following statement contains a magic number: Int64BitSet newBits = Int64BitSet.EnsureCapacity(bits' 8);
Magic Number,Lucene.Net.Util,TestLongBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestLongBitSet.cs,TestEnsureCapacity,The following statement contains a magic number: Assert.IsTrue(newBits.Get(4));
Magic Number,Lucene.Net.Util,TestLongBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestLongBitSet.cs,TestEnsureCapacity,The following statement contains a magic number: newBits = Int64BitSet.EnsureCapacity(newBits' newBits.Length - 2);
Magic Number,Lucene.Net.Util,TestLongBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestLongBitSet.cs,TestEnsureCapacity,The following statement contains a magic number: newBits = Int64BitSet.EnsureCapacity(bits' 72);
Magic Number,Lucene.Net.Util,TestLongBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestLongBitSet.cs,TestEnsureCapacity,The following statement contains a magic number: Assert.IsTrue(newBits.Get(4));
Magic Number,Lucene.Net.Util,TestMathUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestMathUtil.cs,RandomLong,The following statement contains a magic number: int m = Random.Next(3);
Magic Number,Lucene.Net.Util,TestMathUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestMathUtil.cs,TestGCD,The following statement contains a magic number: int iters = AtLeast(100);
Magic Number,Lucene.Net.Util,TestMathUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestMathUtil.cs,TestGCD2,The following statement contains a magic number: long a = 30;
Magic Number,Lucene.Net.Util,TestMathUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestMathUtil.cs,TestGCD2,The following statement contains a magic number: long b = 50;
Magic Number,Lucene.Net.Util,TestMathUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestMathUtil.cs,TestGCD2,The following statement contains a magic number: long c = 77;
Magic Number,Lucene.Net.Util,TestMathUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestMathUtil.cs,TestGCD2,The following statement contains a magic number: Assert.AreEqual(10' MathUtil.Gcd(a' b));
Magic Number,Lucene.Net.Util,TestMathUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestMathUtil.cs,TestGCD2,The following statement contains a magic number: Assert.AreEqual(10' MathUtil.Gcd(-a' b));
Magic Number,Lucene.Net.Util,TestMathUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestMathUtil.cs,TestGCD2,The following statement contains a magic number: Assert.AreEqual(10' MathUtil.Gcd(a' -b));
Magic Number,Lucene.Net.Util,TestMathUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestMathUtil.cs,TestGCD2,The following statement contains a magic number: Assert.AreEqual(10' MathUtil.Gcd(-a' -b));
Magic Number,Lucene.Net.Util,TestMathUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestMathUtil.cs,TestGCD2,The following statement contains a magic number: Assert.AreEqual(3L * (1L << 45)' MathUtil.Gcd(3L * (1L << 50)' 9L * (1L << 45)));
Magic Number,Lucene.Net.Util,TestMathUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestMathUtil.cs,TestGCD2,The following statement contains a magic number: Assert.AreEqual(3L * (1L << 45)' MathUtil.Gcd(3L * (1L << 50)' 9L * (1L << 45)));
Magic Number,Lucene.Net.Util,TestMathUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestMathUtil.cs,TestGCD2,The following statement contains a magic number: Assert.AreEqual(3L * (1L << 45)' MathUtil.Gcd(3L * (1L << 50)' 9L * (1L << 45)));
Magic Number,Lucene.Net.Util,TestMathUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestMathUtil.cs,TestGCD2,The following statement contains a magic number: Assert.AreEqual(3L * (1L << 45)' MathUtil.Gcd(3L * (1L << 50)' 9L * (1L << 45)));
Magic Number,Lucene.Net.Util,TestMathUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestMathUtil.cs,TestGCD2,The following statement contains a magic number: Assert.AreEqual(3L * (1L << 45)' MathUtil.Gcd(3L * (1L << 50)' 9L * (1L << 45)));
Magic Number,Lucene.Net.Util,TestMathUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestMathUtil.cs,TestGCD2,The following statement contains a magic number: Assert.AreEqual(3L * (1L << 45)' MathUtil.Gcd(3L * (1L << 50)' 9L * (1L << 45)));
Magic Number,Lucene.Net.Util,TestMathUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestMathUtil.cs,TestGCD2,The following statement contains a magic number: Assert.AreEqual(1L << 45' MathUtil.Gcd(1L << 45' long.MinValue));
Magic Number,Lucene.Net.Util,TestMathUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestMathUtil.cs,TestGCD2,The following statement contains a magic number: Assert.AreEqual(1L << 45' MathUtil.Gcd(1L << 45' long.MinValue));
Magic Number,Lucene.Net.Util,TestMathUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestMathUtil.cs,TestGCD2,The following statement contains a magic number: Assert.AreEqual(1' MathUtil.Gcd(60247241209L' 153092023L));
Magic Number,Lucene.Net.Util,TestMathUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestMathUtil.cs,TestGCD2,The following statement contains a magic number: Assert.AreEqual(1' MathUtil.Gcd(60247241209L' 153092023L));
Magic Number,Lucene.Net.Util,TestMathUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestMathUtil.cs,TestAcoshMethod,The following statement contains a magic number: Assert.IsTrue(double.IsNaN(MathUtil.Acosh(0.9D)));
Magic Number,Lucene.Net.Util,TestMathUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestMathUtil.cs,TestAcoshMethod,The following statement contains a magic number: Assert.IsTrue(double.IsNaN(MathUtil.Acosh(-0.9D)));
Magic Number,Lucene.Net.Util,TestMathUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestMathUtil.cs,TestAcoshMethod,The following statement contains a magic number: Assert.IsTrue(double.IsNaN(MathUtil.Acosh(-10D)));
Magic Number,Lucene.Net.Util,TestMathUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestMathUtil.cs,TestAcoshMethod,The following statement contains a magic number: double epsilon = 0.000001;
Magic Number,Lucene.Net.Util,TestMathUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestMathUtil.cs,TestAcoshMethod,The following statement contains a magic number: Assert.AreEqual(1.5667992369724109' MathUtil.Acosh(2.5)' epsilon);
Magic Number,Lucene.Net.Util,TestMathUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestMathUtil.cs,TestAcoshMethod,The following statement contains a magic number: Assert.AreEqual(1.5667992369724109' MathUtil.Acosh(2.5)' epsilon);
Magic Number,Lucene.Net.Util,TestMathUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestMathUtil.cs,TestAcoshMethod,The following statement contains a magic number: Assert.AreEqual(14.719378760739708' MathUtil.Acosh(1234567.89)' epsilon);
Magic Number,Lucene.Net.Util,TestMathUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestMathUtil.cs,TestAcoshMethod,The following statement contains a magic number: Assert.AreEqual(14.719378760739708' MathUtil.Acosh(1234567.89)' epsilon);
Magic Number,Lucene.Net.Util,TestMathUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestMathUtil.cs,TestAsinhMethod,The following statement contains a magic number: double epsilon = 0.000001;
Magic Number,Lucene.Net.Util,TestMathUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestMathUtil.cs,TestAsinhMethod,The following statement contains a magic number: Assert.AreEqual(-14.719378760740035' MathUtil.Asinh(-1234567.89)' epsilon);
Magic Number,Lucene.Net.Util,TestMathUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestMathUtil.cs,TestAsinhMethod,The following statement contains a magic number: Assert.AreEqual(-14.719378760740035' MathUtil.Asinh(-1234567.89)' epsilon);
Magic Number,Lucene.Net.Util,TestMathUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestMathUtil.cs,TestAsinhMethod,The following statement contains a magic number: Assert.AreEqual(-1.6472311463710958' MathUtil.Asinh(-2.5)' epsilon);
Magic Number,Lucene.Net.Util,TestMathUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestMathUtil.cs,TestAsinhMethod,The following statement contains a magic number: Assert.AreEqual(-1.6472311463710958' MathUtil.Asinh(-2.5)' epsilon);
Magic Number,Lucene.Net.Util,TestMathUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestMathUtil.cs,TestAsinhMethod,The following statement contains a magic number: Assert.AreEqual(-0.8813735870195429' MathUtil.Asinh(-1)' epsilon);
Magic Number,Lucene.Net.Util,TestMathUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestMathUtil.cs,TestAsinhMethod,The following statement contains a magic number: Assert.AreEqual(0.8813735870195429' MathUtil.Asinh(1)' epsilon);
Magic Number,Lucene.Net.Util,TestMathUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestMathUtil.cs,TestAsinhMethod,The following statement contains a magic number: Assert.AreEqual(1.6472311463710958' MathUtil.Asinh(2.5)' epsilon);
Magic Number,Lucene.Net.Util,TestMathUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestMathUtil.cs,TestAsinhMethod,The following statement contains a magic number: Assert.AreEqual(1.6472311463710958' MathUtil.Asinh(2.5)' epsilon);
Magic Number,Lucene.Net.Util,TestMathUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestMathUtil.cs,TestAsinhMethod,The following statement contains a magic number: Assert.AreEqual(14.719378760740035' MathUtil.Asinh(1234567.89)' epsilon);
Magic Number,Lucene.Net.Util,TestMathUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestMathUtil.cs,TestAsinhMethod,The following statement contains a magic number: Assert.AreEqual(14.719378760740035' MathUtil.Asinh(1234567.89)' epsilon);
Magic Number,Lucene.Net.Util,TestMathUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestMathUtil.cs,TestAtanhMethod,The following statement contains a magic number: Assert.IsTrue(double.IsNaN(MathUtil.Atanh(1.1D)));
Magic Number,Lucene.Net.Util,TestMathUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestMathUtil.cs,TestAtanhMethod,The following statement contains a magic number: Assert.IsTrue(double.IsNaN(MathUtil.Atanh(-1.1D)));
Magic Number,Lucene.Net.Util,TestMathUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestMathUtil.cs,TestAtanhMethod,The following statement contains a magic number: double epsilon = 0.000001;
Magic Number,Lucene.Net.Util,TestMathUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestMathUtil.cs,TestAtanhMethod,The following statement contains a magic number: Assert.AreEqual(-0.5493061443340549' MathUtil.Atanh(-0.5)' epsilon);
Magic Number,Lucene.Net.Util,TestMathUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestMathUtil.cs,TestAtanhMethod,The following statement contains a magic number: Assert.AreEqual(-0.5493061443340549' MathUtil.Atanh(-0.5)' epsilon);
Magic Number,Lucene.Net.Util,TestMathUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestMathUtil.cs,TestAtanhMethod,The following statement contains a magic number: Assert.AreEqual(0.5493061443340549' MathUtil.Atanh(0.5)' epsilon);
Magic Number,Lucene.Net.Util,TestMathUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestMathUtil.cs,TestAtanhMethod,The following statement contains a magic number: Assert.AreEqual(0.5493061443340549' MathUtil.Atanh(0.5)' epsilon);
Magic Number,Lucene.Net.Util,TestMergedIterator,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestMergedIterator.cs,TestMergeEmpty,The following statement contains a magic number: IEnumerator<int>[] itrs = new IEnumerator<int>[Random.Next(100)];
Magic Number,Lucene.Net.Util,TestMergedIterator,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestMergedIterator.cs,TestOffItrDupsRemoveDups,The following statement contains a magic number: TestCase(3' 1' true);
Magic Number,Lucene.Net.Util,TestMergedIterator,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestMergedIterator.cs,TestOnItrDupsRemoveDups,The following statement contains a magic number: TestCase(1' 3' true);
Magic Number,Lucene.Net.Util,TestMergedIterator,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestMergedIterator.cs,TestOnItrRandomDupsRemoveDups,The following statement contains a magic number: TestCase(1' -3' true);
Magic Number,Lucene.Net.Util,TestMergedIterator,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestMergedIterator.cs,TestBothDupsRemoveDups,The following statement contains a magic number: TestCase(3' 3' true);
Magic Number,Lucene.Net.Util,TestMergedIterator,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestMergedIterator.cs,TestBothDupsRemoveDups,The following statement contains a magic number: TestCase(3' 3' true);
Magic Number,Lucene.Net.Util,TestMergedIterator,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestMergedIterator.cs,TestBothDupsWithRandomDupsRemoveDups,The following statement contains a magic number: TestCase(3' -3' true);
Magic Number,Lucene.Net.Util,TestMergedIterator,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestMergedIterator.cs,TestBothDupsWithRandomDupsRemoveDups,The following statement contains a magic number: TestCase(3' -3' true);
Magic Number,Lucene.Net.Util,TestMergedIterator,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestMergedIterator.cs,TestOffItrDupsKeepDups,The following statement contains a magic number: TestCase(3' 1' false);
Magic Number,Lucene.Net.Util,TestMergedIterator,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestMergedIterator.cs,TestOnItrDupsKeepDups,The following statement contains a magic number: TestCase(1' 3' false);
Magic Number,Lucene.Net.Util,TestMergedIterator,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestMergedIterator.cs,TestOnItrRandomDupsKeepDups,The following statement contains a magic number: TestCase(1' -3' false);
Magic Number,Lucene.Net.Util,TestMergedIterator,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestMergedIterator.cs,TestBothDupsKeepDups,The following statement contains a magic number: TestCase(3' 3' false);
Magic Number,Lucene.Net.Util,TestMergedIterator,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestMergedIterator.cs,TestBothDupsKeepDups,The following statement contains a magic number: TestCase(3' 3' false);
Magic Number,Lucene.Net.Util,TestMergedIterator,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestMergedIterator.cs,TestBothDupsWithRandomDupsKeepDups,The following statement contains a magic number: TestCase(3' -3' false);
Magic Number,Lucene.Net.Util,TestMergedIterator,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestMergedIterator.cs,TestBothDupsWithRandomDupsKeepDups,The following statement contains a magic number: TestCase(3' -3' false);
Magic Number,Lucene.Net.Util,TestMergedIterator,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestMergedIterator.cs,TestCase,The following statement contains a magic number: int numLists = itrsWithVal + random.Next(1000 - itrsWithVal);
Magic Number,Lucene.Net.Util,TestMergedIterator,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestMergedIterator.cs,TestCase,The following statement contains a magic number: int start = random.Next(1000000);
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestLongConversionAndOrdering,The following statement contains a magic number: l < 100000L
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestIntConversionAndOrdering,The following statement contains a magic number: i < 100000
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestLongSpecialValues,The following statement contains a magic number: long[] vals = new long[] { long.MinValue' long.MinValue + 1' long.MinValue + 2' -5003400000000L' -4000L' -3000L' -2000L' -1000L' -1L' 0L' 1L' 10L' 300L' 50006789999999999L' long.MaxValue - 2' long.MaxValue - 1' long.MaxValue };
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestLongSpecialValues,The following statement contains a magic number: long[] vals = new long[] { long.MinValue' long.MinValue + 1' long.MinValue + 2' -5003400000000L' -4000L' -3000L' -2000L' -1000L' -1L' 0L' 1L' 10L' 300L' 50006789999999999L' long.MaxValue - 2' long.MaxValue - 1' long.MaxValue };
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestLongSpecialValues,The following statement contains a magic number: long[] vals = new long[] { long.MinValue' long.MinValue + 1' long.MinValue + 2' -5003400000000L' -4000L' -3000L' -2000L' -1000L' -1L' 0L' 1L' 10L' 300L' 50006789999999999L' long.MaxValue - 2' long.MaxValue - 1' long.MaxValue };
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestLongSpecialValues,The following statement contains a magic number: long[] vals = new long[] { long.MinValue' long.MinValue + 1' long.MinValue + 2' -5003400000000L' -4000L' -3000L' -2000L' -1000L' -1L' 0L' 1L' 10L' 300L' 50006789999999999L' long.MaxValue - 2' long.MaxValue - 1' long.MaxValue };
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestLongSpecialValues,The following statement contains a magic number: long[] vals = new long[] { long.MinValue' long.MinValue + 1' long.MinValue + 2' -5003400000000L' -4000L' -3000L' -2000L' -1000L' -1L' 0L' 1L' 10L' 300L' 50006789999999999L' long.MaxValue - 2' long.MaxValue - 1' long.MaxValue };
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestLongSpecialValues,The following statement contains a magic number: long[] vals = new long[] { long.MinValue' long.MinValue + 1' long.MinValue + 2' -5003400000000L' -4000L' -3000L' -2000L' -1000L' -1L' 0L' 1L' 10L' 300L' 50006789999999999L' long.MaxValue - 2' long.MaxValue - 1' long.MaxValue };
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestLongSpecialValues,The following statement contains a magic number: long[] vals = new long[] { long.MinValue' long.MinValue + 1' long.MinValue + 2' -5003400000000L' -4000L' -3000L' -2000L' -1000L' -1L' 0L' 1L' 10L' 300L' 50006789999999999L' long.MaxValue - 2' long.MaxValue - 1' long.MaxValue };
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestLongSpecialValues,The following statement contains a magic number: long[] vals = new long[] { long.MinValue' long.MinValue + 1' long.MinValue + 2' -5003400000000L' -4000L' -3000L' -2000L' -1000L' -1L' 0L' 1L' 10L' 300L' 50006789999999999L' long.MaxValue - 2' long.MaxValue - 1' long.MaxValue };
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestLongSpecialValues,The following statement contains a magic number: long[] vals = new long[] { long.MinValue' long.MinValue + 1' long.MinValue + 2' -5003400000000L' -4000L' -3000L' -2000L' -1000L' -1L' 0L' 1L' 10L' 300L' 50006789999999999L' long.MaxValue - 2' long.MaxValue - 1' long.MaxValue };
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestLongSpecialValues,The following statement contains a magic number: long[] vals = new long[] { long.MinValue' long.MinValue + 1' long.MinValue + 2' -5003400000000L' -4000L' -3000L' -2000L' -1000L' -1L' 0L' 1L' 10L' 300L' 50006789999999999L' long.MaxValue - 2' long.MaxValue - 1' long.MaxValue };
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestLongSpecialValues,The following statement contains a magic number: j < 64
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestIntSpecialValues,The following statement contains a magic number: int[] vals = new int[] { int.MinValue' int.MinValue + 1' int.MinValue + 2' -64765767' -4000' -3000' -2000' -1000' -1' 0' 1' 10' 300' 765878989' int.MaxValue - 2' int.MaxValue - 1' int.MaxValue };
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestIntSpecialValues,The following statement contains a magic number: int[] vals = new int[] { int.MinValue' int.MinValue + 1' int.MinValue + 2' -64765767' -4000' -3000' -2000' -1000' -1' 0' 1' 10' 300' 765878989' int.MaxValue - 2' int.MaxValue - 1' int.MaxValue };
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestIntSpecialValues,The following statement contains a magic number: int[] vals = new int[] { int.MinValue' int.MinValue + 1' int.MinValue + 2' -64765767' -4000' -3000' -2000' -1000' -1' 0' 1' 10' 300' 765878989' int.MaxValue - 2' int.MaxValue - 1' int.MaxValue };
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestIntSpecialValues,The following statement contains a magic number: int[] vals = new int[] { int.MinValue' int.MinValue + 1' int.MinValue + 2' -64765767' -4000' -3000' -2000' -1000' -1' 0' 1' 10' 300' 765878989' int.MaxValue - 2' int.MaxValue - 1' int.MaxValue };
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestIntSpecialValues,The following statement contains a magic number: int[] vals = new int[] { int.MinValue' int.MinValue + 1' int.MinValue + 2' -64765767' -4000' -3000' -2000' -1000' -1' 0' 1' 10' 300' 765878989' int.MaxValue - 2' int.MaxValue - 1' int.MaxValue };
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestIntSpecialValues,The following statement contains a magic number: int[] vals = new int[] { int.MinValue' int.MinValue + 1' int.MinValue + 2' -64765767' -4000' -3000' -2000' -1000' -1' 0' 1' 10' 300' 765878989' int.MaxValue - 2' int.MaxValue - 1' int.MaxValue };
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestIntSpecialValues,The following statement contains a magic number: int[] vals = new int[] { int.MinValue' int.MinValue + 1' int.MinValue + 2' -64765767' -4000' -3000' -2000' -1000' -1' 0' 1' 10' 300' 765878989' int.MaxValue - 2' int.MaxValue - 1' int.MaxValue };
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestIntSpecialValues,The following statement contains a magic number: int[] vals = new int[] { int.MinValue' int.MinValue + 1' int.MinValue + 2' -64765767' -4000' -3000' -2000' -1000' -1' 0' 1' 10' 300' 765878989' int.MaxValue - 2' int.MaxValue - 1' int.MaxValue };
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestIntSpecialValues,The following statement contains a magic number: int[] vals = new int[] { int.MinValue' int.MinValue + 1' int.MinValue + 2' -64765767' -4000' -3000' -2000' -1000' -1' 0' 1' 10' 300' 765878989' int.MaxValue - 2' int.MaxValue - 1' int.MaxValue };
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestIntSpecialValues,The following statement contains a magic number: int[] vals = new int[] { int.MinValue' int.MinValue + 1' int.MinValue + 2' -64765767' -4000' -3000' -2000' -1000' -1' 0' 1' 10' 300' 765878989' int.MaxValue - 2' int.MaxValue - 1' int.MaxValue };
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestIntSpecialValues,The following statement contains a magic number: j < 32
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestDoubles,The following statement contains a magic number: double[] vals = new double[] { double.NegativeInfinity' -2.3E25' -1.0E15' -1.0' -1.0E-1' -1.0E-2' -0.0' +0.0' 1.0E-2' 1.0E-1' 1.0' 1.0E15' 2.3E25' double.PositiveInfinity' double.NaN };
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestDoubles,The following statement contains a magic number: double[] vals = new double[] { double.NegativeInfinity' -2.3E25' -1.0E15' -1.0' -1.0E-1' -1.0E-2' -0.0' +0.0' 1.0E-2' 1.0E-1' 1.0' 1.0E15' 2.3E25' double.PositiveInfinity' double.NaN };
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestDoubles,The following statement contains a magic number: double[] vals = new double[] { double.NegativeInfinity' -2.3E25' -1.0E15' -1.0' -1.0E-1' -1.0E-2' -0.0' +0.0' 1.0E-2' 1.0E-1' 1.0' 1.0E15' 2.3E25' double.PositiveInfinity' double.NaN };
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestDoubles,The following statement contains a magic number: double[] vals = new double[] { double.NegativeInfinity' -2.3E25' -1.0E15' -1.0' -1.0E-1' -1.0E-2' -0.0' +0.0' 1.0E-2' 1.0E-1' 1.0' 1.0E15' 2.3E25' double.PositiveInfinity' double.NaN };
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestDoubles,The following statement contains a magic number: double[] vals = new double[] { double.NegativeInfinity' -2.3E25' -1.0E15' -1.0' -1.0E-1' -1.0E-2' -0.0' +0.0' 1.0E-2' 1.0E-1' 1.0' 1.0E15' 2.3E25' double.PositiveInfinity' double.NaN };
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestDoubles,The following statement contains a magic number: double[] vals = new double[] { double.NegativeInfinity' -2.3E25' -1.0E15' -1.0' -1.0E-1' -1.0E-2' -0.0' +0.0' 1.0E-2' 1.0E-1' 1.0' 1.0E15' 2.3E25' double.PositiveInfinity' double.NaN };
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestDoubles,The following statement contains a magic number: double[] vals = new double[] { double.NegativeInfinity' -2.3E25' -1.0E15' -1.0' -1.0E-1' -1.0E-2' -0.0' +0.0' 1.0E-2' 1.0E-1' 1.0' 1.0E15' 2.3E25' double.PositiveInfinity' double.NaN };
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestDoubles,The following statement contains a magic number: double[] vals = new double[] { double.NegativeInfinity' -2.3E25' -1.0E15' -1.0' -1.0E-1' -1.0E-2' -0.0' +0.0' 1.0E-2' 1.0E-1' 1.0' 1.0E15' 2.3E25' double.PositiveInfinity' double.NaN };
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestFloats,The following statement contains a magic number: float[] vals = new float[] { float.NegativeInfinity' -2.3E25f' -1.0E15f' -1.0f' -1.0E-1f' -1.0E-2f' -0.0f' +0.0f' 1.0E-2f' 1.0E-1f' 1.0f' 1.0E15f' 2.3E25f' float.PositiveInfinity' float.NaN };
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestFloats,The following statement contains a magic number: float[] vals = new float[] { float.NegativeInfinity' -2.3E25f' -1.0E15f' -1.0f' -1.0E-1f' -1.0E-2f' -0.0f' +0.0f' 1.0E-2f' 1.0E-1f' 1.0f' 1.0E15f' 2.3E25f' float.PositiveInfinity' float.NaN };
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestFloats,The following statement contains a magic number: float[] vals = new float[] { float.NegativeInfinity' -2.3E25f' -1.0E15f' -1.0f' -1.0E-1f' -1.0E-2f' -0.0f' +0.0f' 1.0E-2f' 1.0E-1f' 1.0f' 1.0E15f' 2.3E25f' float.PositiveInfinity' float.NaN };
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestFloats,The following statement contains a magic number: float[] vals = new float[] { float.NegativeInfinity' -2.3E25f' -1.0E15f' -1.0f' -1.0E-1f' -1.0E-2f' -0.0f' +0.0f' 1.0E-2f' 1.0E-1f' 1.0f' 1.0E15f' 2.3E25f' float.PositiveInfinity' float.NaN };
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestFloats,The following statement contains a magic number: float[] vals = new float[] { float.NegativeInfinity' -2.3E25f' -1.0E15f' -1.0f' -1.0E-1f' -1.0E-2f' -0.0f' +0.0f' 1.0E-2f' 1.0E-1f' 1.0f' 1.0E15f' 2.3E25f' float.PositiveInfinity' float.NaN };
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestFloats,The following statement contains a magic number: float[] vals = new float[] { float.NegativeInfinity' -2.3E25f' -1.0E15f' -1.0f' -1.0E-1f' -1.0E-2f' -0.0f' +0.0f' 1.0E-2f' 1.0E-1f' 1.0f' 1.0E15f' 2.3E25f' float.PositiveInfinity' float.NaN };
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestFloats,The following statement contains a magic number: float[] vals = new float[] { float.NegativeInfinity' -2.3E25f' -1.0E15f' -1.0f' -1.0E-1f' -1.0E-2f' -0.0f' +0.0f' 1.0E-2f' 1.0E-1f' 1.0f' 1.0E15f' 2.3E25f' float.PositiveInfinity' float.NaN };
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestFloats,The following statement contains a magic number: float[] vals = new float[] { float.NegativeInfinity' -2.3E25f' -1.0E15f' -1.0f' -1.0E-1f' -1.0E-2f' -0.0f' +0.0f' 1.0E-2f' 1.0E-1f' 1.0f' 1.0E15f' 2.3E25f' float.PositiveInfinity' float.NaN };
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestLongExtremeValues,The following statement contains a magic number: AssertLongRangeSplit(long.MaxValue' long.MaxValue' 2' true' Arrays.AsList(unchecked((long)0xffffffffffffffffL)' unchecked((long)0xffffffffffffffffL))' Arrays.AsList(0));
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestLongExtremeValues,The following statement contains a magic number: AssertLongRangeSplit(long.MaxValue' long.MaxValue' 4' true' Arrays.AsList(unchecked((long)0xffffffffffffffffL)' unchecked((long)0xffffffffffffffffL))' Arrays.AsList(0));
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestLongExtremeValues,The following statement contains a magic number: AssertLongRangeSplit(long.MaxValue' long.MaxValue' 6' true' Arrays.AsList(unchecked((long)0xffffffffffffffffL)' unchecked((long)0xffffffffffffffffL))' Arrays.AsList(0));
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestLongExtremeValues,The following statement contains a magic number: AssertLongRangeSplit(long.MaxValue' long.MaxValue' 8' true' Arrays.AsList(unchecked((long)0xffffffffffffffffL)' unchecked((long)0xffffffffffffffffL))' Arrays.AsList(0));
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestLongExtremeValues,The following statement contains a magic number: AssertLongRangeSplit(long.MaxValue' long.MaxValue' 64' true' Arrays.AsList(unchecked((long)0xffffffffffffffffL)' unchecked((long)0xffffffffffffffffL))' Arrays.AsList(0));
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestLongExtremeValues,The following statement contains a magic number: AssertLongRangeSplit(long.MaxValue - 0xfL' long.MaxValue' 4' true' Arrays.AsList(0xfffffffffffffffL' 0xfffffffffffffffL)' Arrays.AsList(4));
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestLongExtremeValues,The following statement contains a magic number: AssertLongRangeSplit(long.MaxValue - 0xfL' long.MaxValue' 4' true' Arrays.AsList(0xfffffffffffffffL' 0xfffffffffffffffL)' Arrays.AsList(4));
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestLongExtremeValues,The following statement contains a magic number: AssertLongRangeSplit(long.MaxValue - 0x10L' long.MaxValue' 4' true' Arrays.AsList(unchecked((long)0xffffffffffffffefL)' unchecked((long)0xffffffffffffffefL)' 0xfffffffffffffffL' 0xfffffffffffffffL)' Arrays.AsList(0' 4));
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestLongExtremeValues,The following statement contains a magic number: AssertLongRangeSplit(long.MaxValue - 0x10L' long.MaxValue' 4' true' Arrays.AsList(unchecked((long)0xffffffffffffffefL)' unchecked((long)0xffffffffffffffefL)' 0xfffffffffffffffL' 0xfffffffffffffffL)' Arrays.AsList(0' 4));
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestLongExtremeValues,The following statement contains a magic number: AssertLongRangeSplit(long.MinValue' long.MinValue' 2' true' Arrays.AsList(0x0000000000000000L' 0x0000000000000000L)' Arrays.AsList(0));
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestLongExtremeValues,The following statement contains a magic number: AssertLongRangeSplit(long.MinValue' long.MinValue' 4' true' Arrays.AsList(0x0000000000000000L' 0x0000000000000000L)' Arrays.AsList(0));
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestLongExtremeValues,The following statement contains a magic number: AssertLongRangeSplit(long.MinValue' long.MinValue' 6' true' Arrays.AsList(0x0000000000000000L' 0x0000000000000000L)' Arrays.AsList(0));
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestLongExtremeValues,The following statement contains a magic number: AssertLongRangeSplit(long.MinValue' long.MinValue' 8' true' Arrays.AsList(0x0000000000000000L' 0x0000000000000000L)' Arrays.AsList(0));
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestLongExtremeValues,The following statement contains a magic number: AssertLongRangeSplit(long.MinValue' long.MinValue' 64' true' Arrays.AsList(0x0000000000000000L' 0x0000000000000000L)' Arrays.AsList(0));
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestLongExtremeValues,The following statement contains a magic number: AssertLongRangeSplit(long.MinValue' long.MinValue + 0xfL' 4' true' Arrays.AsList(0x000000000000000L' 0x000000000000000L)' Arrays.AsList(4));
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestLongExtremeValues,The following statement contains a magic number: AssertLongRangeSplit(long.MinValue' long.MinValue + 0xfL' 4' true' Arrays.AsList(0x000000000000000L' 0x000000000000000L)' Arrays.AsList(4));
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestLongExtremeValues,The following statement contains a magic number: AssertLongRangeSplit(long.MinValue' long.MinValue + 0x10L' 4' true' Arrays.AsList(0x0000000000000010L' 0x0000000000000010L' 0x000000000000000L' 0x000000000000000L)' Arrays.AsList(0' 4));
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestLongExtremeValues,The following statement contains a magic number: AssertLongRangeSplit(long.MinValue' long.MinValue + 0x10L' 4' true' Arrays.AsList(0x0000000000000010L' 0x0000000000000010L' 0x000000000000000L' 0x000000000000000L)' Arrays.AsList(0' 4));
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestRandomSplit,The following statement contains a magic number: long num = (long)AtLeast(10);
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,ExecuteOneRandomSplit,The following statement contains a magic number: long len = random.Next(16384 * 1024);
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,ExecuteOneRandomSplit,The following statement contains a magic number: long len = random.Next(16384 * 1024);
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,ExecuteOneRandomSplit,The following statement contains a magic number: AssertLongRangeSplit(lower' lower + len' random.Next(64) + 1' true' null' null);
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,RandomLong,The following statement contains a magic number: switch (random.Next(4))              {                  case 0:                      val = 1L << (random.Next(63)); //  patterns like 0x000000100000 (-1 yields patterns like 0x0000fff)                      break;                    case 1:                      val = -1L << (random.Next(63)); // patterns like 0xfffff00000                      break;                    default:                      val = random.NextInt64();                      break;              }
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,RandomLong,The following statement contains a magic number: switch (random.Next(4))              {                  case 0:                      val = 1L << (random.Next(63)); //  patterns like 0x000000100000 (-1 yields patterns like 0x0000fff)                      break;                    case 1:                      val = -1L << (random.Next(63)); // patterns like 0xfffff00000                      break;                    default:                      val = random.NextInt64();                      break;              }
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,RandomLong,The following statement contains a magic number: switch (random.Next(4))              {                  case 0:                      val = 1L << (random.Next(63)); //  patterns like 0x000000100000 (-1 yields patterns like 0x0000fff)                      break;                    case 1:                      val = -1L << (random.Next(63)); // patterns like 0xfffff00000                      break;                    default:                      val = random.NextInt64();                      break;              }
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,RandomLong,The following statement contains a magic number: val += random.Next(5) - 2;
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,RandomLong,The following statement contains a magic number: val += random.Next(5) - 2;
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,RandomLong,The following statement contains a magic number: val += random.Next(100) - 50;
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,RandomLong,The following statement contains a magic number: val += random.Next(100) - 50;
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestSplitLongRange,The following statement contains a magic number: AssertLongRangeSplit(-5000L' 9500L' 4' true' new long[] { 0x7fffffffffffec78L' 0x7fffffffffffec7fL' unchecked((long)0x8000000000002510L)' unchecked((long)0x800000000000251cL)' 0x7fffffffffffec8L' 0x7fffffffffffecfL' 0x800000000000250L' 0x800000000000250L' 0x7fffffffffffedL' 0x7fffffffffffefL' 0x80000000000020L' 0x80000000000024L' 0x7ffffffffffffL' 0x8000000000001L }' new int[] { 0' 0' 4' 4' 8' 8' 12 });
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestSplitLongRange,The following statement contains a magic number: AssertLongRangeSplit(-5000L' 9500L' 4' true' new long[] { 0x7fffffffffffec78L' 0x7fffffffffffec7fL' unchecked((long)0x8000000000002510L)' unchecked((long)0x800000000000251cL)' 0x7fffffffffffec8L' 0x7fffffffffffecfL' 0x800000000000250L' 0x800000000000250L' 0x7fffffffffffedL' 0x7fffffffffffefL' 0x80000000000020L' 0x80000000000024L' 0x7ffffffffffffL' 0x8000000000001L }' new int[] { 0' 0' 4' 4' 8' 8' 12 });
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestSplitLongRange,The following statement contains a magic number: AssertLongRangeSplit(-5000L' 9500L' 4' true' new long[] { 0x7fffffffffffec78L' 0x7fffffffffffec7fL' unchecked((long)0x8000000000002510L)' unchecked((long)0x800000000000251cL)' 0x7fffffffffffec8L' 0x7fffffffffffecfL' 0x800000000000250L' 0x800000000000250L' 0x7fffffffffffedL' 0x7fffffffffffefL' 0x80000000000020L' 0x80000000000024L' 0x7ffffffffffffL' 0x8000000000001L }' new int[] { 0' 0' 4' 4' 8' 8' 12 });
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestSplitLongRange,The following statement contains a magic number: AssertLongRangeSplit(-5000L' 9500L' 4' true' new long[] { 0x7fffffffffffec78L' 0x7fffffffffffec7fL' unchecked((long)0x8000000000002510L)' unchecked((long)0x800000000000251cL)' 0x7fffffffffffec8L' 0x7fffffffffffecfL' 0x800000000000250L' 0x800000000000250L' 0x7fffffffffffedL' 0x7fffffffffffefL' 0x80000000000020L' 0x80000000000024L' 0x7ffffffffffffL' 0x8000000000001L }' new int[] { 0' 0' 4' 4' 8' 8' 12 });
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestSplitLongRange,The following statement contains a magic number: AssertLongRangeSplit(-5000L' 9500L' 4' true' new long[] { 0x7fffffffffffec78L' 0x7fffffffffffec7fL' unchecked((long)0x8000000000002510L)' unchecked((long)0x800000000000251cL)' 0x7fffffffffffec8L' 0x7fffffffffffecfL' 0x800000000000250L' 0x800000000000250L' 0x7fffffffffffedL' 0x7fffffffffffefL' 0x80000000000020L' 0x80000000000024L' 0x7ffffffffffffL' 0x8000000000001L }' new int[] { 0' 0' 4' 4' 8' 8' 12 });
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestSplitLongRange,The following statement contains a magic number: AssertLongRangeSplit(-5000L' 9500L' 4' true' new long[] { 0x7fffffffffffec78L' 0x7fffffffffffec7fL' unchecked((long)0x8000000000002510L)' unchecked((long)0x800000000000251cL)' 0x7fffffffffffec8L' 0x7fffffffffffecfL' 0x800000000000250L' 0x800000000000250L' 0x7fffffffffffedL' 0x7fffffffffffefL' 0x80000000000020L' 0x80000000000024L' 0x7ffffffffffffL' 0x8000000000001L }' new int[] { 0' 0' 4' 4' 8' 8' 12 });
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestSplitLongRange,The following statement contains a magic number: AssertLongRangeSplit(-5000L' 9500L' 4' true' new long[] { 0x7fffffffffffec78L' 0x7fffffffffffec7fL' unchecked((long)0x8000000000002510L)' unchecked((long)0x800000000000251cL)' 0x7fffffffffffec8L' 0x7fffffffffffecfL' 0x800000000000250L' 0x800000000000250L' 0x7fffffffffffedL' 0x7fffffffffffefL' 0x80000000000020L' 0x80000000000024L' 0x7ffffffffffffL' 0x8000000000001L }' new int[] { 0' 0' 4' 4' 8' 8' 12 });
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestSplitLongRange,The following statement contains a magic number: AssertLongRangeSplit(-5000L' 9500L' 4' true' new long[] { 0x7fffffffffffec78L' 0x7fffffffffffec7fL' unchecked((long)0x8000000000002510L)' unchecked((long)0x800000000000251cL)' 0x7fffffffffffec8L' 0x7fffffffffffecfL' 0x800000000000250L' 0x800000000000250L' 0x7fffffffffffedL' 0x7fffffffffffefL' 0x80000000000020L' 0x80000000000024L' 0x7ffffffffffffL' 0x8000000000001L }' new int[] { 0' 0' 4' 4' 8' 8' 12 });
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestSplitLongRange,The following statement contains a magic number: AssertLongRangeSplit(-5000L' 9500L' 64' true' new long[] { 0x7fffffffffffec78L' unchecked((long)0x800000000000251cL) }' new int[] { 0 });
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestSplitLongRange,The following statement contains a magic number: AssertLongRangeSplit(-5000L' 9500L' 64' true' new long[] { 0x7fffffffffffec78L' unchecked((long)0x800000000000251cL) }' new int[] { 0 });
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestSplitLongRange,The following statement contains a magic number: AssertLongRangeSplit(-5000L' 9500L' 64' true' new long[] { 0x7fffffffffffec78L' unchecked((long)0x800000000000251cL) }' new int[] { 0 });
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestSplitLongRange,The following statement contains a magic number: AssertLongRangeSplit(0L' 1024L + 63L' 4' true' new long[] { 0x800000000000040L' 0x800000000000043L' 0x80000000000000L' 0x80000000000003L }' new int[] { 4' 8 });
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestSplitLongRange,The following statement contains a magic number: AssertLongRangeSplit(0L' 1024L + 63L' 4' true' new long[] { 0x800000000000040L' 0x800000000000043L' 0x80000000000000L' 0x80000000000003L }' new int[] { 4' 8 });
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestSplitLongRange,The following statement contains a magic number: AssertLongRangeSplit(0L' 1024L + 63L' 4' true' new long[] { 0x800000000000040L' 0x800000000000043L' 0x80000000000000L' 0x80000000000003L }' new int[] { 4' 8 });
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestSplitLongRange,The following statement contains a magic number: AssertLongRangeSplit(0L' 1024L + 63L' 4' true' new long[] { 0x800000000000040L' 0x800000000000043L' 0x80000000000000L' 0x80000000000003L }' new int[] { 4' 8 });
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestSplitLongRange,The following statement contains a magic number: AssertLongRangeSplit(0L' 1024L + 63L' 4' true' new long[] { 0x800000000000040L' 0x800000000000043L' 0x80000000000000L' 0x80000000000003L }' new int[] { 4' 8 });
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestSplitLongRange,The following statement contains a magic number: AssertLongRangeSplit(long.MinValue' long.MaxValue' 8' false' new long[] { 0x00L' 0xffL }' new int[] { 56 });
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestSplitLongRange,The following statement contains a magic number: AssertLongRangeSplit(long.MinValue' long.MaxValue' 8' false' new long[] { 0x00L' 0xffL }' new int[] { 56 });
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestSplitLongRange,The following statement contains a magic number: AssertLongRangeSplit(long.MinValue' long.MaxValue' 4' false' new long[] { 0x0L' 0xfL }' new int[] { 60 });
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestSplitLongRange,The following statement contains a magic number: AssertLongRangeSplit(long.MinValue' long.MaxValue' 4' false' new long[] { 0x0L' 0xfL }' new int[] { 60 });
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestSplitLongRange,The following statement contains a magic number: AssertLongRangeSplit(long.MinValue' long.MaxValue' 2' false' new long[] { 0x0L' 0x3L }' new int[] { 62 });
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestSplitLongRange,The following statement contains a magic number: AssertLongRangeSplit(long.MinValue' long.MaxValue' 2' false' new long[] { 0x0L' 0x3L }' new int[] { 62 });
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestSplitLongRange,The following statement contains a magic number: AssertLongRangeSplit(long.MinValue' long.MaxValue' 1' false' new long[] { 0x0L' 0x1L }' new int[] { 63 });
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestSplitLongRange,The following statement contains a magic number: AssertLongRangeSplit(9500L' -5000L' 4' false' new long[] { }' new int[] { });
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestSplitLongRange,The following statement contains a magic number: AssertLongRangeSplit(9500L' -5000L' 4' false' new long[] { }' new int[] { });
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestSplitLongRange,The following statement contains a magic number: AssertLongRangeSplit(9500L' -5000L' 4' false' new long[] { }' new int[] { });
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestSplitLongRange,The following statement contains a magic number: AssertLongRangeSplit(9500L' 9500L' 4' false' new long[] { unchecked((long)0x800000000000251cL)' unchecked((long)0x800000000000251cL) }' new int[] { 0 });
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestSplitLongRange,The following statement contains a magic number: AssertLongRangeSplit(9500L' 9500L' 4' false' new long[] { unchecked((long)0x800000000000251cL)' unchecked((long)0x800000000000251cL) }' new int[] { 0 });
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestSplitLongRange,The following statement contains a magic number: AssertLongRangeSplit(9500L' 9500L' 4' false' new long[] { unchecked((long)0x800000000000251cL)' unchecked((long)0x800000000000251cL) }' new int[] { 0 });
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestSplitIntRange,The following statement contains a magic number: AssertIntRangeSplit(-5000' 9500' 4' true' Arrays.AsList(0x7fffec78' 0x7fffec7f' unchecked((int)0x80002510)' unchecked((int)0x8000251c)' 0x7fffec8' 0x7fffecf' 0x8000250' 0x8000250' 0x7fffed' 0x7fffef' 0x800020' 0x800024' 0x7ffff' 0x80001)' Arrays.AsList(0' 0' 4' 4' 8' 8' 12));
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestSplitIntRange,The following statement contains a magic number: AssertIntRangeSplit(-5000' 9500' 4' true' Arrays.AsList(0x7fffec78' 0x7fffec7f' unchecked((int)0x80002510)' unchecked((int)0x8000251c)' 0x7fffec8' 0x7fffecf' 0x8000250' 0x8000250' 0x7fffed' 0x7fffef' 0x800020' 0x800024' 0x7ffff' 0x80001)' Arrays.AsList(0' 0' 4' 4' 8' 8' 12));
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestSplitIntRange,The following statement contains a magic number: AssertIntRangeSplit(-5000' 9500' 4' true' Arrays.AsList(0x7fffec78' 0x7fffec7f' unchecked((int)0x80002510)' unchecked((int)0x8000251c)' 0x7fffec8' 0x7fffecf' 0x8000250' 0x8000250' 0x7fffed' 0x7fffef' 0x800020' 0x800024' 0x7ffff' 0x80001)' Arrays.AsList(0' 0' 4' 4' 8' 8' 12));
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestSplitIntRange,The following statement contains a magic number: AssertIntRangeSplit(-5000' 9500' 4' true' Arrays.AsList(0x7fffec78' 0x7fffec7f' unchecked((int)0x80002510)' unchecked((int)0x8000251c)' 0x7fffec8' 0x7fffecf' 0x8000250' 0x8000250' 0x7fffed' 0x7fffef' 0x800020' 0x800024' 0x7ffff' 0x80001)' Arrays.AsList(0' 0' 4' 4' 8' 8' 12));
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestSplitIntRange,The following statement contains a magic number: AssertIntRangeSplit(-5000' 9500' 4' true' Arrays.AsList(0x7fffec78' 0x7fffec7f' unchecked((int)0x80002510)' unchecked((int)0x8000251c)' 0x7fffec8' 0x7fffecf' 0x8000250' 0x8000250' 0x7fffed' 0x7fffef' 0x800020' 0x800024' 0x7ffff' 0x80001)' Arrays.AsList(0' 0' 4' 4' 8' 8' 12));
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestSplitIntRange,The following statement contains a magic number: AssertIntRangeSplit(-5000' 9500' 4' true' Arrays.AsList(0x7fffec78' 0x7fffec7f' unchecked((int)0x80002510)' unchecked((int)0x8000251c)' 0x7fffec8' 0x7fffecf' 0x8000250' 0x8000250' 0x7fffed' 0x7fffef' 0x800020' 0x800024' 0x7ffff' 0x80001)' Arrays.AsList(0' 0' 4' 4' 8' 8' 12));
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestSplitIntRange,The following statement contains a magic number: AssertIntRangeSplit(-5000' 9500' 4' true' Arrays.AsList(0x7fffec78' 0x7fffec7f' unchecked((int)0x80002510)' unchecked((int)0x8000251c)' 0x7fffec8' 0x7fffecf' 0x8000250' 0x8000250' 0x7fffed' 0x7fffef' 0x800020' 0x800024' 0x7ffff' 0x80001)' Arrays.AsList(0' 0' 4' 4' 8' 8' 12));
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestSplitIntRange,The following statement contains a magic number: AssertIntRangeSplit(-5000' 9500' 4' true' Arrays.AsList(0x7fffec78' 0x7fffec7f' unchecked((int)0x80002510)' unchecked((int)0x8000251c)' 0x7fffec8' 0x7fffecf' 0x8000250' 0x8000250' 0x7fffed' 0x7fffef' 0x800020' 0x800024' 0x7ffff' 0x80001)' Arrays.AsList(0' 0' 4' 4' 8' 8' 12));
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestSplitIntRange,The following statement contains a magic number: AssertIntRangeSplit(-5000' 9500' 32' true' Arrays.AsList(0x7fffec78' unchecked((int)0x8000251c))' Arrays.AsList(0));
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestSplitIntRange,The following statement contains a magic number: AssertIntRangeSplit(-5000' 9500' 32' true' Arrays.AsList(0x7fffec78' unchecked((int)0x8000251c))' Arrays.AsList(0));
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestSplitIntRange,The following statement contains a magic number: AssertIntRangeSplit(-5000' 9500' 32' true' Arrays.AsList(0x7fffec78' unchecked((int)0x8000251c))' Arrays.AsList(0));
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestSplitIntRange,The following statement contains a magic number: AssertIntRangeSplit(0' 1024 + 63' 4' true' Arrays.AsList(0x8000040' 0x8000043' 0x800000' 0x800003)' Arrays.AsList(4' 8));
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestSplitIntRange,The following statement contains a magic number: AssertIntRangeSplit(0' 1024 + 63' 4' true' Arrays.AsList(0x8000040' 0x8000043' 0x800000' 0x800003)' Arrays.AsList(4' 8));
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestSplitIntRange,The following statement contains a magic number: AssertIntRangeSplit(0' 1024 + 63' 4' true' Arrays.AsList(0x8000040' 0x8000043' 0x800000' 0x800003)' Arrays.AsList(4' 8));
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestSplitIntRange,The following statement contains a magic number: AssertIntRangeSplit(0' 1024 + 63' 4' true' Arrays.AsList(0x8000040' 0x8000043' 0x800000' 0x800003)' Arrays.AsList(4' 8));
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestSplitIntRange,The following statement contains a magic number: AssertIntRangeSplit(0' 1024 + 63' 4' true' Arrays.AsList(0x8000040' 0x8000043' 0x800000' 0x800003)' Arrays.AsList(4' 8));
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestSplitIntRange,The following statement contains a magic number: AssertIntRangeSplit(int.MinValue' int.MaxValue' 8' false' Arrays.AsList(0x00' 0xff)' Arrays.AsList(24));
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestSplitIntRange,The following statement contains a magic number: AssertIntRangeSplit(int.MinValue' int.MaxValue' 8' false' Arrays.AsList(0x00' 0xff)' Arrays.AsList(24));
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestSplitIntRange,The following statement contains a magic number: AssertIntRangeSplit(int.MinValue' int.MaxValue' 4' false' Arrays.AsList(0x0' 0xf)' Arrays.AsList(28));
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestSplitIntRange,The following statement contains a magic number: AssertIntRangeSplit(int.MinValue' int.MaxValue' 4' false' Arrays.AsList(0x0' 0xf)' Arrays.AsList(28));
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestSplitIntRange,The following statement contains a magic number: AssertIntRangeSplit(int.MinValue' int.MaxValue' 2' false' Arrays.AsList(0x0' 0x3)' Arrays.AsList(30));
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestSplitIntRange,The following statement contains a magic number: AssertIntRangeSplit(int.MinValue' int.MaxValue' 2' false' Arrays.AsList(0x0' 0x3)' Arrays.AsList(30));
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestSplitIntRange,The following statement contains a magic number: AssertIntRangeSplit(int.MinValue' int.MaxValue' 1' false' Arrays.AsList(0x0' 0x1)' Arrays.AsList(31));
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestSplitIntRange,The following statement contains a magic number: AssertIntRangeSplit(9500' -5000' 4' false' new List<int>()' new List<int>());
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestSplitIntRange,The following statement contains a magic number: AssertIntRangeSplit(9500' -5000' 4' false' new List<int>()' new List<int>());
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestSplitIntRange,The following statement contains a magic number: AssertIntRangeSplit(9500' -5000' 4' false' new List<int>()' new List<int>());
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestSplitIntRange,The following statement contains a magic number: AssertIntRangeSplit(9500' 9500' 4' false' Arrays.AsList(unchecked((int)0x8000251c)' unchecked((int)0x8000251c))' Arrays.AsList(0));
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestSplitIntRange,The following statement contains a magic number: AssertIntRangeSplit(9500' 9500' 4' false' Arrays.AsList(unchecked((int)0x8000251c)' unchecked((int)0x8000251c))' Arrays.AsList(0));
Magic Number,Lucene.Net.Util,TestNumericUtils,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestNumericUtils.cs,TestSplitIntRange,The following statement contains a magic number: AssertIntRangeSplit(9500' 9500' 4' false' Arrays.AsList(unchecked((int)0x8000251c)' unchecked((int)0x8000251c))' Arrays.AsList(0));
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,DoPrevSetBit,The following statement contains a magic number: int aa = a.Length + Random.Next(100);
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,DoPrevSetBitLong,The following statement contains a magic number: int aa = a.Length + Random.Next(100);
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,DoIterate,The following statement contains a magic number: mode == 2
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,DoRandomSets,The following statement contains a magic number: fromIndex = Random.Next(sz + 80);
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,DoRandomSets,The following statement contains a magic number: fromIndex = Random.Next(sz + 80);
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,DoRandomSets,The following statement contains a magic number: fromIndex = Random.Next(sz + 80);
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestSmall,The following statement contains a magic number: DoRandomSets(AtLeast(1200)' AtLeast(1000)' 1);
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestSmall,The following statement contains a magic number: DoRandomSets(AtLeast(1200)' AtLeast(1000)' 1);
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestSmall,The following statement contains a magic number: DoRandomSets(AtLeast(1200)' AtLeast(1000)' 2);
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestSmall,The following statement contains a magic number: DoRandomSets(AtLeast(1200)' AtLeast(1000)' 2);
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestSmall,The following statement contains a magic number: DoRandomSets(AtLeast(1200)' AtLeast(1000)' 2);
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestClearSmall,The following statement contains a magic number: OpenBitSet a = new OpenBitSet(30);
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesA = { 1' 2' 5' 7' 8' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesA = { 1' 2' 5' 7' 8' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesA = { 1' 2' 5' 7' 8' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesA = { 1' 2' 5' 7' 8' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesA = { 1' 2' 5' 7' 8' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesA = { 1' 2' 5' 7' 8' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesA = { 1' 2' 5' 7' 8' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesA = { 1' 2' 5' 7' 8' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesA = { 1' 2' 5' 7' 8' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesA = { 1' 2' 5' 7' 8' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesA = { 1' 2' 5' 7' 8' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesA = { 1' 2' 5' 7' 8' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesA = { 1' 2' 5' 7' 8' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesA = { 1' 2' 5' 7' 8' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestClearSmall,The following statement contains a magic number: OpenBitSet b = new OpenBitSet(30);
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesB = { 1' 2' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesB = { 1' 2' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesB = { 1' 2' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesB = { 1' 2' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesB = { 1' 2' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesB = { 1' 2' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesB = { 1' 2' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesB = { 1' 2' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesB = { 1' 2' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesB = { 1' 2' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestClearSmall,The following statement contains a magic number: int[] onesB = { 1' 2' 9' 12' 16' 18' 19' 21' 24' 27' 28' 29 };
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestClearSmall,The following statement contains a magic number: a.Clear(5' 9);
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestClearSmall,The following statement contains a magic number: a.Clear(5' 9);
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestClearSmall,The following statement contains a magic number: a.Clear(9' 10);
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestClearSmall,The following statement contains a magic number: a.Clear(9' 10);
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestClearSmall,The following statement contains a magic number: a.Set(9);
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestClearLarge,The following statement contains a magic number: int iters = AtLeast(1000);
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestClearLarge,The following statement contains a magic number: int sz = AtLeast(1200);
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestClearLarge,The following statement contains a magic number: i < sz / 2
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestEquals,The following statement contains a magic number: OpenBitSet b1 = new OpenBitSet(1111);
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestEquals,The following statement contains a magic number: OpenBitSet b2 = new OpenBitSet(2222);
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestEquals,The following statement contains a magic number: b1.Set(10);
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestEquals,The following statement contains a magic number: b2.Set(10);
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestEquals,The following statement contains a magic number: b2.Set(2221);
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestEquals,The following statement contains a magic number: b1.Set(2221);
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestHashCodeEquals,The following statement contains a magic number: OpenBitSet bs1 = new OpenBitSet(200);
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestHashCodeEquals,The following statement contains a magic number: OpenBitSet bs2 = new OpenBitSet(64);
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestHashCodeEquals,The following statement contains a magic number: bs1.Set(3);
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestHashCodeEquals,The following statement contains a magic number: bs2.Set(3);
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestPrevSetBit,The following statement contains a magic number: CheckPrevSetBitArray(new int[] { 0' 2 });
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestEnsureCapacity,The following statement contains a magic number: int bit = Random.Next(100) + 10;
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestEnsureCapacity,The following statement contains a magic number: int bit = Random.Next(100) + 10;
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestEnsureCapacity,The following statement contains a magic number: bits.EnsureCapacity(3);
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestEnsureCapacity,The following statement contains a magic number: bits.FastSet(3);
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestEnsureCapacity,The following statement contains a magic number: Assert.IsTrue(bits.FastGet(3));
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestEnsureCapacity,The following statement contains a magic number: int numWords = Random.Next(10) + 2;
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestEnsureCapacity,The following statement contains a magic number: int numWords = Random.Next(10) + 2;
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestEnsureCapacity,The following statement contains a magic number: bit = TestUtil.NextInt32(Random' 127' (numWords << 6) - 1);
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestEnsureCapacity,The following statement contains a magic number: bit = TestUtil.NextInt32(Random' 127' (numWords << 6) - 1);
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestEnsureCapacity,The following statement contains a magic number: bits.EnsureCapacityWords(2);
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestEnsureCapacity,The following statement contains a magic number: bits.FastSet(3);
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestEnsureCapacity,The following statement contains a magic number: Assert.IsTrue(bits.FastGet(3));
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestXorWithDifferentCapacity,The following statement contains a magic number: OpenBitSet smaller = new OpenBitSet(2);
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestXorWithDifferentCapacity,The following statement contains a magic number: OpenBitSet larger = new OpenBitSet(64 * 10000);
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestXorWithDifferentCapacity,The following statement contains a magic number: OpenBitSet larger = new OpenBitSet(64 * 10000);
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestXorWithDifferentCapacity,The following statement contains a magic number: larger.Set(64 * 10000 - 1);
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestXorWithDifferentCapacity,The following statement contains a magic number: larger.Set(64 * 10000 - 1);
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestXorWithDifferentCapacity,The following statement contains a magic number: larger.Set(65);
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestXorWithDifferentCapacity,The following statement contains a magic number: larger.Set(3);
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestXorWithDifferentCapacity,The following statement contains a magic number: smaller.Set(3);
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestXorWithDifferentCapacity,The following statement contains a magic number: smaller.Set(66);
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestXorWithDifferentCapacity,The following statement contains a magic number: Assert.IsTrue(smaller.Get(64 * 10000 - 1));
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestXorWithDifferentCapacity,The following statement contains a magic number: Assert.IsTrue(smaller.Get(64 * 10000 - 1));
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestXorWithDifferentCapacity,The following statement contains a magic number: Assert.IsTrue(smaller.Get(65));
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestXorWithDifferentCapacity,The following statement contains a magic number: Assert.IsFalse(smaller.Get(3));
Magic Number,Lucene.Net.Util,TestOpenBitSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestOpenBitSet.cs,TestXorWithDifferentCapacity,The following statement contains a magic number: Assert.IsTrue(smaller.Get(66));
Magic Number,Lucene.Net.Util,TestPagedBytes,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPagedBytes.cs,TestDataInputOutput,The following statement contains a magic number: int blockBits = TestUtil.NextInt32(random' 1' 20);
Magic Number,Lucene.Net.Util,TestPagedBytes,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPagedBytes.cs,TestDataInputOutput,The following statement contains a magic number: int numBytes = TestUtil.NextInt32(LuceneTestCase.Random' 2' 10000000);
Magic Number,Lucene.Net.Util,TestPagedBytes,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPagedBytes.cs,TestDataInputOutput,The following statement contains a magic number: int numBytes = TestUtil.NextInt32(LuceneTestCase.Random' 2' 10000000);
Magic Number,Lucene.Net.Util,TestPagedBytes,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPagedBytes.cs,TestDataInputOutput,The following statement contains a magic number: LuceneTestCase.Random.Next(10) == 7
Magic Number,Lucene.Net.Util,TestPagedBytes,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPagedBytes.cs,TestDataInputOutput,The following statement contains a magic number: LuceneTestCase.Random.Next(10) == 7
Magic Number,Lucene.Net.Util,TestPagedBytes,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPagedBytes.cs,TestDataInputOutput,The following statement contains a magic number: LuceneTestCase.Random.Next(10) == 7
Magic Number,Lucene.Net.Util,TestPagedBytes,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPagedBytes.cs,TestDataInputOutput,The following statement contains a magic number: LuceneTestCase.Random.Next(10) == 7
Magic Number,Lucene.Net.Util,TestPagedBytes,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPagedBytes.cs,TestDataInputOutput,The following statement contains a magic number: iter2 < 100
Magic Number,Lucene.Net.Util,TestPagedBytes,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPagedBytes.cs,TestDataInputOutput,The following statement contains a magic number: iter < 5 * RANDOM_MULTIPLIER
Magic Number,Lucene.Net.Util,TestPagedBytes,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPagedBytes.cs,TestDataInputOutput2,The following statement contains a magic number: int blockBits = TestUtil.NextInt32(random' 1' 20);
Magic Number,Lucene.Net.Util,TestPagedBytes,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPagedBytes.cs,TestDataInputOutput2,The following statement contains a magic number: int numBytes = LuceneTestCase.Random.Next(10000000);
Magic Number,Lucene.Net.Util,TestPagedBytes,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPagedBytes.cs,TestDataInputOutput2,The following statement contains a magic number: LuceneTestCase.Random.Next(10) == 7
Magic Number,Lucene.Net.Util,TestPagedBytes,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPagedBytes.cs,TestDataInputOutput2,The following statement contains a magic number: LuceneTestCase.Random.Next(10) == 7
Magic Number,Lucene.Net.Util,TestPagedBytes,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPagedBytes.cs,TestDataInputOutput2,The following statement contains a magic number: LuceneTestCase.Random.Next(10) == 7
Magic Number,Lucene.Net.Util,TestPagedBytes,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPagedBytes.cs,TestDataInputOutput2,The following statement contains a magic number: LuceneTestCase.Random.Next(10) == 7
Magic Number,Lucene.Net.Util,TestPagedBytes,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPagedBytes.cs,TestDataInputOutput2,The following statement contains a magic number: iter2 < 100
Magic Number,Lucene.Net.Util,TestPagedBytes,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPagedBytes.cs,TestDataInputOutput2,The following statement contains a magic number: iter < 5 * RANDOM_MULTIPLIER
Magic Number,Lucene.Net.Util,TestPagedBytes,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPagedBytes.cs,TestOverflow,The following statement contains a magic number: int blockBits = TestUtil.NextInt32(Random' 14' 28);
Magic Number,Lucene.Net.Util,TestPagedBytes,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPagedBytes.cs,TestOverflow,The following statement contains a magic number: int blockBits = TestUtil.NextInt32(Random' 14' 28);
Magic Number,Lucene.Net.Util,TestPagedBytes,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPagedBytes.cs,TestOverflow,The following statement contains a magic number: var arr = new byte[TestUtil.NextInt32(Random' blockSize / 2' blockSize * 2)];
Magic Number,Lucene.Net.Util,TestPagedBytes,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPagedBytes.cs,TestOverflow,The following statement contains a magic number: var arr = new byte[TestUtil.NextInt32(Random' blockSize / 2' blockSize * 2)];
Magic Number,Lucene.Net.Util,TestPagedBytes,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPagedBytes.cs,TestOverflow,The following statement contains a magic number: long numBytes = (1L << 31) + TestUtil.NextInt32(Random' 1' blockSize * 3);
Magic Number,Lucene.Net.Util,TestPagedBytes,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPagedBytes.cs,TestOverflow,The following statement contains a magic number: long numBytes = (1L << 31) + TestUtil.NextInt32(Random' 1' blockSize * 3);
Magic Number,Lucene.Net.Util,TestPagedBytes,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPagedBytes.cs,TestOverflow,The following statement contains a magic number: new long[] { 0L' int.MaxValue' numBytes - 1' TestUtil.NextInt64(Random' 1' numBytes - 2) }
Magic Number,Lucene.Net.Util,TestPForDeltaDocIdSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPForDeltaDocIdSet.cs,CopyOf,The following statement contains a magic number: PForDeltaDocIdSet.Builder builder = (new PForDeltaDocIdSet.Builder()).SetIndexInterval(TestUtil.NextInt32(Random' 1' 20));
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestPQ,The following statement contains a magic number: TestPQ(AtLeast(10000)' Random);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestClear,The following statement contains a magic number: PriorityQueue<int?> pq = new IntegerQueue(3);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestClear,The following statement contains a magic number: pq.Add(2);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestClear,The following statement contains a magic number: pq.Add(3);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestClear,The following statement contains a magic number: Assert.AreEqual(3' pq.Count);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestFixedSize,The following statement contains a magic number: PriorityQueue<int?> pq = new IntegerQueue(3);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestFixedSize,The following statement contains a magic number: pq.InsertWithOverflow(2);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestFixedSize,The following statement contains a magic number: pq.InsertWithOverflow(3);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestFixedSize,The following statement contains a magic number: pq.InsertWithOverflow(5);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestFixedSize,The following statement contains a magic number: pq.InsertWithOverflow(7);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestFixedSize,The following statement contains a magic number: assertEquals(3' pq.Count);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestFixedSize,The following statement contains a magic number: assertEquals((int?)3' pq.Top);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestInsertWithOverflow,The following statement contains a magic number: int size = 4;
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestInsertWithOverflow,The following statement contains a magic number: int? i1 = 2;
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestInsertWithOverflow,The following statement contains a magic number: int? i2 = 3;
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestInsertWithOverflow,The following statement contains a magic number: int? i4 = 5;
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestInsertWithOverflow,The following statement contains a magic number: int? i5 = 7;
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestInsertWithOverflow,The following statement contains a magic number: Assert.AreEqual((int?)2' pq.Top);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestInsertWithOverflow,The following statement contains a magic number: Assert.AreEqual((int?)3' pq.Top);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestInsertWithOverflow,The following statement contains a magic number: Assert.AreEqual((int?)5' pq.Top);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestInsertWithOverflow,The following statement contains a magic number: Assert.AreEqual((int?)7' pq.Top);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestMaxSizeBounds,The following statement contains a magic number: maxSize = 12345;
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestMaxSizeBounds,The following statement contains a magic number: maxSize = -3;
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestPrepopulation,The following statement contains a magic number: int maxSize = 10;
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestPrepopulation,The following statement contains a magic number: Assert.AreEqual(pq.Count' 10);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestAdd,The following statement contains a magic number: int maxSize = 10;
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestAdd,The following statement contains a magic number: AddAndTest(pq' 5' 5' 1);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestAdd,The following statement contains a magic number: AddAndTest(pq' 5' 5' 1);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestAdd,The following statement contains a magic number: AddAndTest(pq' 1' 1' 2);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestAdd,The following statement contains a magic number: AddAndTest(pq' 3' 1' 3);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestAdd,The following statement contains a magic number: AddAndTest(pq' 3' 1' 3);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestAdd,The following statement contains a magic number: AddAndTest(pq' -1' -1' 4);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestAdd,The following statement contains a magic number: AddAndTest(pq' -111111' -111111' 5);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestAdd,The following statement contains a magic number: AddAndTest(pq' -111111' -111111' 5);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestAdd,The following statement contains a magic number: AddAndTest(pq' -111111' -111111' 5);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestAdd,The following statement contains a magic number: AddAndTest(pq' -111111' -111111' 1);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestAdd,The following statement contains a magic number: AddAndTest(pq' -111111' -111111' 1);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestAdd,The following statement contains a magic number: AddAndTest(pq' -1' -111111' 2);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestAdd,The following statement contains a magic number: AddAndTest(pq' -1' -111111' 2);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestAdd,The following statement contains a magic number: AddAndTest(pq' 1' -111111' 3);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestAdd,The following statement contains a magic number: AddAndTest(pq' 1' -111111' 3);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestAdd,The following statement contains a magic number: AddAndTest(pq' 3' -111111' 4);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestAdd,The following statement contains a magic number: AddAndTest(pq' 3' -111111' 4);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestAdd,The following statement contains a magic number: AddAndTest(pq' 3' -111111' 4);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestAdd,The following statement contains a magic number: AddAndTest(pq' 5' -111111' 5);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestAdd,The following statement contains a magic number: AddAndTest(pq' 5' -111111' 5);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestAdd,The following statement contains a magic number: AddAndTest(pq' 5' -111111' 5);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestAdd,The following statement contains a magic number: AddAndTest(pq' 5' 5' 1);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestAdd,The following statement contains a magic number: AddAndTest(pq' 5' 5' 1);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestAdd,The following statement contains a magic number: AddAndTest(pq' 3' 3' 2);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestAdd,The following statement contains a magic number: AddAndTest(pq' 3' 3' 2);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestAdd,The following statement contains a magic number: AddAndTest(pq' 3' 3' 2);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestAdd,The following statement contains a magic number: AddAndTest(pq' 1' 1' 3);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestAdd,The following statement contains a magic number: AddAndTest(pq' -1' -1' 4);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestAdd,The following statement contains a magic number: AddAndTest(pq' -111111' -111111' 5);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestAdd,The following statement contains a magic number: AddAndTest(pq' -111111' -111111' 5);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestAdd,The following statement contains a magic number: AddAndTest(pq' -111111' -111111' 5);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestDuplicates,The following statement contains a magic number: int maxSize = 10;
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestDuplicates,The following statement contains a magic number: pq.Add(3);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestDuplicates,The following statement contains a magic number: pq.Add(3);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestDuplicates,The following statement contains a magic number: Assert.AreEqual(pq.Count' 2);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestDuplicates,The following statement contains a magic number: pq.Add(3);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestDuplicates,The following statement contains a magic number: Assert.AreEqual(pq.Count' 3);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestDuplicates,The following statement contains a magic number: pq.Add(17);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestDuplicates,The following statement contains a magic number: pq.Add(17);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestDuplicates,The following statement contains a magic number: pq.Add(17);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestDuplicates,The following statement contains a magic number: pq.Add(17);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestDuplicates,The following statement contains a magic number: Assert.AreEqual(pq.Count' 7);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestPop,The following statement contains a magic number: int maxSize = 10;
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestPop,The following statement contains a magic number: pq.Add(7);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestPop,The following statement contains a magic number: pq.Add(20);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestPop,The following statement contains a magic number: pq.Add(15);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestPop,The following statement contains a magic number: pq.Add(4);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestPop,The following statement contains a magic number: pq.Add(12);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestPop,The following statement contains a magic number: pq.Add(1000);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestPop,The following statement contains a magic number: pq.Add(-3);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestPop,The following statement contains a magic number: Assert.AreEqual(pq.Count' 7);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestPop,The following statement contains a magic number: pq.Add(20);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestPop,The following statement contains a magic number: pq.Add(15);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestPop,The following statement contains a magic number: pq.Add(4);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestPop,The following statement contains a magic number: Assert.AreEqual(pq.Count' 2);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestPop,The following statement contains a magic number: pq.Add(12);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestPop,The following statement contains a magic number: pq.Add(1000);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestPop,The following statement contains a magic number: pq.Add(-3);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestPop,The following statement contains a magic number: Assert.AreEqual(pq.Count' 3);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestUpdateTop,The following statement contains a magic number: int maxSize = 10;
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestUpdateTop,The following statement contains a magic number: pq.Add(new MyType(20));
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestUpdateTop,The following statement contains a magic number: pq.Add(new MyType(15));
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestUpdateTop,The following statement contains a magic number: pq.Add(new MyType(4));
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestUpdateTop,The following statement contains a magic number: pq.Add(new MyType(12));
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestUpdateTop,The following statement contains a magic number: pq.Add(new MyType(1000));
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestUpdateTop,The following statement contains a magic number: pq.Add(new MyType(-300));
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestUpdateTop,The following statement contains a magic number: Assert.AreEqual(pq.Top.Field' -300);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestUpdateTop,The following statement contains a magic number: topElement.Field = 25;
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestUpdateTop,The following statement contains a magic number: topElement.Field = 678;
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestOverflow,The following statement contains a magic number: int maxSize = 10;
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestOverflow,The following statement contains a magic number: pq.Add(3);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestOverflow,The following statement contains a magic number: maxSize = 5;
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestOverflow,The following statement contains a magic number: pq.Add(4);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestOverflow,The following statement contains a magic number: pq.Add(10);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestOverflow,The following statement contains a magic number: pq.Add(666);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestInsertWithOverflowDoesNotOverflow,The following statement contains a magic number: PriorityQueue<int?> pq = new IntegerQueue(3);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestInsertWithOverflowDoesNotOverflow,The following statement contains a magic number: pq.InsertWithOverflow(2);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestInsertWithOverflowDoesNotOverflow,The following statement contains a magic number: pq.InsertWithOverflow(3);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestInsertWithOverflowDoesNotOverflow,The following statement contains a magic number: pq.InsertWithOverflow(5);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestInsertWithOverflowDoesNotOverflow,The following statement contains a magic number: pq.InsertWithOverflow(7);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestInsertWithOverflowDoesNotOverflow,The following statement contains a magic number: Assert.AreEqual(3' pq.Count);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestInsertWithOverflowDoesNotOverflow,The following statement contains a magic number: Assert.AreEqual((int?)3' pq.Top);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestPersistence,The following statement contains a magic number: int maxSize = AtLeast(100000);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestStress,The following statement contains a magic number: int atLeast = 1000000;
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestStress,The following statement contains a magic number: pq.Count > atLeast/2
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestStress,The following statement contains a magic number: pq.Count < (atLeast*3)/4
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestStress,The following statement contains a magic number: pq.Count < (atLeast*3)/4
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestStress,The following statement contains a magic number: 2 * i < maxSize
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestStress,The following statement contains a magic number: Assert.AreEqual(pq.Count' (maxSize + 1) / 2);
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,TestStress,The following statement contains a magic number: 2 * i < maxSize
Magic Number,Lucene.Net.Util,TestPriorityQueue,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestPriorityQueue.cs,Benchmarks,The following statement contains a magic number: int maxSize = AtLeast(100000);
Magic Number,Lucene.Net.Util,TestQueryBuilder,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestQueryBuilder.cs,TestMinShouldMatch,The following statement contains a magic number: Assert.AreEqual(expected' builder.CreateMinShouldMatchQuery("field"' "one two three four"' 0.1f));
Magic Number,Lucene.Net.Util,TestQueryBuilder,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestQueryBuilder.cs,TestMinShouldMatch,The following statement contains a magic number: Assert.AreEqual(expected' builder.CreateMinShouldMatchQuery("field"' "one two three four"' 0.24f));
Magic Number,Lucene.Net.Util,TestQueryBuilder,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestQueryBuilder.cs,TestMinShouldMatch,The following statement contains a magic number: Assert.AreEqual(expected' builder.CreateMinShouldMatchQuery("field"' "one two three four"' 0.25f));
Magic Number,Lucene.Net.Util,TestQueryBuilder,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestQueryBuilder.cs,TestMinShouldMatch,The following statement contains a magic number: Assert.AreEqual(expected' builder.CreateMinShouldMatchQuery("field"' "one two three four"' 0.49f));
Magic Number,Lucene.Net.Util,TestQueryBuilder,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestQueryBuilder.cs,TestMinShouldMatch,The following statement contains a magic number: expected.MinimumNumberShouldMatch = 2;
Magic Number,Lucene.Net.Util,TestQueryBuilder,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestQueryBuilder.cs,TestMinShouldMatch,The following statement contains a magic number: Assert.AreEqual(expected' builder.CreateMinShouldMatchQuery("field"' "one two three four"' 0.5f));
Magic Number,Lucene.Net.Util,TestQueryBuilder,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestQueryBuilder.cs,TestMinShouldMatch,The following statement contains a magic number: Assert.AreEqual(expected' builder.CreateMinShouldMatchQuery("field"' "one two three four"' 0.74f));
Magic Number,Lucene.Net.Util,TestQueryBuilder,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestQueryBuilder.cs,TestMinShouldMatch,The following statement contains a magic number: expected.MinimumNumberShouldMatch = 3;
Magic Number,Lucene.Net.Util,TestQueryBuilder,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestQueryBuilder.cs,TestMinShouldMatch,The following statement contains a magic number: Assert.AreEqual(expected' builder.CreateMinShouldMatchQuery("field"' "one two three four"' 0.75f));
Magic Number,Lucene.Net.Util,TestQueryBuilder,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestQueryBuilder.cs,TestMinShouldMatch,The following statement contains a magic number: Assert.AreEqual(expected' builder.CreateMinShouldMatchQuery("field"' "one two three four"' 0.99f));
Magic Number,Lucene.Net.Util,TestQueryBuilder,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestQueryBuilder.cs,TestPhraseQueryPositionIncrements,The following statement contains a magic number: expected.Add(new Term("field"' "2")' 2);
Magic Number,Lucene.Net.Util,TestQueryBuilder,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestQueryBuilder.cs,TestCJKSloppyPhrase,The following statement contains a magic number: expected.Slop = 3;
Magic Number,Lucene.Net.Util,TestQueryBuilder,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestQueryBuilder.cs,TestCJKSloppyPhrase,The following statement contains a magic number: Assert.AreEqual(expected' builder.CreatePhraseQuery("field"' "中国"' 3));
Magic Number,Lucene.Net.Util,TestQueryBuilder,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestQueryBuilder.cs,TestCJKSynonymsPhrase,The following statement contains a magic number: expected.Slop = 3;
Magic Number,Lucene.Net.Util,TestQueryBuilder,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestQueryBuilder.cs,TestCJKSynonymsPhrase,The following statement contains a magic number: Assert.AreEqual(expected' builder.CreatePhraseQuery("field"' "中国"' 3));
Magic Number,Lucene.Net.Util,TestRamUsageEstimator,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestRamUsageEstimator.cs,TestSanity,The following statement contains a magic number: holder.Holder_Renamed = new Holder("string2"' 5000L);
Magic Number,Lucene.Net.Util,TestRamUsageEstimator,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestRamUsageEstimator.cs,TestStaticOverloads,The following statement contains a magic number: sbyte[] array = new sbyte[rnd.Next(1024)];
Magic Number,Lucene.Net.Util,TestRamUsageEstimator,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestRamUsageEstimator.cs,TestStaticOverloads,The following statement contains a magic number: bool[] array = new bool[rnd.Next(1024)];
Magic Number,Lucene.Net.Util,TestRamUsageEstimator,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestRamUsageEstimator.cs,TestStaticOverloads,The following statement contains a magic number: char[] array = new char[rnd.Next(1024)];
Magic Number,Lucene.Net.Util,TestRamUsageEstimator,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestRamUsageEstimator.cs,TestStaticOverloads,The following statement contains a magic number: short[] array = new short[rnd.Next(1024)];
Magic Number,Lucene.Net.Util,TestRamUsageEstimator,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestRamUsageEstimator.cs,TestStaticOverloads,The following statement contains a magic number: int[] array = new int[rnd.Next(1024)];
Magic Number,Lucene.Net.Util,TestRamUsageEstimator,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestRamUsageEstimator.cs,TestStaticOverloads,The following statement contains a magic number: float[] array = new float[rnd.Next(1024)];
Magic Number,Lucene.Net.Util,TestRamUsageEstimator,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestRamUsageEstimator.cs,TestStaticOverloads,The following statement contains a magic number: long[] array = new long[rnd.Next(1024)];
Magic Number,Lucene.Net.Util,TestRamUsageEstimator,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestRamUsageEstimator.cs,TestStaticOverloads,The following statement contains a magic number: double[] array = new double[rnd.Next(1024)];
Magic Number,Lucene.Net.Util,TestRamUsageEstimator,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestRamUsageEstimator.cs,TestReferenceSize,The following statement contains a magic number: Assert.IsTrue(RamUsageEstimator.NUM_BYTES_OBJECT_REF == 4 || RamUsageEstimator.NUM_BYTES_OBJECT_REF == 8);
Magic Number,Lucene.Net.Util,TestRamUsageEstimator,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestRamUsageEstimator.cs,TestReferenceSize,The following statement contains a magic number: Assert.IsTrue(RamUsageEstimator.NUM_BYTES_OBJECT_REF == 4 || RamUsageEstimator.NUM_BYTES_OBJECT_REF == 8);
Magic Number,Lucene.Net.Util,TestRamUsageEstimator,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestRamUsageEstimator.cs,TestReferenceSize,The following statement contains a magic number: assertEquals("For 32bit JVMs' reference size must always be 4?"' 4' RamUsageEstimator.NUM_BYTES_OBJECT_REF);
Magic Number,Lucene.Net.Util,TestRecyclingByteBlockAllocator,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestRecyclingByteBlockAllocator.cs,NewAllocator,The following statement contains a magic number: return new RecyclingByteBlockAllocator(1 << (2 + Random.Next(15))' Random.Next(97)' Util.Counter.NewCounter());
Magic Number,Lucene.Net.Util,TestRecyclingByteBlockAllocator,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestRecyclingByteBlockAllocator.cs,NewAllocator,The following statement contains a magic number: return new RecyclingByteBlockAllocator(1 << (2 + Random.Next(15))' Random.Next(97)' Util.Counter.NewCounter());
Magic Number,Lucene.Net.Util,TestRecyclingByteBlockAllocator,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestRecyclingByteBlockAllocator.cs,NewAllocator,The following statement contains a magic number: return new RecyclingByteBlockAllocator(1 << (2 + Random.Next(15))' Random.Next(97)' Util.Counter.NewCounter());
Magic Number,Lucene.Net.Util,TestRecyclingByteBlockAllocator,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestRecyclingByteBlockAllocator.cs,TestAllocate,The following statement contains a magic number: int num = AtLeast(97);
Magic Number,Lucene.Net.Util,TestRecyclingByteBlockAllocator,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestRecyclingByteBlockAllocator.cs,TestAllocate,The following statement contains a magic number: Assert.AreEqual(size * (i + 2)' allocator.BytesUsed);
Magic Number,Lucene.Net.Util,TestRecyclingByteBlockAllocator,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestRecyclingByteBlockAllocator.cs,TestAllocateAndRecycle,The following statement contains a magic number: int numIters = AtLeast(97);
Magic Number,Lucene.Net.Util,TestRecyclingByteBlockAllocator,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestRecyclingByteBlockAllocator.cs,TestAllocateAndRecycle,The following statement contains a magic number: int num = 1 + Random.Next(39);
Magic Number,Lucene.Net.Util,TestRecyclingByteBlockAllocator,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestRecyclingByteBlockAllocator.cs,TestAllocateAndFree,The following statement contains a magic number: int numIters = AtLeast(97);
Magic Number,Lucene.Net.Util,TestRecyclingByteBlockAllocator,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestRecyclingByteBlockAllocator.cs,TestAllocateAndFree,The following statement contains a magic number: int num = 1 + Random.Next(39);
Magic Number,Lucene.Net.Util,TestRecyclingByteBlockAllocator,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestRecyclingByteBlockAllocator.cs,TestAllocateAndFree,The following statement contains a magic number: int freeBlocks = allocator.FreeBlocks(Random.Next(7 + allocator.MaxBufferedBlocks));
Magic Number,Lucene.Net.Util,TestRecyclingIntBlockAllocator,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestRecyclingIntBlockAllocator.cs,NewAllocator,The following statement contains a magic number: return new RecyclingInt32BlockAllocator(1 << (2 + Random.Next(15))' Random.Next(97)' Util.Counter.NewCounter());
Magic Number,Lucene.Net.Util,TestRecyclingIntBlockAllocator,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestRecyclingIntBlockAllocator.cs,NewAllocator,The following statement contains a magic number: return new RecyclingInt32BlockAllocator(1 << (2 + Random.Next(15))' Random.Next(97)' Util.Counter.NewCounter());
Magic Number,Lucene.Net.Util,TestRecyclingIntBlockAllocator,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestRecyclingIntBlockAllocator.cs,NewAllocator,The following statement contains a magic number: return new RecyclingInt32BlockAllocator(1 << (2 + Random.Next(15))' Random.Next(97)' Util.Counter.NewCounter());
Magic Number,Lucene.Net.Util,TestRecyclingIntBlockAllocator,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestRecyclingIntBlockAllocator.cs,TestAllocate,The following statement contains a magic number: int num = AtLeast(97);
Magic Number,Lucene.Net.Util,TestRecyclingIntBlockAllocator,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestRecyclingIntBlockAllocator.cs,TestAllocate,The following statement contains a magic number: Assert.AreEqual(4 * size * (i + 2)' allocator.BytesUsed);
Magic Number,Lucene.Net.Util,TestRecyclingIntBlockAllocator,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestRecyclingIntBlockAllocator.cs,TestAllocate,The following statement contains a magic number: Assert.AreEqual(4 * size * (i + 2)' allocator.BytesUsed);
Magic Number,Lucene.Net.Util,TestRecyclingIntBlockAllocator,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestRecyclingIntBlockAllocator.cs,TestAllocateAndRecycle,The following statement contains a magic number: int numIters = AtLeast(97);
Magic Number,Lucene.Net.Util,TestRecyclingIntBlockAllocator,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestRecyclingIntBlockAllocator.cs,TestAllocateAndRecycle,The following statement contains a magic number: int num = 1 + Random.Next(39);
Magic Number,Lucene.Net.Util,TestRecyclingIntBlockAllocator,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestRecyclingIntBlockAllocator.cs,TestAllocateAndRecycle,The following statement contains a magic number: Assert.AreEqual(4 * size * (allocated.Count + allocator.NumBufferedBlocks)' allocator.BytesUsed);
Magic Number,Lucene.Net.Util,TestRecyclingIntBlockAllocator,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestRecyclingIntBlockAllocator.cs,TestAllocateAndFree,The following statement contains a magic number: int numIters = AtLeast(97);
Magic Number,Lucene.Net.Util,TestRecyclingIntBlockAllocator,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestRecyclingIntBlockAllocator.cs,TestAllocateAndFree,The following statement contains a magic number: int num = 1 + Random.Next(39);
Magic Number,Lucene.Net.Util,TestRecyclingIntBlockAllocator,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestRecyclingIntBlockAllocator.cs,TestAllocateAndFree,The following statement contains a magic number: Assert.AreEqual(4 * size * (allocated.Count + allocator.NumBufferedBlocks)' allocator.BytesUsed' "" + (4 * size * (allocated.Count + allocator.NumBufferedBlocks) - allocator.BytesUsed));
Magic Number,Lucene.Net.Util,TestRecyclingIntBlockAllocator,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestRecyclingIntBlockAllocator.cs,TestAllocateAndFree,The following statement contains a magic number: Assert.AreEqual(4 * size * (allocated.Count + allocator.NumBufferedBlocks)' allocator.BytesUsed' "" + (4 * size * (allocated.Count + allocator.NumBufferedBlocks) - allocator.BytesUsed));
Magic Number,Lucene.Net.Util,TestRecyclingIntBlockAllocator,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestRecyclingIntBlockAllocator.cs,TestAllocateAndFree,The following statement contains a magic number: int freeBlocks = allocator.FreeBlocks(Random.Next(7 + allocator.MaxBufferedBlocks));
Magic Number,Lucene.Net.Util,TestRollingBuffer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestRollingBuffer.cs,Test,The following statement contains a magic number: int maxPos = AtLeast(10000);
Magic Number,Lucene.Net.Util,TestRollingBuffer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestRollingBuffer.cs,Test,The following statement contains a magic number: FixedBitSet posSet = new FixedBitSet(maxPos + 1000);
Magic Number,Lucene.Net.Util,TestRollingBuffer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestRollingBuffer.cs,Test,The following statement contains a magic number: int limit = Rarely() ? 1000 : 20;
Magic Number,Lucene.Net.Util,TestRollingBuffer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestRollingBuffer.cs,Test,The following statement contains a magic number: int limit = Rarely() ? 1000 : 20;
Magic Number,Lucene.Net.Util,TestRollingBuffer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestRollingBuffer.cs,Test,The following statement contains a magic number: random.Next(4) == 1
Magic Number,Lucene.Net.Util,TestRollingBuffer,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestRollingBuffer.cs,Test,The following statement contains a magic number: iter < 100 * RANDOM_MULTIPLIER
Magic Number,Lucene.Net.Util,TestSentinelIntSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSentinelIntSet.cs,Test,The following statement contains a magic number: SentinelInt32Set set = new SentinelInt32Set(10' -1);
Magic Number,Lucene.Net.Util,TestSentinelIntSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSentinelIntSet.cs,Test,The following statement contains a magic number: Assert.IsFalse(set.Exists(50));
Magic Number,Lucene.Net.Util,TestSentinelIntSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSentinelIntSet.cs,Test,The following statement contains a magic number: set.Put(50);
Magic Number,Lucene.Net.Util,TestSentinelIntSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSentinelIntSet.cs,Test,The following statement contains a magic number: Assert.IsTrue(set.Exists(50));
Magic Number,Lucene.Net.Util,TestSentinelIntSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSentinelIntSet.cs,Test,The following statement contains a magic number: Assert.AreEqual(-11' set.Find(10));
Magic Number,Lucene.Net.Util,TestSentinelIntSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSentinelIntSet.cs,Test,The following statement contains a magic number: Assert.AreEqual(-11' set.Find(10));
Magic Number,Lucene.Net.Util,TestSentinelIntSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSentinelIntSet.cs,Test,The following statement contains a magic number: Assert.AreEqual(50' set.Hash(50));
Magic Number,Lucene.Net.Util,TestSentinelIntSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSentinelIntSet.cs,Test,The following statement contains a magic number: Assert.AreEqual(50' set.Hash(50));
Magic Number,Lucene.Net.Util,TestSentinelIntSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSentinelIntSet.cs,Test,The following statement contains a magic number: i < 20
Magic Number,Lucene.Net.Util,TestSentinelIntSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSentinelIntSet.cs,Test,The following statement contains a magic number: Assert.AreEqual(20' set.Count);
Magic Number,Lucene.Net.Util,TestSentinelIntSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSentinelIntSet.cs,Test,The following statement contains a magic number: Assert.AreEqual(24' set.RehashCount);
Magic Number,Lucene.Net.Util,TestSentinelIntSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSentinelIntSet.cs,TestRandom,The following statement contains a magic number: int initSz = Random.Next(20);
Magic Number,Lucene.Net.Util,TestSentinelIntSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSentinelIntSet.cs,TestRandom,The following statement contains a magic number: int num = Random.Next(30);
Magic Number,Lucene.Net.Util,TestSentinelIntSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSentinelIntSet.cs,TestRandom,The following statement contains a magic number: int maxVal = (Random.NextBoolean() ? Random.Next(50) : Random.Next(int.MaxValue)) + 1;
Magic Number,Lucene.Net.Util,TestSentinelIntSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSentinelIntSet.cs,TestRandom,The following statement contains a magic number: i < 10000
Magic Number,Lucene.Net.Util,TestSetOnce,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSetOnce.cs,TestSettingCtor,The following statement contains a magic number: SetOnce<Integer> set = new SetOnce<Integer>(new Integer(5));
Magic Number,Lucene.Net.Util,TestSetOnce,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSetOnce.cs,TestSettingCtor,The following statement contains a magic number: Assert.AreEqual(5' set.Get().value);
Magic Number,Lucene.Net.Util,TestSetOnce,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSetOnce.cs,TestSettingCtor,The following statement contains a magic number: Assert.Throws<AlreadySetException>(() => set.Set(new Integer(7)));
Magic Number,Lucene.Net.Util,TestSetOnce,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSetOnce.cs,TestSetOnce_mem,The following statement contains a magic number: set.Set(new Integer(5));
Magic Number,Lucene.Net.Util,TestSetOnce,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSetOnce.cs,TestSetOnce_mem,The following statement contains a magic number: Assert.AreEqual(5' set.Get().value);
Magic Number,Lucene.Net.Util,TestSetOnce,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSetOnce.cs,TestSetOnce_mem,The following statement contains a magic number: Assert.Throws<AlreadySetException>(() => set.Set(new Integer(7)));
Magic Number,Lucene.Net.Util,TestSetOnce,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSetOnce.cs,TestSetMultiThreaded,The following statement contains a magic number: SetOnceThread[] threads = new SetOnceThread[10];
Magic Number,Lucene.Net.Util,TestSetOnce,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSetOnce.cs,TestSetMultiThreaded,The following statement contains a magic number: int expectedVal = Convert.ToInt32(t.Name.Substring(2));
Magic Number,Lucene.Net.Util,SetOnceThread,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSetOnce.cs,Run,The following statement contains a magic number: Sleep(RAND.Next(10));
Magic Number,Lucene.Net.Util,SetOnceThread,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSetOnce.cs,Run,The following statement contains a magic number: set.Set(new Integer(Convert.ToInt32(Name.Substring(2)' CultureInfo.InvariantCulture)));
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestCos,The following statement contains a magic number: Assert.AreEqual(Math.Cos(Math.PI / 2)' Math.Cos(Math.PI / 2)' COS_DELTA);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestCos,The following statement contains a magic number: Assert.AreEqual(Math.Cos(Math.PI / 2)' Math.Cos(Math.PI / 2)' COS_DELTA);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestCos,The following statement contains a magic number: Assert.AreEqual(Math.Cos(-Math.PI / 2)' Math.Cos(-Math.PI / 2)' COS_DELTA);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestCos,The following statement contains a magic number: Assert.AreEqual(Math.Cos(-Math.PI / 2)' Math.Cos(-Math.PI / 2)' COS_DELTA);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestCos,The following statement contains a magic number: Assert.AreEqual(Math.Cos(Math.PI / 4)' Math.Cos(Math.PI / 4)' COS_DELTA);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestCos,The following statement contains a magic number: Assert.AreEqual(Math.Cos(Math.PI / 4)' Math.Cos(Math.PI / 4)' COS_DELTA);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestCos,The following statement contains a magic number: Assert.AreEqual(Math.Cos(-Math.PI / 4)' Math.Cos(-Math.PI / 4)' COS_DELTA);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestCos,The following statement contains a magic number: Assert.AreEqual(Math.Cos(-Math.PI / 4)' Math.Cos(-Math.PI / 4)' COS_DELTA);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestCos,The following statement contains a magic number: Assert.AreEqual(Math.Cos(Math.PI * 2 / 3)' Math.Cos(Math.PI * 2 / 3)' COS_DELTA);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestCos,The following statement contains a magic number: Assert.AreEqual(Math.Cos(Math.PI * 2 / 3)' Math.Cos(Math.PI * 2 / 3)' COS_DELTA);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestCos,The following statement contains a magic number: Assert.AreEqual(Math.Cos(Math.PI * 2 / 3)' Math.Cos(Math.PI * 2 / 3)' COS_DELTA);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestCos,The following statement contains a magic number: Assert.AreEqual(Math.Cos(Math.PI * 2 / 3)' Math.Cos(Math.PI * 2 / 3)' COS_DELTA);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestCos,The following statement contains a magic number: Assert.AreEqual(Math.Cos(-Math.PI * 2 / 3)' Math.Cos(-Math.PI * 2 / 3)' COS_DELTA);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestCos,The following statement contains a magic number: Assert.AreEqual(Math.Cos(-Math.PI * 2 / 3)' Math.Cos(-Math.PI * 2 / 3)' COS_DELTA);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestCos,The following statement contains a magic number: Assert.AreEqual(Math.Cos(-Math.PI * 2 / 3)' Math.Cos(-Math.PI * 2 / 3)' COS_DELTA);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestCos,The following statement contains a magic number: Assert.AreEqual(Math.Cos(-Math.PI * 2 / 3)' Math.Cos(-Math.PI * 2 / 3)' COS_DELTA);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestCos,The following statement contains a magic number: Assert.AreEqual(Math.Cos(Math.PI / 6)' Math.Cos(Math.PI / 6)' COS_DELTA);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestCos,The following statement contains a magic number: Assert.AreEqual(Math.Cos(Math.PI / 6)' Math.Cos(Math.PI / 6)' COS_DELTA);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestCos,The following statement contains a magic number: Assert.AreEqual(Math.Cos(-Math.PI / 6)' Math.Cos(-Math.PI / 6)' COS_DELTA);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestCos,The following statement contains a magic number: Assert.AreEqual(Math.Cos(-Math.PI / 6)' Math.Cos(-Math.PI / 6)' COS_DELTA);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestCos,The following statement contains a magic number: i < 10000
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestAsin,The following statement contains a magic number: Assert.IsTrue(double.IsNaN(Math.Asin(2)));
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestAsin,The following statement contains a magic number: Assert.IsTrue(double.IsNaN(Math.Asin(-2)));
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestAsin,The following statement contains a magic number: Assert.AreEqual(-Math.PI / 2' Math.Asin(-1)' ASIN_DELTA);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestAsin,The following statement contains a magic number: Assert.AreEqual(-Math.PI / 3' Math.Asin(-0.8660254)' ASIN_DELTA);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestAsin,The following statement contains a magic number: Assert.AreEqual(-Math.PI / 3' Math.Asin(-0.8660254)' ASIN_DELTA);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestAsin,The following statement contains a magic number: Assert.AreEqual(-Math.PI / 4' Math.Asin(-0.7071068)' ASIN_DELTA);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestAsin,The following statement contains a magic number: Assert.AreEqual(-Math.PI / 4' Math.Asin(-0.7071068)' ASIN_DELTA);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestAsin,The following statement contains a magic number: Assert.AreEqual(-Math.PI / 6' Math.Asin(-0.5)' ASIN_DELTA);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestAsin,The following statement contains a magic number: Assert.AreEqual(-Math.PI / 6' Math.Asin(-0.5)' ASIN_DELTA);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestAsin,The following statement contains a magic number: Assert.AreEqual(Math.PI / 6' Math.Asin(0.5)' ASIN_DELTA);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestAsin,The following statement contains a magic number: Assert.AreEqual(Math.PI / 6' Math.Asin(0.5)' ASIN_DELTA);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestAsin,The following statement contains a magic number: Assert.AreEqual(Math.PI / 4' Math.Asin(0.7071068)' ASIN_DELTA);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestAsin,The following statement contains a magic number: Assert.AreEqual(Math.PI / 4' Math.Asin(0.7071068)' ASIN_DELTA);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestAsin,The following statement contains a magic number: Assert.AreEqual(Math.PI / 3' Math.Asin(0.8660254)' ASIN_DELTA);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestAsin,The following statement contains a magic number: Assert.AreEqual(Math.PI / 3' Math.Asin(0.8660254)' ASIN_DELTA);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestAsin,The following statement contains a magic number: Assert.AreEqual(Math.PI / 2' Math.Asin(1)' ASIN_DELTA);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestAsin,The following statement contains a magic number: Assert.IsTrue(Math.Asin(d) >= -Math.PI / 2);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestAsin,The following statement contains a magic number: Assert.IsTrue(Math.Asin(d) <= Math.PI / 2);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestAsin,The following statement contains a magic number: i < 10000
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: Assert.AreEqual(0' SloppyMath.Haversin(0' -180' 0' -180)' 0D);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: Assert.AreEqual(0' SloppyMath.Haversin(0' -180' 0' -180)' 0D);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: Assert.AreEqual(0' SloppyMath.Haversin(0' -180' 0' 180)' 0D);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: Assert.AreEqual(0' SloppyMath.Haversin(0' -180' 0' 180)' 0D);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: Assert.AreEqual(0' SloppyMath.Haversin(0' 180' 0' 180)' 0D);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: Assert.AreEqual(0' SloppyMath.Haversin(0' 180' 0' 180)' 0D);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: Assert.AreEqual(0' SloppyMath.Haversin(90' 0' 90' 0)' 0D);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: Assert.AreEqual(0' SloppyMath.Haversin(90' 0' 90' 0)' 0D);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: Assert.AreEqual(0' SloppyMath.Haversin(90' -180' 90' -180)' 0D);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: Assert.AreEqual(0' SloppyMath.Haversin(90' -180' 90' -180)' 0D);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: Assert.AreEqual(0' SloppyMath.Haversin(90' -180' 90' -180)' 0D);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: Assert.AreEqual(0' SloppyMath.Haversin(90' -180' 90' -180)' 0D);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: Assert.AreEqual(0' SloppyMath.Haversin(90' -180' 90' 180)' 0D);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: Assert.AreEqual(0' SloppyMath.Haversin(90' -180' 90' 180)' 0D);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: Assert.AreEqual(0' SloppyMath.Haversin(90' -180' 90' 180)' 0D);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: Assert.AreEqual(0' SloppyMath.Haversin(90' -180' 90' 180)' 0D);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: Assert.AreEqual(0' SloppyMath.Haversin(90' 180' 90' 180)' 0D);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: Assert.AreEqual(0' SloppyMath.Haversin(90' 180' 90' 180)' 0D);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: Assert.AreEqual(0' SloppyMath.Haversin(90' 180' 90' 180)' 0D);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: Assert.AreEqual(0' SloppyMath.Haversin(90' 180' 90' 180)' 0D);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: double earthRadiusKMs = 6378.137;
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: Assert.AreEqual(halfCircle' SloppyMath.Haversin(0' 0' 0' 180)' 0D);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: double randomLat1 = 40.7143528 + (r.Next(10) - 5) * 360;
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: double randomLat1 = 40.7143528 + (r.Next(10) - 5) * 360;
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: double randomLat1 = 40.7143528 + (r.Next(10) - 5) * 360;
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: double randomLat1 = 40.7143528 + (r.Next(10) - 5) * 360;
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: double randomLon1 = -74.0059731 + (r.Next(10) - 5) * 360;
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: double randomLon1 = -74.0059731 + (r.Next(10) - 5) * 360;
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: double randomLon1 = -74.0059731 + (r.Next(10) - 5) * 360;
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: double randomLon1 = -74.0059731 + (r.Next(10) - 5) * 360;
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: double randomLat2 = 40.65 + (r.Next(10) - 5) * 360;
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: double randomLat2 = 40.65 + (r.Next(10) - 5) * 360;
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: double randomLat2 = 40.65 + (r.Next(10) - 5) * 360;
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: double randomLat2 = 40.65 + (r.Next(10) - 5) * 360;
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: double randomLon2 = -73.95 + (r.Next(10) - 5) * 360;
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: double randomLon2 = -73.95 + (r.Next(10) - 5) * 360;
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: double randomLon2 = -73.95 + (r.Next(10) - 5) * 360;
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: double randomLon2 = -73.95 + (r.Next(10) - 5) * 360;
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: Assert.AreEqual(8.572' SloppyMath.Haversin(randomLat1' randomLon1' randomLat2' randomLon2)' 0.01D);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: Assert.AreEqual(8.572' SloppyMath.Haversin(randomLat1' randomLon1' randomLat2' randomLon2)' 0.01D);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: Assert.AreEqual(0' SloppyMath.Haversin(40.7143528' -74.0059731' 40.7143528' -74.0059731)' 0D);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: Assert.AreEqual(0' SloppyMath.Haversin(40.7143528' -74.0059731' 40.7143528' -74.0059731)' 0D);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: Assert.AreEqual(0' SloppyMath.Haversin(40.7143528' -74.0059731' 40.7143528' -74.0059731)' 0D);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: Assert.AreEqual(0' SloppyMath.Haversin(40.7143528' -74.0059731' 40.7143528' -74.0059731)' 0D);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: Assert.AreEqual(5.286' SloppyMath.Haversin(40.7143528' -74.0059731' 40.759011' -73.9844722)' 0.01D);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: Assert.AreEqual(5.286' SloppyMath.Haversin(40.7143528' -74.0059731' 40.759011' -73.9844722)' 0.01D);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: Assert.AreEqual(5.286' SloppyMath.Haversin(40.7143528' -74.0059731' 40.759011' -73.9844722)' 0.01D);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: Assert.AreEqual(5.286' SloppyMath.Haversin(40.7143528' -74.0059731' 40.759011' -73.9844722)' 0.01D);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: Assert.AreEqual(5.286' SloppyMath.Haversin(40.7143528' -74.0059731' 40.759011' -73.9844722)' 0.01D);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: Assert.AreEqual(5.286' SloppyMath.Haversin(40.7143528' -74.0059731' 40.759011' -73.9844722)' 0.01D);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: Assert.AreEqual(0.4621' SloppyMath.Haversin(40.7143528' -74.0059731' 40.718266' -74.007819)' 0.01D);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: Assert.AreEqual(0.4621' SloppyMath.Haversin(40.7143528' -74.0059731' 40.718266' -74.007819)' 0.01D);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: Assert.AreEqual(0.4621' SloppyMath.Haversin(40.7143528' -74.0059731' 40.718266' -74.007819)' 0.01D);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: Assert.AreEqual(0.4621' SloppyMath.Haversin(40.7143528' -74.0059731' 40.718266' -74.007819)' 0.01D);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: Assert.AreEqual(0.4621' SloppyMath.Haversin(40.7143528' -74.0059731' 40.718266' -74.007819)' 0.01D);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: Assert.AreEqual(0.4621' SloppyMath.Haversin(40.7143528' -74.0059731' 40.718266' -74.007819)' 0.01D);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: Assert.AreEqual(1.055' SloppyMath.Haversin(40.7143528' -74.0059731' 40.7051157' -74.0088305)' 0.01D);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: Assert.AreEqual(1.055' SloppyMath.Haversin(40.7143528' -74.0059731' 40.7051157' -74.0088305)' 0.01D);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: Assert.AreEqual(1.055' SloppyMath.Haversin(40.7143528' -74.0059731' 40.7051157' -74.0088305)' 0.01D);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: Assert.AreEqual(1.055' SloppyMath.Haversin(40.7143528' -74.0059731' 40.7051157' -74.0088305)' 0.01D);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: Assert.AreEqual(1.055' SloppyMath.Haversin(40.7143528' -74.0059731' 40.7051157' -74.0088305)' 0.01D);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: Assert.AreEqual(1.055' SloppyMath.Haversin(40.7143528' -74.0059731' 40.7051157' -74.0088305)' 0.01D);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: Assert.AreEqual(1.258' SloppyMath.Haversin(40.7143528' -74.0059731' 40.7247222' -74)' 0.01D);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: Assert.AreEqual(1.258' SloppyMath.Haversin(40.7143528' -74.0059731' 40.7247222' -74)' 0.01D);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: Assert.AreEqual(1.258' SloppyMath.Haversin(40.7143528' -74.0059731' 40.7247222' -74)' 0.01D);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: Assert.AreEqual(1.258' SloppyMath.Haversin(40.7143528' -74.0059731' 40.7247222' -74)' 0.01D);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: Assert.AreEqual(1.258' SloppyMath.Haversin(40.7143528' -74.0059731' 40.7247222' -74)' 0.01D);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: Assert.AreEqual(1.258' SloppyMath.Haversin(40.7143528' -74.0059731' 40.7247222' -74)' 0.01D);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: Assert.AreEqual(2.029' SloppyMath.Haversin(40.7143528' -74.0059731' 40.731033' -73.9962255)' 0.01D);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: Assert.AreEqual(2.029' SloppyMath.Haversin(40.7143528' -74.0059731' 40.731033' -73.9962255)' 0.01D);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: Assert.AreEqual(2.029' SloppyMath.Haversin(40.7143528' -74.0059731' 40.731033' -73.9962255)' 0.01D);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: Assert.AreEqual(2.029' SloppyMath.Haversin(40.7143528' -74.0059731' 40.731033' -73.9962255)' 0.01D);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: Assert.AreEqual(2.029' SloppyMath.Haversin(40.7143528' -74.0059731' 40.731033' -73.9962255)' 0.01D);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: Assert.AreEqual(2.029' SloppyMath.Haversin(40.7143528' -74.0059731' 40.731033' -73.9962255)' 0.01D);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: Assert.AreEqual(8.572' SloppyMath.Haversin(40.7143528' -74.0059731' 40.65' -73.95)' 0.01D);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: Assert.AreEqual(8.572' SloppyMath.Haversin(40.7143528' -74.0059731' 40.65' -73.95)' 0.01D);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: Assert.AreEqual(8.572' SloppyMath.Haversin(40.7143528' -74.0059731' 40.65' -73.95)' 0.01D);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: Assert.AreEqual(8.572' SloppyMath.Haversin(40.7143528' -74.0059731' 40.65' -73.95)' 0.01D);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: Assert.AreEqual(8.572' SloppyMath.Haversin(40.7143528' -74.0059731' 40.65' -73.95)' 0.01D);
Magic Number,Lucene.Net.Util,TestSloppyMath,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSloppyMath.cs,TestHaversin,The following statement contains a magic number: Assert.AreEqual(8.572' SloppyMath.Haversin(40.7143528' -74.0059731' 40.65' -73.95)' 0.01D);
Magic Number,Lucene.Net.Util,TestSmallFloat,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSmallFloat.cs,Orig_byteToFloat,The following statement contains a magic number: int mantissa = b & 7;
Magic Number,Lucene.Net.Util,TestSmallFloat,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSmallFloat.cs,Orig_byteToFloat,The following statement contains a magic number: int exponent = (b >> 3) & 31;
Magic Number,Lucene.Net.Util,TestSmallFloat,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSmallFloat.cs,Orig_byteToFloat,The following statement contains a magic number: int exponent = (b >> 3) & 31;
Magic Number,Lucene.Net.Util,TestSmallFloat,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSmallFloat.cs,Orig_byteToFloat,The following statement contains a magic number: int bits = ((exponent + (63 - 15)) << 24) | (mantissa << 21);
Magic Number,Lucene.Net.Util,TestSmallFloat,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSmallFloat.cs,Orig_byteToFloat,The following statement contains a magic number: int bits = ((exponent + (63 - 15)) << 24) | (mantissa << 21);
Magic Number,Lucene.Net.Util,TestSmallFloat,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSmallFloat.cs,Orig_byteToFloat,The following statement contains a magic number: int bits = ((exponent + (63 - 15)) << 24) | (mantissa << 21);
Magic Number,Lucene.Net.Util,TestSmallFloat,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSmallFloat.cs,Orig_byteToFloat,The following statement contains a magic number: int bits = ((exponent + (63 - 15)) << 24) | (mantissa << 21);
Magic Number,Lucene.Net.Util,TestSmallFloat,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSmallFloat.cs,Orig_floatToByte_v13,The following statement contains a magic number: int mantissa = (bits & 0xffffff) >> 21;
Magic Number,Lucene.Net.Util,TestSmallFloat,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSmallFloat.cs,Orig_floatToByte_v13,The following statement contains a magic number: int exponent = (((bits >> 24) & 0x7f) - 63) + 15;
Magic Number,Lucene.Net.Util,TestSmallFloat,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSmallFloat.cs,Orig_floatToByte_v13,The following statement contains a magic number: int exponent = (((bits >> 24) & 0x7f) - 63) + 15;
Magic Number,Lucene.Net.Util,TestSmallFloat,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSmallFloat.cs,Orig_floatToByte_v13,The following statement contains a magic number: int exponent = (((bits >> 24) & 0x7f) - 63) + 15;
Magic Number,Lucene.Net.Util,TestSmallFloat,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSmallFloat.cs,Orig_floatToByte_v13,The following statement contains a magic number: exponent = 31;
Magic Number,Lucene.Net.Util,TestSmallFloat,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSmallFloat.cs,Orig_floatToByte_v13,The following statement contains a magic number: mantissa = 7;
Magic Number,Lucene.Net.Util,TestSmallFloat,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSmallFloat.cs,Orig_floatToByte_v13,The following statement contains a magic number: exponent > 31
Magic Number,Lucene.Net.Util,TestSmallFloat,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSmallFloat.cs,Orig_floatToByte_v13,The following statement contains a magic number: return (sbyte)((exponent << 3) | mantissa);
Magic Number,Lucene.Net.Util,TestSmallFloat,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSmallFloat.cs,Orig_floatToByte,The following statement contains a magic number: int mantissa = (bits & 0xffffff) >> 21;
Magic Number,Lucene.Net.Util,TestSmallFloat,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSmallFloat.cs,Orig_floatToByte,The following statement contains a magic number: int exponent = (((bits >> 24) & 0x7f) - 63) + 15;
Magic Number,Lucene.Net.Util,TestSmallFloat,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSmallFloat.cs,Orig_floatToByte,The following statement contains a magic number: int exponent = (((bits >> 24) & 0x7f) - 63) + 15;
Magic Number,Lucene.Net.Util,TestSmallFloat,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSmallFloat.cs,Orig_floatToByte,The following statement contains a magic number: int exponent = (((bits >> 24) & 0x7f) - 63) + 15;
Magic Number,Lucene.Net.Util,TestSmallFloat,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSmallFloat.cs,Orig_floatToByte,The following statement contains a magic number: exponent = 31;
Magic Number,Lucene.Net.Util,TestSmallFloat,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSmallFloat.cs,Orig_floatToByte,The following statement contains a magic number: mantissa = 7;
Magic Number,Lucene.Net.Util,TestSmallFloat,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSmallFloat.cs,Orig_floatToByte,The following statement contains a magic number: exponent > 31
Magic Number,Lucene.Net.Util,TestSmallFloat,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSmallFloat.cs,Orig_floatToByte,The following statement contains a magic number: return (sbyte)((exponent << 3) | mantissa);
Magic Number,Lucene.Net.Util,TestSmallFloat,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSmallFloat.cs,TestByteToFloat,The following statement contains a magic number: float f2 = SmallSingle.SByteToSingle((sbyte)i' 3' 15);
Magic Number,Lucene.Net.Util,TestSmallFloat,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSmallFloat.cs,TestByteToFloat,The following statement contains a magic number: float f2 = SmallSingle.SByteToSingle((sbyte)i' 3' 15);
Magic Number,Lucene.Net.Util,TestSmallFloat,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSmallFloat.cs,TestByteToFloat,The following statement contains a magic number: float f4 = SmallSingle.SByteToSingle((sbyte)i' 5' 2);
Magic Number,Lucene.Net.Util,TestSmallFloat,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSmallFloat.cs,TestByteToFloat,The following statement contains a magic number: float f4 = SmallSingle.SByteToSingle((sbyte)i' 5' 2);
Magic Number,Lucene.Net.Util,TestSmallFloat,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSmallFloat.cs,TestByteToFloat,The following statement contains a magic number: i < 256
Magic Number,Lucene.Net.Util,TestSmallFloat,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSmallFloat.cs,TestFloatToByte,The following statement contains a magic number: Assert.AreEqual(0' Orig_floatToByte_v13(5.8123817E-10f));
Magic Number,Lucene.Net.Util,TestSmallFloat,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSmallFloat.cs,TestFloatToByte,The following statement contains a magic number: Assert.AreEqual(1' Orig_floatToByte(5.8123817E-10f));
Magic Number,Lucene.Net.Util,TestSmallFloat,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSmallFloat.cs,TestFloatToByte,The following statement contains a magic number: Assert.AreEqual(1' SmallSingle.SingleToSByte315(5.8123817E-10f));
Magic Number,Lucene.Net.Util,TestSmallFloat,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSmallFloat.cs,TestFloatToByte,The following statement contains a magic number: Assert.AreEqual(255' SmallSingle.SingleToSByte315(float.MaxValue) & 0xff);
Magic Number,Lucene.Net.Util,TestSmallFloat,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSmallFloat.cs,TestFloatToByte,The following statement contains a magic number: Assert.AreEqual(255' SmallSingle.SingleToSByte315(float.PositiveInfinity) & 0xff);
Magic Number,Lucene.Net.Util,TestSmallFloat,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSmallFloat.cs,TestFloatToByte,The following statement contains a magic number: int num = AtLeast(100000);
Magic Number,Lucene.Net.Util,TestSmallFloat,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSmallFloat.cs,TestFloatToByte,The following statement contains a magic number: sbyte b2 = SmallSingle.SingleToSByte(f' 3' 15);
Magic Number,Lucene.Net.Util,TestSmallFloat,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSmallFloat.cs,TestFloatToByte,The following statement contains a magic number: sbyte b2 = SmallSingle.SingleToSByte(f' 3' 15);
Magic Number,Lucene.Net.Util,TestSmallFloat,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSmallFloat.cs,TestFloatToByte,The following statement contains a magic number: sbyte b4 = SmallSingle.SingleToSByte(f' 5' 2);
Magic Number,Lucene.Net.Util,TestSmallFloat,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestSmallFloat.cs,TestFloatToByte,The following statement contains a magic number: sbyte b4 = SmallSingle.SingleToSByte(f' 5' 2);
Magic Number,Lucene.Net.Util,TestStringHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestStringHelper.cs,TestMurmurHash3,The following statement contains a magic number: Assert.AreEqual(0xcd018ef6' (uint)StringHelper.Murmurhash3_x86_32(new BytesRef("foo")' 16));
Magic Number,Lucene.Net.Util,TestStringHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestStringHelper.cs,TestMurmurHash3,The following statement contains a magic number: Assert.AreEqual(0x2c628cd0' (uint)StringHelper.Murmurhash3_x86_32(new BytesRef("You want weapons? We're in a library! Books! The best weapons in the world!")' 3476));
Magic Number,Lucene.Net.Util,TestUnicodeUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestUnicodeUtil.cs,TestCodePointCount,The following statement contains a magic number: Assert.AreEqual(3' UnicodeUtil.CodePointCount(new BytesRef(AsByteArray('z'' 'z'' 'z'))));
Magic Number,Lucene.Net.Util,TestUnicodeUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestUnicodeUtil.cs,TestCodePointCount,The following statement contains a magic number: Assert.AreEqual(2' UnicodeUtil.CodePointCount(new BytesRef(AsByteArray('z'' 0xc2' 0xa2))));
Magic Number,Lucene.Net.Util,TestUnicodeUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestUnicodeUtil.cs,TestCodePointCount,The following statement contains a magic number: Assert.AreEqual(2' UnicodeUtil.CodePointCount(new BytesRef(AsByteArray('z'' 0xe2' 0x82' 0xac))));
Magic Number,Lucene.Net.Util,TestUnicodeUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestUnicodeUtil.cs,TestCodePointCount,The following statement contains a magic number: Assert.AreEqual(2' UnicodeUtil.CodePointCount(new BytesRef(AsByteArray('z'' 0xf0' 0xa4' 0xad' 0xa2))));
Magic Number,Lucene.Net.Util,TestUnicodeUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestUnicodeUtil.cs,TestCodePointCount,The following statement contains a magic number: BytesRef utf8 = new BytesRef(20);
Magic Number,Lucene.Net.Util,TestUnicodeUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestUnicodeUtil.cs,TestCodePointCount,The following statement contains a magic number: int num = AtLeast(50000);
Magic Number,Lucene.Net.Util,TestUnicodeUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestUnicodeUtil.cs,TestUTF8toUTF32,The following statement contains a magic number: BytesRef utf8 = new BytesRef(20);
Magic Number,Lucene.Net.Util,TestUnicodeUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestUnicodeUtil.cs,TestUTF8toUTF32,The following statement contains a magic number: Int32sRef utf32 = new Int32sRef(20);
Magic Number,Lucene.Net.Util,TestUnicodeUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestUnicodeUtil.cs,TestUTF8toUTF32,The following statement contains a magic number: int[] codePoints = new int[20];
Magic Number,Lucene.Net.Util,TestUnicodeUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestUnicodeUtil.cs,TestUTF8toUTF32,The following statement contains a magic number: int num = AtLeast(50000);
Magic Number,Lucene.Net.Util,TestUnicodeUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestUnicodeUtil.cs,TestNewString,The following statement contains a magic number: int[][] tests = new int[][] { new int[] { 0' 1' 0' 2 }' new int[] { 0' 2' 0' 4 }' new int[] { 1' 1' 2' 2 }' new int[] { 1' 2' 2' 3 }' new int[] { 1' 3' 2' 4 }' new int[] { 2' 2' 4' 2 }' new int[] { 2' 3' 0' -1 }' new int[] { 4' 5' 0' -1 }' new int[] { 3' -1' 0' -1 } };
Magic Number,Lucene.Net.Util,TestUnicodeUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestUnicodeUtil.cs,TestNewString,The following statement contains a magic number: int[][] tests = new int[][] { new int[] { 0' 1' 0' 2 }' new int[] { 0' 2' 0' 4 }' new int[] { 1' 1' 2' 2 }' new int[] { 1' 2' 2' 3 }' new int[] { 1' 3' 2' 4 }' new int[] { 2' 2' 4' 2 }' new int[] { 2' 3' 0' -1 }' new int[] { 4' 5' 0' -1 }' new int[] { 3' -1' 0' -1 } };
Magic Number,Lucene.Net.Util,TestUnicodeUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestUnicodeUtil.cs,TestNewString,The following statement contains a magic number: int[][] tests = new int[][] { new int[] { 0' 1' 0' 2 }' new int[] { 0' 2' 0' 4 }' new int[] { 1' 1' 2' 2 }' new int[] { 1' 2' 2' 3 }' new int[] { 1' 3' 2' 4 }' new int[] { 2' 2' 4' 2 }' new int[] { 2' 3' 0' -1 }' new int[] { 4' 5' 0' -1 }' new int[] { 3' -1' 0' -1 } };
Magic Number,Lucene.Net.Util,TestUnicodeUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestUnicodeUtil.cs,TestNewString,The following statement contains a magic number: int[][] tests = new int[][] { new int[] { 0' 1' 0' 2 }' new int[] { 0' 2' 0' 4 }' new int[] { 1' 1' 2' 2 }' new int[] { 1' 2' 2' 3 }' new int[] { 1' 3' 2' 4 }' new int[] { 2' 2' 4' 2 }' new int[] { 2' 3' 0' -1 }' new int[] { 4' 5' 0' -1 }' new int[] { 3' -1' 0' -1 } };
Magic Number,Lucene.Net.Util,TestUnicodeUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestUnicodeUtil.cs,TestNewString,The following statement contains a magic number: int[][] tests = new int[][] { new int[] { 0' 1' 0' 2 }' new int[] { 0' 2' 0' 4 }' new int[] { 1' 1' 2' 2 }' new int[] { 1' 2' 2' 3 }' new int[] { 1' 3' 2' 4 }' new int[] { 2' 2' 4' 2 }' new int[] { 2' 3' 0' -1 }' new int[] { 4' 5' 0' -1 }' new int[] { 3' -1' 0' -1 } };
Magic Number,Lucene.Net.Util,TestUnicodeUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestUnicodeUtil.cs,TestNewString,The following statement contains a magic number: int[][] tests = new int[][] { new int[] { 0' 1' 0' 2 }' new int[] { 0' 2' 0' 4 }' new int[] { 1' 1' 2' 2 }' new int[] { 1' 2' 2' 3 }' new int[] { 1' 3' 2' 4 }' new int[] { 2' 2' 4' 2 }' new int[] { 2' 3' 0' -1 }' new int[] { 4' 5' 0' -1 }' new int[] { 3' -1' 0' -1 } };
Magic Number,Lucene.Net.Util,TestUnicodeUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestUnicodeUtil.cs,TestNewString,The following statement contains a magic number: int[][] tests = new int[][] { new int[] { 0' 1' 0' 2 }' new int[] { 0' 2' 0' 4 }' new int[] { 1' 1' 2' 2 }' new int[] { 1' 2' 2' 3 }' new int[] { 1' 3' 2' 4 }' new int[] { 2' 2' 4' 2 }' new int[] { 2' 3' 0' -1 }' new int[] { 4' 5' 0' -1 }' new int[] { 3' -1' 0' -1 } };
Magic Number,Lucene.Net.Util,TestUnicodeUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestUnicodeUtil.cs,TestNewString,The following statement contains a magic number: int[][] tests = new int[][] { new int[] { 0' 1' 0' 2 }' new int[] { 0' 2' 0' 4 }' new int[] { 1' 1' 2' 2 }' new int[] { 1' 2' 2' 3 }' new int[] { 1' 3' 2' 4 }' new int[] { 2' 2' 4' 2 }' new int[] { 2' 3' 0' -1 }' new int[] { 4' 5' 0' -1 }' new int[] { 3' -1' 0' -1 } };
Magic Number,Lucene.Net.Util,TestUnicodeUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestUnicodeUtil.cs,TestNewString,The following statement contains a magic number: int[][] tests = new int[][] { new int[] { 0' 1' 0' 2 }' new int[] { 0' 2' 0' 4 }' new int[] { 1' 1' 2' 2 }' new int[] { 1' 2' 2' 3 }' new int[] { 1' 3' 2' 4 }' new int[] { 2' 2' 4' 2 }' new int[] { 2' 3' 0' -1 }' new int[] { 4' 5' 0' -1 }' new int[] { 3' -1' 0' -1 } };
Magic Number,Lucene.Net.Util,TestUnicodeUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestUnicodeUtil.cs,TestNewString,The following statement contains a magic number: int[][] tests = new int[][] { new int[] { 0' 1' 0' 2 }' new int[] { 0' 2' 0' 4 }' new int[] { 1' 1' 2' 2 }' new int[] { 1' 2' 2' 3 }' new int[] { 1' 3' 2' 4 }' new int[] { 2' 2' 4' 2 }' new int[] { 2' 3' 0' -1 }' new int[] { 4' 5' 0' -1 }' new int[] { 3' -1' 0' -1 } };
Magic Number,Lucene.Net.Util,TestUnicodeUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestUnicodeUtil.cs,TestNewString,The following statement contains a magic number: int[][] tests = new int[][] { new int[] { 0' 1' 0' 2 }' new int[] { 0' 2' 0' 4 }' new int[] { 1' 1' 2' 2 }' new int[] { 1' 2' 2' 3 }' new int[] { 1' 3' 2' 4 }' new int[] { 2' 2' 4' 2 }' new int[] { 2' 3' 0' -1 }' new int[] { 4' 5' 0' -1 }' new int[] { 3' -1' 0' -1 } };
Magic Number,Lucene.Net.Util,TestUnicodeUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestUnicodeUtil.cs,TestNewString,The following statement contains a magic number: int[][] tests = new int[][] { new int[] { 0' 1' 0' 2 }' new int[] { 0' 2' 0' 4 }' new int[] { 1' 1' 2' 2 }' new int[] { 1' 2' 2' 3 }' new int[] { 1' 3' 2' 4 }' new int[] { 2' 2' 4' 2 }' new int[] { 2' 3' 0' -1 }' new int[] { 4' 5' 0' -1 }' new int[] { 3' -1' 0' -1 } };
Magic Number,Lucene.Net.Util,TestUnicodeUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestUnicodeUtil.cs,TestNewString,The following statement contains a magic number: int[][] tests = new int[][] { new int[] { 0' 1' 0' 2 }' new int[] { 0' 2' 0' 4 }' new int[] { 1' 1' 2' 2 }' new int[] { 1' 2' 2' 3 }' new int[] { 1' 3' 2' 4 }' new int[] { 2' 2' 4' 2 }' new int[] { 2' 3' 0' -1 }' new int[] { 4' 5' 0' -1 }' new int[] { 3' -1' 0' -1 } };
Magic Number,Lucene.Net.Util,TestUnicodeUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestUnicodeUtil.cs,TestNewString,The following statement contains a magic number: int[][] tests = new int[][] { new int[] { 0' 1' 0' 2 }' new int[] { 0' 2' 0' 4 }' new int[] { 1' 1' 2' 2 }' new int[] { 1' 2' 2' 3 }' new int[] { 1' 3' 2' 4 }' new int[] { 2' 2' 4' 2 }' new int[] { 2' 3' 0' -1 }' new int[] { 4' 5' 0' -1 }' new int[] { 3' -1' 0' -1 } };
Magic Number,Lucene.Net.Util,TestUnicodeUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestUnicodeUtil.cs,TestNewString,The following statement contains a magic number: int[][] tests = new int[][] { new int[] { 0' 1' 0' 2 }' new int[] { 0' 2' 0' 4 }' new int[] { 1' 1' 2' 2 }' new int[] { 1' 2' 2' 3 }' new int[] { 1' 3' 2' 4 }' new int[] { 2' 2' 4' 2 }' new int[] { 2' 3' 0' -1 }' new int[] { 4' 5' 0' -1 }' new int[] { 3' -1' 0' -1 } };
Magic Number,Lucene.Net.Util,TestUnicodeUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestUnicodeUtil.cs,TestNewString,The following statement contains a magic number: int[][] tests = new int[][] { new int[] { 0' 1' 0' 2 }' new int[] { 0' 2' 0' 4 }' new int[] { 1' 1' 2' 2 }' new int[] { 1' 2' 2' 3 }' new int[] { 1' 3' 2' 4 }' new int[] { 2' 2' 4' 2 }' new int[] { 2' 3' 0' -1 }' new int[] { 4' 5' 0' -1 }' new int[] { 3' -1' 0' -1 } };
Magic Number,Lucene.Net.Util,TestUnicodeUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestUnicodeUtil.cs,TestNewString,The following statement contains a magic number: int[][] tests = new int[][] { new int[] { 0' 1' 0' 2 }' new int[] { 0' 2' 0' 4 }' new int[] { 1' 1' 2' 2 }' new int[] { 1' 2' 2' 3 }' new int[] { 1' 3' 2' 4 }' new int[] { 2' 2' 4' 2 }' new int[] { 2' 3' 0' -1 }' new int[] { 4' 5' 0' -1 }' new int[] { 3' -1' 0' -1 } };
Magic Number,Lucene.Net.Util,TestUnicodeUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestUnicodeUtil.cs,TestNewString,The following statement contains a magic number: int[][] tests = new int[][] { new int[] { 0' 1' 0' 2 }' new int[] { 0' 2' 0' 4 }' new int[] { 1' 1' 2' 2 }' new int[] { 1' 2' 2' 3 }' new int[] { 1' 3' 2' 4 }' new int[] { 2' 2' 4' 2 }' new int[] { 2' 3' 0' -1 }' new int[] { 4' 5' 0' -1 }' new int[] { 3' -1' 0' -1 } };
Magic Number,Lucene.Net.Util,TestUnicodeUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestUnicodeUtil.cs,TestNewString,The following statement contains a magic number: int[][] tests = new int[][] { new int[] { 0' 1' 0' 2 }' new int[] { 0' 2' 0' 4 }' new int[] { 1' 1' 2' 2 }' new int[] { 1' 2' 2' 3 }' new int[] { 1' 3' 2' 4 }' new int[] { 2' 2' 4' 2 }' new int[] { 2' 3' 0' -1 }' new int[] { 4' 5' 0' -1 }' new int[] { 3' -1' 0' -1 } };
Magic Number,Lucene.Net.Util,TestUnicodeUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestUnicodeUtil.cs,TestNewString,The following statement contains a magic number: int[][] tests = new int[][] { new int[] { 0' 1' 0' 2 }' new int[] { 0' 2' 0' 4 }' new int[] { 1' 1' 2' 2 }' new int[] { 1' 2' 2' 3 }' new int[] { 1' 3' 2' 4 }' new int[] { 2' 2' 4' 2 }' new int[] { 2' 3' 0' -1 }' new int[] { 4' 5' 0' -1 }' new int[] { 3' -1' 0' -1 } };
Magic Number,Lucene.Net.Util,TestUnicodeUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestUnicodeUtil.cs,TestNewString,The following statement contains a magic number: int rs = t[2];
Magic Number,Lucene.Net.Util,TestUnicodeUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestUnicodeUtil.cs,TestNewString,The following statement contains a magic number: int rc = t[3];
Magic Number,Lucene.Net.Util,TestUnicodeUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestUnicodeUtil.cs,TestUTF8UTF16CharsRef,The following statement contains a magic number: int num = AtLeast(3989);
Magic Number,Lucene.Net.Util,TestUnicodeUtil,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestUnicodeUtil.cs,TestUTF8UTF16CharsRef,The following statement contains a magic number: char[] arr = new char[1 + Random.Next(100)];
Magic Number,Lucene.Net.Util,TestVersion,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestVersion.cs,TestDeprecations,The following statement contains a magic number: i + 2 != values.Length
Magic Number,Lucene.Net.Util,TestVersion,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestVersion.cs,TestAgainstMainVersionConstant,The following statement contains a magic number: Assert.IsTrue(values.Length >= 2);
Magic Number,Lucene.Net.Util,TestVersion,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestVersion.cs,TestAgainstMainVersionConstant,The following statement contains a magic number: Assert.AreEqual(mainVersionParsed' values[values.Length - 2]' "Constant one before last must be the same as the parsed LUCENE_MAIN_VERSION (without alpha/beta) constant: " + mainVersionWithoutAlphaBeta);
Magic Number,Lucene.Net.Util,TestVirtualMethod,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestVirtualMethod.cs,TestGeneral,The following statement contains a magic number: Assert.AreEqual(3' PublicTestMethod.GetImplementationDistance(typeof(TestClass3)));
Magic Number,Lucene.Net.Util,TestVirtualMethod,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestVirtualMethod.cs,TestGeneral,The following statement contains a magic number: Assert.AreEqual(2' ProtectedTestMethod.GetImplementationDistance(typeof(TestClass2)));
Magic Number,Lucene.Net.Util,TestVirtualMethod,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestVirtualMethod.cs,TestGeneral,The following statement contains a magic number: Assert.AreEqual(2' ProtectedTestMethod.GetImplementationDistance(typeof(TestClass3)));
Magic Number,Lucene.Net.Util,TestWAH8DocIdSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestWAH8DocIdSet.cs,CopyOf,The following statement contains a magic number: int indexInterval = TestUtil.NextInt32(Random' 8' 256);
Magic Number,Lucene.Net.Util,TestWAH8DocIdSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestWAH8DocIdSet.cs,CopyOf,The following statement contains a magic number: int indexInterval = TestUtil.NextInt32(Random' 8' 256);
Magic Number,Lucene.Net.Util,TestWAH8DocIdSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestWAH8DocIdSet.cs,TestUnion,The following statement contains a magic number: int numBits = TestUtil.NextInt32(Random' 100' 1 << 20);
Magic Number,Lucene.Net.Util,TestWAH8DocIdSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestWAH8DocIdSet.cs,TestUnion,The following statement contains a magic number: int numBits = TestUtil.NextInt32(Random' 100' 1 << 20);
Magic Number,Lucene.Net.Util,TestWAH8DocIdSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestWAH8DocIdSet.cs,TestUnion,The following statement contains a magic number: int numDocIdSets = TestUtil.NextInt32(Random' 0' 4);
Magic Number,Lucene.Net.Util,TestWAH8DocIdSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestWAH8DocIdSet.cs,TestUnion,The following statement contains a magic number: fixedSets.Add(RandomSet(numBits' (float)Random.NextDouble() / 16));
Magic Number,Lucene.Net.Util,TestWAH8DocIdSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestWAH8DocIdSet.cs,TestIntersection,The following statement contains a magic number: int numBits = TestUtil.NextInt32(Random' 100' 1 << 20);
Magic Number,Lucene.Net.Util,TestWAH8DocIdSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestWAH8DocIdSet.cs,TestIntersection,The following statement contains a magic number: int numBits = TestUtil.NextInt32(Random' 100' 1 << 20);
Magic Number,Lucene.Net.Util,TestWAH8DocIdSet,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestWAH8DocIdSet.cs,TestIntersection,The following statement contains a magic number: int numDocIdSets = TestUtil.NextInt32(Random' 1' 4);
Magic Number,Lucene.Net.Util,TestWeakIdentityMap,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestWeakIdentityMap.cs,TestSimpleHashMap,The following statement contains a magic number: Assert.AreEqual(3' map.Count);
Magic Number,Lucene.Net.Util,TestWeakIdentityMap,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestWeakIdentityMap.cs,TestSimpleHashMap,The following statement contains a magic number: Assert.AreEqual(3' map.Count);
Magic Number,Lucene.Net.Util,TestWeakIdentityMap,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestWeakIdentityMap.cs,TestSimpleHashMap,The following statement contains a magic number: Assert.AreEqual(2' map.Count);
Magic Number,Lucene.Net.Util,TestWeakIdentityMap,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestWeakIdentityMap.cs,TestSimpleHashMap,The following statement contains a magic number: Assert.AreEqual(3' map.Count);
Magic Number,Lucene.Net.Util,TestWeakIdentityMap,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestWeakIdentityMap.cs,TestSimpleHashMap,The following statement contains a magic number: keysAssigned += object.ReferenceEquals(k' key1) ? 1 : (object.ReferenceEquals(k' key2) ? 2 : 4);
Magic Number,Lucene.Net.Util,TestWeakIdentityMap,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestWeakIdentityMap.cs,TestSimpleHashMap,The following statement contains a magic number: keysAssigned += object.ReferenceEquals(k' key1) ? 1 : (object.ReferenceEquals(k' key2) ? 2 : 4);
Magic Number,Lucene.Net.Util,TestWeakIdentityMap,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestWeakIdentityMap.cs,TestSimpleHashMap,The following statement contains a magic number: Assert.AreEqual(3' c);
Magic Number,Lucene.Net.Util,TestWeakIdentityMap,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestWeakIdentityMap.cs,TestSimpleHashMap,The following statement contains a magic number: Assert.AreEqual(1 + 2 + 4' keysAssigned' "all keys must have been seen");
Magic Number,Lucene.Net.Util,TestWeakIdentityMap,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestWeakIdentityMap.cs,TestSimpleHashMap,The following statement contains a magic number: Assert.AreEqual(1 + 2 + 4' keysAssigned' "all keys must have been seen");
Magic Number,Lucene.Net.Util,TestWeakIdentityMap,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestWeakIdentityMap.cs,TestSimpleHashMap,The following statement contains a magic number: Assert.AreEqual(3' c);
Magic Number,Lucene.Net.Util,TestWeakIdentityMap,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestWeakIdentityMap.cs,TestSimpleHashMap,The following statement contains a magic number: size > 0 && i < 10
Magic Number,Lucene.Net.Util,TestWeakIdentityMap,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestWeakIdentityMap.cs,TestSimpleHashMap,The following statement contains a magic number: Assert.AreEqual(2' map.Count);
Magic Number,Lucene.Net.Util,TestWeakIdentityMap,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestWeakIdentityMap.cs,TestConcurrentHashMap,The following statement contains a magic number: const int threadCount = 8' keyCount = 1024;
Magic Number,Lucene.Net.Util,TestWeakIdentityMap,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestWeakIdentityMap.cs,TestConcurrentHashMap,The following statement contains a magic number: const int threadCount = 8' keyCount = 1024;
Magic Number,Lucene.Net.Util,TestWeakIdentityMap,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestWeakIdentityMap.cs,TestConcurrentHashMap,The following statement contains a magic number: Thread.Sleep(new TimeSpan(100L));
Magic Number,Lucene.Net.Util,TestWeakIdentityMap,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestWeakIdentityMap.cs,TestConcurrentHashMap,The following statement contains a magic number: size > 0 && i < 10
Magic Number,Lucene.Net.Util,RunnableAnonymousInnerClassHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestWeakIdentityMap.cs,Run,The following statement contains a magic number: int count = AtLeast(rnd' 10000);
Magic Number,Lucene.Net.Util,RunnableAnonymousInnerClassHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestWeakIdentityMap.cs,Run,The following statement contains a magic number: switch (rnd.Next(5))                          {                              case 0:                                  map.Put(keys[j]' Convert.ToInt32(j));                                  break;                              case 1:                                  int? v = map.Get(keys[j]);                                  if (v != null)                                  {                                      Assert.AreEqual(j' (int)v);                                  }                                  break;                              case 2:                                  map.Remove(keys[j]);                                  break;                              case 3:                                  // renew key' the old one will be GCed at some time:                                  keys[j] = new object();                                  break;                              case 4:                                  // check iterator still working                                  foreach (object k in map.Keys)                                  {                                      Assert.IsNotNull(k);                                  }                                  break;                              default:                                  Assert.Fail("Should not get here.");                                  break;                          }
Magic Number,Lucene.Net.Util,RunnableAnonymousInnerClassHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestWeakIdentityMap.cs,Run,The following statement contains a magic number: switch (rnd.Next(5))                          {                              case 0:                                  map.Put(keys[j]' Convert.ToInt32(j));                                  break;                              case 1:                                  int? v = map.Get(keys[j]);                                  if (v != null)                                  {                                      Assert.AreEqual(j' (int)v);                                  }                                  break;                              case 2:                                  map.Remove(keys[j]);                                  break;                              case 3:                                  // renew key' the old one will be GCed at some time:                                  keys[j] = new object();                                  break;                              case 4:                                  // check iterator still working                                  foreach (object k in map.Keys)                                  {                                      Assert.IsNotNull(k);                                  }                                  break;                              default:                                  Assert.Fail("Should not get here.");                                  break;                          }
Magic Number,Lucene.Net.Util,RunnableAnonymousInnerClassHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestWeakIdentityMap.cs,Run,The following statement contains a magic number: switch (rnd.Next(5))                          {                              case 0:                                  map.Put(keys[j]' Convert.ToInt32(j));                                  break;                              case 1:                                  int? v = map.Get(keys[j]);                                  if (v != null)                                  {                                      Assert.AreEqual(j' (int)v);                                  }                                  break;                              case 2:                                  map.Remove(keys[j]);                                  break;                              case 3:                                  // renew key' the old one will be GCed at some time:                                  keys[j] = new object();                                  break;                              case 4:                                  // check iterator still working                                  foreach (object k in map.Keys)                                  {                                      Assert.IsNotNull(k);                                  }                                  break;                              default:                                  Assert.Fail("Should not get here.");                                  break;                          }
Magic Number,Lucene.Net.Util,RunnableAnonymousInnerClassHelper,D:\research\architectureSmells\repos\apache_lucenenet\src\Lucene.Net.Tests\Util\TestWeakIdentityMap.cs,Run,The following statement contains a magic number: switch (rnd.Next(5))                          {                              case 0:                                  map.Put(keys[j]' Convert.ToInt32(j));                                  break;                              case 1:                                  int? v = map.Get(keys[j]);                                  if (v != null)                                  {                                      Assert.AreEqual(j' (int)v);                                  }                                  break;                              case 2:                                  map.Remove(keys[j]);                                  break;                              case 3:                                  // renew key' the old one will be GCed at some time:                                  keys[j] = new object();                                  break;                              case 4:                                  // check iterator still working                                  foreach (object k in map.Keys)                                  {                                      Assert.IsNotNull(k);                                  }                                  break;                              default:                                  Assert.Fail("Should not get here.");                                  break;                          }
