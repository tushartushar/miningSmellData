Implementation smell,Namespace,Class,File,Method,Description
Long Statement,EvHttpSharp.OwinHost,EvOwinListener,F:\newReposMay17\kekekeks_evhttp-sharp\EvHttpSharp.OwinHost\EvOwinListener.cs,HandleRequest,The length of the statement  "			env ["owin.RequestHeaders"] = req.Headers.ToDictionary (x => x.Key' x => x.Value.ToArray ()' StringComparer.OrdinalIgnoreCase); " is 127.
Long Statement,EvHttpSharp.OwinHost,EvOwinListener,F:\newReposMay17\kekekeks_evhttp-sharp\EvHttpSharp.OwinHost\EvOwinListener.cs,HandleRequest,The length of the statement  "			req.Respond ((HttpStatusCode)(int)env ["owin.ResponseStatusCode"]' headers.Where (k => k.Value.Length != 0).ToDictionary (x => x.Key' x => x.Value [0])' response.ToArray ()); " is 174.
Long Statement,EvHttpSharp.OwinHost,EvOwinListener,F:\newReposMay17\kekekeks_evhttp-sharp\EvHttpSharp.OwinHost\EvOwinListener.cs,HandleRequest,The length of the statement  "			req.Respond (HttpStatusCode.InternalServerError' new Dictionary<string' string> ()' Encoding.UTF8.GetBytes (e.ToString ())); " is 124.
Magic Number,EvHttpSharp.OwinHost,EvOwinListener,F:\newReposMay17\kekekeks_evhttp-sharp\EvHttpSharp.OwinHost\EvOwinListener.cs,HandleRequest,The following statement contains a magic number: ThreadPool.QueueUserWorkItem (async _ => {  	try {  		var env = new Dictionary<string' object> ();  		env ["owin.RequestBody"] = new MemoryStream (req.RequestBody);  		env ["owin.RequestHeaders"] = req.Headers.ToDictionary (x => x.Key' x => x.Value.ToArray ()' StringComparer.OrdinalIgnoreCase);  		env ["owin.RequestMethod"] = req.Method;  		var pairs = req.Uri.Split (new[] {  			'?'  		}' 2);  		var path = Uri.UnescapeDataString (pairs [0]);  		var query = pairs.Length == 2 ? pairs [1] : string.Empty;  		env ["owin.RequestPath"] = path;  		env ["owin.RequestPathBase"] = "/";  		env ["owin.RequestProtocol"] = "HTTP/1.0";  		env ["owin.RequestQueryString"] = query;  		env ["owin.RequestScheme"] = "http";  		var response = new MemoryStream ();  		var headers = new Dictionary<string' string[]> ();  		env ["owin.ResponseBody"] = response;  		env ["owin.ResponseHeaders"] = headers;  		env ["owin.ResponseStatusCode"] = 200;  		await _app (env);  		req.Respond ((HttpStatusCode)(int)env ["owin.ResponseStatusCode"]' headers.Where (k => k.Value.Length != 0).ToDictionary (x => x.Key' x => x.Value [0])' response.ToArray ());  	} catch (Exception e) {  		req.Respond (HttpStatusCode.InternalServerError' new Dictionary<string' string> ()' Encoding.UTF8.GetBytes (e.ToString ()));  	}  });  
Magic Number,EvHttpSharp.OwinHost,EvOwinListener,F:\newReposMay17\kekekeks_evhttp-sharp\EvHttpSharp.OwinHost\EvOwinListener.cs,HandleRequest,The following statement contains a magic number: ThreadPool.QueueUserWorkItem (async _ => {  	try {  		var env = new Dictionary<string' object> ();  		env ["owin.RequestBody"] = new MemoryStream (req.RequestBody);  		env ["owin.RequestHeaders"] = req.Headers.ToDictionary (x => x.Key' x => x.Value.ToArray ()' StringComparer.OrdinalIgnoreCase);  		env ["owin.RequestMethod"] = req.Method;  		var pairs = req.Uri.Split (new[] {  			'?'  		}' 2);  		var path = Uri.UnescapeDataString (pairs [0]);  		var query = pairs.Length == 2 ? pairs [1] : string.Empty;  		env ["owin.RequestPath"] = path;  		env ["owin.RequestPathBase"] = "/";  		env ["owin.RequestProtocol"] = "HTTP/1.0";  		env ["owin.RequestQueryString"] = query;  		env ["owin.RequestScheme"] = "http";  		var response = new MemoryStream ();  		var headers = new Dictionary<string' string[]> ();  		env ["owin.ResponseBody"] = response;  		env ["owin.ResponseHeaders"] = headers;  		env ["owin.ResponseStatusCode"] = 200;  		await _app (env);  		req.Respond ((HttpStatusCode)(int)env ["owin.ResponseStatusCode"]' headers.Where (k => k.Value.Length != 0).ToDictionary (x => x.Key' x => x.Value [0])' response.ToArray ());  	} catch (Exception e) {  		req.Respond (HttpStatusCode.InternalServerError' new Dictionary<string' string> ()' Encoding.UTF8.GetBytes (e.ToString ()));  	}  });  
Magic Number,EvHttpSharp.OwinHost,EvOwinListener,F:\newReposMay17\kekekeks_evhttp-sharp\EvHttpSharp.OwinHost\EvOwinListener.cs,HandleRequest,The following statement contains a magic number: ThreadPool.QueueUserWorkItem (async _ => {  	try {  		var env = new Dictionary<string' object> ();  		env ["owin.RequestBody"] = new MemoryStream (req.RequestBody);  		env ["owin.RequestHeaders"] = req.Headers.ToDictionary (x => x.Key' x => x.Value.ToArray ()' StringComparer.OrdinalIgnoreCase);  		env ["owin.RequestMethod"] = req.Method;  		var pairs = req.Uri.Split (new[] {  			'?'  		}' 2);  		var path = Uri.UnescapeDataString (pairs [0]);  		var query = pairs.Length == 2 ? pairs [1] : string.Empty;  		env ["owin.RequestPath"] = path;  		env ["owin.RequestPathBase"] = "/";  		env ["owin.RequestProtocol"] = "HTTP/1.0";  		env ["owin.RequestQueryString"] = query;  		env ["owin.RequestScheme"] = "http";  		var response = new MemoryStream ();  		var headers = new Dictionary<string' string[]> ();  		env ["owin.ResponseBody"] = response;  		env ["owin.ResponseHeaders"] = headers;  		env ["owin.ResponseStatusCode"] = 200;  		await _app (env);  		req.Respond ((HttpStatusCode)(int)env ["owin.ResponseStatusCode"]' headers.Where (k => k.Value.Length != 0).ToDictionary (x => x.Key' x => x.Value [0])' response.ToArray ());  	} catch (Exception e) {  		req.Respond (HttpStatusCode.InternalServerError' new Dictionary<string' string> ()' Encoding.UTF8.GetBytes (e.ToString ()));  	}  });  
Magic Number,EvHttpSharp.OwinHost,EvOwinListener,F:\newReposMay17\kekekeks_evhttp-sharp\EvHttpSharp.OwinHost\EvOwinListener.cs,HandleRequest,The following statement contains a magic number: try {  	var env = new Dictionary<string' object> ();  	env ["owin.RequestBody"] = new MemoryStream (req.RequestBody);  	env ["owin.RequestHeaders"] = req.Headers.ToDictionary (x => x.Key' x => x.Value.ToArray ()' StringComparer.OrdinalIgnoreCase);  	env ["owin.RequestMethod"] = req.Method;  	var pairs = req.Uri.Split (new[] {  		'?'  	}' 2);  	var path = Uri.UnescapeDataString (pairs [0]);  	var query = pairs.Length == 2 ? pairs [1] : string.Empty;  	env ["owin.RequestPath"] = path;  	env ["owin.RequestPathBase"] = "/";  	env ["owin.RequestProtocol"] = "HTTP/1.0";  	env ["owin.RequestQueryString"] = query;  	env ["owin.RequestScheme"] = "http";  	var response = new MemoryStream ();  	var headers = new Dictionary<string' string[]> ();  	env ["owin.ResponseBody"] = response;  	env ["owin.ResponseHeaders"] = headers;  	env ["owin.ResponseStatusCode"] = 200;  	await _app (env);  	req.Respond ((HttpStatusCode)(int)env ["owin.ResponseStatusCode"]' headers.Where (k => k.Value.Length != 0).ToDictionary (x => x.Key' x => x.Value [0])' response.ToArray ());  } catch (Exception e) {  	req.Respond (HttpStatusCode.InternalServerError' new Dictionary<string' string> ()' Encoding.UTF8.GetBytes (e.ToString ()));  }  
Magic Number,EvHttpSharp.OwinHost,EvOwinListener,F:\newReposMay17\kekekeks_evhttp-sharp\EvHttpSharp.OwinHost\EvOwinListener.cs,HandleRequest,The following statement contains a magic number: try {  	var env = new Dictionary<string' object> ();  	env ["owin.RequestBody"] = new MemoryStream (req.RequestBody);  	env ["owin.RequestHeaders"] = req.Headers.ToDictionary (x => x.Key' x => x.Value.ToArray ()' StringComparer.OrdinalIgnoreCase);  	env ["owin.RequestMethod"] = req.Method;  	var pairs = req.Uri.Split (new[] {  		'?'  	}' 2);  	var path = Uri.UnescapeDataString (pairs [0]);  	var query = pairs.Length == 2 ? pairs [1] : string.Empty;  	env ["owin.RequestPath"] = path;  	env ["owin.RequestPathBase"] = "/";  	env ["owin.RequestProtocol"] = "HTTP/1.0";  	env ["owin.RequestQueryString"] = query;  	env ["owin.RequestScheme"] = "http";  	var response = new MemoryStream ();  	var headers = new Dictionary<string' string[]> ();  	env ["owin.ResponseBody"] = response;  	env ["owin.ResponseHeaders"] = headers;  	env ["owin.ResponseStatusCode"] = 200;  	await _app (env);  	req.Respond ((HttpStatusCode)(int)env ["owin.ResponseStatusCode"]' headers.Where (k => k.Value.Length != 0).ToDictionary (x => x.Key' x => x.Value [0])' response.ToArray ());  } catch (Exception e) {  	req.Respond (HttpStatusCode.InternalServerError' new Dictionary<string' string> ()' Encoding.UTF8.GetBytes (e.ToString ()));  }  
Magic Number,EvHttpSharp.OwinHost,EvOwinListener,F:\newReposMay17\kekekeks_evhttp-sharp\EvHttpSharp.OwinHost\EvOwinListener.cs,HandleRequest,The following statement contains a magic number: try {  	var env = new Dictionary<string' object> ();  	env ["owin.RequestBody"] = new MemoryStream (req.RequestBody);  	env ["owin.RequestHeaders"] = req.Headers.ToDictionary (x => x.Key' x => x.Value.ToArray ()' StringComparer.OrdinalIgnoreCase);  	env ["owin.RequestMethod"] = req.Method;  	var pairs = req.Uri.Split (new[] {  		'?'  	}' 2);  	var path = Uri.UnescapeDataString (pairs [0]);  	var query = pairs.Length == 2 ? pairs [1] : string.Empty;  	env ["owin.RequestPath"] = path;  	env ["owin.RequestPathBase"] = "/";  	env ["owin.RequestProtocol"] = "HTTP/1.0";  	env ["owin.RequestQueryString"] = query;  	env ["owin.RequestScheme"] = "http";  	var response = new MemoryStream ();  	var headers = new Dictionary<string' string[]> ();  	env ["owin.ResponseBody"] = response;  	env ["owin.ResponseHeaders"] = headers;  	env ["owin.ResponseStatusCode"] = 200;  	await _app (env);  	req.Respond ((HttpStatusCode)(int)env ["owin.ResponseStatusCode"]' headers.Where (k => k.Value.Length != 0).ToDictionary (x => x.Key' x => x.Value [0])' response.ToArray ());  } catch (Exception e) {  	req.Respond (HttpStatusCode.InternalServerError' new Dictionary<string' string> ()' Encoding.UTF8.GetBytes (e.ToString ()));  }  
Magic Number,EvHttpSharp.OwinHost,EvOwinListener,F:\newReposMay17\kekekeks_evhttp-sharp\EvHttpSharp.OwinHost\EvOwinListener.cs,HandleRequest,The following statement contains a magic number: env ["owin.ResponseStatusCode"] = 200;  
