Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Nancy.Hosting.Event2,NancyEvent2Host,D:\research\architectureSmells\repos\kekekeks_evhttp-sharp\Nancy.Hosting.Event2\NancyEvent2Host.cs,CreateRequest,The method has 8 parameters. Parameters: method' host' path' headers' body' scheme' query' ip
Long Statement,Nancy.Hosting.Event2,NancyEvent2Host,D:\research\architectureSmells\repos\kekekeks_evhttp-sharp\Nancy.Hosting.Event2\NancyEvent2Host.cs,CreateRequest,The length of the statement  "            return new Request(method' new Url {Path = path' Scheme = scheme' HostName = host' Query = query ?? String.Empty}' body' headers' ip); " is 134.
Magic Number,Nancy.Hosting.Event2,NancyEvent2Host,D:\research\architectureSmells\repos\kekekeks_evhttp-sharp\Nancy.Hosting.Event2\NancyEvent2Host.cs,RequestHandler,The following statement contains a magic number: ThreadPool.QueueUserWorkItem(_ =>              {                  Request nreq;                  try                  {                      PreProcessRequest(req);                      var pairs = req.Uri.Split(new[] {'?'}' 2);                      var path = Uri.UnescapeDataString(pairs[0]);                      var query = pairs.Length == 2 ? pairs[1] : string.Empty;                        nreq = CreateRequest(req.Method' req.Host' path' req.Headers'                          RequestStream.FromStream(new MemoryStream(req.RequestBody))' "http"' query' req.UserHostAddress);                  }                  catch(Exception e)                  {                      DoRespond(req' GetExceptionResponse(e));                      return;                  }                  try                  {                      _engine.HandleRequest(                          nreq'                          ctx =>                          {                              ResponseData resp;                              try                              {                                  var ms = new MemoryStream();                                  PostProcessNancyResponse(nreq' ctx.Response);                                  ctx.Response.Contents(ms);                                  resp = new ResponseData(ctx.Response.StatusCode' ms.ToArray()' ctx.Response.Headers);                                }                              catch (Exception e)                              {                                  resp = GetExceptionResponse(e);                              }                              DoRespond(req' resp);                          }'                          exception => DoRespond(req' GetExceptionResponse(exception)));                  }                  catch (Exception e)                  {                      DoRespond(req' GetExceptionResponse(e));                  }              });
Magic Number,Nancy.Hosting.Event2,NancyEvent2Host,D:\research\architectureSmells\repos\kekekeks_evhttp-sharp\Nancy.Hosting.Event2\NancyEvent2Host.cs,RequestHandler,The following statement contains a magic number: ThreadPool.QueueUserWorkItem(_ =>              {                  Request nreq;                  try                  {                      PreProcessRequest(req);                      var pairs = req.Uri.Split(new[] {'?'}' 2);                      var path = Uri.UnescapeDataString(pairs[0]);                      var query = pairs.Length == 2 ? pairs[1] : string.Empty;                        nreq = CreateRequest(req.Method' req.Host' path' req.Headers'                          RequestStream.FromStream(new MemoryStream(req.RequestBody))' "http"' query' req.UserHostAddress);                  }                  catch(Exception e)                  {                      DoRespond(req' GetExceptionResponse(e));                      return;                  }                  try                  {                      _engine.HandleRequest(                          nreq'                          ctx =>                          {                              ResponseData resp;                              try                              {                                  var ms = new MemoryStream();                                  PostProcessNancyResponse(nreq' ctx.Response);                                  ctx.Response.Contents(ms);                                  resp = new ResponseData(ctx.Response.StatusCode' ms.ToArray()' ctx.Response.Headers);                                }                              catch (Exception e)                              {                                  resp = GetExceptionResponse(e);                              }                              DoRespond(req' resp);                          }'                          exception => DoRespond(req' GetExceptionResponse(exception)));                  }                  catch (Exception e)                  {                      DoRespond(req' GetExceptionResponse(e));                  }              });
