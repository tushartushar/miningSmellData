Implementation smell,Namespace,Class,File,Method,Description
Magic Number,Tests,SimpleServerTests,D:\research\architectureSmells\repos\kekekeks_evhttp-sharp\Tests\SimpleServerTests.cs,WithEachServer,The following statement contains a magic number: test(cb => new EventHttpMultiworkerListener(cb' 2));
Magic Number,Tests,SimpleServerTests,D:\research\architectureSmells\repos\kekekeks_evhttp-sharp\Tests\SimpleServerTests.cs,ServerShouldWaitForPendingRequests,The following statement contains a magic number: WithEachServer(listener =>              {                  using (var server = listener(r => ThreadPool.QueueUserWorkItem(_ =>                  {                      Thread.Sleep(1000);                      r.Respond(HttpStatusCode.OK' new Dictionary<string' string>()' new byte[0]);                  })))                  {                      server.Start("127.0.0.1"' _freePort);                        new WebClient().DownloadDataAsync(new Uri(_urlBase));                      Thread.Sleep(100);                      var task = server.Shutdown();                                            Thread.Sleep(500);                      Assert.False(task.IsCompleted);                      Assert.True(task.Wait(4000));                  }              });
Magic Number,Tests,SimpleServerTests,D:\research\architectureSmells\repos\kekekeks_evhttp-sharp\Tests\SimpleServerTests.cs,ServerShouldWaitForPendingRequests,The following statement contains a magic number: WithEachServer(listener =>              {                  using (var server = listener(r => ThreadPool.QueueUserWorkItem(_ =>                  {                      Thread.Sleep(1000);                      r.Respond(HttpStatusCode.OK' new Dictionary<string' string>()' new byte[0]);                  })))                  {                      server.Start("127.0.0.1"' _freePort);                        new WebClient().DownloadDataAsync(new Uri(_urlBase));                      Thread.Sleep(100);                      var task = server.Shutdown();                                            Thread.Sleep(500);                      Assert.False(task.IsCompleted);                      Assert.True(task.Wait(4000));                  }              });
Magic Number,Tests,SimpleServerTests,D:\research\architectureSmells\repos\kekekeks_evhttp-sharp\Tests\SimpleServerTests.cs,ServerShouldWaitForPendingRequests,The following statement contains a magic number: WithEachServer(listener =>              {                  using (var server = listener(r => ThreadPool.QueueUserWorkItem(_ =>                  {                      Thread.Sleep(1000);                      r.Respond(HttpStatusCode.OK' new Dictionary<string' string>()' new byte[0]);                  })))                  {                      server.Start("127.0.0.1"' _freePort);                        new WebClient().DownloadDataAsync(new Uri(_urlBase));                      Thread.Sleep(100);                      var task = server.Shutdown();                                            Thread.Sleep(500);                      Assert.False(task.IsCompleted);                      Assert.True(task.Wait(4000));                  }              });
Magic Number,Tests,SimpleServerTests,D:\research\architectureSmells\repos\kekekeks_evhttp-sharp\Tests\SimpleServerTests.cs,ServerShouldWaitForPendingRequests,The following statement contains a magic number: WithEachServer(listener =>              {                  using (var server = listener(r => ThreadPool.QueueUserWorkItem(_ =>                  {                      Thread.Sleep(1000);                      r.Respond(HttpStatusCode.OK' new Dictionary<string' string>()' new byte[0]);                  })))                  {                      server.Start("127.0.0.1"' _freePort);                        new WebClient().DownloadDataAsync(new Uri(_urlBase));                      Thread.Sleep(100);                      var task = server.Shutdown();                                            Thread.Sleep(500);                      Assert.False(task.IsCompleted);                      Assert.True(task.Wait(4000));                  }              });
